<?xml version='1.0' encoding='UTF-8' standalone='yes' ?>
<tagfile doxygen_version="1.9.3">
  <compound kind="file">
    <name>cholesky.cpp</name>
    <path>/Users/dellaert/git/github/gtsam/base/</path>
    <filename>a00128.html</filename>
    <includes id="a00122" name="cholesky.h" local="no" imported="no">gtsam/base/cholesky.h</includes>
    <includes id="a00035" name="timing.h" local="no" imported="no">gtsam/base/timing.h</includes>
    <namespace>gtsam</namespace>
    <member kind="function">
      <type>pair&lt; size_t, bool &gt;</type>
      <name>choleskyCareful</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>a747683f736c50bca16b3aab0e95b1b76</anchor>
      <arglist>(Matrix &amp;ATA, int order=-1)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>choleskyPartial</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>abe82fa6aceccfa2360cf314ab44f39ad</anchor>
      <arglist>(Matrix &amp;ABC, size_t nFrontal, size_t topleft=0)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>cholesky.h</name>
    <path>/Users/dellaert/git/github/gtsam/base/</path>
    <filename>a00122.html</filename>
    <includes id="a00050" name="Matrix.h" local="no" imported="no">gtsam/base/Matrix.h</includes>
    <namespace>gtsam</namespace>
    <member kind="function">
      <type>pair&lt; size_t, bool &gt;</type>
      <name>choleskyCareful</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>a747683f736c50bca16b3aab0e95b1b76</anchor>
      <arglist>(Matrix &amp;ATA, int order=-1)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>choleskyPartial</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>abe82fa6aceccfa2360cf314ab44f39ad</anchor>
      <arglist>(Matrix &amp;ABC, size_t nFrontal, size_t topleft=0)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>concepts.h</name>
    <path>/Users/dellaert/git/github/gtsam/geometry/</path>
    <filename>a08940.html</filename>
    <includes id="a00050" name="Matrix.h" local="no" imported="no">gtsam/base/Matrix.h</includes>
    <class kind="class">gtsam::PoseConcept</class>
    <namespace>gtsam</namespace>
    <member kind="define">
      <type>#define</type>
      <name>GTSAM_CONCEPT_POSE_INST</name>
      <anchorfile>a08940.html</anchorfile>
      <anchor>a1ac1dbb1c81293b35cbab7722ac657ac</anchor>
      <arglist>(T)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>debug.cpp</name>
    <path>/Users/dellaert/git/github/gtsam/base/</path>
    <filename>a00104.html</filename>
    <includes id="a00011" name="debug.h" local="no" imported="no">gtsam/base/debug.h</includes>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>debug.h</name>
    <path>/Users/dellaert/git/github/gtsam/base/</path>
    <filename>a00011.html</filename>
    <includes id="a00047" name="FastMap.h" local="no" imported="no">gtsam/base/FastMap.h</includes>
    <includes id="a01256" name="global_includes.h" local="no" imported="no">gtsam/global_includes.h</includes>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>DSFMap.h</name>
    <path>/Users/dellaert/git/github/gtsam/base/</path>
    <filename>a00113.html</filename>
    <class kind="class">gtsam::DSFMap</class>
    <class kind="struct">gtsam::DSFMap::Entry</class>
    <class kind="class">gtsam::IndexPair</class>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>DSFVector.cpp</name>
    <path>/Users/dellaert/git/github/gtsam/base/</path>
    <filename>a00119.html</filename>
    <includes id="a00059" name="DSFVector.h" local="no" imported="no">gtsam/base/DSFVector.h</includes>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>DSFVector.h</name>
    <path>/Users/dellaert/git/github/gtsam/base/</path>
    <filename>a00059.html</filename>
    <includes id="a01256" name="global_includes.h" local="no" imported="no">gtsam/global_includes.h</includes>
    <class kind="class">gtsam::DSFBase</class>
    <class kind="class">gtsam::DSFVector</class>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>FastDefaultAllocator.h</name>
    <path>/Users/dellaert/git/github/gtsam/base/</path>
    <filename>a00005.html</filename>
    <class kind="struct">gtsam::internal::FastDefaultAllocator</class>
    <class kind="struct">gtsam::internal::FastDefaultVectorAllocator</class>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>FastList.h</name>
    <path>/Users/dellaert/git/github/gtsam/base/</path>
    <filename>a00023.html</filename>
    <includes id="a00005" name="FastDefaultAllocator.h" local="no" imported="no">gtsam/base/FastDefaultAllocator.h</includes>
    <class kind="class">gtsam::FastList</class>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>FastMap.h</name>
    <path>/Users/dellaert/git/github/gtsam/base/</path>
    <filename>a00047.html</filename>
    <includes id="a00005" name="FastDefaultAllocator.h" local="no" imported="no">gtsam/base/FastDefaultAllocator.h</includes>
    <class kind="class">gtsam::FastMap</class>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>FastSet.h</name>
    <path>/Users/dellaert/git/github/gtsam/base/</path>
    <filename>a00080.html</filename>
    <includes id="a00005" name="FastDefaultAllocator.h" local="no" imported="no">gtsam/base/FastDefaultAllocator.h</includes>
    <includes id="a00101" name="Testable.h" local="no" imported="no">gtsam/base/Testable.h</includes>
    <class kind="class">gtsam::FastSet</class>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>FastVector.h</name>
    <path>/Users/dellaert/git/github/gtsam/base/</path>
    <filename>a00002.html</filename>
    <includes id="a00005" name="FastDefaultAllocator.h" local="no" imported="no">gtsam/base/FastDefaultAllocator.h</includes>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>Group.h</name>
    <path>/Users/dellaert/git/github/gtsam/base/</path>
    <filename>a00086.html</filename>
    <includes id="a00101" name="Testable.h" local="no" imported="no">gtsam/base/Testable.h</includes>
    <class kind="struct">gtsam::group_tag</class>
    <class kind="struct">gtsam::multiplicative_group_tag</class>
    <class kind="struct">gtsam::additive_group_tag</class>
    <class kind="class">gtsam::IsGroup</class>
    <class kind="class">gtsam::DirectProduct</class>
    <class kind="struct">gtsam::traits&lt; DirectProduct&lt; G, H &gt; &gt;</class>
    <class kind="class">gtsam::DirectSum</class>
    <class kind="struct">gtsam::traits&lt; DirectSum&lt; G, H &gt; &gt;</class>
    <namespace>gtsam</namespace>
    <member kind="define">
      <type>#define</type>
      <name>GTSAM_CONCEPT_GROUP_INST</name>
      <anchorfile>a00086.html</anchorfile>
      <anchor>aac1ea136475ea605715c809f4b3f0156</anchor>
      <arglist>(T)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BOOST_CONCEPT_REQUIRES</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>a2e95b5b5508cf3284107e979401bd1a4</anchor>
      <arglist>(((IsGroup&lt; G &gt;)),(bool)) check_group_invariants(const G &amp;a</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Lie.h</name>
    <path>/Users/dellaert/git/github/gtsam/base/</path>
    <filename>a00131.html</filename>
    <includes id="a00110" name="Manifold.h" local="no" imported="no">gtsam/base/Manifold.h</includes>
    <includes id="a00086" name="Group.h" local="no" imported="no">gtsam/base/Group.h</includes>
    <class kind="struct">gtsam::LieGroup</class>
    <class kind="struct">gtsam::lie_group_tag</class>
    <class kind="struct">gtsam::internal::LieGroupTraits</class>
    <class kind="struct">gtsam::internal::LieGroup</class>
    <class kind="class">gtsam::IsLieGroup</class>
    <class kind="class">gtsam::TransformCovariance</class>
    <namespace>gtsam</namespace>
    <member kind="define">
      <type>#define</type>
      <name>GTSAM_CONCEPT_LIE_INST</name>
      <anchorfile>a00131.html</anchorfile>
      <anchor>aeef5af7d583d275fbc0e6e5af8bf2afc</anchor>
      <arglist>(T)</arglist>
    </member>
    <member kind="function">
      <type>Class</type>
      <name>between_default</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>abd92914d0822d42584d46f31fb500048</anchor>
      <arglist>(const Class &amp;l1, const Class &amp;l2)</arglist>
    </member>
    <member kind="function">
      <type>Vector</type>
      <name>logmap_default</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>a5c6ccec4a3ea452361c0956766bccef5</anchor>
      <arglist>(const Class &amp;l0, const Class &amp;lp)</arglist>
    </member>
    <member kind="function">
      <type>Class</type>
      <name>expmap_default</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>af5a7c0a7422c38a0baa131c073e233ac</anchor>
      <arglist>(const Class &amp;t, const Vector &amp;d)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>BCH</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>adbd55c711e6ceee791b595558eb3ec8a</anchor>
      <arglist>(const T &amp;X, const T &amp;Y)</arglist>
    </member>
    <member kind="function">
      <type>Matrix</type>
      <name>wedge</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>afe28b7f8e3592fb9f5cf9ebae09497ba</anchor>
      <arglist>(const Vector &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>expm</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>a3041816208c79ef76d3ef2e0991d90b2</anchor>
      <arglist>(const Vector &amp;x, int K=7)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>interpolate</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>adaf06b04fa93b050e99bc3d571d85d53</anchor>
      <arglist>(const T &amp;X, const T &amp;Y, double t, typename MakeOptionalJacobian&lt; T, T &gt;::type Hx=boost::none, typename MakeOptionalJacobian&lt; T, T &gt;::type Hy=boost::none)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>LieMatrix.h</name>
    <path>/Users/dellaert/git/github/gtsam/base/</path>
    <filename>a00068.html</filename>
  </compound>
  <compound kind="file">
    <name>lieProxies.h</name>
    <path>/Users/dellaert/git/github/gtsam/base/</path>
    <filename>a00143.html</filename>
    <includes id="a01256" name="global_includes.h" local="no" imported="no">gtsam/global_includes.h</includes>
    <namespace>gtsam</namespace>
    <member kind="function">
      <type>T</type>
      <name>between</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a72a7c561cc91f437a22023297fb7f658</anchor>
      <arglist>(const T &amp;t1, const T &amp;t2)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>inverse</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>aaa623dd059a67523b029af6ec20a38da</anchor>
      <arglist>(const T &amp;t)</arglist>
    </member>
    <member kind="function">
      <type>P</type>
      <name>rotate</name>
      <anchorfile>a00143.html</anchorfile>
      <anchor>a644bbe6719d8dd756e11e8b3d2fd229a</anchor>
      <arglist>(const T &amp;r, const P &amp;pt)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>LieScalar.h</name>
    <path>/Users/dellaert/git/github/gtsam/base/</path>
    <filename>a00089.html</filename>
  </compound>
  <compound kind="file">
    <name>LieVector.h</name>
    <path>/Users/dellaert/git/github/gtsam/base/</path>
    <filename>a00017.html</filename>
  </compound>
  <compound kind="file">
    <name>make_shared.h</name>
    <path>/Users/dellaert/git/github/gtsam/base/</path>
    <filename>a00098.html</filename>
    <includes id="a00020" name="types.h" local="no" imported="no">gtsam/base/types.h</includes>
    <namespace>gtsam</namespace>
    <member kind="typedef">
      <type>typename std::enable_if&lt; B, T &gt;::type</type>
      <name>enable_if_t</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>a47e06cd29f4e8a20a8a7842e4045845f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>gtsam::enable_if_t&lt; needs_eigen_aligned_allocator&lt; T &gt;::value, boost::shared_ptr&lt; T &gt; &gt;</type>
      <name>make_shared</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>abcb9ece2bd206193ac40f118f1815c0e</anchor>
      <arglist>(Args &amp;&amp;... args)</arglist>
    </member>
    <member kind="function">
      <type>gtsam::enable_if_t&lt;!needs_eigen_aligned_allocator&lt; T &gt;::value, boost::shared_ptr&lt; T &gt; &gt;</type>
      <name>make_shared</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>a6f805b32c5544e5552d702d5e2b4e801</anchor>
      <arglist>(Args &amp;&amp;... args)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Manifold.h</name>
    <path>/Users/dellaert/git/github/gtsam/base/</path>
    <filename>a00110.html</filename>
    <includes id="a00050" name="Matrix.h" local="no" imported="no">gtsam/base/Matrix.h</includes>
    <includes id="a00101" name="Testable.h" local="no" imported="no">gtsam/base/Testable.h</includes>
    <includes id="a00062" name="OptionalJacobian.h" local="no" imported="no">gtsam/base/OptionalJacobian.h</includes>
    <class kind="struct">gtsam::manifold_tag</class>
    <class kind="struct">gtsam::internal::HasManifoldPrereqs</class>
    <class kind="struct">gtsam::internal::GetDimensionImpl</class>
    <class kind="struct">gtsam::internal::GetDimensionImpl&lt; Class, Eigen::Dynamic &gt;</class>
    <class kind="struct">gtsam::internal::ManifoldTraits</class>
    <class kind="struct">gtsam::internal::Manifold</class>
    <class kind="struct">gtsam::FixedDimension</class>
    <namespace>gtsam</namespace>
    <member kind="define">
      <type>#define</type>
      <name>GTSAM_CONCEPT_MANIFOLD_INST</name>
      <anchorfile>a00110.html</anchorfile>
      <anchor>a64b5e2e3c812d2cdea5ee294100f825f</anchor>
      <arglist>(T)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BOOST_CONCEPT_REQUIRES</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>ae03a6aedf0a82f67c2f3e987fb3aacba</anchor>
      <arglist>(((IsTestable&lt; T &gt;)),(bool)) check_manifold_invariants(const T &amp;a</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Matrix.cpp</name>
    <path>/Users/dellaert/git/github/gtsam/base/</path>
    <filename>a00107.html</filename>
    <includes id="a01256" name="global_includes.h" local="no" imported="no">gtsam/global_includes.h</includes>
    <includes id="a00050" name="Matrix.h" local="no" imported="no">gtsam/base/Matrix.h</includes>
    <includes id="a00035" name="timing.h" local="no" imported="no">gtsam/base/timing.h</includes>
    <includes id="a00134" name="Vector.h" local="no" imported="no">gtsam/base/Vector.h</includes>
    <includes id="a00023" name="FastList.h" local="no" imported="no">gtsam/base/FastList.h</includes>
    <namespace>gtsam</namespace>
    <member kind="function">
      <type>bool</type>
      <name>assert_equal</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>a3f9622226dfe06908f11b42bf0bdd22d</anchor>
      <arglist>(const Matrix &amp;A, const Matrix &amp;B, double tol=1e-9)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>assert_inequal</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>a7a116d0643f123ef3b15d91056506492</anchor>
      <arglist>(const Matrix &amp;A, const Matrix &amp;B, double tol=1e-9)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>assert_equal</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>abb0e19bbbeaca95843e8161b89a12fda</anchor>
      <arglist>(const std::list&lt; Matrix &gt; &amp;As, const std::list&lt; Matrix &gt; &amp;Bs, double tol=1e-9)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>linear_independent</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>ad8f0349471464c1fb515819d9503849a</anchor>
      <arglist>(const Matrix &amp;A, const Matrix &amp;B, double tol=1e-9)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>linear_dependent</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>a4b81794af72954abafbb726fc712f5db</anchor>
      <arglist>(const Matrix &amp;A, const Matrix &amp;B, double tol=1e-9)</arglist>
    </member>
    <member kind="function">
      <type>Vector</type>
      <name>operator^</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>a2218e53a2b99c449e70aa5b7805895fc</anchor>
      <arglist>(const Matrix &amp;A, const Vector &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>a54fa43c89c5334314c8c75939dd5c2d7</anchor>
      <arglist>(const Matrix &amp;A, const std::string &amp;s, std::ostream &amp;stream)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>a44ead03912d5dcf094d8421e1702ee71</anchor>
      <arglist>(const Matrix &amp;A, const std::string &amp;s=&quot;&quot;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>save</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>a3eb7eed9019d3fda8fcf74fbf85b85c9</anchor>
      <arglist>(const Matrix &amp;A, const std::string &amp;s, const std::string &amp;filename)</arglist>
    </member>
    <member kind="function">
      <type>istream &amp;</type>
      <name>operator&gt;&gt;</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>a7d85957bab2d18cf56ab9aaf95a106de</anchor>
      <arglist>(std::istream &amp;inputStream, Matrix &amp;destinationMatrix)</arglist>
    </member>
    <member kind="function">
      <type>Matrix</type>
      <name>diag</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>af1c32907adce74cf9edd6ee5bba5a085</anchor>
      <arglist>(const std::vector&lt; Matrix &gt; &amp;Hs)</arglist>
    </member>
    <member kind="function">
      <type>pair&lt; Matrix, Matrix &gt;</type>
      <name>qr</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>ae32c295e2c40c1e85f146a8a6266eaa8</anchor>
      <arglist>(const Matrix &amp;A)</arglist>
    </member>
    <member kind="function">
      <type>list&lt; boost::tuple&lt; Vector, double, double &gt; &gt;</type>
      <name>weighted_eliminate</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>a60019a03f26b92c6b2a08e43d153d4c0</anchor>
      <arglist>(Matrix &amp;A, Vector &amp;b, const Vector &amp;sigmas)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>householder_</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>abdd1ab05e8ac90b340fbd8f3b322dc6d</anchor>
      <arglist>(Matrix &amp;A, size_t k, bool copy_vectors)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>householder</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>a7baa2f3184a444adce108633c0265e0c</anchor>
      <arglist>(Matrix &amp;A, size_t k)</arglist>
    </member>
    <member kind="function">
      <type>Vector</type>
      <name>backSubstituteLower</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>a0d998e1b770c9864946ddb031b1c4522</anchor>
      <arglist>(const Matrix &amp;L, const Vector &amp;b, bool unit=false)</arglist>
    </member>
    <member kind="function">
      <type>Vector</type>
      <name>backSubstituteUpper</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>a6c4876cbe85d5651a52eda0e97c60f2f</anchor>
      <arglist>(const Matrix &amp;U, const Vector &amp;b, bool unit=false)</arglist>
    </member>
    <member kind="function">
      <type>Vector</type>
      <name>backSubstituteUpper</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>a8b0bf332d52b333dab2b20d763c8925b</anchor>
      <arglist>(const Vector &amp;b, const Matrix &amp;U, bool unit=false)</arglist>
    </member>
    <member kind="function">
      <type>Matrix</type>
      <name>stack</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>a5c82884a356ddd09229a5283aed04df9</anchor>
      <arglist>(size_t nrMatrices,...)</arglist>
    </member>
    <member kind="function">
      <type>Matrix</type>
      <name>collect</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>ad8b524ba6c9aed0d21a020999c9b5d88</anchor>
      <arglist>(const std::vector&lt; const Matrix * &gt; &amp;matrices, size_t m=0, size_t n=0)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>vector_scale_inplace</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>a24d3ad0252f91f0ec301593c45cf5af7</anchor>
      <arglist>(const Vector &amp;v, Matrix &amp;A, bool inf_mask=false)</arglist>
    </member>
    <member kind="function">
      <type>Matrix</type>
      <name>cholesky_inverse</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>aba542e2cd85f08b76f80a0871a4ea713</anchor>
      <arglist>(const Matrix &amp;A)</arglist>
    </member>
    <member kind="function">
      <type>Matrix</type>
      <name>inverse_square_root</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>aff78dee59ac0250432081f39deb5f6d1</anchor>
      <arglist>(const Matrix &amp;A)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>svd</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>a8d7e46204d953f64a39445599dbd7eee</anchor>
      <arglist>(const Matrix &amp;A, Matrix &amp;U, Vector &amp;S, Matrix &amp;V)</arglist>
    </member>
    <member kind="function">
      <type>boost::tuple&lt; int, double, Vector &gt;</type>
      <name>DLT</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>ab2c65f1a69009a306b6a5f9ef31dcee2</anchor>
      <arglist>(const Matrix &amp;A, double rank_tol=1e-9)</arglist>
    </member>
    <member kind="function">
      <type>Matrix</type>
      <name>expm</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>ab15462d8c16813d0a7a5b1f76a2f64b7</anchor>
      <arglist>(const Matrix &amp;A, size_t K=7)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>inplace_QR</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>a7eec9339ab5a008a28ddfaa6b2c94611</anchor>
      <arglist>(Matrix &amp;A)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Matrix.h</name>
    <path>/Users/dellaert/git/github/gtsam/base/</path>
    <filename>a00050.html</filename>
    <includes id="a00062" name="OptionalJacobian.h" local="no" imported="no">gtsam/base/OptionalJacobian.h</includes>
    <includes id="a00134" name="Vector.h" local="no" imported="no">gtsam/base/Vector.h</includes>
    <class kind="struct">gtsam::Reshape</class>
    <class kind="struct">gtsam::Reshape&lt; M, M, InOptions, M, M, InOptions &gt;</class>
    <class kind="struct">gtsam::Reshape&lt; M, N, InOptions, M, N, InOptions &gt;</class>
    <class kind="struct">gtsam::Reshape&lt; N, M, InOptions, M, N, InOptions &gt;</class>
    <class kind="struct">gtsam::MultiplyWithInverse</class>
    <class kind="struct">gtsam::MultiplyWithInverseFunction</class>
    <namespace>gtsam</namespace>
    <member kind="function">
      <type>bool</type>
      <name>equal_with_abs_tol</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>af31e657258505b2e5148846ebbaa3195</anchor>
      <arglist>(const Eigen::DenseBase&lt; MATRIX &gt; &amp;A, const Eigen::DenseBase&lt; MATRIX &gt; &amp;B, double tol=1e-9)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>afd5b3cf3f54adcbdd6d9e7403f1a792f</anchor>
      <arglist>(const Matrix &amp;A, const Matrix &amp;B)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>ab235abf7505b634be2165e0db58239dd</anchor>
      <arglist>(const Matrix &amp;A, const Matrix &amp;B)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>assert_equal</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>a3f9622226dfe06908f11b42bf0bdd22d</anchor>
      <arglist>(const Matrix &amp;A, const Matrix &amp;B, double tol=1e-9)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>assert_inequal</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>a7a116d0643f123ef3b15d91056506492</anchor>
      <arglist>(const Matrix &amp;A, const Matrix &amp;B, double tol=1e-9)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>assert_equal</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>abb0e19bbbeaca95843e8161b89a12fda</anchor>
      <arglist>(const std::list&lt; Matrix &gt; &amp;As, const std::list&lt; Matrix &gt; &amp;Bs, double tol=1e-9)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>linear_independent</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>ad8f0349471464c1fb515819d9503849a</anchor>
      <arglist>(const Matrix &amp;A, const Matrix &amp;B, double tol=1e-9)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>linear_dependent</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>a4b81794af72954abafbb726fc712f5db</anchor>
      <arglist>(const Matrix &amp;A, const Matrix &amp;B, double tol=1e-9)</arglist>
    </member>
    <member kind="function">
      <type>Vector</type>
      <name>operator^</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>a2218e53a2b99c449e70aa5b7805895fc</anchor>
      <arglist>(const Matrix &amp;A, const Vector &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>MATRIX</type>
      <name>prod</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>abc29e3164ed30e785a3c48dfd1aa6ca5</anchor>
      <arglist>(const MATRIX &amp;A, const MATRIX &amp;B)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>a54fa43c89c5334314c8c75939dd5c2d7</anchor>
      <arglist>(const Matrix &amp;A, const std::string &amp;s, std::ostream &amp;stream)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>a44ead03912d5dcf094d8421e1702ee71</anchor>
      <arglist>(const Matrix &amp;A, const std::string &amp;s=&quot;&quot;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>save</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>a3eb7eed9019d3fda8fcf74fbf85b85c9</anchor>
      <arglist>(const Matrix &amp;A, const std::string &amp;s, const std::string &amp;filename)</arglist>
    </member>
    <member kind="function">
      <type>istream &amp;</type>
      <name>operator&gt;&gt;</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>a7d85957bab2d18cf56ab9aaf95a106de</anchor>
      <arglist>(std::istream &amp;inputStream, Matrix &amp;destinationMatrix)</arglist>
    </member>
    <member kind="function">
      <type>Eigen::Block&lt; const MATRIX &gt;</type>
      <name>sub</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>a9ae1d9fe2ccad044fbb88b5c1d9e035a</anchor>
      <arglist>(const MATRIX &amp;A, size_t i1, size_t i2, size_t j1, size_t j2)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>insertSub</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>ad1088fa2d1494e6a4123a6bc3f5c2d7e</anchor>
      <arglist>(Eigen::MatrixBase&lt; Derived1 &gt; &amp;fullMatrix, const Eigen::MatrixBase&lt; Derived2 &gt; &amp;subMatrix, size_t i, size_t j)</arglist>
    </member>
    <member kind="function">
      <type>Matrix</type>
      <name>diag</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>af1c32907adce74cf9edd6ee5bba5a085</anchor>
      <arglist>(const std::vector&lt; Matrix &gt; &amp;Hs)</arglist>
    </member>
    <member kind="function">
      <type>const MATRIX::ConstColXpr</type>
      <name>column</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>a559dba69e2854eb66e34222f60f55722</anchor>
      <arglist>(const MATRIX &amp;A, size_t j)</arglist>
    </member>
    <member kind="function">
      <type>const MATRIX::ConstRowXpr</type>
      <name>row</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>a2754f325c8600303d627d9e8cf1f9949</anchor>
      <arglist>(const MATRIX &amp;A, size_t j)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>zeroBelowDiagonal</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>a57edf6ed7312f63d35f73233665c334d</anchor>
      <arglist>(MATRIX &amp;A, size_t cols=0)</arglist>
    </member>
    <member kind="function">
      <type>Matrix</type>
      <name>trans</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>aa2e36d7ab63000feddaeb61bbfcf2db1</anchor>
      <arglist>(const Matrix &amp;A)</arglist>
    </member>
    <member kind="function">
      <type>pair&lt; Matrix, Matrix &gt;</type>
      <name>qr</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>ae32c295e2c40c1e85f146a8a6266eaa8</anchor>
      <arglist>(const Matrix &amp;A)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>inplace_QR</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>a7eec9339ab5a008a28ddfaa6b2c94611</anchor>
      <arglist>(Matrix &amp;A)</arglist>
    </member>
    <member kind="function">
      <type>list&lt; boost::tuple&lt; Vector, double, double &gt; &gt;</type>
      <name>weighted_eliminate</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>a60019a03f26b92c6b2a08e43d153d4c0</anchor>
      <arglist>(Matrix &amp;A, Vector &amp;b, const Vector &amp;sigmas)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>householder_</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>abdd1ab05e8ac90b340fbd8f3b322dc6d</anchor>
      <arglist>(Matrix &amp;A, size_t k, bool copy_vectors)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>householder</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>a7baa2f3184a444adce108633c0265e0c</anchor>
      <arglist>(Matrix &amp;A, size_t k)</arglist>
    </member>
    <member kind="function">
      <type>Vector</type>
      <name>backSubstituteUpper</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>a6c4876cbe85d5651a52eda0e97c60f2f</anchor>
      <arglist>(const Matrix &amp;U, const Vector &amp;b, bool unit=false)</arglist>
    </member>
    <member kind="function">
      <type>Vector</type>
      <name>backSubstituteUpper</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>a8b0bf332d52b333dab2b20d763c8925b</anchor>
      <arglist>(const Vector &amp;b, const Matrix &amp;U, bool unit=false)</arglist>
    </member>
    <member kind="function">
      <type>Vector</type>
      <name>backSubstituteLower</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>a0d998e1b770c9864946ddb031b1c4522</anchor>
      <arglist>(const Matrix &amp;L, const Vector &amp;b, bool unit=false)</arglist>
    </member>
    <member kind="function">
      <type>Matrix</type>
      <name>stack</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>a5c82884a356ddd09229a5283aed04df9</anchor>
      <arglist>(size_t nrMatrices,...)</arglist>
    </member>
    <member kind="function">
      <type>Matrix</type>
      <name>collect</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>ad8b524ba6c9aed0d21a020999c9b5d88</anchor>
      <arglist>(const std::vector&lt; const Matrix * &gt; &amp;matrices, size_t m=0, size_t n=0)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>vector_scale_inplace</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>a24d3ad0252f91f0ec301593c45cf5af7</anchor>
      <arglist>(const Vector &amp;v, Matrix &amp;A, bool inf_mask=false)</arglist>
    </member>
    <member kind="function">
      <type>Matrix3</type>
      <name>skewSymmetric</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>a97f108d19e52c83c331c55d35b23796e</anchor>
      <arglist>(double wx, double wy, double wz)</arglist>
    </member>
    <member kind="function">
      <type>Matrix</type>
      <name>inverse_square_root</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>aff78dee59ac0250432081f39deb5f6d1</anchor>
      <arglist>(const Matrix &amp;A)</arglist>
    </member>
    <member kind="function">
      <type>Matrix</type>
      <name>cholesky_inverse</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>aba542e2cd85f08b76f80a0871a4ea713</anchor>
      <arglist>(const Matrix &amp;A)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>svd</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>a8d7e46204d953f64a39445599dbd7eee</anchor>
      <arglist>(const Matrix &amp;A, Matrix &amp;U, Vector &amp;S, Matrix &amp;V)</arglist>
    </member>
    <member kind="function">
      <type>boost::tuple&lt; int, double, Vector &gt;</type>
      <name>DLT</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>ab2c65f1a69009a306b6a5f9ef31dcee2</anchor>
      <arglist>(const Matrix &amp;A, double rank_tol=1e-9)</arglist>
    </member>
    <member kind="function">
      <type>Matrix</type>
      <name>expm</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>ab15462d8c16813d0a7a5b1f76a2f64b7</anchor>
      <arglist>(const Matrix &amp;A, size_t K=7)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>save</name>
      <anchorfile>a00050.html</anchorfile>
      <anchor>a068f1f8df2afd609744bc82386259e71</anchor>
      <arglist>(Archive &amp;ar, const Eigen::Matrix&lt; Scalar_, Rows_, Cols_, Ops_, MaxRows_, MaxCols_ &gt; &amp;m, const unsigned int)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>numericalDerivative.h</name>
    <path>/Users/dellaert/git/github/gtsam/base/</path>
    <filename>a00125.html</filename>
    <includes id="a00749" name="VectorValues.h" local="no" imported="no">gtsam/linear/VectorValues.h</includes>
    <includes id="a00593" name="JacobianFactor.h" local="no" imported="no">gtsam/linear/JacobianFactor.h</includes>
    <includes id="a00944" name="Values.h" local="no" imported="no">gtsam/nonlinear/Values.h</includes>
    <includes id="a00131" name="Lie.h" local="no" imported="no">gtsam/base/Lie.h</includes>
    <class kind="struct">gtsam::internal::FixedSizeMatrix</class>
    <class kind="class">gtsam::G_x1</class>
    <namespace>gtsam</namespace>
    <member kind="function">
      <type>Eigen::Matrix&lt; double, N, 1 &gt;</type>
      <name>numericalGradient</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>afd8862271510196ec4e2d894f623942d</anchor>
      <arglist>(std::function&lt; double(const X &amp;)&gt; h, const X &amp;x, double delta=1e-5)</arglist>
    </member>
    <member kind="function">
      <type>internal::FixedSizeMatrix&lt; Y, X &gt;::type</type>
      <name>numericalDerivative11</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>a581a9f8db043590096fbac682b8f6a93</anchor>
      <arglist>(std::function&lt; Y(const X &amp;)&gt; h, const X &amp;x, double delta=1e-5)</arglist>
    </member>
    <member kind="function">
      <type>internal::FixedSizeMatrix&lt; Y, X &gt;::type</type>
      <name>numericalDerivative11</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>a4c4c5744f0b348d4ec6c047f796e7924</anchor>
      <arglist>(Y(*h)(const X &amp;), const X &amp;x, double delta=1e-5)</arglist>
    </member>
    <member kind="function">
      <type>internal::FixedSizeMatrix&lt; Y, X1 &gt;::type</type>
      <name>numericalDerivative21</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>a157eb3b44dd4e38bbd66f3cc68a20e43</anchor>
      <arglist>(const std::function&lt; Y(const X1 &amp;, const X2 &amp;)&gt; &amp;h, const X1 &amp;x1, const X2 &amp;x2, double delta=1e-5)</arglist>
    </member>
    <member kind="function">
      <type>internal::FixedSizeMatrix&lt; Y, X1 &gt;::type</type>
      <name>numericalDerivative21</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>afcc94e3b49906e824c01a3d56df62d33</anchor>
      <arglist>(Y(*h)(const X1 &amp;, const X2 &amp;), const X1 &amp;x1, const X2 &amp;x2, double delta=1e-5)</arglist>
    </member>
    <member kind="function">
      <type>internal::FixedSizeMatrix&lt; Y, X2 &gt;::type</type>
      <name>numericalDerivative22</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>a5b0db4ac5f279b12fc91fab4cb40b1bf</anchor>
      <arglist>(std::function&lt; Y(const X1 &amp;, const X2 &amp;)&gt; h, const X1 &amp;x1, const X2 &amp;x2, double delta=1e-5)</arglist>
    </member>
    <member kind="function">
      <type>internal::FixedSizeMatrix&lt; Y, X2 &gt;::type</type>
      <name>numericalDerivative22</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>a46d002a0529f1172aebb7e1d85d5c08c</anchor>
      <arglist>(Y(*h)(const X1 &amp;, const X2 &amp;), const X1 &amp;x1, const X2 &amp;x2, double delta=1e-5)</arglist>
    </member>
    <member kind="function">
      <type>internal::FixedSizeMatrix&lt; Y, X1 &gt;::type</type>
      <name>numericalDerivative31</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>aa8f0264edaf78d503809c1e3152340ee</anchor>
      <arglist>(std::function&lt; Y(const X1 &amp;, const X2 &amp;, const X3 &amp;)&gt; h, const X1 &amp;x1, const X2 &amp;x2, const X3 &amp;x3, double delta=1e-5)</arglist>
    </member>
    <member kind="function">
      <type>internal::FixedSizeMatrix&lt; Y, X2 &gt;::type</type>
      <name>numericalDerivative32</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>acfbadc0ab0cd9386205b2737c5d0b727</anchor>
      <arglist>(std::function&lt; Y(const X1 &amp;, const X2 &amp;, const X3 &amp;)&gt; h, const X1 &amp;x1, const X2 &amp;x2, const X3 &amp;x3, double delta=1e-5)</arglist>
    </member>
    <member kind="function">
      <type>internal::FixedSizeMatrix&lt; Y, X3 &gt;::type</type>
      <name>numericalDerivative33</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>a526a422ea611724345affed8b71d9bac</anchor>
      <arglist>(std::function&lt; Y(const X1 &amp;, const X2 &amp;, const X3 &amp;)&gt; h, const X1 &amp;x1, const X2 &amp;x2, const X3 &amp;x3, double delta=1e-5)</arglist>
    </member>
    <member kind="function">
      <type>internal::FixedSizeMatrix&lt; Y, X1 &gt;::type</type>
      <name>numericalDerivative41</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>a3b0937e08e79604ee6ab10fca6ffe65e</anchor>
      <arglist>(std::function&lt; Y(const X1 &amp;, const X2 &amp;, const X3 &amp;, const X4 &amp;)&gt; h, const X1 &amp;x1, const X2 &amp;x2, const X3 &amp;x3, const X4 &amp;x4, double delta=1e-5)</arglist>
    </member>
    <member kind="function">
      <type>internal::FixedSizeMatrix&lt; Y, X2 &gt;::type</type>
      <name>numericalDerivative42</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>af40f61e8eff01acdb028ad33b8f3529b</anchor>
      <arglist>(std::function&lt; Y(const X1 &amp;, const X2 &amp;, const X3 &amp;, const X4 &amp;)&gt; h, const X1 &amp;x1, const X2 &amp;x2, const X3 &amp;x3, const X4 &amp;x4, double delta=1e-5)</arglist>
    </member>
    <member kind="function">
      <type>internal::FixedSizeMatrix&lt; Y, X3 &gt;::type</type>
      <name>numericalDerivative43</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>a6846b5cc84c1d5a54a436121b27057e0</anchor>
      <arglist>(std::function&lt; Y(const X1 &amp;, const X2 &amp;, const X3 &amp;, const X4 &amp;)&gt; h, const X1 &amp;x1, const X2 &amp;x2, const X3 &amp;x3, const X4 &amp;x4, double delta=1e-5)</arglist>
    </member>
    <member kind="function">
      <type>internal::FixedSizeMatrix&lt; Y, X4 &gt;::type</type>
      <name>numericalDerivative44</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>a8061b20199f839b115512d95d058fcbf</anchor>
      <arglist>(std::function&lt; Y(const X1 &amp;, const X2 &amp;, const X3 &amp;, const X4 &amp;)&gt; h, const X1 &amp;x1, const X2 &amp;x2, const X3 &amp;x3, const X4 &amp;x4, double delta=1e-5)</arglist>
    </member>
    <member kind="function">
      <type>internal::FixedSizeMatrix&lt; Y, X1 &gt;::type</type>
      <name>numericalDerivative51</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>a272af6f7139b76d085279060646e32d1</anchor>
      <arglist>(std::function&lt; Y(const X1 &amp;, const X2 &amp;, const X3 &amp;, const X4 &amp;, const X5 &amp;)&gt; h, const X1 &amp;x1, const X2 &amp;x2, const X3 &amp;x3, const X4 &amp;x4, const X5 &amp;x5, double delta=1e-5)</arglist>
    </member>
    <member kind="function">
      <type>internal::FixedSizeMatrix&lt; Y, X2 &gt;::type</type>
      <name>numericalDerivative52</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>a722e98babba795ce480f89527b572251</anchor>
      <arglist>(std::function&lt; Y(const X1 &amp;, const X2 &amp;, const X3 &amp;, const X4 &amp;, const X5 &amp;)&gt; h, const X1 &amp;x1, const X2 &amp;x2, const X3 &amp;x3, const X4 &amp;x4, const X5 &amp;x5, double delta=1e-5)</arglist>
    </member>
    <member kind="function">
      <type>internal::FixedSizeMatrix&lt; Y, X3 &gt;::type</type>
      <name>numericalDerivative53</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>acc2f741132522a6ce57d544a27a95855</anchor>
      <arglist>(std::function&lt; Y(const X1 &amp;, const X2 &amp;, const X3 &amp;, const X4 &amp;, const X5 &amp;)&gt; h, const X1 &amp;x1, const X2 &amp;x2, const X3 &amp;x3, const X4 &amp;x4, const X5 &amp;x5, double delta=1e-5)</arglist>
    </member>
    <member kind="function">
      <type>internal::FixedSizeMatrix&lt; Y, X4 &gt;::type</type>
      <name>numericalDerivative54</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>a2cf5181fc7bca1ef6a1070959de7b975</anchor>
      <arglist>(std::function&lt; Y(const X1 &amp;, const X2 &amp;, const X3 &amp;, const X4 &amp;, const X5 &amp;)&gt; h, const X1 &amp;x1, const X2 &amp;x2, const X3 &amp;x3, const X4 &amp;x4, const X5 &amp;x5, double delta=1e-5)</arglist>
    </member>
    <member kind="function">
      <type>internal::FixedSizeMatrix&lt; Y, X5 &gt;::type</type>
      <name>numericalDerivative55</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>a5ca42a2fc87373c005299f3087995a97</anchor>
      <arglist>(std::function&lt; Y(const X1 &amp;, const X2 &amp;, const X3 &amp;, const X4 &amp;, const X5 &amp;)&gt; h, const X1 &amp;x1, const X2 &amp;x2, const X3 &amp;x3, const X4 &amp;x4, const X5 &amp;x5, double delta=1e-5)</arglist>
    </member>
    <member kind="function">
      <type>internal::FixedSizeMatrix&lt; Y, X1 &gt;::type</type>
      <name>numericalDerivative61</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>a0ca8a22de666bc39015da34f150df748</anchor>
      <arglist>(std::function&lt; Y(const X1 &amp;, const X2 &amp;, const X3 &amp;, const X4 &amp;, const X5 &amp;, const X6 &amp;)&gt; h, const X1 &amp;x1, const X2 &amp;x2, const X3 &amp;x3, const X4 &amp;x4, const X5 &amp;x5, const X6 &amp;x6, double delta=1e-5)</arglist>
    </member>
    <member kind="function">
      <type>internal::FixedSizeMatrix&lt; Y, X2 &gt;::type</type>
      <name>numericalDerivative62</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>ac224e2384e41171181b2dbc0f700cdc1</anchor>
      <arglist>(std::function&lt; Y(const X1 &amp;, const X2 &amp;, const X3 &amp;, const X4 &amp;, const X5 &amp;, const X6 &amp;)&gt; h, const X1 &amp;x1, const X2 &amp;x2, const X3 &amp;x3, const X4 &amp;x4, const X5 &amp;x5, const X6 &amp;x6, double delta=1e-5)</arglist>
    </member>
    <member kind="function">
      <type>internal::FixedSizeMatrix&lt; Y, X3 &gt;::type</type>
      <name>numericalDerivative63</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>a15c46aa999886d4ccd06ab73fc02db31</anchor>
      <arglist>(std::function&lt; Y(const X1 &amp;, const X2 &amp;, const X3 &amp;, const X4 &amp;, const X5 &amp;, const X6 &amp;)&gt; h, const X1 &amp;x1, const X2 &amp;x2, const X3 &amp;x3, const X4 &amp;x4, const X5 &amp;x5, const X6 &amp;x6, double delta=1e-5)</arglist>
    </member>
    <member kind="function">
      <type>internal::FixedSizeMatrix&lt; Y, X4 &gt;::type</type>
      <name>numericalDerivative64</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>a3eb3fef9c77920dfd9496e71a0bcf669</anchor>
      <arglist>(std::function&lt; Y(const X1 &amp;, const X2 &amp;, const X3 &amp;, const X4 &amp;, const X5 &amp;, const X6 &amp;)&gt; h, const X1 &amp;x1, const X2 &amp;x2, const X3 &amp;x3, const X4 &amp;x4, const X5 &amp;x5, const X6 &amp;x6, double delta=1e-5)</arglist>
    </member>
    <member kind="function">
      <type>internal::FixedSizeMatrix&lt; Y, X5 &gt;::type</type>
      <name>numericalDerivative65</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>a799c83517a20a8e0b0b014f26b50f660</anchor>
      <arglist>(std::function&lt; Y(const X1 &amp;, const X2 &amp;, const X3 &amp;, const X4 &amp;, const X5 &amp;, const X6 &amp;)&gt; h, const X1 &amp;x1, const X2 &amp;x2, const X3 &amp;x3, const X4 &amp;x4, const X5 &amp;x5, const X6 &amp;x6, double delta=1e-5)</arglist>
    </member>
    <member kind="function">
      <type>internal::FixedSizeMatrix&lt; Y, X6 &gt;::type</type>
      <name>numericalDerivative66</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>a4e010b7f436124b9b421ba7dc438d987</anchor>
      <arglist>(std::function&lt; Y(const X1 &amp;, const X2 &amp;, const X3 &amp;, const X4 &amp;, const X5 &amp;, const X6 &amp;)&gt; h, const X1 &amp;x1, const X2 &amp;x2, const X3 &amp;x3, const X4 &amp;x4, const X5 &amp;x5, const X6 &amp;x6, double delta=1e-5)</arglist>
    </member>
    <member kind="function">
      <type>internal::FixedSizeMatrix&lt; X, X &gt;::type</type>
      <name>numericalHessian</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>a11011d8e9bd69e486c9752875f710c18</anchor>
      <arglist>(std::function&lt; double(const X &amp;)&gt; f, const X &amp;x, double delta=1e-5)</arglist>
    </member>
    <member kind="function">
      <type>internal::FixedSizeMatrix&lt; X1, X1 &gt;::type</type>
      <name>numericalHessian311</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>a10295660c0177e08d45812fbb7e4c554</anchor>
      <arglist>(std::function&lt; double(const X1 &amp;, const X2 &amp;, const X3 &amp;)&gt; f, const X1 &amp;x1, const X2 &amp;x2, const X3 &amp;x3, double delta=1e-5)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>OptionalJacobian.h</name>
    <path>/Users/dellaert/git/github/gtsam/base/</path>
    <filename>a00062.html</filename>
    <class kind="class">gtsam::OptionalJacobian</class>
    <class kind="class">gtsam::OptionalJacobian&lt; Eigen::Dynamic, Eigen::Dynamic &gt;</class>
    <class kind="struct">gtsam::MakeJacobian</class>
    <class kind="struct">gtsam::MakeOptionalJacobian</class>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>ProductLieGroup.h</name>
    <path>/Users/dellaert/git/github/gtsam/base/</path>
    <filename>a00044.html</filename>
    <includes id="a00131" name="Lie.h" local="no" imported="no">gtsam/base/Lie.h</includes>
    <class kind="class">gtsam::ProductLieGroup</class>
    <class kind="struct">gtsam::traits&lt; ProductLieGroup&lt; G, H &gt; &gt;</class>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>serialization.h</name>
    <path>/Users/dellaert/git/github/gtsam/base/</path>
    <filename>a08943.html</filename>
    <namespace>gtsam</namespace>
    <member kind="function">
      <type>void</type>
      <name>serializeToStream</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>a007080ca4741cc3d3d6a209b0ae3fe61</anchor>
      <arglist>(const T &amp;input, std::ostream &amp;out_archive_stream)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>deserializeFromStream</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>ab181d2a3de466fc0c87bd29501bbc7ab</anchor>
      <arglist>(std::istream &amp;in_archive_stream, T &amp;output)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>serializeToString</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>aa12c78301a9d2968afe5a1a14baa7e90</anchor>
      <arglist>(const T &amp;input)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>deserializeFromString</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>a262487af458d1f48dd7d3bc549caae00</anchor>
      <arglist>(const std::string &amp;serialized, T &amp;output)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>serializeToFile</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>aa3261c2d455f892dae1921f8c3a39267</anchor>
      <arglist>(const T &amp;input, const std::string &amp;filename)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>deserializeFromFile</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>adbb4a71187706918faca3a11519b62f6</anchor>
      <arglist>(const std::string &amp;filename, T &amp;output)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>serialize</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>a332bad7d1e70d3c04ceca35adce7a134</anchor>
      <arglist>(const T &amp;input)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>deserialize</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>aa4d516d0d98946341ad2766521011d1b</anchor>
      <arglist>(const std::string &amp;serialized, T &amp;output)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>serializeToXMLStream</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>ae2e939177cf58b42d7ed4c9856d536c5</anchor>
      <arglist>(const T &amp;input, std::ostream &amp;out_archive_stream, const std::string &amp;name=&quot;data&quot;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>deserializeFromXMLStream</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>a8d7ea177ef3e93af15a4a77c2bd7fa8b</anchor>
      <arglist>(std::istream &amp;in_archive_stream, T &amp;output, const std::string &amp;name=&quot;data&quot;)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>serializeToXMLString</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>a16c154fe5e35242e26af8286e77eea11</anchor>
      <arglist>(const T &amp;input, const std::string &amp;name=&quot;data&quot;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>deserializeFromXMLString</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>a5f2fe2bfc17737ff9ae1fb8b210604f0</anchor>
      <arglist>(const std::string &amp;serialized, T &amp;output, const std::string &amp;name=&quot;data&quot;)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>serializeToXMLFile</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>a89449123a746480a1d668cecb5576708</anchor>
      <arglist>(const T &amp;input, const std::string &amp;filename, const std::string &amp;name=&quot;data&quot;)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>deserializeFromXMLFile</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>a0d8faf2bb0a908ff484677bb2fcf707c</anchor>
      <arglist>(const std::string &amp;filename, T &amp;output, const std::string &amp;name=&quot;data&quot;)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>serializeXML</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>a976ff7999fcc13ef602b6ece1b078bca</anchor>
      <arglist>(const T &amp;input, const std::string &amp;name=&quot;data&quot;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>deserializeXML</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>a85ab51b2e8f4cea69f72e06a5c136e85</anchor>
      <arglist>(const std::string &amp;serialized, T &amp;output, const std::string &amp;name=&quot;data&quot;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>serializeToBinaryStream</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>aa5d177a3bf16f9f5acf45ee62c816479</anchor>
      <arglist>(const T &amp;input, std::ostream &amp;out_archive_stream, const std::string &amp;name=&quot;data&quot;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>deserializeFromBinaryStream</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>a8eb16192d8ebe2532d8a69c9f2bf15b2</anchor>
      <arglist>(std::istream &amp;in_archive_stream, T &amp;output, const std::string &amp;name=&quot;data&quot;)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>serializeToBinaryString</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>a7fad959f63f2eac1478c5ede7b9ae4db</anchor>
      <arglist>(const T &amp;input, const std::string &amp;name=&quot;data&quot;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>deserializeFromBinaryString</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>a349b7ed4a67a8c3d80737e5383507bc4</anchor>
      <arglist>(const std::string &amp;serialized, T &amp;output, const std::string &amp;name=&quot;data&quot;)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>serializeToBinaryFile</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>abdff0a4b4fdf0e609aa62fb8d8b1dbba</anchor>
      <arglist>(const T &amp;input, const std::string &amp;filename, const std::string &amp;name=&quot;data&quot;)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>deserializeFromBinaryFile</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>aefeb77f2324e4bbfca2c8152c49a4565</anchor>
      <arglist>(const std::string &amp;filename, T &amp;output, const std::string &amp;name=&quot;data&quot;)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>serializeBinary</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>abb476c3e77878f7e0f70dd51871f48e7</anchor>
      <arglist>(const T &amp;input, const std::string &amp;name=&quot;data&quot;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>deserializeBinary</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>a56c41958e57a4bc7361ab593011462fd</anchor>
      <arglist>(const std::string &amp;serialized, T &amp;output, const std::string &amp;name=&quot;data&quot;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>serializeToStream</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>a007080ca4741cc3d3d6a209b0ae3fe61</anchor>
      <arglist>(const T &amp;input, std::ostream &amp;out_archive_stream)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>deserializeFromStream</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>ab181d2a3de466fc0c87bd29501bbc7ab</anchor>
      <arglist>(std::istream &amp;in_archive_stream, T &amp;output)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>serializeToString</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>aa12c78301a9d2968afe5a1a14baa7e90</anchor>
      <arglist>(const T &amp;input)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>deserializeFromString</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>a262487af458d1f48dd7d3bc549caae00</anchor>
      <arglist>(const std::string &amp;serialized, T &amp;output)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>serializeToFile</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>aa3261c2d455f892dae1921f8c3a39267</anchor>
      <arglist>(const T &amp;input, const std::string &amp;filename)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>deserializeFromFile</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>adbb4a71187706918faca3a11519b62f6</anchor>
      <arglist>(const std::string &amp;filename, T &amp;output)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>serialize</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>a332bad7d1e70d3c04ceca35adce7a134</anchor>
      <arglist>(const T &amp;input)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>deserialize</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>aa4d516d0d98946341ad2766521011d1b</anchor>
      <arglist>(const std::string &amp;serialized, T &amp;output)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>serializeToXMLStream</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>ae2e939177cf58b42d7ed4c9856d536c5</anchor>
      <arglist>(const T &amp;input, std::ostream &amp;out_archive_stream, const std::string &amp;name=&quot;data&quot;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>deserializeFromXMLStream</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>a8d7ea177ef3e93af15a4a77c2bd7fa8b</anchor>
      <arglist>(std::istream &amp;in_archive_stream, T &amp;output, const std::string &amp;name=&quot;data&quot;)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>serializeToXMLString</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>a16c154fe5e35242e26af8286e77eea11</anchor>
      <arglist>(const T &amp;input, const std::string &amp;name=&quot;data&quot;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>deserializeFromXMLString</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>a5f2fe2bfc17737ff9ae1fb8b210604f0</anchor>
      <arglist>(const std::string &amp;serialized, T &amp;output, const std::string &amp;name=&quot;data&quot;)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>serializeToXMLFile</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>a89449123a746480a1d668cecb5576708</anchor>
      <arglist>(const T &amp;input, const std::string &amp;filename, const std::string &amp;name=&quot;data&quot;)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>deserializeFromXMLFile</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>a0d8faf2bb0a908ff484677bb2fcf707c</anchor>
      <arglist>(const std::string &amp;filename, T &amp;output, const std::string &amp;name=&quot;data&quot;)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>serializeXML</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>a976ff7999fcc13ef602b6ece1b078bca</anchor>
      <arglist>(const T &amp;input, const std::string &amp;name=&quot;data&quot;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>deserializeXML</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>a85ab51b2e8f4cea69f72e06a5c136e85</anchor>
      <arglist>(const std::string &amp;serialized, T &amp;output, const std::string &amp;name=&quot;data&quot;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>serializeToBinaryStream</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>aa5d177a3bf16f9f5acf45ee62c816479</anchor>
      <arglist>(const T &amp;input, std::ostream &amp;out_archive_stream, const std::string &amp;name=&quot;data&quot;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>deserializeFromBinaryStream</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>a8eb16192d8ebe2532d8a69c9f2bf15b2</anchor>
      <arglist>(std::istream &amp;in_archive_stream, T &amp;output, const std::string &amp;name=&quot;data&quot;)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>serializeToBinaryString</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>a7fad959f63f2eac1478c5ede7b9ae4db</anchor>
      <arglist>(const T &amp;input, const std::string &amp;name=&quot;data&quot;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>deserializeFromBinaryString</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>a349b7ed4a67a8c3d80737e5383507bc4</anchor>
      <arglist>(const std::string &amp;serialized, T &amp;output, const std::string &amp;name=&quot;data&quot;)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>serializeToBinaryFile</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>abdff0a4b4fdf0e609aa62fb8d8b1dbba</anchor>
      <arglist>(const T &amp;input, const std::string &amp;filename, const std::string &amp;name=&quot;data&quot;)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>deserializeFromBinaryFile</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>aefeb77f2324e4bbfca2c8152c49a4565</anchor>
      <arglist>(const std::string &amp;filename, T &amp;output, const std::string &amp;name=&quot;data&quot;)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>serializeBinary</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>abb476c3e77878f7e0f70dd51871f48e7</anchor>
      <arglist>(const T &amp;input, const std::string &amp;name=&quot;data&quot;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>deserializeBinary</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>a56c41958e57a4bc7361ab593011462fd</anchor>
      <arglist>(const std::string &amp;serialized, T &amp;output, const std::string &amp;name=&quot;data&quot;)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>serialization.h</name>
    <path>/Users/dellaert/git/github/gtsam_unstable/slam/</path>
    <filename>a08946.html</filename>
    <includes id="a00962" name="NonlinearFactorGraph.h" local="no" imported="no">gtsam/nonlinear/NonlinearFactorGraph.h</includes>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>serializationTestHelpers.h</name>
    <path>/Users/dellaert/git/github/gtsam/base/</path>
    <filename>a00053.html</filename>
    <includes id="a08943" name="serialization.h" local="no" imported="no">gtsam/base/serialization.h</includes>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>SymmetricBlockMatrix.cpp</name>
    <path>/Users/dellaert/git/github/gtsam/base/</path>
    <filename>a00116.html</filename>
    <includes id="a00083" name="SymmetricBlockMatrix.h" local="no" imported="no">gtsam/base/SymmetricBlockMatrix.h</includes>
    <includes id="a00074" name="VerticalBlockMatrix.h" local="no" imported="no">gtsam/base/VerticalBlockMatrix.h</includes>
    <includes id="a00122" name="cholesky.h" local="no" imported="no">gtsam/base/cholesky.h</includes>
    <includes id="a00035" name="timing.h" local="no" imported="no">gtsam/base/timing.h</includes>
    <includes id="a00071" name="ThreadsafeException.h" local="no" imported="no">gtsam/base/ThreadsafeException.h</includes>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>SymmetricBlockMatrix.h</name>
    <path>/Users/dellaert/git/github/gtsam/base/</path>
    <filename>a00083.html</filename>
    <includes id="a00002" name="FastVector.h" local="no" imported="no">gtsam/base/FastVector.h</includes>
    <includes id="a00050" name="Matrix.h" local="no" imported="no">gtsam/base/Matrix.h</includes>
    <includes id="a00020" name="types.h" local="no" imported="no">gtsam/base/types.h</includes>
    <class kind="class">gtsam::SymmetricBlockMatrix</class>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>Testable.h</name>
    <path>/Users/dellaert/git/github/gtsam/base/</path>
    <filename>a00101.html</filename>
    <class kind="class">gtsam::IsTestable</class>
    <class kind="struct">gtsam::equals</class>
    <class kind="struct">gtsam::equals_star</class>
    <class kind="struct">gtsam::HasTestablePrereqs</class>
    <class kind="struct">gtsam::Testable</class>
    <namespace>gtsam</namespace>
    <member kind="define">
      <type>#define</type>
      <name>GTSAM_CONCEPT_TESTABLE_INST</name>
      <anchorfile>a00101.html</anchorfile>
      <anchor>abe0a238cdd07d484ff0be56ae945b182</anchor>
      <arglist>(T)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>equal</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>ad2dbee4a72127938c79162cc8b6d5152</anchor>
      <arglist>(const T &amp;obj1, const T &amp;obj2, double tol)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>equal</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>a1f3dc67ad88b799c469088e428c583b1</anchor>
      <arglist>(const T &amp;obj1, const T &amp;obj2)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>assert_equal</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>a659619cca082d1c10b07c033d48c54da</anchor>
      <arglist>(const V &amp;expected, const V &amp;actual, double tol=1e-9)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>TestableAssertions.h</name>
    <path>/Users/dellaert/git/github/gtsam/base/</path>
    <filename>a00014.html</filename>
    <includes id="a00101" name="Testable.h" local="no" imported="no">gtsam/base/Testable.h</includes>
    <includes id="a01256" name="global_includes.h" local="no" imported="no">gtsam/global_includes.h</includes>
    <namespace>gtsam</namespace>
    <member kind="function">
      <type>bool</type>
      <name>assert_equal</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>a982034802415eb6e9bd02355257ed96a</anchor>
      <arglist>(const Key &amp;expected, const Key &amp;actual, double tol=0.0)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>assert_equal</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>add6d6575582314cc9b5dbdbe2a86374d</anchor>
      <arglist>(const boost::optional&lt; V &gt; &amp;expected, const boost::optional&lt; V &gt; &amp;actual, double tol=1e-9)</arglist>
    </member>
    <member kind="function">
      <type>bool GTSAM_DEPRECATED</type>
      <name>assert_equal</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>a6bbdbded37ed58ebbabe6c16d66a61d9</anchor>
      <arglist>(const std::vector&lt; V &gt; &amp;expected, const std::vector&lt; V &gt; &amp;actual, double tol=1e-9)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>assert_container_equal</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>a254be27d6d4b416fa2b546c77ae783fc</anchor>
      <arglist>(const std::map&lt; V1, V2 &gt; &amp;expected, const std::map&lt; V1, V2 &gt; &amp;actual, double tol=1e-9)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>assert_container_equal</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>a2f509195ea2180d0f7dbd3a99a088ff4</anchor>
      <arglist>(const std::map&lt; size_t, V2 &gt; &amp;expected, const std::map&lt; size_t, V2 &gt; &amp;actual, double tol=1e-9)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>assert_container_equal</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>a0eec17f894b358dd9f30d7af28082ba5</anchor>
      <arglist>(const std::vector&lt; std::pair&lt; V1, V2 &gt; &gt; &amp;expected, const std::vector&lt; std::pair&lt; V1, V2 &gt; &gt; &amp;actual, double tol=1e-9)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>assert_container_equal</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>a6d6b2964354593f69848f6bf5d3e0ca1</anchor>
      <arglist>(const V &amp;expected, const V &amp;actual, double tol=1e-9)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>assert_container_equality</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>a59ba6a7db27344c5cb021f1421905020</anchor>
      <arglist>(const std::map&lt; size_t, V2 &gt; &amp;expected, const std::map&lt; size_t, V2 &gt; &amp;actual)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>assert_container_equality</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>aa0926a5d779171bd8e1d30fb5982b5c0</anchor>
      <arglist>(const V &amp;expected, const V &amp;actual)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>assert_equal</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>a21e760bc75888053afd86a27d56b6148</anchor>
      <arglist>(const std::string &amp;expected, const std::string &amp;actual)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>assert_inequal</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>a2f19ba6625a264457805513fefcb5c32</anchor>
      <arglist>(const V &amp;expected, const V &amp;actual, double tol=1e-9)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>assert_stdout_equal</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>a08641f0f7145716bba9159dd95099a44</anchor>
      <arglist>(const std::string &amp;expected, const V &amp;actual)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>assert_print_equal</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>a830c8c65902d7d0e763562e6c9357346</anchor>
      <arglist>(const std::string &amp;expected, const V &amp;actual, const std::string &amp;s=&quot;&quot;)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>ThreadsafeException.h</name>
    <path>/Users/dellaert/git/github/gtsam/base/</path>
    <filename>a00071.html</filename>
    <class kind="class">gtsam::ThreadsafeException</class>
    <class kind="class">gtsam::RuntimeErrorThreadsafe</class>
    <class kind="class">gtsam::OutOfRangeThreadsafe</class>
    <class kind="class">gtsam::InvalidArgumentThreadsafe</class>
    <class kind="class">gtsam::CholeskyFailed</class>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>timing.cpp</name>
    <path>/Users/dellaert/git/github/gtsam/base/</path>
    <filename>a00137.html</filename>
    <includes id="a00011" name="debug.h" local="no" imported="no">gtsam/base/debug.h</includes>
    <includes id="a00035" name="timing.h" local="no" imported="no">gtsam/base/timing.h</includes>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>timing.h</name>
    <path>/Users/dellaert/git/github/gtsam/base/</path>
    <filename>a00035.html</filename>
    <includes id="a00047" name="FastMap.h" local="no" imported="no">gtsam/base/FastMap.h</includes>
    <includes id="a00020" name="types.h" local="no" imported="no">gtsam/base/types.h</includes>
    <class kind="class">gtsam::internal::TimingOutline</class>
    <class kind="class">gtsam::internal::AutoTicToc</class>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>treeTraversal-inst.h</name>
    <path>/Users/dellaert/git/github/gtsam/base/</path>
    <filename>a00095.html</filename>
    <includes id="a00023" name="FastList.h" local="no" imported="no">gtsam/base/FastList.h</includes>
    <includes id="a00002" name="FastVector.h" local="no" imported="no">gtsam/base/FastVector.h</includes>
    <includes id="a00491" name="Key.h" local="no" imported="no">gtsam/inference/Key.h</includes>
    <namespace>gtsam</namespace>
    <namespace>gtsam::treeTraversal</namespace>
    <member kind="function">
      <type>void</type>
      <name>DepthFirstForest</name>
      <anchorfile>a01602.html</anchorfile>
      <anchor>a50e24f0a9085721425089cdce18f2475</anchor>
      <arglist>(FOREST &amp;forest, DATA &amp;rootData, VISITOR_PRE &amp;visitorPre, VISITOR_POST &amp;visitorPost)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>DepthFirstForest</name>
      <anchorfile>a01602.html</anchorfile>
      <anchor>a3735d0cee6f4d530e75479f7b1ebaf07</anchor>
      <arglist>(FOREST &amp;forest, DATA &amp;rootData, VISITOR_PRE &amp;visitorPre)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>DepthFirstForestParallel</name>
      <anchorfile>a01602.html</anchorfile>
      <anchor>afd7410807789da9ad91d6630063be36f</anchor>
      <arglist>(FOREST &amp;forest, DATA &amp;rootData, VISITOR_PRE &amp;visitorPre, VISITOR_POST &amp;visitorPost, int problemSizeThreshold=10)</arglist>
    </member>
    <member kind="function">
      <type>FastVector&lt; boost::shared_ptr&lt; typename FOREST::Node &gt; &gt;</type>
      <name>CloneForest</name>
      <anchorfile>a01602.html</anchorfile>
      <anchor>a67e7c6f5c4916c4a58a783e6b566d55a</anchor>
      <arglist>(const FOREST &amp;forest)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>PrintForest</name>
      <anchorfile>a01602.html</anchorfile>
      <anchor>a7228bbaf6ad62b65be7a2084c01aae5c</anchor>
      <arglist>(const FOREST &amp;forest, std::string str, const KeyFormatter &amp;keyFormatter)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>types.cpp</name>
    <path>/Users/dellaert/git/github/gtsam/base/</path>
    <filename>a00008.html</filename>
    <includes id="a00020" name="types.h" local="no" imported="no">gtsam/base/types.h</includes>
    <namespace>gtsam</namespace>
    <member kind="function">
      <type>std::string</type>
      <name>demangle</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>a0b97fc96e5f69236e81489c66d5b92ba</anchor>
      <arglist>(const char *name)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>types.h</name>
    <path>/Users/dellaert/git/github/gtsam/base/</path>
    <filename>a00020.html</filename>
    <class kind="struct">gtsam::const_selector</class>
    <class kind="struct">gtsam::const_selector&lt; BASIC_TYPE, BASIC_TYPE, AS_NON_CONST, AS_CONST &gt;</class>
    <class kind="struct">gtsam::const_selector&lt; const BASIC_TYPE, BASIC_TYPE, AS_NON_CONST, AS_CONST &gt;</class>
    <class kind="struct">gtsam::ValueWithDefault</class>
    <class kind="class">gtsam::ListOfOneContainer</class>
    <class kind="class">gtsam::TbbOpenMPMixedScope</class>
    <class kind="struct">gtsam::needs_eigen_aligned_allocator</class>
    <class kind="struct">gtsam::needs_eigen_aligned_allocator&lt; T, void_t&lt; typename T::_eigen_aligned_allocator_trait &gt; &gt;</class>
    <namespace>gtsam</namespace>
    <member kind="define">
      <type>#define</type>
      <name>assert_throw</name>
      <anchorfile>a00020.html</anchorfile>
      <anchor>a30d3af2da1ea940197addce4f3c223c8</anchor>
      <arglist>(CONDITION, EXCEPTION)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>GTSAM_MAKE_ALIGNED_OPERATOR_NEW</name>
      <anchorfile>a00020.html</anchorfile>
      <anchor>aa123dd61687e08ae328154a1890b7b86</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>GTSAM_MAKE_ALIGNED_OPERATOR_NEW_IF</name>
      <anchorfile>a00020.html</anchorfile>
      <anchor>a352ab46cee3a766e30b049690802fb0a</anchor>
      <arglist>(NeedsToAlign)</arglist>
    </member>
    <member kind="typedef">
      <type>std::uint64_t</type>
      <name>Key</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>adad029f5f6ffce610428b5fe768b0df2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::uint64_t</type>
      <name>FactorIndex</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>a19c53f2faabb0f4b4b78ce2f7168cc14</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ptrdiff_t</type>
      <name>DenseIndex</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>a21006f326f57cdf7d3f35fec40f43e40</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>void</type>
      <name>void_t</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>a6525d741529c7a2cd91fa913431f5fb7</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>demangle</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>a0b97fc96e5f69236e81489c66d5b92ba</anchor>
      <arglist>(const char *name)</arglist>
    </member>
    <member kind="function">
      <type>ListOfOneContainer&lt; T &gt;</type>
      <name>ListOfOne</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>a045b43784acac77531813c4ab6c4d281</anchor>
      <arglist>(const T &amp;element)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>utilities.h</name>
    <path>/Users/dellaert/git/github/gtsam/nonlinear/</path>
    <filename>a08952.html</filename>
    <includes id="a08955" name="Symbol.h" local="no" imported="no">gtsam/inference/Symbol.h</includes>
    <includes id="a01154" name="ProjectionFactor.h" local="no" imported="no">gtsam/slam/ProjectionFactor.h</includes>
    <includes id="a00605" name="Sampler.h" local="no" imported="no">gtsam/linear/Sampler.h</includes>
    <includes id="a00962" name="NonlinearFactorGraph.h" local="no" imported="no">gtsam/nonlinear/NonlinearFactorGraph.h</includes>
    <includes id="a01022" name="NonlinearFactor.h" local="no" imported="no">gtsam/nonlinear/NonlinearFactor.h</includes>
    <includes id="a00944" name="Values.h" local="no" imported="no">gtsam/nonlinear/Values.h</includes>
    <includes id="a00380" name="Point2.h" local="no" imported="no">gtsam/geometry/Point2.h</includes>
    <includes id="a00311" name="Point3.h" local="no" imported="no">gtsam/geometry/Point3.h</includes>
    <includes id="a00404" name="Pose2.h" local="no" imported="no">gtsam/geometry/Pose2.h</includes>
    <includes id="a00350" name="Pose3.h" local="no" imported="no">gtsam/geometry/Pose3.h</includes>
    <includes id="a00266" name="Cal3_S2.h" local="no" imported="no">gtsam/geometry/Cal3_S2.h</includes>
    <includes id="a00314" name="PinholeCamera.h" local="no" imported="no">gtsam/geometry/PinholeCamera.h</includes>
    <namespace>gtsam</namespace>
    <member kind="function">
      <type>Matrix</type>
      <name>extractPoint2</name>
      <anchorfile>a08952.html</anchorfile>
      <anchor>a2323c7a5c883d9a32485601ee350c59f</anchor>
      <arglist>(const Values &amp;values)</arglist>
    </member>
    <member kind="function">
      <type>Matrix</type>
      <name>extractPoint3</name>
      <anchorfile>a08952.html</anchorfile>
      <anchor>a52e2686ef9d12eaa3ca671c7df95ac1c</anchor>
      <arglist>(const Values &amp;values)</arglist>
    </member>
    <member kind="function">
      <type>Values</type>
      <name>allPose2s</name>
      <anchorfile>a08952.html</anchorfile>
      <anchor>ab6370df7815a672162612dd333bb4a8e</anchor>
      <arglist>(const Values &amp;values)</arglist>
    </member>
    <member kind="function">
      <type>Matrix</type>
      <name>extractPose2</name>
      <anchorfile>a08952.html</anchorfile>
      <anchor>ae4712297aa3898df80cc404bf0696449</anchor>
      <arglist>(const Values &amp;values)</arglist>
    </member>
    <member kind="function">
      <type>Values</type>
      <name>allPose3s</name>
      <anchorfile>a08952.html</anchorfile>
      <anchor>ac6087f21557ca4491caab17b4ad5f3a3</anchor>
      <arglist>(const Values &amp;values)</arglist>
    </member>
    <member kind="function">
      <type>Matrix</type>
      <name>extractPose3</name>
      <anchorfile>a08952.html</anchorfile>
      <anchor>acbda1854826aee5227f501aa33f24a95</anchor>
      <arglist>(const Values &amp;values)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>perturbPoint2</name>
      <anchorfile>a08952.html</anchorfile>
      <anchor>aa28984749a07bfd6d2b3a1af39fb394f</anchor>
      <arglist>(Values &amp;values, double sigma, int32_t seed=42u)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>perturbPose2</name>
      <anchorfile>a08952.html</anchorfile>
      <anchor>aa9826d28554f9a3f995b006c34f640d2</anchor>
      <arglist>(Values &amp;values, double sigmaT, double sigmaR, int32_t seed=42u)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>perturbPoint3</name>
      <anchorfile>a08952.html</anchorfile>
      <anchor>af28b6411ef556fd2d09d2e037a09e9a1</anchor>
      <arglist>(Values &amp;values, double sigma, int32_t seed=42u)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>insertBackprojections</name>
      <anchorfile>a08952.html</anchorfile>
      <anchor>ac8acd36a3f8047b2ab1d1eaae2ba766e</anchor>
      <arglist>(Values &amp;values, const PinholeCamera&lt; Cal3_S2 &gt; &amp;camera, const Vector &amp;J, const Matrix &amp;Z, double depth)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>insertProjectionFactors</name>
      <anchorfile>a08952.html</anchorfile>
      <anchor>abf239d10846fcde68a00be5e89b14a7d</anchor>
      <arglist>(NonlinearFactorGraph &amp;graph, Key i, const Vector &amp;J, const Matrix &amp;Z, const SharedNoiseModel &amp;model, const Cal3_S2::shared_ptr K, const Pose3 &amp;body_P_sensor=Pose3())</arglist>
    </member>
    <member kind="function">
      <type>Matrix</type>
      <name>reprojectionErrors</name>
      <anchorfile>a08952.html</anchorfile>
      <anchor>a883cd3ab5f8d35c1a92d45ea1e4fce0e</anchor>
      <arglist>(const NonlinearFactorGraph &amp;graph, const Values &amp;values)</arglist>
    </member>
    <member kind="function">
      <type>Values</type>
      <name>localToWorld</name>
      <anchorfile>a08952.html</anchorfile>
      <anchor>a2e0289dd3366abc84e24fd55b8e91325</anchor>
      <arglist>(const Values &amp;local, const Pose2 &amp;base, const KeyVector user_keys=KeyVector())</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Value.h</name>
    <path>/Users/dellaert/git/github/gtsam/base/</path>
    <filename>a00056.html</filename>
    <includes id="a00134" name="Vector.h" local="no" imported="no">gtsam/base/Vector.h</includes>
    <class kind="class">gtsam::Value</class>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>Vector.cpp</name>
    <path>/Users/dellaert/git/github/gtsam/base/</path>
    <filename>a00077.html</filename>
    <includes id="a00134" name="Vector.h" local="no" imported="no">gtsam/base/Vector.h</includes>
    <namespace>gtsam</namespace>
    <member kind="function">
      <type>bool</type>
      <name>fpEqual</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>ae19c359190a379cba44bf818a2293f7c</anchor>
      <arglist>(double a, double b, double tol, bool check_relative_also=true)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>a760cc36e9009b23cf564c436294b3504</anchor>
      <arglist>(const Vector &amp;v, const std::string &amp;s, std::ostream &amp;stream)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>a5e5d8018a0f44a6a299406aeda27d44b</anchor>
      <arglist>(const Vector &amp;v, const std::string &amp;s=&quot;&quot;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>save</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>a09f2bbdb9f9d633542362dbe8d79f9ab</anchor>
      <arglist>(const Vector &amp;A, const std::string &amp;s, const std::string &amp;filename)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>a64988014ab746343803620dc42513646</anchor>
      <arglist>(const Vector &amp;vec1, const Vector &amp;vec2)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>greaterThanOrEqual</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>a368ee40bd9c0124d572d2e49bcb077bf</anchor>
      <arglist>(const Vector &amp;v1, const Vector &amp;v2)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>equal_with_abs_tol</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>a8bdced1844ffd6a53af0396d82eaa6da</anchor>
      <arglist>(const Vector &amp;vec1, const Vector &amp;vec2, double tol=1e-9)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>assert_equal</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>a9f3ee662d25ffb8c04b4e35c4b02e90b</anchor>
      <arglist>(const Vector &amp;vec1, const Vector &amp;vec2, double tol=1e-9)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>assert_inequal</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>a2ca3db47b15350977c1f03c5560ab332</anchor>
      <arglist>(const Vector &amp;vec1, const Vector &amp;vec2, double tol=1e-9)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>assert_equal</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>ac3cf8e8e70cd696d9c789c31bc1e89a7</anchor>
      <arglist>(const SubVector &amp;vec1, const SubVector &amp;vec2, double tol=1e-9)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>linear_dependent</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>a2a0cfd7908b06491df49b6a9c9186775</anchor>
      <arglist>(const Vector &amp;vec1, const Vector &amp;vec2, double tol=1e-9)</arglist>
    </member>
    <member kind="function">
      <type>Vector</type>
      <name>ediv_</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>a14844c96706dc362917e0d5e76d65fbe</anchor>
      <arglist>(const Vector &amp;a, const Vector &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>houseInPlace</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>ac9c0c05b0198ec0fb6e4115edb755910</anchor>
      <arglist>(Vector &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>pair&lt; double, Vector &gt;</type>
      <name>house</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>afb77eefc25dea0fb3e0fcc8f246b617a</anchor>
      <arglist>(const Vector &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>pair&lt; Vector, double &gt;</type>
      <name>weightedPseudoinverse</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>aca1c56d11a05464a7a5458dc32ccc777</anchor>
      <arglist>(const Vector &amp;v, const Vector &amp;weights)</arglist>
    </member>
    <member kind="function">
      <type>Vector</type>
      <name>concatVectors</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>ae1c88acfa9575bcea3f2e738cb637a85</anchor>
      <arglist>(const std::list&lt; Vector &gt; &amp;vs)</arglist>
    </member>
    <member kind="function">
      <type>Vector</type>
      <name>concatVectors</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>a09610ec69a8b3f3a00399bb378eda9cf</anchor>
      <arglist>(size_t nrVectors,...)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Vector.h</name>
    <path>/Users/dellaert/git/github/gtsam/base/</path>
    <filename>a00134.html</filename>
    <includes id="a01256" name="global_includes.h" local="no" imported="no">gtsam/global_includes.h</includes>
    <namespace>gtsam</namespace>
    <member kind="function">
      <type>bool</type>
      <name>fpEqual</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>ae19c359190a379cba44bf818a2293f7c</anchor>
      <arglist>(double a, double b, double tol, bool check_relative_also=true)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>a760cc36e9009b23cf564c436294b3504</anchor>
      <arglist>(const Vector &amp;v, const std::string &amp;s, std::ostream &amp;stream)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>a5e5d8018a0f44a6a299406aeda27d44b</anchor>
      <arglist>(const Vector &amp;v, const std::string &amp;s=&quot;&quot;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>save</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>a09f2bbdb9f9d633542362dbe8d79f9ab</anchor>
      <arglist>(const Vector &amp;A, const std::string &amp;s, const std::string &amp;filename)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>a64988014ab746343803620dc42513646</anchor>
      <arglist>(const Vector &amp;vec1, const Vector &amp;vec2)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>greaterThanOrEqual</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>a368ee40bd9c0124d572d2e49bcb077bf</anchor>
      <arglist>(const Vector &amp;v1, const Vector &amp;v2)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>equal_with_abs_tol</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>a8bdced1844ffd6a53af0396d82eaa6da</anchor>
      <arglist>(const Vector &amp;vec1, const Vector &amp;vec2, double tol=1e-9)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>equal</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>aa7ed1d4fe2dd6828cfeb2d8f488b818d</anchor>
      <arglist>(const Vector &amp;vec1, const Vector &amp;vec2, double tol)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>equal</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>a3d1cad2313f69f9fa5008fdc348d1526</anchor>
      <arglist>(const Vector &amp;vec1, const Vector &amp;vec2)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>assert_equal</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>a9f3ee662d25ffb8c04b4e35c4b02e90b</anchor>
      <arglist>(const Vector &amp;vec1, const Vector &amp;vec2, double tol=1e-9)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>assert_inequal</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>a2ca3db47b15350977c1f03c5560ab332</anchor>
      <arglist>(const Vector &amp;vec1, const Vector &amp;vec2, double tol=1e-9)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>assert_equal</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>ac3cf8e8e70cd696d9c789c31bc1e89a7</anchor>
      <arglist>(const SubVector &amp;vec1, const SubVector &amp;vec2, double tol=1e-9)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>linear_dependent</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>a2a0cfd7908b06491df49b6a9c9186775</anchor>
      <arglist>(const Vector &amp;vec1, const Vector &amp;vec2, double tol=1e-9)</arglist>
    </member>
    <member kind="function">
      <type>Vector</type>
      <name>ediv_</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>a14844c96706dc362917e0d5e76d65fbe</anchor>
      <arglist>(const Vector &amp;a, const Vector &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>dot</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>ad80249acf12bbea741e755cd8fc73042</anchor>
      <arglist>(const V1 &amp;a, const V2 &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>inner_prod</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>a4ca41ba9ec9d6d21a2b9f5e00f9f25ed</anchor>
      <arglist>(const V1 &amp;a, const V2 &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>void GTSAM_DEPRECATED</type>
      <name>scal</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>a9bf40203c6d7820aa6ddf23cdbbd770f</anchor>
      <arglist>(double alpha, Vector &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>void GTSAM_DEPRECATED</type>
      <name>axpy</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>af55c9458246c733317a7dfad7f9f813a</anchor>
      <arglist>(double alpha, const V1 &amp;x, V2 &amp;y)</arglist>
    </member>
    <member kind="function">
      <type>pair&lt; double, Vector &gt;</type>
      <name>house</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>afb77eefc25dea0fb3e0fcc8f246b617a</anchor>
      <arglist>(const Vector &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>houseInPlace</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>ac9c0c05b0198ec0fb6e4115edb755910</anchor>
      <arglist>(Vector &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>pair&lt; Vector, double &gt;</type>
      <name>weightedPseudoinverse</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>aca1c56d11a05464a7a5458dc32ccc777</anchor>
      <arglist>(const Vector &amp;v, const Vector &amp;weights)</arglist>
    </member>
    <member kind="function">
      <type>Vector</type>
      <name>concatVectors</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>ae1c88acfa9575bcea3f2e738cb637a85</anchor>
      <arglist>(const std::list&lt; Vector &gt; &amp;vs)</arglist>
    </member>
    <member kind="function">
      <type>Vector</type>
      <name>concatVectors</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>a09610ec69a8b3f3a00399bb378eda9cf</anchor>
      <arglist>(size_t nrVectors,...)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>VerticalBlockMatrix.cpp</name>
    <path>/Users/dellaert/git/github/gtsam/base/</path>
    <filename>a00146.html</filename>
    <includes id="a00074" name="VerticalBlockMatrix.h" local="no" imported="no">gtsam/base/VerticalBlockMatrix.h</includes>
    <includes id="a00083" name="SymmetricBlockMatrix.h" local="no" imported="no">gtsam/base/SymmetricBlockMatrix.h</includes>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>VerticalBlockMatrix.h</name>
    <path>/Users/dellaert/git/github/gtsam/base/</path>
    <filename>a00074.html</filename>
    <includes id="a00050" name="Matrix.h" local="no" imported="no">gtsam/base/Matrix.h</includes>
    <includes id="a00002" name="FastVector.h" local="no" imported="no">gtsam/base/FastVector.h</includes>
    <class kind="class">gtsam::VerticalBlockMatrix</class>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>WeightedSampler.h</name>
    <path>/Users/dellaert/git/github/gtsam/base/</path>
    <filename>a00029.html</filename>
    <class kind="class">gtsam::WeightedSampler</class>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>Basis.h</name>
    <path>/Users/dellaert/git/github/gtsam/basis/</path>
    <filename>a00152.html</filename>
    <includes id="a00050" name="Matrix.h" local="no" imported="no">gtsam/base/Matrix.h</includes>
    <includes id="a00062" name="OptionalJacobian.h" local="no" imported="no">gtsam/base/OptionalJacobian.h</includes>
    <class kind="class">gtsam::Basis</class>
    <class kind="class">gtsam::Basis::EvaluationFunctor</class>
    <class kind="class">gtsam::Basis::VectorEvaluationFunctor</class>
    <class kind="class">gtsam::Basis::VectorComponentFunctor</class>
    <class kind="class">gtsam::Basis::ManifoldEvaluationFunctor</class>
    <class kind="class">gtsam::Basis::DerivativeFunctorBase</class>
    <class kind="class">gtsam::Basis::DerivativeFunctor</class>
    <class kind="class">gtsam::Basis::VectorDerivativeFunctor</class>
    <class kind="class">gtsam::Basis::ComponentDerivativeFunctor</class>
    <namespace>gtsam</namespace>
    <member kind="function">
      <type>Matrix</type>
      <name>kroneckerProductIdentity</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>a2ce44d31cae1eda44c2a86d32d92b935</anchor>
      <arglist>(const Weights &amp;w)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>BasisFactors.h</name>
    <path>/Users/dellaert/git/github/gtsam/basis/</path>
    <filename>a00161.html</filename>
    <includes id="a00152" name="Basis.h" local="no" imported="no">gtsam/basis/Basis.h</includes>
    <includes id="a01028" name="FunctorizedFactor.h" local="no" imported="no">gtsam/nonlinear/FunctorizedFactor.h</includes>
    <class kind="class">gtsam::EvaluationFactor</class>
    <class kind="class">gtsam::VectorEvaluationFactor</class>
    <class kind="class">gtsam::VectorComponentFactor</class>
    <class kind="class">gtsam::ManifoldEvaluationFactor</class>
    <class kind="class">gtsam::DerivativeFactor</class>
    <class kind="class">gtsam::VectorDerivativeFactor</class>
    <class kind="class">gtsam::ComponentDerivativeFactor</class>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>Chebyshev.cpp</name>
    <path>/Users/dellaert/git/github/gtsam/basis/</path>
    <filename>a00173.html</filename>
    <includes id="a00176" name="Chebyshev.h" local="no" imported="no">gtsam/basis/Chebyshev.h</includes>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>Chebyshev.h</name>
    <path>/Users/dellaert/git/github/gtsam/basis/</path>
    <filename>a00176.html</filename>
    <includes id="a00110" name="Manifold.h" local="no" imported="no">gtsam/base/Manifold.h</includes>
    <includes id="a00152" name="Basis.h" local="no" imported="no">gtsam/basis/Basis.h</includes>
    <class kind="struct">gtsam::Chebyshev1Basis</class>
    <class kind="struct">gtsam::Chebyshev2Basis</class>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>Chebyshev2.cpp</name>
    <path>/Users/dellaert/git/github/gtsam/basis/</path>
    <filename>a00158.html</filename>
    <includes id="a00164" name="Chebyshev2.h" local="no" imported="no">gtsam/basis/Chebyshev2.h</includes>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>Chebyshev2.h</name>
    <path>/Users/dellaert/git/github/gtsam/basis/</path>
    <filename>a00164.html</filename>
    <includes id="a00110" name="Manifold.h" local="no" imported="no">gtsam/base/Manifold.h</includes>
    <includes id="a00062" name="OptionalJacobian.h" local="no" imported="no">gtsam/base/OptionalJacobian.h</includes>
    <includes id="a00152" name="Basis.h" local="no" imported="no">gtsam/basis/Basis.h</includes>
    <class kind="class">gtsam::Chebyshev2</class>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>FitBasis.h</name>
    <path>/Users/dellaert/git/github/gtsam/basis/</path>
    <filename>a00155.html</filename>
    <includes id="a00152" name="Basis.h" local="no" imported="no">gtsam/basis/Basis.h</includes>
    <includes id="a00161" name="BasisFactors.h" local="no" imported="no">gtsam/basis/BasisFactors.h</includes>
    <includes id="a00677" name="GaussianFactorGraph.h" local="no" imported="no">gtsam/linear/GaussianFactorGraph.h</includes>
    <includes id="a00749" name="VectorValues.h" local="no" imported="no">gtsam/linear/VectorValues.h</includes>
    <includes id="a00962" name="NonlinearFactorGraph.h" local="no" imported="no">gtsam/nonlinear/NonlinearFactorGraph.h</includes>
    <class kind="class">gtsam::FitBasis</class>
    <namespace>gtsam</namespace>
    <member kind="typedef">
      <type>std::map&lt; double, double &gt;</type>
      <name>Sequence</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>a24ec5d6ec6b211d0cbaf645c11c198de</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::pair&lt; double, double &gt;</type>
      <name>Sample</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>a9920fe883a2f506440aca7c1a2bd1a00</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Fourier.h</name>
    <path>/Users/dellaert/git/github/gtsam/basis/</path>
    <filename>a00170.html</filename>
    <includes id="a00152" name="Basis.h" local="no" imported="no">gtsam/basis/Basis.h</includes>
    <class kind="class">gtsam::FourierBasis</class>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>AlgebraicDecisionTree.h</name>
    <path>/Users/dellaert/git/github/gtsam/discrete/</path>
    <filename>a00206.html</filename>
    <class kind="class">gtsam::AlgebraicDecisionTree</class>
    <class kind="struct">gtsam::AlgebraicDecisionTree::Ring</class>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>Assignment.h</name>
    <path>/Users/dellaert/git/github/gtsam/discrete/</path>
    <filename>a00188.html</filename>
    <class kind="class">gtsam::Assignment</class>
    <namespace>gtsam</namespace>
    <member kind="function">
      <type>std::vector&lt; Assignment&lt; L &gt; &gt;</type>
      <name>cartesianProduct</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>aec77610fa3e4905d142a72b2199158db</anchor>
      <arglist>(const std::vector&lt; std::pair&lt; L, size_t &gt; &gt; &amp;keys)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>DecisionTree.h</name>
    <path>/Users/dellaert/git/github/gtsam/discrete/</path>
    <filename>a00224.html</filename>
    <includes id="a00188" name="Assignment.h" local="no" imported="no">gtsam/discrete/Assignment.h</includes>
    <class kind="class">gtsam::DecisionTree</class>
    <class kind="class">gtsam::DecisionTree::Node</class>
    <namespace>gtsam</namespace>
    <member kind="function">
      <type>DecisionTree&lt; L, Y &gt;</type>
      <name>apply</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>ad19a5c8f7d997b0b16cf646659834b0f</anchor>
      <arglist>(const DecisionTree&lt; L, Y &gt; &amp;f, const typename DecisionTree&lt; L, Y &gt;::Unary &amp;op)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>DecisionTreeFactor.cpp</name>
    <path>/Users/dellaert/git/github/gtsam/discrete/</path>
    <filename>a00200.html</filename>
    <includes id="a00212" name="DecisionTreeFactor.h" local="no" imported="no">gtsam/discrete/DecisionTreeFactor.h</includes>
    <includes id="a00197" name="DiscreteConditional.h" local="no" imported="no">gtsam/discrete/DiscreteConditional.h</includes>
    <includes id="a00080" name="FastSet.h" local="no" imported="no">gtsam/base/FastSet.h</includes>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>DecisionTreeFactor.h</name>
    <path>/Users/dellaert/git/github/gtsam/discrete/</path>
    <filename>a00212.html</filename>
    <includes id="a00257" name="DiscreteFactor.h" local="no" imported="no">gtsam/discrete/DiscreteFactor.h</includes>
    <includes id="a00251" name="Potentials.h" local="no" imported="no">gtsam/discrete/Potentials.h</includes>
    <includes id="a00521" name="Ordering.h" local="no" imported="no">gtsam/inference/Ordering.h</includes>
    <class kind="class">gtsam::DecisionTreeFactor</class>
    <class kind="struct">gtsam::traits&lt; DecisionTreeFactor &gt;</class>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>DiscreteBayesNet.cpp</name>
    <path>/Users/dellaert/git/github/gtsam/discrete/</path>
    <filename>a00179.html</filename>
    <includes id="a00218" name="DiscreteBayesNet.h" local="no" imported="no">gtsam/discrete/DiscreteBayesNet.h</includes>
    <includes id="a00197" name="DiscreteConditional.h" local="no" imported="no">gtsam/discrete/DiscreteConditional.h</includes>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>DiscreteBayesNet.h</name>
    <path>/Users/dellaert/git/github/gtsam/discrete/</path>
    <filename>a00218.html</filename>
    <includes id="a00479" name="BayesNet.h" local="no" imported="no">gtsam/inference/BayesNet.h</includes>
    <includes id="a00470" name="FactorGraph.h" local="no" imported="no">gtsam/inference/FactorGraph.h</includes>
    <includes id="a00197" name="DiscreteConditional.h" local="no" imported="no">gtsam/discrete/DiscreteConditional.h</includes>
    <class kind="class">gtsam::DiscreteBayesNet</class>
    <class kind="struct">gtsam::traits&lt; DiscreteBayesNet &gt;</class>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>DiscreteBayesTree.cpp</name>
    <path>/Users/dellaert/git/github/gtsam/discrete/</path>
    <filename>a00191.html</filename>
    <includes id="a00095" name="treeTraversal-inst.h" local="no" imported="no">gtsam/base/treeTraversal-inst.h</includes>
    <includes id="a00494" name="BayesTreeCliqueBase-inst.h" local="no" imported="no">gtsam/inference/BayesTreeCliqueBase-inst.h</includes>
    <includes id="a00242" name="DiscreteBayesTree.h" local="no" imported="no">gtsam/discrete/DiscreteBayesTree.h</includes>
    <includes id="a00218" name="DiscreteBayesNet.h" local="no" imported="no">gtsam/discrete/DiscreteBayesNet.h</includes>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>DiscreteBayesTree.h</name>
    <path>/Users/dellaert/git/github/gtsam/discrete/</path>
    <filename>a00242.html</filename>
    <includes id="a00218" name="DiscreteBayesNet.h" local="no" imported="no">gtsam/discrete/DiscreteBayesNet.h</includes>
    <includes id="a00254" name="DiscreteFactorGraph.h" local="no" imported="no">gtsam/discrete/DiscreteFactorGraph.h</includes>
    <includes id="a00497" name="BayesTree.h" local="no" imported="no">gtsam/inference/BayesTree.h</includes>
    <includes id="a00575" name="Conditional.h" local="no" imported="no">gtsam/inference/Conditional.h</includes>
    <includes id="a00455" name="BayesTreeCliqueBase.h" local="no" imported="no">gtsam/inference/BayesTreeCliqueBase.h</includes>
    <class kind="class">gtsam::DiscreteBayesTreeClique</class>
    <class kind="class">gtsam::DiscreteBayesTree</class>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>DiscreteConditional.cpp</name>
    <path>/Users/dellaert/git/github/gtsam/discrete/</path>
    <filename>a00230.html</filename>
    <includes id="a00197" name="DiscreteConditional.h" local="no" imported="no">gtsam/discrete/DiscreteConditional.h</includes>
    <includes id="a00182" name="Signature.h" local="no" imported="no">gtsam/discrete/Signature.h</includes>
    <includes id="a00101" name="Testable.h" local="no" imported="no">gtsam/base/Testable.h</includes>
    <includes id="a00011" name="debug.h" local="no" imported="no">gtsam/base/debug.h</includes>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>DiscreteConditional.h</name>
    <path>/Users/dellaert/git/github/gtsam/discrete/</path>
    <filename>a00197.html</filename>
    <includes id="a00212" name="DecisionTreeFactor.h" local="no" imported="no">gtsam/discrete/DecisionTreeFactor.h</includes>
    <includes id="a00182" name="Signature.h" local="no" imported="no">gtsam/discrete/Signature.h</includes>
    <includes id="a00575" name="Conditional.h" local="no" imported="no">gtsam/inference/Conditional.h</includes>
    <class kind="class">gtsam::DiscreteConditional</class>
    <class kind="struct">gtsam::traits&lt; DiscreteConditional &gt;</class>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>DiscreteEliminationTree.cpp</name>
    <path>/Users/dellaert/git/github/gtsam/discrete/</path>
    <filename>a00194.html</filename>
    <includes id="a00233" name="DiscreteEliminationTree.h" local="no" imported="no">gtsam/discrete/DiscreteEliminationTree.h</includes>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>DiscreteEliminationTree.h</name>
    <path>/Users/dellaert/git/github/gtsam/discrete/</path>
    <filename>a00233.html</filename>
    <includes id="a00218" name="DiscreteBayesNet.h" local="no" imported="no">gtsam/discrete/DiscreteBayesNet.h</includes>
    <includes id="a00254" name="DiscreteFactorGraph.h" local="no" imported="no">gtsam/discrete/DiscreteFactorGraph.h</includes>
    <includes id="a00476" name="EliminationTree.h" local="no" imported="no">gtsam/inference/EliminationTree.h</includes>
    <class kind="class">gtsam::DiscreteEliminationTree</class>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>DiscreteFactor.cpp</name>
    <path>/Users/dellaert/git/github/gtsam/discrete/</path>
    <filename>a00248.html</filename>
    <includes id="a00257" name="DiscreteFactor.h" local="no" imported="no">gtsam/discrete/DiscreteFactor.h</includes>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>DiscreteFactor.h</name>
    <path>/Users/dellaert/git/github/gtsam/discrete/</path>
    <filename>a00257.html</filename>
    <includes id="a00188" name="Assignment.h" local="no" imported="no">gtsam/discrete/Assignment.h</includes>
    <includes id="a00515" name="Factor.h" local="no" imported="no">gtsam/inference/Factor.h</includes>
    <includes id="a00101" name="Testable.h" local="no" imported="no">gtsam/base/Testable.h</includes>
    <class kind="class">gtsam::DiscreteFactor</class>
    <class kind="struct">gtsam::traits&lt; DiscreteFactor &gt;</class>
    <class kind="struct">gtsam::traits&lt; DiscreteFactor::Values &gt;</class>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>DiscreteFactorGraph.cpp</name>
    <path>/Users/dellaert/git/github/gtsam/discrete/</path>
    <filename>a00227.html</filename>
    <includes id="a00254" name="DiscreteFactorGraph.h" local="no" imported="no">gtsam/discrete/DiscreteFactorGraph.h</includes>
    <includes id="a00197" name="DiscreteConditional.h" local="no" imported="no">gtsam/discrete/DiscreteConditional.h</includes>
    <includes id="a00242" name="DiscreteBayesTree.h" local="no" imported="no">gtsam/discrete/DiscreteBayesTree.h</includes>
    <includes id="a00233" name="DiscreteEliminationTree.h" local="no" imported="no">gtsam/discrete/DiscreteEliminationTree.h</includes>
    <includes id="a00236" name="DiscreteJunctionTree.h" local="no" imported="no">gtsam/discrete/DiscreteJunctionTree.h</includes>
    <namespace>gtsam</namespace>
    <member kind="function">
      <type>std::pair&lt; DiscreteConditional::shared_ptr, DecisionTreeFactor::shared_ptr &gt;</type>
      <name>EliminateDiscrete</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>a0767417e558bbac14f3b27bc54d033e9</anchor>
      <arglist>(const DiscreteFactorGraph &amp;factors, const Ordering &amp;keys)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>DiscreteFactorGraph.h</name>
    <path>/Users/dellaert/git/github/gtsam/discrete/</path>
    <filename>a00254.html</filename>
    <includes id="a00470" name="FactorGraph.h" local="no" imported="no">gtsam/inference/FactorGraph.h</includes>
    <includes id="a00524" name="EliminateableFactorGraph.h" local="no" imported="no">gtsam/inference/EliminateableFactorGraph.h</includes>
    <includes id="a00521" name="Ordering.h" local="no" imported="no">gtsam/inference/Ordering.h</includes>
    <includes id="a00212" name="DecisionTreeFactor.h" local="no" imported="no">gtsam/discrete/DecisionTreeFactor.h</includes>
    <includes id="a00218" name="DiscreteBayesNet.h" local="no" imported="no">gtsam/discrete/DiscreteBayesNet.h</includes>
    <includes id="a00080" name="FastSet.h" local="no" imported="no">gtsam/base/FastSet.h</includes>
    <class kind="struct">gtsam::EliminationTraits&lt; DiscreteFactorGraph &gt;</class>
    <class kind="class">gtsam::DiscreteFactorGraph</class>
    <class kind="struct">gtsam::traits&lt; DiscreteFactorGraph &gt;</class>
    <namespace>gtsam</namespace>
    <member kind="function">
      <type>std::pair&lt; DiscreteConditional::shared_ptr, DecisionTreeFactor::shared_ptr &gt;</type>
      <name>EliminateDiscrete</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>a0767417e558bbac14f3b27bc54d033e9</anchor>
      <arglist>(const DiscreteFactorGraph &amp;factors, const Ordering &amp;keys)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>DiscreteJunctionTree.cpp</name>
    <path>/Users/dellaert/git/github/gtsam/discrete/</path>
    <filename>a00239.html</filename>
    <includes id="a00548" name="JunctionTree-inst.h" local="no" imported="no">gtsam/inference/JunctionTree-inst.h</includes>
    <includes id="a00236" name="DiscreteJunctionTree.h" local="no" imported="no">gtsam/discrete/DiscreteJunctionTree.h</includes>
    <includes id="a00233" name="DiscreteEliminationTree.h" local="no" imported="no">gtsam/discrete/DiscreteEliminationTree.h</includes>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>DiscreteJunctionTree.h</name>
    <path>/Users/dellaert/git/github/gtsam/discrete/</path>
    <filename>a00236.html</filename>
    <includes id="a00254" name="DiscreteFactorGraph.h" local="no" imported="no">gtsam/discrete/DiscreteFactorGraph.h</includes>
    <includes id="a00242" name="DiscreteBayesTree.h" local="no" imported="no">gtsam/discrete/DiscreteBayesTree.h</includes>
    <includes id="a00527" name="JunctionTree.h" local="no" imported="no">gtsam/inference/JunctionTree.h</includes>
    <class kind="class">gtsam::DiscreteJunctionTree</class>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>DiscreteKey.h</name>
    <path>/Users/dellaert/git/github/gtsam/discrete/</path>
    <filename>a00185.html</filename>
    <includes id="a01256" name="global_includes.h" local="no" imported="no">gtsam/global_includes.h</includes>
    <includes id="a00491" name="Key.h" local="no" imported="no">gtsam/inference/Key.h</includes>
    <class kind="struct">gtsam::DiscreteKeys</class>
    <namespace>gtsam</namespace>
    <member kind="typedef">
      <type>std::pair&lt; Key, size_t &gt;</type>
      <name>DiscreteKey</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>acd19e5d1e5d06c37246d4c15af38ee67</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>DiscreteKeys</type>
      <name>operator&amp;</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>a0be4f243161c2fd937df60aee511eb16</anchor>
      <arglist>(const DiscreteKey &amp;key1, const DiscreteKey &amp;key2)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>DiscreteMarginals.h</name>
    <path>/Users/dellaert/git/github/gtsam/discrete/</path>
    <filename>a00221.html</filename>
    <includes id="a00254" name="DiscreteFactorGraph.h" local="no" imported="no">gtsam/discrete/DiscreteFactorGraph.h</includes>
    <includes id="a00242" name="DiscreteBayesTree.h" local="no" imported="no">gtsam/discrete/DiscreteBayesTree.h</includes>
    <includes id="a00134" name="Vector.h" local="no" imported="no">gtsam/base/Vector.h</includes>
    <class kind="class">gtsam::DiscreteMarginals</class>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>Potentials.cpp</name>
    <path>/Users/dellaert/git/github/gtsam/discrete/</path>
    <filename>a00215.html</filename>
    <includes id="a00251" name="Potentials.h" local="no" imported="no">gtsam/discrete/Potentials.h</includes>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>Potentials.h</name>
    <path>/Users/dellaert/git/github/gtsam/discrete/</path>
    <filename>a00251.html</filename>
    <includes id="a00206" name="AlgebraicDecisionTree.h" local="no" imported="no">gtsam/discrete/AlgebraicDecisionTree.h</includes>
    <includes id="a00185" name="DiscreteKey.h" local="no" imported="no">gtsam/discrete/DiscreteKey.h</includes>
    <includes id="a00491" name="Key.h" local="no" imported="no">gtsam/inference/Key.h</includes>
    <class kind="class">gtsam::Potentials</class>
    <class kind="struct">gtsam::traits&lt; Potentials &gt;</class>
    <class kind="struct">gtsam::traits&lt; Potentials::ADT &gt;</class>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>Signature.cpp</name>
    <path>/Users/dellaert/git/github/gtsam/discrete/</path>
    <filename>a00203.html</filename>
    <includes id="a00182" name="Signature.h" local="yes" imported="no">Signature.h</includes>
    <namespace>gtsam</namespace>
    <member kind="function">
      <type>Signature</type>
      <name>operator|</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>aa6c58dfb2fc9398a026e3268ba2edfad</anchor>
      <arglist>(const DiscreteKey &amp;key, const DiscreteKey &amp;parent)</arglist>
    </member>
    <member kind="function">
      <type>Signature</type>
      <name>operator%</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>ab98cf2a4777006c28d6983db5d8ec574</anchor>
      <arglist>(const DiscreteKey &amp;key, const std::string &amp;parent)</arglist>
    </member>
    <member kind="function">
      <type>Signature</type>
      <name>operator%</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>ae4856250df52ce4b9b4b16c7a833408c</anchor>
      <arglist>(const DiscreteKey &amp;key, const Signature::Table &amp;parent)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Signature.h</name>
    <path>/Users/dellaert/git/github/gtsam/discrete/</path>
    <filename>a00182.html</filename>
    <includes id="a00185" name="DiscreteKey.h" local="no" imported="no">gtsam/discrete/DiscreteKey.h</includes>
    <class kind="class">gtsam::Signature</class>
    <namespace>gtsam</namespace>
    <member kind="function">
      <type>Signature</type>
      <name>operator|</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>aa6c58dfb2fc9398a026e3268ba2edfad</anchor>
      <arglist>(const DiscreteKey &amp;key, const DiscreteKey &amp;parent)</arglist>
    </member>
    <member kind="function">
      <type>Signature</type>
      <name>operator%</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>ab98cf2a4777006c28d6983db5d8ec574</anchor>
      <arglist>(const DiscreteKey &amp;key, const std::string &amp;parent)</arglist>
    </member>
    <member kind="function">
      <type>Signature</type>
      <name>operator%</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>ae4856250df52ce4b9b4b16c7a833408c</anchor>
      <arglist>(const DiscreteKey &amp;key, const Signature::Table &amp;parent)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>BearingRange.h</name>
    <path>/Users/dellaert/git/github/gtsam/geometry/</path>
    <filename>a00401.html</filename>
    <includes id="a00110" name="Manifold.h" local="no" imported="no">gtsam/base/Manifold.h</includes>
    <includes id="a00101" name="Testable.h" local="no" imported="no">gtsam/base/Testable.h</includes>
    <includes id="a00062" name="OptionalJacobian.h" local="no" imported="no">gtsam/base/OptionalJacobian.h</includes>
    <class kind="struct">gtsam::BearingRange</class>
    <class kind="struct">gtsam::traits&lt; BearingRange&lt; A1, A2 &gt; &gt;</class>
    <class kind="struct">gtsam::HasBearing</class>
    <class kind="struct">gtsam::HasRange</class>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>Cal3.cpp</name>
    <path>/Users/dellaert/git/github/gtsam/geometry/</path>
    <filename>a00395.html</filename>
    <includes id="a00386" name="Cal3.h" local="no" imported="no">gtsam/geometry/Cal3.h</includes>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>Cal3.h</name>
    <path>/Users/dellaert/git/github/gtsam/geometry/</path>
    <filename>a00386.html</filename>
    <includes id="a00380" name="Point2.h" local="no" imported="no">gtsam/geometry/Point2.h</includes>
    <class kind="class">gtsam::Cal3</class>
    <namespace>gtsam</namespace>
    <member kind="function">
      <type>void</type>
      <name>calibrateJacobians</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>a9ac814fcc4484bce32e4616d69afb225</anchor>
      <arglist>(const Cal &amp;calibration, const Point2 &amp;pn, OptionalJacobian&lt; 2, Dim &gt; Dcal=boost::none, OptionalJacobian&lt; 2, 2 &gt; Dp=boost::none)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Cal3_S2.cpp</name>
    <path>/Users/dellaert/git/github/gtsam/geometry/</path>
    <filename>a00353.html</filename>
    <includes id="a00266" name="Cal3_S2.h" local="no" imported="no">gtsam/geometry/Cal3_S2.h</includes>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>Cal3_S2.h</name>
    <path>/Users/dellaert/git/github/gtsam/geometry/</path>
    <filename>a00266.html</filename>
    <includes id="a00386" name="Cal3.h" local="no" imported="no">gtsam/geometry/Cal3.h</includes>
    <includes id="a00380" name="Point2.h" local="no" imported="no">gtsam/geometry/Point2.h</includes>
    <class kind="class">gtsam::Cal3_S2</class>
    <class kind="struct">gtsam::traits&lt; Cal3_S2 &gt;</class>
    <class kind="struct">gtsam::traits&lt; const Cal3_S2 &gt;</class>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>Cal3_S2Stereo.cpp</name>
    <path>/Users/dellaert/git/github/gtsam/geometry/</path>
    <filename>a00365.html</filename>
    <includes id="a00269" name="Cal3_S2Stereo.h" local="no" imported="no">gtsam/geometry/Cal3_S2Stereo.h</includes>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>Cal3_S2Stereo.h</name>
    <path>/Users/dellaert/git/github/gtsam/geometry/</path>
    <filename>a00269.html</filename>
    <includes id="a00266" name="Cal3_S2.h" local="no" imported="no">gtsam/geometry/Cal3_S2.h</includes>
    <class kind="class">gtsam::Cal3_S2Stereo</class>
    <class kind="struct">gtsam::traits&lt; Cal3_S2Stereo &gt;</class>
    <class kind="struct">gtsam::traits&lt; const Cal3_S2Stereo &gt;</class>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>Cal3Bundler.cpp</name>
    <path>/Users/dellaert/git/github/gtsam/geometry/</path>
    <filename>a00446.html</filename>
    <includes id="a00050" name="Matrix.h" local="no" imported="no">gtsam/base/Matrix.h</includes>
    <includes id="a00134" name="Vector.h" local="no" imported="no">gtsam/base/Vector.h</includes>
    <includes id="a00332" name="Cal3Bundler.h" local="no" imported="no">gtsam/geometry/Cal3Bundler.h</includes>
    <includes id="a00380" name="Point2.h" local="no" imported="no">gtsam/geometry/Point2.h</includes>
    <includes id="a00311" name="Point3.h" local="no" imported="no">gtsam/geometry/Point3.h</includes>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>Cal3Bundler.h</name>
    <path>/Users/dellaert/git/github/gtsam/geometry/</path>
    <filename>a00332.html</filename>
    <includes id="a00386" name="Cal3.h" local="no" imported="no">gtsam/geometry/Cal3.h</includes>
    <includes id="a00380" name="Point2.h" local="no" imported="no">gtsam/geometry/Point2.h</includes>
    <class kind="class">gtsam::Cal3Bundler</class>
    <class kind="struct">gtsam::traits&lt; Cal3Bundler &gt;</class>
    <class kind="struct">gtsam::traits&lt; const Cal3Bundler &gt;</class>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>Cal3DS2.cpp</name>
    <path>/Users/dellaert/git/github/gtsam/geometry/</path>
    <filename>a00335.html</filename>
    <includes id="a00050" name="Matrix.h" local="no" imported="no">gtsam/base/Matrix.h</includes>
    <includes id="a00134" name="Vector.h" local="no" imported="no">gtsam/base/Vector.h</includes>
    <includes id="a00407" name="Cal3DS2.h" local="no" imported="no">gtsam/geometry/Cal3DS2.h</includes>
    <includes id="a00380" name="Point2.h" local="no" imported="no">gtsam/geometry/Point2.h</includes>
    <includes id="a00311" name="Point3.h" local="no" imported="no">gtsam/geometry/Point3.h</includes>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>Cal3DS2.h</name>
    <path>/Users/dellaert/git/github/gtsam/geometry/</path>
    <filename>a00407.html</filename>
    <class kind="class">gtsam::Cal3DS2</class>
    <class kind="struct">gtsam::traits&lt; Cal3DS2 &gt;</class>
    <class kind="struct">gtsam::traits&lt; const Cal3DS2 &gt;</class>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>Cal3DS2_Base.cpp</name>
    <path>/Users/dellaert/git/github/gtsam/geometry/</path>
    <filename>a00443.html</filename>
    <includes id="a00050" name="Matrix.h" local="no" imported="no">gtsam/base/Matrix.h</includes>
    <includes id="a00134" name="Vector.h" local="no" imported="no">gtsam/base/Vector.h</includes>
    <includes id="a00380" name="Point2.h" local="no" imported="no">gtsam/geometry/Point2.h</includes>
    <includes id="a00311" name="Point3.h" local="no" imported="no">gtsam/geometry/Point3.h</includes>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>Cal3Fisheye.cpp</name>
    <path>/Users/dellaert/git/github/gtsam/geometry/</path>
    <filename>a00413.html</filename>
    <includes id="a00050" name="Matrix.h" local="no" imported="no">gtsam/base/Matrix.h</includes>
    <includes id="a00134" name="Vector.h" local="no" imported="no">gtsam/base/Vector.h</includes>
    <includes id="a00416" name="Cal3Fisheye.h" local="no" imported="no">gtsam/geometry/Cal3Fisheye.h</includes>
    <includes id="a00380" name="Point2.h" local="no" imported="no">gtsam/geometry/Point2.h</includes>
    <includes id="a00311" name="Point3.h" local="no" imported="no">gtsam/geometry/Point3.h</includes>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>Cal3Fisheye.h</name>
    <path>/Users/dellaert/git/github/gtsam/geometry/</path>
    <filename>a00416.html</filename>
    <includes id="a00386" name="Cal3.h" local="no" imported="no">gtsam/geometry/Cal3.h</includes>
    <includes id="a00380" name="Point2.h" local="no" imported="no">gtsam/geometry/Point2.h</includes>
    <class kind="class">gtsam::Cal3Fisheye</class>
    <class kind="struct">gtsam::traits&lt; Cal3Fisheye &gt;</class>
    <class kind="struct">gtsam::traits&lt; const Cal3Fisheye &gt;</class>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>Cal3Unified.cpp</name>
    <path>/Users/dellaert/git/github/gtsam/geometry/</path>
    <filename>a00308.html</filename>
    <includes id="a00050" name="Matrix.h" local="no" imported="no">gtsam/base/Matrix.h</includes>
    <includes id="a00134" name="Vector.h" local="no" imported="no">gtsam/base/Vector.h</includes>
    <includes id="a00275" name="Cal3Unified.h" local="no" imported="no">gtsam/geometry/Cal3Unified.h</includes>
    <includes id="a00380" name="Point2.h" local="no" imported="no">gtsam/geometry/Point2.h</includes>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>Cal3Unified.h</name>
    <path>/Users/dellaert/git/github/gtsam/geometry/</path>
    <filename>a00275.html</filename>
    <class kind="class">gtsam::Cal3Unified</class>
    <class kind="struct">gtsam::traits&lt; Cal3Unified &gt;</class>
    <class kind="struct">gtsam::traits&lt; const Cal3Unified &gt;</class>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>CalibratedCamera.cpp</name>
    <path>/Users/dellaert/git/github/gtsam/geometry/</path>
    <filename>a00428.html</filename>
    <includes id="a00404" name="Pose2.h" local="no" imported="no">gtsam/geometry/Pose2.h</includes>
    <includes id="a00302" name="CalibratedCamera.h" local="no" imported="no">gtsam/geometry/CalibratedCamera.h</includes>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>CalibratedCamera.h</name>
    <path>/Users/dellaert/git/github/gtsam/geometry/</path>
    <filename>a00302.html</filename>
    <includes id="a00401" name="BearingRange.h" local="no" imported="no">gtsam/geometry/BearingRange.h</includes>
    <includes id="a00380" name="Point2.h" local="no" imported="no">gtsam/geometry/Point2.h</includes>
    <includes id="a00350" name="Pose3.h" local="no" imported="no">gtsam/geometry/Pose3.h</includes>
    <includes id="a00110" name="Manifold.h" local="no" imported="no">gtsam/base/Manifold.h</includes>
    <includes id="a00071" name="ThreadsafeException.h" local="no" imported="no">gtsam/base/ThreadsafeException.h</includes>
    <class kind="class">gtsam::CheiralityException</class>
    <class kind="class">gtsam::PinholeBase</class>
    <class kind="class">gtsam::CalibratedCamera</class>
    <class kind="struct">gtsam::traits&lt; CalibratedCamera &gt;</class>
    <class kind="struct">gtsam::traits&lt; const CalibratedCamera &gt;</class>
    <class kind="struct">gtsam::Range&lt; CalibratedCamera, T &gt;</class>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>CameraSet.h</name>
    <path>/Users/dellaert/git/github/gtsam/geometry/</path>
    <filename>a00284.html</filename>
    <includes id="a00311" name="Point3.h" local="no" imported="no">gtsam/geometry/Point3.h</includes>
    <includes id="a00302" name="CalibratedCamera.h" local="no" imported="no">gtsam/geometry/CalibratedCamera.h</includes>
    <includes id="a00101" name="Testable.h" local="no" imported="no">gtsam/base/Testable.h</includes>
    <includes id="a00083" name="SymmetricBlockMatrix.h" local="no" imported="no">gtsam/base/SymmetricBlockMatrix.h</includes>
    <includes id="a00047" name="FastMap.h" local="no" imported="no">gtsam/base/FastMap.h</includes>
    <includes id="a00491" name="Key.h" local="no" imported="no">gtsam/inference/Key.h</includes>
    <class kind="class">gtsam::CameraSet</class>
    <class kind="struct">gtsam::traits&lt; CameraSet&lt; CAMERA &gt; &gt;</class>
    <class kind="struct">gtsam::traits&lt; const CameraSet&lt; CAMERA &gt; &gt;</class>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>Cyclic.cpp</name>
    <path>/Users/dellaert/git/github/gtsam/geometry/</path>
    <filename>a00377.html</filename>
    <includes id="a00362" name="Cyclic.h" local="no" imported="no">gtsam/geometry/Cyclic.h</includes>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>Cyclic.h</name>
    <path>/Users/dellaert/git/github/gtsam/geometry/</path>
    <filename>a00362.html</filename>
    <includes id="a00086" name="Group.h" local="no" imported="no">gtsam/base/Group.h</includes>
    <includes id="a00101" name="Testable.h" local="no" imported="no">gtsam/base/Testable.h</includes>
    <class kind="class">gtsam::Cyclic</class>
    <class kind="struct">gtsam::traits&lt; Cyclic&lt; N &gt; &gt;</class>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>Line3.h</name>
    <path>/Users/dellaert/git/github/gtsam/geometry/</path>
    <filename>a00374.html</filename>
    <includes id="a00422" name="Rot3.h" local="no" imported="no">gtsam/geometry/Rot3.h</includes>
    <includes id="a00350" name="Pose3.h" local="no" imported="no">gtsam/geometry/Pose3.h</includes>
    <class kind="class">gtsam::Line3</class>
    <class kind="struct">gtsam::traits&lt; Line3 &gt;</class>
    <class kind="struct">gtsam::traits&lt; const Line3 &gt;</class>
    <namespace>gtsam</namespace>
    <member kind="function">
      <type>Line3</type>
      <name>transformTo</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>a3eb48c80bef807e34d7189efdc8875cd</anchor>
      <arglist>(const Pose3 &amp;wTc, const Line3 &amp;wL, OptionalJacobian&lt; 4, 6 &gt; Dpose=boost::none, OptionalJacobian&lt; 4, 4 &gt; Dline=boost::none)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>PinholeCamera.h</name>
    <path>/Users/dellaert/git/github/gtsam/geometry/</path>
    <filename>a00314.html</filename>
    <includes id="a00323" name="PinholePose.h" local="no" imported="no">gtsam/geometry/PinholePose.h</includes>
    <includes id="a00401" name="BearingRange.h" local="no" imported="no">gtsam/geometry/BearingRange.h</includes>
    <class kind="class">gtsam::PinholeCamera</class>
    <class kind="struct">gtsam::traits&lt; PinholeCamera&lt; Calibration &gt; &gt;</class>
    <class kind="struct">gtsam::traits&lt; const PinholeCamera&lt; Calibration &gt; &gt;</class>
    <class kind="struct">gtsam::Range&lt; PinholeCamera&lt; Calibration &gt;, T &gt;</class>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>PinholePose.h</name>
    <path>/Users/dellaert/git/github/gtsam/geometry/</path>
    <filename>a00323.html</filename>
    <includes id="a00302" name="CalibratedCamera.h" local="no" imported="no">gtsam/geometry/CalibratedCamera.h</includes>
    <includes id="a00380" name="Point2.h" local="no" imported="no">gtsam/geometry/Point2.h</includes>
    <class kind="class">gtsam::PinholeBaseK</class>
    <class kind="class">gtsam::PinholePose</class>
    <class kind="struct">gtsam::traits&lt; PinholePose&lt; CALIBRATION &gt; &gt;</class>
    <class kind="struct">gtsam::traits&lt; const PinholePose&lt; CALIBRATION &gt; &gt;</class>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>PinholeSet.h</name>
    <path>/Users/dellaert/git/github/gtsam/geometry/</path>
    <filename>a00452.html</filename>
    <includes id="a00284" name="CameraSet.h" local="no" imported="no">gtsam/geometry/CameraSet.h</includes>
    <includes id="a00431" name="triangulation.h" local="no" imported="no">gtsam/geometry/triangulation.h</includes>
    <class kind="class">gtsam::PinholeSet</class>
    <class kind="struct">gtsam::traits&lt; PinholeSet&lt; CAMERA &gt; &gt;</class>
    <class kind="struct">gtsam::traits&lt; const PinholeSet&lt; CAMERA &gt; &gt;</class>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>Point2.cpp</name>
    <path>/Users/dellaert/git/github/gtsam/geometry/</path>
    <filename>a00356.html</filename>
    <includes id="a00380" name="Point2.h" local="no" imported="no">gtsam/geometry/Point2.h</includes>
    <namespace>gtsam</namespace>
    <member kind="function">
      <type>double</type>
      <name>norm2</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>afee4e6aa4aba9b6a6b421ddd75b52dfc</anchor>
      <arglist>(const Point2 &amp;p, OptionalJacobian&lt; 1, 2 &gt; H=boost::none)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>distance2</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>afd1282dfb080cb393ae60188b4582cb2</anchor>
      <arglist>(const Point2 &amp;p1, const Point2 &amp;q, OptionalJacobian&lt; 1, 2 &gt; H1=boost::none, OptionalJacobian&lt; 1, 2 &gt; H2=boost::none)</arglist>
    </member>
    <member kind="function">
      <type>list&lt; Point2 &gt;</type>
      <name>circleCircleIntersection</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>a93d4e38a582b6f32fc4f301df10721d5</anchor>
      <arglist>(Point2 c1, double r1, Point2 c2, double r2, double tol=1e-9)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Point2.h</name>
    <path>/Users/dellaert/git/github/gtsam/geometry/</path>
    <filename>a00380.html</filename>
    <class kind="struct">gtsam::Range&lt; Point2, Point2 &gt;</class>
    <namespace>gtsam</namespace>
    <member kind="typedef">
      <type>Vector2</type>
      <name>Point2</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>a6ede8384dee0353a0ce5fb54ea50c21d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::pair&lt; Point2, Point2 &gt;</type>
      <name>Point2Pair</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>aea758f150791443afe1191868963b4e1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>norm2</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>afee4e6aa4aba9b6a6b421ddd75b52dfc</anchor>
      <arglist>(const Point2 &amp;p, OptionalJacobian&lt; 1, 2 &gt; H=boost::none)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>distance2</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>afd1282dfb080cb393ae60188b4582cb2</anchor>
      <arglist>(const Point2 &amp;p1, const Point2 &amp;q, OptionalJacobian&lt; 1, 2 &gt; H1=boost::none, OptionalJacobian&lt; 1, 2 &gt; H2=boost::none)</arglist>
    </member>
    <member kind="function">
      <type>Point2</type>
      <name>operator*</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>a63d86e99c211c6daeac2b7b4dd9d928e</anchor>
      <arglist>(double s, const Point2 &amp;p)</arglist>
    </member>
    <member kind="function">
      <type>list&lt; Point2 &gt;</type>
      <name>circleCircleIntersection</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>a93d4e38a582b6f32fc4f301df10721d5</anchor>
      <arglist>(Point2 c1, double r1, Point2 c2, double r2, double tol=1e-9)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Point3.cpp</name>
    <path>/Users/dellaert/git/github/gtsam/geometry/</path>
    <filename>a00347.html</filename>
    <includes id="a00311" name="Point3.h" local="no" imported="no">gtsam/geometry/Point3.h</includes>
    <namespace>gtsam</namespace>
    <member kind="function">
      <type>double</type>
      <name>distance3</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>aa42f7ec660b7353de39f9c86a26711cc</anchor>
      <arglist>(const Point3 &amp;p1, const Point3 &amp;q, OptionalJacobian&lt; 1, 3 &gt; H1=boost::none, OptionalJacobian&lt; 1, 3 &gt; H2=boost::none)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>norm3</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>ac37b6f807985ffd25217e33f6136fe58</anchor>
      <arglist>(const Point3 &amp;p, OptionalJacobian&lt; 1, 3 &gt; H=boost::none)</arglist>
    </member>
    <member kind="function">
      <type>Point3</type>
      <name>normalize</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>abb52bb00c68909fc1147e5d112e8c2ae</anchor>
      <arglist>(const Point3 &amp;p, OptionalJacobian&lt; 3, 3 &gt; H=boost::none)</arglist>
    </member>
    <member kind="function">
      <type>Point3</type>
      <name>cross</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>a86bf6ed2ffb0ecc42a7deb8922f4ca4f</anchor>
      <arglist>(const Point3 &amp;p, const Point3 &amp;q, OptionalJacobian&lt; 3, 3 &gt; H_p=boost::none, OptionalJacobian&lt; 3, 3 &gt; H_q=boost::none)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>dot</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>a7dc820e4e47218768f104b43a184a1bd</anchor>
      <arglist>(const Point3 &amp;p, const Point3 &amp;q, OptionalJacobian&lt; 1, 3 &gt; H_p=boost::none, OptionalJacobian&lt; 1, 3 &gt; H_q=boost::none)</arglist>
    </member>
    <member kind="function">
      <type>Point3Pair</type>
      <name>means</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>a57f778b84bc6106471006421d289b832</anchor>
      <arglist>(const std::vector&lt; Point3Pair &gt; &amp;abPointPairs)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Point3.h</name>
    <path>/Users/dellaert/git/github/gtsam/geometry/</path>
    <filename>a00311.html</filename>
    <includes id="a00134" name="Vector.h" local="no" imported="no">gtsam/base/Vector.h</includes>
    <class kind="struct">gtsam::Range&lt; Point3, Point3 &gt;</class>
    <namespace>gtsam</namespace>
    <member kind="typedef">
      <type>Vector3</type>
      <name>Point3</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>aaa8ed89fd60ea4601d9de63c4811525b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>distance3</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>aa42f7ec660b7353de39f9c86a26711cc</anchor>
      <arglist>(const Point3 &amp;p1, const Point3 &amp;q, OptionalJacobian&lt; 1, 3 &gt; H1=boost::none, OptionalJacobian&lt; 1, 3 &gt; H2=boost::none)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>norm3</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>ac37b6f807985ffd25217e33f6136fe58</anchor>
      <arglist>(const Point3 &amp;p, OptionalJacobian&lt; 1, 3 &gt; H=boost::none)</arglist>
    </member>
    <member kind="function">
      <type>Point3</type>
      <name>normalize</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>abb52bb00c68909fc1147e5d112e8c2ae</anchor>
      <arglist>(const Point3 &amp;p, OptionalJacobian&lt; 3, 3 &gt; H=boost::none)</arglist>
    </member>
    <member kind="function">
      <type>Point3</type>
      <name>cross</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>a86bf6ed2ffb0ecc42a7deb8922f4ca4f</anchor>
      <arglist>(const Point3 &amp;p, const Point3 &amp;q, OptionalJacobian&lt; 3, 3 &gt; H_p=boost::none, OptionalJacobian&lt; 3, 3 &gt; H_q=boost::none)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>dot</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>a7dc820e4e47218768f104b43a184a1bd</anchor>
      <arglist>(const Point3 &amp;p, const Point3 &amp;q, OptionalJacobian&lt; 1, 3 &gt; H_p=boost::none, OptionalJacobian&lt; 1, 3 &gt; H_q=boost::none)</arglist>
    </member>
    <member kind="function">
      <type>Point3</type>
      <name>mean</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>a300205092710091b8745c0a145da20a1</anchor>
      <arglist>(const CONTAINER &amp;points)</arglist>
    </member>
    <member kind="function">
      <type>Point3Pair</type>
      <name>means</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>a57f778b84bc6106471006421d289b832</anchor>
      <arglist>(const std::vector&lt; Point3Pair &gt; &amp;abPointPairs)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Pose2.cpp</name>
    <path>/Users/dellaert/git/github/gtsam/geometry/</path>
    <filename>a00392.html</filename>
    <includes id="a08940" name="concepts.h" local="no" imported="no">gtsam/geometry/concepts.h</includes>
    <includes id="a00404" name="Pose2.h" local="no" imported="no">gtsam/geometry/Pose2.h</includes>
    <includes id="a00101" name="Testable.h" local="no" imported="no">gtsam/base/Testable.h</includes>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>Pose2.h</name>
    <path>/Users/dellaert/git/github/gtsam/geometry/</path>
    <filename>a00404.html</filename>
    <includes id="a00401" name="BearingRange.h" local="no" imported="no">gtsam/geometry/BearingRange.h</includes>
    <includes id="a00380" name="Point2.h" local="no" imported="no">gtsam/geometry/Point2.h</includes>
    <includes id="a00281" name="Rot2.h" local="no" imported="no">gtsam/geometry/Rot2.h</includes>
    <includes id="a00131" name="Lie.h" local="no" imported="no">gtsam/base/Lie.h</includes>
    <class kind="class">gtsam::Pose2</class>
    <class kind="struct">gtsam::Pose2::ChartAtOrigin</class>
    <class kind="struct">gtsam::traits&lt; Pose2 &gt;</class>
    <class kind="struct">gtsam::traits&lt; const Pose2 &gt;</class>
    <class kind="struct">gtsam::Bearing&lt; Pose2, T &gt;</class>
    <class kind="struct">gtsam::Range&lt; Pose2, T &gt;</class>
    <namespace>gtsam</namespace>
    <member kind="function">
      <type>Matrix</type>
      <name>wedge&lt; Pose2 &gt;</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>a4b78f4db0e05f3ca838ee4da6187710e</anchor>
      <arglist>(const Vector &amp;xi)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Pose3.cpp</name>
    <path>/Users/dellaert/git/github/gtsam/geometry/</path>
    <filename>a00398.html</filename>
    <includes id="a00350" name="Pose3.h" local="no" imported="no">gtsam/geometry/Pose3.h</includes>
    <includes id="a00404" name="Pose2.h" local="no" imported="no">gtsam/geometry/Pose2.h</includes>
    <includes id="a08940" name="concepts.h" local="no" imported="no">gtsam/geometry/concepts.h</includes>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>Pose3.h</name>
    <path>/Users/dellaert/git/github/gtsam/geometry/</path>
    <filename>a00350.html</filename>
    <includes id="a00401" name="BearingRange.h" local="no" imported="no">gtsam/geometry/BearingRange.h</includes>
    <includes id="a00311" name="Point3.h" local="no" imported="no">gtsam/geometry/Point3.h</includes>
    <includes id="a00422" name="Rot3.h" local="no" imported="no">gtsam/geometry/Rot3.h</includes>
    <includes id="a00131" name="Lie.h" local="no" imported="no">gtsam/base/Lie.h</includes>
    <class kind="class">gtsam::Pose3</class>
    <class kind="struct">gtsam::Pose3::ChartAtOrigin</class>
    <class kind="struct">gtsam::traits&lt; Pose3 &gt;</class>
    <class kind="struct">gtsam::traits&lt; const Pose3 &gt;</class>
    <class kind="struct">gtsam::Bearing&lt; Pose3, Point3 &gt;</class>
    <class kind="struct">gtsam::Bearing&lt; Pose3, Pose3 &gt;</class>
    <class kind="struct">gtsam::Range&lt; Pose3, T &gt;</class>
    <namespace>gtsam</namespace>
    <member kind="function">
      <type>Matrix</type>
      <name>wedge&lt; Pose3 &gt;</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>aefb606eb24889c0f418acf1515a2c723</anchor>
      <arglist>(const Vector &amp;xi)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Quaternion.h</name>
    <path>/Users/dellaert/git/github/gtsam/geometry/</path>
    <filename>a00326.html</filename>
    <includes id="a00131" name="Lie.h" local="no" imported="no">gtsam/base/Lie.h</includes>
    <includes id="a00344" name="SO3.h" local="no" imported="no">gtsam/geometry/SO3.h</includes>
    <class kind="struct">gtsam::traits&lt; QUATERNION_TYPE &gt;</class>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>Rot2.cpp</name>
    <path>/Users/dellaert/git/github/gtsam/geometry/</path>
    <filename>a00383.html</filename>
    <includes id="a00281" name="Rot2.h" local="no" imported="no">gtsam/geometry/Rot2.h</includes>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>Rot2.h</name>
    <path>/Users/dellaert/git/github/gtsam/geometry/</path>
    <filename>a00281.html</filename>
    <includes id="a00380" name="Point2.h" local="no" imported="no">gtsam/geometry/Point2.h</includes>
    <includes id="a00131" name="Lie.h" local="no" imported="no">gtsam/base/Lie.h</includes>
    <class kind="class">gtsam::Rot2</class>
    <class kind="struct">gtsam::Rot2::ChartAtOrigin</class>
    <class kind="struct">gtsam::traits&lt; Rot2 &gt;</class>
    <class kind="struct">gtsam::traits&lt; const Rot2 &gt;</class>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>Rot3.cpp</name>
    <path>/Users/dellaert/git/github/gtsam/geometry/</path>
    <filename>a00389.html</filename>
    <includes id="a00422" name="Rot3.h" local="no" imported="no">gtsam/geometry/Rot3.h</includes>
    <includes id="a00344" name="SO3.h" local="no" imported="no">gtsam/geometry/SO3.h</includes>
    <namespace>gtsam</namespace>
    <member kind="function">
      <type>pair&lt; Matrix3, Vector3 &gt;</type>
      <name>RQ</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>a5172b5b6d51bd5348c7e551e1376f60a</anchor>
      <arglist>(const Matrix3 &amp;A, OptionalJacobian&lt; 3, 9 &gt; H=boost::none)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Rot3.h</name>
    <path>/Users/dellaert/git/github/gtsam/geometry/</path>
    <filename>a00422.html</filename>
    <includes id="a00326" name="Quaternion.h" local="no" imported="no">gtsam/geometry/Quaternion.h</includes>
    <includes id="a00344" name="SO3.h" local="no" imported="no">gtsam/geometry/SO3.h</includes>
    <class kind="class">gtsam::Rot3</class>
    <class kind="struct">gtsam::Rot3::CayleyChart</class>
    <class kind="struct">gtsam::Rot3::ChartAtOrigin</class>
    <class kind="struct">gtsam::traits&lt; Rot3 &gt;</class>
    <class kind="struct">gtsam::traits&lt; const Rot3 &gt;</class>
    <namespace>gtsam</namespace>
    <member kind="function">
      <type>pair&lt; Matrix3, Vector3 &gt;</type>
      <name>RQ</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>a5172b5b6d51bd5348c7e551e1376f60a</anchor>
      <arglist>(const Matrix3 &amp;A, OptionalJacobian&lt; 3, 9 &gt; H=boost::none)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Rot3M.cpp</name>
    <path>/Users/dellaert/git/github/gtsam/geometry/</path>
    <filename>a00320.html</filename>
    <includes id="a00422" name="Rot3.h" local="no" imported="no">gtsam/geometry/Rot3.h</includes>
    <includes id="a00344" name="SO3.h" local="no" imported="no">gtsam/geometry/SO3.h</includes>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>Rot3Q.cpp</name>
    <path>/Users/dellaert/git/github/gtsam/geometry/</path>
    <filename>a00371.html</filename>
  </compound>
  <compound kind="file">
    <name>Similarity3.cpp</name>
    <path>/Users/dellaert/git/github/gtsam/geometry/</path>
    <filename>a00293.html</filename>
    <includes id="a00425" name="Similarity3.h" local="no" imported="no">gtsam/geometry/Similarity3.h</includes>
    <includes id="a00350" name="Pose3.h" local="no" imported="no">gtsam/geometry/Pose3.h</includes>
    <includes id="a00110" name="Manifold.h" local="no" imported="no">gtsam/base/Manifold.h</includes>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>Similarity3.h</name>
    <path>/Users/dellaert/git/github/gtsam/geometry/</path>
    <filename>a00425.html</filename>
    <includes id="a00422" name="Rot3.h" local="no" imported="no">gtsam/geometry/Rot3.h</includes>
    <includes id="a00311" name="Point3.h" local="no" imported="no">gtsam/geometry/Point3.h</includes>
    <includes id="a00350" name="Pose3.h" local="no" imported="no">gtsam/geometry/Pose3.h</includes>
    <includes id="a00131" name="Lie.h" local="no" imported="no">gtsam/base/Lie.h</includes>
    <includes id="a00110" name="Manifold.h" local="no" imported="no">gtsam/base/Manifold.h</includes>
    <class kind="class">gtsam::Similarity3</class>
    <class kind="struct">gtsam::Similarity3::ChartAtOrigin</class>
    <class kind="struct">gtsam::traits&lt; Similarity3 &gt;</class>
    <class kind="struct">gtsam::traits&lt; const Similarity3 &gt;</class>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>SimpleCamera.cpp</name>
    <path>/Users/dellaert/git/github/gtsam/geometry/</path>
    <filename>a00329.html</filename>
    <includes id="a00338" name="SimpleCamera.h" local="no" imported="no">gtsam/geometry/SimpleCamera.h</includes>
    <includes id="a00266" name="Cal3_S2.h" local="no" imported="no">gtsam/geometry/Cal3_S2.h</includes>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>SimpleCamera.h</name>
    <path>/Users/dellaert/git/github/gtsam/geometry/</path>
    <filename>a00338.html</filename>
    <includes id="a00401" name="BearingRange.h" local="no" imported="no">gtsam/geometry/BearingRange.h</includes>
    <includes id="a00332" name="Cal3Bundler.h" local="no" imported="no">gtsam/geometry/Cal3Bundler.h</includes>
    <includes id="a00407" name="Cal3DS2.h" local="no" imported="no">gtsam/geometry/Cal3DS2.h</includes>
    <includes id="a00416" name="Cal3Fisheye.h" local="no" imported="no">gtsam/geometry/Cal3Fisheye.h</includes>
    <includes id="a00275" name="Cal3Unified.h" local="no" imported="no">gtsam/geometry/Cal3Unified.h</includes>
    <includes id="a00266" name="Cal3_S2.h" local="no" imported="no">gtsam/geometry/Cal3_S2.h</includes>
    <includes id="a00314" name="PinholeCamera.h" local="no" imported="no">gtsam/geometry/PinholeCamera.h</includes>
    <namespace>gtsam</namespace>
    <member kind="typedef">
      <type>gtsam::PinholeCamera&lt; gtsam::Cal3_S2 &gt;</type>
      <name>PinholeCameraCal3_S2</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>a3a2e8c622e65623a6853c84073bdb4f2</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>SO3.cpp</name>
    <path>/Users/dellaert/git/github/gtsam/geometry/</path>
    <filename>a00299.html</filename>
    <includes id="a00344" name="SO3.h" local="no" imported="no">gtsam/geometry/SO3.h</includes>
    <namespace>gtsam</namespace>
    <member kind="function">
      <type>GTSAM_EXPORT Matrix99</type>
      <name>Dcompose</name>
      <anchorfile>a00299.html</anchorfile>
      <anchor>a7c7e26b6d07ec0f16363c196247b294d</anchor>
      <arglist>(const SO3 &amp;R)</arglist>
    </member>
    <member kind="function">
      <type>GTSAM_EXPORT Matrix3</type>
      <name>compose</name>
      <anchorfile>a00299.html</anchorfile>
      <anchor>a72fc8b10f24d82aa8a4c99f99403fe5e</anchor>
      <arglist>(const Matrix3 &amp;M, const SO3 &amp;R, OptionalJacobian&lt; 9, 9 &gt; H=boost::none)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>SO3.h</name>
    <path>/Users/dellaert/git/github/gtsam/geometry/</path>
    <filename>a00344.html</filename>
    <includes id="a00272" name="SOn.h" local="no" imported="no">gtsam/geometry/SOn.h</includes>
    <includes id="a00131" name="Lie.h" local="no" imported="no">gtsam/base/Lie.h</includes>
    <includes id="a00050" name="Matrix.h" local="no" imported="no">gtsam/base/Matrix.h</includes>
    <class kind="class">gtsam::so3::ExpmapFunctor</class>
    <class kind="class">gtsam::so3::DexpFunctor</class>
    <class kind="struct">gtsam::traits&lt; SO3 &gt;</class>
    <class kind="struct">gtsam::traits&lt; const SO3 &gt;</class>
    <namespace>gtsam</namespace>
    <member kind="function">
      <type>void</type>
      <name>serialize</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>a2e0b14126ed42ee95ca5f5f092c5bc84</anchor>
      <arglist>(Archive &amp;ar, SO3 &amp;R, const unsigned int)</arglist>
    </member>
    <member kind="function">
      <type>GTSAM_EXPORT Matrix3</type>
      <name>compose</name>
      <anchorfile>a00299.html</anchorfile>
      <anchor>a72fc8b10f24d82aa8a4c99f99403fe5e</anchor>
      <arglist>(const Matrix3 &amp;M, const SO3 &amp;R, OptionalJacobian&lt; 9, 9 &gt; H=boost::none)</arglist>
    </member>
    <member kind="function">
      <type>GTSAM_EXPORT Matrix99</type>
      <name>Dcompose</name>
      <anchorfile>a00299.html</anchorfile>
      <anchor>a7c7e26b6d07ec0f16363c196247b294d</anchor>
      <arglist>(const SO3 &amp;R)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>SO4.cpp</name>
    <path>/Users/dellaert/git/github/gtsam/geometry/</path>
    <filename>a00263.html</filename>
    <includes id="a00035" name="timing.h" local="no" imported="no">gtsam/base/timing.h</includes>
    <includes id="a00278" name="SO4.h" local="no" imported="no">gtsam/geometry/SO4.h</includes>
    <namespace>gtsam</namespace>
    <member kind="function">
      <type>GTSAM_EXPORT Matrix3</type>
      <name>topLeft</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>a8d21728e3da4cf1a96e1b6f87a97da47</anchor>
      <arglist>(const SO4 &amp;Q, OptionalJacobian&lt; 9, 6 &gt; H=boost::none)</arglist>
    </member>
    <member kind="function">
      <type>GTSAM_EXPORT Matrix43</type>
      <name>stiefel</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>a3e57e4771f13855a495ec2c6454c9121</anchor>
      <arglist>(const SO4 &amp;Q, OptionalJacobian&lt; 12, 6 &gt; H=boost::none)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>SO4.h</name>
    <path>/Users/dellaert/git/github/gtsam/geometry/</path>
    <filename>a00278.html</filename>
    <includes id="a00272" name="SOn.h" local="no" imported="no">gtsam/geometry/SOn.h</includes>
    <includes id="a00086" name="Group.h" local="no" imported="no">gtsam/base/Group.h</includes>
    <includes id="a00131" name="Lie.h" local="no" imported="no">gtsam/base/Lie.h</includes>
    <includes id="a00110" name="Manifold.h" local="no" imported="no">gtsam/base/Manifold.h</includes>
    <includes id="a00050" name="Matrix.h" local="no" imported="no">gtsam/base/Matrix.h</includes>
    <class kind="struct">gtsam::traits&lt; SO4 &gt;</class>
    <class kind="struct">gtsam::traits&lt; const SO4 &gt;</class>
    <namespace>gtsam</namespace>
    <member kind="function">
      <type>GTSAM_EXPORT Matrix3</type>
      <name>topLeft</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>a8d21728e3da4cf1a96e1b6f87a97da47</anchor>
      <arglist>(const SO4 &amp;Q, OptionalJacobian&lt; 9, 6 &gt; H=boost::none)</arglist>
    </member>
    <member kind="function">
      <type>GTSAM_EXPORT Matrix43</type>
      <name>stiefel</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>a3e57e4771f13855a495ec2c6454c9121</anchor>
      <arglist>(const SO4 &amp;Q, OptionalJacobian&lt; 12, 6 &gt; H=boost::none)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>serialize</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>a76855a1214bf05a8704ee3deaece6339</anchor>
      <arglist>(Archive &amp;ar, SO4 &amp;Q, const unsigned int)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>SOn-inl.h</name>
    <path>/Users/dellaert/git/github/gtsam/geometry/</path>
    <filename>a00434.html</filename>
    <includes id="a00050" name="Matrix.h" local="no" imported="no">gtsam/base/Matrix.h</includes>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>SOn.cpp</name>
    <path>/Users/dellaert/git/github/gtsam/geometry/</path>
    <filename>a00419.html</filename>
    <includes id="a00272" name="SOn.h" local="no" imported="no">gtsam/geometry/SOn.h</includes>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>SOn.h</name>
    <path>/Users/dellaert/git/github/gtsam/geometry/</path>
    <filename>a00272.html</filename>
    <includes id="a00131" name="Lie.h" local="no" imported="no">gtsam/base/Lie.h</includes>
    <includes id="a00110" name="Manifold.h" local="no" imported="no">gtsam/base/Manifold.h</includes>
    <includes id="a00098" name="make_shared.h" local="no" imported="no">gtsam/base/make_shared.h</includes>
    <includes id="a00434" name="SOn-inl.h" local="yes" imported="no">SOn-inl.h</includes>
    <class kind="class">gtsam::SO</class>
    <class kind="struct">gtsam::SO::ChartAtOrigin</class>
    <class kind="struct">gtsam::traits&lt; SO&lt; N &gt; &gt;</class>
    <class kind="struct">gtsam::traits&lt; const SO&lt; N &gt; &gt;</class>
    <namespace>gtsam</namespace>
    <member kind="function">
      <type>constexpr int</type>
      <name>DimensionSO</name>
      <anchorfile>a00272.html</anchorfile>
      <anchor>afdaebcf25a03a9a9986d35d2831605dd</anchor>
      <arglist>(int N)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>serialize</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>ac1829b506847127f406c0d6182fc0cdd</anchor>
      <arglist>(Archive &amp;ar, SOn &amp;Q, const unsigned int file_version)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>StereoCamera.h</name>
    <path>/Users/dellaert/git/github/gtsam/geometry/</path>
    <filename>a00437.html</filename>
    <includes id="a00269" name="Cal3_S2Stereo.h" local="no" imported="no">gtsam/geometry/Cal3_S2Stereo.h</includes>
    <includes id="a00350" name="Pose3.h" local="no" imported="no">gtsam/geometry/Pose3.h</includes>
    <includes id="a00287" name="StereoPoint2.h" local="no" imported="no">gtsam/geometry/StereoPoint2.h</includes>
    <class kind="class">gtsam::StereoCheiralityException</class>
    <class kind="class">gtsam::StereoCamera</class>
    <class kind="struct">gtsam::traits&lt; StereoCamera &gt;</class>
    <class kind="struct">gtsam::traits&lt; const StereoCamera &gt;</class>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>StereoPoint2.cpp</name>
    <path>/Users/dellaert/git/github/gtsam/geometry/</path>
    <filename>a00296.html</filename>
    <includes id="a00287" name="StereoPoint2.h" local="no" imported="no">gtsam/geometry/StereoPoint2.h</includes>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>StereoPoint2.h</name>
    <path>/Users/dellaert/git/github/gtsam/geometry/</path>
    <filename>a00287.html</filename>
    <includes id="a00380" name="Point2.h" local="no" imported="no">gtsam/geometry/Point2.h</includes>
    <class kind="class">gtsam::StereoPoint2</class>
    <class kind="struct">gtsam::traits&lt; StereoPoint2 &gt;</class>
    <class kind="struct">gtsam::traits&lt; const StereoPoint2 &gt;</class>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>triangulation.h</name>
    <path>/Users/dellaert/git/github/gtsam/geometry/</path>
    <filename>a00431.html</filename>
    <includes id="a00332" name="Cal3Bundler.h" local="no" imported="no">gtsam/geometry/Cal3Bundler.h</includes>
    <includes id="a00416" name="Cal3Fisheye.h" local="no" imported="no">gtsam/geometry/Cal3Fisheye.h</includes>
    <includes id="a00275" name="Cal3Unified.h" local="no" imported="no">gtsam/geometry/Cal3Unified.h</includes>
    <includes id="a00266" name="Cal3_S2.h" local="no" imported="no">gtsam/geometry/Cal3_S2.h</includes>
    <includes id="a00284" name="CameraSet.h" local="no" imported="no">gtsam/geometry/CameraSet.h</includes>
    <includes id="a00314" name="PinholeCamera.h" local="no" imported="no">gtsam/geometry/PinholeCamera.h</includes>
    <includes id="a00404" name="Pose2.h" local="no" imported="no">gtsam/geometry/Pose2.h</includes>
    <includes id="a08955" name="Symbol.h" local="no" imported="no">gtsam/inference/Symbol.h</includes>
    <includes id="a00962" name="NonlinearFactorGraph.h" local="no" imported="no">gtsam/nonlinear/NonlinearFactorGraph.h</includes>
    <class kind="class">gtsam::TriangulationUnderconstrainedException</class>
    <class kind="class">gtsam::TriangulationCheiralityException</class>
    <class kind="struct">gtsam::CameraProjectionMatrix</class>
    <class kind="struct">gtsam::TriangulationParameters</class>
    <class kind="class">gtsam::TriangulationResult</class>
    <namespace>gtsam</namespace>
    <member kind="function">
      <type>Vector4</type>
      <name>triangulateHomogeneousDLT</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>af378e231b519e8bb1f09f4aa13a38dca</anchor>
      <arglist>(const std::vector&lt; Matrix34, Eigen::aligned_allocator&lt; Matrix34 &gt; &gt; &amp;projection_matrices, const Point2Vector &amp;measurements, double rank_tol=1e-9)</arglist>
    </member>
    <member kind="function">
      <type>Point3</type>
      <name>triangulateDLT</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>aed2918ac0049316bf09f96879efca3b6</anchor>
      <arglist>(const std::vector&lt; Matrix34, Eigen::aligned_allocator&lt; Matrix34 &gt; &gt; &amp;projection_matrices, const Point2Vector &amp;measurements, double rank_tol=1e-9)</arglist>
    </member>
    <member kind="function">
      <type>std::pair&lt; NonlinearFactorGraph, Values &gt;</type>
      <name>triangulationGraph</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>a3fb854935c3a0b73ba63adfb86a5c141</anchor>
      <arglist>(const std::vector&lt; Pose3 &gt; &amp;poses, boost::shared_ptr&lt; CALIBRATION &gt; sharedCal, const Point2Vector &amp;measurements, Key landmarkKey, const Point3 &amp;initialEstimate)</arglist>
    </member>
    <member kind="function">
      <type>std::pair&lt; NonlinearFactorGraph, Values &gt;</type>
      <name>triangulationGraph</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>afefb1a863211aa15c603fbac3541fc4b</anchor>
      <arglist>(const CameraSet&lt; CAMERA &gt; &amp;cameras, const typename CAMERA::MeasurementVector &amp;measurements, Key landmarkKey, const Point3 &amp;initialEstimate)</arglist>
    </member>
    <member kind="function">
      <type>Point3</type>
      <name>optimize</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>a4b0057879b0c5f323185452b0d1a4232</anchor>
      <arglist>(const NonlinearFactorGraph &amp;graph, const Values &amp;values, Key landmarkKey)</arglist>
    </member>
    <member kind="function">
      <type>Point3</type>
      <name>triangulateNonlinear</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>afd76f4999d5ac79b85c4271943e9251f</anchor>
      <arglist>(const std::vector&lt; Pose3 &gt; &amp;poses, boost::shared_ptr&lt; CALIBRATION &gt; sharedCal, const Point2Vector &amp;measurements, const Point3 &amp;initialEstimate)</arglist>
    </member>
    <member kind="function">
      <type>Point3</type>
      <name>triangulateNonlinear</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>a2fa35400ef37861ce74067b6a38884ba</anchor>
      <arglist>(const CameraSet&lt; CAMERA &gt; &amp;cameras, const typename CAMERA::MeasurementVector &amp;measurements, const Point3 &amp;initialEstimate)</arglist>
    </member>
    <member kind="function">
      <type>Point3</type>
      <name>triangulatePoint3</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>ae7b725c367246edb1beea32060fd50f7</anchor>
      <arglist>(const std::vector&lt; Pose3 &gt; &amp;poses, boost::shared_ptr&lt; CALIBRATION &gt; sharedCal, const Point2Vector &amp;measurements, double rank_tol=1e-9, bool optimize=false)</arglist>
    </member>
    <member kind="function">
      <type>Point3</type>
      <name>triangulatePoint3</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>a0493526601a58e173f8c0646ed302739</anchor>
      <arglist>(const CameraSet&lt; CAMERA &gt; &amp;cameras, const typename CAMERA::MeasurementVector &amp;measurements, double rank_tol=1e-9, bool optimize=false)</arglist>
    </member>
    <member kind="function">
      <type>Point3</type>
      <name>triangulatePoint3</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>a22a9a20bbbd347f4cf2a7153a5d43ec4</anchor>
      <arglist>(const CameraSet&lt; PinholeCamera&lt; CALIBRATION &gt; &gt; &amp;cameras, const Point2Vector &amp;measurements, double rank_tol=1e-9, bool optimize=false)</arglist>
    </member>
    <member kind="function">
      <type>TriangulationResult</type>
      <name>triangulateSafe</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>a8d52d7d8a5e5c8d7318ce95ee57e9cfa</anchor>
      <arglist>(const CameraSet&lt; CAMERA &gt; &amp;cameras, const typename CAMERA::MeasurementVector &amp;measured, const TriangulationParameters &amp;params)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>global_includes.h</name>
    <path>/Users/dellaert/git/github/gtsam/</path>
    <filename>a01256.html</filename>
    <includes id="a00020" name="types.h" local="no" imported="no">gtsam/base/types.h</includes>
  </compound>
  <compound kind="file">
    <name>BayesNet.h</name>
    <path>/Users/dellaert/git/github/gtsam/inference/</path>
    <filename>a00479.html</filename>
    <includes id="a00470" name="FactorGraph.h" local="no" imported="no">gtsam/inference/FactorGraph.h</includes>
    <class kind="class">gtsam::BayesNet</class>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>BayesTree.cpp</name>
    <path>/Users/dellaert/git/github/gtsam/inference/</path>
    <filename>a00566.html</filename>
    <includes id="a00497" name="BayesTree.h" local="no" imported="no">gtsam/inference/BayesTree.h</includes>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>BayesTree.h</name>
    <path>/Users/dellaert/git/github/gtsam/inference/</path>
    <filename>a00497.html</filename>
    <includes id="a00491" name="Key.h" local="no" imported="no">gtsam/inference/Key.h</includes>
    <includes id="a00023" name="FastList.h" local="no" imported="no">gtsam/base/FastList.h</includes>
    <includes id="a00002" name="FastVector.h" local="no" imported="no">gtsam/base/FastVector.h</includes>
    <class kind="struct">gtsam::BayesTreeCliqueStats</class>
    <class kind="struct">gtsam::BayesTreeCliqueData</class>
    <class kind="class">gtsam::BayesTree</class>
    <class kind="class">gtsam::BayesTreeOrphanWrapper</class>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>BayesTreeCliqueBase-inst.h</name>
    <path>/Users/dellaert/git/github/gtsam/inference/</path>
    <filename>a00494.html</filename>
    <includes id="a00455" name="BayesTreeCliqueBase.h" local="no" imported="no">gtsam/inference/BayesTreeCliqueBase.h</includes>
    <includes id="a00035" name="timing.h" local="no" imported="no">gtsam/base/timing.h</includes>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>BayesTreeCliqueBase.h</name>
    <path>/Users/dellaert/git/github/gtsam/inference/</path>
    <filename>a00455.html</filename>
    <includes id="a00491" name="Key.h" local="no" imported="no">gtsam/inference/Key.h</includes>
    <includes id="a00521" name="Ordering.h" local="no" imported="no">gtsam/inference/Ordering.h</includes>
    <includes id="a00020" name="types.h" local="no" imported="no">gtsam/base/types.h</includes>
    <includes id="a00002" name="FastVector.h" local="no" imported="no">gtsam/base/FastVector.h</includes>
    <class kind="class">gtsam::BayesTreeCliqueBase</class>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>Conditional.h</name>
    <path>/Users/dellaert/git/github/gtsam/inference/</path>
    <filename>a00575.html</filename>
    <includes id="a00491" name="Key.h" local="no" imported="no">gtsam/inference/Key.h</includes>
    <class kind="class">gtsam::Conditional</class>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>EliminateableFactorGraph.h</name>
    <path>/Users/dellaert/git/github/gtsam/inference/</path>
    <filename>a00524.html</filename>
    <includes id="a00521" name="Ordering.h" local="no" imported="no">gtsam/inference/Ordering.h</includes>
    <includes id="a00482" name="VariableIndex.h" local="no" imported="no">gtsam/inference/VariableIndex.h</includes>
    <class kind="struct">gtsam::EliminationTraits</class>
    <class kind="class">gtsam::EliminateableFactorGraph</class>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>EliminationTree.h</name>
    <path>/Users/dellaert/git/github/gtsam/inference/</path>
    <filename>a00476.html</filename>
    <includes id="a00101" name="Testable.h" local="no" imported="no">gtsam/base/Testable.h</includes>
    <includes id="a00002" name="FastVector.h" local="no" imported="no">gtsam/base/FastVector.h</includes>
    <class kind="class">gtsam::EliminationTree</class>
    <class kind="struct">gtsam::EliminationTree::Node</class>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>Factor.cpp</name>
    <path>/Users/dellaert/git/github/gtsam/inference/</path>
    <filename>a00551.html</filename>
    <includes id="a00515" name="Factor.h" local="no" imported="no">gtsam/inference/Factor.h</includes>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>Factor.h</name>
    <path>/Users/dellaert/git/github/gtsam/inference/</path>
    <filename>a00515.html</filename>
    <includes id="a00020" name="types.h" local="no" imported="no">gtsam/base/types.h</includes>
    <includes id="a00002" name="FastVector.h" local="no" imported="no">gtsam/base/FastVector.h</includes>
    <includes id="a00491" name="Key.h" local="no" imported="no">gtsam/inference/Key.h</includes>
    <class kind="class">gtsam::Factor</class>
    <namespace>gtsam</namespace>
    <member kind="typedef">
      <type>FastVector&lt; FactorIndex &gt;</type>
      <name>FactorIndices</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>a99e63c90a8ac740d99716e73fe97e054</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>FactorGraph.h</name>
    <path>/Users/dellaert/git/github/gtsam/inference/</path>
    <filename>a00470.html</filename>
    <includes id="a00002" name="FastVector.h" local="no" imported="no">gtsam/base/FastVector.h</includes>
    <includes id="a00101" name="Testable.h" local="no" imported="no">gtsam/base/Testable.h</includes>
    <includes id="a00491" name="Key.h" local="no" imported="no">gtsam/inference/Key.h</includes>
    <class kind="class">gtsam::CRefCallPushBack</class>
    <class kind="class">gtsam::RefCallPushBack</class>
    <class kind="class">gtsam::CRefCallAddCopy</class>
    <class kind="class">gtsam::FactorGraph</class>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>graph.h</name>
    <path>/Users/dellaert/git/github/gtsam/inference/</path>
    <filename>a00512.html</filename>
    <includes id="a00944" name="Values.h" local="no" imported="no">gtsam/nonlinear/Values.h</includes>
    <class kind="class">gtsam::SDGraph</class>
    <class kind="class">gtsam::SGraph</class>
    <class kind="class">gtsam::PredecessorMap</class>
    <namespace>gtsam</namespace>
    <member kind="function">
      <type>std::list&lt; KEY &gt;</type>
      <name>predecessorMap2Keys</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>a18a265afdea057ea54be10262396be12</anchor>
      <arglist>(const PredecessorMap&lt; KEY &gt; &amp;p_map)</arglist>
    </member>
    <member kind="function">
      <type>SDGraph&lt; KEY &gt;</type>
      <name>toBoostGraph</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>a6c0319a6ebcc83d4a5cf9ff51729bb80</anchor>
      <arglist>(const G &amp;graph)</arglist>
    </member>
    <member kind="function">
      <type>boost::tuple&lt; G, V, std::map&lt; KEY, V &gt; &gt;</type>
      <name>predecessorMap2Graph</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>ae67d0d86c4e55b175859967a70b36983</anchor>
      <arglist>(const PredecessorMap&lt; KEY &gt; &amp;p_map)</arglist>
    </member>
    <member kind="function">
      <type>boost::shared_ptr&lt; Values &gt;</type>
      <name>composePoses</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>a62b34d6038ccdfa84d8a5bb0c15328b1</anchor>
      <arglist>(const G &amp;graph, const PredecessorMap&lt; KEY &gt; &amp;tree, const POSE &amp;rootPose)</arglist>
    </member>
    <member kind="function">
      <type>PredecessorMap&lt; KEY &gt;</type>
      <name>findMinimumSpanningTree</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>a7771a103b41708e88763ff67059ff01d</anchor>
      <arglist>(const G &amp;g)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>split</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>a3453247aec1d8b4642947ffd4bca426b</anchor>
      <arglist>(const G &amp;g, const PredecessorMap&lt; KEY &gt; &amp;tree, G &amp;Ab1, G &amp;Ab2)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>inference-inst.h</name>
    <path>/Users/dellaert/git/github/gtsam/inference/</path>
    <filename>a00536.html</filename>
    <includes id="a00095" name="treeTraversal-inst.h" local="no" imported="no">gtsam/base/treeTraversal-inst.h</includes>
    <includes id="a00002" name="FastVector.h" local="no" imported="no">gtsam/base/FastVector.h</includes>
    <namespace>gtsam</namespace>
    <member kind="function">
      <type>FastVector&lt; typename TREE::sharedFactor &gt;</type>
      <name>EliminateTree</name>
      <anchorfile>a00536.html</anchorfile>
      <anchor>ae955942fde34b4cf32ac3573a1aa1e29</anchor>
      <arglist>(RESULT &amp;result, const TREE &amp;tree, const typename TREE::Eliminate &amp;function)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>inferenceExceptions.h</name>
    <path>/Users/dellaert/git/github/gtsam/inference/</path>
    <filename>a00473.html</filename>
    <includes id="a01256" name="global_includes.h" local="no" imported="no">gtsam/global_includes.h</includes>
    <class kind="class">gtsam::InconsistentEliminationRequested</class>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>ISAM.h</name>
    <path>/Users/dellaert/git/github/gtsam/inference/</path>
    <filename>a00500.html</filename>
    <includes id="a01256" name="global_includes.h" local="no" imported="no">gtsam/global_includes.h</includes>
    <class kind="class">gtsam::ISAM</class>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>JunctionTree-inst.h</name>
    <path>/Users/dellaert/git/github/gtsam/inference/</path>
    <filename>a00548.html</filename>
    <includes id="a00527" name="JunctionTree.h" local="no" imported="no">gtsam/inference/JunctionTree.h</includes>
    <includes id="a01217" name="SymbolicConditional.h" local="no" imported="no">gtsam/symbolic/SymbolicConditional.h</includes>
    <includes id="a01223" name="SymbolicFactor-inst.h" local="no" imported="no">gtsam/symbolic/SymbolicFactor-inst.h</includes>
    <class kind="struct">gtsam::ConstructorTraversalData</class>
    <class kind="class">gtsam::ConstructorTraversalData::SymbolicFactors</class>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>JunctionTree.h</name>
    <path>/Users/dellaert/git/github/gtsam/inference/</path>
    <filename>a00527.html</filename>
    <class kind="class">gtsam::JunctionTree</class>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>Key.h</name>
    <path>/Users/dellaert/git/github/gtsam/inference/</path>
    <filename>a00491.html</filename>
    <includes id="a00023" name="FastList.h" local="no" imported="no">gtsam/base/FastList.h</includes>
    <includes id="a00047" name="FastMap.h" local="no" imported="no">gtsam/base/FastMap.h</includes>
    <includes id="a00080" name="FastSet.h" local="no" imported="no">gtsam/base/FastSet.h</includes>
    <includes id="a00002" name="FastVector.h" local="no" imported="no">gtsam/base/FastVector.h</includes>
    <includes id="a00101" name="Testable.h" local="no" imported="no">gtsam/base/Testable.h</includes>
    <includes id="a00020" name="types.h" local="no" imported="no">gtsam/base/types.h</includes>
    <class kind="struct">gtsam::StreamedKey</class>
    <class kind="class">gtsam::key_formatter</class>
    <class kind="struct">gtsam::traits&lt; Key &gt;</class>
    <namespace>gtsam</namespace>
    <member kind="typedef">
      <type>std::function&lt; std::string(Key)&gt;</type>
      <name>KeyFormatter</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>ae4b4e8e7f0d745882c6a02b507d5bffe</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>FastVector&lt; Key &gt;</type>
      <name>KeyVector</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>a1c320e42b033352fbbd8266e3bd5faad</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>PrintKey</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>a4f9e295c4f7086ce05cbe37aeeca47fe</anchor>
      <arglist>(Key key, const std::string &amp;s=&quot;&quot;, const KeyFormatter &amp;keyFormatter=DefaultKeyFormatter)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>PrintKeyList</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>aab7ddea9b0bc36f296327e0ec08c4ef0</anchor>
      <arglist>(const KeyList &amp;keys, const std::string &amp;s=&quot;&quot;, const KeyFormatter &amp;keyFormatter=DefaultKeyFormatter)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>PrintKeyVector</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>a4c14be406d50f65bd404429a7b1d3af0</anchor>
      <arglist>(const KeyVector &amp;keys, const std::string &amp;s=&quot;&quot;, const KeyFormatter &amp;keyFormatter=DefaultKeyFormatter)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>PrintKeySet</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>aac25d6c8afb07054416ba6727685bf55</anchor>
      <arglist>(const KeySet &amp;keys, const std::string &amp;s=&quot;&quot;, const KeyFormatter &amp;keyFormatter=DefaultKeyFormatter)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>LabeledSymbol.h</name>
    <path>/Users/dellaert/git/github/gtsam/inference/</path>
    <filename>a00518.html</filename>
    <includes id="a08955" name="Symbol.h" local="no" imported="no">gtsam/inference/Symbol.h</includes>
    <class kind="class">gtsam::LabeledSymbol</class>
    <class kind="struct">gtsam::traits&lt; LabeledSymbol &gt;</class>
    <namespace>gtsam</namespace>
    <member kind="function">
      <type>Key</type>
      <name>mrsymbol</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>ae9a7dceb0a85c356062b55f6939b1419</anchor>
      <arglist>(unsigned char c, unsigned char label, size_t j)</arglist>
    </member>
    <member kind="function">
      <type>unsigned char</type>
      <name>mrsymbolChr</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>a37995b0d0610e5fb29c6bd0715151d67</anchor>
      <arglist>(Key key)</arglist>
    </member>
    <member kind="function">
      <type>unsigned char</type>
      <name>mrsymbolLabel</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>a4e4c133c4fd0d9d73593f601be2248a6</anchor>
      <arglist>(Key key)</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>mrsymbolIndex</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>a4adc1bb606fa4a14d5dbd246f95cecd3</anchor>
      <arglist>(Key key)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>MetisIndex-inl.h</name>
    <path>/Users/dellaert/git/github/gtsam/inference/</path>
    <filename>a00557.html</filename>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>MetisIndex.h</name>
    <path>/Users/dellaert/git/github/gtsam/inference/</path>
    <filename>a00506.html</filename>
    <includes id="a00491" name="Key.h" local="no" imported="no">gtsam/inference/Key.h</includes>
    <includes id="a00470" name="FactorGraph.h" local="no" imported="no">gtsam/inference/FactorGraph.h</includes>
    <includes id="a00020" name="types.h" local="no" imported="no">gtsam/base/types.h</includes>
    <includes id="a00035" name="timing.h" local="no" imported="no">gtsam/base/timing.h</includes>
    <includes id="a00557" name="MetisIndex-inl.h" local="no" imported="no">gtsam/inference/MetisIndex-inl.h</includes>
    <class kind="class">gtsam::MetisIndex</class>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>Ordering.cpp</name>
    <path>/Users/dellaert/git/github/gtsam/inference/</path>
    <filename>a00503.html</filename>
    <includes id="a00521" name="Ordering.h" local="no" imported="no">gtsam/inference/Ordering.h</includes>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>Ordering.h</name>
    <path>/Users/dellaert/git/github/gtsam/inference/</path>
    <filename>a00521.html</filename>
    <includes id="a00491" name="Key.h" local="no" imported="no">gtsam/inference/Key.h</includes>
    <includes id="a00482" name="VariableIndex.h" local="no" imported="no">gtsam/inference/VariableIndex.h</includes>
    <includes id="a00506" name="MetisIndex.h" local="no" imported="no">gtsam/inference/MetisIndex.h</includes>
    <includes id="a00080" name="FastSet.h" local="no" imported="no">gtsam/base/FastSet.h</includes>
    <class kind="class">gtsam::Ordering</class>
    <class kind="struct">gtsam::traits&lt; Ordering &gt;</class>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>Symbol.cpp</name>
    <path>/Users/dellaert/git/github/gtsam/inference/</path>
    <filename>a00467.html</filename>
    <includes id="a08955" name="Symbol.h" local="no" imported="no">gtsam/inference/Symbol.h</includes>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>Symbol.h</name>
    <path>/Users/dellaert/git/github/gtsam/inference/</path>
    <filename>a08955.html</filename>
    <includes id="a00101" name="Testable.h" local="no" imported="no">gtsam/base/Testable.h</includes>
    <includes id="a00491" name="Key.h" local="no" imported="no">gtsam/inference/Key.h</includes>
    <class kind="class">gtsam::Symbol</class>
    <class kind="class">gtsam::SymbolGenerator</class>
    <class kind="struct">gtsam::traits&lt; Symbol &gt;</class>
    <namespace>gtsam</namespace>
    <member kind="function">
      <type>Key</type>
      <name>symbol</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>a3bfdb8456463015b2dda092a5805a745</anchor>
      <arglist>(unsigned char c, std::uint64_t j)</arglist>
    </member>
    <member kind="function">
      <type>unsigned char</type>
      <name>symbolChr</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>a9ca9499e881d22361b4833c2854d941f</anchor>
      <arglist>(Key key)</arglist>
    </member>
    <member kind="function">
      <type>std::uint64_t</type>
      <name>symbolIndex</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>a2f4d98c5186046db873a6c05aebbdf9c</anchor>
      <arglist>(Key key)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Symbol.h</name>
    <path>/Users/dellaert/git/github/gtsam/nonlinear/</path>
    <filename>a08958.html</filename>
    <includes id="a08955" name="Symbol.h" local="no" imported="no">gtsam/inference/Symbol.h</includes>
  </compound>
  <compound kind="file">
    <name>VariableIndex-inl.h</name>
    <path>/Users/dellaert/git/github/gtsam/inference/</path>
    <filename>a00554.html</filename>
    <includes id="a00482" name="VariableIndex.h" local="no" imported="no">gtsam/inference/VariableIndex.h</includes>
    <includes id="a00035" name="timing.h" local="no" imported="no">gtsam/base/timing.h</includes>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>VariableIndex.cpp</name>
    <path>/Users/dellaert/git/github/gtsam/inference/</path>
    <filename>a00569.html</filename>
    <includes id="a00482" name="VariableIndex.h" local="no" imported="no">gtsam/inference/VariableIndex.h</includes>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>VariableIndex.h</name>
    <path>/Users/dellaert/git/github/gtsam/inference/</path>
    <filename>a00482.html</filename>
    <includes id="a00515" name="Factor.h" local="no" imported="no">gtsam/inference/Factor.h</includes>
    <includes id="a00491" name="Key.h" local="no" imported="no">gtsam/inference/Key.h</includes>
    <includes id="a00047" name="FastMap.h" local="no" imported="no">gtsam/base/FastMap.h</includes>
    <includes id="a00002" name="FastVector.h" local="no" imported="no">gtsam/base/FastVector.h</includes>
    <includes id="a00554" name="VariableIndex-inl.h" local="no" imported="no">gtsam/inference/VariableIndex-inl.h</includes>
    <class kind="class">gtsam::VariableIndex</class>
    <class kind="struct">gtsam::traits&lt; VariableIndex &gt;</class>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>VariableSlots.cpp</name>
    <path>/Users/dellaert/git/github/gtsam/inference/</path>
    <filename>a00545.html</filename>
    <includes id="a00458" name="VariableSlots.h" local="no" imported="no">gtsam/inference/VariableSlots.h</includes>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>VariableSlots.h</name>
    <path>/Users/dellaert/git/github/gtsam/inference/</path>
    <filename>a00458.html</filename>
    <includes id="a01256" name="global_includes.h" local="no" imported="no">gtsam/global_includes.h</includes>
    <includes id="a00047" name="FastMap.h" local="no" imported="no">gtsam/base/FastMap.h</includes>
    <includes id="a00002" name="FastVector.h" local="no" imported="no">gtsam/base/FastVector.h</includes>
    <includes id="a00035" name="timing.h" local="no" imported="no">gtsam/base/timing.h</includes>
    <includes id="a00101" name="Testable.h" local="no" imported="no">gtsam/base/Testable.h</includes>
    <class kind="class">gtsam::VariableSlots</class>
    <class kind="struct">gtsam::traits&lt; VariableSlots &gt;</class>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>AcceleratedPowerMethod.h</name>
    <path>/Users/dellaert/git/github/gtsam/linear/</path>
    <filename>a00599.html</filename>
    <includes id="a00617" name="PowerMethod.h" local="no" imported="no">gtsam/linear/PowerMethod.h</includes>
    <class kind="class">gtsam::AcceleratedPowerMethod</class>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>BinaryJacobianFactor.h</name>
    <path>/Users/dellaert/git/github/gtsam/linear/</path>
    <filename>a00659.html</filename>
    <includes id="a00593" name="JacobianFactor.h" local="no" imported="no">gtsam/linear/JacobianFactor.h</includes>
    <includes id="a00083" name="SymmetricBlockMatrix.h" local="no" imported="no">gtsam/base/SymmetricBlockMatrix.h</includes>
    <includes id="a00035" name="timing.h" local="no" imported="no">gtsam/base/timing.h</includes>
    <class kind="struct">gtsam::BinaryJacobianFactor</class>
    <class kind="struct">gtsam::traits&lt; BinaryJacobianFactor&lt; M, N1, N2 &gt; &gt;</class>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>ConjugateGradientSolver.h</name>
    <path>/Users/dellaert/git/github/gtsam/linear/</path>
    <filename>a00761.html</filename>
    <includes id="a00722" name="IterativeSolver.h" local="no" imported="no">gtsam/linear/IterativeSolver.h</includes>
    <class kind="class">gtsam::ConjugateGradientParameters</class>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>Errors.cpp</name>
    <path>/Users/dellaert/git/github/gtsam/linear/</path>
    <filename>a00731.html</filename>
    <includes id="a00635" name="Errors.h" local="no" imported="no">gtsam/linear/Errors.h</includes>
    <includes id="a00749" name="VectorValues.h" local="no" imported="no">gtsam/linear/VectorValues.h</includes>
    <namespace>gtsam</namespace>
    <member kind="function">
      <type>double</type>
      <name>dot</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>a106ec458ddb425604809da93346af55d</anchor>
      <arglist>(const Errors &amp;a, const Errors &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>axpy</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>a1740d42a2e3b2b6b5ab772b10df484e5</anchor>
      <arglist>(double alpha, const Errors &amp;x, Errors &amp;y)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>a9528f84279a6f9c18d7d5a444735e57a</anchor>
      <arglist>(const Errors &amp;a, const std::string &amp;s=&quot;Error&quot;)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Errors.h</name>
    <path>/Users/dellaert/git/github/gtsam/linear/</path>
    <filename>a00635.html</filename>
    <includes id="a00023" name="FastList.h" local="no" imported="no">gtsam/base/FastList.h</includes>
    <includes id="a00134" name="Vector.h" local="no" imported="no">gtsam/base/Vector.h</includes>
    <includes id="a00101" name="Testable.h" local="no" imported="no">gtsam/base/Testable.h</includes>
    <class kind="class">gtsam::Errors</class>
    <class kind="struct">gtsam::traits&lt; Errors &gt;</class>
    <namespace>gtsam</namespace>
    <member kind="function">
      <type>double</type>
      <name>dot</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>a106ec458ddb425604809da93346af55d</anchor>
      <arglist>(const Errors &amp;a, const Errors &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>GTSAM_EXPORT void</type>
      <name>axpy</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>ac339f9bf9dfb0f1eef6b9494a9c0317f</anchor>
      <arglist>(double alpha, const Errors &amp;x, Errors &amp;y)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>a9528f84279a6f9c18d7d5a444735e57a</anchor>
      <arglist>(const Errors &amp;a, const std::string &amp;s=&quot;Error&quot;)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>GaussianBayesNet.cpp</name>
    <path>/Users/dellaert/git/github/gtsam/linear/</path>
    <filename>a00686.html</filename>
    <includes id="a00035" name="timing.h" local="no" imported="no">gtsam/base/timing.h</includes>
    <includes id="a00674" name="GaussianBayesNet.h" local="no" imported="no">gtsam/linear/GaussianBayesNet.h</includes>
    <includes id="a00677" name="GaussianFactorGraph.h" local="no" imported="no">gtsam/linear/GaussianFactorGraph.h</includes>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>GaussianBayesNet.h</name>
    <path>/Users/dellaert/git/github/gtsam/linear/</path>
    <filename>a00674.html</filename>
    <includes id="a00653" name="GaussianConditional.h" local="no" imported="no">gtsam/linear/GaussianConditional.h</includes>
    <includes id="a00470" name="FactorGraph.h" local="no" imported="no">gtsam/inference/FactorGraph.h</includes>
    <includes id="a01256" name="global_includes.h" local="no" imported="no">gtsam/global_includes.h</includes>
    <class kind="class">gtsam::GaussianBayesNet</class>
    <class kind="struct">gtsam::traits&lt; GaussianBayesNet &gt;</class>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>GaussianBayesTree-inl.h</name>
    <path>/Users/dellaert/git/github/gtsam/linear/</path>
    <filename>a00707.html</filename>
    <includes id="a00734" name="GaussianBayesTree.h" local="no" imported="no">gtsam/linear/GaussianBayesTree.h</includes>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>GaussianBayesTree.cpp</name>
    <path>/Users/dellaert/git/github/gtsam/linear/</path>
    <filename>a00644.html</filename>
    <includes id="a00095" name="treeTraversal-inst.h" local="no" imported="no">gtsam/base/treeTraversal-inst.h</includes>
    <includes id="a00494" name="BayesTreeCliqueBase-inst.h" local="no" imported="no">gtsam/inference/BayesTreeCliqueBase-inst.h</includes>
    <includes id="a00662" name="linearAlgorithms-inst.h" local="no" imported="no">gtsam/linear/linearAlgorithms-inst.h</includes>
    <includes id="a00734" name="GaussianBayesTree.h" local="no" imported="no">gtsam/linear/GaussianBayesTree.h</includes>
    <includes id="a00674" name="GaussianBayesNet.h" local="no" imported="no">gtsam/linear/GaussianBayesNet.h</includes>
    <includes id="a00749" name="VectorValues.h" local="no" imported="no">gtsam/linear/VectorValues.h</includes>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>GaussianBayesTree.h</name>
    <path>/Users/dellaert/git/github/gtsam/linear/</path>
    <filename>a00734.html</filename>
    <includes id="a00674" name="GaussianBayesNet.h" local="no" imported="no">gtsam/linear/GaussianBayesNet.h</includes>
    <includes id="a00677" name="GaussianFactorGraph.h" local="no" imported="no">gtsam/linear/GaussianFactorGraph.h</includes>
    <includes id="a00497" name="BayesTree.h" local="no" imported="no">gtsam/inference/BayesTree.h</includes>
    <includes id="a00455" name="BayesTreeCliqueBase.h" local="no" imported="no">gtsam/inference/BayesTreeCliqueBase.h</includes>
    <class kind="class">gtsam::GaussianBayesTreeClique</class>
    <class kind="class">gtsam::GaussianBayesTree</class>
    <class kind="struct">gtsam::traits&lt; GaussianBayesTree &gt;</class>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>GaussianConditional-inl.h</name>
    <path>/Users/dellaert/git/github/gtsam/linear/</path>
    <filename>a00689.html</filename>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>GaussianConditional.cpp</name>
    <path>/Users/dellaert/git/github/gtsam/linear/</path>
    <filename>a00611.html</filename>
    <includes id="a00755" name="linearExceptions.h" local="no" imported="no">gtsam/linear/linearExceptions.h</includes>
    <includes id="a00653" name="GaussianConditional.h" local="no" imported="no">gtsam/linear/GaussianConditional.h</includes>
    <includes id="a00749" name="VectorValues.h" local="no" imported="no">gtsam/linear/VectorValues.h</includes>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>GaussianConditional.h</name>
    <path>/Users/dellaert/git/github/gtsam/linear/</path>
    <filename>a00653.html</filename>
    <includes id="a01256" name="global_includes.h" local="no" imported="no">gtsam/global_includes.h</includes>
    <includes id="a00593" name="JacobianFactor.h" local="no" imported="no">gtsam/linear/JacobianFactor.h</includes>
    <includes id="a00575" name="Conditional.h" local="no" imported="no">gtsam/inference/Conditional.h</includes>
    <includes id="a00749" name="VectorValues.h" local="no" imported="no">gtsam/linear/VectorValues.h</includes>
    <includes id="a00689" name="GaussianConditional-inl.h" local="no" imported="no">gtsam/linear/GaussianConditional-inl.h</includes>
    <class kind="class">gtsam::GaussianConditional</class>
    <class kind="struct">gtsam::traits&lt; GaussianConditional &gt;</class>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>GaussianDensity.cpp</name>
    <path>/Users/dellaert/git/github/gtsam/linear/</path>
    <filename>a00626.html</filename>
    <includes id="a00713" name="GaussianDensity.h" local="no" imported="no">gtsam/linear/GaussianDensity.h</includes>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>GaussianDensity.h</name>
    <path>/Users/dellaert/git/github/gtsam/linear/</path>
    <filename>a00713.html</filename>
    <includes id="a00653" name="GaussianConditional.h" local="no" imported="no">gtsam/linear/GaussianConditional.h</includes>
    <class kind="class">gtsam::GaussianDensity</class>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>GaussianEliminationTree.cpp</name>
    <path>/Users/dellaert/git/github/gtsam/linear/</path>
    <filename>a00776.html</filename>
    <includes id="a00581" name="GaussianEliminationTree.h" local="no" imported="no">gtsam/linear/GaussianEliminationTree.h</includes>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>GaussianEliminationTree.h</name>
    <path>/Users/dellaert/git/github/gtsam/linear/</path>
    <filename>a00581.html</filename>
    <includes id="a00674" name="GaussianBayesNet.h" local="no" imported="no">gtsam/linear/GaussianBayesNet.h</includes>
    <includes id="a00677" name="GaussianFactorGraph.h" local="no" imported="no">gtsam/linear/GaussianFactorGraph.h</includes>
    <includes id="a00476" name="EliminationTree.h" local="no" imported="no">gtsam/inference/EliminationTree.h</includes>
    <class kind="class">gtsam::GaussianEliminationTree</class>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>GaussianFactor.cpp</name>
    <path>/Users/dellaert/git/github/gtsam/linear/</path>
    <filename>a00590.html</filename>
    <includes id="a00719" name="GaussianFactor.h" local="no" imported="no">gtsam/linear/GaussianFactor.h</includes>
    <includes id="a00749" name="VectorValues.h" local="no" imported="no">gtsam/linear/VectorValues.h</includes>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>GaussianFactor.h</name>
    <path>/Users/dellaert/git/github/gtsam/linear/</path>
    <filename>a00719.html</filename>
    <includes id="a00515" name="Factor.h" local="no" imported="no">gtsam/inference/Factor.h</includes>
    <includes id="a00050" name="Matrix.h" local="no" imported="no">gtsam/base/Matrix.h</includes>
    <includes id="a00101" name="Testable.h" local="no" imported="no">gtsam/base/Testable.h</includes>
    <class kind="class">gtsam::GaussianFactor</class>
    <class kind="struct">gtsam::traits&lt; GaussianFactor &gt;</class>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>GaussianFactorGraph.cpp</name>
    <path>/Users/dellaert/git/github/gtsam/linear/</path>
    <filename>a00632.html</filename>
    <includes id="a00677" name="GaussianFactorGraph.h" local="no" imported="no">gtsam/linear/GaussianFactorGraph.h</includes>
    <includes id="a00734" name="GaussianBayesTree.h" local="no" imported="no">gtsam/linear/GaussianBayesTree.h</includes>
    <includes id="a00581" name="GaussianEliminationTree.h" local="no" imported="no">gtsam/linear/GaussianEliminationTree.h</includes>
    <includes id="a00629" name="GaussianJunctionTree.h" local="no" imported="no">gtsam/linear/GaussianJunctionTree.h</includes>
    <includes id="a00614" name="HessianFactor.h" local="no" imported="no">gtsam/linear/HessianFactor.h</includes>
    <includes id="a00011" name="debug.h" local="no" imported="no">gtsam/base/debug.h</includes>
    <includes id="a00035" name="timing.h" local="no" imported="no">gtsam/base/timing.h</includes>
    <includes id="a00122" name="cholesky.h" local="no" imported="no">gtsam/base/cholesky.h</includes>
    <namespace>gtsam</namespace>
    <member kind="function">
      <type>bool</type>
      <name>hasConstraints</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>a35c269c3243cab16a7475239a9c91021</anchor>
      <arglist>(const GaussianFactorGraph &amp;factors)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>GaussianFactorGraph.h</name>
    <path>/Users/dellaert/git/github/gtsam/linear/</path>
    <filename>a00677.html</filename>
    <includes id="a00524" name="EliminateableFactorGraph.h" local="no" imported="no">gtsam/inference/EliminateableFactorGraph.h</includes>
    <includes id="a00470" name="FactorGraph.h" local="no" imported="no">gtsam/inference/FactorGraph.h</includes>
    <includes id="a00635" name="Errors.h" local="no" imported="no">gtsam/linear/Errors.h</includes>
    <includes id="a00719" name="GaussianFactor.h" local="no" imported="no">gtsam/linear/GaussianFactor.h</includes>
    <includes id="a00614" name="HessianFactor.h" local="no" imported="no">gtsam/linear/HessianFactor.h</includes>
    <includes id="a00593" name="JacobianFactor.h" local="no" imported="no">gtsam/linear/JacobianFactor.h</includes>
    <includes id="a00749" name="VectorValues.h" local="no" imported="no">gtsam/linear/VectorValues.h</includes>
    <class kind="struct">gtsam::EliminationTraits&lt; GaussianFactorGraph &gt;</class>
    <class kind="class">gtsam::GaussianFactorGraph</class>
    <class kind="struct">gtsam::traits&lt; GaussianFactorGraph &gt;</class>
    <namespace>gtsam</namespace>
    <member kind="function">
      <type>bool</type>
      <name>hasConstraints</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>a35c269c3243cab16a7475239a9c91021</anchor>
      <arglist>(const GaussianFactorGraph &amp;factors)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>GaussianJunctionTree.cpp</name>
    <path>/Users/dellaert/git/github/gtsam/linear/</path>
    <filename>a00665.html</filename>
    <includes id="a00548" name="JunctionTree-inst.h" local="no" imported="no">gtsam/inference/JunctionTree-inst.h</includes>
    <includes id="a00629" name="GaussianJunctionTree.h" local="no" imported="no">gtsam/linear/GaussianJunctionTree.h</includes>
    <includes id="a00581" name="GaussianEliminationTree.h" local="no" imported="no">gtsam/linear/GaussianEliminationTree.h</includes>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>GaussianJunctionTree.h</name>
    <path>/Users/dellaert/git/github/gtsam/linear/</path>
    <filename>a00629.html</filename>
    <includes id="a00677" name="GaussianFactorGraph.h" local="no" imported="no">gtsam/linear/GaussianFactorGraph.h</includes>
    <includes id="a00734" name="GaussianBayesTree.h" local="no" imported="no">gtsam/linear/GaussianBayesTree.h</includes>
    <includes id="a00527" name="JunctionTree.h" local="no" imported="no">gtsam/inference/JunctionTree.h</includes>
    <class kind="class">gtsam::GaussianJunctionTree</class>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>HessianFactor-inl.h</name>
    <path>/Users/dellaert/git/github/gtsam/linear/</path>
    <filename>a00770.html</filename>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>HessianFactor.cpp</name>
    <path>/Users/dellaert/git/github/gtsam/linear/</path>
    <filename>a00764.html</filename>
    <includes id="a00614" name="HessianFactor.h" local="no" imported="no">gtsam/linear/HessianFactor.h</includes>
    <includes id="a00653" name="GaussianConditional.h" local="no" imported="no">gtsam/linear/GaussianConditional.h</includes>
    <includes id="a00719" name="GaussianFactor.h" local="no" imported="no">gtsam/linear/GaussianFactor.h</includes>
    <includes id="a00677" name="GaussianFactorGraph.h" local="no" imported="no">gtsam/linear/GaussianFactorGraph.h</includes>
    <includes id="a00593" name="JacobianFactor.h" local="no" imported="no">gtsam/linear/JacobianFactor.h</includes>
    <includes id="a00755" name="linearExceptions.h" local="no" imported="no">gtsam/linear/linearExceptions.h</includes>
    <includes id="a00122" name="cholesky.h" local="no" imported="no">gtsam/base/cholesky.h</includes>
    <includes id="a00011" name="debug.h" local="no" imported="no">gtsam/base/debug.h</includes>
    <includes id="a00047" name="FastMap.h" local="no" imported="no">gtsam/base/FastMap.h</includes>
    <includes id="a00050" name="Matrix.h" local="no" imported="no">gtsam/base/Matrix.h</includes>
    <includes id="a00071" name="ThreadsafeException.h" local="no" imported="no">gtsam/base/ThreadsafeException.h</includes>
    <includes id="a00035" name="timing.h" local="no" imported="no">gtsam/base/timing.h</includes>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>HessianFactor.h</name>
    <path>/Users/dellaert/git/github/gtsam/linear/</path>
    <filename>a00614.html</filename>
    <includes id="a00719" name="GaussianFactor.h" local="no" imported="no">gtsam/linear/GaussianFactor.h</includes>
    <includes id="a00671" name="Scatter.h" local="no" imported="no">gtsam/linear/Scatter.h</includes>
    <includes id="a00083" name="SymmetricBlockMatrix.h" local="no" imported="no">gtsam/base/SymmetricBlockMatrix.h</includes>
    <includes id="a00002" name="FastVector.h" local="no" imported="no">gtsam/base/FastVector.h</includes>
    <includes id="a00770" name="HessianFactor-inl.h" local="no" imported="no">gtsam/linear/HessianFactor-inl.h</includes>
    <class kind="class">gtsam::HessianFactor</class>
    <class kind="struct">gtsam::traits&lt; HessianFactor &gt;</class>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>iterative-inl.h</name>
    <path>/Users/dellaert/git/github/gtsam/linear/</path>
    <filename>a00767.html</filename>
    <includes id="a00725" name="iterative.h" local="no" imported="no">gtsam/linear/iterative.h</includes>
    <includes id="a00761" name="ConjugateGradientSolver.h" local="no" imported="no">gtsam/linear/ConjugateGradientSolver.h</includes>
    <class kind="struct">gtsam::CGState</class>
    <namespace>gtsam</namespace>
    <member kind="function">
      <type>V</type>
      <name>conjugateGradients</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>a6516ea957c3a22ddf429cefef1fe9486</anchor>
      <arglist>(const S &amp;Ab, V x, const ConjugateGradientParameters &amp;parameters, bool steepest=false)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>iterative.cpp</name>
    <path>/Users/dellaert/git/github/gtsam/linear/</path>
    <filename>a00587.html</filename>
    <includes id="a00767" name="iterative-inl.h" local="no" imported="no">gtsam/linear/iterative-inl.h</includes>
    <includes id="a00134" name="Vector.h" local="no" imported="no">gtsam/base/Vector.h</includes>
    <includes id="a00050" name="Matrix.h" local="no" imported="no">gtsam/base/Matrix.h</includes>
    <includes id="a00677" name="GaussianFactorGraph.h" local="no" imported="no">gtsam/linear/GaussianFactorGraph.h</includes>
    <includes id="a00722" name="IterativeSolver.h" local="no" imported="no">gtsam/linear/IterativeSolver.h</includes>
    <namespace>gtsam</namespace>
    <member kind="function">
      <type>Vector</type>
      <name>conjugateGradientDescent</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>ad2b587fde5d35a27d6c88feb4432e785</anchor>
      <arglist>(const System &amp;Ab, const Vector &amp;x, const ConjugateGradientParameters &amp;parameters)</arglist>
    </member>
    <member kind="function">
      <type>Vector</type>
      <name>steepestDescent</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>aed4b2ca704ddd6530ea70122f883ac88</anchor>
      <arglist>(const Matrix &amp;A, const Vector &amp;b, const Vector &amp;x, const ConjugateGradientParameters &amp;parameters)</arglist>
    </member>
    <member kind="function">
      <type>Vector</type>
      <name>conjugateGradientDescent</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>af55440f741d8b2f706101f7a79ba7111</anchor>
      <arglist>(const Matrix &amp;A, const Vector &amp;b, const Vector &amp;x, const ConjugateGradientParameters &amp;parameters)</arglist>
    </member>
    <member kind="function">
      <type>VectorValues</type>
      <name>steepestDescent</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>a81b7af7638d28555c3f404318cc67b22</anchor>
      <arglist>(const GaussianFactorGraph &amp;fg, const VectorValues &amp;x, const ConjugateGradientParameters &amp;parameters)</arglist>
    </member>
    <member kind="function">
      <type>VectorValues</type>
      <name>conjugateGradientDescent</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>aa84114ad1593684ad739088a2898afdb</anchor>
      <arglist>(const GaussianFactorGraph &amp;fg, const VectorValues &amp;x, const ConjugateGradientParameters &amp;parameters)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>iterative.h</name>
    <path>/Users/dellaert/git/github/gtsam/linear/</path>
    <filename>a00725.html</filename>
    <includes id="a00050" name="Matrix.h" local="no" imported="no">gtsam/base/Matrix.h</includes>
    <includes id="a00749" name="VectorValues.h" local="no" imported="no">gtsam/linear/VectorValues.h</includes>
    <includes id="a00761" name="ConjugateGradientSolver.h" local="no" imported="no">gtsam/linear/ConjugateGradientSolver.h</includes>
    <includes id="a00767" name="iterative-inl.h" local="no" imported="no">gtsam/linear/iterative-inl.h</includes>
    <class kind="class">gtsam::System</class>
    <namespace>gtsam</namespace>
    <member kind="function">
      <type>V</type>
      <name>conjugateGradients</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>a6516ea957c3a22ddf429cefef1fe9486</anchor>
      <arglist>(const S &amp;Ab, V x, const ConjugateGradientParameters &amp;parameters, bool steepest=false)</arglist>
    </member>
    <member kind="function">
      <type>GTSAM_EXPORT Vector</type>
      <name>steepestDescent</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>a37ca85391e3bc671c71b68bc324296f0</anchor>
      <arglist>(const System &amp;Ab, const Vector &amp;x, const IterativeOptimizationParameters &amp;parameters)</arglist>
    </member>
    <member kind="function">
      <type>Vector</type>
      <name>conjugateGradientDescent</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>ad2b587fde5d35a27d6c88feb4432e785</anchor>
      <arglist>(const System &amp;Ab, const Vector &amp;x, const ConjugateGradientParameters &amp;parameters)</arglist>
    </member>
    <member kind="function">
      <type>Vector</type>
      <name>steepestDescent</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>aed4b2ca704ddd6530ea70122f883ac88</anchor>
      <arglist>(const Matrix &amp;A, const Vector &amp;b, const Vector &amp;x, const ConjugateGradientParameters &amp;parameters)</arglist>
    </member>
    <member kind="function">
      <type>Vector</type>
      <name>conjugateGradientDescent</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>af55440f741d8b2f706101f7a79ba7111</anchor>
      <arglist>(const Matrix &amp;A, const Vector &amp;b, const Vector &amp;x, const ConjugateGradientParameters &amp;parameters)</arglist>
    </member>
    <member kind="function">
      <type>VectorValues</type>
      <name>steepestDescent</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>a81b7af7638d28555c3f404318cc67b22</anchor>
      <arglist>(const GaussianFactorGraph &amp;fg, const VectorValues &amp;x, const ConjugateGradientParameters &amp;parameters)</arglist>
    </member>
    <member kind="function">
      <type>VectorValues</type>
      <name>conjugateGradientDescent</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>aa84114ad1593684ad739088a2898afdb</anchor>
      <arglist>(const GaussianFactorGraph &amp;fg, const VectorValues &amp;x, const ConjugateGradientParameters &amp;parameters)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>IterativeSolver.cpp</name>
    <path>/Users/dellaert/git/github/gtsam/linear/</path>
    <filename>a00668.html</filename>
    <includes id="a00722" name="IterativeSolver.h" local="no" imported="no">gtsam/linear/IterativeSolver.h</includes>
    <includes id="a00677" name="GaussianFactorGraph.h" local="no" imported="no">gtsam/linear/GaussianFactorGraph.h</includes>
    <includes id="a00749" name="VectorValues.h" local="no" imported="no">gtsam/linear/VectorValues.h</includes>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>IterativeSolver.h</name>
    <path>/Users/dellaert/git/github/gtsam/linear/</path>
    <filename>a00722.html</filename>
    <includes id="a00521" name="Ordering.h" local="no" imported="no">gtsam/inference/Ordering.h</includes>
    <includes id="a00134" name="Vector.h" local="no" imported="no">gtsam/base/Vector.h</includes>
    <class kind="class">gtsam::IterativeOptimizationParameters</class>
    <class kind="class">gtsam::IterativeSolver</class>
    <class kind="struct">gtsam::KeyInfoEntry</class>
    <class kind="class">gtsam::KeyInfo</class>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>JacobianFactor.cpp</name>
    <path>/Users/dellaert/git/github/gtsam/linear/</path>
    <filename>a00743.html</filename>
    <includes id="a00755" name="linearExceptions.h" local="no" imported="no">gtsam/linear/linearExceptions.h</includes>
    <includes id="a00653" name="GaussianConditional.h" local="no" imported="no">gtsam/linear/GaussianConditional.h</includes>
    <includes id="a00593" name="JacobianFactor.h" local="no" imported="no">gtsam/linear/JacobianFactor.h</includes>
    <includes id="a00671" name="Scatter.h" local="no" imported="no">gtsam/linear/Scatter.h</includes>
    <includes id="a00677" name="GaussianFactorGraph.h" local="no" imported="no">gtsam/linear/GaussianFactorGraph.h</includes>
    <includes id="a00749" name="VectorValues.h" local="no" imported="no">gtsam/linear/VectorValues.h</includes>
    <includes id="a00458" name="VariableSlots.h" local="no" imported="no">gtsam/inference/VariableSlots.h</includes>
    <includes id="a00521" name="Ordering.h" local="no" imported="no">gtsam/inference/Ordering.h</includes>
    <includes id="a00011" name="debug.h" local="no" imported="no">gtsam/base/debug.h</includes>
    <includes id="a00035" name="timing.h" local="no" imported="no">gtsam/base/timing.h</includes>
    <includes id="a00050" name="Matrix.h" local="no" imported="no">gtsam/base/Matrix.h</includes>
    <includes id="a00047" name="FastMap.h" local="no" imported="no">gtsam/base/FastMap.h</includes>
    <includes id="a00122" name="cholesky.h" local="no" imported="no">gtsam/base/cholesky.h</includes>
    <namespace>gtsam</namespace>
    <member kind="function">
      <type>std::pair&lt; GaussianConditional::shared_ptr, JacobianFactor::shared_ptr &gt;</type>
      <name>EliminateQR</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>ab56c4bfa363f8c23c48eb078e9c84a9c</anchor>
      <arglist>(const GaussianFactorGraph &amp;factors, const Ordering &amp;keys)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>JacobianFactor.h</name>
    <path>/Users/dellaert/git/github/gtsam/linear/</path>
    <filename>a00593.html</filename>
    <includes id="a00719" name="GaussianFactor.h" local="no" imported="no">gtsam/linear/GaussianFactor.h</includes>
    <includes id="a00620" name="NoiseModel.h" local="no" imported="no">gtsam/linear/NoiseModel.h</includes>
    <includes id="a00074" name="VerticalBlockMatrix.h" local="no" imported="no">gtsam/base/VerticalBlockMatrix.h</includes>
    <includes id="a01256" name="global_includes.h" local="no" imported="no">gtsam/global_includes.h</includes>
    <includes id="a00458" name="VariableSlots.h" local="no" imported="no">gtsam/inference/VariableSlots.h</includes>
    <class kind="class">gtsam::JacobianFactor</class>
    <class kind="struct">gtsam::traits&lt; JacobianFactor &gt;</class>
    <namespace>gtsam</namespace>
    <member kind="function">
      <type>std::pair&lt; GaussianConditional::shared_ptr, JacobianFactor::shared_ptr &gt;</type>
      <name>EliminateQR</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>ab56c4bfa363f8c23c48eb078e9c84a9c</anchor>
      <arglist>(const GaussianFactorGraph &amp;factors, const Ordering &amp;keys)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>KalmanFilter.cpp</name>
    <path>/Users/dellaert/git/github/gtsam/linear/</path>
    <filename>a00752.html</filename>
    <includes id="a00596" name="KalmanFilter.h" local="no" imported="no">gtsam/linear/KalmanFilter.h</includes>
    <includes id="a00674" name="GaussianBayesNet.h" local="no" imported="no">gtsam/linear/GaussianBayesNet.h</includes>
    <includes id="a00593" name="JacobianFactor.h" local="no" imported="no">gtsam/linear/JacobianFactor.h</includes>
    <includes id="a00614" name="HessianFactor.h" local="no" imported="no">gtsam/linear/HessianFactor.h</includes>
    <includes id="a00101" name="Testable.h" local="no" imported="no">gtsam/base/Testable.h</includes>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>KalmanFilter.h</name>
    <path>/Users/dellaert/git/github/gtsam/linear/</path>
    <filename>a00596.html</filename>
    <includes id="a00713" name="GaussianDensity.h" local="no" imported="no">gtsam/linear/GaussianDensity.h</includes>
    <includes id="a00677" name="GaussianFactorGraph.h" local="no" imported="no">gtsam/linear/GaussianFactorGraph.h</includes>
    <includes id="a00620" name="NoiseModel.h" local="no" imported="no">gtsam/linear/NoiseModel.h</includes>
    <class kind="class">gtsam::KalmanFilter</class>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>linearAlgorithms-inst.h</name>
    <path>/Users/dellaert/git/github/gtsam/linear/</path>
    <filename>a00662.html</filename>
    <includes id="a00749" name="VectorValues.h" local="no" imported="no">gtsam/linear/VectorValues.h</includes>
    <includes id="a00653" name="GaussianConditional.h" local="no" imported="no">gtsam/linear/GaussianConditional.h</includes>
    <includes id="a00095" name="treeTraversal-inst.h" local="no" imported="no">gtsam/base/treeTraversal-inst.h</includes>
    <class kind="struct">gtsam::internal::linearAlgorithms::OptimizeData</class>
    <class kind="struct">gtsam::internal::linearAlgorithms::OptimizeClique</class>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>linearExceptions.cpp</name>
    <path>/Users/dellaert/git/github/gtsam/linear/</path>
    <filename>a00656.html</filename>
    <includes id="a00755" name="linearExceptions.h" local="no" imported="no">gtsam/linear/linearExceptions.h</includes>
    <includes id="a08955" name="Symbol.h" local="no" imported="no">gtsam/inference/Symbol.h</includes>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>linearExceptions.h</name>
    <path>/Users/dellaert/git/github/gtsam/linear/</path>
    <filename>a00755.html</filename>
    <includes id="a00071" name="ThreadsafeException.h" local="no" imported="no">gtsam/base/ThreadsafeException.h</includes>
    <includes id="a00020" name="types.h" local="no" imported="no">gtsam/base/types.h</includes>
    <class kind="class">gtsam::IndeterminantLinearSystemException</class>
    <class kind="class">gtsam::InvalidNoiseModel</class>
    <class kind="class">gtsam::InvalidMatrixBlock</class>
    <class kind="class">gtsam::InvalidDenseElimination</class>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>NoiseModel.cpp</name>
    <path>/Users/dellaert/git/github/gtsam/linear/</path>
    <filename>a00773.html</filename>
    <includes id="a00620" name="NoiseModel.h" local="no" imported="no">gtsam/linear/NoiseModel.h</includes>
    <includes id="a00035" name="timing.h" local="no" imported="no">gtsam/base/timing.h</includes>
    <namespace>gtsam</namespace>
    <namespace>gtsam::noiseModel</namespace>
  </compound>
  <compound kind="file">
    <name>NoiseModel.h</name>
    <path>/Users/dellaert/git/github/gtsam/linear/</path>
    <filename>a00620.html</filename>
    <includes id="a00101" name="Testable.h" local="no" imported="no">gtsam/base/Testable.h</includes>
    <includes id="a00050" name="Matrix.h" local="no" imported="no">gtsam/base/Matrix.h</includes>
    <class kind="class">gtsam::noiseModel::Base</class>
    <class kind="class">gtsam::noiseModel::Gaussian</class>
    <class kind="class">gtsam::noiseModel::Diagonal</class>
    <class kind="class">gtsam::noiseModel::Constrained</class>
    <class kind="class">gtsam::noiseModel::Isotropic</class>
    <class kind="class">gtsam::noiseModel::Unit</class>
    <class kind="class">gtsam::noiseModel::Robust</class>
    <class kind="struct">gtsam::traits&lt; noiseModel::Gaussian &gt;</class>
    <class kind="struct">gtsam::traits&lt; noiseModel::Diagonal &gt;</class>
    <class kind="struct">gtsam::traits&lt; noiseModel::Constrained &gt;</class>
    <class kind="struct">gtsam::traits&lt; noiseModel::Isotropic &gt;</class>
    <class kind="struct">gtsam::traits&lt; noiseModel::Unit &gt;</class>
    <namespace>gtsam</namespace>
    <namespace>gtsam::noiseModel</namespace>
    <member kind="typedef">
      <type>noiseModel::Base::shared_ptr</type>
      <name>SharedNoiseModel</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>ab6e5a4884342656e0837ef07008ec03f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>PowerMethod.h</name>
    <path>/Users/dellaert/git/github/gtsam/linear/</path>
    <filename>a00617.html</filename>
    <includes id="a00050" name="Matrix.h" local="no" imported="no">gtsam/base/Matrix.h</includes>
    <includes id="a00134" name="Vector.h" local="no" imported="no">gtsam/base/Vector.h</includes>
    <class kind="class">gtsam::PowerMethod</class>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>RegularHessianFactor.h</name>
    <path>/Users/dellaert/git/github/gtsam/linear/</path>
    <filename>a00740.html</filename>
    <includes id="a00614" name="HessianFactor.h" local="no" imported="no">gtsam/linear/HessianFactor.h</includes>
    <includes id="a00746" name="RegularJacobianFactor.h" local="no" imported="no">gtsam/linear/RegularJacobianFactor.h</includes>
    <class kind="class">gtsam::RegularHessianFactor</class>
    <class kind="struct">gtsam::traits&lt; RegularHessianFactor&lt; D &gt; &gt;</class>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>RegularJacobianFactor.h</name>
    <path>/Users/dellaert/git/github/gtsam/linear/</path>
    <filename>a00746.html</filename>
    <includes id="a00593" name="JacobianFactor.h" local="no" imported="no">gtsam/linear/JacobianFactor.h</includes>
    <includes id="a00749" name="VectorValues.h" local="no" imported="no">gtsam/linear/VectorValues.h</includes>
    <class kind="class">gtsam::RegularJacobianFactor</class>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>Sampler.cpp</name>
    <path>/Users/dellaert/git/github/gtsam/linear/</path>
    <filename>a00638.html</filename>
    <includes id="a00605" name="Sampler.h" local="no" imported="no">gtsam/linear/Sampler.h</includes>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>Sampler.h</name>
    <path>/Users/dellaert/git/github/gtsam/linear/</path>
    <filename>a00605.html</filename>
    <includes id="a00620" name="NoiseModel.h" local="no" imported="no">gtsam/linear/NoiseModel.h</includes>
    <class kind="class">gtsam::Sampler</class>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>Scatter.cpp</name>
    <path>/Users/dellaert/git/github/gtsam/linear/</path>
    <filename>a00584.html</filename>
    <includes id="a00677" name="GaussianFactorGraph.h" local="no" imported="no">gtsam/linear/GaussianFactorGraph.h</includes>
    <includes id="a00671" name="Scatter.h" local="no" imported="no">gtsam/linear/Scatter.h</includes>
    <includes id="a00521" name="Ordering.h" local="no" imported="no">gtsam/inference/Ordering.h</includes>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>Scatter.h</name>
    <path>/Users/dellaert/git/github/gtsam/linear/</path>
    <filename>a00671.html</filename>
    <includes id="a00491" name="Key.h" local="no" imported="no">gtsam/inference/Key.h</includes>
    <includes id="a00047" name="FastMap.h" local="no" imported="no">gtsam/base/FastMap.h</includes>
    <class kind="struct">gtsam::SlotEntry</class>
    <class kind="class">gtsam::Scatter</class>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>SparseEigen.h</name>
    <path>/Users/dellaert/git/github/gtsam/linear/</path>
    <filename>a00698.html</filename>
    <includes id="a00677" name="GaussianFactorGraph.h" local="no" imported="no">gtsam/linear/GaussianFactorGraph.h</includes>
    <includes id="a00749" name="VectorValues.h" local="no" imported="no">gtsam/linear/VectorValues.h</includes>
    <namespace>gtsam</namespace>
    <member kind="typedef">
      <type>Eigen::SparseMatrix&lt; double, Eigen::ColMajor, int &gt;</type>
      <name>SparseEigen</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>a52b9b28b076a8ae17d6d3d72ee1229c3</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>SparseEigen</type>
      <name>sparseJacobianEigen</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>aa9013a9053629f0c00b97726d9d8e19e</anchor>
      <arglist>(const GaussianFactorGraph &amp;gfg, const Ordering &amp;ordering)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>SubgraphBuilder.cpp</name>
    <path>/Users/dellaert/git/github/gtsam/linear/</path>
    <filename>a00728.html</filename>
    <includes id="a00059" name="DSFVector.h" local="no" imported="no">gtsam/base/DSFVector.h</includes>
    <includes id="a00047" name="FastMap.h" local="no" imported="no">gtsam/base/FastMap.h</includes>
    <includes id="a00029" name="WeightedSampler.h" local="no" imported="no">gtsam/base/WeightedSampler.h</includes>
    <includes id="a00521" name="Ordering.h" local="no" imported="no">gtsam/inference/Ordering.h</includes>
    <includes id="a00482" name="VariableIndex.h" local="no" imported="no">gtsam/inference/VariableIndex.h</includes>
    <includes id="a00635" name="Errors.h" local="no" imported="no">gtsam/linear/Errors.h</includes>
    <includes id="a00677" name="GaussianFactorGraph.h" local="no" imported="no">gtsam/linear/GaussianFactorGraph.h</includes>
    <includes id="a00758" name="SubgraphBuilder.h" local="no" imported="no">gtsam/linear/SubgraphBuilder.h</includes>
    <namespace>gtsam</namespace>
    <member kind="function">
      <type>GaussianFactorGraph::shared_ptr</type>
      <name>buildFactorSubgraph</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>ac06ac82e22341b1b9fdcd4c67280f619</anchor>
      <arglist>(const GaussianFactorGraph &amp;gfg, const Subgraph &amp;subgraph, const bool clone)</arglist>
    </member>
    <member kind="function">
      <type>std::pair&lt; GaussianFactorGraph::shared_ptr, GaussianFactorGraph::shared_ptr &gt;</type>
      <name>splitFactorGraph</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>ab3749ce0f63e205e55daa615aa1fd74a</anchor>
      <arglist>(const GaussianFactorGraph &amp;factorGraph, const Subgraph &amp;subgraph)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>SubgraphBuilder.h</name>
    <path>/Users/dellaert/git/github/gtsam/linear/</path>
    <filename>a00758.html</filename>
    <includes id="a00047" name="FastMap.h" local="no" imported="no">gtsam/base/FastMap.h</includes>
    <includes id="a00020" name="types.h" local="no" imported="no">gtsam/base/types.h</includes>
    <class kind="class">gtsam::Subgraph</class>
    <class kind="struct">gtsam::Subgraph::Edge</class>
    <class kind="struct">gtsam::SubgraphBuilderParameters</class>
    <class kind="class">gtsam::SubgraphBuilder</class>
    <namespace>gtsam</namespace>
    <member kind="function">
      <type>GaussianFactorGraph::shared_ptr</type>
      <name>buildFactorSubgraph</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>ac06ac82e22341b1b9fdcd4c67280f619</anchor>
      <arglist>(const GaussianFactorGraph &amp;gfg, const Subgraph &amp;subgraph, const bool clone)</arglist>
    </member>
    <member kind="function">
      <type>std::pair&lt; GaussianFactorGraph::shared_ptr, GaussianFactorGraph::shared_ptr &gt;</type>
      <name>splitFactorGraph</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>ab3749ce0f63e205e55daa615aa1fd74a</anchor>
      <arglist>(const GaussianFactorGraph &amp;factorGraph, const Subgraph &amp;subgraph)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>SubgraphPreconditioner.cpp</name>
    <path>/Users/dellaert/git/github/gtsam/linear/</path>
    <filename>a00650.html</filename>
    <includes id="a00701" name="SubgraphPreconditioner.h" local="no" imported="no">gtsam/linear/SubgraphPreconditioner.h</includes>
    <includes id="a00758" name="SubgraphBuilder.h" local="no" imported="no">gtsam/linear/SubgraphBuilder.h</includes>
    <includes id="a00677" name="GaussianFactorGraph.h" local="no" imported="no">gtsam/linear/GaussianFactorGraph.h</includes>
    <includes id="a00674" name="GaussianBayesNet.h" local="no" imported="no">gtsam/linear/GaussianBayesNet.h</includes>
    <includes id="a00593" name="JacobianFactor.h" local="no" imported="no">gtsam/linear/JacobianFactor.h</includes>
    <includes id="a00020" name="types.h" local="no" imported="no">gtsam/base/types.h</includes>
    <includes id="a00134" name="Vector.h" local="no" imported="no">gtsam/base/Vector.h</includes>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>SubgraphPreconditioner.h</name>
    <path>/Users/dellaert/git/github/gtsam/linear/</path>
    <filename>a00701.html</filename>
    <includes id="a00758" name="SubgraphBuilder.h" local="no" imported="no">gtsam/linear/SubgraphBuilder.h</includes>
    <includes id="a00635" name="Errors.h" local="no" imported="no">gtsam/linear/Errors.h</includes>
    <includes id="a00722" name="IterativeSolver.h" local="no" imported="no">gtsam/linear/IterativeSolver.h</includes>
    <includes id="a00749" name="VectorValues.h" local="no" imported="no">gtsam/linear/VectorValues.h</includes>
    <class kind="struct">gtsam::SubgraphPreconditionerParameters</class>
    <class kind="class">gtsam::SubgraphPreconditioner</class>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>SubgraphSolver.cpp</name>
    <path>/Users/dellaert/git/github/gtsam/linear/</path>
    <filename>a00680.html</filename>
    <includes id="a00623" name="SubgraphSolver.h" local="no" imported="no">gtsam/linear/SubgraphSolver.h</includes>
    <includes id="a00758" name="SubgraphBuilder.h" local="no" imported="no">gtsam/linear/SubgraphBuilder.h</includes>
    <includes id="a00674" name="GaussianBayesNet.h" local="no" imported="no">gtsam/linear/GaussianBayesNet.h</includes>
    <includes id="a00767" name="iterative-inl.h" local="no" imported="no">gtsam/linear/iterative-inl.h</includes>
    <includes id="a00677" name="GaussianFactorGraph.h" local="no" imported="no">gtsam/linear/GaussianFactorGraph.h</includes>
    <includes id="a00701" name="SubgraphPreconditioner.h" local="no" imported="no">gtsam/linear/SubgraphPreconditioner.h</includes>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>SubgraphSolver.h</name>
    <path>/Users/dellaert/git/github/gtsam/linear/</path>
    <filename>a00623.html</filename>
    <includes id="a00761" name="ConjugateGradientSolver.h" local="no" imported="no">gtsam/linear/ConjugateGradientSolver.h</includes>
    <includes id="a00758" name="SubgraphBuilder.h" local="no" imported="no">gtsam/linear/SubgraphBuilder.h</includes>
    <class kind="struct">gtsam::SubgraphSolverParameters</class>
    <class kind="class">gtsam::SubgraphSolver</class>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>VectorValues.cpp</name>
    <path>/Users/dellaert/git/github/gtsam/linear/</path>
    <filename>a00602.html</filename>
    <includes id="a00749" name="VectorValues.h" local="no" imported="no">gtsam/linear/VectorValues.h</includes>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>VectorValues.h</name>
    <path>/Users/dellaert/git/github/gtsam/linear/</path>
    <filename>a00749.html</filename>
    <includes id="a00671" name="Scatter.h" local="no" imported="no">gtsam/linear/Scatter.h</includes>
    <includes id="a00521" name="Ordering.h" local="no" imported="no">gtsam/inference/Ordering.h</includes>
    <includes id="a00134" name="Vector.h" local="no" imported="no">gtsam/base/Vector.h</includes>
    <includes id="a00002" name="FastVector.h" local="no" imported="no">gtsam/base/FastVector.h</includes>
    <includes id="a01256" name="global_includes.h" local="no" imported="no">gtsam/global_includes.h</includes>
    <class kind="class">gtsam::VectorValues</class>
    <class kind="struct">gtsam::traits&lt; VectorValues &gt;</class>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>AHRSFactor.cpp</name>
    <path>/Users/dellaert/git/github/gtsam/navigation/</path>
    <filename>a00869.html</filename>
    <includes id="a00791" name="AHRSFactor.h" local="no" imported="no">gtsam/navigation/AHRSFactor.h</includes>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>AHRSFactor.h</name>
    <path>/Users/dellaert/git/github/gtsam/navigation/</path>
    <filename>a00791.html</filename>
    <includes id="a00785" name="PreintegratedRotation.h" local="no" imported="no">gtsam/navigation/PreintegratedRotation.h</includes>
    <includes id="a01022" name="NonlinearFactor.h" local="no" imported="no">gtsam/nonlinear/NonlinearFactor.h</includes>
    <includes id="a00350" name="Pose3.h" local="no" imported="no">gtsam/geometry/Pose3.h</includes>
    <class kind="class">gtsam::PreintegratedAhrsMeasurements</class>
    <class kind="class">gtsam::AHRSFactor</class>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>AttitudeFactor.cpp</name>
    <path>/Users/dellaert/git/github/gtsam/navigation/</path>
    <filename>a00827.html</filename>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>CombinedImuFactor.cpp</name>
    <path>/Users/dellaert/git/github/gtsam/navigation/</path>
    <filename>a00860.html</filename>
    <includes id="a00818" name="CombinedImuFactor.h" local="no" imported="no">gtsam/navigation/CombinedImuFactor.h</includes>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>CombinedImuFactor.h</name>
    <path>/Users/dellaert/git/github/gtsam/navigation/</path>
    <filename>a00818.html</filename>
    <includes id="a00815" name="ManifoldPreintegration.h" local="no" imported="no">gtsam/navigation/ManifoldPreintegration.h</includes>
    <includes id="a00830" name="TangentPreintegration.h" local="no" imported="no">gtsam/navigation/TangentPreintegration.h</includes>
    <includes id="a01022" name="NonlinearFactor.h" local="no" imported="no">gtsam/nonlinear/NonlinearFactor.h</includes>
    <includes id="a00050" name="Matrix.h" local="no" imported="no">gtsam/base/Matrix.h</includes>
    <includes id="a08943" name="serialization.h" local="no" imported="no">gtsam/base/serialization.h</includes>
    <class kind="struct">gtsam::PreintegrationCombinedParams</class>
    <class kind="class">gtsam::PreintegratedCombinedMeasurements</class>
    <class kind="class">gtsam::CombinedImuFactor</class>
    <class kind="struct">gtsam::traits&lt; PreintegrationCombinedParams &gt;</class>
    <class kind="struct">gtsam::traits&lt; PreintegratedCombinedMeasurements &gt;</class>
    <class kind="struct">gtsam::traits&lt; CombinedImuFactor &gt;</class>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>ConstantVelocityFactor.h</name>
    <path>/Users/dellaert/git/github/gtsam/navigation/</path>
    <filename>a00851.html</filename>
    <includes id="a00788" name="NavState.h" local="no" imported="no">gtsam/navigation/NavState.h</includes>
    <includes id="a01022" name="NonlinearFactor.h" local="no" imported="no">gtsam/nonlinear/NonlinearFactor.h</includes>
    <class kind="class">gtsam::ConstantVelocityFactor</class>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>expressions.h</name>
    <path>/Users/dellaert/git/github/gtsam/navigation/</path>
    <filename>a08967.html</filename>
    <includes id="a00422" name="Rot3.h" local="no" imported="no">gtsam/geometry/Rot3.h</includes>
    <includes id="a00788" name="NavState.h" local="no" imported="no">gtsam/navigation/NavState.h</includes>
    <includes id="a08970" name="expressions.h" local="no" imported="no">gtsam/nonlinear/expressions.h</includes>
    <includes id="a08973" name="expressions.h" local="no" imported="no">gtsam/slam/expressions.h</includes>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>expressions.h</name>
    <path>/Users/dellaert/git/github/gtsam/nonlinear/</path>
    <filename>a08970.html</filename>
    <includes id="a00947" name="Expression.h" local="no" imported="no">gtsam/nonlinear/Expression.h</includes>
    <includes id="a00131" name="Lie.h" local="no" imported="no">gtsam/base/Lie.h</includes>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>expressions.h</name>
    <path>/Users/dellaert/git/github/gtsam/slam/</path>
    <filename>a08973.html</filename>
    <includes id="a08970" name="expressions.h" local="no" imported="no">gtsam/nonlinear/expressions.h</includes>
    <includes id="a00404" name="Pose2.h" local="no" imported="no">gtsam/geometry/Pose2.h</includes>
    <includes id="a00266" name="Cal3_S2.h" local="no" imported="no">gtsam/geometry/Cal3_S2.h</includes>
    <includes id="a00332" name="Cal3Bundler.h" local="no" imported="no">gtsam/geometry/Cal3Bundler.h</includes>
    <includes id="a00374" name="Line3.h" local="no" imported="no">gtsam/geometry/Line3.h</includes>
    <includes id="a00314" name="PinholeCamera.h" local="no" imported="no">gtsam/geometry/PinholeCamera.h</includes>
    <namespace>gtsam</namespace>
    <member kind="function">
      <type>Point2_</type>
      <name>project</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>ad0024081af88e1b3cc0820c65ad6afd4</anchor>
      <arglist>(const Point3_ &amp;p_cam)</arglist>
    </member>
    <member kind="function">
      <type>gtsam::Expression&lt; typename gtsam::traits&lt; T &gt;::TangentVector &gt;</type>
      <name>logmap</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>a1af6e019faaedfddc234925b2e50ad2b</anchor>
      <arglist>(const gtsam::Expression&lt; T &gt; &amp;x1, const gtsam::Expression&lt; T &gt; &amp;x2)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>GPSFactor.cpp</name>
    <path>/Users/dellaert/git/github/gtsam/navigation/</path>
    <filename>a00782.html</filename>
    <includes id="a00809" name="GPSFactor.h" local="yes" imported="no">GPSFactor.h</includes>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>GPSFactor.h</name>
    <path>/Users/dellaert/git/github/gtsam/navigation/</path>
    <filename>a00809.html</filename>
    <includes id="a01022" name="NonlinearFactor.h" local="no" imported="no">gtsam/nonlinear/NonlinearFactor.h</includes>
    <includes id="a00788" name="NavState.h" local="no" imported="no">gtsam/navigation/NavState.h</includes>
    <includes id="a00350" name="Pose3.h" local="no" imported="no">gtsam/geometry/Pose3.h</includes>
    <class kind="class">gtsam::GPSFactor</class>
    <class kind="class">gtsam::GPSFactor2</class>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>ImuBias.cpp</name>
    <path>/Users/dellaert/git/github/gtsam/navigation/</path>
    <filename>a00866.html</filename>
    <includes id="a00806" name="ImuBias.h" local="yes" imported="no">ImuBias.h</includes>
    <includes id="a00311" name="Point3.h" local="no" imported="no">gtsam/geometry/Point3.h</includes>
    <namespace>gtsam</namespace>
    <namespace>gtsam::imuBias</namespace>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a01619.html</anchorfile>
      <anchor>ae7a6582902c6daf9f20f2f7e466c60d8</anchor>
      <arglist>(std::ostream &amp;os, const ConstantBias &amp;bias)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>ImuBias.h</name>
    <path>/Users/dellaert/git/github/gtsam/navigation/</path>
    <filename>a00806.html</filename>
    <includes id="a00062" name="OptionalJacobian.h" local="no" imported="no">gtsam/base/OptionalJacobian.h</includes>
    <class kind="class">gtsam::imuBias::ConstantBias</class>
    <class kind="struct">gtsam::traits&lt; imuBias::ConstantBias &gt;</class>
    <namespace>gtsam</namespace>
    <namespace>gtsam::imuBias</namespace>
  </compound>
  <compound kind="file">
    <name>ImuFactor.cpp</name>
    <path>/Users/dellaert/git/github/gtsam/navigation/</path>
    <filename>a00797.html</filename>
    <includes id="a08976" name="ImuFactor.h" local="no" imported="no">gtsam/navigation/ImuFactor.h</includes>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>ImuFactor.h</name>
    <path>/Users/dellaert/git/github/gtsam/navigation/</path>
    <filename>a08976.html</filename>
    <includes id="a01022" name="NonlinearFactor.h" local="no" imported="no">gtsam/nonlinear/NonlinearFactor.h</includes>
    <includes id="a00815" name="ManifoldPreintegration.h" local="no" imported="no">gtsam/navigation/ManifoldPreintegration.h</includes>
    <includes id="a00830" name="TangentPreintegration.h" local="no" imported="no">gtsam/navigation/TangentPreintegration.h</includes>
    <includes id="a00011" name="debug.h" local="no" imported="no">gtsam/base/debug.h</includes>
    <class kind="class">gtsam::PreintegratedImuMeasurements</class>
    <class kind="class">gtsam::ImuFactor</class>
    <class kind="class">gtsam::ImuFactor2</class>
    <class kind="struct">gtsam::traits&lt; PreintegratedImuMeasurements &gt;</class>
    <class kind="struct">gtsam::traits&lt; ImuFactor &gt;</class>
    <class kind="struct">gtsam::traits&lt; ImuFactor2 &gt;</class>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>IMUFactor.h</name>
    <path>/Users/dellaert/git/github/gtsam_unstable/dynamics/</path>
    <filename>a08979.html</filename>
    <includes id="a00125" name="numericalDerivative.h" local="no" imported="no">gtsam/base/numericalDerivative.h</includes>
    <includes id="a01022" name="NonlinearFactor.h" local="no" imported="no">gtsam/nonlinear/NonlinearFactor.h</includes>
    <includes id="a01565" name="PoseRTV.h" local="no" imported="no">gtsam_unstable/dynamics/PoseRTV.h</includes>
    <class kind="class">gtsam::IMUFactor</class>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>MagFactor.h</name>
    <path>/Users/dellaert/git/github/gtsam/navigation/</path>
    <filename>a00863.html</filename>
    <includes id="a01022" name="NonlinearFactor.h" local="no" imported="no">gtsam/nonlinear/NonlinearFactor.h</includes>
    <includes id="a00281" name="Rot2.h" local="no" imported="no">gtsam/geometry/Rot2.h</includes>
    <includes id="a00422" name="Rot3.h" local="no" imported="no">gtsam/geometry/Rot3.h</includes>
    <class kind="class">gtsam::MagFactor</class>
    <class kind="class">gtsam::MagFactor1</class>
    <class kind="class">gtsam::MagFactor2</class>
    <class kind="class">gtsam::MagFactor3</class>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>ManifoldPreintegration.cpp</name>
    <path>/Users/dellaert/git/github/gtsam/navigation/</path>
    <filename>a00854.html</filename>
    <includes id="a00815" name="ManifoldPreintegration.h" local="yes" imported="no">ManifoldPreintegration.h</includes>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>ManifoldPreintegration.h</name>
    <path>/Users/dellaert/git/github/gtsam/navigation/</path>
    <filename>a00815.html</filename>
    <includes id="a00788" name="NavState.h" local="no" imported="no">gtsam/navigation/NavState.h</includes>
    <includes id="a00812" name="PreintegrationBase.h" local="no" imported="no">gtsam/navigation/PreintegrationBase.h</includes>
    <class kind="class">gtsam::ManifoldPreintegration</class>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>NavState.h</name>
    <path>/Users/dellaert/git/github/gtsam/navigation/</path>
    <filename>a00788.html</filename>
    <includes id="a00350" name="Pose3.h" local="no" imported="no">gtsam/geometry/Pose3.h</includes>
    <includes id="a00134" name="Vector.h" local="no" imported="no">gtsam/base/Vector.h</includes>
    <includes id="a00110" name="Manifold.h" local="no" imported="no">gtsam/base/Manifold.h</includes>
    <class kind="class">gtsam::NavState</class>
    <class kind="struct">gtsam::traits&lt; NavState &gt;</class>
    <namespace>gtsam</namespace>
    <member kind="typedef">
      <type>Vector3</type>
      <name>Velocity3</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>ad6ba0a40d5dd8936f4ca53f7bb3ef53b</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>PreintegratedRotation.cpp</name>
    <path>/Users/dellaert/git/github/gtsam/navigation/</path>
    <filename>a00794.html</filename>
    <includes id="a00785" name="PreintegratedRotation.h" local="yes" imported="no">PreintegratedRotation.h</includes>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>PreintegratedRotation.h</name>
    <path>/Users/dellaert/git/github/gtsam/navigation/</path>
    <filename>a00785.html</filename>
    <includes id="a00350" name="Pose3.h" local="no" imported="no">gtsam/geometry/Pose3.h</includes>
    <includes id="a00050" name="Matrix.h" local="no" imported="no">gtsam/base/Matrix.h</includes>
    <class kind="struct">gtsam::PreintegratedRotationParams</class>
    <class kind="class">gtsam::PreintegratedRotation</class>
    <class kind="struct">gtsam::traits&lt; PreintegratedRotation &gt;</class>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>PreintegrationBase.h</name>
    <path>/Users/dellaert/git/github/gtsam/navigation/</path>
    <filename>a00812.html</filename>
    <includes id="a00821" name="PreintegrationParams.h" local="no" imported="no">gtsam/navigation/PreintegrationParams.h</includes>
    <includes id="a00788" name="NavState.h" local="no" imported="no">gtsam/navigation/NavState.h</includes>
    <includes id="a00806" name="ImuBias.h" local="no" imported="no">gtsam/navigation/ImuBias.h</includes>
    <includes id="a00620" name="NoiseModel.h" local="no" imported="no">gtsam/linear/NoiseModel.h</includes>
    <class kind="class">gtsam::PreintegrationBase</class>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>PreintegrationParams.h</name>
    <path>/Users/dellaert/git/github/gtsam/navigation/</path>
    <filename>a00821.html</filename>
    <includes id="a00785" name="PreintegratedRotation.h" local="no" imported="no">gtsam/navigation/PreintegratedRotation.h</includes>
    <class kind="struct">gtsam::PreintegrationParams</class>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>Scenario.h</name>
    <path>/Users/dellaert/git/github/gtsam/navigation/</path>
    <filename>a00779.html</filename>
    <includes id="a00620" name="NoiseModel.h" local="no" imported="no">gtsam/linear/NoiseModel.h</includes>
    <includes id="a00788" name="NavState.h" local="no" imported="no">gtsam/navigation/NavState.h</includes>
    <class kind="class">gtsam::Scenario</class>
    <class kind="class">gtsam::ConstantTwistScenario</class>
    <class kind="class">gtsam::AcceleratingScenario</class>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>ScenarioRunner.h</name>
    <path>/Users/dellaert/git/github/gtsam/navigation/</path>
    <filename>a00824.html</filename>
    <includes id="a08976" name="ImuFactor.h" local="no" imported="no">gtsam/navigation/ImuFactor.h</includes>
    <includes id="a00779" name="Scenario.h" local="no" imported="no">gtsam/navigation/Scenario.h</includes>
    <includes id="a00605" name="Sampler.h" local="no" imported="no">gtsam/linear/Sampler.h</includes>
    <class kind="class">gtsam::ScenarioRunner</class>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>TangentPreintegration.cpp</name>
    <path>/Users/dellaert/git/github/gtsam/navigation/</path>
    <filename>a00845.html</filename>
    <includes id="a00830" name="TangentPreintegration.h" local="yes" imported="no">TangentPreintegration.h</includes>
    <includes id="a00125" name="numericalDerivative.h" local="no" imported="no">gtsam/base/numericalDerivative.h</includes>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>TangentPreintegration.h</name>
    <path>/Users/dellaert/git/github/gtsam/navigation/</path>
    <filename>a00830.html</filename>
    <includes id="a00812" name="PreintegrationBase.h" local="no" imported="no">gtsam/navigation/PreintegrationBase.h</includes>
    <class kind="class">gtsam::TangentPreintegration</class>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>AdaptAutoDiff.h</name>
    <path>/Users/dellaert/git/github/gtsam/nonlinear/</path>
    <filename>a00893.html</filename>
    <includes id="a00062" name="OptionalJacobian.h" local="no" imported="no">gtsam/base/OptionalJacobian.h</includes>
    <class kind="class">gtsam::AdaptAutoDiff</class>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>CustomFactor.cpp</name>
    <path>/Users/dellaert/git/github/gtsam/nonlinear/</path>
    <filename>a00965.html</filename>
    <includes id="a00920" name="CustomFactor.h" local="no" imported="no">gtsam/nonlinear/CustomFactor.h</includes>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>CustomFactor.h</name>
    <path>/Users/dellaert/git/github/gtsam/nonlinear/</path>
    <filename>a00920.html</filename>
    <includes id="a01022" name="NonlinearFactor.h" local="no" imported="no">gtsam/nonlinear/NonlinearFactor.h</includes>
    <class kind="class">gtsam::CustomFactor</class>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>DoglegOptimizer.cpp</name>
    <path>/Users/dellaert/git/github/gtsam/nonlinear/</path>
    <filename>a01007.html</filename>
    <includes id="a00929" name="DoglegOptimizer.h" local="no" imported="no">gtsam/nonlinear/DoglegOptimizer.h</includes>
    <includes id="a00881" name="DoglegOptimizerImpl.h" local="no" imported="no">gtsam/nonlinear/DoglegOptimizerImpl.h</includes>
    <includes id="a00734" name="GaussianBayesTree.h" local="no" imported="no">gtsam/linear/GaussianBayesTree.h</includes>
    <includes id="a00674" name="GaussianBayesNet.h" local="no" imported="no">gtsam/linear/GaussianBayesNet.h</includes>
    <includes id="a00677" name="GaussianFactorGraph.h" local="no" imported="no">gtsam/linear/GaussianFactorGraph.h</includes>
    <includes id="a00749" name="VectorValues.h" local="no" imported="no">gtsam/linear/VectorValues.h</includes>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>DoglegOptimizer.h</name>
    <path>/Users/dellaert/git/github/gtsam/nonlinear/</path>
    <filename>a00929.html</filename>
    <includes id="a00974" name="NonlinearOptimizer.h" local="no" imported="no">gtsam/nonlinear/NonlinearOptimizer.h</includes>
    <class kind="class">gtsam::DoglegParams</class>
    <class kind="class">gtsam::DoglegOptimizer</class>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>DoglegOptimizerImpl.h</name>
    <path>/Users/dellaert/git/github/gtsam/nonlinear/</path>
    <filename>a00881.html</filename>
    <includes id="a00749" name="VectorValues.h" local="no" imported="no">gtsam/linear/VectorValues.h</includes>
    <includes id="a00521" name="Ordering.h" local="no" imported="no">gtsam/inference/Ordering.h</includes>
    <class kind="struct">gtsam::DoglegOptimizerImpl</class>
    <class kind="struct">gtsam::DoglegOptimizerImpl::IterationResult</class>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>Expression-inl.h</name>
    <path>/Users/dellaert/git/github/gtsam/nonlinear/</path>
    <filename>a00884.html</filename>
    <class kind="struct">gtsam::internal::apply_compose</class>
    <class kind="struct">gtsam::internal::apply_compose&lt; double &gt;</class>
    <namespace>gtsam</namespace>
    <member kind="function">
      <type>Expression&lt; T &gt;</type>
      <name>operator*</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>a3db519caa1b7e43412c9a7e13acf8329</anchor>
      <arglist>(const Expression&lt; T &gt; &amp;expression1, const Expression&lt; T &gt; &amp;expression2)</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; Expression&lt; T &gt; &gt;</type>
      <name>createUnknowns</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>a51881c20dd5ecdd129cb993ea8374846</anchor>
      <arglist>(size_t n, char c, size_t start)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Expression.h</name>
    <path>/Users/dellaert/git/github/gtsam/nonlinear/</path>
    <filename>a00947.html</filename>
    <includes id="a08955" name="Symbol.h" local="no" imported="no">gtsam/inference/Symbol.h</includes>
    <includes id="a00062" name="OptionalJacobian.h" local="no" imported="no">gtsam/base/OptionalJacobian.h</includes>
    <includes id="a00884" name="Expression-inl.h" local="no" imported="no">gtsam/nonlinear/Expression-inl.h</includes>
    <class kind="class">gtsam::Expression</class>
    <class kind="struct">gtsam::Expression::UnaryFunction</class>
    <class kind="struct">gtsam::Expression::BinaryFunction</class>
    <class kind="struct">gtsam::Expression::TernaryFunction</class>
    <class kind="class">gtsam::ScalarMultiplyExpression</class>
    <class kind="class">gtsam::BinarySumExpression</class>
    <namespace>gtsam</namespace>
    <member kind="function">
      <type>Expression&lt; T &gt;</type>
      <name>linearExpression</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>a794029fe8dfc03f67a8cb64ad05d47c9</anchor>
      <arglist>(const std::function&lt; T(A)&gt; &amp;f, const Expression&lt; A &gt; &amp;expression, const Eigen::Matrix&lt; double, traits&lt; T &gt;::dimension, traits&lt; A &gt;::dimension &gt; &amp;dTdA)</arglist>
    </member>
    <member kind="function">
      <type>ScalarMultiplyExpression&lt; T &gt;</type>
      <name>operator*</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>a405f3793afc2cc3173c3fbdecadb162a</anchor>
      <arglist>(double s, const Expression&lt; T &gt; &amp;e)</arglist>
    </member>
    <member kind="function">
      <type>BinarySumExpression&lt; T &gt;</type>
      <name>operator+</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>a589e3ff8cd71e5a17ee1dcfae8b2df26</anchor>
      <arglist>(const Expression&lt; T &gt; &amp;e1, const Expression&lt; T &gt; &amp;e2)</arglist>
    </member>
    <member kind="function">
      <type>BinarySumExpression&lt; T &gt;</type>
      <name>operator-</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>a9512eb02324210895442f2bf8268902d</anchor>
      <arglist>(const Expression&lt; T &gt; &amp;e1, const Expression&lt; T &gt; &amp;e2)</arglist>
    </member>
    <member kind="function">
      <type>Expression&lt; T &gt;</type>
      <name>operator*</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>a3db519caa1b7e43412c9a7e13acf8329</anchor>
      <arglist>(const Expression&lt; T &gt; &amp;expression1, const Expression&lt; T &gt; &amp;expression2)</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; Expression&lt; T &gt; &gt;</type>
      <name>createUnknowns</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>a51881c20dd5ecdd129cb993ea8374846</anchor>
      <arglist>(size_t n, char c, size_t start)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>ExpressionFactorGraph.h</name>
    <path>/Users/dellaert/git/github/gtsam/nonlinear/</path>
    <filename>a01025.html</filename>
    <includes id="a00962" name="NonlinearFactorGraph.h" local="no" imported="no">gtsam/nonlinear/NonlinearFactorGraph.h</includes>
    <class kind="class">gtsam::ExpressionFactorGraph</class>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>expressionTesting.h</name>
    <path>/Users/dellaert/git/github/gtsam/nonlinear/</path>
    <filename>a01013.html</filename>
    <includes id="a00926" name="factorTesting.h" local="no" imported="no">gtsam/nonlinear/factorTesting.h</includes>
    <includes id="a00101" name="Testable.h" local="no" imported="no">gtsam/base/Testable.h</includes>
    <namespace>gtsam</namespace>
    <member kind="define">
      <type>#define</type>
      <name>EXPECT_CORRECT_EXPRESSION_JACOBIANS</name>
      <anchorfile>a01013.html</anchorfile>
      <anchor>a701d0cd12b81a725f7f9cd2432fe9e2a</anchor>
      <arglist>(expression, values, numerical_derivative_step, tolerance)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>ExtendedKalmanFilter-inl.h</name>
    <path>/Users/dellaert/git/github/gtsam/nonlinear/</path>
    <filename>a00956.html</filename>
    <includes id="a00908" name="ExtendedKalmanFilter.h" local="no" imported="no">gtsam/nonlinear/ExtendedKalmanFilter.h</includes>
    <includes id="a01022" name="NonlinearFactor.h" local="no" imported="no">gtsam/nonlinear/NonlinearFactor.h</includes>
    <includes id="a00674" name="GaussianBayesNet.h" local="no" imported="no">gtsam/linear/GaussianBayesNet.h</includes>
    <includes id="a00677" name="GaussianFactorGraph.h" local="no" imported="no">gtsam/linear/GaussianFactorGraph.h</includes>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>ExtendedKalmanFilter.h</name>
    <path>/Users/dellaert/git/github/gtsam/nonlinear/</path>
    <filename>a00908.html</filename>
    <includes id="a00962" name="NonlinearFactorGraph.h" local="no" imported="no">gtsam/nonlinear/NonlinearFactorGraph.h</includes>
    <includes id="a01022" name="NonlinearFactor.h" local="no" imported="no">gtsam/nonlinear/NonlinearFactor.h</includes>
    <includes id="a00956" name="ExtendedKalmanFilter-inl.h" local="no" imported="no">gtsam/nonlinear/ExtendedKalmanFilter-inl.h</includes>
    <class kind="class">gtsam::ExtendedKalmanFilter</class>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>factorTesting.h</name>
    <path>/Users/dellaert/git/github/gtsam/nonlinear/</path>
    <filename>a00926.html</filename>
    <includes id="a01022" name="NonlinearFactor.h" local="no" imported="no">gtsam/nonlinear/NonlinearFactor.h</includes>
    <includes id="a00125" name="numericalDerivative.h" local="no" imported="no">gtsam/base/numericalDerivative.h</includes>
    <namespace>gtsam</namespace>
    <member kind="define">
      <type>#define</type>
      <name>EXPECT_CORRECT_FACTOR_JACOBIANS</name>
      <anchorfile>a00926.html</anchorfile>
      <anchor>a8ec37fe83eda47404b8588e1f012df21</anchor>
      <arglist>(factor, values, numerical_derivative_step, tolerance)</arglist>
    </member>
    <member kind="function">
      <type>JacobianFactor</type>
      <name>linearizeNumerically</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>a9753b4e62378151d30bf8af5e2fc1602</anchor>
      <arglist>(const NoiseModelFactor &amp;factor, const Values &amp;values, double delta=1e-5)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>FunctorizedFactor.h</name>
    <path>/Users/dellaert/git/github/gtsam/nonlinear/</path>
    <filename>a01028.html</filename>
    <includes id="a00101" name="Testable.h" local="no" imported="no">gtsam/base/Testable.h</includes>
    <includes id="a01022" name="NonlinearFactor.h" local="no" imported="no">gtsam/nonlinear/NonlinearFactor.h</includes>
    <class kind="class">gtsam::FunctorizedFactor</class>
    <class kind="struct">gtsam::traits&lt; FunctorizedFactor&lt; R, T &gt; &gt;</class>
    <class kind="class">gtsam::FunctorizedFactor2</class>
    <class kind="struct">gtsam::traits&lt; FunctorizedFactor2&lt; R, T1, T2 &gt; &gt;</class>
    <namespace>gtsam</namespace>
    <member kind="function">
      <type>FunctorizedFactor&lt; R, T &gt;</type>
      <name>MakeFunctorizedFactor</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>a9d2a0b16c9f78f20fc78fa39c7426242</anchor>
      <arglist>(Key key, const R &amp;z, const SharedNoiseModel &amp;model, const FUNC func)</arglist>
    </member>
    <member kind="function">
      <type>FunctorizedFactor2&lt; R, T1, T2 &gt;</type>
      <name>MakeFunctorizedFactor2</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>a313f0e290f370cff0b7e25024d1b8c6d</anchor>
      <arglist>(Key key1, Key key2, const R &amp;z, const SharedNoiseModel &amp;model, const FUNC func)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>GaussNewtonOptimizer.cpp</name>
    <path>/Users/dellaert/git/github/gtsam/nonlinear/</path>
    <filename>a00875.html</filename>
    <includes id="a00941" name="GaussNewtonOptimizer.h" local="no" imported="no">gtsam/nonlinear/GaussNewtonOptimizer.h</includes>
    <includes id="a00677" name="GaussianFactorGraph.h" local="no" imported="no">gtsam/linear/GaussianFactorGraph.h</includes>
    <includes id="a00749" name="VectorValues.h" local="no" imported="no">gtsam/linear/VectorValues.h</includes>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>GaussNewtonOptimizer.h</name>
    <path>/Users/dellaert/git/github/gtsam/nonlinear/</path>
    <filename>a00941.html</filename>
    <includes id="a00974" name="NonlinearOptimizer.h" local="no" imported="no">gtsam/nonlinear/NonlinearOptimizer.h</includes>
    <class kind="class">gtsam::GaussNewtonParams</class>
    <class kind="class">gtsam::GaussNewtonOptimizer</class>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>GncOptimizer.h</name>
    <path>/Users/dellaert/git/github/gtsam/nonlinear/</path>
    <filename>a00923.html</filename>
    <includes id="a00962" name="NonlinearFactorGraph.h" local="no" imported="no">gtsam/nonlinear/NonlinearFactorGraph.h</includes>
    <class kind="class">gtsam::GncOptimizer</class>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>ISAM2-impl.cpp</name>
    <path>/Users/dellaert/git/github/gtsam/nonlinear/</path>
    <filename>a00878.html</filename>
    <includes id="a00011" name="debug.h" local="no" imported="no">gtsam/base/debug.h</includes>
    <includes id="a08955" name="Symbol.h" local="no" imported="no">gtsam/inference/Symbol.h</includes>
    <includes id="a00980" name="ISAM2-impl.h" local="no" imported="no">gtsam/nonlinear/ISAM2-impl.h</includes>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>ISAM2-impl.h</name>
    <path>/Users/dellaert/git/github/gtsam/nonlinear/</path>
    <filename>a00980.html</filename>
    <includes id="a00977" name="ISAM2.h" local="no" imported="no">gtsam/nonlinear/ISAM2.h</includes>
    <includes id="a01019" name="ISAM2Result.h" local="no" imported="no">gtsam/nonlinear/ISAM2Result.h</includes>
    <includes id="a00011" name="debug.h" local="no" imported="no">gtsam/base/debug.h</includes>
    <includes id="a00548" name="JunctionTree-inst.h" local="no" imported="no">gtsam/inference/JunctionTree-inst.h</includes>
    <includes id="a08955" name="Symbol.h" local="no" imported="no">gtsam/inference/Symbol.h</includes>
    <includes id="a00482" name="VariableIndex.h" local="no" imported="no">gtsam/inference/VariableIndex.h</includes>
    <includes id="a00734" name="GaussianBayesTree.h" local="no" imported="no">gtsam/linear/GaussianBayesTree.h</includes>
    <includes id="a00581" name="GaussianEliminationTree.h" local="no" imported="no">gtsam/linear/GaussianEliminationTree.h</includes>
    <class kind="class">gtsam::ISAM2BayesTree</class>
    <class kind="class">gtsam::ISAM2JunctionTree</class>
    <class kind="struct">gtsam::DeltaImpl</class>
    <class kind="struct">gtsam::DeltaImpl::PartialSolveResult</class>
    <class kind="struct">gtsam::DeltaImpl::ReorderingMode</class>
    <class kind="struct">gtsam::UpdateImpl</class>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>ISAM2.cpp</name>
    <path>/Users/dellaert/git/github/gtsam/nonlinear/</path>
    <filename>a00887.html</filename>
    <includes id="a00980" name="ISAM2-impl.h" local="no" imported="no">gtsam/nonlinear/ISAM2-impl.h</includes>
    <includes id="a00977" name="ISAM2.h" local="no" imported="no">gtsam/nonlinear/ISAM2.h</includes>
    <includes id="a01019" name="ISAM2Result.h" local="no" imported="no">gtsam/nonlinear/ISAM2Result.h</includes>
    <includes id="a00011" name="debug.h" local="no" imported="no">gtsam/base/debug.h</includes>
    <includes id="a00035" name="timing.h" local="no" imported="no">gtsam/base/timing.h</includes>
    <includes id="a00938" name="LinearContainerFactor.h" local="no" imported="no">gtsam/nonlinear/LinearContainerFactor.h</includes>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>ISAM2.h</name>
    <path>/Users/dellaert/git/github/gtsam/nonlinear/</path>
    <filename>a00977.html</filename>
    <includes id="a00734" name="GaussianBayesTree.h" local="no" imported="no">gtsam/linear/GaussianBayesTree.h</includes>
    <includes id="a00872" name="ISAM2Clique.h" local="no" imported="no">gtsam/nonlinear/ISAM2Clique.h</includes>
    <includes id="a00959" name="ISAM2Params.h" local="no" imported="no">gtsam/nonlinear/ISAM2Params.h</includes>
    <includes id="a01019" name="ISAM2Result.h" local="no" imported="no">gtsam/nonlinear/ISAM2Result.h</includes>
    <includes id="a01040" name="ISAM2UpdateParams.h" local="no" imported="no">gtsam/nonlinear/ISAM2UpdateParams.h</includes>
    <includes id="a00962" name="NonlinearFactorGraph.h" local="no" imported="no">gtsam/nonlinear/NonlinearFactorGraph.h</includes>
    <class kind="class">gtsam::ISAM2</class>
    <class kind="struct">gtsam::traits&lt; ISAM2 &gt;</class>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>ISAM2Clique.cpp</name>
    <path>/Users/dellaert/git/github/gtsam/nonlinear/</path>
    <filename>a00986.html</filename>
    <includes id="a00494" name="BayesTreeCliqueBase-inst.h" local="no" imported="no">gtsam/inference/BayesTreeCliqueBase-inst.h</includes>
    <includes id="a00749" name="VectorValues.h" local="no" imported="no">gtsam/linear/VectorValues.h</includes>
    <includes id="a00662" name="linearAlgorithms-inst.h" local="no" imported="no">gtsam/linear/linearAlgorithms-inst.h</includes>
    <includes id="a00872" name="ISAM2Clique.h" local="no" imported="no">gtsam/nonlinear/ISAM2Clique.h</includes>
    <namespace>gtsam</namespace>
    <member kind="function">
      <type>size_t</type>
      <name>optimizeWildfire</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>a2b0857edd76f8d63eeee0ce9944e28d4</anchor>
      <arglist>(const ISAM2Clique::shared_ptr &amp;root, double threshold, const KeySet &amp;replaced, VectorValues *delta)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>ISAM2Clique.h</name>
    <path>/Users/dellaert/git/github/gtsam/nonlinear/</path>
    <filename>a00872.html</filename>
    <includes id="a00455" name="BayesTreeCliqueBase.h" local="no" imported="no">gtsam/inference/BayesTreeCliqueBase.h</includes>
    <includes id="a00491" name="Key.h" local="no" imported="no">gtsam/inference/Key.h</includes>
    <includes id="a00674" name="GaussianBayesNet.h" local="no" imported="no">gtsam/linear/GaussianBayesNet.h</includes>
    <includes id="a00653" name="GaussianConditional.h" local="no" imported="no">gtsam/linear/GaussianConditional.h</includes>
    <includes id="a00677" name="GaussianFactorGraph.h" local="no" imported="no">gtsam/linear/GaussianFactorGraph.h</includes>
    <class kind="class">gtsam::ISAM2Clique</class>
    <namespace>gtsam</namespace>
    <member kind="function">
      <type>size_t</type>
      <name>optimizeWildfire</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>a2b0857edd76f8d63eeee0ce9944e28d4</anchor>
      <arglist>(const ISAM2Clique::shared_ptr &amp;root, double threshold, const KeySet &amp;replaced, VectorValues *delta)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>ISAM2Params.cpp</name>
    <path>/Users/dellaert/git/github/gtsam/nonlinear/</path>
    <filename>a00917.html</filename>
    <includes id="a00959" name="ISAM2Params.h" local="no" imported="no">gtsam/nonlinear/ISAM2Params.h</includes>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>ISAM2Params.h</name>
    <path>/Users/dellaert/git/github/gtsam/nonlinear/</path>
    <filename>a00959.html</filename>
    <includes id="a00677" name="GaussianFactorGraph.h" local="no" imported="no">gtsam/linear/GaussianFactorGraph.h</includes>
    <includes id="a00881" name="DoglegOptimizerImpl.h" local="no" imported="no">gtsam/nonlinear/DoglegOptimizerImpl.h</includes>
    <class kind="struct">gtsam::ISAM2GaussNewtonParams</class>
    <class kind="struct">gtsam::ISAM2DoglegParams</class>
    <class kind="struct">gtsam::ISAM2Params</class>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>ISAM2Result.h</name>
    <path>/Users/dellaert/git/github/gtsam/nonlinear/</path>
    <filename>a01019.html</filename>
    <includes id="a00734" name="GaussianBayesTree.h" local="no" imported="no">gtsam/linear/GaussianBayesTree.h</includes>
    <includes id="a00881" name="DoglegOptimizerImpl.h" local="no" imported="no">gtsam/nonlinear/DoglegOptimizerImpl.h</includes>
    <includes id="a00959" name="ISAM2Params.h" local="no" imported="no">gtsam/nonlinear/ISAM2Params.h</includes>
    <includes id="a00962" name="NonlinearFactorGraph.h" local="no" imported="no">gtsam/nonlinear/NonlinearFactorGraph.h</includes>
    <class kind="struct">gtsam::ISAM2Result</class>
    <class kind="struct">gtsam::ISAM2Result::DetailedResults</class>
    <class kind="struct">gtsam::ISAM2Result::DetailedResults::VariableStatus</class>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>ISAM2UpdateParams.h</name>
    <path>/Users/dellaert/git/github/gtsam/nonlinear/</path>
    <filename>a01040.html</filename>
    <includes id="a00023" name="FastList.h" local="no" imported="no">gtsam/base/FastList.h</includes>
    <includes id="a00491" name="Key.h" local="no" imported="no">gtsam/inference/Key.h</includes>
    <includes id="a01019" name="ISAM2Result.h" local="no" imported="no">gtsam/nonlinear/ISAM2Result.h</includes>
    <class kind="struct">gtsam::ISAM2UpdateParams</class>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>LevenbergMarquardtOptimizer.cpp</name>
    <path>/Users/dellaert/git/github/gtsam/nonlinear/</path>
    <filename>a01001.html</filename>
    <includes id="a00989" name="LevenbergMarquardtOptimizer.h" local="no" imported="no">gtsam/nonlinear/LevenbergMarquardtOptimizer.h</includes>
    <includes id="a00962" name="NonlinearFactorGraph.h" local="no" imported="no">gtsam/nonlinear/NonlinearFactorGraph.h</includes>
    <includes id="a00944" name="Values.h" local="no" imported="no">gtsam/nonlinear/Values.h</includes>
    <includes id="a00677" name="GaussianFactorGraph.h" local="no" imported="no">gtsam/linear/GaussianFactorGraph.h</includes>
    <includes id="a00755" name="linearExceptions.h" local="no" imported="no">gtsam/linear/linearExceptions.h</includes>
    <includes id="a00521" name="Ordering.h" local="no" imported="no">gtsam/inference/Ordering.h</includes>
    <includes id="a00134" name="Vector.h" local="no" imported="no">gtsam/base/Vector.h</includes>
    <includes id="a00035" name="timing.h" local="no" imported="no">gtsam/base/timing.h</includes>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>LevenbergMarquardtOptimizer.h</name>
    <path>/Users/dellaert/git/github/gtsam/nonlinear/</path>
    <filename>a00989.html</filename>
    <includes id="a00974" name="NonlinearOptimizer.h" local="no" imported="no">gtsam/nonlinear/NonlinearOptimizer.h</includes>
    <includes id="a00983" name="LevenbergMarquardtParams.h" local="no" imported="no">gtsam/nonlinear/LevenbergMarquardtParams.h</includes>
    <includes id="a00749" name="VectorValues.h" local="no" imported="no">gtsam/linear/VectorValues.h</includes>
    <class kind="class">gtsam::LevenbergMarquardtOptimizer</class>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>LevenbergMarquardtParams.cpp</name>
    <path>/Users/dellaert/git/github/gtsam/nonlinear/</path>
    <filename>a00896.html</filename>
    <includes id="a00983" name="LevenbergMarquardtParams.h" local="no" imported="no">gtsam/nonlinear/LevenbergMarquardtParams.h</includes>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>LevenbergMarquardtParams.h</name>
    <path>/Users/dellaert/git/github/gtsam/nonlinear/</path>
    <filename>a00983.html</filename>
    <includes id="a00950" name="NonlinearOptimizerParams.h" local="no" imported="no">gtsam/nonlinear/NonlinearOptimizerParams.h</includes>
    <includes id="a00962" name="NonlinearFactorGraph.h" local="no" imported="no">gtsam/nonlinear/NonlinearFactorGraph.h</includes>
    <class kind="class">gtsam::LevenbergMarquardtParams</class>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>LinearContainerFactor.cpp</name>
    <path>/Users/dellaert/git/github/gtsam/nonlinear/</path>
    <filename>a00899.html</filename>
    <includes id="a00938" name="LinearContainerFactor.h" local="no" imported="no">gtsam/nonlinear/LinearContainerFactor.h</includes>
    <includes id="a00614" name="HessianFactor.h" local="no" imported="no">gtsam/linear/HessianFactor.h</includes>
    <includes id="a00593" name="JacobianFactor.h" local="no" imported="no">gtsam/linear/JacobianFactor.h</includes>
    <includes id="a00749" name="VectorValues.h" local="no" imported="no">gtsam/linear/VectorValues.h</includes>
    <includes id="a00677" name="GaussianFactorGraph.h" local="no" imported="no">gtsam/linear/GaussianFactorGraph.h</includes>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>LinearContainerFactor.h</name>
    <path>/Users/dellaert/git/github/gtsam/nonlinear/</path>
    <filename>a00938.html</filename>
    <includes id="a00962" name="NonlinearFactorGraph.h" local="no" imported="no">gtsam/nonlinear/NonlinearFactorGraph.h</includes>
    <class kind="class">gtsam::LinearContainerFactor</class>
    <class kind="struct">gtsam::traits&lt; LinearContainerFactor &gt;</class>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>Marginals.cpp</name>
    <path>/Users/dellaert/git/github/gtsam/nonlinear/</path>
    <filename>a00992.html</filename>
    <includes id="a00035" name="timing.h" local="no" imported="no">gtsam/base/timing.h</includes>
    <includes id="a00593" name="JacobianFactor.h" local="no" imported="no">gtsam/linear/JacobianFactor.h</includes>
    <includes id="a00614" name="HessianFactor.h" local="no" imported="no">gtsam/linear/HessianFactor.h</includes>
    <includes id="a00953" name="Marginals.h" local="no" imported="no">gtsam/nonlinear/Marginals.h</includes>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>Marginals.h</name>
    <path>/Users/dellaert/git/github/gtsam/nonlinear/</path>
    <filename>a00953.html</filename>
    <includes id="a00734" name="GaussianBayesTree.h" local="no" imported="no">gtsam/linear/GaussianBayesTree.h</includes>
    <includes id="a00962" name="NonlinearFactorGraph.h" local="no" imported="no">gtsam/nonlinear/NonlinearFactorGraph.h</includes>
    <includes id="a00944" name="Values.h" local="no" imported="no">gtsam/nonlinear/Values.h</includes>
    <class kind="class">gtsam::Marginals</class>
    <class kind="class">gtsam::JointMarginal</class>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>NonlinearConjugateGradientOptimizer.cpp</name>
    <path>/Users/dellaert/git/github/gtsam/nonlinear/</path>
    <filename>a00905.html</filename>
    <includes id="a00914" name="NonlinearConjugateGradientOptimizer.h" local="no" imported="no">gtsam/nonlinear/NonlinearConjugateGradientOptimizer.h</includes>
    <includes id="a00944" name="Values.h" local="no" imported="no">gtsam/nonlinear/Values.h</includes>
    <includes id="a00677" name="GaussianFactorGraph.h" local="no" imported="no">gtsam/linear/GaussianFactorGraph.h</includes>
    <includes id="a00749" name="VectorValues.h" local="no" imported="no">gtsam/linear/VectorValues.h</includes>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>NonlinearConjugateGradientOptimizer.h</name>
    <path>/Users/dellaert/git/github/gtsam/nonlinear/</path>
    <filename>a00914.html</filename>
    <includes id="a00110" name="Manifold.h" local="no" imported="no">gtsam/base/Manifold.h</includes>
    <includes id="a00974" name="NonlinearOptimizer.h" local="no" imported="no">gtsam/nonlinear/NonlinearOptimizer.h</includes>
    <class kind="class">gtsam::NonlinearConjugateGradientOptimizer</class>
    <namespace>gtsam</namespace>
    <member kind="function">
      <type>double</type>
      <name>lineSearch</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>a0ceb9e5a5e864b96c529db67f55a873b</anchor>
      <arglist>(const S &amp;system, const V currentValues, const W &amp;gradient)</arglist>
    </member>
    <member kind="function">
      <type>boost::tuple&lt; V, int &gt;</type>
      <name>nonlinearConjugateGradient</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>afc19854e0bfc1acadb00ff00a043cc17</anchor>
      <arglist>(const S &amp;system, const V &amp;initial, const NonlinearOptimizerParams &amp;params, const bool singleIteration, const bool gradientDescent=false)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>nonlinearExceptions.h</name>
    <path>/Users/dellaert/git/github/gtsam/nonlinear/</path>
    <filename>a00902.html</filename>
    <includes id="a00491" name="Key.h" local="no" imported="no">gtsam/inference/Key.h</includes>
    <class kind="class">gtsam::MarginalizeNonleafException</class>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>NonlinearFactor.cpp</name>
    <path>/Users/dellaert/git/github/gtsam/nonlinear/</path>
    <filename>a01010.html</filename>
    <includes id="a01022" name="NonlinearFactor.h" local="no" imported="no">gtsam/nonlinear/NonlinearFactor.h</includes>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>NonlinearFactor.h</name>
    <path>/Users/dellaert/git/github/gtsam/nonlinear/</path>
    <filename>a01022.html</filename>
    <includes id="a00944" name="Values.h" local="no" imported="no">gtsam/nonlinear/Values.h</includes>
    <includes id="a00620" name="NoiseModel.h" local="no" imported="no">gtsam/linear/NoiseModel.h</includes>
    <includes id="a00593" name="JacobianFactor.h" local="no" imported="no">gtsam/linear/JacobianFactor.h</includes>
    <includes id="a00515" name="Factor.h" local="no" imported="no">gtsam/inference/Factor.h</includes>
    <includes id="a00062" name="OptionalJacobian.h" local="no" imported="no">gtsam/base/OptionalJacobian.h</includes>
    <class kind="class">gtsam::NonlinearFactor</class>
    <class kind="struct">gtsam::traits&lt; NonlinearFactor &gt;</class>
    <class kind="class">gtsam::NoiseModelFactor</class>
    <class kind="class">gtsam::NoiseModelFactor1</class>
    <class kind="class">gtsam::NoiseModelFactor2</class>
    <class kind="class">gtsam::NoiseModelFactor3</class>
    <class kind="class">gtsam::NoiseModelFactor4</class>
    <class kind="class">gtsam::NoiseModelFactor5</class>
    <class kind="class">gtsam::NoiseModelFactor6</class>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>NonlinearFactorGraph.cpp</name>
    <path>/Users/dellaert/git/github/gtsam/nonlinear/</path>
    <filename>a01004.html</filename>
    <includes id="a00404" name="Pose2.h" local="no" imported="no">gtsam/geometry/Pose2.h</includes>
    <includes id="a00350" name="Pose3.h" local="no" imported="no">gtsam/geometry/Pose3.h</includes>
    <includes id="a01226" name="SymbolicFactorGraph.h" local="no" imported="no">gtsam/symbolic/SymbolicFactorGraph.h</includes>
    <includes id="a00944" name="Values.h" local="no" imported="no">gtsam/nonlinear/Values.h</includes>
    <includes id="a00962" name="NonlinearFactorGraph.h" local="no" imported="no">gtsam/nonlinear/NonlinearFactorGraph.h</includes>
    <includes id="a00677" name="GaussianFactorGraph.h" local="no" imported="no">gtsam/linear/GaussianFactorGraph.h</includes>
    <includes id="a00755" name="linearExceptions.h" local="no" imported="no">gtsam/linear/linearExceptions.h</includes>
    <includes id="a00749" name="VectorValues.h" local="no" imported="no">gtsam/linear/VectorValues.h</includes>
    <includes id="a00521" name="Ordering.h" local="no" imported="no">gtsam/inference/Ordering.h</includes>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>NonlinearFactorGraph.h</name>
    <path>/Users/dellaert/git/github/gtsam/nonlinear/</path>
    <filename>a00962.html</filename>
    <includes id="a00380" name="Point2.h" local="no" imported="no">gtsam/geometry/Point2.h</includes>
    <includes id="a01022" name="NonlinearFactor.h" local="no" imported="no">gtsam/nonlinear/NonlinearFactor.h</includes>
    <includes id="a00470" name="FactorGraph.h" local="no" imported="no">gtsam/inference/FactorGraph.h</includes>
    <includes id="a08982" name="PriorFactor.h" local="no" imported="no">gtsam/nonlinear/PriorFactor.h</includes>
    <class kind="struct">gtsam::GraphvizFormatting</class>
    <class kind="class">gtsam::NonlinearFactorGraph</class>
    <class kind="struct">gtsam::traits&lt; NonlinearFactorGraph &gt;</class>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>NonlinearISAM.h</name>
    <path>/Users/dellaert/git/github/gtsam/nonlinear/</path>
    <filename>a00935.html</filename>
    <includes id="a00962" name="NonlinearFactorGraph.h" local="no" imported="no">gtsam/nonlinear/NonlinearFactorGraph.h</includes>
    <class kind="class">gtsam::NonlinearISAM</class>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>NonlinearOptimizer.cpp</name>
    <path>/Users/dellaert/git/github/gtsam/nonlinear/</path>
    <filename>a00968.html</filename>
    <includes id="a00974" name="NonlinearOptimizer.h" local="no" imported="no">gtsam/nonlinear/NonlinearOptimizer.h</includes>
    <includes id="a00581" name="GaussianEliminationTree.h" local="no" imported="no">gtsam/linear/GaussianEliminationTree.h</includes>
    <includes id="a00749" name="VectorValues.h" local="no" imported="no">gtsam/linear/VectorValues.h</includes>
    <includes id="a00623" name="SubgraphSolver.h" local="no" imported="no">gtsam/linear/SubgraphSolver.h</includes>
    <includes id="a00677" name="GaussianFactorGraph.h" local="no" imported="no">gtsam/linear/GaussianFactorGraph.h</includes>
    <includes id="a00521" name="Ordering.h" local="no" imported="no">gtsam/inference/Ordering.h</includes>
    <namespace>gtsam</namespace>
    <member kind="function">
      <type>bool</type>
      <name>checkConvergence</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>a3382482454c164c6f5817dcbe6f932b3</anchor>
      <arglist>(double relativeErrorTreshold, double absoluteErrorTreshold, double errorThreshold, double currentError, double newError, NonlinearOptimizerParams::Verbosity verbosity=NonlinearOptimizerParams::SILENT)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>NonlinearOptimizer.h</name>
    <path>/Users/dellaert/git/github/gtsam/nonlinear/</path>
    <filename>a00974.html</filename>
    <includes id="a00962" name="NonlinearFactorGraph.h" local="no" imported="no">gtsam/nonlinear/NonlinearFactorGraph.h</includes>
    <includes id="a00950" name="NonlinearOptimizerParams.h" local="no" imported="no">gtsam/nonlinear/NonlinearOptimizerParams.h</includes>
    <class kind="class">gtsam::NonlinearOptimizer</class>
    <namespace>gtsam</namespace>
    <member kind="function">
      <type>bool</type>
      <name>checkConvergence</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>a3382482454c164c6f5817dcbe6f932b3</anchor>
      <arglist>(double relativeErrorTreshold, double absoluteErrorTreshold, double errorThreshold, double currentError, double newError, NonlinearOptimizerParams::Verbosity verbosity=NonlinearOptimizerParams::SILENT)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>NonlinearOptimizerParams.cpp</name>
    <path>/Users/dellaert/git/github/gtsam/nonlinear/</path>
    <filename>a00995.html</filename>
    <includes id="a00950" name="NonlinearOptimizerParams.h" local="no" imported="no">gtsam/nonlinear/NonlinearOptimizerParams.h</includes>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>NonlinearOptimizerParams.h</name>
    <path>/Users/dellaert/git/github/gtsam/nonlinear/</path>
    <filename>a00950.html</filename>
    <includes id="a00677" name="GaussianFactorGraph.h" local="no" imported="no">gtsam/linear/GaussianFactorGraph.h</includes>
    <includes id="a00623" name="SubgraphSolver.h" local="no" imported="no">gtsam/linear/SubgraphSolver.h</includes>
    <class kind="class">gtsam::NonlinearOptimizerParams</class>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>PriorFactor.h</name>
    <path>/Users/dellaert/git/github/gtsam/nonlinear/</path>
    <filename>a08982.html</filename>
    <includes id="a01022" name="NonlinearFactor.h" local="no" imported="no">gtsam/nonlinear/NonlinearFactor.h</includes>
    <includes id="a00101" name="Testable.h" local="no" imported="no">gtsam/base/Testable.h</includes>
    <class kind="class">gtsam::PriorFactor</class>
    <class kind="struct">gtsam::traits&lt; PriorFactor&lt; VALUE &gt; &gt;</class>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>PriorFactor.h</name>
    <path>/Users/dellaert/git/github/gtsam/slam/</path>
    <filename>a08985.html</filename>
    <includes id="a08982" name="PriorFactor.h" local="no" imported="no">gtsam/nonlinear/PriorFactor.h</includes>
  </compound>
  <compound kind="file">
    <name>Values.h</name>
    <path>/Users/dellaert/git/github/gtsam/nonlinear/</path>
    <filename>a00944.html</filename>
    <includes id="a00005" name="FastDefaultAllocator.h" local="no" imported="no">gtsam/base/FastDefaultAllocator.h</includes>
    <includes id="a00491" name="Key.h" local="no" imported="no">gtsam/inference/Key.h</includes>
    <class kind="class">gtsam::ValueCloneAllocator</class>
    <class kind="class">gtsam::Values</class>
    <class kind="struct">gtsam::Values::KeyValuePair</class>
    <class kind="struct">gtsam::Values::ConstKeyValuePair</class>
    <class kind="class">gtsam::ValuesKeyAlreadyExists</class>
    <class kind="class">gtsam::ValuesKeyDoesNotExist</class>
    <class kind="class">gtsam::ValuesIncorrectType</class>
    <class kind="class">gtsam::DynamicValuesMismatched</class>
    <class kind="class">gtsam::NoMatchFoundForFixed</class>
    <class kind="struct">gtsam::traits&lt; Values &gt;</class>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>WhiteNoiseFactor.h</name>
    <path>/Users/dellaert/git/github/gtsam/nonlinear/</path>
    <filename>a00971.html</filename>
    <includes id="a01022" name="NonlinearFactor.h" local="no" imported="no">gtsam/nonlinear/NonlinearFactor.h</includes>
    <includes id="a00614" name="HessianFactor.h" local="no" imported="no">gtsam/linear/HessianFactor.h</includes>
    <class kind="class">gtsam::WhiteNoiseFactor</class>
    <namespace>gtsam</namespace>
    <member kind="variable">
      <type>const double</type>
      <name>logSqrt2PI</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>ad5602eb85d05df6cba60e47eebbd3636</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>precompiled_header.cpp</name>
    <path>/Users/dellaert/git/github/gtsam/</path>
    <filename>a01253.html</filename>
    <includes id="a01250" name="precompiled_header.h" local="yes" imported="no">precompiled_header.h</includes>
  </compound>
  <compound kind="file">
    <name>precompiled_header.h</name>
    <path>/Users/dellaert/git/github/gtsam/</path>
    <filename>a01250.html</filename>
    <includes id="a00131" name="Lie.h" local="no" imported="no">gtsam/base/Lie.h</includes>
    <includes id="a00122" name="cholesky.h" local="no" imported="no">gtsam/base/cholesky.h</includes>
    <includes id="a00011" name="debug.h" local="no" imported="no">gtsam/base/debug.h</includes>
    <includes id="a00059" name="DSFVector.h" local="no" imported="no">gtsam/base/DSFVector.h</includes>
    <includes id="a00005" name="FastDefaultAllocator.h" local="no" imported="no">gtsam/base/FastDefaultAllocator.h</includes>
    <includes id="a00023" name="FastList.h" local="no" imported="no">gtsam/base/FastList.h</includes>
    <includes id="a00047" name="FastMap.h" local="no" imported="no">gtsam/base/FastMap.h</includes>
    <includes id="a00080" name="FastSet.h" local="no" imported="no">gtsam/base/FastSet.h</includes>
    <includes id="a00002" name="FastVector.h" local="no" imported="no">gtsam/base/FastVector.h</includes>
    <includes id="a00086" name="Group.h" local="no" imported="no">gtsam/base/Group.h</includes>
    <includes id="a00143" name="lieProxies.h" local="no" imported="no">gtsam/base/lieProxies.h</includes>
    <includes id="a00110" name="Manifold.h" local="no" imported="no">gtsam/base/Manifold.h</includes>
    <includes id="a00050" name="Matrix.h" local="no" imported="no">gtsam/base/Matrix.h</includes>
    <includes id="a00062" name="OptionalJacobian.h" local="no" imported="no">gtsam/base/OptionalJacobian.h</includes>
    <includes id="a00044" name="ProductLieGroup.h" local="no" imported="no">gtsam/base/ProductLieGroup.h</includes>
    <includes id="a08943" name="serialization.h" local="no" imported="no">gtsam/base/serialization.h</includes>
    <includes id="a00053" name="serializationTestHelpers.h" local="no" imported="no">gtsam/base/serializationTestHelpers.h</includes>
    <includes id="a00083" name="SymmetricBlockMatrix.h" local="no" imported="no">gtsam/base/SymmetricBlockMatrix.h</includes>
    <includes id="a00101" name="Testable.h" local="no" imported="no">gtsam/base/Testable.h</includes>
    <includes id="a00014" name="TestableAssertions.h" local="no" imported="no">gtsam/base/TestableAssertions.h</includes>
    <includes id="a00071" name="ThreadsafeException.h" local="no" imported="no">gtsam/base/ThreadsafeException.h</includes>
    <includes id="a00035" name="timing.h" local="no" imported="no">gtsam/base/timing.h</includes>
    <includes id="a00020" name="types.h" local="no" imported="no">gtsam/base/types.h</includes>
    <includes id="a00056" name="Value.h" local="no" imported="no">gtsam/base/Value.h</includes>
    <includes id="a00134" name="Vector.h" local="no" imported="no">gtsam/base/Vector.h</includes>
    <includes id="a00074" name="VerticalBlockMatrix.h" local="no" imported="no">gtsam/base/VerticalBlockMatrix.h</includes>
  </compound>
  <compound kind="file">
    <name>BearingFactor.h</name>
    <path>/Users/dellaert/git/github/gtsam/sam/</path>
    <filename>a08988.html</filename>
    <class kind="struct">gtsam::BearingFactor</class>
    <class kind="struct">gtsam::traits&lt; BearingFactor&lt; A1, A2, T &gt; &gt;</class>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>BearingRangeFactor.h</name>
    <path>/Users/dellaert/git/github/gtsam/sam/</path>
    <filename>a08994.html</filename>
    <includes id="a00401" name="BearingRange.h" local="no" imported="no">gtsam/geometry/BearingRange.h</includes>
    <class kind="class">gtsam::BearingRangeFactor</class>
    <class kind="struct">gtsam::traits&lt; BearingRangeFactor&lt; A1, A2, B, R &gt; &gt;</class>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>RangeFactor.h</name>
    <path>/Users/dellaert/git/github/gtsam/sam/</path>
    <filename>a09000.html</filename>
    <class kind="class">gtsam::RangeFactor</class>
    <class kind="struct">gtsam::traits&lt; RangeFactor&lt; A1, A2, T &gt; &gt;</class>
    <class kind="class">gtsam::RangeFactorWithTransform</class>
    <class kind="struct">gtsam::traits&lt; RangeFactorWithTransform&lt; A1, A2, T &gt; &gt;</class>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>BinaryMeasurement.h</name>
    <path>/Users/dellaert/git/github/gtsam/sfm/</path>
    <filename>a01061.html</filename>
    <includes id="a00101" name="Testable.h" local="no" imported="no">gtsam/base/Testable.h</includes>
    <includes id="a00515" name="Factor.h" local="no" imported="no">gtsam/inference/Factor.h</includes>
    <includes id="a00491" name="Key.h" local="no" imported="no">gtsam/inference/Key.h</includes>
    <includes id="a00620" name="NoiseModel.h" local="no" imported="no">gtsam/linear/NoiseModel.h</includes>
    <class kind="class">gtsam::BinaryMeasurement</class>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>MFAS.cpp</name>
    <path>/Users/dellaert/git/github/gtsam/sfm/</path>
    <filename>a01079.html</filename>
    <includes id="a01064" name="MFAS.h" local="no" imported="no">gtsam/sfm/MFAS.h</includes>
  </compound>
  <compound kind="file">
    <name>MFAS.h</name>
    <path>/Users/dellaert/git/github/gtsam/sfm/</path>
    <filename>a01064.html</filename>
    <includes id="a00491" name="Key.h" local="no" imported="no">gtsam/inference/Key.h</includes>
    <includes id="a01061" name="BinaryMeasurement.h" local="no" imported="no">gtsam/sfm/BinaryMeasurement.h</includes>
    <class kind="class">gtsam::MFAS</class>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>ShonanAveraging.cpp</name>
    <path>/Users/dellaert/git/github/gtsam/sfm/</path>
    <filename>a01058.html</filename>
    <includes id="a00701" name="SubgraphPreconditioner.h" local="no" imported="no">gtsam/linear/SubgraphPreconditioner.h</includes>
    <includes id="a00989" name="LevenbergMarquardtOptimizer.h" local="no" imported="no">gtsam/nonlinear/LevenbergMarquardtOptimizer.h</includes>
    <includes id="a00962" name="NonlinearFactorGraph.h" local="no" imported="no">gtsam/nonlinear/NonlinearFactorGraph.h</includes>
    <includes id="a01055" name="ShonanAveraging.h" local="no" imported="no">gtsam/sfm/ShonanAveraging.h</includes>
    <includes id="a01067" name="ShonanFactor.h" local="no" imported="no">gtsam/sfm/ShonanFactor.h</includes>
    <includes id="a01076" name="ShonanGaugeFactor.h" local="no" imported="no">gtsam/sfm/ShonanGaugeFactor.h</includes>
    <includes id="a01106" name="FrobeniusFactor.h" local="no" imported="no">gtsam/slam/FrobeniusFactor.h</includes>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>ShonanAveraging.h</name>
    <path>/Users/dellaert/git/github/gtsam/sfm/</path>
    <filename>a01055.html</filename>
    <includes id="a00050" name="Matrix.h" local="no" imported="no">gtsam/base/Matrix.h</includes>
    <includes id="a00134" name="Vector.h" local="no" imported="no">gtsam/base/Vector.h</includes>
    <includes id="a00281" name="Rot2.h" local="no" imported="no">gtsam/geometry/Rot2.h</includes>
    <includes id="a00422" name="Rot3.h" local="no" imported="no">gtsam/geometry/Rot3.h</includes>
    <includes id="a00749" name="VectorValues.h" local="no" imported="no">gtsam/linear/VectorValues.h</includes>
    <includes id="a00983" name="LevenbergMarquardtParams.h" local="no" imported="no">gtsam/nonlinear/LevenbergMarquardtParams.h</includes>
    <includes id="a01061" name="BinaryMeasurement.h" local="no" imported="no">gtsam/sfm/BinaryMeasurement.h</includes>
    <includes id="a00617" name="PowerMethod.h" local="no" imported="no">gtsam/linear/PowerMethod.h</includes>
    <includes id="a00599" name="AcceleratedPowerMethod.h" local="no" imported="no">gtsam/linear/AcceleratedPowerMethod.h</includes>
    <includes id="a01133" name="dataset.h" local="no" imported="no">gtsam/slam/dataset.h</includes>
    <class kind="struct">gtsam::ShonanAveragingParameters</class>
    <class kind="class">gtsam::ShonanAveraging</class>
    <class kind="class">gtsam::ShonanAveraging2</class>
    <class kind="class">gtsam::ShonanAveraging3</class>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>ShonanFactor.h</name>
    <path>/Users/dellaert/git/github/gtsam/sfm/</path>
    <filename>a01067.html</filename>
    <includes id="a00281" name="Rot2.h" local="no" imported="no">gtsam/geometry/Rot2.h</includes>
    <includes id="a00422" name="Rot3.h" local="no" imported="no">gtsam/geometry/Rot3.h</includes>
    <includes id="a00272" name="SOn.h" local="no" imported="no">gtsam/geometry/SOn.h</includes>
    <includes id="a01022" name="NonlinearFactor.h" local="no" imported="no">gtsam/nonlinear/NonlinearFactor.h</includes>
    <class kind="class">gtsam::ShonanFactor</class>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>ShonanGaugeFactor.h</name>
    <path>/Users/dellaert/git/github/gtsam/sfm/</path>
    <filename>a01076.html</filename>
    <includes id="a00272" name="SOn.h" local="no" imported="no">gtsam/geometry/SOn.h</includes>
    <includes id="a00593" name="JacobianFactor.h" local="no" imported="no">gtsam/linear/JacobianFactor.h</includes>
    <includes id="a01022" name="NonlinearFactor.h" local="no" imported="no">gtsam/nonlinear/NonlinearFactor.h</includes>
    <class kind="class">gtsam::ShonanGaugeFactor</class>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>TranslationFactor.h</name>
    <path>/Users/dellaert/git/github/gtsam/sfm/</path>
    <filename>a01082.html</filename>
    <includes id="a00311" name="Point3.h" local="no" imported="no">gtsam/geometry/Point3.h</includes>
    <includes id="a00620" name="NoiseModel.h" local="no" imported="no">gtsam/linear/NoiseModel.h</includes>
    <includes id="a01022" name="NonlinearFactor.h" local="no" imported="no">gtsam/nonlinear/NonlinearFactor.h</includes>
    <class kind="class">gtsam::TranslationFactor</class>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>TranslationRecovery.cpp</name>
    <path>/Users/dellaert/git/github/gtsam/sfm/</path>
    <filename>a01073.html</filename>
    <includes id="a00113" name="DSFMap.h" local="no" imported="no">gtsam/base/DSFMap.h</includes>
    <includes id="a00311" name="Point3.h" local="no" imported="no">gtsam/geometry/Point3.h</includes>
    <includes id="a00350" name="Pose3.h" local="no" imported="no">gtsam/geometry/Pose3.h</includes>
    <includes id="a00620" name="NoiseModel.h" local="no" imported="no">gtsam/linear/NoiseModel.h</includes>
    <includes id="a00989" name="LevenbergMarquardtOptimizer.h" local="no" imported="no">gtsam/nonlinear/LevenbergMarquardtOptimizer.h</includes>
    <includes id="a01022" name="NonlinearFactor.h" local="no" imported="no">gtsam/nonlinear/NonlinearFactor.h</includes>
    <includes id="a00962" name="NonlinearFactorGraph.h" local="no" imported="no">gtsam/nonlinear/NonlinearFactorGraph.h</includes>
    <includes id="a00944" name="Values.h" local="no" imported="no">gtsam/nonlinear/Values.h</includes>
    <includes id="a01082" name="TranslationFactor.h" local="no" imported="no">gtsam/sfm/TranslationFactor.h</includes>
    <includes id="a01052" name="TranslationRecovery.h" local="no" imported="no">gtsam/sfm/TranslationRecovery.h</includes>
    <includes id="a08985" name="PriorFactor.h" local="no" imported="no">gtsam/slam/PriorFactor.h</includes>
  </compound>
  <compound kind="file">
    <name>TranslationRecovery.h</name>
    <path>/Users/dellaert/git/github/gtsam/sfm/</path>
    <filename>a01052.html</filename>
    <includes id="a00989" name="LevenbergMarquardtOptimizer.h" local="no" imported="no">gtsam/nonlinear/LevenbergMarquardtOptimizer.h</includes>
    <includes id="a00944" name="Values.h" local="no" imported="no">gtsam/nonlinear/Values.h</includes>
    <includes id="a01061" name="BinaryMeasurement.h" local="no" imported="no">gtsam/sfm/BinaryMeasurement.h</includes>
    <class kind="class">gtsam::TranslationRecovery</class>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>AntiFactor.h</name>
    <path>/Users/dellaert/git/github/gtsam/slam/</path>
    <filename>a01184.html</filename>
    <includes id="a01022" name="NonlinearFactor.h" local="no" imported="no">gtsam/nonlinear/NonlinearFactor.h</includes>
    <includes id="a00719" name="GaussianFactor.h" local="no" imported="no">gtsam/linear/GaussianFactor.h</includes>
    <class kind="class">gtsam::AntiFactor</class>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>BetweenFactor.h</name>
    <path>/Users/dellaert/git/github/gtsam/slam/</path>
    <filename>a01175.html</filename>
    <includes id="a00101" name="Testable.h" local="no" imported="no">gtsam/base/Testable.h</includes>
    <includes id="a00131" name="Lie.h" local="no" imported="no">gtsam/base/Lie.h</includes>
    <includes id="a01022" name="NonlinearFactor.h" local="no" imported="no">gtsam/nonlinear/NonlinearFactor.h</includes>
    <class kind="class">gtsam::BetweenFactor</class>
    <class kind="struct">gtsam::traits&lt; BetweenFactor&lt; VALUE &gt; &gt;</class>
    <class kind="class">gtsam::BetweenConstraint</class>
    <class kind="struct">gtsam::traits&lt; BetweenConstraint&lt; VALUE &gt; &gt;</class>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>BoundingConstraint.h</name>
    <path>/Users/dellaert/git/github/gtsam/slam/</path>
    <filename>a01139.html</filename>
    <includes id="a00131" name="Lie.h" local="no" imported="no">gtsam/base/Lie.h</includes>
    <includes id="a01022" name="NonlinearFactor.h" local="no" imported="no">gtsam/nonlinear/NonlinearFactor.h</includes>
    <class kind="struct">gtsam::BoundingConstraint1</class>
    <class kind="struct">gtsam::BoundingConstraint2</class>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>dataset.cpp</name>
    <path>/Users/dellaert/git/github/gtsam/slam/</path>
    <filename>a01178.html</filename>
    <includes id="a08994" name="BearingRangeFactor.h" local="no" imported="no">gtsam/sam/BearingRangeFactor.h</includes>
    <includes id="a01175" name="BetweenFactor.h" local="no" imported="no">gtsam/slam/BetweenFactor.h</includes>
    <includes id="a01133" name="dataset.h" local="no" imported="no">gtsam/slam/dataset.h</includes>
    <includes id="a00311" name="Point3.h" local="no" imported="no">gtsam/geometry/Point3.h</includes>
    <includes id="a00404" name="Pose2.h" local="no" imported="no">gtsam/geometry/Pose2.h</includes>
    <includes id="a00422" name="Rot3.h" local="no" imported="no">gtsam/geometry/Rot3.h</includes>
    <includes id="a01022" name="NonlinearFactor.h" local="no" imported="no">gtsam/nonlinear/NonlinearFactor.h</includes>
    <includes id="a00605" name="Sampler.h" local="no" imported="no">gtsam/linear/Sampler.h</includes>
    <includes id="a00470" name="FactorGraph.h" local="no" imported="no">gtsam/inference/FactorGraph.h</includes>
    <includes id="a08955" name="Symbol.h" local="no" imported="no">gtsam/inference/Symbol.h</includes>
    <includes id="a00131" name="Lie.h" local="no" imported="no">gtsam/base/Lie.h</includes>
    <includes id="a00050" name="Matrix.h" local="no" imported="no">gtsam/base/Matrix.h</includes>
    <includes id="a00056" name="Value.h" local="no" imported="no">gtsam/base/Value.h</includes>
    <includes id="a00134" name="Vector.h" local="no" imported="no">gtsam/base/Vector.h</includes>
    <includes id="a00020" name="types.h" local="no" imported="no">gtsam/base/types.h</includes>
    <namespace>gtsam</namespace>
    <member kind="function">
      <type>string</type>
      <name>findExampleDataFile</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>aef971b2c69845e4fcce707306703c7b8</anchor>
      <arglist>(const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>string</type>
      <name>createRewrittenFileName</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>adbe09e573771fd72b08069353d537725</anchor>
      <arglist>(const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>boost::optional&lt; IndexedPose &gt;</type>
      <name>parseVertexPose</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>abfc0157e4790e3b03dc601d3e86c684d</anchor>
      <arglist>(std::istream &amp;is, const std::string &amp;tag)</arglist>
    </member>
    <member kind="function">
      <type>boost::optional&lt; IndexedLandmark &gt;</type>
      <name>parseVertexLandmark</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>a961e0398bbfc2504c62fdaad70472418</anchor>
      <arglist>(std::istream &amp;is, const std::string &amp;tag)</arglist>
    </member>
    <member kind="function">
      <type>boost::optional&lt; IndexedEdge &gt;</type>
      <name>parseEdge</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>abc8bb9db0893652e8b5e7b47782ec990</anchor>
      <arglist>(std::istream &amp;is, const std::string &amp;tag)</arglist>
    </member>
    <member kind="function">
      <type>GraphAndValues</type>
      <name>load2D</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>a635ec096b94adc2b05f081cd07eb2c0f</anchor>
      <arglist>(const std::string &amp;filename, SharedNoiseModel model=SharedNoiseModel(), size_t maxIndex=0, bool addNoise=false, bool smart=true, NoiseFormat noiseFormat=NoiseFormatAUTO, KernelFunctionType kernelFunctionType=KernelFunctionTypeNONE)</arglist>
    </member>
    <member kind="function">
      <type>GraphAndValues</type>
      <name>load2D</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>a79f6cde1c018ea0f4ca3c7fc83123a14</anchor>
      <arglist>(pair&lt; string, SharedNoiseModel &gt; dataset, size_t maxIndex, bool addNoise, bool smart, NoiseFormat noiseFormat, KernelFunctionType kernelFunctionType)</arglist>
    </member>
    <member kind="function">
      <type>GraphAndValues</type>
      <name>load2D_robust</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>abc118b53bf98ad0d0a33bdc107fbefc8</anchor>
      <arglist>(const string &amp;filename, const noiseModel::Base::shared_ptr &amp;model, size_t maxIndex)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>save2D</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>acfe516bc2d9ca4cc4530dd3b8460ce3d</anchor>
      <arglist>(const NonlinearFactorGraph &amp;graph, const Values &amp;config, const noiseModel::Diagonal::shared_ptr model, const std::string &amp;filename)</arglist>
    </member>
    <member kind="function">
      <type>GraphAndValues</type>
      <name>readG2o</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>a71d086efc70f4af31d3c3b00dde4f7c0</anchor>
      <arglist>(const std::string &amp;g2oFile, const bool is3D=false, KernelFunctionType kernelFunctionType=KernelFunctionTypeNONE)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>writeG2o</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>a68bc584d72da3747666ac134a9490f92</anchor>
      <arglist>(const NonlinearFactorGraph &amp;graph, const Values &amp;estimate, const std::string &amp;filename)</arglist>
    </member>
    <member kind="function">
      <type>GraphAndValues</type>
      <name>load3D</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>ac96511703a91071d7b2033976f9739c3</anchor>
      <arglist>(const std::string &amp;filename)</arglist>
    </member>
    <member kind="function">
      <type>Pose3</type>
      <name>openGL2gtsam</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>ade6eca65dc0168a65f641961ca97924c</anchor>
      <arglist>(const Rot3 &amp;R, double tx, double ty, double tz)</arglist>
    </member>
    <member kind="function">
      <type>Pose3</type>
      <name>gtsam2openGL</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>aaff07ef70e6161c4d1d2bd7546ff91e6</anchor>
      <arglist>(const Rot3 &amp;R, double tx, double ty, double tz)</arglist>
    </member>
    <member kind="function">
      <type>Pose3</type>
      <name>gtsam2openGL</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>ad632ed56581bf174eef379bbe272a06a</anchor>
      <arglist>(const Pose3 &amp;PoseGTSAM)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>readBundler</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>a37c2d071b98678ae281d0b48bee98b30</anchor>
      <arglist>(const std::string &amp;filename, SfmData &amp;data)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>readBAL</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>af170fa38edc21cf9c26c2c6937388ec0</anchor>
      <arglist>(const std::string &amp;filename, SfmData &amp;data)</arglist>
    </member>
    <member kind="function">
      <type>SfmData</type>
      <name>readBal</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>a710ec0322f4a2c0883841b58516b7a6a</anchor>
      <arglist>(const std::string &amp;filename)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>writeBAL</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>aea6d4511beb8fd046f0d9f430d17d396</anchor>
      <arglist>(const std::string &amp;filename, SfmData &amp;data)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>writeBALfromValues</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>a71a14a1609cd7dd26106cca1345ec958</anchor>
      <arglist>(const std::string &amp;filename, const SfmData &amp;data, Values &amp;values)</arglist>
    </member>
    <member kind="function">
      <type>Values</type>
      <name>initialCamerasEstimate</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>ad8b55993353cbab0fde06b872783fe92</anchor>
      <arglist>(const SfmData &amp;db)</arglist>
    </member>
    <member kind="function">
      <type>Values</type>
      <name>initialCamerasAndPointsEstimate</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>aba34ed4a103d9057536ee5cac27cfdef</anchor>
      <arglist>(const SfmData &amp;db)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>dataset.h</name>
    <path>/Users/dellaert/git/github/gtsam/slam/</path>
    <filename>a01133.html</filename>
    <includes id="a01061" name="BinaryMeasurement.h" local="no" imported="no">gtsam/sfm/BinaryMeasurement.h</includes>
    <includes id="a01175" name="BetweenFactor.h" local="no" imported="no">gtsam/slam/BetweenFactor.h</includes>
    <includes id="a00332" name="Cal3Bundler.h" local="no" imported="no">gtsam/geometry/Cal3Bundler.h</includes>
    <includes id="a00314" name="PinholeCamera.h" local="no" imported="no">gtsam/geometry/PinholeCamera.h</includes>
    <includes id="a00404" name="Pose2.h" local="no" imported="no">gtsam/geometry/Pose2.h</includes>
    <includes id="a00350" name="Pose3.h" local="no" imported="no">gtsam/geometry/Pose3.h</includes>
    <includes id="a00962" name="NonlinearFactorGraph.h" local="no" imported="no">gtsam/nonlinear/NonlinearFactorGraph.h</includes>
    <includes id="a00944" name="Values.h" local="no" imported="no">gtsam/nonlinear/Values.h</includes>
    <includes id="a00620" name="NoiseModel.h" local="no" imported="no">gtsam/linear/NoiseModel.h</includes>
    <includes id="a08943" name="serialization.h" local="no" imported="no">gtsam/base/serialization.h</includes>
    <includes id="a00101" name="Testable.h" local="no" imported="no">gtsam/base/Testable.h</includes>
    <includes id="a00020" name="types.h" local="no" imported="no">gtsam/base/types.h</includes>
    <class kind="struct">gtsam::SfmTrack</class>
    <class kind="struct">gtsam::traits&lt; SfmTrack &gt;</class>
    <class kind="struct">gtsam::SfmData</class>
    <class kind="struct">gtsam::traits&lt; SfmData &gt;</class>
    <namespace>gtsam</namespace>
    <member kind="typedef">
      <type>std::pair&lt; size_t, Pose2 &gt;</type>
      <name>IndexedPose</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>a6ab764d13f9aaeafc2dc60763b05ec0e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::pair&lt; NonlinearFactorGraph::shared_ptr, Values::shared_ptr &gt;</type>
      <name>GraphAndValues</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>abcc5d1ec05ddc954d5de28929acabbdf</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::pair&lt; size_t, Point2 &gt;</type>
      <name>SfmMeasurement</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>a9ad7940245bbbf4bf25d1dc4690b0108</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::pair&lt; size_t, size_t &gt;</type>
      <name>SiftIndex</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>a21a02e01a9608ce6cade24c1366b208c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>PinholeCamera&lt; Cal3Bundler &gt;</type>
      <name>SfmCamera</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>acab0207730cf78822bdf274b50739d31</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>NoiseFormat</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>a90552b70a2da9c74595cae4b05c2ce18</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NoiseFormatG2O</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>a90552b70a2da9c74595cae4b05c2ce18ad0aaa5c51a45cb7c9151aae60a603209</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NoiseFormatTORO</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>a90552b70a2da9c74595cae4b05c2ce18a3790bc2c6f11cd7da84730b33173de5a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NoiseFormatGRAPH</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>a90552b70a2da9c74595cae4b05c2ce18a1f8edeb25c58a249789556c686265a4c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NoiseFormatCOV</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>a90552b70a2da9c74595cae4b05c2ce18a5450a16f3522214ccdfa23c461e7d05a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NoiseFormatAUTO</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>a90552b70a2da9c74595cae4b05c2ce18a2f9067b8f5bd2d0dd38c49326a4c070e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>KernelFunctionType</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>a8be373f34edc0a9d28b1bfab5dd62ba0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>string</type>
      <name>findExampleDataFile</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>aef971b2c69845e4fcce707306703c7b8</anchor>
      <arglist>(const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>string</type>
      <name>createRewrittenFileName</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>adbe09e573771fd72b08069353d537725</anchor>
      <arglist>(const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>GTSAM_EXPORT std::map&lt; size_t, T &gt;</type>
      <name>parseVariables</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>a683ab6a83b5b3e508e734a7089986838</anchor>
      <arglist>(const std::string &amp;filename, size_t maxIndex=0)</arglist>
    </member>
    <member kind="function">
      <type>GTSAM_EXPORT std::vector&lt; BinaryMeasurement&lt; T &gt; &gt;</type>
      <name>parseMeasurements</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>a6eb4817b97658f00e426b753c52361ed</anchor>
      <arglist>(const std::string &amp;filename, const noiseModel::Diagonal::shared_ptr &amp;model=nullptr, size_t maxIndex=0)</arglist>
    </member>
    <member kind="function">
      <type>GTSAM_EXPORT std::vector&lt; typename BetweenFactor&lt; T &gt;::shared_ptr &gt;</type>
      <name>parseFactors</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>a8a2136a163e31faaefe2db498a9b9b43</anchor>
      <arglist>(const std::string &amp;filename, const noiseModel::Diagonal::shared_ptr &amp;model=nullptr, size_t maxIndex=0)</arglist>
    </member>
    <member kind="function">
      <type>boost::optional&lt; IndexedPose &gt;</type>
      <name>parseVertexPose</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>abfc0157e4790e3b03dc601d3e86c684d</anchor>
      <arglist>(std::istream &amp;is, const std::string &amp;tag)</arglist>
    </member>
    <member kind="function">
      <type>boost::optional&lt; IndexedLandmark &gt;</type>
      <name>parseVertexLandmark</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>a961e0398bbfc2504c62fdaad70472418</anchor>
      <arglist>(std::istream &amp;is, const std::string &amp;tag)</arglist>
    </member>
    <member kind="function">
      <type>boost::optional&lt; IndexedEdge &gt;</type>
      <name>parseEdge</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>abc8bb9db0893652e8b5e7b47782ec990</anchor>
      <arglist>(std::istream &amp;is, const std::string &amp;tag)</arglist>
    </member>
    <member kind="function">
      <type>GTSAM_EXPORT GraphAndValues</type>
      <name>load2D</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>a6f8d49b13ccc0e007a5e7572286d5854</anchor>
      <arglist>(std::pair&lt; std::string, SharedNoiseModel &gt; dataset, size_t maxIndex=0, bool addNoise=false, bool smart=true, NoiseFormat noiseFormat=NoiseFormatAUTO, KernelFunctionType kernelFunctionType=KernelFunctionTypeNONE)</arglist>
    </member>
    <member kind="function">
      <type>GraphAndValues</type>
      <name>load2D</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>a635ec096b94adc2b05f081cd07eb2c0f</anchor>
      <arglist>(const std::string &amp;filename, SharedNoiseModel model=SharedNoiseModel(), size_t maxIndex=0, bool addNoise=false, bool smart=true, NoiseFormat noiseFormat=NoiseFormatAUTO, KernelFunctionType kernelFunctionType=KernelFunctionTypeNONE)</arglist>
    </member>
    <member kind="function">
      <type>GraphAndValues</type>
      <name>load2D_robust</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>abc118b53bf98ad0d0a33bdc107fbefc8</anchor>
      <arglist>(const string &amp;filename, const noiseModel::Base::shared_ptr &amp;model, size_t maxIndex)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>save2D</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>acfe516bc2d9ca4cc4530dd3b8460ce3d</anchor>
      <arglist>(const NonlinearFactorGraph &amp;graph, const Values &amp;config, const noiseModel::Diagonal::shared_ptr model, const std::string &amp;filename)</arglist>
    </member>
    <member kind="function">
      <type>GraphAndValues</type>
      <name>readG2o</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>a71d086efc70f4af31d3c3b00dde4f7c0</anchor>
      <arglist>(const std::string &amp;g2oFile, const bool is3D=false, KernelFunctionType kernelFunctionType=KernelFunctionTypeNONE)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>writeG2o</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>a68bc584d72da3747666ac134a9490f92</anchor>
      <arglist>(const NonlinearFactorGraph &amp;graph, const Values &amp;estimate, const std::string &amp;filename)</arglist>
    </member>
    <member kind="function">
      <type>GraphAndValues</type>
      <name>load3D</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>ac96511703a91071d7b2033976f9739c3</anchor>
      <arglist>(const std::string &amp;filename)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>readBundler</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>a37c2d071b98678ae281d0b48bee98b30</anchor>
      <arglist>(const std::string &amp;filename, SfmData &amp;data)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>readBAL</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>af170fa38edc21cf9c26c2c6937388ec0</anchor>
      <arglist>(const std::string &amp;filename, SfmData &amp;data)</arglist>
    </member>
    <member kind="function">
      <type>SfmData</type>
      <name>readBal</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>a710ec0322f4a2c0883841b58516b7a6a</anchor>
      <arglist>(const std::string &amp;filename)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>writeBAL</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>aea6d4511beb8fd046f0d9f430d17d396</anchor>
      <arglist>(const std::string &amp;filename, SfmData &amp;data)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>writeBALfromValues</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>a71a14a1609cd7dd26106cca1345ec958</anchor>
      <arglist>(const std::string &amp;filename, const SfmData &amp;data, Values &amp;values)</arglist>
    </member>
    <member kind="function">
      <type>Pose3</type>
      <name>openGL2gtsam</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>ade6eca65dc0168a65f641961ca97924c</anchor>
      <arglist>(const Rot3 &amp;R, double tx, double ty, double tz)</arglist>
    </member>
    <member kind="function">
      <type>Pose3</type>
      <name>gtsam2openGL</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>aaff07ef70e6161c4d1d2bd7546ff91e6</anchor>
      <arglist>(const Rot3 &amp;R, double tx, double ty, double tz)</arglist>
    </member>
    <member kind="function">
      <type>Pose3</type>
      <name>gtsam2openGL</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>ad632ed56581bf174eef379bbe272a06a</anchor>
      <arglist>(const Pose3 &amp;PoseGTSAM)</arglist>
    </member>
    <member kind="function">
      <type>Values</type>
      <name>initialCamerasEstimate</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>ad8b55993353cbab0fde06b872783fe92</anchor>
      <arglist>(const SfmData &amp;db)</arglist>
    </member>
    <member kind="function">
      <type>Values</type>
      <name>initialCamerasAndPointsEstimate</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>aba34ed4a103d9057536ee5cac27cfdef</anchor>
      <arglist>(const SfmData &amp;db)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>EssentialMatrixConstraint.cpp</name>
    <path>/Users/dellaert/git/github/gtsam/slam/</path>
    <filename>a01127.html</filename>
    <includes id="a01094" name="EssentialMatrixConstraint.h" local="no" imported="no">gtsam/slam/EssentialMatrixConstraint.h</includes>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>EssentialMatrixConstraint.h</name>
    <path>/Users/dellaert/git/github/gtsam/slam/</path>
    <filename>a01094.html</filename>
    <includes id="a01022" name="NonlinearFactor.h" local="no" imported="no">gtsam/nonlinear/NonlinearFactor.h</includes>
    <class kind="class">gtsam::EssentialMatrixConstraint</class>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>FrobeniusFactor.cpp</name>
    <path>/Users/dellaert/git/github/gtsam/slam/</path>
    <filename>a01118.html</filename>
    <includes id="a01106" name="FrobeniusFactor.h" local="no" imported="no">gtsam/slam/FrobeniusFactor.h</includes>
    <namespace>gtsam</namespace>
    <member kind="function">
      <type>SharedNoiseModel</type>
      <name>ConvertNoiseModel</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>aa43e7fd7c2b86873458a91ddafc506e4</anchor>
      <arglist>(const SharedNoiseModel &amp;model, size_t n, bool defaultToUnit=true)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>FrobeniusFactor.h</name>
    <path>/Users/dellaert/git/github/gtsam/slam/</path>
    <filename>a01106.html</filename>
    <includes id="a00281" name="Rot2.h" local="no" imported="no">gtsam/geometry/Rot2.h</includes>
    <includes id="a00422" name="Rot3.h" local="no" imported="no">gtsam/geometry/Rot3.h</includes>
    <includes id="a00272" name="SOn.h" local="no" imported="no">gtsam/geometry/SOn.h</includes>
    <includes id="a01022" name="NonlinearFactor.h" local="no" imported="no">gtsam/nonlinear/NonlinearFactor.h</includes>
    <class kind="class">gtsam::FrobeniusPrior</class>
    <class kind="class">gtsam::FrobeniusFactor</class>
    <class kind="class">gtsam::FrobeniusBetweenFactor</class>
    <namespace>gtsam</namespace>
    <member kind="function">
      <type>SharedNoiseModel</type>
      <name>ConvertNoiseModel</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>aa43e7fd7c2b86873458a91ddafc506e4</anchor>
      <arglist>(const SharedNoiseModel &amp;model, size_t n, bool defaultToUnit=true)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>GeneralSFMFactor.h</name>
    <path>/Users/dellaert/git/github/gtsam/slam/</path>
    <filename>a01190.html</filename>
    <includes id="a00314" name="PinholeCamera.h" local="no" imported="no">gtsam/geometry/PinholeCamera.h</includes>
    <includes id="a00380" name="Point2.h" local="no" imported="no">gtsam/geometry/Point2.h</includes>
    <includes id="a00311" name="Point3.h" local="no" imported="no">gtsam/geometry/Point3.h</includes>
    <includes id="a00350" name="Pose3.h" local="no" imported="no">gtsam/geometry/Pose3.h</includes>
    <includes id="a01022" name="NonlinearFactor.h" local="no" imported="no">gtsam/nonlinear/NonlinearFactor.h</includes>
    <includes id="a00659" name="BinaryJacobianFactor.h" local="no" imported="no">gtsam/linear/BinaryJacobianFactor.h</includes>
    <includes id="a00620" name="NoiseModel.h" local="no" imported="no">gtsam/linear/NoiseModel.h</includes>
    <includes id="a00110" name="Manifold.h" local="no" imported="no">gtsam/base/Manifold.h</includes>
    <includes id="a00050" name="Matrix.h" local="no" imported="no">gtsam/base/Matrix.h</includes>
    <includes id="a00083" name="SymmetricBlockMatrix.h" local="no" imported="no">gtsam/base/SymmetricBlockMatrix.h</includes>
    <includes id="a00020" name="types.h" local="no" imported="no">gtsam/base/types.h</includes>
    <includes id="a00101" name="Testable.h" local="no" imported="no">gtsam/base/Testable.h</includes>
    <includes id="a00134" name="Vector.h" local="no" imported="no">gtsam/base/Vector.h</includes>
    <includes id="a00035" name="timing.h" local="no" imported="no">gtsam/base/timing.h</includes>
    <class kind="class">gtsam::GeneralSFMFactor</class>
    <class kind="struct">gtsam::traits&lt; GeneralSFMFactor&lt; CAMERA, LANDMARK &gt; &gt;</class>
    <class kind="class">gtsam::GeneralSFMFactor2</class>
    <class kind="struct">gtsam::traits&lt; GeneralSFMFactor2&lt; CALIBRATION &gt; &gt;</class>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>InitializePose.h</name>
    <path>/Users/dellaert/git/github/gtsam/slam/</path>
    <filename>a01169.html</filename>
    <includes id="a08955" name="Symbol.h" local="no" imported="no">gtsam/inference/Symbol.h</includes>
    <includes id="a00941" name="GaussNewtonOptimizer.h" local="no" imported="no">gtsam/nonlinear/GaussNewtonOptimizer.h</includes>
    <includes id="a00962" name="NonlinearFactorGraph.h" local="no" imported="no">gtsam/nonlinear/NonlinearFactorGraph.h</includes>
    <includes id="a08982" name="PriorFactor.h" local="no" imported="no">gtsam/nonlinear/PriorFactor.h</includes>
    <includes id="a01175" name="BetweenFactor.h" local="no" imported="no">gtsam/slam/BetweenFactor.h</includes>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>InitializePose3.cpp</name>
    <path>/Users/dellaert/git/github/gtsam/slam/</path>
    <filename>a01115.html</filename>
    <includes id="a01187" name="InitializePose3.h" local="no" imported="no">gtsam/slam/InitializePose3.h</includes>
    <includes id="a01169" name="InitializePose.h" local="no" imported="no">gtsam/slam/InitializePose.h</includes>
    <includes id="a08982" name="PriorFactor.h" local="no" imported="no">gtsam/nonlinear/PriorFactor.h</includes>
    <includes id="a01175" name="BetweenFactor.h" local="no" imported="no">gtsam/slam/BetweenFactor.h</includes>
    <includes id="a00941" name="GaussNewtonOptimizer.h" local="no" imported="no">gtsam/nonlinear/GaussNewtonOptimizer.h</includes>
    <includes id="a08955" name="Symbol.h" local="no" imported="no">gtsam/inference/Symbol.h</includes>
    <includes id="a00404" name="Pose2.h" local="no" imported="no">gtsam/geometry/Pose2.h</includes>
    <includes id="a00350" name="Pose3.h" local="no" imported="no">gtsam/geometry/Pose3.h</includes>
    <includes id="a00035" name="timing.h" local="no" imported="no">gtsam/base/timing.h</includes>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>InitializePose3.h</name>
    <path>/Users/dellaert/git/github/gtsam/slam/</path>
    <filename>a01187.html</filename>
    <includes id="a00422" name="Rot3.h" local="no" imported="no">gtsam/geometry/Rot3.h</includes>
    <includes id="a00512" name="graph.h" local="no" imported="no">gtsam/inference/graph.h</includes>
    <includes id="a00677" name="GaussianFactorGraph.h" local="no" imported="no">gtsam/linear/GaussianFactorGraph.h</includes>
    <includes id="a00749" name="VectorValues.h" local="no" imported="no">gtsam/linear/VectorValues.h</includes>
    <includes id="a00962" name="NonlinearFactorGraph.h" local="no" imported="no">gtsam/nonlinear/NonlinearFactorGraph.h</includes>
    <class kind="struct">gtsam::InitializePose3</class>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>lago.h</name>
    <path>/Users/dellaert/git/github/gtsam/slam/</path>
    <filename>a01148.html</filename>
    <includes id="a00962" name="NonlinearFactorGraph.h" local="no" imported="no">gtsam/nonlinear/NonlinearFactorGraph.h</includes>
    <includes id="a00677" name="GaussianFactorGraph.h" local="no" imported="no">gtsam/linear/GaussianFactorGraph.h</includes>
    <includes id="a00749" name="VectorValues.h" local="no" imported="no">gtsam/linear/VectorValues.h</includes>
    <includes id="a00512" name="graph.h" local="no" imported="no">gtsam/inference/graph.h</includes>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>PoseRotationPrior.h</name>
    <path>/Users/dellaert/git/github/gtsam/slam/</path>
    <filename>a01166.html</filename>
    <includes id="a08940" name="concepts.h" local="no" imported="no">gtsam/geometry/concepts.h</includes>
    <includes id="a01022" name="NonlinearFactor.h" local="no" imported="no">gtsam/nonlinear/NonlinearFactor.h</includes>
    <class kind="class">gtsam::PoseRotationPrior</class>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>PoseTranslationPrior.h</name>
    <path>/Users/dellaert/git/github/gtsam/slam/</path>
    <filename>a01163.html</filename>
    <includes id="a08940" name="concepts.h" local="no" imported="no">gtsam/geometry/concepts.h</includes>
    <includes id="a01022" name="NonlinearFactor.h" local="no" imported="no">gtsam/nonlinear/NonlinearFactor.h</includes>
    <class kind="class">gtsam::PoseTranslationPrior</class>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>ProjectionFactor.h</name>
    <path>/Users/dellaert/git/github/gtsam/slam/</path>
    <filename>a01154.html</filename>
    <includes id="a01022" name="NonlinearFactor.h" local="no" imported="no">gtsam/nonlinear/NonlinearFactor.h</includes>
    <includes id="a00314" name="PinholeCamera.h" local="no" imported="no">gtsam/geometry/PinholeCamera.h</includes>
    <includes id="a00350" name="Pose3.h" local="no" imported="no">gtsam/geometry/Pose3.h</includes>
    <includes id="a00311" name="Point3.h" local="no" imported="no">gtsam/geometry/Point3.h</includes>
    <includes id="a00266" name="Cal3_S2.h" local="no" imported="no">gtsam/geometry/Cal3_S2.h</includes>
    <class kind="class">gtsam::GenericProjectionFactor</class>
    <class kind="struct">gtsam::traits&lt; GenericProjectionFactor&lt; POSE, LANDMARK, CALIBRATION &gt; &gt;</class>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>RegularImplicitSchurFactor.h</name>
    <path>/Users/dellaert/git/github/gtsam/slam/</path>
    <filename>a01121.html</filename>
    <includes id="a00284" name="CameraSet.h" local="no" imported="no">gtsam/geometry/CameraSet.h</includes>
    <includes id="a00593" name="JacobianFactor.h" local="no" imported="no">gtsam/linear/JacobianFactor.h</includes>
    <includes id="a00749" name="VectorValues.h" local="no" imported="no">gtsam/linear/VectorValues.h</includes>
    <class kind="class">gtsam::RegularImplicitSchurFactor</class>
    <class kind="struct">gtsam::traits&lt; RegularImplicitSchurFactor&lt; CAMERA &gt; &gt;</class>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>SmartFactorBase.h</name>
    <path>/Users/dellaert/git/github/gtsam/slam/</path>
    <filename>a01157.html</filename>
    <includes id="a01121" name="RegularImplicitSchurFactor.h" local="no" imported="no">gtsam/slam/RegularImplicitSchurFactor.h</includes>
    <includes id="a01022" name="NonlinearFactor.h" local="no" imported="no">gtsam/nonlinear/NonlinearFactor.h</includes>
    <includes id="a00740" name="RegularHessianFactor.h" local="no" imported="no">gtsam/linear/RegularHessianFactor.h</includes>
    <includes id="a00284" name="CameraSet.h" local="no" imported="no">gtsam/geometry/CameraSet.h</includes>
    <class kind="class">gtsam::SmartFactorBase</class>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>SmartProjectionFactor.h</name>
    <path>/Users/dellaert/git/github/gtsam/slam/</path>
    <filename>a01124.html</filename>
    <includes id="a01157" name="SmartFactorBase.h" local="no" imported="no">gtsam/slam/SmartFactorBase.h</includes>
    <includes id="a00431" name="triangulation.h" local="no" imported="no">gtsam/geometry/triangulation.h</includes>
    <includes id="a08955" name="Symbol.h" local="no" imported="no">gtsam/inference/Symbol.h</includes>
    <includes id="a01133" name="dataset.h" local="no" imported="no">gtsam/slam/dataset.h</includes>
    <class kind="class">gtsam::SmartProjectionFactor</class>
    <class kind="struct">gtsam::traits&lt; SmartProjectionFactor&lt; CAMERA &gt; &gt;</class>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>SmartProjectionPoseFactor.h</name>
    <path>/Users/dellaert/git/github/gtsam/slam/</path>
    <filename>a01088.html</filename>
    <includes id="a01124" name="SmartProjectionFactor.h" local="no" imported="no">gtsam/slam/SmartProjectionFactor.h</includes>
    <class kind="class">gtsam::SmartProjectionPoseFactor</class>
    <class kind="struct">gtsam::traits&lt; SmartProjectionPoseFactor&lt; CALIBRATION &gt; &gt;</class>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>SmartProjectionRigFactor.h</name>
    <path>/Users/dellaert/git/github/gtsam/slam/</path>
    <filename>a01172.html</filename>
    <includes id="a01124" name="SmartProjectionFactor.h" local="no" imported="no">gtsam/slam/SmartProjectionFactor.h</includes>
    <class kind="class">gtsam::SmartProjectionRigFactor</class>
    <class kind="struct">gtsam::traits&lt; SmartProjectionRigFactor&lt; CAMERA &gt; &gt;</class>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>SymbolicBayesNet.cpp</name>
    <path>/Users/dellaert/git/github/gtsam/symbolic/</path>
    <filename>a01229.html</filename>
    <includes id="a01205" name="SymbolicBayesNet.h" local="no" imported="no">gtsam/symbolic/SymbolicBayesNet.h</includes>
    <includes id="a01217" name="SymbolicConditional.h" local="no" imported="no">gtsam/symbolic/SymbolicConditional.h</includes>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>SymbolicBayesNet.h</name>
    <path>/Users/dellaert/git/github/gtsam/symbolic/</path>
    <filename>a01205.html</filename>
    <includes id="a01217" name="SymbolicConditional.h" local="no" imported="no">gtsam/symbolic/SymbolicConditional.h</includes>
    <includes id="a00470" name="FactorGraph.h" local="no" imported="no">gtsam/inference/FactorGraph.h</includes>
    <includes id="a00020" name="types.h" local="no" imported="no">gtsam/base/types.h</includes>
    <class kind="class">gtsam::SymbolicBayesNet</class>
    <class kind="struct">gtsam::traits&lt; SymbolicBayesNet &gt;</class>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>SymbolicBayesTree.h</name>
    <path>/Users/dellaert/git/github/gtsam/symbolic/</path>
    <filename>a01241.html</filename>
    <includes id="a01205" name="SymbolicBayesNet.h" local="no" imported="no">gtsam/symbolic/SymbolicBayesNet.h</includes>
    <includes id="a01226" name="SymbolicFactorGraph.h" local="no" imported="no">gtsam/symbolic/SymbolicFactorGraph.h</includes>
    <includes id="a00497" name="BayesTree.h" local="no" imported="no">gtsam/inference/BayesTree.h</includes>
    <includes id="a00455" name="BayesTreeCliqueBase.h" local="no" imported="no">gtsam/inference/BayesTreeCliqueBase.h</includes>
    <class kind="class">gtsam::SymbolicBayesTreeClique</class>
    <class kind="class">gtsam::SymbolicBayesTree</class>
    <class kind="struct">gtsam::traits&lt; SymbolicBayesTreeClique &gt;</class>
    <class kind="struct">gtsam::traits&lt; SymbolicBayesTree &gt;</class>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>SymbolicConditional.cpp</name>
    <path>/Users/dellaert/git/github/gtsam/symbolic/</path>
    <filename>a01202.html</filename>
    <includes id="a01217" name="SymbolicConditional.h" local="no" imported="no">gtsam/symbolic/SymbolicConditional.h</includes>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>SymbolicConditional.h</name>
    <path>/Users/dellaert/git/github/gtsam/symbolic/</path>
    <filename>a01217.html</filename>
    <includes id="a01208" name="SymbolicFactor.h" local="no" imported="no">gtsam/symbolic/SymbolicFactor.h</includes>
    <includes id="a00575" name="Conditional.h" local="no" imported="no">gtsam/inference/Conditional.h</includes>
    <includes id="a00101" name="Testable.h" local="no" imported="no">gtsam/base/Testable.h</includes>
    <includes id="a00020" name="types.h" local="no" imported="no">gtsam/base/types.h</includes>
    <class kind="class">gtsam::SymbolicConditional</class>
    <class kind="struct">gtsam::traits&lt; SymbolicConditional &gt;</class>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>SymbolicEliminationTree.cpp</name>
    <path>/Users/dellaert/git/github/gtsam/symbolic/</path>
    <filename>a01220.html</filename>
    <includes id="a01232" name="SymbolicEliminationTree.h" local="no" imported="no">gtsam/symbolic/SymbolicEliminationTree.h</includes>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>SymbolicEliminationTree.h</name>
    <path>/Users/dellaert/git/github/gtsam/symbolic/</path>
    <filename>a01232.html</filename>
    <includes id="a01205" name="SymbolicBayesNet.h" local="no" imported="no">gtsam/symbolic/SymbolicBayesNet.h</includes>
    <includes id="a01226" name="SymbolicFactorGraph.h" local="no" imported="no">gtsam/symbolic/SymbolicFactorGraph.h</includes>
    <includes id="a00476" name="EliminationTree.h" local="no" imported="no">gtsam/inference/EliminationTree.h</includes>
    <class kind="class">gtsam::SymbolicEliminationTree</class>
    <class kind="struct">gtsam::traits&lt; SymbolicEliminationTree &gt;</class>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>SymbolicFactor-inst.h</name>
    <path>/Users/dellaert/git/github/gtsam/symbolic/</path>
    <filename>a01223.html</filename>
    <includes id="a01208" name="SymbolicFactor.h" local="no" imported="no">gtsam/symbolic/SymbolicFactor.h</includes>
    <includes id="a01217" name="SymbolicConditional.h" local="no" imported="no">gtsam/symbolic/SymbolicConditional.h</includes>
    <includes id="a00515" name="Factor.h" local="no" imported="no">gtsam/inference/Factor.h</includes>
    <includes id="a00491" name="Key.h" local="no" imported="no">gtsam/inference/Key.h</includes>
    <includes id="a00035" name="timing.h" local="no" imported="no">gtsam/base/timing.h</includes>
    <namespace>gtsam</namespace>
    <member kind="function">
      <type>std::pair&lt; boost::shared_ptr&lt; SymbolicConditional &gt;, boost::shared_ptr&lt; SymbolicFactor &gt; &gt;</type>
      <name>EliminateSymbolic</name>
      <anchorfile>a01223.html</anchorfile>
      <anchor>ae394348e1a503834f713405afa9afad8</anchor>
      <arglist>(const FactorGraph&lt; FACTOR &gt; &amp;factors, const Ordering &amp;keys)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>SymbolicFactor.cpp</name>
    <path>/Users/dellaert/git/github/gtsam/symbolic/</path>
    <filename>a01235.html</filename>
    <includes id="a00002" name="FastVector.h" local="no" imported="no">gtsam/base/FastVector.h</includes>
    <includes id="a00521" name="Ordering.h" local="no" imported="no">gtsam/inference/Ordering.h</includes>
    <includes id="a01208" name="SymbolicFactor.h" local="no" imported="no">gtsam/symbolic/SymbolicFactor.h</includes>
    <includes id="a01217" name="SymbolicConditional.h" local="no" imported="no">gtsam/symbolic/SymbolicConditional.h</includes>
    <includes id="a01226" name="SymbolicFactorGraph.h" local="no" imported="no">gtsam/symbolic/SymbolicFactorGraph.h</includes>
    <includes id="a01223" name="SymbolicFactor-inst.h" local="no" imported="no">gtsam/symbolic/SymbolicFactor-inst.h</includes>
    <namespace>gtsam</namespace>
    <member kind="function">
      <type>std::pair&lt; boost::shared_ptr&lt; SymbolicConditional &gt;, boost::shared_ptr&lt; SymbolicFactor &gt; &gt;</type>
      <name>EliminateSymbolic</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>a659f20993995258b1405737e375efd10</anchor>
      <arglist>(const SymbolicFactorGraph &amp;factors, const Ordering &amp;keys)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>SymbolicFactor.h</name>
    <path>/Users/dellaert/git/github/gtsam/symbolic/</path>
    <filename>a01208.html</filename>
    <includes id="a00515" name="Factor.h" local="no" imported="no">gtsam/inference/Factor.h</includes>
    <includes id="a00491" name="Key.h" local="no" imported="no">gtsam/inference/Key.h</includes>
    <includes id="a00101" name="Testable.h" local="no" imported="no">gtsam/base/Testable.h</includes>
    <class kind="class">gtsam::SymbolicFactor</class>
    <class kind="struct">gtsam::traits&lt; SymbolicFactor &gt;</class>
    <namespace>gtsam</namespace>
    <member kind="function">
      <type>std::pair&lt; boost::shared_ptr&lt; SymbolicConditional &gt;, boost::shared_ptr&lt; SymbolicFactor &gt; &gt;</type>
      <name>EliminateSymbolic</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>a659f20993995258b1405737e375efd10</anchor>
      <arglist>(const SymbolicFactorGraph &amp;factors, const Ordering &amp;keys)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>SymbolicFactorGraph.cpp</name>
    <path>/Users/dellaert/git/github/gtsam/symbolic/</path>
    <filename>a01193.html</filename>
    <includes id="a01226" name="SymbolicFactorGraph.h" local="no" imported="no">gtsam/symbolic/SymbolicFactorGraph.h</includes>
    <includes id="a01232" name="SymbolicEliminationTree.h" local="no" imported="no">gtsam/symbolic/SymbolicEliminationTree.h</includes>
    <includes id="a01196" name="SymbolicJunctionTree.h" local="no" imported="no">gtsam/symbolic/SymbolicJunctionTree.h</includes>
    <includes id="a01241" name="SymbolicBayesTree.h" local="no" imported="no">gtsam/symbolic/SymbolicBayesTree.h</includes>
    <includes id="a01217" name="SymbolicConditional.h" local="no" imported="no">gtsam/symbolic/SymbolicConditional.h</includes>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>SymbolicFactorGraph.h</name>
    <path>/Users/dellaert/git/github/gtsam/symbolic/</path>
    <filename>a01226.html</filename>
    <includes id="a01208" name="SymbolicFactor.h" local="no" imported="no">gtsam/symbolic/SymbolicFactor.h</includes>
    <includes id="a00470" name="FactorGraph.h" local="no" imported="no">gtsam/inference/FactorGraph.h</includes>
    <includes id="a00524" name="EliminateableFactorGraph.h" local="no" imported="no">gtsam/inference/EliminateableFactorGraph.h</includes>
    <includes id="a00020" name="types.h" local="no" imported="no">gtsam/base/types.h</includes>
    <class kind="struct">gtsam::EliminationTraits&lt; SymbolicFactorGraph &gt;</class>
    <class kind="class">gtsam::SymbolicFactorGraph</class>
    <class kind="struct">gtsam::traits&lt; SymbolicFactorGraph &gt;</class>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>SymbolicISAM.cpp</name>
    <path>/Users/dellaert/git/github/gtsam/symbolic/</path>
    <filename>a01211.html</filename>
    <includes id="a01238" name="SymbolicISAM.h" local="no" imported="no">gtsam/symbolic/SymbolicISAM.h</includes>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>SymbolicISAM.h</name>
    <path>/Users/dellaert/git/github/gtsam/symbolic/</path>
    <filename>a01238.html</filename>
    <includes id="a01241" name="SymbolicBayesTree.h" local="no" imported="no">gtsam/symbolic/SymbolicBayesTree.h</includes>
    <includes id="a00500" name="ISAM.h" local="no" imported="no">gtsam/inference/ISAM.h</includes>
    <class kind="class">gtsam::SymbolicISAM</class>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>SymbolicJunctionTree.cpp</name>
    <path>/Users/dellaert/git/github/gtsam/symbolic/</path>
    <filename>a01199.html</filename>
    <includes id="a00548" name="JunctionTree-inst.h" local="no" imported="no">gtsam/inference/JunctionTree-inst.h</includes>
    <includes id="a01196" name="SymbolicJunctionTree.h" local="no" imported="no">gtsam/symbolic/SymbolicJunctionTree.h</includes>
    <includes id="a01232" name="SymbolicEliminationTree.h" local="no" imported="no">gtsam/symbolic/SymbolicEliminationTree.h</includes>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>SymbolicJunctionTree.h</name>
    <path>/Users/dellaert/git/github/gtsam/symbolic/</path>
    <filename>a01196.html</filename>
    <includes id="a01226" name="SymbolicFactorGraph.h" local="no" imported="no">gtsam/symbolic/SymbolicFactorGraph.h</includes>
    <includes id="a01241" name="SymbolicBayesTree.h" local="no" imported="no">gtsam/symbolic/SymbolicBayesTree.h</includes>
    <includes id="a00527" name="JunctionTree.h" local="no" imported="no">gtsam/inference/JunctionTree.h</includes>
    <class kind="class">gtsam::SymbolicJunctionTree</class>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>BTree.h</name>
    <path>/Users/dellaert/git/github/gtsam_unstable/base/</path>
    <filename>a01262.html</filename>
    <class kind="class">gtsam::BTree</class>
    <class kind="class">gtsam::BTree::const_iterator</class>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>DSF.h</name>
    <path>/Users/dellaert/git/github/gtsam_unstable/base/</path>
    <filename>a01259.html</filename>
    <includes id="a01262" name="BTree.h" local="no" imported="no">gtsam_unstable/base/BTree.h</includes>
    <class kind="class">gtsam::DSF</class>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>Dummy.h</name>
    <path>/Users/dellaert/git/github/gtsam_unstable/base/</path>
    <filename>a01271.html</filename>
    <includes id="a01256" name="global_includes.h" local="no" imported="no">gtsam/global_includes.h</includes>
    <class kind="struct">gtsam::Dummy</class>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>FixedVector.h</name>
    <path>/Users/dellaert/git/github/gtsam_unstable/base/</path>
    <filename>a01268.html</filename>
    <includes id="a00134" name="Vector.h" local="no" imported="no">gtsam/base/Vector.h</includes>
    <class kind="class">gtsam::FixedVector</class>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>Constraint.h</name>
    <path>/Users/dellaert/git/github/gtsam_unstable/discrete/</path>
    <filename>a01295.html</filename>
    <includes id="a00257" name="DiscreteFactor.h" local="no" imported="no">gtsam/discrete/DiscreteFactor.h</includes>
    <class kind="class">gtsam::Constraint</class>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>DynamicsPriors.h</name>
    <path>/Users/dellaert/git/github/gtsam_unstable/dynamics/</path>
    <filename>a01574.html</filename>
    <includes id="a01565" name="PoseRTV.h" local="no" imported="no">gtsam_unstable/dynamics/PoseRTV.h</includes>
    <includes id="a01463" name="PartialPriorFactor.h" local="no" imported="no">gtsam_unstable/slam/PartialPriorFactor.h</includes>
    <class kind="struct">gtsam::DHeightPrior</class>
    <class kind="struct">gtsam::DRollPrior</class>
    <class kind="struct">gtsam::VelocityPrior</class>
    <class kind="struct">gtsam::DGroundConstraint</class>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>FullIMUFactor.h</name>
    <path>/Users/dellaert/git/github/gtsam_unstable/dynamics/</path>
    <filename>a01580.html</filename>
    <includes id="a00125" name="numericalDerivative.h" local="no" imported="no">gtsam/base/numericalDerivative.h</includes>
    <includes id="a01022" name="NonlinearFactor.h" local="no" imported="no">gtsam/nonlinear/NonlinearFactor.h</includes>
    <includes id="a01565" name="PoseRTV.h" local="no" imported="no">gtsam_unstable/dynamics/PoseRTV.h</includes>
    <class kind="class">gtsam::FullIMUFactor</class>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>Pendulum.h</name>
    <path>/Users/dellaert/git/github/gtsam_unstable/dynamics/</path>
    <filename>a01568.html</filename>
    <includes id="a01022" name="NonlinearFactor.h" local="no" imported="no">gtsam/nonlinear/NonlinearFactor.h</includes>
    <class kind="class">gtsam::PendulumFactor1</class>
    <class kind="class">gtsam::PendulumFactor2</class>
    <class kind="class">gtsam::PendulumFactorPk</class>
    <class kind="class">gtsam::PendulumFactorPk1</class>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>PoseRTV.cpp</name>
    <path>/Users/dellaert/git/github/gtsam_unstable/dynamics/</path>
    <filename>a01562.html</filename>
    <includes id="a01565" name="PoseRTV.h" local="no" imported="no">gtsam_unstable/dynamics/PoseRTV.h</includes>
    <includes id="a00404" name="Pose2.h" local="no" imported="no">gtsam/geometry/Pose2.h</includes>
    <includes id="a00134" name="Vector.h" local="no" imported="no">gtsam/base/Vector.h</includes>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>PoseRTV.h</name>
    <path>/Users/dellaert/git/github/gtsam_unstable/dynamics/</path>
    <filename>a01565.html</filename>
    <includes id="a00350" name="Pose3.h" local="no" imported="no">gtsam/geometry/Pose3.h</includes>
    <includes id="a00044" name="ProductLieGroup.h" local="no" imported="no">gtsam/base/ProductLieGroup.h</includes>
    <class kind="class">gtsam::PoseRTV</class>
    <class kind="struct">gtsam::traits&lt; PoseRTV &gt;</class>
    <class kind="struct">gtsam::Range&lt; PoseRTV, PoseRTV &gt;</class>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>VelocityConstraint.h</name>
    <path>/Users/dellaert/git/github/gtsam_unstable/dynamics/</path>
    <filename>a01577.html</filename>
    <includes id="a00125" name="numericalDerivative.h" local="no" imported="no">gtsam/base/numericalDerivative.h</includes>
    <includes id="a01022" name="NonlinearFactor.h" local="no" imported="no">gtsam/nonlinear/NonlinearFactor.h</includes>
    <includes id="a01565" name="PoseRTV.h" local="no" imported="no">gtsam_unstable/dynamics/PoseRTV.h</includes>
    <class kind="class">gtsam::VelocityConstraint</class>
    <namespace>gtsam</namespace>
    <member kind="enumeration">
      <type></type>
      <name>IntegrationMode</name>
      <anchorfile>a01577.html</anchorfile>
      <anchor>aee7e6f67ebdd7ddfeb5076d39a05077a</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>VelocityConstraint3.h</name>
    <path>/Users/dellaert/git/github/gtsam_unstable/dynamics/</path>
    <filename>a01553.html</filename>
    <includes id="a01022" name="NonlinearFactor.h" local="no" imported="no">gtsam/nonlinear/NonlinearFactor.h</includes>
    <class kind="class">gtsam::VelocityConstraint3</class>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>ActiveSetSolver-inl.h</name>
    <path>/Users/dellaert/git/github/gtsam_unstable/linear/</path>
    <filename>a01364.html</filename>
    <includes id="a01334" name="InfeasibleInitialValues.h" local="no" imported="no">gtsam_unstable/linear/InfeasibleInitialValues.h</includes>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>ActiveSetSolver.h</name>
    <path>/Users/dellaert/git/github/gtsam_unstable/linear/</path>
    <filename>a01340.html</filename>
    <includes id="a00677" name="GaussianFactorGraph.h" local="no" imported="no">gtsam/linear/GaussianFactorGraph.h</includes>
    <includes id="a01322" name="InequalityFactorGraph.h" local="no" imported="no">gtsam_unstable/linear/InequalityFactorGraph.h</includes>
    <includes id="a01364" name="ActiveSetSolver-inl.h" local="no" imported="no">gtsam_unstable/linear/ActiveSetSolver-inl.h</includes>
    <class kind="class">gtsam::ActiveSetSolver</class>
    <class kind="struct">gtsam::ActiveSetSolver::State</class>
    <namespace>gtsam</namespace>
    <member kind="function">
      <type>Key</type>
      <name>maxKey</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>a9be309f741b77e5406429e41f666aa5a</anchor>
      <arglist>(const PROBLEM &amp;problem)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>EqualityFactorGraph.h</name>
    <path>/Users/dellaert/git/github/gtsam_unstable/linear/</path>
    <filename>a01358.html</filename>
    <includes id="a00470" name="FactorGraph.h" local="no" imported="no">gtsam/inference/FactorGraph.h</includes>
    <includes id="a01355" name="LinearEquality.h" local="no" imported="no">gtsam_unstable/linear/LinearEquality.h</includes>
    <class kind="class">gtsam::EqualityFactorGraph</class>
    <class kind="struct">gtsam::traits&lt; EqualityFactorGraph &gt;</class>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>InequalityFactorGraph.h</name>
    <path>/Users/dellaert/git/github/gtsam_unstable/linear/</path>
    <filename>a01322.html</filename>
    <includes id="a01346" name="LinearInequality.h" local="no" imported="no">gtsam_unstable/linear/LinearInequality.h</includes>
    <includes id="a00749" name="VectorValues.h" local="no" imported="no">gtsam/linear/VectorValues.h</includes>
    <includes id="a00470" name="FactorGraph.h" local="no" imported="no">gtsam/inference/FactorGraph.h</includes>
    <class kind="class">gtsam::InequalityFactorGraph</class>
    <class kind="struct">gtsam::traits&lt; InequalityFactorGraph &gt;</class>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>InfeasibleInitialValues.h</name>
    <path>/Users/dellaert/git/github/gtsam_unstable/linear/</path>
    <filename>a01334.html</filename>
    <class kind="class">gtsam::InfeasibleInitialValues</class>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>InfeasibleOrUnboundedProblem.h</name>
    <path>/Users/dellaert/git/github/gtsam_unstable/linear/</path>
    <filename>a01316.html</filename>
    <class kind="class">gtsam::InfeasibleOrUnboundedProblem</class>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>LinearCost.h</name>
    <path>/Users/dellaert/git/github/gtsam_unstable/linear/</path>
    <filename>a01367.html</filename>
    <includes id="a00593" name="JacobianFactor.h" local="no" imported="no">gtsam/linear/JacobianFactor.h</includes>
    <class kind="class">gtsam::LinearCost</class>
    <class kind="struct">gtsam::traits&lt; LinearCost &gt;</class>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>LinearEquality.h</name>
    <path>/Users/dellaert/git/github/gtsam_unstable/linear/</path>
    <filename>a01355.html</filename>
    <includes id="a00593" name="JacobianFactor.h" local="no" imported="no">gtsam/linear/JacobianFactor.h</includes>
    <class kind="class">gtsam::LinearEquality</class>
    <class kind="struct">gtsam::traits&lt; LinearEquality &gt;</class>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>LinearInequality.h</name>
    <path>/Users/dellaert/git/github/gtsam_unstable/linear/</path>
    <filename>a01346.html</filename>
    <includes id="a00593" name="JacobianFactor.h" local="no" imported="no">gtsam/linear/JacobianFactor.h</includes>
    <includes id="a00749" name="VectorValues.h" local="no" imported="no">gtsam/linear/VectorValues.h</includes>
    <class kind="class">gtsam::LinearInequality</class>
    <class kind="struct">gtsam::traits&lt; LinearInequality &gt;</class>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>LP.h</name>
    <path>/Users/dellaert/git/github/gtsam_unstable/linear/</path>
    <filename>a01370.html</filename>
    <includes id="a01367" name="LinearCost.h" local="no" imported="no">gtsam_unstable/linear/LinearCost.h</includes>
    <includes id="a01358" name="EqualityFactorGraph.h" local="no" imported="no">gtsam_unstable/linear/EqualityFactorGraph.h</includes>
    <includes id="a01322" name="InequalityFactorGraph.h" local="no" imported="no">gtsam_unstable/linear/InequalityFactorGraph.h</includes>
    <class kind="struct">gtsam::LP</class>
    <class kind="struct">gtsam::traits&lt; LP &gt;</class>
    <namespace>gtsam</namespace>
    <member kind="typedef">
      <type>std::map&lt; Key, size_t &gt;</type>
      <name>KeyDimMap</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>a56e7423b122a2ac2a9ba1a07546516a5</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>LPInitSolver.h</name>
    <path>/Users/dellaert/git/github/gtsam_unstable/linear/</path>
    <filename>a01343.html</filename>
    <includes id="a01370" name="LP.h" local="no" imported="no">gtsam_unstable/linear/LP.h</includes>
    <includes id="a00677" name="GaussianFactorGraph.h" local="no" imported="no">gtsam/linear/GaussianFactorGraph.h</includes>
    <class kind="class">gtsam::LPInitSolver</class>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>LPSolver.cpp</name>
    <path>/Users/dellaert/git/github/gtsam_unstable/linear/</path>
    <filename>a01352.html</filename>
    <includes id="a01349" name="LPSolver.h" local="no" imported="no">gtsam_unstable/linear/LPSolver.h</includes>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>LPSolver.h</name>
    <path>/Users/dellaert/git/github/gtsam_unstable/linear/</path>
    <filename>a01349.html</filename>
    <includes id="a01370" name="LP.h" local="no" imported="no">gtsam_unstable/linear/LP.h</includes>
    <includes id="a01340" name="ActiveSetSolver.h" local="no" imported="no">gtsam_unstable/linear/ActiveSetSolver.h</includes>
    <includes id="a01343" name="LPInitSolver.h" local="no" imported="no">gtsam_unstable/linear/LPInitSolver.h</includes>
    <class kind="struct">gtsam::LPPolicy</class>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>QP.h</name>
    <path>/Users/dellaert/git/github/gtsam_unstable/linear/</path>
    <filename>a01361.html</filename>
    <includes id="a00677" name="GaussianFactorGraph.h" local="no" imported="no">gtsam/linear/GaussianFactorGraph.h</includes>
    <includes id="a01358" name="EqualityFactorGraph.h" local="no" imported="no">gtsam_unstable/linear/EqualityFactorGraph.h</includes>
    <includes id="a01322" name="InequalityFactorGraph.h" local="no" imported="no">gtsam_unstable/linear/InequalityFactorGraph.h</includes>
    <includes id="a01133" name="dataset.h" local="no" imported="no">gtsam/slam/dataset.h</includes>
    <class kind="struct">gtsam::QP</class>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>QPInitSolver.h</name>
    <path>/Users/dellaert/git/github/gtsam_unstable/linear/</path>
    <filename>a01337.html</filename>
    <includes id="a01343" name="LPInitSolver.h" local="no" imported="no">gtsam_unstable/linear/LPInitSolver.h</includes>
    <class kind="class">gtsam::QPInitSolver</class>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>QPSolver.cpp</name>
    <path>/Users/dellaert/git/github/gtsam_unstable/linear/</path>
    <filename>a01313.html</filename>
    <includes id="a01310" name="QPSolver.h" local="no" imported="no">gtsam_unstable/linear/QPSolver.h</includes>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>QPSolver.h</name>
    <path>/Users/dellaert/git/github/gtsam_unstable/linear/</path>
    <filename>a01310.html</filename>
    <includes id="a01361" name="QP.h" local="no" imported="no">gtsam_unstable/linear/QP.h</includes>
    <includes id="a01340" name="ActiveSetSolver.h" local="no" imported="no">gtsam_unstable/linear/ActiveSetSolver.h</includes>
    <includes id="a01337" name="QPInitSolver.h" local="no" imported="no">gtsam_unstable/linear/QPInitSolver.h</includes>
    <class kind="struct">gtsam::QPPolicy</class>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>QPSParserException.h</name>
    <path>/Users/dellaert/git/github/gtsam_unstable/linear/</path>
    <filename>a01319.html</filename>
    <class kind="class">gtsam::QPSParserException</class>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>BatchFixedLagSmoother.cpp</name>
    <path>/Users/dellaert/git/github/gtsam_unstable/nonlinear/</path>
    <filename>a01409.html</filename>
    <includes id="a01412" name="BatchFixedLagSmoother.h" local="no" imported="no">gtsam_unstable/nonlinear/BatchFixedLagSmoother.h</includes>
    <includes id="a00938" name="LinearContainerFactor.h" local="no" imported="no">gtsam/nonlinear/LinearContainerFactor.h</includes>
    <includes id="a00629" name="GaussianJunctionTree.h" local="no" imported="no">gtsam/linear/GaussianJunctionTree.h</includes>
    <includes id="a00677" name="GaussianFactorGraph.h" local="no" imported="no">gtsam/linear/GaussianFactorGraph.h</includes>
    <includes id="a00719" name="GaussianFactor.h" local="no" imported="no">gtsam/linear/GaussianFactor.h</includes>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>BatchFixedLagSmoother.h</name>
    <path>/Users/dellaert/git/github/gtsam_unstable/nonlinear/</path>
    <filename>a01412.html</filename>
    <includes id="a01403" name="FixedLagSmoother.h" local="no" imported="no">gtsam_unstable/nonlinear/FixedLagSmoother.h</includes>
    <includes id="a00989" name="LevenbergMarquardtOptimizer.h" local="no" imported="no">gtsam/nonlinear/LevenbergMarquardtOptimizer.h</includes>
    <class kind="class">gtsam::BatchFixedLagSmoother</class>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>ConcurrentBatchFilter.cpp</name>
    <path>/Users/dellaert/git/github/gtsam_unstable/nonlinear/</path>
    <filename>a01385.html</filename>
    <includes id="a01373" name="ConcurrentBatchFilter.h" local="no" imported="no">gtsam_unstable/nonlinear/ConcurrentBatchFilter.h</includes>
    <includes id="a00938" name="LinearContainerFactor.h" local="no" imported="no">gtsam/nonlinear/LinearContainerFactor.h</includes>
    <includes id="a00629" name="GaussianJunctionTree.h" local="no" imported="no">gtsam/linear/GaussianJunctionTree.h</includes>
    <includes id="a00035" name="timing.h" local="no" imported="no">gtsam/base/timing.h</includes>
    <includes id="a00011" name="debug.h" local="no" imported="no">gtsam/base/debug.h</includes>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>ConcurrentBatchFilter.h</name>
    <path>/Users/dellaert/git/github/gtsam_unstable/nonlinear/</path>
    <filename>a01373.html</filename>
    <includes id="a01421" name="ConcurrentFilteringAndSmoothing.h" local="no" imported="no">gtsam_unstable/nonlinear/ConcurrentFilteringAndSmoothing.h</includes>
    <includes id="a00989" name="LevenbergMarquardtOptimizer.h" local="no" imported="no">gtsam/nonlinear/LevenbergMarquardtOptimizer.h</includes>
    <class kind="class">gtsam::ConcurrentBatchFilter</class>
    <class kind="struct">gtsam::ConcurrentBatchFilter::Result</class>
    <class kind="struct">gtsam::traits&lt; ConcurrentBatchFilter &gt;</class>
    <namespace>gtsam</namespace>
    <member kind="typedef">
      <type>ConcurrentBatchFilter::Result</type>
      <name>ConcurrentBatchFilterResult</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>a48e3e10fd7b2e4e28d57370b8ee63c75</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>ConcurrentBatchSmoother.cpp</name>
    <path>/Users/dellaert/git/github/gtsam_unstable/nonlinear/</path>
    <filename>a01397.html</filename>
    <includes id="a01382" name="ConcurrentBatchSmoother.h" local="no" imported="no">gtsam_unstable/nonlinear/ConcurrentBatchSmoother.h</includes>
    <includes id="a00938" name="LinearContainerFactor.h" local="no" imported="no">gtsam/nonlinear/LinearContainerFactor.h</includes>
    <includes id="a00629" name="GaussianJunctionTree.h" local="no" imported="no">gtsam/linear/GaussianJunctionTree.h</includes>
    <includes id="a00035" name="timing.h" local="no" imported="no">gtsam/base/timing.h</includes>
    <includes id="a00011" name="debug.h" local="no" imported="no">gtsam/base/debug.h</includes>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>ConcurrentBatchSmoother.h</name>
    <path>/Users/dellaert/git/github/gtsam_unstable/nonlinear/</path>
    <filename>a01382.html</filename>
    <includes id="a01421" name="ConcurrentFilteringAndSmoothing.h" local="no" imported="no">gtsam_unstable/nonlinear/ConcurrentFilteringAndSmoothing.h</includes>
    <includes id="a00989" name="LevenbergMarquardtOptimizer.h" local="no" imported="no">gtsam/nonlinear/LevenbergMarquardtOptimizer.h</includes>
    <class kind="class">gtsam::ConcurrentBatchSmoother</class>
    <class kind="struct">gtsam::ConcurrentBatchSmoother::Result</class>
    <class kind="struct">gtsam::traits&lt; ConcurrentBatchSmoother &gt;</class>
    <namespace>gtsam</namespace>
    <member kind="typedef">
      <type>ConcurrentBatchSmoother::Result</type>
      <name>ConcurrentBatchSmootherResult</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>a630a70c8307aedd4cca4556d751581ff</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>ConcurrentFilteringAndSmoothing.cpp</name>
    <path>/Users/dellaert/git/github/gtsam_unstable/nonlinear/</path>
    <filename>a01418.html</filename>
    <includes id="a01421" name="ConcurrentFilteringAndSmoothing.h" local="no" imported="no">gtsam_unstable/nonlinear/ConcurrentFilteringAndSmoothing.h</includes>
    <includes id="a00938" name="LinearContainerFactor.h" local="no" imported="no">gtsam/nonlinear/LinearContainerFactor.h</includes>
    <namespace>gtsam</namespace>
    <member kind="function">
      <type>NonlinearFactorGraph</type>
      <name>calculateMarginalFactors</name>
      <anchorfile>a01418.html</anchorfile>
      <anchor>acf832591bd903048a42ff3103c78416a</anchor>
      <arglist>(const NonlinearFactorGraph &amp;graph, const Values &amp;theta, const KeySet &amp;remainingKeys, const GaussianFactorGraph::Eliminate &amp;eliminateFunction)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>ConcurrentFilteringAndSmoothing.h</name>
    <path>/Users/dellaert/git/github/gtsam_unstable/nonlinear/</path>
    <filename>a01421.html</filename>
    <includes id="a00962" name="NonlinearFactorGraph.h" local="no" imported="no">gtsam/nonlinear/NonlinearFactorGraph.h</includes>
    <includes id="a00944" name="Values.h" local="no" imported="no">gtsam/nonlinear/Values.h</includes>
    <includes id="a00677" name="GaussianFactorGraph.h" local="no" imported="no">gtsam/linear/GaussianFactorGraph.h</includes>
    <class kind="class">gtsam::ConcurrentFilter</class>
    <class kind="class">gtsam::ConcurrentSmoother</class>
    <namespace>gtsam</namespace>
    <member kind="function">
      <type>NonlinearFactorGraph</type>
      <name>calculateMarginalFactors</name>
      <anchorfile>a01418.html</anchorfile>
      <anchor>acf832591bd903048a42ff3103c78416a</anchor>
      <arglist>(const NonlinearFactorGraph &amp;graph, const Values &amp;theta, const KeySet &amp;remainingKeys, const GaussianFactorGraph::Eliminate &amp;eliminateFunction)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>ConcurrentIncrementalFilter.cpp</name>
    <path>/Users/dellaert/git/github/gtsam_unstable/nonlinear/</path>
    <filename>a01406.html</filename>
    <includes id="a00938" name="LinearContainerFactor.h" local="no" imported="no">gtsam/nonlinear/LinearContainerFactor.h</includes>
    <includes id="a00035" name="timing.h" local="no" imported="no">gtsam/base/timing.h</includes>
    <includes id="a00011" name="debug.h" local="no" imported="no">gtsam/base/debug.h</includes>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>ConcurrentIncrementalSmoother.cpp</name>
    <path>/Users/dellaert/git/github/gtsam_unstable/nonlinear/</path>
    <filename>a01391.html</filename>
    <includes id="a01427" name="ConcurrentIncrementalSmoother.h" local="no" imported="no">gtsam_unstable/nonlinear/ConcurrentIncrementalSmoother.h</includes>
    <includes id="a00938" name="LinearContainerFactor.h" local="no" imported="no">gtsam/nonlinear/LinearContainerFactor.h</includes>
    <includes id="a00035" name="timing.h" local="no" imported="no">gtsam/base/timing.h</includes>
    <includes id="a00011" name="debug.h" local="no" imported="no">gtsam/base/debug.h</includes>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>ConcurrentIncrementalSmoother.h</name>
    <path>/Users/dellaert/git/github/gtsam_unstable/nonlinear/</path>
    <filename>a01427.html</filename>
    <includes id="a01421" name="ConcurrentFilteringAndSmoothing.h" local="no" imported="no">gtsam_unstable/nonlinear/ConcurrentFilteringAndSmoothing.h</includes>
    <includes id="a00977" name="ISAM2.h" local="no" imported="no">gtsam/nonlinear/ISAM2.h</includes>
    <class kind="class">gtsam::ConcurrentIncrementalSmoother</class>
    <class kind="struct">gtsam::ConcurrentIncrementalSmoother::Result</class>
    <class kind="struct">gtsam::traits&lt; ConcurrentIncrementalSmoother &gt;</class>
    <namespace>gtsam</namespace>
    <member kind="typedef">
      <type>ConcurrentIncrementalSmoother::Result</type>
      <name>ConcurrentIncrementalSmootherResult</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>ab1c68e081eba4a337a9e97a11cfb1bdc</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>FixedLagSmoother.cpp</name>
    <path>/Users/dellaert/git/github/gtsam_unstable/nonlinear/</path>
    <filename>a01424.html</filename>
    <includes id="a01403" name="FixedLagSmoother.h" local="no" imported="no">gtsam_unstable/nonlinear/FixedLagSmoother.h</includes>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>FixedLagSmoother.h</name>
    <path>/Users/dellaert/git/github/gtsam_unstable/nonlinear/</path>
    <filename>a01403.html</filename>
    <includes id="a00491" name="Key.h" local="no" imported="no">gtsam/inference/Key.h</includes>
    <includes id="a00962" name="NonlinearFactorGraph.h" local="no" imported="no">gtsam/nonlinear/NonlinearFactorGraph.h</includes>
    <includes id="a00944" name="Values.h" local="no" imported="no">gtsam/nonlinear/Values.h</includes>
    <class kind="class">gtsam::FixedLagSmoother</class>
    <class kind="struct">gtsam::FixedLagSmoother::Result</class>
    <namespace>gtsam</namespace>
    <member kind="typedef">
      <type>FixedLagSmoother::KeyTimestampMap</type>
      <name>FixedLagSmootherKeyTimestampMap</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>aa2a302ee683dae9b50409588c07669d7</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>IncrementalFixedLagSmoother.cpp</name>
    <path>/Users/dellaert/git/github/gtsam_unstable/nonlinear/</path>
    <filename>a01415.html</filename>
    <includes id="a01388" name="IncrementalFixedLagSmoother.h" local="no" imported="no">gtsam_unstable/nonlinear/IncrementalFixedLagSmoother.h</includes>
    <includes id="a00011" name="debug.h" local="no" imported="no">gtsam/base/debug.h</includes>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>IncrementalFixedLagSmoother.h</name>
    <path>/Users/dellaert/git/github/gtsam_unstable/nonlinear/</path>
    <filename>a01388.html</filename>
    <includes id="a01403" name="FixedLagSmoother.h" local="no" imported="no">gtsam_unstable/nonlinear/FixedLagSmoother.h</includes>
    <includes id="a00977" name="ISAM2.h" local="no" imported="no">gtsam/nonlinear/ISAM2.h</includes>
    <class kind="class">gtsam::IncrementalFixedLagSmoother</class>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>LinearizedFactor.cpp</name>
    <path>/Users/dellaert/git/github/gtsam_unstable/nonlinear/</path>
    <filename>a01400.html</filename>
    <includes id="a01376" name="LinearizedFactor.h" local="no" imported="no">gtsam_unstable/nonlinear/LinearizedFactor.h</includes>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>LinearizedFactor.h</name>
    <path>/Users/dellaert/git/github/gtsam_unstable/nonlinear/</path>
    <filename>a01376.html</filename>
    <includes id="a01022" name="NonlinearFactor.h" local="no" imported="no">gtsam/nonlinear/NonlinearFactor.h</includes>
    <includes id="a00593" name="JacobianFactor.h" local="no" imported="no">gtsam/linear/JacobianFactor.h</includes>
    <includes id="a00614" name="HessianFactor.h" local="no" imported="no">gtsam/linear/HessianFactor.h</includes>
    <class kind="class">gtsam::LinearizedGaussianFactor</class>
    <class kind="class">gtsam::LinearizedJacobianFactor</class>
    <class kind="struct">gtsam::traits&lt; LinearizedJacobianFactor &gt;</class>
    <class kind="class">gtsam::LinearizedHessianFactor</class>
    <class kind="struct">gtsam::traits&lt; LinearizedHessianFactor &gt;</class>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>NonlinearClusterTree.h</name>
    <path>/Users/dellaert/git/github/gtsam_unstable/nonlinear/</path>
    <filename>a01394.html</filename>
    <includes id="a00962" name="NonlinearFactorGraph.h" local="no" imported="no">gtsam/nonlinear/NonlinearFactorGraph.h</includes>
    <includes id="a00734" name="GaussianBayesTree.h" local="no" imported="no">gtsam/linear/GaussianBayesTree.h</includes>
    <class kind="class">gtsam::NonlinearClusterTree</class>
    <class kind="struct">gtsam::NonlinearClusterTree::NonlinearCluster</class>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>BetweenFactorEM.h</name>
    <path>/Users/dellaert/git/github/gtsam_unstable/slam/</path>
    <filename>a01466.html</filename>
    <includes id="a00101" name="Testable.h" local="no" imported="no">gtsam/base/Testable.h</includes>
    <includes id="a00131" name="Lie.h" local="no" imported="no">gtsam/base/Lie.h</includes>
    <includes id="a01022" name="NonlinearFactor.h" local="no" imported="no">gtsam/nonlinear/NonlinearFactor.h</includes>
    <includes id="a00719" name="GaussianFactor.h" local="no" imported="no">gtsam/linear/GaussianFactor.h</includes>
    <includes id="a00953" name="Marginals.h" local="no" imported="no">gtsam/nonlinear/Marginals.h</includes>
    <class kind="class">gtsam::BetweenFactorEM</class>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>BiasedGPSFactor.h</name>
    <path>/Users/dellaert/git/github/gtsam_unstable/slam/</path>
    <filename>a01544.html</filename>
    <includes id="a00350" name="Pose3.h" local="no" imported="no">gtsam/geometry/Pose3.h</includes>
    <includes id="a01022" name="NonlinearFactor.h" local="no" imported="no">gtsam/nonlinear/NonlinearFactor.h</includes>
    <class kind="class">gtsam::BiasedGPSFactor</class>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>DummyFactor.cpp</name>
    <path>/Users/dellaert/git/github/gtsam_unstable/slam/</path>
    <filename>a01526.html</filename>
    <includes id="a01493" name="DummyFactor.h" local="no" imported="no">gtsam_unstable/slam/DummyFactor.h</includes>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>DummyFactor.h</name>
    <path>/Users/dellaert/git/github/gtsam_unstable/slam/</path>
    <filename>a01493.html</filename>
    <includes id="a01022" name="NonlinearFactor.h" local="no" imported="no">gtsam/nonlinear/NonlinearFactor.h</includes>
    <class kind="class">gtsam::DummyFactor</class>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>EquivInertialNavFactor_GlobalVel.h</name>
    <path>/Users/dellaert/git/github/gtsam_unstable/slam/</path>
    <filename>a01472.html</filename>
    <includes id="a01022" name="NonlinearFactor.h" local="no" imported="no">gtsam/nonlinear/NonlinearFactor.h</includes>
    <includes id="a00620" name="NoiseModel.h" local="no" imported="no">gtsam/linear/NoiseModel.h</includes>
    <includes id="a00422" name="Rot3.h" local="no" imported="no">gtsam/geometry/Rot3.h</includes>
    <includes id="a00050" name="Matrix.h" local="no" imported="no">gtsam/base/Matrix.h</includes>
    <includes id="a00125" name="numericalDerivative.h" local="no" imported="no">gtsam/base/numericalDerivative.h</includes>
    <class kind="class">gtsam::EquivInertialNavFactor_GlobalVel</class>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>EquivInertialNavFactor_GlobalVel_NoBias.h</name>
    <path>/Users/dellaert/git/github/gtsam_unstable/slam/</path>
    <filename>a01481.html</filename>
    <includes id="a01022" name="NonlinearFactor.h" local="no" imported="no">gtsam/nonlinear/NonlinearFactor.h</includes>
    <includes id="a00620" name="NoiseModel.h" local="no" imported="no">gtsam/linear/NoiseModel.h</includes>
    <includes id="a00422" name="Rot3.h" local="no" imported="no">gtsam/geometry/Rot3.h</includes>
    <includes id="a00050" name="Matrix.h" local="no" imported="no">gtsam/base/Matrix.h</includes>
    <includes id="a00125" name="numericalDerivative.h" local="no" imported="no">gtsam/base/numericalDerivative.h</includes>
    <class kind="class">gtsam::EquivInertialNavFactor_GlobalVel_NoBias</class>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>GaussMarkov1stOrderFactor.h</name>
    <path>/Users/dellaert/git/github/gtsam_unstable/slam/</path>
    <filename>a01445.html</filename>
    <includes id="a01022" name="NonlinearFactor.h" local="no" imported="no">gtsam/nonlinear/NonlinearFactor.h</includes>
    <includes id="a00719" name="GaussianFactor.h" local="no" imported="no">gtsam/linear/GaussianFactor.h</includes>
    <includes id="a00620" name="NoiseModel.h" local="no" imported="no">gtsam/linear/NoiseModel.h</includes>
    <includes id="a00101" name="Testable.h" local="no" imported="no">gtsam/base/Testable.h</includes>
    <includes id="a00131" name="Lie.h" local="no" imported="no">gtsam/base/Lie.h</includes>
    <class kind="class">gtsam::GaussMarkov1stOrderFactor</class>
    <class kind="struct">gtsam::traits&lt; GaussMarkov1stOrderFactor&lt; VALUE &gt; &gt;</class>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>InertialNavFactor_GlobalVelocity.h</name>
    <path>/Users/dellaert/git/github/gtsam_unstable/slam/</path>
    <filename>a01439.html</filename>
    <includes id="a01022" name="NonlinearFactor.h" local="no" imported="no">gtsam/nonlinear/NonlinearFactor.h</includes>
    <includes id="a00620" name="NoiseModel.h" local="no" imported="no">gtsam/linear/NoiseModel.h</includes>
    <includes id="a00422" name="Rot3.h" local="no" imported="no">gtsam/geometry/Rot3.h</includes>
    <includes id="a00050" name="Matrix.h" local="no" imported="no">gtsam/base/Matrix.h</includes>
    <includes id="a00125" name="numericalDerivative.h" local="no" imported="no">gtsam/base/numericalDerivative.h</includes>
    <class kind="class">gtsam::InertialNavFactor_GlobalVelocity</class>
    <class kind="struct">gtsam::traits&lt; InertialNavFactor_GlobalVelocity&lt; POSE, VELOCITY, IMUBIAS &gt; &gt;</class>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>InvDepthFactor3.h</name>
    <path>/Users/dellaert/git/github/gtsam_unstable/slam/</path>
    <filename>a01499.html</filename>
    <includes id="a00266" name="Cal3_S2.h" local="no" imported="no">gtsam/geometry/Cal3_S2.h</includes>
    <includes id="a01022" name="NonlinearFactor.h" local="no" imported="no">gtsam/nonlinear/NonlinearFactor.h</includes>
    <class kind="class">gtsam::InvDepthFactor3</class>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>InvDepthFactorVariant1.h</name>
    <path>/Users/dellaert/git/github/gtsam_unstable/slam/</path>
    <filename>a01478.html</filename>
    <includes id="a01022" name="NonlinearFactor.h" local="no" imported="no">gtsam/nonlinear/NonlinearFactor.h</includes>
    <includes id="a00314" name="PinholeCamera.h" local="no" imported="no">gtsam/geometry/PinholeCamera.h</includes>
    <includes id="a00266" name="Cal3_S2.h" local="no" imported="no">gtsam/geometry/Cal3_S2.h</includes>
    <includes id="a00350" name="Pose3.h" local="no" imported="no">gtsam/geometry/Pose3.h</includes>
    <includes id="a00380" name="Point2.h" local="no" imported="no">gtsam/geometry/Point2.h</includes>
    <includes id="a00125" name="numericalDerivative.h" local="no" imported="no">gtsam/base/numericalDerivative.h</includes>
    <class kind="class">gtsam::InvDepthFactorVariant1</class>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>InvDepthFactorVariant2.h</name>
    <path>/Users/dellaert/git/github/gtsam_unstable/slam/</path>
    <filename>a01454.html</filename>
    <includes id="a01022" name="NonlinearFactor.h" local="no" imported="no">gtsam/nonlinear/NonlinearFactor.h</includes>
    <includes id="a00314" name="PinholeCamera.h" local="no" imported="no">gtsam/geometry/PinholeCamera.h</includes>
    <includes id="a00266" name="Cal3_S2.h" local="no" imported="no">gtsam/geometry/Cal3_S2.h</includes>
    <includes id="a00350" name="Pose3.h" local="no" imported="no">gtsam/geometry/Pose3.h</includes>
    <includes id="a00380" name="Point2.h" local="no" imported="no">gtsam/geometry/Point2.h</includes>
    <includes id="a00125" name="numericalDerivative.h" local="no" imported="no">gtsam/base/numericalDerivative.h</includes>
    <class kind="class">gtsam::InvDepthFactorVariant2</class>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>InvDepthFactorVariant3.h</name>
    <path>/Users/dellaert/git/github/gtsam_unstable/slam/</path>
    <filename>a01541.html</filename>
    <includes id="a01022" name="NonlinearFactor.h" local="no" imported="no">gtsam/nonlinear/NonlinearFactor.h</includes>
    <includes id="a00314" name="PinholeCamera.h" local="no" imported="no">gtsam/geometry/PinholeCamera.h</includes>
    <includes id="a00266" name="Cal3_S2.h" local="no" imported="no">gtsam/geometry/Cal3_S2.h</includes>
    <includes id="a00350" name="Pose3.h" local="no" imported="no">gtsam/geometry/Pose3.h</includes>
    <includes id="a00380" name="Point2.h" local="no" imported="no">gtsam/geometry/Point2.h</includes>
    <includes id="a00125" name="numericalDerivative.h" local="no" imported="no">gtsam/base/numericalDerivative.h</includes>
    <class kind="class">gtsam::InvDepthFactorVariant3a</class>
    <class kind="class">gtsam::InvDepthFactorVariant3b</class>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>PartialPriorFactor.h</name>
    <path>/Users/dellaert/git/github/gtsam_unstable/slam/</path>
    <filename>a01463.html</filename>
    <includes id="a01022" name="NonlinearFactor.h" local="no" imported="no">gtsam/nonlinear/NonlinearFactor.h</includes>
    <includes id="a00131" name="Lie.h" local="no" imported="no">gtsam/base/Lie.h</includes>
    <class kind="class">gtsam::PartialPriorFactor</class>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>PosePriorFactor.h</name>
    <path>/Users/dellaert/git/github/gtsam_unstable/slam/</path>
    <filename>a01547.html</filename>
    <includes id="a01022" name="NonlinearFactor.h" local="no" imported="no">gtsam/nonlinear/NonlinearFactor.h</includes>
    <includes id="a08940" name="concepts.h" local="no" imported="no">gtsam/geometry/concepts.h</includes>
    <includes id="a00101" name="Testable.h" local="no" imported="no">gtsam/base/Testable.h</includes>
    <class kind="class">gtsam::PosePriorFactor</class>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>ProjectionFactorPPP.h</name>
    <path>/Users/dellaert/git/github/gtsam_unstable/slam/</path>
    <filename>a01505.html</filename>
    <includes id="a01022" name="NonlinearFactor.h" local="no" imported="no">gtsam/nonlinear/NonlinearFactor.h</includes>
    <includes id="a00314" name="PinholeCamera.h" local="no" imported="no">gtsam/geometry/PinholeCamera.h</includes>
    <includes id="a00266" name="Cal3_S2.h" local="no" imported="no">gtsam/geometry/Cal3_S2.h</includes>
    <class kind="class">gtsam::ProjectionFactorPPP</class>
    <class kind="struct">gtsam::traits&lt; ProjectionFactorPPP&lt; POSE, LANDMARK, CALIBRATION &gt; &gt;</class>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>ProjectionFactorPPPC.h</name>
    <path>/Users/dellaert/git/github/gtsam_unstable/slam/</path>
    <filename>a01535.html</filename>
    <includes id="a01022" name="NonlinearFactor.h" local="no" imported="no">gtsam/nonlinear/NonlinearFactor.h</includes>
    <includes id="a00314" name="PinholeCamera.h" local="no" imported="no">gtsam/geometry/PinholeCamera.h</includes>
    <includes id="a00266" name="Cal3_S2.h" local="no" imported="no">gtsam/geometry/Cal3_S2.h</includes>
    <class kind="class">gtsam::ProjectionFactorPPPC</class>
    <class kind="struct">gtsam::traits&lt; ProjectionFactorPPPC&lt; POSE, LANDMARK, CALIBRATION &gt; &gt;</class>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>ProjectionFactorRollingShutter.cpp</name>
    <path>/Users/dellaert/git/github/gtsam_unstable/slam/</path>
    <filename>a01433.html</filename>
    <includes id="a01460" name="ProjectionFactorRollingShutter.h" local="no" imported="no">gtsam_unstable/slam/ProjectionFactorRollingShutter.h</includes>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>ProjectionFactorRollingShutter.h</name>
    <path>/Users/dellaert/git/github/gtsam_unstable/slam/</path>
    <filename>a01460.html</filename>
    <includes id="a00266" name="Cal3_S2.h" local="no" imported="no">gtsam/geometry/Cal3_S2.h</includes>
    <includes id="a00302" name="CalibratedCamera.h" local="no" imported="no">gtsam/geometry/CalibratedCamera.h</includes>
    <includes id="a00314" name="PinholeCamera.h" local="no" imported="no">gtsam/geometry/PinholeCamera.h</includes>
    <includes id="a01022" name="NonlinearFactor.h" local="no" imported="no">gtsam/nonlinear/NonlinearFactor.h</includes>
    <class kind="class">gtsam::ProjectionFactorRollingShutter</class>
    <class kind="struct">gtsam::traits&lt; ProjectionFactorRollingShutter &gt;</class>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>RelativeElevationFactor.cpp</name>
    <path>/Users/dellaert/git/github/gtsam_unstable/slam/</path>
    <filename>a01457.html</filename>
    <includes id="a01517" name="RelativeElevationFactor.h" local="no" imported="no">gtsam_unstable/slam/RelativeElevationFactor.h</includes>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>RelativeElevationFactor.h</name>
    <path>/Users/dellaert/git/github/gtsam_unstable/slam/</path>
    <filename>a01517.html</filename>
    <includes id="a00350" name="Pose3.h" local="no" imported="no">gtsam/geometry/Pose3.h</includes>
    <includes id="a01022" name="NonlinearFactor.h" local="no" imported="no">gtsam/nonlinear/NonlinearFactor.h</includes>
    <class kind="class">gtsam::RelativeElevationFactor</class>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>serialization.cpp</name>
    <path>/Users/dellaert/git/github/gtsam_unstable/slam/</path>
    <filename>a01496.html</filename>
    <includes id="a08943" name="serialization.h" local="no" imported="no">gtsam/base/serialization.h</includes>
    <includes id="a08994" name="BearingRangeFactor.h" local="no" imported="no">gtsam/sam/BearingRangeFactor.h</includes>
    <includes id="a01175" name="BetweenFactor.h" local="no" imported="no">gtsam/slam/BetweenFactor.h</includes>
    <includes id="a01190" name="GeneralSFMFactor.h" local="no" imported="no">gtsam/slam/GeneralSFMFactor.h</includes>
    <includes id="a08982" name="PriorFactor.h" local="no" imported="no">gtsam/nonlinear/PriorFactor.h</includes>
    <includes id="a01154" name="ProjectionFactor.h" local="no" imported="no">gtsam/slam/ProjectionFactor.h</includes>
    <includes id="a09000" name="RangeFactor.h" local="no" imported="no">gtsam/sam/RangeFactor.h</includes>
    <includes id="a08955" name="Symbol.h" local="no" imported="no">gtsam/inference/Symbol.h</includes>
    <includes id="a00404" name="Pose2.h" local="no" imported="no">gtsam/geometry/Pose2.h</includes>
    <includes id="a00350" name="Pose3.h" local="no" imported="no">gtsam/geometry/Pose3.h</includes>
    <includes id="a00407" name="Cal3DS2.h" local="no" imported="no">gtsam/geometry/Cal3DS2.h</includes>
  </compound>
  <compound kind="file">
    <name>SmartProjectionPoseFactorRollingShutter.h</name>
    <path>/Users/dellaert/git/github/gtsam_unstable/slam/</path>
    <filename>a01475.html</filename>
    <includes id="a00284" name="CameraSet.h" local="no" imported="no">gtsam/geometry/CameraSet.h</includes>
    <includes id="a01124" name="SmartProjectionFactor.h" local="no" imported="no">gtsam/slam/SmartProjectionFactor.h</includes>
    <class kind="class">gtsam::SmartProjectionPoseFactorRollingShutter</class>
    <class kind="struct">gtsam::traits&lt; SmartProjectionPoseFactorRollingShutter&lt; CAMERA &gt; &gt;</class>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>SmartRangeFactor.h</name>
    <path>/Users/dellaert/git/github/gtsam_unstable/slam/</path>
    <filename>a01514.html</filename>
    <includes id="a01022" name="NonlinearFactor.h" local="no" imported="no">gtsam/nonlinear/NonlinearFactor.h</includes>
    <includes id="a00491" name="Key.h" local="no" imported="no">gtsam/inference/Key.h</includes>
    <includes id="a00404" name="Pose2.h" local="no" imported="no">gtsam/geometry/Pose2.h</includes>
    <class kind="class">gtsam::SmartRangeFactor</class>
    <class kind="struct">gtsam::SmartRangeFactor::Circle2</class>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>SmartStereoProjectionFactor.h</name>
    <path>/Users/dellaert/git/github/gtsam_unstable/slam/</path>
    <filename>a01442.html</filename>
    <includes id="a01157" name="SmartFactorBase.h" local="no" imported="no">gtsam/slam/SmartFactorBase.h</includes>
    <includes id="a00431" name="triangulation.h" local="no" imported="no">gtsam/geometry/triangulation.h</includes>
    <includes id="a00350" name="Pose3.h" local="no" imported="no">gtsam/geometry/Pose3.h</includes>
    <includes id="a00437" name="StereoCamera.h" local="no" imported="no">gtsam/geometry/StereoCamera.h</includes>
    <includes id="a08955" name="Symbol.h" local="no" imported="no">gtsam/inference/Symbol.h</includes>
    <includes id="a01133" name="dataset.h" local="no" imported="no">gtsam/slam/dataset.h</includes>
    <class kind="class">gtsam::SmartStereoProjectionFactor</class>
    <class kind="struct">gtsam::traits&lt; SmartStereoProjectionFactor &gt;</class>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>SmartStereoProjectionFactorPP.h</name>
    <path>/Users/dellaert/git/github/gtsam_unstable/slam/</path>
    <filename>a01523.html</filename>
    <includes id="a01442" name="SmartStereoProjectionFactor.h" local="no" imported="no">gtsam_unstable/slam/SmartStereoProjectionFactor.h</includes>
    <class kind="class">gtsam::SmartStereoProjectionFactorPP</class>
    <class kind="struct">gtsam::traits&lt; SmartStereoProjectionFactorPP &gt;</class>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>SmartStereoProjectionPoseFactor.cpp</name>
    <path>/Users/dellaert/git/github/gtsam_unstable/slam/</path>
    <filename>a01502.html</filename>
    <includes id="a01487" name="SmartStereoProjectionPoseFactor.h" local="no" imported="no">gtsam_unstable/slam/SmartStereoProjectionPoseFactor.h</includes>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>SmartStereoProjectionPoseFactor.h</name>
    <path>/Users/dellaert/git/github/gtsam_unstable/slam/</path>
    <filename>a01487.html</filename>
    <includes id="a01442" name="SmartStereoProjectionFactor.h" local="no" imported="no">gtsam_unstable/slam/SmartStereoProjectionFactor.h</includes>
    <class kind="class">gtsam::SmartStereoProjectionPoseFactor</class>
    <class kind="struct">gtsam::traits&lt; SmartStereoProjectionPoseFactor &gt;</class>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>TOAFactor.h</name>
    <path>/Users/dellaert/git/github/gtsam_unstable/slam/</path>
    <filename>a01529.html</filename>
    <class kind="class">gtsam::TOAFactor</class>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>TransformBtwRobotsUnaryFactor.h</name>
    <path>/Users/dellaert/git/github/gtsam_unstable/slam/</path>
    <filename>a01550.html</filename>
    <includes id="a01175" name="BetweenFactor.h" local="no" imported="no">gtsam/slam/BetweenFactor.h</includes>
    <includes id="a01022" name="NonlinearFactor.h" local="no" imported="no">gtsam/nonlinear/NonlinearFactor.h</includes>
    <includes id="a00719" name="GaussianFactor.h" local="no" imported="no">gtsam/linear/GaussianFactor.h</includes>
    <includes id="a00101" name="Testable.h" local="no" imported="no">gtsam/base/Testable.h</includes>
    <includes id="a00131" name="Lie.h" local="no" imported="no">gtsam/base/Lie.h</includes>
    <class kind="class">gtsam::TransformBtwRobotsUnaryFactor</class>
    <class kind="struct">gtsam::traits&lt; TransformBtwRobotsUnaryFactor&lt; VALUE &gt; &gt;</class>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>TransformBtwRobotsUnaryFactorEM.h</name>
    <path>/Users/dellaert/git/github/gtsam_unstable/slam/</path>
    <filename>a01451.html</filename>
    <includes id="a01175" name="BetweenFactor.h" local="no" imported="no">gtsam/slam/BetweenFactor.h</includes>
    <includes id="a01022" name="NonlinearFactor.h" local="no" imported="no">gtsam/nonlinear/NonlinearFactor.h</includes>
    <includes id="a00962" name="NonlinearFactorGraph.h" local="no" imported="no">gtsam/nonlinear/NonlinearFactorGraph.h</includes>
    <includes id="a00953" name="Marginals.h" local="no" imported="no">gtsam/nonlinear/Marginals.h</includes>
    <includes id="a00719" name="GaussianFactor.h" local="no" imported="no">gtsam/linear/GaussianFactor.h</includes>
    <includes id="a00101" name="Testable.h" local="no" imported="no">gtsam/base/Testable.h</includes>
    <includes id="a00131" name="Lie.h" local="no" imported="no">gtsam/base/Lie.h</includes>
    <class kind="class">gtsam::TransformBtwRobotsUnaryFactorEM</class>
    <class kind="struct">gtsam::traits&lt; TransformBtwRobotsUnaryFactorEM&lt; VALUE &gt; &gt;</class>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>TSAMFactors.h</name>
    <path>/Users/dellaert/git/github/gtsam_unstable/slam/</path>
    <filename>a01436.html</filename>
    <includes id="a00404" name="Pose2.h" local="no" imported="no">gtsam/geometry/Pose2.h</includes>
    <includes id="a01022" name="NonlinearFactor.h" local="no" imported="no">gtsam/nonlinear/NonlinearFactor.h</includes>
    <class kind="class">gtsam::DeltaFactor</class>
    <class kind="class">gtsam::DeltaFactorBase</class>
    <class kind="class">gtsam::OdometryFactorBase</class>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="struct">
    <name>gtsam::_ValuesConstKeyValuePair</name>
    <filename>a04512.html</filename>
    <templarg>class ValueType</templarg>
    <member kind="variable">
      <type>const Key</type>
      <name>key</name>
      <anchorfile>a04512.html</anchorfile>
      <anchor>ad1598dd19527916716fe26a436e62a7f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const ValueType &amp;</type>
      <name>value</name>
      <anchorfile>a04512.html</anchorfile>
      <anchor>aef604e97b3cf7d6d4036d11e341f89dd</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>gtsam::_ValuesKeyValuePair</name>
    <filename>a04508.html</filename>
    <templarg>class ValueType</templarg>
    <member kind="variable">
      <type>const Key</type>
      <name>key</name>
      <anchorfile>a04508.html</anchorfile>
      <anchor>aa928242396405483048bedd4a00e804c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ValueType &amp;</type>
      <name>value</name>
      <anchorfile>a04508.html</anchorfile>
      <anchor>ae0b729df9ea00bfe21c8f127881eb7b2</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::AcceleratedPowerMethod</name>
    <filename>a03668.html</filename>
    <templarg>class Operator</templarg>
    <base>gtsam::PowerMethod</base>
    <member kind="function">
      <type></type>
      <name>AcceleratedPowerMethod</name>
      <anchorfile>a03668.html</anchorfile>
      <anchor>a1aae79479b85879cc10e97f081dcfd19</anchor>
      <arglist>(const Operator &amp;A, const boost::optional&lt; Vector &gt; initial=boost::none, double initialBeta=0.0)</arglist>
    </member>
    <member kind="function">
      <type>Vector</type>
      <name>acceleratedPowerIteration</name>
      <anchorfile>a03668.html</anchorfile>
      <anchor>a0d290aa81fbfb4db02d9f3a8790ceb85</anchor>
      <arglist>(const Vector &amp;x1, const Vector &amp;x0, const double beta) const</arglist>
    </member>
    <member kind="function">
      <type>Vector</type>
      <name>acceleratedPowerIteration</name>
      <anchorfile>a03668.html</anchorfile>
      <anchor>ac48562a928acf0285d918f0312e5f9f9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>estimateBeta</name>
      <anchorfile>a03668.html</anchorfile>
      <anchor>a21ae63aed0ead222ca8e7bb334a4877c</anchor>
      <arglist>(const size_t T=10) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>compute</name>
      <anchorfile>a03668.html</anchorfile>
      <anchor>ad7509723eb7602fc1b911bbde6061055</anchor>
      <arglist>(size_t maxIterations, double tol)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::AcceleratingScenario</name>
    <filename>a04180.html</filename>
    <base>gtsam::Scenario</base>
    <member kind="function">
      <type></type>
      <name>AcceleratingScenario</name>
      <anchorfile>a04180.html</anchorfile>
      <anchor>ad0533d44571308b0098013ac11f65da1</anchor>
      <arglist>(const Rot3 &amp;nRb, const Point3 &amp;p0, const Vector3 &amp;v0, const Vector3 &amp;a_n, const Vector3 &amp;omega_b=Vector3::Zero())</arglist>
    </member>
    <member kind="function">
      <type>Pose3</type>
      <name>pose</name>
      <anchorfile>a04180.html</anchorfile>
      <anchor>a03b62443f7f87f435e3d8fdfede0f7a9</anchor>
      <arglist>(double t) const override</arglist>
    </member>
    <member kind="function">
      <type>Vector3</type>
      <name>omega_b</name>
      <anchorfile>a04180.html</anchorfile>
      <anchor>aa7499c8fbe12ca4238e40334548e1d06</anchor>
      <arglist>(double t) const override</arglist>
    </member>
    <member kind="function">
      <type>Vector3</type>
      <name>velocity_n</name>
      <anchorfile>a04180.html</anchorfile>
      <anchor>aed78128a8d22e10539cff5352c0f8790</anchor>
      <arglist>(double t) const override</arglist>
    </member>
    <member kind="function">
      <type>Vector3</type>
      <name>acceleration_n</name>
      <anchorfile>a04180.html</anchorfile>
      <anchor>add38095518e49172780a6479d67f13a9</anchor>
      <arglist>(double t) const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::ActiveSetSolver</name>
    <filename>a05032.html</filename>
    <templarg>class PROBLEM</templarg>
    <templarg>class POLICY</templarg>
    <templarg>class INITSOLVER</templarg>
    <member kind="function">
      <type></type>
      <name>ActiveSetSolver</name>
      <anchorfile>a05032.html</anchorfile>
      <anchor>abfcc406843118c6bfd09c3c8efcb45c3</anchor>
      <arglist>(const PROBLEM &amp;problem)</arglist>
    </member>
    <member kind="function">
      <type>std::pair&lt; VectorValues, VectorValues &gt;</type>
      <name>optimize</name>
      <anchorfile>a05032.html</anchorfile>
      <anchor>a47dd67ea1633043cc9da734022cd40e6</anchor>
      <arglist>(const VectorValues &amp;initialValues, const VectorValues &amp;duals=VectorValues(), bool useWarmStart=false) const</arglist>
    </member>
    <member kind="function">
      <type>std::pair&lt; VectorValues, VectorValues &gt;</type>
      <name>optimize</name>
      <anchorfile>a05032.html</anchorfile>
      <anchor>aca5280f316f3f4b88bd0d51600b1f7a7</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>GaussianFactorGraph</type>
      <name>buildDualGraph</name>
      <anchorfile>a05032.html</anchorfile>
      <anchor>ae8e2736d409cfb4ac65871d7709e6958</anchor>
      <arglist>(const InequalityFactorGraph &amp;workingSet, const VectorValues &amp;delta) const</arglist>
    </member>
    <member kind="function">
      <type>GaussianFactorGraph</type>
      <name>buildWorkingGraph</name>
      <anchorfile>a05032.html</anchorfile>
      <anchor>aa9dd2e1525a8b6d08969609f363ae901</anchor>
      <arglist>(const InequalityFactorGraph &amp;workingSet, const VectorValues &amp;xk=VectorValues()) const</arglist>
    </member>
    <member kind="function">
      <type>State</type>
      <name>iterate</name>
      <anchorfile>a05032.html</anchorfile>
      <anchor>af6c0a982aaff58ee34bf144f593cef74</anchor>
      <arglist>(const State &amp;state) const</arglist>
    </member>
    <member kind="function">
      <type>InequalityFactorGraph</type>
      <name>identifyActiveConstraints</name>
      <anchorfile>a05032.html</anchorfile>
      <anchor>a14fa9e5ec8f3b5d9e18216796a012d55</anchor>
      <arglist>(const InequalityFactorGraph &amp;inequalities, const VectorValues &amp;initialValues, const VectorValues &amp;duals=VectorValues(), bool useWarmStart=false) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>identifyLeavingConstraint</name>
      <anchorfile>a05032.html</anchorfile>
      <anchor>a4d3cbaac6427014110104e466cb02686</anchor>
      <arglist>(const InequalityFactorGraph &amp;workingSet, const VectorValues &amp;lambdas) const</arglist>
    </member>
    <class kind="struct">gtsam::ActiveSetSolver::State</class>
    <member kind="typedef" protection="protected">
      <type>std::vector&lt; std::pair&lt; Key, Matrix &gt; &gt;</type>
      <name>TermsContainer</name>
      <anchorfile>a05032.html</anchorfile>
      <anchor>a66254e59fcb0c1aa781cbd23fe6ad6f0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type>boost::tuple&lt; double, int &gt;</type>
      <name>computeStepSize</name>
      <anchorfile>a05032.html</anchorfile>
      <anchor>aace52b474074a2db2be3b063f51d96ab</anchor>
      <arglist>(const InequalityFactorGraph &amp;workingSet, const VectorValues &amp;xk, const VectorValues &amp;p, const double &amp;maxAlpha) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>TermsContainer</type>
      <name>collectDualJacobians</name>
      <anchorfile>a05032.html</anchorfile>
      <anchor>abb983a9712d899f46f6700a113ea7396</anchor>
      <arglist>(Key key, const FactorGraph&lt; FACTOR &gt; &amp;graph, const VariableIndex &amp;variableIndex) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>JacobianFactor::shared_ptr</type>
      <name>createDualFactor</name>
      <anchorfile>a05032.html</anchorfile>
      <anchor>a101e52c70d786db4bd0146c05ca16cc5</anchor>
      <arglist>(Key key, const InequalityFactorGraph &amp;workingSet, const VectorValues &amp;delta) const</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const PROBLEM &amp;</type>
      <name>problem_</name>
      <anchorfile>a05032.html</anchorfile>
      <anchor>a4bd8cdf7f1d08d4e958bb1261134bb59</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>VariableIndex</type>
      <name>inequalityVariableIndex_</name>
      <anchorfile>a05032.html</anchorfile>
      <anchor>a2fb4596033e63b58f880e398155822be</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>KeySet</type>
      <name>constrainedKeys_</name>
      <anchorfile>a05032.html</anchorfile>
      <anchor>a265e18a8ff62cd724b61f4c51f81dae0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::AdaptAutoDiff</name>
    <filename>a04192.html</filename>
    <templarg>typename FUNCTOR</templarg>
    <templarg>int M</templarg>
    <templarg>int N1</templarg>
    <templarg>int N2</templarg>
  </compound>
  <compound kind="struct">
    <name>gtsam::additive_group_tag</name>
    <filename>a02508.html</filename>
  </compound>
  <compound kind="class">
    <name>gtsam::AHRS</name>
    <filename>a05232.html</filename>
    <member kind="function">
      <type></type>
      <name>AHRS</name>
      <anchorfile>a05232.html</anchorfile>
      <anchor>a81375ea82571d777fa83ac7d6b287055</anchor>
      <arglist>(const Matrix &amp;stationaryU, const Matrix &amp;stationaryF, double g_e, bool flat=false)</arglist>
    </member>
    <member kind="function">
      <type>std::pair&lt; Mechanization_bRn2, KalmanFilter::State &gt;</type>
      <name>aid</name>
      <anchorfile>a05232.html</anchorfile>
      <anchor>a88d78ca524f7c2cfc41999edeb8c3ba3</anchor>
      <arglist>(const Mechanization_bRn2 &amp;mech, KalmanFilter::State state, const Vector &amp;f, bool Farrell=0) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>a05232.html</anchorfile>
      <anchor>aa00999e95f9254e05ed2092f20fda6d1</anchor>
      <arglist>(const std::string &amp;s=&quot;&quot;) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::AHRSFactor</name>
    <filename>a04028.html</filename>
    <base>NoiseModelFactor3&lt; Rot3, Rot3, Vector3 &gt;</base>
    <member kind="function">
      <type></type>
      <name>AHRSFactor</name>
      <anchorfile>a04028.html</anchorfile>
      <anchor>a358af0919ed5a0349777771c393ba57a</anchor>
      <arglist>(Key rot_i, Key rot_j, Key bias, const PreintegratedAhrsMeasurements &amp;preintegratedMeasurements)</arglist>
    </member>
    <member kind="function">
      <type>gtsam::NonlinearFactor::shared_ptr</type>
      <name>clone</name>
      <anchorfile>a04028.html</anchorfile>
      <anchor>a9d1d2818b446d3317176b3fbf627deb4</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>a04028.html</anchorfile>
      <anchor>a2e06d3a8b2a3e7758bcf9c3eddb2daff</anchor>
      <arglist>(const std::string &amp;s, const KeyFormatter &amp;keyFormatter=DefaultKeyFormatter) const override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>equals</name>
      <anchorfile>a04028.html</anchorfile>
      <anchor>aa227deac8876345a006505eab99d33d6</anchor>
      <arglist>(const NonlinearFactor &amp;, double tol=1e-9) const override</arglist>
    </member>
    <member kind="function">
      <type>const PreintegratedAhrsMeasurements &amp;</type>
      <name>preintegratedMeasurements</name>
      <anchorfile>a04028.html</anchorfile>
      <anchor>a8153c8fd99cd74b6fc12c42cf30e3846</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Vector</type>
      <name>evaluateError</name>
      <anchorfile>a04028.html</anchorfile>
      <anchor>a07b5860f7924482380a6e8c675035cb0</anchor>
      <arglist>(const Rot3 &amp;rot_i, const Rot3 &amp;rot_j, const Vector3 &amp;bias, boost::optional&lt; Matrix &amp; &gt; H1=boost::none, boost::optional&lt; Matrix &amp; &gt; H2=boost::none, boost::optional&lt; Matrix &amp; &gt; H3=boost::none) const override</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>AHRSFactor</name>
      <anchorfile>a04028.html</anchorfile>
      <anchor>ada50846eb6e3d2b7a39f87d88119890a</anchor>
      <arglist>(Key rot_i, Key rot_j, Key bias, const PreintegratedMeasurements &amp;preintegratedMeasurements, const Vector3 &amp;omegaCoriolis, const boost::optional&lt; Pose3 &gt; &amp;body_P_sensor=boost::none)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Rot3</type>
      <name>Predict</name>
      <anchorfile>a04028.html</anchorfile>
      <anchor>ae854b6b6845ad3f334a196ccfa51512b</anchor>
      <arglist>(const Rot3 &amp;rot_i, const Vector3 &amp;bias, const PreintegratedAhrsMeasurements preintegratedMeasurements)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Rot3</type>
      <name>predict</name>
      <anchorfile>a04028.html</anchorfile>
      <anchor>ad8889ed4efa158474b7a505f5fa916a2</anchor>
      <arglist>(const Rot3 &amp;rot_i, const Vector3 &amp;bias, const PreintegratedMeasurements preintegratedMeasurements, const Vector3 &amp;omegaCoriolis, const boost::optional&lt; Pose3 &gt; &amp;body_P_sensor=boost::none)</arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; AHRSFactor &gt;</type>
      <name>shared_ptr</name>
      <anchorfile>a04028.html</anchorfile>
      <anchor>af1b0ec037d45455b8988aecf32f79cf5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>PreintegratedAhrsMeasurements</type>
      <name>PreintegratedMeasurements</name>
      <anchorfile>a04028.html</anchorfile>
      <anchor>a189943052e9d7d873934a421ee70a682</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>boost::serialization::access</name>
      <anchorfile>a04028.html</anchorfile>
      <anchor>ac98d07dd8f7b70e16ccb9a01abf56b9c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::AlgebraicDecisionTree</name>
    <filename>a02904.html</filename>
    <templarg>typename L</templarg>
    <base>DecisionTree&lt; L, double &gt;</base>
    <member kind="function">
      <type></type>
      <name>AlgebraicDecisionTree</name>
      <anchorfile>a02904.html</anchorfile>
      <anchor>a4e42a5ca3fc306d2d83c88dd3532f71d</anchor>
      <arglist>(const L &amp;label, double y1, double y2)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>AlgebraicDecisionTree</name>
      <anchorfile>a02904.html</anchorfile>
      <anchor>a685a8ae8b9bdd8b65f33752b83bf0a1d</anchor>
      <arglist>(const typename Super::LabelC &amp;labelC, double y1, double y2)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>AlgebraicDecisionTree</name>
      <anchorfile>a02904.html</anchorfile>
      <anchor>a002710ce70616775068257c29a2e4778</anchor>
      <arglist>(const std::vector&lt; typename Super::LabelC &gt; &amp;labelCs, const std::vector&lt; double &gt; &amp;ys)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>AlgebraicDecisionTree</name>
      <anchorfile>a02904.html</anchorfile>
      <anchor>aca8f0d3a93b0e6ebeb69b673495b4192</anchor>
      <arglist>(const std::vector&lt; typename Super::LabelC &gt; &amp;labelCs, const std::string &amp;table)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>AlgebraicDecisionTree</name>
      <anchorfile>a02904.html</anchorfile>
      <anchor>af0cd622a320a4a202473ebae5dd289a7</anchor>
      <arglist>(Iterator begin, Iterator end, const L &amp;label)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>AlgebraicDecisionTree</name>
      <anchorfile>a02904.html</anchorfile>
      <anchor>a3cd971460a346293b80eae2f125c5bbe</anchor>
      <arglist>(const AlgebraicDecisionTree&lt; M &gt; &amp;other, const std::map&lt; M, L &gt; &amp;map)</arglist>
    </member>
    <member kind="function">
      <type>AlgebraicDecisionTree</type>
      <name>operator+</name>
      <anchorfile>a02904.html</anchorfile>
      <anchor>a73d781b3f789fe5361ac8ce253799585</anchor>
      <arglist>(const AlgebraicDecisionTree &amp;g) const</arglist>
    </member>
    <member kind="function">
      <type>AlgebraicDecisionTree</type>
      <name>operator*</name>
      <anchorfile>a02904.html</anchorfile>
      <anchor>ad4d6619ec05009c9a0e83ae23b772e03</anchor>
      <arglist>(const AlgebraicDecisionTree &amp;g) const</arglist>
    </member>
    <member kind="function">
      <type>AlgebraicDecisionTree</type>
      <name>operator/</name>
      <anchorfile>a02904.html</anchorfile>
      <anchor>a0fb758bf01cbb66dfb631913f150ed00</anchor>
      <arglist>(const AlgebraicDecisionTree &amp;g) const</arglist>
    </member>
    <member kind="function">
      <type>AlgebraicDecisionTree</type>
      <name>sum</name>
      <anchorfile>a02904.html</anchorfile>
      <anchor>a12a2cd3038c73481b8af276cf5aeea25</anchor>
      <arglist>(const L &amp;label, size_t cardinality) const</arglist>
    </member>
    <member kind="function">
      <type>AlgebraicDecisionTree</type>
      <name>sum</name>
      <anchorfile>a02904.html</anchorfile>
      <anchor>ac453ade59229c14bec87a4dd8f5d7884</anchor>
      <arglist>(const typename Super::LabelC &amp;labelC) const</arglist>
    </member>
    <class kind="struct">gtsam::AlgebraicDecisionTree::Ring</class>
  </compound>
  <compound kind="class">
    <name>gtsam::AllDiff</name>
    <filename>a05000.html</filename>
    <base>gtsam::Constraint</base>
    <member kind="function">
      <type></type>
      <name>AllDiff</name>
      <anchorfile>a05000.html</anchorfile>
      <anchor>abdf1c9f275b8408bc8c808d32a5a614e</anchor>
      <arglist>(const DiscreteKeys &amp;dkeys)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>a05000.html</anchorfile>
      <anchor>aa72890371ba33200e560e849c5d124cf</anchor>
      <arglist>(const std::string &amp;s=&quot;&quot;, const KeyFormatter &amp;formatter=DefaultKeyFormatter) const override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>equals</name>
      <anchorfile>a05000.html</anchorfile>
      <anchor>a1e9ca236489eef0461f41f607f1c9ff4</anchor>
      <arglist>(const DiscreteFactor &amp;other, double tol) const override</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>operator()</name>
      <anchorfile>a05000.html</anchorfile>
      <anchor>ad5dcdc06edb02db7654c6dda0a446410</anchor>
      <arglist>(const Values &amp;values) const override</arglist>
    </member>
    <member kind="function">
      <type>DecisionTreeFactor</type>
      <name>toDecisionTreeFactor</name>
      <anchorfile>a05000.html</anchorfile>
      <anchor>a894ec427dbbe3122547f7c8b5fcf62a0</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>DecisionTreeFactor</type>
      <name>operator*</name>
      <anchorfile>a05000.html</anchorfile>
      <anchor>a6323dec5c64c7791b1f64270577cf338</anchor>
      <arglist>(const DecisionTreeFactor &amp;f) const override</arglist>
    </member>
    <member kind="function">
      <type>Constraint::shared_ptr</type>
      <name>partiallyApply</name>
      <anchorfile>a05000.html</anchorfile>
      <anchor>a48478a7f7dff0dbd5e68fcf4ec5c33bd</anchor>
      <arglist>(const Values &amp;) const override</arglist>
    </member>
    <member kind="function">
      <type>Constraint::shared_ptr</type>
      <name>partiallyApply</name>
      <anchorfile>a05000.html</anchorfile>
      <anchor>a022140fe6c87e3d97b047f7e45df87c3</anchor>
      <arglist>(const std::vector&lt; Domain &gt; &amp;) const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::AntiFactor</name>
    <filename>a04680.html</filename>
    <base>gtsam::NonlinearFactor</base>
    <member kind="function">
      <type></type>
      <name>AntiFactor</name>
      <anchorfile>a04680.html</anchorfile>
      <anchor>a344e9905b3dbb09d34599cf6c59ccbf7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>AntiFactor</name>
      <anchorfile>a04680.html</anchorfile>
      <anchor>a0db982b2aa42e353e2c17e0ebf379602</anchor>
      <arglist>(NonlinearFactor::shared_ptr factor)</arglist>
    </member>
    <member kind="function">
      <type>gtsam::NonlinearFactor::shared_ptr</type>
      <name>clone</name>
      <anchorfile>a04680.html</anchorfile>
      <anchor>aaae5776982262946ead794d553e860ff</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>a04680.html</anchorfile>
      <anchor>a85a0261a0789115da7828b5b04f1fbbd</anchor>
      <arglist>(const std::string &amp;s, const KeyFormatter &amp;keyFormatter=DefaultKeyFormatter) const override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>equals</name>
      <anchorfile>a04680.html</anchorfile>
      <anchor>a265ec05a29991ad5c17d2691f72d29c5</anchor>
      <arglist>(const NonlinearFactor &amp;expected, double tol=1e-9) const override</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>error</name>
      <anchorfile>a04680.html</anchorfile>
      <anchor>aa3ead8c96602e00982780d3a617324f7</anchor>
      <arglist>(const Values &amp;c) const override</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>dim</name>
      <anchorfile>a04680.html</anchorfile>
      <anchor>a5b8f8c34f7d3515305e304236101a1b8</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>active</name>
      <anchorfile>a04680.html</anchorfile>
      <anchor>a3fdebc4b065e26aa40d0cce310acf210</anchor>
      <arglist>(const Values &amp;c) const override</arglist>
    </member>
    <member kind="function">
      <type>boost::shared_ptr&lt; GaussianFactor &gt;</type>
      <name>linearize</name>
      <anchorfile>a04680.html</anchorfile>
      <anchor>a355ce48d06237150a1f4952c354fc588</anchor>
      <arglist>(const Values &amp;c) const override</arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>boost::serialization::access</name>
      <anchorfile>a04680.html</anchorfile>
      <anchor>ac98d07dd8f7b70e16ccb9a01abf56b9c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>gtsam::internal::apply_compose</name>
    <filename>a04220.html</filename>
    <templarg>class T</templarg>
  </compound>
  <compound kind="struct">
    <name>gtsam::internal::apply_compose&lt; double &gt;</name>
    <filename>a04224.html</filename>
  </compound>
  <compound kind="class">
    <name>gtsam::Assignment</name>
    <filename>a02912.html</filename>
    <templarg>class L</templarg>
  </compound>
  <compound kind="class">
    <name>gtsam::AttitudeFactor</name>
    <filename>a04032.html</filename>
    <member kind="function">
      <type></type>
      <name>AttitudeFactor</name>
      <anchorfile>a04032.html</anchorfile>
      <anchor>ada258d635483d37d32ce3b219e3f9186</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>AttitudeFactor</name>
      <anchorfile>a04032.html</anchorfile>
      <anchor>a9d407978a1737d54d14bf020ce489a0c</anchor>
      <arglist>(const Unit3 &amp;nZ, const Unit3 &amp;bRef=Unit3(0, 0, 1))</arglist>
    </member>
    <member kind="function">
      <type>Vector</type>
      <name>attitudeError</name>
      <anchorfile>a04032.html</anchorfile>
      <anchor>a18f856baebcf6c0b2375843048b4f412</anchor>
      <arglist>(const Rot3 &amp;p, OptionalJacobian&lt; 2, 3 &gt; H=boost::none) const</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Unit3</type>
      <name>bRef_</name>
      <anchorfile>a04032.html</anchorfile>
      <anchor>a7fdaeee023779be5e5e49a45f6617a04</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>boost::serialization::access</name>
      <anchorfile>a04032.html</anchorfile>
      <anchor>ac98d07dd8f7b70e16ccb9a01abf56b9c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::internal::AutoTicToc</name>
    <filename>a02688.html</filename>
  </compound>
  <compound kind="class">
    <name>gtsam::noiseModel::Base</name>
    <filename>a03872.html</filename>
    <member kind="function">
      <type></type>
      <name>Base</name>
      <anchorfile>a03872.html</anchorfile>
      <anchor>af3c6026adff03fe3f98f6fa16564bdfa</anchor>
      <arglist>(size_t dim=1)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isConstrained</name>
      <anchorfile>a03872.html</anchorfile>
      <anchor>a10cbb983bdd401c3d20b26adcdef02f2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isUnit</name>
      <anchorfile>a03872.html</anchorfile>
      <anchor>a48ee92a4ce6f6e9965dc2a928fc1e849</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>dim</name>
      <anchorfile>a03872.html</anchorfile>
      <anchor>a1227a3b20fdc80cdd73b682230c6e6fc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Vector</type>
      <name>sigmas</name>
      <anchorfile>a03872.html</anchorfile>
      <anchor>a48d242c6139ddf86815c65d860b9223b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual Vector</type>
      <name>whiten</name>
      <anchorfile>a03872.html</anchorfile>
      <anchor>a24b86160149f31a2ff20bec1d99bdc40</anchor>
      <arglist>(const Vector &amp;v) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual Matrix</type>
      <name>Whiten</name>
      <anchorfile>a03872.html</anchorfile>
      <anchor>ae2460797b2ba4cf8aa3fa7314c4352a4</anchor>
      <arglist>(const Matrix &amp;H) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual Vector</type>
      <name>unwhiten</name>
      <anchorfile>a03872.html</anchorfile>
      <anchor>ad80869425e9f6334f77f01da9fbed28b</anchor>
      <arglist>(const Vector &amp;v) const =0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>squaredMahalanobisDistance</name>
      <anchorfile>a03872.html</anchorfile>
      <anchor>a5bf67e2ab8d87bf749d6258a18f8860b</anchor>
      <arglist>(const Vector &amp;v) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>mahalanobisDistance</name>
      <anchorfile>a03872.html</anchorfile>
      <anchor>a381eb3c71bf890c8477115be6567a7df</anchor>
      <arglist>(const Vector &amp;v) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>loss</name>
      <anchorfile>a03872.html</anchorfile>
      <anchor>adb541f4d71b2cc042dc8a4ecd19ba432</anchor>
      <arglist>(const double squared_distance) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>whitenInPlace</name>
      <anchorfile>a03872.html</anchorfile>
      <anchor>a11dc92b7aee00150dcc3f4a78bf373a9</anchor>
      <arglist>(Vector &amp;v) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>unwhitenInPlace</name>
      <anchorfile>a03872.html</anchorfile>
      <anchor>ae0990ff9ab2ffb0b0699dde29fcd2d16</anchor>
      <arglist>(Vector &amp;v) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>whitenInPlace</name>
      <anchorfile>a03872.html</anchorfile>
      <anchor>a226da48948c4725934d35b989fbe1d48</anchor>
      <arglist>(Eigen::Block&lt; Vector &gt; &amp;v) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>unwhitenInPlace</name>
      <anchorfile>a03872.html</anchorfile>
      <anchor>a1b4c980ddc0ded8d103c62970b7a01bd</anchor>
      <arglist>(Eigen::Block&lt; Vector &gt; &amp;v) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Vector</type>
      <name>unweightedWhiten</name>
      <anchorfile>a03872.html</anchorfile>
      <anchor>a5bb304fee021a23c0fb64ee881e9ef8a</anchor>
      <arglist>(const Vector &amp;v) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>weight</name>
      <anchorfile>a03872.html</anchorfile>
      <anchor>a59184475444cc7c437cfe0862f722952</anchor>
      <arglist>(const Vector &amp;v) const</arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>boost::serialization::access</name>
      <anchorfile>a03872.html</anchorfile>
      <anchor>ac98d07dd8f7b70e16ccb9a01abf56b9c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::noiseModel::mEstimator::Base</name>
    <filename>a03832.html</filename>
    <member kind="function">
      <type>Vector</type>
      <name>weight</name>
      <anchorfile>a03832.html</anchorfile>
      <anchor>a91b748d275ce0c13d9b76c580c6d29a9</anchor>
      <arglist>(const Vector &amp;error) const</arglist>
    </member>
    <member kind="function">
      <type>Vector</type>
      <name>sqrtWeight</name>
      <anchorfile>a03832.html</anchorfile>
      <anchor>a3e620f2a766b0a890426a961eedefb72</anchor>
      <arglist>(const Vector &amp;error) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reweight</name>
      <anchorfile>a03832.html</anchorfile>
      <anchor>a7b99210b97477669026faafe4c1c5f86</anchor>
      <arglist>(Vector &amp;error) const</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ReweightScheme</type>
      <name>reweight_</name>
      <anchorfile>a03832.html</anchorfile>
      <anchor>a324ead5e657531310058f768f9daf0e8</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>boost::serialization::access</name>
      <anchorfile>a03832.html</anchorfile>
      <anchor>ac98d07dd8f7b70e16ccb9a01abf56b9c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::Basis</name>
    <filename>a02812.html</filename>
    <templarg>typename DERIVED</templarg>
    <member kind="function" static="yes">
      <type>static Matrix</type>
      <name>WeightMatrix</name>
      <anchorfile>a02812.html</anchorfile>
      <anchor>a9da2e7dcdb5466d656a8d03b6444dde4</anchor>
      <arglist>(size_t N, const Vector &amp;X)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Matrix</type>
      <name>WeightMatrix</name>
      <anchorfile>a02812.html</anchorfile>
      <anchor>a93042a16e34baea05f9e10810244b0cf</anchor>
      <arglist>(size_t N, const Vector &amp;X, double a, double b)</arglist>
    </member>
    <class kind="class">gtsam::Basis::ComponentDerivativeFunctor</class>
    <class kind="class">gtsam::Basis::DerivativeFunctor</class>
    <class kind="class">gtsam::Basis::DerivativeFunctorBase</class>
    <class kind="class">gtsam::Basis::EvaluationFunctor</class>
    <class kind="class">gtsam::Basis::ManifoldEvaluationFunctor</class>
    <class kind="class">gtsam::Basis::VectorComponentFunctor</class>
    <class kind="class">gtsam::Basis::VectorDerivativeFunctor</class>
    <class kind="class">gtsam::Basis::VectorEvaluationFunctor</class>
  </compound>
  <compound kind="class">
    <name>gtsam::BatchFixedLagSmoother</name>
    <filename>a05132.html</filename>
    <base>gtsam::FixedLagSmoother</base>
    <member kind="function">
      <type></type>
      <name>BatchFixedLagSmoother</name>
      <anchorfile>a05132.html</anchorfile>
      <anchor>ab29c77142aaf1d7342f52a5f8d3336ae</anchor>
      <arglist>(double smootherLag=0.0, const LevenbergMarquardtParams &amp;parameters=LevenbergMarquardtParams(), bool enforceConsistency=true)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~BatchFixedLagSmoother</name>
      <anchorfile>a05132.html</anchorfile>
      <anchor>ac6d2e8437cbe1523ab054400bea91062</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>a05132.html</anchorfile>
      <anchor>a8cae5acc7e4d5482cd1ece3025883c42</anchor>
      <arglist>(const std::string &amp;s=&quot;BatchFixedLagSmoother:\n&quot;, const KeyFormatter &amp;keyFormatter=DefaultKeyFormatter) const override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>equals</name>
      <anchorfile>a05132.html</anchorfile>
      <anchor>a8a938b52f979c9e6cdedd53e26fbf46e</anchor>
      <arglist>(const FixedLagSmoother &amp;rhs, double tol=1e-9) const override</arglist>
    </member>
    <member kind="function">
      <type>Result</type>
      <name>update</name>
      <anchorfile>a05132.html</anchorfile>
      <anchor>a33ff611b1bc4a1f8127eb7dafcf9515a</anchor>
      <arglist>(const NonlinearFactorGraph &amp;newFactors=NonlinearFactorGraph(), const Values &amp;newTheta=Values(), const KeyTimestampMap &amp;timestamps=KeyTimestampMap(), const FactorIndices &amp;factorsToRemove=FactorIndices()) override</arglist>
    </member>
    <member kind="function">
      <type>Values</type>
      <name>calculateEstimate</name>
      <anchorfile>a05132.html</anchorfile>
      <anchor>a31a3025fe1e5575d8397bc078c44e017</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>VALUE</type>
      <name>calculateEstimate</name>
      <anchorfile>a05132.html</anchorfile>
      <anchor>a15698a5fa5301468f4a8f36b2970333e</anchor>
      <arglist>(Key key) const</arglist>
    </member>
    <member kind="function">
      <type>const LevenbergMarquardtParams &amp;</type>
      <name>params</name>
      <anchorfile>a05132.html</anchorfile>
      <anchor>a2ba085b1bf2ef7844f7e5f483d836e93</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>LevenbergMarquardtParams &amp;</type>
      <name>params</name>
      <anchorfile>a05132.html</anchorfile>
      <anchor>a77ba94dc6378d6745f3e54d07db61771</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const NonlinearFactorGraph &amp;</type>
      <name>getFactors</name>
      <anchorfile>a05132.html</anchorfile>
      <anchor>ac7f0f7cef8930c339762aaa0e544af16</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Values &amp;</type>
      <name>getLinearizationPoint</name>
      <anchorfile>a05132.html</anchorfile>
      <anchor>a04b008240cb2de6442d1bc0c11f048aa</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Ordering &amp;</type>
      <name>getOrdering</name>
      <anchorfile>a05132.html</anchorfile>
      <anchor>a6869c6b1e1c15ec51dc5c42a6b352e63</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const VectorValues &amp;</type>
      <name>getDelta</name>
      <anchorfile>a05132.html</anchorfile>
      <anchor>ae12188a1904368cea3c10544dca2ddb2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Matrix</type>
      <name>marginalCovariance</name>
      <anchorfile>a05132.html</anchorfile>
      <anchor>ad919a50751623bffa87332e8fe8fcff6</anchor>
      <arglist>(Key key) const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static GaussianFactorGraph</type>
      <name>CalculateMarginalFactors</name>
      <anchorfile>a05132.html</anchorfile>
      <anchor>a7bf47ab6825cee92505c325a435e115d</anchor>
      <arglist>(const GaussianFactorGraph &amp;graph, const KeyVector &amp;keys, const GaussianFactorGraph::Eliminate &amp;eliminateFunction=EliminatePreferCholesky)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static NonlinearFactorGraph</type>
      <name>CalculateMarginalFactors</name>
      <anchorfile>a05132.html</anchorfile>
      <anchor>acb475dd61ea205e4f83d64571240c6c2</anchor>
      <arglist>(const NonlinearFactorGraph &amp;graph, const Values &amp;theta, const KeyVector &amp;keys, const GaussianFactorGraph::Eliminate &amp;eliminateFunction=EliminatePreferCholesky)</arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; BatchFixedLagSmoother &gt;</type>
      <name>shared_ptr</name>
      <anchorfile>a05132.html</anchorfile>
      <anchor>a3b8e4c8ee0ce560ec6a1d6d547bfb9b8</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>std::map&lt; Key, std::set&lt; Key &gt; &gt;</type>
      <name>FactorIndex</name>
      <anchorfile>a05132.html</anchorfile>
      <anchor>a5a865e6461cf4aade83efb2c832e9212</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>insertFactors</name>
      <anchorfile>a05132.html</anchorfile>
      <anchor>a278b992e33b5d0b88643360df47eccd4</anchor>
      <arglist>(const NonlinearFactorGraph &amp;newFactors)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>removeFactors</name>
      <anchorfile>a05132.html</anchorfile>
      <anchor>a6448b93cf7a7dab36b4816eb91efea3b</anchor>
      <arglist>(const std::set&lt; size_t &gt; &amp;deleteFactors)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>eraseKeys</name>
      <anchorfile>a05132.html</anchorfile>
      <anchor>a7d4c6aef241f3e829e53e4d216a8f727</anchor>
      <arglist>(const KeyVector &amp;keys)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>reorder</name>
      <anchorfile>a05132.html</anchorfile>
      <anchor>aeb8451d2dcb91918ec5ea8d284b61f08</anchor>
      <arglist>(const KeyVector &amp;marginalizeKeys=KeyVector())</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>Result</type>
      <name>optimize</name>
      <anchorfile>a05132.html</anchorfile>
      <anchor>ae6d2f72cadbe29a15e8322cb907345bd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>marginalize</name>
      <anchorfile>a05132.html</anchorfile>
      <anchor>a1b20b07b22befc587ecdd4290344dad1</anchor>
      <arglist>(const KeyVector &amp;marginalizableKeys)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>LevenbergMarquardtParams</type>
      <name>parameters_</name>
      <anchorfile>a05132.html</anchorfile>
      <anchor>a992cf7a5870a02da2e2ff30d3ea2bbca</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>enforceConsistency_</name>
      <anchorfile>a05132.html</anchorfile>
      <anchor>a66303e6b44bc6e49ce9a142a3c5c5b78</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>NonlinearFactorGraph</type>
      <name>factors_</name>
      <anchorfile>a05132.html</anchorfile>
      <anchor>a0f13807b691183a63d0d2f6f0900a468</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Values</type>
      <name>theta_</name>
      <anchorfile>a05132.html</anchorfile>
      <anchor>a107d44e8ccce2bfdb8742fa4c00c9960</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Values</type>
      <name>linearKeys_</name>
      <anchorfile>a05132.html</anchorfile>
      <anchor>afefeef296bb47a6738d4d3348c25e6cb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Ordering</type>
      <name>ordering_</name>
      <anchorfile>a05132.html</anchorfile>
      <anchor>a2a7e57a2b2569bf0927f59a7690cf4f4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>VectorValues</type>
      <name>delta_</name>
      <anchorfile>a05132.html</anchorfile>
      <anchor>ae360f3635b53eb336e3b3e90013ea0d5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::queue&lt; size_t &gt;</type>
      <name>availableSlots_</name>
      <anchorfile>a05132.html</anchorfile>
      <anchor>aa0516aa28f234d9e71399728dcba459e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>FactorIndex</type>
      <name>factorIndex_</name>
      <anchorfile>a05132.html</anchorfile>
      <anchor>ae1457b899472072b32fbce623f7532a7</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::BayesNet</name>
    <filename>a03472.html</filename>
    <templarg>class CONDITIONAL</templarg>
    <base>FactorGraph&lt; CONDITIONAL &gt;</base>
    <member kind="function" protection="protected">
      <type></type>
      <name>BayesNet</name>
      <anchorfile>a03472.html</anchorfile>
      <anchor>ae6a59fca7b59061bffe9d3aad97cca69</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>BayesNet</name>
      <anchorfile>a03472.html</anchorfile>
      <anchor>ad1f05fb1c55edbb9c84ccb29a0b7464c</anchor>
      <arglist>(ITERATOR firstConditional, ITERATOR lastConditional)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>a03472.html</anchorfile>
      <anchor>a5a0adcde7519254c34f75b3563081dcd</anchor>
      <arglist>(const std::string &amp;s=&quot;BayesNet&quot;, const KeyFormatter &amp;formatter=DefaultKeyFormatter) const override</arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; CONDITIONAL &gt;</type>
      <name>sharedConditional</name>
      <anchorfile>a03472.html</anchorfile>
      <anchor>a88103713b4df54500caaf6791f874a1c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::BayesTree</name>
    <filename>a03496.html</filename>
    <templarg>class CLIQUE</templarg>
    <member kind="friend">
      <type>friend class</type>
      <name>boost::serialization::access</name>
      <anchorfile>a03496.html</anchorfile>
      <anchor>ac98d07dd8f7b70e16ccb9a01abf56b9c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>saveGraph</name>
      <anchorfile>a03496.html</anchorfile>
      <anchor>a0552857ea9af52b39cd510f1025fd119</anchor>
      <arglist>(std::ostream &amp;s, sharedClique clique, const KeyFormatter &amp;keyFormatter, int parentnum=0) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>getCliqueData</name>
      <anchorfile>a03496.html</anchorfile>
      <anchor>aa01766334a7f0c8d698bbfba7977c318</anchor>
      <arglist>(sharedClique clique, BayesTreeCliqueData *stats) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>removeClique</name>
      <anchorfile>a03496.html</anchorfile>
      <anchor>a2219fa7bb8a3be648ccc4934cb5ef4f8</anchor>
      <arglist>(sharedClique clique)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>fillNodesIndex</name>
      <anchorfile>a03496.html</anchorfile>
      <anchor>a2c52c639ba14d7890dd3afaff9cb0055</anchor>
      <arglist>(const sharedClique &amp;subtree)</arglist>
    </member>
    <member kind="function">
      <type>Key</type>
      <name>findParentClique</name>
      <anchorfile>a03496.html</anchorfile>
      <anchor>a86c8a339cb4056eef47ac3879527ca81</anchor>
      <arglist>(const CONTAINER &amp;parents) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>a03496.html</anchorfile>
      <anchor>a5df6aba3391ff4e2d0e6f5cffbed6b39</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>deleteCachedShortcuts</name>
      <anchorfile>a03496.html</anchorfile>
      <anchor>aa5f027c21ede0a1c1d2270d76ce1a237</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removePath</name>
      <anchorfile>a03496.html</anchorfile>
      <anchor>aa7a361d821ef053b7d2f642784dfdccf</anchor>
      <arglist>(sharedClique clique, BayesNetType *bn, Cliques *orphans)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeTop</name>
      <anchorfile>a03496.html</anchorfile>
      <anchor>af2229149196e50496d2ca7cc7a1d31ad</anchor>
      <arglist>(const KeyVector &amp;keys, BayesNetType *bn, Cliques *orphans)</arglist>
    </member>
    <member kind="function">
      <type>Cliques</type>
      <name>removeSubtree</name>
      <anchorfile>a03496.html</anchorfile>
      <anchor>adb8a95fe9b83e8baf71e155e3599926c</anchor>
      <arglist>(const sharedClique &amp;subtree)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>insertRoot</name>
      <anchorfile>a03496.html</anchorfile>
      <anchor>aec65e8ed773458e8a9f0fcf9a86207c0</anchor>
      <arglist>(const sharedClique &amp;subtree)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addClique</name>
      <anchorfile>a03496.html</anchorfile>
      <anchor>a6ff97b5ce99270811914a852f98a10b1</anchor>
      <arglist>(const sharedClique &amp;clique, const sharedClique &amp;parent_clique=sharedClique())</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addFactorsToGraph</name>
      <anchorfile>a03496.html</anchorfile>
      <anchor>a39e36fb6f6d50caad0c83ad1965c06fb</anchor>
      <arglist>(FactorGraph&lt; FactorType &gt; *graph) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>BayesTree</name>
      <anchorfile>a03496.html</anchorfile>
      <anchor>a52b84560f2afcae463ac9487e6e91a28</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>BayesTree</name>
      <anchorfile>a03496.html</anchorfile>
      <anchor>aa612762931fbe9d2dcf4a2dc24d294d3</anchor>
      <arglist>(const This &amp;other)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>equals</name>
      <anchorfile>a03496.html</anchorfile>
      <anchor>a3dcf5729b25b82bcdef01704bd46c5ee</anchor>
      <arglist>(const This &amp;other, double tol=1e-9) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>a03496.html</anchorfile>
      <anchor>ae6cc4d319a2dc374fb0bf9b6ae0c36b7</anchor>
      <arglist>(const std::string &amp;s=&quot;&quot;, const KeyFormatter &amp;keyFormatter=DefaultKeyFormatter) const</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>size</name>
      <anchorfile>a03496.html</anchorfile>
      <anchor>a92e98e84352bb66ac0c2a522cbf5f810</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>empty</name>
      <anchorfile>a03496.html</anchorfile>
      <anchor>ae2a294356e658d863a7ec53e847166b6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Nodes &amp;</type>
      <name>nodes</name>
      <anchorfile>a03496.html</anchorfile>
      <anchor>aa924e015c296aa82e359c523a94979ee</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const sharedNode</type>
      <name>operator[]</name>
      <anchorfile>a03496.html</anchorfile>
      <anchor>a058451084fcb001fab57deb472b80d4a</anchor>
      <arglist>(Key j) const</arglist>
    </member>
    <member kind="function">
      <type>const Roots &amp;</type>
      <name>roots</name>
      <anchorfile>a03496.html</anchorfile>
      <anchor>abc35ee46bcf3edf3d0ae479db3386f18</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const sharedClique &amp;</type>
      <name>clique</name>
      <anchorfile>a03496.html</anchorfile>
      <anchor>ac212d99843a40dddc17bded83a245bce</anchor>
      <arglist>(Key j) const</arglist>
    </member>
    <member kind="function">
      <type>BayesTreeCliqueData</type>
      <name>getCliqueData</name>
      <anchorfile>a03496.html</anchorfile>
      <anchor>adac7275a0aea6c2a1ec9c8562149b2c3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>numCachedSeparatorMarginals</name>
      <anchorfile>a03496.html</anchorfile>
      <anchor>ad40916eaa9d8c47ba5cc21b6f17601d7</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>sharedConditional</type>
      <name>marginalFactor</name>
      <anchorfile>a03496.html</anchorfile>
      <anchor>abb97607ffd4abad8a9d4c0ce5f6965f9</anchor>
      <arglist>(Key j, const Eliminate &amp;function=EliminationTraitsType::DefaultEliminate) const</arglist>
    </member>
    <member kind="function">
      <type>sharedFactorGraph</type>
      <name>joint</name>
      <anchorfile>a03496.html</anchorfile>
      <anchor>a22e4554fc3f7b0c31d95e68f3bacb787</anchor>
      <arglist>(Key j1, Key j2, const Eliminate &amp;function=EliminationTraitsType::DefaultEliminate) const</arglist>
    </member>
    <member kind="function">
      <type>sharedBayesNet</type>
      <name>jointBayesNet</name>
      <anchorfile>a03496.html</anchorfile>
      <anchor>a706acddbf431e3ba6f0920750106b5b0</anchor>
      <arglist>(Key j1, Key j2, const Eliminate &amp;function=EliminationTraitsType::DefaultEliminate) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>saveGraph</name>
      <anchorfile>a03496.html</anchorfile>
      <anchor>a46d214ab6c526a76045da439a25ded0d</anchor>
      <arglist>(const std::string &amp;s, const KeyFormatter &amp;keyFormatter=DefaultKeyFormatter) const</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>size</name>
      <anchorfile>a03496.html</anchorfile>
      <anchor>a92e98e84352bb66ac0c2a522cbf5f810</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>empty</name>
      <anchorfile>a03496.html</anchorfile>
      <anchor>ae2a294356e658d863a7ec53e847166b6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Nodes &amp;</type>
      <name>nodes</name>
      <anchorfile>a03496.html</anchorfile>
      <anchor>aa924e015c296aa82e359c523a94979ee</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const sharedNode</type>
      <name>operator[]</name>
      <anchorfile>a03496.html</anchorfile>
      <anchor>a058451084fcb001fab57deb472b80d4a</anchor>
      <arglist>(Key j) const</arglist>
    </member>
    <member kind="function">
      <type>const Roots &amp;</type>
      <name>roots</name>
      <anchorfile>a03496.html</anchorfile>
      <anchor>abc35ee46bcf3edf3d0ae479db3386f18</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const sharedClique &amp;</type>
      <name>clique</name>
      <anchorfile>a03496.html</anchorfile>
      <anchor>ac212d99843a40dddc17bded83a245bce</anchor>
      <arglist>(Key j) const</arglist>
    </member>
    <member kind="function">
      <type>BayesTreeCliqueData</type>
      <name>getCliqueData</name>
      <anchorfile>a03496.html</anchorfile>
      <anchor>adac7275a0aea6c2a1ec9c8562149b2c3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>numCachedSeparatorMarginals</name>
      <anchorfile>a03496.html</anchorfile>
      <anchor>ad40916eaa9d8c47ba5cc21b6f17601d7</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>sharedConditional</type>
      <name>marginalFactor</name>
      <anchorfile>a03496.html</anchorfile>
      <anchor>abb97607ffd4abad8a9d4c0ce5f6965f9</anchor>
      <arglist>(Key j, const Eliminate &amp;function=EliminationTraitsType::DefaultEliminate) const</arglist>
    </member>
    <member kind="function">
      <type>sharedFactorGraph</type>
      <name>joint</name>
      <anchorfile>a03496.html</anchorfile>
      <anchor>a22e4554fc3f7b0c31d95e68f3bacb787</anchor>
      <arglist>(Key j1, Key j2, const Eliminate &amp;function=EliminationTraitsType::DefaultEliminate) const</arglist>
    </member>
    <member kind="function">
      <type>sharedBayesNet</type>
      <name>jointBayesNet</name>
      <anchorfile>a03496.html</anchorfile>
      <anchor>a706acddbf431e3ba6f0920750106b5b0</anchor>
      <arglist>(Key j1, Key j2, const Eliminate &amp;function=EliminationTraitsType::DefaultEliminate) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>saveGraph</name>
      <anchorfile>a03496.html</anchorfile>
      <anchor>a46d214ab6c526a76045da439a25ded0d</anchor>
      <arglist>(const std::string &amp;s, const KeyFormatter &amp;keyFormatter=DefaultKeyFormatter) const</arglist>
    </member>
    <member kind="typedef">
      <type>CLIQUE</type>
      <name>Clique</name>
      <anchorfile>a03496.html</anchorfile>
      <anchor>ab644899031c0c6436e5762832d79f04d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; Clique &gt;</type>
      <name>sharedClique</name>
      <anchorfile>a03496.html</anchorfile>
      <anchor>a4bb80cd37179ebd927ee03d8ca03dc1c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Clique</type>
      <name>Node</name>
      <anchorfile>a03496.html</anchorfile>
      <anchor>a560ef1c155691cd0ec623efd09c73565</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>sharedClique</type>
      <name>sharedNode</name>
      <anchorfile>a03496.html</anchorfile>
      <anchor>a79ce1db45ce48b1006397de1f7af923e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>FastList&lt; sharedClique &gt;</type>
      <name>Cliques</name>
      <anchorfile>a03496.html</anchorfile>
      <anchor>aada1aa3f705630a0f3767156c1d8ed5c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ConcurrentMap&lt; Key, sharedClique &gt;</type>
      <name>Nodes</name>
      <anchorfile>a03496.html</anchorfile>
      <anchor>ac8f341f38c2c8a6508721994f447a458</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>FastVector&lt; sharedClique &gt;</type>
      <name>Roots</name>
      <anchorfile>a03496.html</anchorfile>
      <anchor>af38ef93cf38589e7866441c51aa5117b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type>This &amp;</type>
      <name>operator=</name>
      <anchorfile>a03496.html</anchorfile>
      <anchor>a4ab587c6308aec74d754e9bdf14e01bc</anchor>
      <arglist>(const This &amp;other)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>BayesTree</name>
      <anchorfile>a03496.html</anchorfile>
      <anchor>a52b84560f2afcae463ac9487e6e91a28</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>BayesTree</name>
      <anchorfile>a03496.html</anchorfile>
      <anchor>aa612762931fbe9d2dcf4a2dc24d294d3</anchor>
      <arglist>(const This &amp;other)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Nodes</type>
      <name>nodes_</name>
      <anchorfile>a03496.html</anchorfile>
      <anchor>a20f99ef0c4c43c0d455119fc5322c8b4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Roots</type>
      <name>roots_</name>
      <anchorfile>a03496.html</anchorfile>
      <anchor>a69d492bb6b4b2d48c132528e687a897b</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::BayesTreeCliqueBase</name>
    <filename>a03508.html</filename>
    <templarg>class DERIVED</templarg>
    <templarg>class FACTORGRAPH</templarg>
    <member kind="friend">
      <type>friend class</type>
      <name>boost::serialization::access</name>
      <anchorfile>a03508.html</anchorfile>
      <anchor>ac98d07dd8f7b70e16ccb9a01abf56b9c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type>KeyVector</type>
      <name>separator_setminus_B</name>
      <anchorfile>a03508.html</anchorfile>
      <anchor>acf1ef12f8527f4c2c708ef158362949d</anchor>
      <arglist>(const derived_ptr &amp;B) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>KeyVector</type>
      <name>shortcut_indices</name>
      <anchorfile>a03508.html</anchorfile>
      <anchor>ab3ed1131e643eb5b93220129cf84c681</anchor>
      <arglist>(const derived_ptr &amp;B, const FactorGraphType &amp;p_Cp_B) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>deleteCachedShortcutsNonRecursive</name>
      <anchorfile>a03508.html</anchorfile>
      <anchor>a1e30a722b512467abcb47be6e32b55ad</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>BayesNetType</type>
      <name>shortcut</name>
      <anchorfile>a03508.html</anchorfile>
      <anchor>a9edb268cc435f7b2a0c254df1404904b</anchor>
      <arglist>(const derived_ptr &amp;root, Eliminate function=EliminationTraitsType::DefaultEliminate) const</arglist>
    </member>
    <member kind="function">
      <type>FactorGraphType</type>
      <name>separatorMarginal</name>
      <anchorfile>a03508.html</anchorfile>
      <anchor>a991d9ea46836f7fe8eda6e1569cee16e</anchor>
      <arglist>(Eliminate function=EliminationTraitsType::DefaultEliminate) const</arglist>
    </member>
    <member kind="function">
      <type>FactorGraphType</type>
      <name>marginal2</name>
      <anchorfile>a03508.html</anchorfile>
      <anchor>a814b38ebe6f0ac5383306b1570fe4819</anchor>
      <arglist>(Eliminate function=EliminationTraitsType::DefaultEliminate) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>deleteCachedShortcuts</name>
      <anchorfile>a03508.html</anchorfile>
      <anchor>ab0eb467a5a3a8ac259aeca28d3be914a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>BayesTreeCliqueBase</name>
      <anchorfile>a03508.html</anchorfile>
      <anchor>a425f748b06905e5f127e061e6b49c440</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>BayesTreeCliqueBase</name>
      <anchorfile>a03508.html</anchorfile>
      <anchor>a6c6e1acd351eea812eed018d0946edea</anchor>
      <arglist>(const sharedConditional &amp;conditional)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>BayesTreeCliqueBase</name>
      <anchorfile>a03508.html</anchorfile>
      <anchor>a802c15ee3bb2f09c1ca939c9ef5a3b8e</anchor>
      <arglist>(const BayesTreeCliqueBase &amp;c)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>BayesTreeCliqueBase &amp;</type>
      <name>operator=</name>
      <anchorfile>a03508.html</anchorfile>
      <anchor>a1d639c9d05ef6f907de5dd26eef82fa6</anchor>
      <arglist>(const BayesTreeCliqueBase &amp;c)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>equals</name>
      <anchorfile>a03508.html</anchorfile>
      <anchor>a93d41d0b550a8fb9fb95f5c892fb2615</anchor>
      <arglist>(const DERIVED &amp;other, double tol=1e-9) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>print</name>
      <anchorfile>a03508.html</anchorfile>
      <anchor>ad03372d87f70713d127a4a702cfcdf23</anchor>
      <arglist>(const std::string &amp;s=&quot;&quot;, const KeyFormatter &amp;keyFormatter=DefaultKeyFormatter) const</arglist>
    </member>
    <member kind="function">
      <type>const sharedConditional &amp;</type>
      <name>conditional</name>
      <anchorfile>a03508.html</anchorfile>
      <anchor>ab9dacbf3ad501d8fa4b7f174ac9c9be5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isRoot</name>
      <anchorfile>a03508.html</anchorfile>
      <anchor>a7b3765e6f51f0c9bb26a2dd58bb6b77a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>treeSize</name>
      <anchorfile>a03508.html</anchorfile>
      <anchor>a57f5a90f8cf4fe3835137d93bf3ace8c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>numCachedSeparatorMarginals</name>
      <anchorfile>a03508.html</anchorfile>
      <anchor>ad7f63b089fd6def94816a0d737622b4b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>derived_ptr</type>
      <name>parent</name>
      <anchorfile>a03508.html</anchorfile>
      <anchor>a57672340d13636be34533e6d7d65a3b6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>problemSize</name>
      <anchorfile>a03508.html</anchorfile>
      <anchor>a39a0b013ef5feecbcb8ca53b1d881806</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setEliminationResult</name>
      <anchorfile>a03508.html</anchorfile>
      <anchor>afb3a025fa21a798cd6cafa931d54ab63</anchor>
      <arglist>(const typename FactorGraphType::EliminationResult &amp;eliminationResult)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>boost::optional&lt; FactorGraphType &gt;</type>
      <name>cachedSeparatorMarginal_</name>
      <anchorfile>a03508.html</anchorfile>
      <anchor>af3d82f22471162aafc735e1413d9e428</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::mutex</type>
      <name>cachedSeparatorMarginalMutex_</name>
      <anchorfile>a03508.html</anchorfile>
      <anchor>a75ce5160f65fe820a6abb154f01ff86a</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>gtsam::BayesTreeCliqueData</name>
    <filename>a03492.html</filename>
  </compound>
  <compound kind="struct">
    <name>gtsam::BayesTreeCliqueStats</name>
    <filename>a03488.html</filename>
  </compound>
  <compound kind="class">
    <name>gtsam::BayesTreeOrphanWrapper</name>
    <filename>a03500.html</filename>
    <templarg>class CLIQUE</templarg>
  </compound>
  <compound kind="struct">
    <name>gtsam::Bearing</name>
    <filename>a03024.html</filename>
    <templarg>typename A1</templarg>
    <templarg>typename A2</templarg>
  </compound>
  <compound kind="struct">
    <name>gtsam::Bearing&lt; Pose2, T &gt;</name>
    <filename>a03280.html</filename>
    <templarg>typename T</templarg>
    <base>HasBearing&lt; Pose2, T, Rot2 &gt;</base>
  </compound>
  <compound kind="struct">
    <name>gtsam::Bearing&lt; Pose3, Point3 &gt;</name>
    <filename>a03304.html</filename>
    <base>HasBearing&lt; Pose3, Point3, Unit3 &gt;</base>
  </compound>
  <compound kind="struct">
    <name>gtsam::Bearing&lt; Pose3, Pose3 &gt;</name>
    <filename>a03308.html</filename>
    <base>HasBearing&lt; Pose3, Pose3, Unit3 &gt;</base>
  </compound>
  <compound kind="struct">
    <name>gtsam::BearingFactor</name>
    <filename>a04600.html</filename>
    <templarg>typename A1</templarg>
    <templarg>typename A2</templarg>
    <templarg>typename T</templarg>
    <base>ExpressionFactorN&lt; typename Bearing&lt; A1, A2 &gt;::result_type, A1, A2 &gt;</base>
    <member kind="function">
      <type></type>
      <name>BearingFactor</name>
      <anchorfile>a04600.html</anchorfile>
      <anchor>af6f0119ea5805d2b77b85f292920a647</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BearingFactor</name>
      <anchorfile>a04600.html</anchorfile>
      <anchor>ac8293c85cbe2aee87457e64475a7a93a</anchor>
      <arglist>(Key key1, Key key2, const T &amp;measured, const SharedNoiseModel &amp;model)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>a04600.html</anchorfile>
      <anchor>a1ee83d1ceb5960e29596936d7f451cb5</anchor>
      <arglist>(const std::string &amp;s=&quot;&quot;, const KeyFormatter &amp;kf=DefaultKeyFormatter) const override</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>gtsam::BearingRange</name>
    <filename>a03032.html</filename>
    <templarg>typename A1</templarg>
    <templarg>typename A2</templarg>
    <templarg>typename B</templarg>
    <templarg>typename R</templarg>
    <member kind="function">
      <type>BearingRange</type>
      <name>retract</name>
      <anchorfile>a03032.html</anchorfile>
      <anchor>a37c14f336c93fc7accc3fab5e301af38</anchor>
      <arglist>(const TangentVector &amp;xi) const</arglist>
    </member>
    <member kind="function">
      <type>TangentVector</type>
      <name>localCoordinates</name>
      <anchorfile>a03032.html</anchorfile>
      <anchor>a86aca14d19ee010904d5db254c45835f</anchor>
      <arglist>(const BearingRange &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>const B &amp;</type>
      <name>bearing</name>
      <anchorfile>a03032.html</anchorfile>
      <anchor>a42ac60525c624cfe026c9b5dec721fb3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const R &amp;</type>
      <name>range</name>
      <anchorfile>a03032.html</anchorfile>
      <anchor>ac29962d29fdc8ec1cfde6449b95ad2af</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static BearingRange</type>
      <name>Measure</name>
      <anchorfile>a03032.html</anchorfile>
      <anchor>a2796ba4e92d9eca80cb3a3b73439debc</anchor>
      <arglist>(const A1 &amp;a1, const A2 &amp;a2, OptionalJacobian&lt; dimension, traits&lt; A1 &gt;::dimension &gt; H1=boost::none, OptionalJacobian&lt; dimension, traits&lt; A2 &gt;::dimension &gt; H2=boost::none)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static B</type>
      <name>MeasureBearing</name>
      <anchorfile>a03032.html</anchorfile>
      <anchor>adbfd59a960fd145374b5e2c44ecf1296</anchor>
      <arglist>(const A1 &amp;a1, const A2 &amp;a2)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static R</type>
      <name>MeasureRange</name>
      <anchorfile>a03032.html</anchorfile>
      <anchor>a2699cffab46474e815330ac7ef901481</anchor>
      <arglist>(const A1 &amp;a1, const A2 &amp;a2)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::BearingRangeFactor</name>
    <filename>a04608.html</filename>
    <templarg>typename A1</templarg>
    <templarg>typename A2</templarg>
    <templarg>typename B</templarg>
    <templarg>typename R</templarg>
    <base>ExpressionFactorN&lt; BearingRange&lt; A1, A2 &gt;, A1, A2 &gt;</base>
    <member kind="function">
      <type></type>
      <name>BearingRangeFactor</name>
      <anchorfile>a04608.html</anchorfile>
      <anchor>a0a1df8a5b7807a3ecc3e1baa74802ac7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BearingRangeFactor</name>
      <anchorfile>a04608.html</anchorfile>
      <anchor>a7398d2ecd4e269a6852473e6fb8108d5</anchor>
      <arglist>(Key key1, Key key2, const T &amp;bearingRange, const SharedNoiseModel &amp;model)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BearingRangeFactor</name>
      <anchorfile>a04608.html</anchorfile>
      <anchor>a2cadb2247daabfc360bbf1d930909edb</anchor>
      <arglist>(Key key1, Key key2, const B &amp;measuredBearing, const R &amp;measuredRange, const SharedNoiseModel &amp;model)</arglist>
    </member>
    <member kind="function">
      <type>gtsam::NonlinearFactor::shared_ptr</type>
      <name>clone</name>
      <anchorfile>a04608.html</anchorfile>
      <anchor>abe80cc873b881989698126b8d70fb03b</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>a04608.html</anchorfile>
      <anchor>ad8d74c3af71d455dec37c0b78d8958db</anchor>
      <arglist>(const std::string &amp;s=&quot;&quot;, const KeyFormatter &amp;kf=DefaultKeyFormatter) const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::BetweenConstraint</name>
    <filename>a04692.html</filename>
    <templarg>class VALUE</templarg>
    <base>gtsam::BetweenFactor</base>
    <member kind="function">
      <type></type>
      <name>BetweenConstraint</name>
      <anchorfile>a04692.html</anchorfile>
      <anchor>a58f473a74ca49a13084db2d076278baa</anchor>
      <arglist>(const VALUE &amp;measured, Key key1, Key key2, double mu=1000.0)</arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>boost::serialization::access</name>
      <anchorfile>a04692.html</anchorfile>
      <anchor>ac98d07dd8f7b70e16ccb9a01abf56b9c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::BetweenFactor</name>
    <filename>a04684.html</filename>
    <templarg>class VALUE</templarg>
    <base>NoiseModelFactor2&lt; VALUE, VALUE &gt;</base>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>a04684.html</anchorfile>
      <anchor>a73da3d3de45fcef8e2f44e774e97f0ac</anchor>
      <arglist>(const std::string &amp;s, const KeyFormatter &amp;keyFormatter=DefaultKeyFormatter) const override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>equals</name>
      <anchorfile>a04684.html</anchorfile>
      <anchor>a4689824004887d71a8d753fe4cbc4d2b</anchor>
      <arglist>(const NonlinearFactor &amp;expected, double tol=1e-9) const override</arglist>
    </member>
    <member kind="function">
      <type>Vector</type>
      <name>evaluateError</name>
      <anchorfile>a04684.html</anchorfile>
      <anchor>accf2bf87a415136bf4dd2ea7ab247033</anchor>
      <arglist>(const T &amp;p1, const T &amp;p2, boost::optional&lt; Matrix &amp; &gt; H1=boost::none, boost::optional&lt; Matrix &amp; &gt; H2=boost::none) const override</arglist>
    </member>
    <member kind="function">
      <type>const VALUE &amp;</type>
      <name>measured</name>
      <anchorfile>a04684.html</anchorfile>
      <anchor>a63ed8a6a94fe1b40b58de2e271c63640</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BetweenFactor</name>
      <anchorfile>a04684.html</anchorfile>
      <anchor>a059852c5e2a89302b823baae2de62676</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BetweenFactor</name>
      <anchorfile>a04684.html</anchorfile>
      <anchor>a8b852f5210cb19fa5c31ff97a5aec20e</anchor>
      <arglist>(Key key1, Key key2, const VALUE &amp;measured, const SharedNoiseModel &amp;model=nullptr)</arglist>
    </member>
    <member kind="function">
      <type>gtsam::NonlinearFactor::shared_ptr</type>
      <name>clone</name>
      <anchorfile>a04684.html</anchorfile>
      <anchor>a4966e979798882500e4d56904f4bf615</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>a04684.html</anchorfile>
      <anchor>a73da3d3de45fcef8e2f44e774e97f0ac</anchor>
      <arglist>(const std::string &amp;s, const KeyFormatter &amp;keyFormatter=DefaultKeyFormatter) const override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>equals</name>
      <anchorfile>a04684.html</anchorfile>
      <anchor>a4689824004887d71a8d753fe4cbc4d2b</anchor>
      <arglist>(const NonlinearFactor &amp;expected, double tol=1e-9) const override</arglist>
    </member>
    <member kind="function">
      <type>Vector</type>
      <name>evaluateError</name>
      <anchorfile>a04684.html</anchorfile>
      <anchor>accf2bf87a415136bf4dd2ea7ab247033</anchor>
      <arglist>(const T &amp;p1, const T &amp;p2, boost::optional&lt; Matrix &amp; &gt; H1=boost::none, boost::optional&lt; Matrix &amp; &gt; H2=boost::none) const override</arglist>
    </member>
    <member kind="function">
      <type>const VALUE &amp;</type>
      <name>measured</name>
      <anchorfile>a04684.html</anchorfile>
      <anchor>a63ed8a6a94fe1b40b58de2e271c63640</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; BetweenFactor &gt;</type>
      <name>shared_ptr</name>
      <anchorfile>a04684.html</anchorfile>
      <anchor>a5f6d47911015651afe9139f016c04420</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>boost::serialization::access</name>
      <anchorfile>a04684.html</anchorfile>
      <anchor>ac98d07dd8f7b70e16ccb9a01abf56b9c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::BetweenFactorEM</name>
    <filename>a05236.html</filename>
    <templarg>class VALUE</templarg>
    <base>gtsam::NonlinearFactor</base>
    <member kind="function">
      <type></type>
      <name>BetweenFactorEM</name>
      <anchorfile>a05236.html</anchorfile>
      <anchor>a8dce81ea20411ded54f6e37024cccbd0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BetweenFactorEM</name>
      <anchorfile>a05236.html</anchorfile>
      <anchor>a8046342d7657f64e61305e57c9843e14</anchor>
      <arglist>(Key key1, Key key2, const VALUE &amp;measured, const SharedGaussian &amp;model_inlier, const SharedGaussian &amp;model_outlier, const double prior_inlier, const double prior_outlier, const bool flag_bump_up_near_zero_probs=false)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>a05236.html</anchorfile>
      <anchor>a036cf687d9261535f652a7062460de29</anchor>
      <arglist>(const std::string &amp;s, const KeyFormatter &amp;keyFormatter=DefaultKeyFormatter) const override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>equals</name>
      <anchorfile>a05236.html</anchorfile>
      <anchor>a636b64aa187be88854e992ab78c1dda2</anchor>
      <arglist>(const NonlinearFactor &amp;f, double tol=1e-9) const override</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>error</name>
      <anchorfile>a05236.html</anchorfile>
      <anchor>af270b31e8817cb1c558abdf5b1614168</anchor>
      <arglist>(const Values &amp;x) const override</arglist>
    </member>
    <member kind="function">
      <type>boost::shared_ptr&lt; GaussianFactor &gt;</type>
      <name>linearize</name>
      <anchorfile>a05236.html</anchorfile>
      <anchor>a943360ee2143a456ebbce06db5d13774</anchor>
      <arglist>(const Values &amp;x) const override</arglist>
    </member>
    <member kind="function">
      <type>const VALUE &amp;</type>
      <name>measured</name>
      <anchorfile>a05236.html</anchorfile>
      <anchor>a0662dd09f8348852ea13a9acd0a14d81</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>dim</name>
      <anchorfile>a05236.html</anchorfile>
      <anchor>ac9c84eba1c070526b1eb3da847d6f76a</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; BetweenFactorEM &gt;</type>
      <name>shared_ptr</name>
      <anchorfile>a05236.html</anchorfile>
      <anchor>a82ee77b63a15d73ecc92cdc4275585fb</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>boost::serialization::access</name>
      <anchorfile>a05236.html</anchorfile>
      <anchor>ac98d07dd8f7b70e16ccb9a01abf56b9c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::BiasedGPSFactor</name>
    <filename>a05240.html</filename>
    <base>NoiseModelFactor2&lt; Pose3, Point3 &gt;</base>
    <member kind="function">
      <type></type>
      <name>BiasedGPSFactor</name>
      <anchorfile>a05240.html</anchorfile>
      <anchor>a0e5eeadaf9c44915349785d633bdf28d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BiasedGPSFactor</name>
      <anchorfile>a05240.html</anchorfile>
      <anchor>a30495372aa9d90fb9bcc586b15e7fb7e</anchor>
      <arglist>(Key posekey, Key biaskey, const Point3 measured, const SharedNoiseModel &amp;model)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>a05240.html</anchorfile>
      <anchor>ac9b609cbb556a755a5da76292f33ca88</anchor>
      <arglist>(const std::string &amp;s, const KeyFormatter &amp;keyFormatter=DefaultKeyFormatter) const override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>equals</name>
      <anchorfile>a05240.html</anchorfile>
      <anchor>a1988e18f00ca759fe353cb134b431460</anchor>
      <arglist>(const NonlinearFactor &amp;expected, double tol=1e-9) const override</arglist>
    </member>
    <member kind="function">
      <type>Vector</type>
      <name>evaluateError</name>
      <anchorfile>a05240.html</anchorfile>
      <anchor>a9b5a228857a17e16c601f4daba0d7656</anchor>
      <arglist>(const Pose3 &amp;pose, const Point3 &amp;bias, boost::optional&lt; Matrix &amp; &gt; H1=boost::none, boost::optional&lt; Matrix &amp; &gt; H2=boost::none) const override</arglist>
    </member>
    <member kind="function">
      <type>const Point3</type>
      <name>measured</name>
      <anchorfile>a05240.html</anchorfile>
      <anchor>a220c18e15d3f9b02fc0178346f9b22b6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; BiasedGPSFactor &gt;</type>
      <name>shared_ptr</name>
      <anchorfile>a05240.html</anchorfile>
      <anchor>a94207bcbd883bf018620e8a04678d0f5</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>boost::serialization::access</name>
      <anchorfile>a05240.html</anchorfile>
      <anchor>ac98d07dd8f7b70e16ccb9a01abf56b9c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::BinaryAllDiff</name>
    <filename>a05004.html</filename>
    <base>gtsam::Constraint</base>
    <member kind="function">
      <type></type>
      <name>BinaryAllDiff</name>
      <anchorfile>a05004.html</anchorfile>
      <anchor>adf624c34d618f9af6bdd079de0ba340a</anchor>
      <arglist>(const DiscreteKey &amp;key1, const DiscreteKey &amp;key2)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>a05004.html</anchorfile>
      <anchor>a785c42bc423e128da2f06bb6f6cfa0d5</anchor>
      <arglist>(const std::string &amp;s=&quot;&quot;, const KeyFormatter &amp;formatter=DefaultKeyFormatter) const override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>equals</name>
      <anchorfile>a05004.html</anchorfile>
      <anchor>a5a960f78bc0b7afd800f973f30f90798</anchor>
      <arglist>(const DiscreteFactor &amp;other, double tol) const override</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>operator()</name>
      <anchorfile>a05004.html</anchorfile>
      <anchor>a8059aa1c76393807bf42b91521335665</anchor>
      <arglist>(const Values &amp;values) const override</arglist>
    </member>
    <member kind="function">
      <type>DecisionTreeFactor</type>
      <name>toDecisionTreeFactor</name>
      <anchorfile>a05004.html</anchorfile>
      <anchor>a7c061eab4c31bcf3c19bec8499493f95</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>DecisionTreeFactor</type>
      <name>operator*</name>
      <anchorfile>a05004.html</anchorfile>
      <anchor>a5e6af89f9847d24f59292e0e34fdb0ea</anchor>
      <arglist>(const DecisionTreeFactor &amp;f) const override</arglist>
    </member>
    <member kind="function">
      <type>Constraint::shared_ptr</type>
      <name>partiallyApply</name>
      <anchorfile>a05004.html</anchorfile>
      <anchor>a7dc146841987b152b262f8d5304cefcc</anchor>
      <arglist>(const Values &amp;) const override</arglist>
    </member>
    <member kind="function">
      <type>Constraint::shared_ptr</type>
      <name>partiallyApply</name>
      <anchorfile>a05004.html</anchorfile>
      <anchor>ad3c94c191f26342f609858c356a29b88</anchor>
      <arglist>(const std::vector&lt; Domain &gt; &amp;) const override</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>gtsam::Expression::BinaryFunction</name>
    <filename>a04248.html</filename>
    <templarg>class A1</templarg>
    <templarg>class A2</templarg>
  </compound>
  <compound kind="struct">
    <name>gtsam::BinaryJacobianFactor</name>
    <filename>a03672.html</filename>
    <templarg>int M</templarg>
    <templarg>int N1</templarg>
    <templarg>int N2</templarg>
    <base>gtsam::JacobianFactor</base>
    <member kind="function">
      <type></type>
      <name>BinaryJacobianFactor</name>
      <anchorfile>a03672.html</anchorfile>
      <anchor>adef0324d93ae1dd00943ea9a088b9bee</anchor>
      <arglist>(Key key1, const Eigen::Matrix&lt; double, M, N1 &gt; &amp;A1, Key key2, const Eigen::Matrix&lt; double, M, N2 &gt; &amp;A2, const Eigen::Matrix&lt; double, M, 1 &gt; &amp;b, const SharedDiagonal &amp;model=SharedDiagonal())</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>updateHessian</name>
      <anchorfile>a03672.html</anchorfile>
      <anchor>afb114b4f91aa1b56cf5539003696f53a</anchor>
      <arglist>(const KeyVector &amp;infoKeys, SymmetricBlockMatrix *info) const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::BinaryMeasurement</name>
    <filename>a04632.html</filename>
    <templarg>class T</templarg>
    <base>gtsam::Factor</base>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>a04632.html</anchorfile>
      <anchor>a77c353cc2f848094368c86f9b460f871</anchor>
      <arglist>(const std::string &amp;s, const KeyFormatter &amp;keyFormatter=DefaultKeyFormatter) const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~BinaryMeasurement</name>
      <anchorfile>a04632.html</anchorfile>
      <anchor>a8cf91e3bfce563f6d7abdee35b8c755b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>a04632.html</anchorfile>
      <anchor>a77c353cc2f848094368c86f9b460f871</anchor>
      <arglist>(const std::string &amp;s, const KeyFormatter &amp;keyFormatter=DefaultKeyFormatter) const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::BinarySumExpression</name>
    <filename>a04260.html</filename>
    <templarg>typename T</templarg>
    <base>gtsam::Expression</base>
  </compound>
  <compound kind="class">
    <name>gtsam::BlockJacobiPreconditioner</name>
    <filename>a03956.html</filename>
    <base>gtsam::Preconditioner</base>
    <member kind="function">
      <type>void</type>
      <name>solve</name>
      <anchorfile>a03956.html</anchorfile>
      <anchor>a9923c3532ea94c06718fbe2645b08f1f</anchor>
      <arglist>(const Vector &amp;y, Vector &amp;x) const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>transposeSolve</name>
      <anchorfile>a03956.html</anchorfile>
      <anchor>a93673122667b3a9edf71e5f9f98ce304</anchor>
      <arglist>(const Vector &amp;y, Vector &amp;x) const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>build</name>
      <anchorfile>a03956.html</anchorfile>
      <anchor>aa1fd0d42c6f6a9015f2080c3aa4d66ef</anchor>
      <arglist>(const GaussianFactorGraph &amp;gfg, const KeyInfo &amp;info, const std::map&lt; Key, Vector &gt; &amp;lambda) override</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>gtsam::BlockJacobiPreconditionerParameters</name>
    <filename>a03952.html</filename>
    <base>gtsam::PreconditionerParameters</base>
  </compound>
  <compound kind="struct">
    <name>gtsam::BoundingConstraint1</name>
    <filename>a04700.html</filename>
    <templarg>class VALUE</templarg>
    <base>gtsam::NoiseModelFactor1</base>
    <member kind="function">
      <type></type>
      <name>BoundingConstraint1</name>
      <anchorfile>a04700.html</anchorfile>
      <anchor>a936b8b1a987ef137f1b6d4bfbcc3db9f</anchor>
      <arglist>(Key key, double threshold, bool isGreaterThan, double mu=1000.0)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual double</type>
      <name>value</name>
      <anchorfile>a04700.html</anchorfile>
      <anchor>ae8d1b604f8580bfd89940d1154b66feb</anchor>
      <arglist>(const X &amp;x, boost::optional&lt; Matrix &amp; &gt; H=boost::none) const =0</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>active</name>
      <anchorfile>a04700.html</anchorfile>
      <anchor>a310753e6eab123dfab602fe9b6d4c180</anchor>
      <arglist>(const Values &amp;c) const override</arglist>
    </member>
    <member kind="function">
      <type>Vector</type>
      <name>evaluateError</name>
      <anchorfile>a04700.html</anchorfile>
      <anchor>af717832f2898ddbf8246476c8c0246a9</anchor>
      <arglist>(const X &amp;x, boost::optional&lt; Matrix &amp; &gt; H=boost::none) const override</arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>boost::serialization::access</name>
      <anchorfile>a04700.html</anchorfile>
      <anchor>ac98d07dd8f7b70e16ccb9a01abf56b9c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>gtsam::BoundingConstraint2</name>
    <filename>a04704.html</filename>
    <templarg>class VALUE1</templarg>
    <templarg>class VALUE2</templarg>
    <base>gtsam::NoiseModelFactor2</base>
    <member kind="function">
      <type></type>
      <name>BoundingConstraint2</name>
      <anchorfile>a04704.html</anchorfile>
      <anchor>a80055453c5f4edd96aab215831371aa1</anchor>
      <arglist>(Key key1, Key key2, double threshold, bool isGreaterThan, double mu=1000.0)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual double</type>
      <name>value</name>
      <anchorfile>a04704.html</anchorfile>
      <anchor>ad1415ee808cefd215e6410c6dd9f4f51</anchor>
      <arglist>(const X1 &amp;x1, const X2 &amp;x2, boost::optional&lt; Matrix &amp; &gt; H1=boost::none, boost::optional&lt; Matrix &amp; &gt; H2=boost::none) const =0</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>active</name>
      <anchorfile>a04704.html</anchorfile>
      <anchor>a4b20f98fddef0f5403ab3c21d8cd3d4d</anchor>
      <arglist>(const Values &amp;c) const override</arglist>
    </member>
    <member kind="function">
      <type>Vector</type>
      <name>evaluateError</name>
      <anchorfile>a04704.html</anchorfile>
      <anchor>ab750868936e36ce5cad6cdc856fd5b8b</anchor>
      <arglist>(const X1 &amp;x1, const X2 &amp;x2, boost::optional&lt; Matrix &amp; &gt; H1=boost::none, boost::optional&lt; Matrix &amp; &gt; H2=boost::none) const override</arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>boost::serialization::access</name>
      <anchorfile>a04704.html</anchorfile>
      <anchor>ac98d07dd8f7b70e16ccb9a01abf56b9c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::BTree</name>
    <filename>a04976.html</filename>
    <templarg>class KEY</templarg>
    <templarg>class VALUE</templarg>
    <member kind="function">
      <type></type>
      <name>BTree</name>
      <anchorfile>a04976.html</anchorfile>
      <anchor>af1c1db1dac07a1e3620eaa6ee6f39e8b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BTree</name>
      <anchorfile>a04976.html</anchorfile>
      <anchor>a473798566593d9aab0f04f0963c65e01</anchor>
      <arglist>(const BTree &amp;other)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BTree</name>
      <anchorfile>a04976.html</anchorfile>
      <anchor>a1d1180bb2a380eaa7801f7f5fc929889</anchor>
      <arglist>(const value_type &amp;keyValue)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BTree</name>
      <anchorfile>a04976.html</anchorfile>
      <anchor>a5dfdbc963fed1e0a73d97c7f67a527b7</anchor>
      <arglist>(const BTree &amp;l, const value_type &amp;keyValue, const BTree &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>BTree &amp;</type>
      <name>operator=</name>
      <anchorfile>a04976.html</anchorfile>
      <anchor>aff2453e4089214a67ee4457ead052130</anchor>
      <arglist>(const BTree &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>empty</name>
      <anchorfile>a04976.html</anchorfile>
      <anchor>aed6c3a77a0d6571b18724bfee3351b8f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>BTree</type>
      <name>add</name>
      <anchorfile>a04976.html</anchorfile>
      <anchor>a3d4f18dd328a649fe378d3635eaec671</anchor>
      <arglist>(const value_type &amp;xd) const</arglist>
    </member>
    <member kind="function">
      <type>BTree</type>
      <name>add</name>
      <anchorfile>a04976.html</anchorfile>
      <anchor>a7099aa6833175a8a473fbf01dbf8d49d</anchor>
      <arglist>(const KEY &amp;x, const VALUE &amp;d) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>mem</name>
      <anchorfile>a04976.html</anchorfile>
      <anchor>a035c1a57ea9d048d62d3d09b13fd86d7</anchor>
      <arglist>(const KEY &amp;x) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>same</name>
      <anchorfile>a04976.html</anchorfile>
      <anchor>a515d2cefe6b358e7d28343698164954a</anchor>
      <arglist>(const BTree &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>a04976.html</anchorfile>
      <anchor>a88c105aedc464070807408bb7c4d8c66</anchor>
      <arglist>(const BTree &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>const value_type &amp;</type>
      <name>min</name>
      <anchorfile>a04976.html</anchorfile>
      <anchor>af9c57c9b73a878b4dae3873de56d7aba</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>BTree</type>
      <name>remove_min</name>
      <anchorfile>a04976.html</anchorfile>
      <anchor>a2f00413fdd2723135bf880565a74071d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>BTree</type>
      <name>remove</name>
      <anchorfile>a04976.html</anchorfile>
      <anchor>a9210ea8123b01bded14d4b1f63aff304</anchor>
      <arglist>(const KEY &amp;x) const</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>height</name>
      <anchorfile>a04976.html</anchorfile>
      <anchor>a48622bf843ec137d4d914f2ec9e90f0f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>size</name>
      <anchorfile>a04976.html</anchorfile>
      <anchor>ad9449f7e73a294ee105aeca664e0ff17</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const VALUE &amp;</type>
      <name>find</name>
      <anchorfile>a04976.html</anchorfile>
      <anchor>a8bfe6f606be3c125e7919fbf6c7a4ac8</anchor>
      <arglist>(const KEY &amp;k) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>a04976.html</anchorfile>
      <anchor>a91a9a2100919aa87189c75979ce1347f</anchor>
      <arglist>(const std::string &amp;s=&quot;&quot;) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>iter</name>
      <anchorfile>a04976.html</anchorfile>
      <anchor>a52bcc87692206e9422dc4f2427d0575d</anchor>
      <arglist>(std::function&lt; void(const KEY &amp;, const VALUE &amp;)&gt; f) const</arglist>
    </member>
    <member kind="function">
      <type>BTree&lt; KEY, TO &gt;</type>
      <name>map</name>
      <anchorfile>a04976.html</anchorfile>
      <anchor>a11bf96af8ed5de4c5c1d52f443aff221</anchor>
      <arglist>(std::function&lt; TO(const KEY &amp;, const VALUE &amp;)&gt; f) const</arglist>
    </member>
    <member kind="function">
      <type>ACC</type>
      <name>fold</name>
      <anchorfile>a04976.html</anchorfile>
      <anchor>a3c6112de0a12efddc5b3a3ae229b6ef5</anchor>
      <arglist>(std::function&lt; ACC(const KEY &amp;, const VALUE &amp;, const ACC &amp;)&gt; f, const ACC &amp;a) const</arglist>
    </member>
    <member kind="function">
      <type>const_iterator</type>
      <name>begin</name>
      <anchorfile>a04976.html</anchorfile>
      <anchor>a565e62c73d3117137ad6a879324f2cde</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const_iterator</type>
      <name>end</name>
      <anchorfile>a04976.html</anchorfile>
      <anchor>ab3616bfa06dc22505713efcd464a35b5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static BTree</type>
      <name>merge</name>
      <anchorfile>a04976.html</anchorfile>
      <anchor>aaef75f2379cce7455f3ba15fb73a4602</anchor>
      <arglist>(const BTree &amp;t1, const BTree &amp;t2)</arglist>
    </member>
    <class kind="class">gtsam::BTree::const_iterator</class>
  </compound>
  <compound kind="class">
    <name>gtsam::Cal3</name>
    <filename>a03048.html</filename>
    <member kind="friend">
      <type>friend class</type>
      <name>boost::serialization::access</name>
      <anchorfile>a03048.html</anchorfile>
      <anchor>ac98d07dd8f7b70e16ccb9a01abf56b9c</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>GTSAM_EXPORT friend std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a03048.html</anchorfile>
      <anchor>a677c59aca97fc0adb7c2546f7d253830</anchor>
      <arglist>(std::ostream &amp;os, const Cal3 &amp;cal)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>print</name>
      <anchorfile>a03048.html</anchorfile>
      <anchor>af34fab1325605601e9e71c49a89bd196</anchor>
      <arglist>(const std::string &amp;s=&quot;&quot;) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>equals</name>
      <anchorfile>a03048.html</anchorfile>
      <anchor>a22d4e8ffc890239c66e4b0a278dc72f4</anchor>
      <arglist>(const Cal3 &amp;K, double tol=10e-9) const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Cal3</name>
      <anchorfile>a03048.html</anchorfile>
      <anchor>a217dac62e79c531d68a6c7674d326b55</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Cal3</name>
      <anchorfile>a03048.html</anchorfile>
      <anchor>a00140a3bcdfc1d1aef72c445bf563962</anchor>
      <arglist>(double fx, double fy, double s, double u0, double v0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Cal3</name>
      <anchorfile>a03048.html</anchorfile>
      <anchor>a07d11d8f73bca2e0153e58b3e94b49ac</anchor>
      <arglist>(const Vector5 &amp;d)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Cal3</name>
      <anchorfile>a03048.html</anchorfile>
      <anchor>a5422fbe7d6a1c4836aac3e9a391fce1c</anchor>
      <arglist>(double fov, int w, int h)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Cal3</name>
      <anchorfile>a03048.html</anchorfile>
      <anchor>a0c740b971ae9fc916a255e7b1ef5a4b9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Cal3</name>
      <anchorfile>a03048.html</anchorfile>
      <anchor>a72a4b85d35c7aad6d4efe9c0a8dc59a1</anchor>
      <arglist>(const std::string &amp;path)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>fx</name>
      <anchorfile>a03048.html</anchorfile>
      <anchor>a93e2f9ae7ae50554e9e1e8306485eec9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>fy</name>
      <anchorfile>a03048.html</anchorfile>
      <anchor>aef899ed97ae4c2197f0ceca6d26764f3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>aspectRatio</name>
      <anchorfile>a03048.html</anchorfile>
      <anchor>ae5043431ecf23b4b87ec7e631c26298f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>skew</name>
      <anchorfile>a03048.html</anchorfile>
      <anchor>acefb5c426db131d1ea4fda8ce0410cbd</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>px</name>
      <anchorfile>a03048.html</anchorfile>
      <anchor>a449ff8cff79ec3501224b50a26d9f0f9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>py</name>
      <anchorfile>a03048.html</anchorfile>
      <anchor>ac5a875956db6ad65848be742ea92b225</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Point2</type>
      <name>principalPoint</name>
      <anchorfile>a03048.html</anchorfile>
      <anchor>a7c566955fe36140162f090bf290808cd</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Vector5</type>
      <name>vector</name>
      <anchorfile>a03048.html</anchorfile>
      <anchor>a0d3f69e35ba1ed866e220934af0d06bf</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Matrix3</type>
      <name>K</name>
      <anchorfile>a03048.html</anchorfile>
      <anchor>a033c830a304c8e699be7383d13d3b715</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Matrix3</type>
      <name>inverse</name>
      <anchorfile>a03048.html</anchorfile>
      <anchor>a04db4819715db2034b5c055d06e39ad3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual size_t</type>
      <name>dim</name>
      <anchorfile>a03048.html</anchorfile>
      <anchor>ae272b1d4bd1285ba4c94ba0a21dedcc8</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static size_t</type>
      <name>Dim</name>
      <anchorfile>a03048.html</anchorfile>
      <anchor>a65166ee43f6fd2eda4606d208e23437e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Cal3</name>
      <anchorfile>a03048.html</anchorfile>
      <anchor>a217dac62e79c531d68a6c7674d326b55</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Cal3</name>
      <anchorfile>a03048.html</anchorfile>
      <anchor>a00140a3bcdfc1d1aef72c445bf563962</anchor>
      <arglist>(double fx, double fy, double s, double u0, double v0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Cal3</name>
      <anchorfile>a03048.html</anchorfile>
      <anchor>a07d11d8f73bca2e0153e58b3e94b49ac</anchor>
      <arglist>(const Vector5 &amp;d)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Cal3</name>
      <anchorfile>a03048.html</anchorfile>
      <anchor>a5422fbe7d6a1c4836aac3e9a391fce1c</anchor>
      <arglist>(double fov, int w, int h)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Cal3</name>
      <anchorfile>a03048.html</anchorfile>
      <anchor>a0c740b971ae9fc916a255e7b1ef5a4b9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Cal3</name>
      <anchorfile>a03048.html</anchorfile>
      <anchor>a72a4b85d35c7aad6d4efe9c0a8dc59a1</anchor>
      <arglist>(const std::string &amp;path)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>fy_</name>
      <anchorfile>a03048.html</anchorfile>
      <anchor>a33811231ccb2620ac12a9f741044190d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>s_</name>
      <anchorfile>a03048.html</anchorfile>
      <anchor>a53228e7ead3f7153f98140486e99b8a6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>v0_</name>
      <anchorfile>a03048.html</anchorfile>
      <anchor>ae52d5f4130f18069a281f7e4dbaa6ced</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::Cal3_S2</name>
    <filename>a03052.html</filename>
    <base>gtsam::Cal3</base>
    <member kind="friend">
      <type>friend class</type>
      <name>boost::serialization::access</name>
      <anchorfile>a03052.html</anchorfile>
      <anchor>ac98d07dd8f7b70e16ccb9a01abf56b9c</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>GTSAM_EXPORT friend std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a03052.html</anchorfile>
      <anchor>ab4a774960c48eecfafdad756662005cc</anchor>
      <arglist>(std::ostream &amp;os, const Cal3_S2 &amp;cal)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>a03052.html</anchorfile>
      <anchor>ae3b7061b3c442a8302c158c78661d41b</anchor>
      <arglist>(const std::string &amp;s=&quot;Cal3_S2&quot;) const override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>equals</name>
      <anchorfile>a03052.html</anchorfile>
      <anchor>a5a354b8c3ba4d6b458678f167c347da2</anchor>
      <arglist>(const Cal3_S2 &amp;K, double tol=10e-9) const</arglist>
    </member>
    <member kind="function">
      <type>Cal3_S2</type>
      <name>between</name>
      <anchorfile>a03052.html</anchorfile>
      <anchor>a9bba3f8020ee39cf143086e62572cbb7</anchor>
      <arglist>(const Cal3_S2 &amp;q, OptionalJacobian&lt; 5, 5 &gt; H1=boost::none, OptionalJacobian&lt; 5, 5 &gt; H2=boost::none) const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Cal3_S2</name>
      <anchorfile>a03052.html</anchorfile>
      <anchor>a6e3f6159fec0563e37f15848237a7d9f</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Cal3_S2</name>
      <anchorfile>a03052.html</anchorfile>
      <anchor>a6f59c7c3f3e8782b2b4e1d71cd289d4b</anchor>
      <arglist>(double fx, double fy, double s, double u0, double v0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Cal3_S2</name>
      <anchorfile>a03052.html</anchorfile>
      <anchor>ac91a4e1b0cfd0ee9b2a0c3538a325631</anchor>
      <arglist>(const Vector5 &amp;d)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Cal3_S2</name>
      <anchorfile>a03052.html</anchorfile>
      <anchor>ae7de8f587615c7b0909c06df658e96e5</anchor>
      <arglist>(double fov, int w, int h)</arglist>
    </member>
    <member kind="function">
      <type>Point2</type>
      <name>uncalibrate</name>
      <anchorfile>a03052.html</anchorfile>
      <anchor>a35dc759d40c3eb605fe4850ce1fd4c7d</anchor>
      <arglist>(const Point2 &amp;p, OptionalJacobian&lt; 2, 5 &gt; Dcal=boost::none, OptionalJacobian&lt; 2, 2 &gt; Dp=boost::none) const</arglist>
    </member>
    <member kind="function">
      <type>Point2</type>
      <name>calibrate</name>
      <anchorfile>a03052.html</anchorfile>
      <anchor>ac48b135a0fba7bbb366ec38a2cfbbddc</anchor>
      <arglist>(const Point2 &amp;p, OptionalJacobian&lt; 2, 5 &gt; Dcal=boost::none, OptionalJacobian&lt; 2, 2 &gt; Dp=boost::none) const</arglist>
    </member>
    <member kind="function">
      <type>Vector3</type>
      <name>calibrate</name>
      <anchorfile>a03052.html</anchorfile>
      <anchor>a7bec2d6a1006c856ad07445e2e84abb9</anchor>
      <arglist>(const Vector3 &amp;p) const</arglist>
    </member>
    <member kind="function">
      <type>Cal3_S2</type>
      <name>retract</name>
      <anchorfile>a03052.html</anchorfile>
      <anchor>afbdc4704994a0c5a4f487f3cae159c17</anchor>
      <arglist>(const Vector &amp;d) const</arglist>
    </member>
    <member kind="function">
      <type>Vector5</type>
      <name>localCoordinates</name>
      <anchorfile>a03052.html</anchorfile>
      <anchor>ad5953ae1e667c79382c676362cbdb63a</anchor>
      <arglist>(const Cal3_S2 &amp;T2) const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static size_t</type>
      <name>Dim</name>
      <anchorfile>a03052.html</anchorfile>
      <anchor>a9be7a853d441efe66a254233e3137471</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Cal3_S2</name>
      <anchorfile>a03052.html</anchorfile>
      <anchor>a6e3f6159fec0563e37f15848237a7d9f</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Cal3_S2</name>
      <anchorfile>a03052.html</anchorfile>
      <anchor>a6f59c7c3f3e8782b2b4e1d71cd289d4b</anchor>
      <arglist>(double fx, double fy, double s, double u0, double v0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Cal3_S2</name>
      <anchorfile>a03052.html</anchorfile>
      <anchor>ac91a4e1b0cfd0ee9b2a0c3538a325631</anchor>
      <arglist>(const Vector5 &amp;d)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Cal3_S2</name>
      <anchorfile>a03052.html</anchorfile>
      <anchor>ae7de8f587615c7b0909c06df658e96e5</anchor>
      <arglist>(double fov, int w, int h)</arglist>
    </member>
    <member kind="function">
      <type>Point2</type>
      <name>uncalibrate</name>
      <anchorfile>a03052.html</anchorfile>
      <anchor>a35dc759d40c3eb605fe4850ce1fd4c7d</anchor>
      <arglist>(const Point2 &amp;p, OptionalJacobian&lt; 2, 5 &gt; Dcal=boost::none, OptionalJacobian&lt; 2, 2 &gt; Dp=boost::none) const</arglist>
    </member>
    <member kind="function">
      <type>Point2</type>
      <name>calibrate</name>
      <anchorfile>a03052.html</anchorfile>
      <anchor>ac48b135a0fba7bbb366ec38a2cfbbddc</anchor>
      <arglist>(const Point2 &amp;p, OptionalJacobian&lt; 2, 5 &gt; Dcal=boost::none, OptionalJacobian&lt; 2, 2 &gt; Dp=boost::none) const</arglist>
    </member>
    <member kind="function">
      <type>Vector3</type>
      <name>calibrate</name>
      <anchorfile>a03052.html</anchorfile>
      <anchor>a7bec2d6a1006c856ad07445e2e84abb9</anchor>
      <arglist>(const Vector3 &amp;p) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::Cal3_S2Stereo</name>
    <filename>a03064.html</filename>
    <base>gtsam::Cal3_S2</base>
    <member kind="friend">
      <type>friend class</type>
      <name>boost::serialization::access</name>
      <anchorfile>a03064.html</anchorfile>
      <anchor>ac98d07dd8f7b70e16ccb9a01abf56b9c</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>GTSAM_EXPORT friend std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a03064.html</anchorfile>
      <anchor>afbbbfebedaf2f96325315518769f0904</anchor>
      <arglist>(std::ostream &amp;os, const Cal3_S2Stereo &amp;cal)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>a03064.html</anchorfile>
      <anchor>a001815e0826d4c4c8584af03fd2317d4</anchor>
      <arglist>(const std::string &amp;s=&quot;&quot;) const override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>equals</name>
      <anchorfile>a03064.html</anchorfile>
      <anchor>aa2068919bcefa870cc8e2d6b3cc93e5d</anchor>
      <arglist>(const Cal3_S2Stereo &amp;other, double tol=10e-9) const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Cal3_S2Stereo</name>
      <anchorfile>a03064.html</anchorfile>
      <anchor>ab65f2ccdc932731fb59f6781f775135f</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Cal3_S2Stereo</name>
      <anchorfile>a03064.html</anchorfile>
      <anchor>a2ca55987f036f43be6bed31b7766ab27</anchor>
      <arglist>(double fx, double fy, double s, double u0, double v0, double b)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Cal3_S2Stereo</name>
      <anchorfile>a03064.html</anchorfile>
      <anchor>aa48a7b399986d48da55d6b8a954606f4</anchor>
      <arglist>(const Vector6 &amp;d)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Cal3_S2Stereo</name>
      <anchorfile>a03064.html</anchorfile>
      <anchor>a7f1fe1eea1342b36c190c66bad4476ef</anchor>
      <arglist>(double fov, int w, int h, double b)</arglist>
    </member>
    <member kind="function">
      <type>Point2</type>
      <name>uncalibrate</name>
      <anchorfile>a03064.html</anchorfile>
      <anchor>a92eeb7210fcf7ab4cd26c5a6f0b519f1</anchor>
      <arglist>(const Point2 &amp;p, OptionalJacobian&lt; 2, 6 &gt; Dcal=boost::none, OptionalJacobian&lt; 2, 2 &gt; Dp=boost::none) const</arglist>
    </member>
    <member kind="function">
      <type>Point2</type>
      <name>calibrate</name>
      <anchorfile>a03064.html</anchorfile>
      <anchor>ad054266bc5dfde1e58f89680d90d0a93</anchor>
      <arglist>(const Point2 &amp;p, OptionalJacobian&lt; 2, 6 &gt; Dcal=boost::none, OptionalJacobian&lt; 2, 2 &gt; Dp=boost::none) const</arglist>
    </member>
    <member kind="function">
      <type>Vector3</type>
      <name>calibrate</name>
      <anchorfile>a03064.html</anchorfile>
      <anchor>a6225ac9a389433f4bedc1d3b41725264</anchor>
      <arglist>(const Vector3 &amp;p) const</arglist>
    </member>
    <member kind="function">
      <type>const Cal3_S2 &amp;</type>
      <name>calibration</name>
      <anchorfile>a03064.html</anchorfile>
      <anchor>a362309000b68d34aa81155bde606cac6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Matrix3</type>
      <name>K</name>
      <anchorfile>a03064.html</anchorfile>
      <anchor>a6d9eef3b67eac82f63717fa967707047</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>baseline</name>
      <anchorfile>a03064.html</anchorfile>
      <anchor>aa2deb1f7e5d74fb15fd24844049029d6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Vector6</type>
      <name>vector</name>
      <anchorfile>a03064.html</anchorfile>
      <anchor>a2260bb03a4780c7e6df9ba1589280c40</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>dim</name>
      <anchorfile>a03064.html</anchorfile>
      <anchor>a3f6f0eeca6a2eab2221f36d00dfd5d08</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>Cal3_S2Stereo</type>
      <name>retract</name>
      <anchorfile>a03064.html</anchorfile>
      <anchor>a6bffe3791a2ebb2ee5c8983042e42281</anchor>
      <arglist>(const Vector &amp;d) const</arglist>
    </member>
    <member kind="function">
      <type>Vector6</type>
      <name>localCoordinates</name>
      <anchorfile>a03064.html</anchorfile>
      <anchor>a33158b47c45c5ef95a9f96da355a617a</anchor>
      <arglist>(const Cal3_S2Stereo &amp;T2) const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static size_t</type>
      <name>Dim</name>
      <anchorfile>a03064.html</anchorfile>
      <anchor>a7bffdc1fe38e61e69f4d55eccbed7e7e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Cal3_S2Stereo</name>
      <anchorfile>a03064.html</anchorfile>
      <anchor>ab65f2ccdc932731fb59f6781f775135f</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Cal3_S2Stereo</name>
      <anchorfile>a03064.html</anchorfile>
      <anchor>a2ca55987f036f43be6bed31b7766ab27</anchor>
      <arglist>(double fx, double fy, double s, double u0, double v0, double b)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Cal3_S2Stereo</name>
      <anchorfile>a03064.html</anchorfile>
      <anchor>aa48a7b399986d48da55d6b8a954606f4</anchor>
      <arglist>(const Vector6 &amp;d)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Cal3_S2Stereo</name>
      <anchorfile>a03064.html</anchorfile>
      <anchor>a7f1fe1eea1342b36c190c66bad4476ef</anchor>
      <arglist>(double fov, int w, int h, double b)</arglist>
    </member>
    <member kind="function">
      <type>Point2</type>
      <name>uncalibrate</name>
      <anchorfile>a03064.html</anchorfile>
      <anchor>a92eeb7210fcf7ab4cd26c5a6f0b519f1</anchor>
      <arglist>(const Point2 &amp;p, OptionalJacobian&lt; 2, 6 &gt; Dcal=boost::none, OptionalJacobian&lt; 2, 2 &gt; Dp=boost::none) const</arglist>
    </member>
    <member kind="function">
      <type>Point2</type>
      <name>calibrate</name>
      <anchorfile>a03064.html</anchorfile>
      <anchor>ad054266bc5dfde1e58f89680d90d0a93</anchor>
      <arglist>(const Point2 &amp;p, OptionalJacobian&lt; 2, 6 &gt; Dcal=boost::none, OptionalJacobian&lt; 2, 2 &gt; Dp=boost::none) const</arglist>
    </member>
    <member kind="function">
      <type>Vector3</type>
      <name>calibrate</name>
      <anchorfile>a03064.html</anchorfile>
      <anchor>a6225ac9a389433f4bedc1d3b41725264</anchor>
      <arglist>(const Vector3 &amp;p) const</arglist>
    </member>
    <member kind="function">
      <type>const Cal3_S2 &amp;</type>
      <name>calibration</name>
      <anchorfile>a03064.html</anchorfile>
      <anchor>a362309000b68d34aa81155bde606cac6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Matrix3</type>
      <name>K</name>
      <anchorfile>a03064.html</anchorfile>
      <anchor>a6d9eef3b67eac82f63717fa967707047</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>baseline</name>
      <anchorfile>a03064.html</anchorfile>
      <anchor>aa2deb1f7e5d74fb15fd24844049029d6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Vector6</type>
      <name>vector</name>
      <anchorfile>a03064.html</anchorfile>
      <anchor>a2260bb03a4780c7e6df9ba1589280c40</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::Cal3Bundler</name>
    <filename>a03076.html</filename>
    <base>gtsam::Cal3</base>
    <member kind="friend">
      <type>friend class</type>
      <name>boost::serialization::access</name>
      <anchorfile>a03076.html</anchorfile>
      <anchor>ac98d07dd8f7b70e16ccb9a01abf56b9c</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>GTSAM_EXPORT friend std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a03076.html</anchorfile>
      <anchor>aee492fc8b1af3830a6dc899ec4c99796</anchor>
      <arglist>(std::ostream &amp;os, const Cal3Bundler &amp;cal)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>a03076.html</anchorfile>
      <anchor>a4f4d80270b6b21245ae35df8effc15ff</anchor>
      <arglist>(const std::string &amp;s=&quot;&quot;) const override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>equals</name>
      <anchorfile>a03076.html</anchorfile>
      <anchor>a4b98f2ce006880417ffec51ee7de3b77</anchor>
      <arglist>(const Cal3Bundler &amp;K, double tol=10e-9) const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Cal3Bundler</name>
      <anchorfile>a03076.html</anchorfile>
      <anchor>a1774c3bd09b74440caa6056e7e8ad264</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Cal3Bundler</name>
      <anchorfile>a03076.html</anchorfile>
      <anchor>a32366d4d57d94b3e78f4d1cf1f264084</anchor>
      <arglist>(double f, double k1, double k2, double u0=0, double v0=0, double tol=1e-5)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>k1</name>
      <anchorfile>a03076.html</anchorfile>
      <anchor>a000d35943600b9bf81818b9ae65c1e53</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>k2</name>
      <anchorfile>a03076.html</anchorfile>
      <anchor>a0162ada34d8b64e4371db3b093f18d1e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>px</name>
      <anchorfile>a03076.html</anchorfile>
      <anchor>a8604eededcae0c8223d368e16abb72dc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>py</name>
      <anchorfile>a03076.html</anchorfile>
      <anchor>a316d34bd6bc39b64eb9ac6898864db3b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Matrix3</type>
      <name>K</name>
      <anchorfile>a03076.html</anchorfile>
      <anchor>a2a4a952189376310f3bc02f247bfa1cf</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>Vector4</type>
      <name>k</name>
      <anchorfile>a03076.html</anchorfile>
      <anchor>a6e6ab8c1b9c678a23ae8fb60f148d8a9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Point2</type>
      <name>uncalibrate</name>
      <anchorfile>a03076.html</anchorfile>
      <anchor>a385d386469893b68323dee3f26ae169b</anchor>
      <arglist>(const Point2 &amp;p, OptionalJacobian&lt; 2, 3 &gt; Dcal=boost::none, OptionalJacobian&lt; 2, 2 &gt; Dp=boost::none) const</arglist>
    </member>
    <member kind="function">
      <type>Point2</type>
      <name>calibrate</name>
      <anchorfile>a03076.html</anchorfile>
      <anchor>aca01a23d9240191734e6ce69608a9eac</anchor>
      <arglist>(const Point2 &amp;pi, OptionalJacobian&lt; 2, 3 &gt; Dcal=boost::none, OptionalJacobian&lt; 2, 2 &gt; Dp=boost::none) const</arglist>
    </member>
    <member kind="function">
      <type>Matrix2</type>
      <name>D2d_intrinsic</name>
      <anchorfile>a03076.html</anchorfile>
      <anchor>a2d2f5baf132f1c70cd55fab1defc66ec</anchor>
      <arglist>(const Point2 &amp;p) const</arglist>
    </member>
    <member kind="function">
      <type>Matrix23</type>
      <name>D2d_calibration</name>
      <anchorfile>a03076.html</anchorfile>
      <anchor>a298f80d64ca9fe2e0c6fd508a767599c</anchor>
      <arglist>(const Point2 &amp;p) const</arglist>
    </member>
    <member kind="function">
      <type>Matrix25</type>
      <name>D2d_intrinsic_calibration</name>
      <anchorfile>a03076.html</anchorfile>
      <anchor>a130a3fee3d0c17fb1dfb3dab67ffdd66</anchor>
      <arglist>(const Point2 &amp;p) const</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>dim</name>
      <anchorfile>a03076.html</anchorfile>
      <anchor>ae445f8b0d019435455031101b2ef654e</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>Cal3Bundler</type>
      <name>retract</name>
      <anchorfile>a03076.html</anchorfile>
      <anchor>a1aae0a76422919169e665bc35e68897b</anchor>
      <arglist>(const Vector &amp;d) const</arglist>
    </member>
    <member kind="function">
      <type>Vector3</type>
      <name>localCoordinates</name>
      <anchorfile>a03076.html</anchorfile>
      <anchor>a3d9b93b77586cbfc637563a965d9bb74</anchor>
      <arglist>(const Cal3Bundler &amp;T2) const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static size_t</type>
      <name>Dim</name>
      <anchorfile>a03076.html</anchorfile>
      <anchor>af5790ae1df63a0bb946553657c4b9c85</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Cal3Bundler</name>
      <anchorfile>a03076.html</anchorfile>
      <anchor>a1774c3bd09b74440caa6056e7e8ad264</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Cal3Bundler</name>
      <anchorfile>a03076.html</anchorfile>
      <anchor>a32366d4d57d94b3e78f4d1cf1f264084</anchor>
      <arglist>(double f, double k1, double k2, double u0=0, double v0=0, double tol=1e-5)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>k1</name>
      <anchorfile>a03076.html</anchorfile>
      <anchor>a000d35943600b9bf81818b9ae65c1e53</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>k2</name>
      <anchorfile>a03076.html</anchorfile>
      <anchor>a0162ada34d8b64e4371db3b093f18d1e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>px</name>
      <anchorfile>a03076.html</anchorfile>
      <anchor>a8604eededcae0c8223d368e16abb72dc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>py</name>
      <anchorfile>a03076.html</anchorfile>
      <anchor>a316d34bd6bc39b64eb9ac6898864db3b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Matrix3</type>
      <name>K</name>
      <anchorfile>a03076.html</anchorfile>
      <anchor>a2a4a952189376310f3bc02f247bfa1cf</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>Vector4</type>
      <name>k</name>
      <anchorfile>a03076.html</anchorfile>
      <anchor>a6e6ab8c1b9c678a23ae8fb60f148d8a9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Point2</type>
      <name>uncalibrate</name>
      <anchorfile>a03076.html</anchorfile>
      <anchor>a385d386469893b68323dee3f26ae169b</anchor>
      <arglist>(const Point2 &amp;p, OptionalJacobian&lt; 2, 3 &gt; Dcal=boost::none, OptionalJacobian&lt; 2, 2 &gt; Dp=boost::none) const</arglist>
    </member>
    <member kind="function">
      <type>Point2</type>
      <name>calibrate</name>
      <anchorfile>a03076.html</anchorfile>
      <anchor>aca01a23d9240191734e6ce69608a9eac</anchor>
      <arglist>(const Point2 &amp;pi, OptionalJacobian&lt; 2, 3 &gt; Dcal=boost::none, OptionalJacobian&lt; 2, 2 &gt; Dp=boost::none) const</arglist>
    </member>
    <member kind="function">
      <type>Matrix2</type>
      <name>D2d_intrinsic</name>
      <anchorfile>a03076.html</anchorfile>
      <anchor>a2d2f5baf132f1c70cd55fab1defc66ec</anchor>
      <arglist>(const Point2 &amp;p) const</arglist>
    </member>
    <member kind="function">
      <type>Matrix23</type>
      <name>D2d_calibration</name>
      <anchorfile>a03076.html</anchorfile>
      <anchor>a298f80d64ca9fe2e0c6fd508a767599c</anchor>
      <arglist>(const Point2 &amp;p) const</arglist>
    </member>
    <member kind="function">
      <type>Matrix25</type>
      <name>D2d_intrinsic_calibration</name>
      <anchorfile>a03076.html</anchorfile>
      <anchor>a130a3fee3d0c17fb1dfb3dab67ffdd66</anchor>
      <arglist>(const Point2 &amp;p) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::Cal3DS2</name>
    <filename>a03088.html</filename>
    <base>gtsam::Cal3DS2_Base</base>
    <member kind="friend">
      <type>friend class</type>
      <name>boost::serialization::access</name>
      <anchorfile>a03088.html</anchorfile>
      <anchor>ac98d07dd8f7b70e16ccb9a01abf56b9c</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>GTSAM_EXPORT friend std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a03088.html</anchorfile>
      <anchor>a2bc3f79c8e494b4766f91f63357dc3a2</anchor>
      <arglist>(std::ostream &amp;os, const Cal3DS2 &amp;cal)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>a03088.html</anchorfile>
      <anchor>a06926b7c3049d650e7d7899026958646</anchor>
      <arglist>(const std::string &amp;s=&quot;&quot;) const override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>equals</name>
      <anchorfile>a03088.html</anchorfile>
      <anchor>aa51ad8d273e4ebd54a4c71c3ecaff948</anchor>
      <arglist>(const Cal3DS2 &amp;K, double tol=10e-9) const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Cal3DS2</name>
      <anchorfile>a03088.html</anchorfile>
      <anchor>afb959a59bb324eef4fd6578feb9eca8f</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function">
      <type>Cal3DS2</type>
      <name>retract</name>
      <anchorfile>a03088.html</anchorfile>
      <anchor>ac847149836c68831e521deebbf5416d4</anchor>
      <arglist>(const Vector &amp;d) const</arglist>
    </member>
    <member kind="function">
      <type>Vector</type>
      <name>localCoordinates</name>
      <anchorfile>a03088.html</anchorfile>
      <anchor>ae50c6756bae966333b7babb530f4aa1b</anchor>
      <arglist>(const Cal3DS2 &amp;T2) const</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>dim</name>
      <anchorfile>a03088.html</anchorfile>
      <anchor>a318503cc84b7837b4f3b12cf8456abe2</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static size_t</type>
      <name>Dim</name>
      <anchorfile>a03088.html</anchorfile>
      <anchor>abd94361657d8a101d46ca527940dd502</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>boost::shared_ptr&lt; Base &gt;</type>
      <name>clone</name>
      <anchorfile>a03088.html</anchorfile>
      <anchor>a6233e4f3132d43a4d5f39cd6d2e1d162</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Cal3DS2</name>
      <anchorfile>a03088.html</anchorfile>
      <anchor>afb959a59bb324eef4fd6578feb9eca8f</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function">
      <type>boost::shared_ptr&lt; Base &gt;</type>
      <name>clone</name>
      <anchorfile>a03088.html</anchorfile>
      <anchor>a6233e4f3132d43a4d5f39cd6d2e1d162</anchor>
      <arglist>() const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::Cal3DS2_Base</name>
    <filename>a03100.html</filename>
    <base>gtsam::Cal3</base>
    <member kind="friend">
      <type>friend class</type>
      <name>boost::serialization::access</name>
      <anchorfile>a03100.html</anchorfile>
      <anchor>ac98d07dd8f7b70e16ccb9a01abf56b9c</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>GTSAM_EXPORT friend std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a03100.html</anchorfile>
      <anchor>a6219b6b734aee5c8c55a80bd263203a6</anchor>
      <arglist>(std::ostream &amp;os, const Cal3DS2_Base &amp;cal)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>a03100.html</anchorfile>
      <anchor>a83ce4362c47a32f018c4fd7019b85432</anchor>
      <arglist>(const std::string &amp;s=&quot;&quot;) const override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>equals</name>
      <anchorfile>a03100.html</anchorfile>
      <anchor>aa9318f42471324c107d5c2aeb2c2c411</anchor>
      <arglist>(const Cal3DS2_Base &amp;K, double tol=1e-8) const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Cal3DS2_Base</name>
      <anchorfile>a03100.html</anchorfile>
      <anchor>a00a1fad7afcbb3ba09a368c3e4903ddc</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>k1</name>
      <anchorfile>a03100.html</anchorfile>
      <anchor>a90a0cc3150156eb17066c3d6bb95a99e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>k2</name>
      <anchorfile>a03100.html</anchorfile>
      <anchor>a38ce12c0386aa31d159cedea0076afca</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>p1</name>
      <anchorfile>a03100.html</anchorfile>
      <anchor>add2664cff0283ec8b8299ff0002b019c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>p2</name>
      <anchorfile>a03100.html</anchorfile>
      <anchor>a0a28d69c1e3f12bd9c7d53419cc521e3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Vector4</type>
      <name>k</name>
      <anchorfile>a03100.html</anchorfile>
      <anchor>ae46e8297a7e3dab6ec2486e0bf0648ae</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Vector9</type>
      <name>vector</name>
      <anchorfile>a03100.html</anchorfile>
      <anchor>abf88fb2d93077ecd0a4aba487c5b23ef</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Point2</type>
      <name>uncalibrate</name>
      <anchorfile>a03100.html</anchorfile>
      <anchor>ac6e5bbaf27a7beb03fce62197703dd6e</anchor>
      <arglist>(const Point2 &amp;p, OptionalJacobian&lt; 2, 9 &gt; Dcal=boost::none, OptionalJacobian&lt; 2, 2 &gt; Dp=boost::none) const</arglist>
    </member>
    <member kind="function">
      <type>Point2</type>
      <name>calibrate</name>
      <anchorfile>a03100.html</anchorfile>
      <anchor>ab9a733c2c668d7c2f95a7b7917035740</anchor>
      <arglist>(const Point2 &amp;p, OptionalJacobian&lt; 2, 9 &gt; Dcal=boost::none, OptionalJacobian&lt; 2, 2 &gt; Dp=boost::none) const</arglist>
    </member>
    <member kind="function">
      <type>Matrix2</type>
      <name>D2d_intrinsic</name>
      <anchorfile>a03100.html</anchorfile>
      <anchor>a2a5de5d704c658de776503bc78f30575</anchor>
      <arglist>(const Point2 &amp;p) const</arglist>
    </member>
    <member kind="function">
      <type>Matrix29</type>
      <name>D2d_calibration</name>
      <anchorfile>a03100.html</anchorfile>
      <anchor>a3528f21cedb334863e95af30e342d6de</anchor>
      <arglist>(const Point2 &amp;p) const</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>dim</name>
      <anchorfile>a03100.html</anchorfile>
      <anchor>acf69cfd81be4e31584eaac82613ace99</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static size_t</type>
      <name>Dim</name>
      <anchorfile>a03100.html</anchorfile>
      <anchor>a0f8b1677bcf414c4df392572871f6d38</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual boost::shared_ptr&lt; Cal3DS2_Base &gt;</type>
      <name>clone</name>
      <anchorfile>a03100.html</anchorfile>
      <anchor>a1b018aa2e159cf25d5095e3aff510a94</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Cal3DS2_Base</name>
      <anchorfile>a03100.html</anchorfile>
      <anchor>a00a1fad7afcbb3ba09a368c3e4903ddc</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual boost::shared_ptr&lt; Cal3DS2_Base &gt;</type>
      <name>clone</name>
      <anchorfile>a03100.html</anchorfile>
      <anchor>a1b018aa2e159cf25d5095e3aff510a94</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>k2_</name>
      <anchorfile>a03100.html</anchorfile>
      <anchor>a2240b8d0b619f888597ef6ab9ea115cc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>p2_</name>
      <anchorfile>a03100.html</anchorfile>
      <anchor>a8c6ed66960f8b157e084f19bd0f4c979</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>tol_</name>
      <anchorfile>a03100.html</anchorfile>
      <anchor>ad121faae718cf3367ab6f9cbd93800cc</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::Cal3Fisheye</name>
    <filename>a03104.html</filename>
    <base>gtsam::Cal3</base>
    <member kind="friend">
      <type>friend class</type>
      <name>boost::serialization::access</name>
      <anchorfile>a03104.html</anchorfile>
      <anchor>ac98d07dd8f7b70e16ccb9a01abf56b9c</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>GTSAM_EXPORT friend std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a03104.html</anchorfile>
      <anchor>a46667b515ddc1b5604f03c8766b73300</anchor>
      <arglist>(std::ostream &amp;os, const Cal3Fisheye &amp;cal)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>a03104.html</anchorfile>
      <anchor>a322fc71d2196bcd8d66eb35fdec38009</anchor>
      <arglist>(const std::string &amp;s=&quot;&quot;) const override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>equals</name>
      <anchorfile>a03104.html</anchorfile>
      <anchor>a780c1182175d2d47f2054b5b8bab90dd</anchor>
      <arglist>(const Cal3Fisheye &amp;K, double tol=10e-9) const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Cal3Fisheye</name>
      <anchorfile>a03104.html</anchorfile>
      <anchor>afb3587b815f8d6b25d8dee3704063132</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>k1</name>
      <anchorfile>a03104.html</anchorfile>
      <anchor>a299898006c6bb91615df6cdf96aec7af</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>k2</name>
      <anchorfile>a03104.html</anchorfile>
      <anchor>a9b72276cdc3e43515608be1a2ccc92ba</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>k3</name>
      <anchorfile>a03104.html</anchorfile>
      <anchor>a683adc491f83a1e7a0b77ecbb7babe6f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>k4</name>
      <anchorfile>a03104.html</anchorfile>
      <anchor>a22b48ebb60cd7aca9adc850701880dd5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Vector4</type>
      <name>k</name>
      <anchorfile>a03104.html</anchorfile>
      <anchor>aeacf1a728e2d239975a8135e110e7bee</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Vector9</type>
      <name>vector</name>
      <anchorfile>a03104.html</anchorfile>
      <anchor>acf24577bcdba78c32c94eb7e9e5d4a55</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Point2</type>
      <name>uncalibrate</name>
      <anchorfile>a03104.html</anchorfile>
      <anchor>a7fb5477b8b6f99a31565395139b1f9f8</anchor>
      <arglist>(const Point2 &amp;p, OptionalJacobian&lt; 2, 9 &gt; Dcal=boost::none, OptionalJacobian&lt; 2, 2 &gt; Dp=boost::none) const</arglist>
    </member>
    <member kind="function">
      <type>Point2</type>
      <name>calibrate</name>
      <anchorfile>a03104.html</anchorfile>
      <anchor>a1f39394c2d414526d128a58ddd17b37d</anchor>
      <arglist>(const Point2 &amp;p, OptionalJacobian&lt; 2, 9 &gt; Dcal=boost::none, OptionalJacobian&lt; 2, 2 &gt; Dp=boost::none) const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static double</type>
      <name>Scaling</name>
      <anchorfile>a03104.html</anchorfile>
      <anchor>ab48aea9600cf16d6a377aa9cceeec838</anchor>
      <arglist>(double r)</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>dim</name>
      <anchorfile>a03104.html</anchorfile>
      <anchor>aaf6f5a9ed4d65f0e0392b18c98996da7</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>Cal3Fisheye</type>
      <name>retract</name>
      <anchorfile>a03104.html</anchorfile>
      <anchor>afb53a41a0f7fb92e54b1efb46e750d10</anchor>
      <arglist>(const Vector &amp;d) const</arglist>
    </member>
    <member kind="function">
      <type>Vector</type>
      <name>localCoordinates</name>
      <anchorfile>a03104.html</anchorfile>
      <anchor>a6cdbc3c9dea1eda0c27581f468edf658</anchor>
      <arglist>(const Cal3Fisheye &amp;T2) const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static size_t</type>
      <name>Dim</name>
      <anchorfile>a03104.html</anchorfile>
      <anchor>a709b5bece67a4edd562d45adbe7d14db</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual boost::shared_ptr&lt; Cal3Fisheye &gt;</type>
      <name>clone</name>
      <anchorfile>a03104.html</anchorfile>
      <anchor>ae58893698b637fdc71b91f17fed6c856</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Cal3Fisheye</name>
      <anchorfile>a03104.html</anchorfile>
      <anchor>afb3587b815f8d6b25d8dee3704063132</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual boost::shared_ptr&lt; Cal3Fisheye &gt;</type>
      <name>clone</name>
      <anchorfile>a03104.html</anchorfile>
      <anchor>ae58893698b637fdc71b91f17fed6c856</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::Cal3Unified</name>
    <filename>a03116.html</filename>
    <base>gtsam::Cal3DS2_Base</base>
    <member kind="friend">
      <type>GTSAM_EXPORT friend std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a03116.html</anchorfile>
      <anchor>ae97dc6c42ec3b67a25c554ea2ce80d16</anchor>
      <arglist>(std::ostream &amp;os, const Cal3Unified &amp;cal)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>a03116.html</anchorfile>
      <anchor>a4fbdb341551bc22cdb91614ef0519bd4</anchor>
      <arglist>(const std::string &amp;s=&quot;&quot;) const override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>equals</name>
      <anchorfile>a03116.html</anchorfile>
      <anchor>aa6d55b7232cc0374fe167dd4266a9ac6</anchor>
      <arglist>(const Cal3Unified &amp;K, double tol=10e-9) const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Cal3Unified</name>
      <anchorfile>a03116.html</anchorfile>
      <anchor>a6ce150e7037a83dccc3fdbabce4970e7</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>xi</name>
      <anchorfile>a03116.html</anchorfile>
      <anchor>a80a36bbc6309792977cd3a13864a6c2d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Vector10</type>
      <name>vector</name>
      <anchorfile>a03116.html</anchorfile>
      <anchor>a1b55a8740cdd5e7c7e8c49783222741f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Point2</type>
      <name>uncalibrate</name>
      <anchorfile>a03116.html</anchorfile>
      <anchor>af43cfcde39736c03a216c0329747cc67</anchor>
      <arglist>(const Point2 &amp;p, OptionalJacobian&lt; 2, 10 &gt; Dcal=boost::none, OptionalJacobian&lt; 2, 2 &gt; Dp=boost::none) const</arglist>
    </member>
    <member kind="function">
      <type>Point2</type>
      <name>calibrate</name>
      <anchorfile>a03116.html</anchorfile>
      <anchor>a052ce1b774b2f1afa24bbfee71f9ac59</anchor>
      <arglist>(const Point2 &amp;p, OptionalJacobian&lt; 2, 10 &gt; Dcal=boost::none, OptionalJacobian&lt; 2, 2 &gt; Dp=boost::none) const</arglist>
    </member>
    <member kind="function">
      <type>Point2</type>
      <name>spaceToNPlane</name>
      <anchorfile>a03116.html</anchorfile>
      <anchor>a19b59abd92fb06e447e010b77cec3148</anchor>
      <arglist>(const Point2 &amp;p) const</arglist>
    </member>
    <member kind="function">
      <type>Point2</type>
      <name>nPlaneToSpace</name>
      <anchorfile>a03116.html</anchorfile>
      <anchor>a34a211df3c9171dca639bab4a1fb4093</anchor>
      <arglist>(const Point2 &amp;p) const</arglist>
    </member>
    <member kind="function">
      <type>Cal3Unified</type>
      <name>retract</name>
      <anchorfile>a03116.html</anchorfile>
      <anchor>a5dec3028b266a10ad4e6bcbd978853ab</anchor>
      <arglist>(const Vector &amp;d) const</arglist>
    </member>
    <member kind="function">
      <type>Vector</type>
      <name>localCoordinates</name>
      <anchorfile>a03116.html</anchorfile>
      <anchor>af5d21e51323d10398fc97d044ab461d0</anchor>
      <arglist>(const Cal3Unified &amp;T2) const</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>dim</name>
      <anchorfile>a03116.html</anchorfile>
      <anchor>a2703b822e9f3dd4ccb5d32c4ad91bcfb</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static size_t</type>
      <name>Dim</name>
      <anchorfile>a03116.html</anchorfile>
      <anchor>af74f4e76f00451bbd751ff42786df828</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Cal3Unified</name>
      <anchorfile>a03116.html</anchorfile>
      <anchor>a6ce150e7037a83dccc3fdbabce4970e7</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>xi</name>
      <anchorfile>a03116.html</anchorfile>
      <anchor>a80a36bbc6309792977cd3a13864a6c2d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Vector10</type>
      <name>vector</name>
      <anchorfile>a03116.html</anchorfile>
      <anchor>a1b55a8740cdd5e7c7e8c49783222741f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Point2</type>
      <name>uncalibrate</name>
      <anchorfile>a03116.html</anchorfile>
      <anchor>af43cfcde39736c03a216c0329747cc67</anchor>
      <arglist>(const Point2 &amp;p, OptionalJacobian&lt; 2, 10 &gt; Dcal=boost::none, OptionalJacobian&lt; 2, 2 &gt; Dp=boost::none) const</arglist>
    </member>
    <member kind="function">
      <type>Point2</type>
      <name>calibrate</name>
      <anchorfile>a03116.html</anchorfile>
      <anchor>a052ce1b774b2f1afa24bbfee71f9ac59</anchor>
      <arglist>(const Point2 &amp;p, OptionalJacobian&lt; 2, 10 &gt; Dcal=boost::none, OptionalJacobian&lt; 2, 2 &gt; Dp=boost::none) const</arglist>
    </member>
    <member kind="function">
      <type>Point2</type>
      <name>spaceToNPlane</name>
      <anchorfile>a03116.html</anchorfile>
      <anchor>a19b59abd92fb06e447e010b77cec3148</anchor>
      <arglist>(const Point2 &amp;p) const</arglist>
    </member>
    <member kind="function">
      <type>Point2</type>
      <name>nPlaneToSpace</name>
      <anchorfile>a03116.html</anchorfile>
      <anchor>a34a211df3c9171dca639bab4a1fb4093</anchor>
      <arglist>(const Point2 &amp;p) const</arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>boost::serialization::access</name>
      <anchorfile>a03116.html</anchorfile>
      <anchor>ac98d07dd8f7b70e16ccb9a01abf56b9c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::CalibratedCamera</name>
    <filename>a03136.html</filename>
    <base>gtsam::PinholeBase</base>
    <member kind="friend">
      <type>friend class</type>
      <name>boost::serialization::access</name>
      <anchorfile>a03136.html</anchorfile>
      <anchor>ac98d07dd8f7b70e16ccb9a01abf56b9c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CalibratedCamera</name>
      <anchorfile>a03136.html</anchorfile>
      <anchor>a5b59414e39297638751de5f43b293798</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CalibratedCamera</name>
      <anchorfile>a03136.html</anchorfile>
      <anchor>ae9607d9d9ef98835b38d0fb494eba191</anchor>
      <arglist>(const Pose3 &amp;pose)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CalibratedCamera</name>
      <anchorfile>a03136.html</anchorfile>
      <anchor>a88d317a781597e5243bb7995df07d9cc</anchor>
      <arglist>(const Vector &amp;v)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~CalibratedCamera</name>
      <anchorfile>a03136.html</anchorfile>
      <anchor>ab3e14367e42bcc0d48495862c48aed81</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>CalibratedCamera</type>
      <name>retract</name>
      <anchorfile>a03136.html</anchorfile>
      <anchor>a4d59d1978cb514784f49ea252f70b52c</anchor>
      <arglist>(const Vector &amp;d) const</arglist>
    </member>
    <member kind="function">
      <type>Vector</type>
      <name>localCoordinates</name>
      <anchorfile>a03136.html</anchorfile>
      <anchor>a6bbda25ef776c5e222518d8aeda54140</anchor>
      <arglist>(const CalibratedCamera &amp;T2) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>a03136.html</anchorfile>
      <anchor>ae1a86c7e7ea234b26ab7b50ae12bc192</anchor>
      <arglist>(const std::string &amp;s=&quot;CalibratedCamera&quot;) const override</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>dim</name>
      <anchorfile>a03136.html</anchorfile>
      <anchor>a676f6bf0f31dbb91db4dc65a7f7ce193</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static size_t</type>
      <name>Dim</name>
      <anchorfile>a03136.html</anchorfile>
      <anchor>ab6bda69b20fd92ca4de15ef9eac594bb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Point2</type>
      <name>project</name>
      <anchorfile>a03136.html</anchorfile>
      <anchor>aaa7b49f03ffcaaf4b6f9b69973ee28ec</anchor>
      <arglist>(const Point3 &amp;point, OptionalJacobian&lt; 2, 6 &gt; Dcamera=boost::none, OptionalJacobian&lt; 2, 3 &gt; Dpoint=boost::none) const</arglist>
    </member>
    <member kind="function">
      <type>Point3</type>
      <name>backproject</name>
      <anchorfile>a03136.html</anchorfile>
      <anchor>a50dba2306064516d387f5b8688349efe</anchor>
      <arglist>(const Point2 &amp;pn, double depth, OptionalJacobian&lt; 3, 6 &gt; Dresult_dpose=boost::none, OptionalJacobian&lt; 3, 2 &gt; Dresult_dp=boost::none, OptionalJacobian&lt; 3, 1 &gt; Dresult_ddepth=boost::none) const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>range</name>
      <anchorfile>a03136.html</anchorfile>
      <anchor>ae5bcde3dc7486e3e7416d7b511c0fe71</anchor>
      <arglist>(const Point3 &amp;point, OptionalJacobian&lt; 1, 6 &gt; Dcamera=boost::none, OptionalJacobian&lt; 1, 3 &gt; Dpoint=boost::none) const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>range</name>
      <anchorfile>a03136.html</anchorfile>
      <anchor>a65d00038d2f3cf408469f004add3b757</anchor>
      <arglist>(const Pose3 &amp;pose, OptionalJacobian&lt; 1, 6 &gt; Dcamera=boost::none, OptionalJacobian&lt; 1, 6 &gt; Dpose=boost::none) const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>range</name>
      <anchorfile>a03136.html</anchorfile>
      <anchor>ac452f777424850f1333bf6ec5d00b610</anchor>
      <arglist>(const CalibratedCamera &amp;camera, OptionalJacobian&lt; 1, 6 &gt; H1=boost::none, OptionalJacobian&lt; 1, 6 &gt; H2=boost::none) const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static CalibratedCamera</type>
      <name>Level</name>
      <anchorfile>a03136.html</anchorfile>
      <anchor>a816481e5b3be92b94f1ba0371806a2d6</anchor>
      <arglist>(const Pose2 &amp;pose2, double height)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static CalibratedCamera</type>
      <name>Lookat</name>
      <anchorfile>a03136.html</anchorfile>
      <anchor>a5a6ed3125f756b682faa83338e895cb4</anchor>
      <arglist>(const Point3 &amp;eye, const Point3 &amp;target, const Point3 &amp;upVector)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CalibratedCamera</name>
      <anchorfile>a03136.html</anchorfile>
      <anchor>a5b59414e39297638751de5f43b293798</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CalibratedCamera</name>
      <anchorfile>a03136.html</anchorfile>
      <anchor>ae9607d9d9ef98835b38d0fb494eba191</anchor>
      <arglist>(const Pose3 &amp;pose)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CalibratedCamera</name>
      <anchorfile>a03136.html</anchorfile>
      <anchor>a88d317a781597e5243bb7995df07d9cc</anchor>
      <arglist>(const Vector &amp;v)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~CalibratedCamera</name>
      <anchorfile>a03136.html</anchorfile>
      <anchor>ab3e14367e42bcc0d48495862c48aed81</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Point2</type>
      <name>project</name>
      <anchorfile>a03136.html</anchorfile>
      <anchor>aaa7b49f03ffcaaf4b6f9b69973ee28ec</anchor>
      <arglist>(const Point3 &amp;point, OptionalJacobian&lt; 2, 6 &gt; Dcamera=boost::none, OptionalJacobian&lt; 2, 3 &gt; Dpoint=boost::none) const</arglist>
    </member>
    <member kind="function">
      <type>Point3</type>
      <name>backproject</name>
      <anchorfile>a03136.html</anchorfile>
      <anchor>a50dba2306064516d387f5b8688349efe</anchor>
      <arglist>(const Point2 &amp;pn, double depth, OptionalJacobian&lt; 3, 6 &gt; Dresult_dpose=boost::none, OptionalJacobian&lt; 3, 2 &gt; Dresult_dp=boost::none, OptionalJacobian&lt; 3, 1 &gt; Dresult_ddepth=boost::none) const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>range</name>
      <anchorfile>a03136.html</anchorfile>
      <anchor>ae5bcde3dc7486e3e7416d7b511c0fe71</anchor>
      <arglist>(const Point3 &amp;point, OptionalJacobian&lt; 1, 6 &gt; Dcamera=boost::none, OptionalJacobian&lt; 1, 3 &gt; Dpoint=boost::none) const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>range</name>
      <anchorfile>a03136.html</anchorfile>
      <anchor>a65d00038d2f3cf408469f004add3b757</anchor>
      <arglist>(const Pose3 &amp;pose, OptionalJacobian&lt; 1, 6 &gt; Dcamera=boost::none, OptionalJacobian&lt; 1, 6 &gt; Dpose=boost::none) const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>range</name>
      <anchorfile>a03136.html</anchorfile>
      <anchor>ac452f777424850f1333bf6ec5d00b610</anchor>
      <arglist>(const CalibratedCamera &amp;camera, OptionalJacobian&lt; 1, 6 &gt; H1=boost::none, OptionalJacobian&lt; 1, 6 &gt; H2=boost::none) const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static CalibratedCamera</type>
      <name>Level</name>
      <anchorfile>a03136.html</anchorfile>
      <anchor>a816481e5b3be92b94f1ba0371806a2d6</anchor>
      <arglist>(const Pose2 &amp;pose2, double height)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static CalibratedCamera</type>
      <name>Lookat</name>
      <anchorfile>a03136.html</anchorfile>
      <anchor>a5a6ed3125f756b682faa83338e895cb4</anchor>
      <arglist>(const Point3 &amp;eye, const Point3 &amp;target, const Point3 &amp;upVector)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>gtsam::CameraProjectionMatrix</name>
    <filename>a03448.html</filename>
    <templarg>class CALIBRATION</templarg>
  </compound>
  <compound kind="class">
    <name>gtsam::CameraSet</name>
    <filename>a03152.html</filename>
    <templarg>class CAMERA</templarg>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~CameraSet</name>
      <anchorfile>a03152.html</anchorfile>
      <anchor>a5415aa273cb412c2cb4c1e0dc9094355</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>print</name>
      <anchorfile>a03152.html</anchorfile>
      <anchor>a0a63d102fb3a0ff2bae4e1e6afeab87e</anchor>
      <arglist>(const std::string &amp;s=&quot;&quot;) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>equals</name>
      <anchorfile>a03152.html</anchorfile>
      <anchor>a76042f2726211fd8c3ef103b8a857fcb</anchor>
      <arglist>(const CameraSet &amp;p, double tol=1e-9) const</arglist>
    </member>
    <member kind="function">
      <type>ZVector</type>
      <name>project2</name>
      <anchorfile>a03152.html</anchorfile>
      <anchor>afa9d5a849df31c5c564999fef769afef</anchor>
      <arglist>(const POINT &amp;point, boost::optional&lt; FBlocks &amp; &gt; Fs=boost::none, boost::optional&lt; Matrix &amp; &gt; E=boost::none) const</arglist>
    </member>
    <member kind="function">
      <type>Vector</type>
      <name>reprojectionError</name>
      <anchorfile>a03152.html</anchorfile>
      <anchor>a092e0b2611c27f1a144025d6d9a5e860</anchor>
      <arglist>(const POINT &amp;point, const ZVector &amp;measured, boost::optional&lt; FBlocks &amp; &gt; Fs=boost::none, boost::optional&lt; Matrix &amp; &gt; E=boost::none) const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static SymmetricBlockMatrix</type>
      <name>SchurComplement</name>
      <anchorfile>a03152.html</anchorfile>
      <anchor>aa3d01f89448ff9022e5749c4dc84031a</anchor>
      <arglist>(const std::vector&lt; Eigen::Matrix&lt; double, ZDim, ND &gt;, Eigen::aligned_allocator&lt; Eigen::Matrix&lt; double, ZDim, ND &gt; &gt; &gt; &amp;Fs, const Matrix &amp;E, const Eigen::Matrix&lt; double, N, N &gt; &amp;P, const Vector &amp;b)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static SymmetricBlockMatrix</type>
      <name>SchurComplementAndRearrangeBlocks</name>
      <anchorfile>a03152.html</anchorfile>
      <anchor>aa0e9b151af69adaf352f6e2ff4cd64cd</anchor>
      <arglist>(const std::vector&lt; Eigen::Matrix&lt; double, ZDim, ND &gt;, Eigen::aligned_allocator&lt; Eigen::Matrix&lt; double, ZDim, ND &gt; &gt; &gt; &amp;Fs, const Matrix &amp;E, const Eigen::Matrix&lt; double, N, N &gt; &amp;P, const Vector &amp;b, const KeyVector &amp;jacobianKeys, const KeyVector &amp;hessianKeys)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static SymmetricBlockMatrix</type>
      <name>SchurComplement</name>
      <anchorfile>a03152.html</anchorfile>
      <anchor>aafc7e8babf561cdd10bcaa72e80e39bb</anchor>
      <arglist>(const FBlocks &amp;Fs, const Matrix &amp;E, const Eigen::Matrix&lt; double, N, N &gt; &amp;P, const Vector &amp;b)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>ComputePointCovariance</name>
      <anchorfile>a03152.html</anchorfile>
      <anchor>a18f19b403b2b8199926f1e36a26f92fd</anchor>
      <arglist>(Eigen::Matrix&lt; double, N, N &gt; &amp;P, const Matrix &amp;E, double lambda, bool diagonalDamping=false)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Matrix</type>
      <name>PointCov</name>
      <anchorfile>a03152.html</anchorfile>
      <anchor>a78b6feaeb08bb174f61caf9bb42c6839</anchor>
      <arglist>(const Matrix &amp;E, const double lambda=0.0, bool diagonalDamping=false)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static SymmetricBlockMatrix</type>
      <name>SchurComplement</name>
      <anchorfile>a03152.html</anchorfile>
      <anchor>a3c2a77c489168d59c4b4a465dd825774</anchor>
      <arglist>(const FBlocks &amp;Fblocks, const Matrix &amp;E, const Vector &amp;b, const double lambda=0.0, bool diagonalDamping=false)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>UpdateSchurComplement</name>
      <anchorfile>a03152.html</anchorfile>
      <anchor>a8c675ee84d5eea01fd1a1b14d5d21136</anchor>
      <arglist>(const FBlocks &amp;Fs, const Matrix &amp;E, const Eigen::Matrix&lt; double, N, N &gt; &amp;P, const Vector &amp;b, const KeyVector &amp;allKeys, const KeyVector &amp;keys, SymmetricBlockMatrix &amp;augmentedHessian)</arglist>
    </member>
    <member kind="typedef">
      <type>Eigen::Matrix&lt; double, ZDim, D &gt;</type>
      <name>MatrixZD</name>
      <anchorfile>a03152.html</anchorfile>
      <anchor>ad959e3709004c7f7c219bd9b52a18ebd</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>CAMERA::Measurement</type>
      <name>Z</name>
      <anchorfile>a03152.html</anchorfile>
      <anchor>a4a53cfa51d5724a716a1235407a8b44d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static Vector</type>
      <name>ErrorVector</name>
      <anchorfile>a03152.html</anchorfile>
      <anchor>a7e9f7b66f70c0b6ec45101496987244b</anchor>
      <arglist>(const ZVector &amp;predicted, const ZVector &amp;measured)</arglist>
    </member>
    <member kind="variable" protection="protected" static="yes">
      <type>static const int</type>
      <name>D</name>
      <anchorfile>a03152.html</anchorfile>
      <anchor>ab6d158288b56d69a8bf0cab48da204ef</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected" static="yes">
      <type>static const int</type>
      <name>ZDim</name>
      <anchorfile>a03152.html</anchorfile>
      <anchor>aa53c362cacc434f7885688c5d113ff57</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>boost::serialization::access</name>
      <anchorfile>a03152.html</anchorfile>
      <anchor>ac98d07dd8f7b70e16ccb9a01abf56b9c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::noiseModel::mEstimator::Cauchy</name>
    <filename>a03848.html</filename>
    <base>gtsam::noiseModel::mEstimator::Base</base>
    <member kind="friend">
      <type>friend class</type>
      <name>boost::serialization::access</name>
      <anchorfile>a03848.html</anchorfile>
      <anchor>ac98d07dd8f7b70e16ccb9a01abf56b9c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>gtsam::Rot3::CayleyChart</name>
    <filename>a03340.html</filename>
  </compound>
  <compound kind="struct">
    <name>gtsam::CGState</name>
    <filename>a03772.html</filename>
    <templarg>class S</templarg>
    <templarg>class V</templarg>
    <templarg>class E</templarg>
    <member kind="variable">
      <type>int</type>
      <name>k</name>
      <anchorfile>a03772.html</anchorfile>
      <anchor>a57ba7e407a63bdc77e53e8ff76985ab3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>steepest</name>
      <anchorfile>a03772.html</anchorfile>
      <anchor>a0ec86902a54fdd09f879a398b60fb585</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>V</type>
      <name>d</name>
      <anchorfile>a03772.html</anchorfile>
      <anchor>af7b2174dd081a48416a7f4b3bdbeda66</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>threshold</name>
      <anchorfile>a03772.html</anchorfile>
      <anchor>a377969b240efda1b91aec68ac0fd1273</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>gtsam::Pose2::ChartAtOrigin</name>
    <filename>a03268.html</filename>
  </compound>
  <compound kind="struct">
    <name>gtsam::Pose3::ChartAtOrigin</name>
    <filename>a03292.html</filename>
  </compound>
  <compound kind="struct">
    <name>gtsam::Rot2::ChartAtOrigin</name>
    <filename>a03324.html</filename>
  </compound>
  <compound kind="struct">
    <name>gtsam::Rot3::ChartAtOrigin</name>
    <filename>a03344.html</filename>
  </compound>
  <compound kind="struct">
    <name>gtsam::Similarity3::ChartAtOrigin</name>
    <filename>a03360.html</filename>
  </compound>
  <compound kind="struct">
    <name>gtsam::SO::ChartAtOrigin</name>
    <filename>a03400.html</filename>
    <member kind="function" static="yes">
      <type>static SO</type>
      <name>Retract</name>
      <anchorfile>a03400.html</anchorfile>
      <anchor>ac4646392096f7fe9d121d716310d9924</anchor>
      <arglist>(const TangentVector &amp;xi, ChartJacobian H=boost::none)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static TangentVector</type>
      <name>Local</name>
      <anchorfile>a03400.html</anchorfile>
      <anchor>a8fcf9d1e42da2706d821d76789a7d688</anchor>
      <arglist>(const SO &amp;R, ChartJacobian H=boost::none)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>gtsam::Chebyshev1Basis</name>
    <filename>a02876.html</filename>
    <base>Basis&lt; Chebyshev1Basis &gt;</base>
    <member kind="function" static="yes">
      <type>static Weights</type>
      <name>CalculateWeights</name>
      <anchorfile>a02876.html</anchorfile>
      <anchor>a0491db33b838109613611f2d14ce1faa</anchor>
      <arglist>(size_t N, double x, double a=-1, double b=1)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Weights</type>
      <name>DerivativeWeights</name>
      <anchorfile>a02876.html</anchorfile>
      <anchor>a98f67836c3e77c03417ae3466887f084</anchor>
      <arglist>(size_t N, double x, double a=-1, double b=1)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::Chebyshev2</name>
    <filename>a02884.html</filename>
    <base>Basis&lt; Chebyshev2 &gt;</base>
    <member kind="function" static="yes">
      <type>static double</type>
      <name>Point</name>
      <anchorfile>a02884.html</anchorfile>
      <anchor>a545c241cb6421d73f3494701ee7e4812</anchor>
      <arglist>(size_t N, int j)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static double</type>
      <name>Point</name>
      <anchorfile>a02884.html</anchorfile>
      <anchor>ab28730ac756133e4d93752a34b1ecad8</anchor>
      <arglist>(size_t N, int j, double a, double b)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Vector</type>
      <name>Points</name>
      <anchorfile>a02884.html</anchorfile>
      <anchor>abe793df46865398aa41cae400190148c</anchor>
      <arglist>(size_t N)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Vector</type>
      <name>Points</name>
      <anchorfile>a02884.html</anchorfile>
      <anchor>acef4ab538051627502a1205569ff650c</anchor>
      <arglist>(size_t N, double a, double b)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Weights</type>
      <name>CalculateWeights</name>
      <anchorfile>a02884.html</anchorfile>
      <anchor>a6eb3f078588d867ad787a51a04edfcf7</anchor>
      <arglist>(size_t N, double x, double a=-1, double b=1)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Weights</type>
      <name>DerivativeWeights</name>
      <anchorfile>a02884.html</anchorfile>
      <anchor>a90d4360e830ca22bf69b089dc11677dc</anchor>
      <arglist>(size_t N, double x, double a=-1, double b=1)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static DiffMatrix</type>
      <name>DifferentiationMatrix</name>
      <anchorfile>a02884.html</anchorfile>
      <anchor>af4bc6be7932f335b1e5e0ff74c7db276</anchor>
      <arglist>(size_t N, double a=-1, double b=1)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Weights</type>
      <name>IntegrationWeights</name>
      <anchorfile>a02884.html</anchorfile>
      <anchor>a71b6f5d99285e4f5067779a082325cb7</anchor>
      <arglist>(size_t N, double a=-1, double b=1)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Matrix</type>
      <name>matrix</name>
      <anchorfile>a02884.html</anchorfile>
      <anchor>a051e0bad00eae3b8317655c12b7ab9ff</anchor>
      <arglist>(boost::function&lt; Eigen::Matrix&lt; double, M, 1 &gt;(double)&gt; f, size_t N, double a=-1, double b=1)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>gtsam::Chebyshev2Basis</name>
    <filename>a02880.html</filename>
    <base>Basis&lt; Chebyshev2Basis &gt;</base>
    <member kind="function" static="yes">
      <type>static Weights</type>
      <name>CalculateWeights</name>
      <anchorfile>a02880.html</anchorfile>
      <anchor>a460dd616169c1a23386746e99979ba81</anchor>
      <arglist>(size_t N, double x, double a=-1, double b=1)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Weights</type>
      <name>DerivativeWeights</name>
      <anchorfile>a02880.html</anchorfile>
      <anchor>a45c6376306cbb128d20bbd0a8e38d777</anchor>
      <arglist>(size_t N, double x, double a=-1, double b=1)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::CheiralityException</name>
    <filename>a03128.html</filename>
    <base>ThreadsafeException&lt; CheiralityException &gt;</base>
  </compound>
  <compound kind="class">
    <name>gtsam::DecisionTree::Choice</name>
    <filename>a02920.html</filename>
    <templarg>typename L</templarg>
    <templarg>typename Y</templarg>
    <base>gtsam::DecisionTree::Node</base>
    <member kind="function">
      <type></type>
      <name>Choice</name>
      <anchorfile>a02920.html</anchorfile>
      <anchor>add2490ac08d196f3faf201b3c1e75168</anchor>
      <arglist>(const L &amp;label, size_t count)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Choice</name>
      <anchorfile>a02920.html</anchorfile>
      <anchor>a83715de1ab3f83cd2c616a39837c2eff</anchor>
      <arglist>(const Choice &amp;f, const Choice &amp;g, const Binary &amp;op)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>push_back</name>
      <anchorfile>a02920.html</anchorfile>
      <anchor>a930c01116531f16ab33633b6092c1e9d</anchor>
      <arglist>(const NodePtr &amp;node)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>a02920.html</anchorfile>
      <anchor>a4ff43c5c8e4d080494f2f02f06ea4c27</anchor>
      <arglist>(const std::string &amp;s) const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>dot</name>
      <anchorfile>a02920.html</anchorfile>
      <anchor>ac40a83fb20789a4b912f6fc7136fb385</anchor>
      <arglist>(std::ostream &amp;os, bool showZero) const override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>sameLeaf</name>
      <anchorfile>a02920.html</anchorfile>
      <anchor>af67f813c2c0f3730857d4e614e6c98a8</anchor>
      <arglist>(const Leaf &amp;q) const override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>sameLeaf</name>
      <anchorfile>a02920.html</anchorfile>
      <anchor>a806916553bfc0728406524c7b1700d43</anchor>
      <arglist>(const Node &amp;q) const override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>equals</name>
      <anchorfile>a02920.html</anchorfile>
      <anchor>a11baa07ff6e9a307a8a82b3d1774d8c9</anchor>
      <arglist>(const Node &amp;q, double tol) const override</arglist>
    </member>
    <member kind="function">
      <type>const Y &amp;</type>
      <name>operator()</name>
      <anchorfile>a02920.html</anchorfile>
      <anchor>ad4e00ef70f8fb8f205e82711f8a37764</anchor>
      <arglist>(const Assignment&lt; L &gt; &amp;x) const override</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Choice</name>
      <anchorfile>a02920.html</anchorfile>
      <anchor>aec83227caa2e2aef7537f4e77d8598fc</anchor>
      <arglist>(const L &amp;label, const Choice &amp;f, const Unary &amp;op)</arglist>
    </member>
    <member kind="function">
      <type>NodePtr</type>
      <name>apply</name>
      <anchorfile>a02920.html</anchorfile>
      <anchor>a03b97cd01d6c5a88a85bd51601c0628f</anchor>
      <arglist>(const Unary &amp;op) const override</arglist>
    </member>
    <member kind="function">
      <type>NodePtr</type>
      <name>choose</name>
      <anchorfile>a02920.html</anchorfile>
      <anchor>ae3892aa5cb09323cfc0e24db1998c526</anchor>
      <arglist>(const L &amp;label, size_t index) const override</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static NodePtr</type>
      <name>Unique</name>
      <anchorfile>a02920.html</anchorfile>
      <anchor>af96c231636b548bb4df941e5d172e02f</anchor>
      <arglist>(const ChoicePtr &amp;f)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::CholeskyFailed</name>
    <filename>a02680.html</filename>
    <base>ThreadsafeException&lt; CholeskyFailed &gt;</base>
  </compound>
  <compound kind="struct">
    <name>gtsam::SmartRangeFactor::Circle2</name>
    <filename>a05360.html</filename>
  </compound>
  <compound kind="struct">
    <name>gtsam::ClusterTree::Cluster</name>
    <filename>a03524.html</filename>
    <member kind="function">
      <type></type>
      <name>Cluster</name>
      <anchorfile>a03524.html</anchorfile>
      <anchor>a02ea1b9ff2d9ad0486b593d3f404ea6a</anchor>
      <arglist>(Key key, const CONTAINER &amp;factorsToAdd)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addFactors</name>
      <anchorfile>a03524.html</anchorfile>
      <anchor>af0baff380d5b7c23c15f6b615af3665b</anchor>
      <arglist>(Key key, const CONTAINER &amp;factorsToAdd)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addChild</name>
      <anchorfile>a03524.html</anchorfile>
      <anchor>ab1c98ac426f00fff853601e6b3c79345</anchor>
      <arglist>(const boost::shared_ptr&lt; Cluster &gt; &amp;cluster)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>print</name>
      <anchorfile>a03524.html</anchorfile>
      <anchor>a2c09076a9fd810570b76613e3f7f84ff</anchor>
      <arglist>(const std::string &amp;s=&quot;&quot;, const KeyFormatter &amp;keyFormatter=DefaultKeyFormatter) const</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; size_t &gt;</type>
      <name>nrFrontalsOfChildren</name>
      <anchorfile>a03524.html</anchorfile>
      <anchor>a757d8c52d104d96298a1060943a00c77</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>merge</name>
      <anchorfile>a03524.html</anchorfile>
      <anchor>a72af85e48bd9b8ea2ea36db0bad5253b</anchor>
      <arglist>(const boost::shared_ptr&lt; Cluster &gt; &amp;cluster)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>mergeChildren</name>
      <anchorfile>a03524.html</anchorfile>
      <anchor>a5a35c15894923c99a38d393657169be0</anchor>
      <arglist>(const std::vector&lt; bool &gt; &amp;merge)</arglist>
    </member>
    <member kind="variable">
      <type>Children</type>
      <name>children</name>
      <anchorfile>a03524.html</anchorfile>
      <anchor>a1eacaf4f309980a98aa00907c016acbd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Keys</type>
      <name>orderedFrontalKeys</name>
      <anchorfile>a03524.html</anchorfile>
      <anchor>a572bf7152d93d7cda0f2745f90e28411</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>FactorGraphType</type>
      <name>factors</name>
      <anchorfile>a03524.html</anchorfile>
      <anchor>a962cb87201fac628ab4a0717b0e9ae50</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::ClusterTree</name>
    <filename>a03520.html</filename>
    <templarg>class GRAPH</templarg>
    <member kind="function" protection="protected">
      <type></type>
      <name>ClusterTree</name>
      <anchorfile>a03520.html</anchorfile>
      <anchor>acd26df0cc3df2af1c22e4bc2dc76e226</anchor>
      <arglist>(const This &amp;other)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>This &amp;</type>
      <name>operator=</name>
      <anchorfile>a03520.html</anchorfile>
      <anchor>a1e7239faf89a9160221c3ae89bf15325</anchor>
      <arglist>(const This &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>a03520.html</anchorfile>
      <anchor>ab53322af9cd6bd65e3feb3fc7b3761f3</anchor>
      <arglist>(const std::string &amp;s=&quot;&quot;, const KeyFormatter &amp;keyFormatter=DefaultKeyFormatter) const</arglist>
    </member>
    <member kind="function">
      <type>const FastVector&lt; sharedNode &gt; &amp;</type>
      <name>roots</name>
      <anchorfile>a03520.html</anchorfile>
      <anchor>ac5dc97339e19946d6db0042d0d3f5da8</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ClusterTree</name>
      <anchorfile>a03520.html</anchorfile>
      <anchor>ad0a639242851874afb9e9e4a001da7ae</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="typedef">
      <type>GRAPH</type>
      <name>FactorGraphType</name>
      <anchorfile>a03520.html</anchorfile>
      <anchor>a918d9e3e91e7707059ee6360e15b0e19</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ClusterTree&lt; GRAPH &gt;</type>
      <name>This</name>
      <anchorfile>a03520.html</anchorfile>
      <anchor>a5bdaf6c5ff6f7a774e3dbc871e9effd0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; This &gt;</type>
      <name>shared_ptr</name>
      <anchorfile>a03520.html</anchorfile>
      <anchor>a5bf3295cef6338605ac53b6831be8d65</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GRAPH::FactorType</type>
      <name>FactorType</name>
      <anchorfile>a03520.html</anchorfile>
      <anchor>a6f94687be7774294808f190e9c5b10c6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; FactorType &gt;</type>
      <name>sharedFactor</name>
      <anchorfile>a03520.html</anchorfile>
      <anchor>ac1b883466c2402549b5bc2899fe6025d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; Cluster &gt;</type>
      <name>sharedCluster</name>
      <anchorfile>a03520.html</anchorfile>
      <anchor>ad5fb900835112e8c6b463e3cde07b730</anchor>
      <arglist></arglist>
    </member>
    <class kind="struct">gtsam::ClusterTree::Cluster</class>
    <member kind="variable" protection="protected">
      <type>FastVector&lt; sharedNode &gt;</type>
      <name>roots_</name>
      <anchorfile>a03520.html</anchorfile>
      <anchor>a6bf40ec963bf6cf9b2c28f532811a532</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::CombinedImuFactor</name>
    <filename>a04060.html</filename>
    <base>NoiseModelFactor6&lt; Pose3, Vector3, Pose3, Vector3, imuBias::ConstantBias, imuBias::ConstantBias &gt;</base>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>a04060.html</anchorfile>
      <anchor>adb118aa5eccc14593b12138062850b51</anchor>
      <arglist>(const std::string &amp;s=&quot;&quot;, const KeyFormatter &amp;keyFormatter=DefaultKeyFormatter) const override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>equals</name>
      <anchorfile>a04060.html</anchorfile>
      <anchor>a291db23e309c2d3e9e779eb709437675</anchor>
      <arglist>(const NonlinearFactor &amp;expected, double tol=1e-9) const override</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CombinedImuFactor</name>
      <anchorfile>a04060.html</anchorfile>
      <anchor>a5edf3d620bbec01e8c9f24146a79a251</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CombinedImuFactor</name>
      <anchorfile>a04060.html</anchorfile>
      <anchor>a1136323705e34e0528ce903a4291928b</anchor>
      <arglist>(Key pose_i, Key vel_i, Key pose_j, Key vel_j, Key bias_i, Key bias_j, const PreintegratedCombinedMeasurements &amp;preintegratedMeasurements)</arglist>
    </member>
    <member kind="function">
      <type>gtsam::NonlinearFactor::shared_ptr</type>
      <name>clone</name>
      <anchorfile>a04060.html</anchorfile>
      <anchor>aa2ac4d5ea1d2734128b73c51d9e7b947</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>const PreintegratedCombinedMeasurements &amp;</type>
      <name>preintegratedMeasurements</name>
      <anchorfile>a04060.html</anchorfile>
      <anchor>ae5112e9129123efeba898ec77171a22a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Vector</type>
      <name>evaluateError</name>
      <anchorfile>a04060.html</anchorfile>
      <anchor>a7fb9e8ad526cc357219974d2c94478b3</anchor>
      <arglist>(const Pose3 &amp;pose_i, const Vector3 &amp;vel_i, const Pose3 &amp;pose_j, const Vector3 &amp;vel_j, const imuBias::ConstantBias &amp;bias_i, const imuBias::ConstantBias &amp;bias_j, boost::optional&lt; Matrix &amp; &gt; H1=boost::none, boost::optional&lt; Matrix &amp; &gt; H2=boost::none, boost::optional&lt; Matrix &amp; &gt; H3=boost::none, boost::optional&lt; Matrix &amp; &gt; H4=boost::none, boost::optional&lt; Matrix &amp; &gt; H5=boost::none, boost::optional&lt; Matrix &amp; &gt; H6=boost::none) const override</arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; CombinedImuFactor &gt;</type>
      <name>shared_ptr</name>
      <anchorfile>a04060.html</anchorfile>
      <anchor>a09c86d133977c6af9b6e1734b15539ea</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>boost::serialization::access</name>
      <anchorfile>a04060.html</anchorfile>
      <anchor>ac98d07dd8f7b70e16ccb9a01abf56b9c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::ComponentDerivativeFactor</name>
    <filename>a02872.html</filename>
    <templarg>class BASIS</templarg>
    <templarg>int P</templarg>
    <base>FunctorizedFactor&lt; double, ParameterMatrix&lt; P &gt; &gt;</base>
    <member kind="function">
      <type></type>
      <name>ComponentDerivativeFactor</name>
      <anchorfile>a02872.html</anchorfile>
      <anchor>a811f4b56b1fcc6948f75897a0ecc4a0d</anchor>
      <arglist>(Key key, const double &amp;z, const SharedNoiseModel &amp;model, const size_t N, size_t i, double x)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ComponentDerivativeFactor</name>
      <anchorfile>a02872.html</anchorfile>
      <anchor>a16c7420cd2b6dbf6360357bb72cea7e2</anchor>
      <arglist>(Key key, const double &amp;z, const SharedNoiseModel &amp;model, const size_t N, size_t i, double x, double a, double b)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::Basis::ComponentDerivativeFunctor</name>
    <filename>a02844.html</filename>
    <templarg>int M</templarg>
    <base protection="protected">gtsam::Basis::DerivativeFunctorBase</base>
    <member kind="function">
      <type></type>
      <name>ComponentDerivativeFunctor</name>
      <anchorfile>a02844.html</anchorfile>
      <anchor>a45eed4377c708dbabcf7c10c56ac4f96</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ComponentDerivativeFunctor</name>
      <anchorfile>a02844.html</anchorfile>
      <anchor>a04da6190c5893400645f886494919d11</anchor>
      <arglist>(size_t N, size_t i, double x)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ComponentDerivativeFunctor</name>
      <anchorfile>a02844.html</anchorfile>
      <anchor>a5315e7a143a157610def3e29c5877e89</anchor>
      <arglist>(size_t N, size_t i, double x, double a, double b)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>apply</name>
      <anchorfile>a02844.html</anchorfile>
      <anchor>af6470a490a268f4cc6f7157faa97a215</anchor>
      <arglist>(const ParameterMatrix&lt; M &gt; &amp;P, OptionalJacobian&lt; -1, -1 &gt; H=boost::none) const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>operator()</name>
      <anchorfile>a02844.html</anchorfile>
      <anchor>a3de9af4586372bbade17d296f16835ee</anchor>
      <arglist>(const ParameterMatrix&lt; M &gt; &amp;P, OptionalJacobian&lt; -1, -1 &gt; H=boost::none) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::compose_key_visitor</name>
    <filename>a03564.html</filename>
    <templarg>class V</templarg>
    <templarg>class POSE</templarg>
    <templarg>class KEY</templarg>
  </compound>
  <compound kind="class">
    <name>gtsam::ConcurrentBatchFilter</name>
    <filename>a05136.html</filename>
    <base>gtsam::ConcurrentFilter</base>
    <member kind="function">
      <type></type>
      <name>ConcurrentBatchFilter</name>
      <anchorfile>a05136.html</anchorfile>
      <anchor>ac00b884e43f6056aa3d60795b0347757</anchor>
      <arglist>(const LevenbergMarquardtParams &amp;parameters=LevenbergMarquardtParams())</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ConcurrentBatchFilter</name>
      <anchorfile>a05136.html</anchorfile>
      <anchor>ab3c5b26ac718219156e869e6d3df6039</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>a05136.html</anchorfile>
      <anchor>a642bb754b1c25ade4805354269751608</anchor>
      <arglist>(const std::string &amp;s=&quot;Concurrent Batch Filter:\n&quot;, const KeyFormatter &amp;keyFormatter=DefaultKeyFormatter) const override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>equals</name>
      <anchorfile>a05136.html</anchorfile>
      <anchor>a5b4a67299ed791047eaebeaed5c1aecd</anchor>
      <arglist>(const ConcurrentFilter &amp;rhs, double tol=1e-9) const override</arglist>
    </member>
    <member kind="function">
      <type>const NonlinearFactorGraph &amp;</type>
      <name>getFactors</name>
      <anchorfile>a05136.html</anchorfile>
      <anchor>aa08841965d9ec62d8cd8310b80b1ce2a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Values &amp;</type>
      <name>getLinearizationPoint</name>
      <anchorfile>a05136.html</anchorfile>
      <anchor>aeeb482a3970f5517636881f45bdda068</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Ordering &amp;</type>
      <name>getOrdering</name>
      <anchorfile>a05136.html</anchorfile>
      <anchor>a6bb6aaeb1175727d5fa164a9f8612e07</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const VectorValues &amp;</type>
      <name>getDelta</name>
      <anchorfile>a05136.html</anchorfile>
      <anchor>a26fc432df6a22ea637187e5d61f0eada</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Values</type>
      <name>calculateEstimate</name>
      <anchorfile>a05136.html</anchorfile>
      <anchor>ab513563d30d9a0f179400f1398eb2a25</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>VALUE</type>
      <name>calculateEstimate</name>
      <anchorfile>a05136.html</anchorfile>
      <anchor>a05b7023f15930d29766dc5caf6a58d13</anchor>
      <arglist>(Key key) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Result</type>
      <name>update</name>
      <anchorfile>a05136.html</anchorfile>
      <anchor>a41ace48b13b8858c654304c37cc6e516</anchor>
      <arglist>(const NonlinearFactorGraph &amp;newFactors=NonlinearFactorGraph(), const Values &amp;newTheta=Values(), const boost::optional&lt; FastList&lt; Key &gt; &gt; &amp;keysToMove=boost::none, const boost::optional&lt; std::vector&lt; size_t &gt; &gt; &amp;removeFactorIndices=boost::none)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>presync</name>
      <anchorfile>a05136.html</anchorfile>
      <anchor>aacdaf1eccbc138934fd7b4b0ea7fadfe</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getSummarizedFactors</name>
      <anchorfile>a05136.html</anchorfile>
      <anchor>a2f577ee49fbc4e64fa60a38d794a6d00</anchor>
      <arglist>(NonlinearFactorGraph &amp;filterSummarization, Values &amp;filterSummarizationValues) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getSmootherFactors</name>
      <anchorfile>a05136.html</anchorfile>
      <anchor>ac617c5b46c43cf8a1701e45c73c34a85</anchor>
      <arglist>(NonlinearFactorGraph &amp;smootherFactors, Values &amp;smootherValues) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>synchronize</name>
      <anchorfile>a05136.html</anchorfile>
      <anchor>a1be92e649873b03dd0522575fc1c3b58</anchor>
      <arglist>(const NonlinearFactorGraph &amp;smootherSummarization, const Values &amp;smootherSummarizationValues) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>postsync</name>
      <anchorfile>a05136.html</anchorfile>
      <anchor>af7b03e7e3d2ff667cf15b7f36ced8d7c</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="typedef">
      <type>ConcurrentFilter</type>
      <name>Base</name>
      <anchorfile>a05136.html</anchorfile>
      <anchor>a555ff0266ebb6e89fac67338f5e65b55</anchor>
      <arglist></arglist>
    </member>
    <class kind="struct">gtsam::ConcurrentBatchFilter::Result</class>
    <member kind="variable" protection="protected">
      <type>LevenbergMarquardtParams</type>
      <name>parameters_</name>
      <anchorfile>a05136.html</anchorfile>
      <anchor>a4d42180687ee59c48c165e442ac214cd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>NonlinearFactorGraph</type>
      <name>factors_</name>
      <anchorfile>a05136.html</anchorfile>
      <anchor>a4273349b12ff10a45522ac2da17bd3ac</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Values</type>
      <name>theta_</name>
      <anchorfile>a05136.html</anchorfile>
      <anchor>a4f21a67939c54f3189a1eef9ff0f5111</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Ordering</type>
      <name>ordering_</name>
      <anchorfile>a05136.html</anchorfile>
      <anchor>ac7e5b9c160c1d47df396ac38138bb04b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>VectorValues</type>
      <name>delta_</name>
      <anchorfile>a05136.html</anchorfile>
      <anchor>a85eb5d629192894fe43863cf8e4d54aa</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::queue&lt; size_t &gt;</type>
      <name>availableSlots_</name>
      <anchorfile>a05136.html</anchorfile>
      <anchor>ab5f2e85ff3ef8399a98f96bd8cd22e48</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Values</type>
      <name>separatorValues_</name>
      <anchorfile>a05136.html</anchorfile>
      <anchor>add88e84357fdd32deaa2c68930ca9218</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; size_t &gt;</type>
      <name>separatorSummarizationSlots_</name>
      <anchorfile>a05136.html</anchorfile>
      <anchor>a1ad3fa2f2a437d517c5d57828295eaa0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>NonlinearFactorGraph</type>
      <name>smootherSummarization_</name>
      <anchorfile>a05136.html</anchorfile>
      <anchor>a55b54da7c93cb8f318ebf0b43e65dfa5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>NonlinearFactorGraph</type>
      <name>smootherShortcut_</name>
      <anchorfile>a05136.html</anchorfile>
      <anchor>ad8d78a2867f22265ae7baebad0c8c7fc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>NonlinearFactorGraph</type>
      <name>filterSummarization_</name>
      <anchorfile>a05136.html</anchorfile>
      <anchor>a51865e56b8ea3e55d6783f74d29c0524</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>NonlinearFactorGraph</type>
      <name>smootherFactors_</name>
      <anchorfile>a05136.html</anchorfile>
      <anchor>ad15982b0fe42808ba2186adc3ed546eb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Values</type>
      <name>smootherValues_</name>
      <anchorfile>a05136.html</anchorfile>
      <anchor>a5c37053575823c0b1ca1dc5a0fc3e2ce</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::ConcurrentBatchSmoother</name>
    <filename>a05148.html</filename>
    <base>gtsam::ConcurrentSmoother</base>
    <member kind="function">
      <type></type>
      <name>ConcurrentBatchSmoother</name>
      <anchorfile>a05148.html</anchorfile>
      <anchor>ab48b7aa8c7d00c14f18f8c53816e2070</anchor>
      <arglist>(const LevenbergMarquardtParams &amp;parameters=LevenbergMarquardtParams())</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ConcurrentBatchSmoother</name>
      <anchorfile>a05148.html</anchorfile>
      <anchor>a2f5ddb2b86b224ed8ec0b27010ed261a</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>a05148.html</anchorfile>
      <anchor>a342ebba52f1acaa056a7e3056cc48467</anchor>
      <arglist>(const std::string &amp;s=&quot;Concurrent Batch Smoother:\n&quot;, const KeyFormatter &amp;keyFormatter=DefaultKeyFormatter) const override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>equals</name>
      <anchorfile>a05148.html</anchorfile>
      <anchor>a3ddc3098f6bbd85a202e1797c5909ee6</anchor>
      <arglist>(const ConcurrentSmoother &amp;rhs, double tol=1e-9) const override</arglist>
    </member>
    <member kind="function">
      <type>const NonlinearFactorGraph &amp;</type>
      <name>getFactors</name>
      <anchorfile>a05148.html</anchorfile>
      <anchor>af8a10c3dd64a8784a0fc63c90e3b3f2a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Values &amp;</type>
      <name>getLinearizationPoint</name>
      <anchorfile>a05148.html</anchorfile>
      <anchor>a7b3b2b1280baec1e12e13e1a3c218f4d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Ordering &amp;</type>
      <name>getOrdering</name>
      <anchorfile>a05148.html</anchorfile>
      <anchor>ad61f08a6c46ce3b33412a2ecc8fbb035</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const VectorValues &amp;</type>
      <name>getDelta</name>
      <anchorfile>a05148.html</anchorfile>
      <anchor>a6a1782ef17da9db21166f84ffb12ee03</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Values</type>
      <name>calculateEstimate</name>
      <anchorfile>a05148.html</anchorfile>
      <anchor>a1650991c94586370b743ff4d0c44269d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>VALUE</type>
      <name>calculateEstimate</name>
      <anchorfile>a05148.html</anchorfile>
      <anchor>a4e554caaecbc8b9a6f113daa7cd55f72</anchor>
      <arglist>(Key key) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Result</type>
      <name>update</name>
      <anchorfile>a05148.html</anchorfile>
      <anchor>a64c2a3d5932e3de30f7a1ee1b18f9b9e</anchor>
      <arglist>(const NonlinearFactorGraph &amp;newFactors=NonlinearFactorGraph(), const Values &amp;newTheta=Values(), const boost::optional&lt; std::vector&lt; size_t &gt; &gt; &amp;removeFactorIndices=boost::none)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>presync</name>
      <anchorfile>a05148.html</anchorfile>
      <anchor>a816f6b3147545df0ef5a4b9d0075c672</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getSummarizedFactors</name>
      <anchorfile>a05148.html</anchorfile>
      <anchor>abc658af3ff95bf371d2ef3d07f5723ce</anchor>
      <arglist>(NonlinearFactorGraph &amp;summarizedFactors, Values &amp;separatorValues) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>synchronize</name>
      <anchorfile>a05148.html</anchorfile>
      <anchor>a52c1d3314a2b71b1046b2f3cc7aecbe1</anchor>
      <arglist>(const NonlinearFactorGraph &amp;smootherFactors, const Values &amp;smootherValues, const NonlinearFactorGraph &amp;summarizedFactors, const Values &amp;separatorValues) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>postsync</name>
      <anchorfile>a05148.html</anchorfile>
      <anchor>ae62c23336aeb0d8270bedf3edf5d7512</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="typedef">
      <type>ConcurrentSmoother</type>
      <name>Base</name>
      <anchorfile>a05148.html</anchorfile>
      <anchor>a1b278d97e6a389b1ccb9824412b8b505</anchor>
      <arglist></arglist>
    </member>
    <class kind="struct">gtsam::ConcurrentBatchSmoother::Result</class>
    <member kind="variable" protection="protected">
      <type>LevenbergMarquardtParams</type>
      <name>parameters_</name>
      <anchorfile>a05148.html</anchorfile>
      <anchor>a91b21c41bacaa6de81c4db51daedaaa3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>NonlinearFactorGraph</type>
      <name>factors_</name>
      <anchorfile>a05148.html</anchorfile>
      <anchor>a04ddf3a86914685a6e5074d097032fb9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Values</type>
      <name>theta_</name>
      <anchorfile>a05148.html</anchorfile>
      <anchor>a6d98ce6cf1c5e3c7941c5baab22831d9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Ordering</type>
      <name>ordering_</name>
      <anchorfile>a05148.html</anchorfile>
      <anchor>ae8efc5a8159d12e14018ef5c2a8b4f94</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>VectorValues</type>
      <name>delta_</name>
      <anchorfile>a05148.html</anchorfile>
      <anchor>a36f85722882bab872b726cf6d9f6a2db</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>VariableIndex</type>
      <name>variableIndex_</name>
      <anchorfile>a05148.html</anchorfile>
      <anchor>ae08ea6fa103136f599cc71b39688ffb9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::queue&lt; size_t &gt;</type>
      <name>availableSlots_</name>
      <anchorfile>a05148.html</anchorfile>
      <anchor>a7a83711219fdbb734a8efb007a8dc8ae</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Values</type>
      <name>separatorValues_</name>
      <anchorfile>a05148.html</anchorfile>
      <anchor>acae62d02efddc751676d2fc2118ab0c7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; size_t &gt;</type>
      <name>filterSummarizationSlots_</name>
      <anchorfile>a05148.html</anchorfile>
      <anchor>a5aee85c6cda5457536015358b0890539</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>NonlinearFactorGraph</type>
      <name>smootherSummarization_</name>
      <anchorfile>a05148.html</anchorfile>
      <anchor>a7badf6494068a6318bc555dfe1a91917</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::ConcurrentFilter</name>
    <filename>a05160.html</filename>
    <member kind="function">
      <type></type>
      <name>ConcurrentFilter</name>
      <anchorfile>a05160.html</anchorfile>
      <anchor>a6754bd467ed39025506d93693cd3cfd7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ConcurrentFilter</name>
      <anchorfile>a05160.html</anchorfile>
      <anchor>a129ac443a8a3f6b5c8ef6669316bfd15</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>print</name>
      <anchorfile>a05160.html</anchorfile>
      <anchor>a5565637f908944ac6fa373b285703e27</anchor>
      <arglist>(const std::string &amp;s=&quot;Concurrent Filter:\n&quot;, const KeyFormatter &amp;keyFormatter=DefaultKeyFormatter) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>equals</name>
      <anchorfile>a05160.html</anchorfile>
      <anchor>a5296012ce0b7457387709219b68f08a2</anchor>
      <arglist>(const ConcurrentFilter &amp;rhs, double tol=1e-9) const =0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>presync</name>
      <anchorfile>a05160.html</anchorfile>
      <anchor>ad64cdf8b2bfa6cc3b772a3775977f7e8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>getSummarizedFactors</name>
      <anchorfile>a05160.html</anchorfile>
      <anchor>a43e56abfa07eb271b17d761036cb37e1</anchor>
      <arglist>(NonlinearFactorGraph &amp;summarizedFactors, Values &amp;separatorValues)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>getSmootherFactors</name>
      <anchorfile>a05160.html</anchorfile>
      <anchor>a0ff193aa48ca1ff52e81c74e44e30e20</anchor>
      <arglist>(NonlinearFactorGraph &amp;smootherFactors, Values &amp;smootherValues)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>synchronize</name>
      <anchorfile>a05160.html</anchorfile>
      <anchor>a1c53190513f8eda576895f0c0839fb28</anchor>
      <arglist>(const NonlinearFactorGraph &amp;summarizedFactors, const Values &amp;separatorValues)=0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>postsync</name>
      <anchorfile>a05160.html</anchorfile>
      <anchor>ac012d1792e823b6b7c677ea64965c870</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::ConcurrentIncrementalFilter</name>
    <filename>a05168.html</filename>
    <base virtualness="virtual">gtsam::ConcurrentFilter</base>
    <member kind="function">
      <type></type>
      <name>ConcurrentIncrementalFilter</name>
      <anchorfile>a05168.html</anchorfile>
      <anchor>a0f95562e7c46b316c10b28a6eba443de</anchor>
      <arglist>(const ISAM2Params &amp;parameters=ISAM2Params())</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ConcurrentIncrementalFilter</name>
      <anchorfile>a05168.html</anchorfile>
      <anchor>a80d58e3bb741ff2ed3eaf3f17650eabc</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>a05168.html</anchorfile>
      <anchor>a704699a197ee841eb30ec4ccbc2daa29</anchor>
      <arglist>(const std::string &amp;s=&quot;Concurrent Incremental Filter:\n&quot;, const KeyFormatter &amp;keyFormatter=DefaultKeyFormatter) const override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>equals</name>
      <anchorfile>a05168.html</anchorfile>
      <anchor>a0e76185aada2442723891446deda2950</anchor>
      <arglist>(const ConcurrentFilter &amp;rhs, double tol=1e-9) const override</arglist>
    </member>
    <member kind="function">
      <type>const NonlinearFactorGraph &amp;</type>
      <name>getFactors</name>
      <anchorfile>a05168.html</anchorfile>
      <anchor>af66fa960d2c90118e48387d8fbe7d5be</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const ISAM2 &amp;</type>
      <name>getISAM2</name>
      <anchorfile>a05168.html</anchorfile>
      <anchor>a859858f72227f03db70979915b02a346</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Values &amp;</type>
      <name>getLinearizationPoint</name>
      <anchorfile>a05168.html</anchorfile>
      <anchor>a10811cae6714704cf8900413616faba6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const VectorValues &amp;</type>
      <name>getDelta</name>
      <anchorfile>a05168.html</anchorfile>
      <anchor>ae906c68b93f1a8ca8f26a9020f6cbaa6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Values</type>
      <name>calculateEstimate</name>
      <anchorfile>a05168.html</anchorfile>
      <anchor>aede1b5fdf576222b433f3fcaf789d4ae</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>VALUE</type>
      <name>calculateEstimate</name>
      <anchorfile>a05168.html</anchorfile>
      <anchor>a1fded86688f472851a02679d57d178ee</anchor>
      <arglist>(Key key) const</arglist>
    </member>
    <member kind="function">
      <type>Result</type>
      <name>update</name>
      <anchorfile>a05168.html</anchorfile>
      <anchor>aef5e60d7807bd136cb18e8fc0eb0716b</anchor>
      <arglist>(const NonlinearFactorGraph &amp;newFactors=NonlinearFactorGraph(), const Values &amp;newTheta=Values(), const boost::optional&lt; FastList&lt; Key &gt; &gt; &amp;keysToMove=boost::none, const boost::optional&lt; FactorIndices &gt; &amp;removeFactorIndices=boost::none)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>presync</name>
      <anchorfile>a05168.html</anchorfile>
      <anchor>aff1847a1b6eeab574b53878754601b3e</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getSummarizedFactors</name>
      <anchorfile>a05168.html</anchorfile>
      <anchor>a90c236a7baa5aa8e71e1372056a52a9b</anchor>
      <arglist>(NonlinearFactorGraph &amp;filterSummarization, Values &amp;filterSummarizationValues) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getSmootherFactors</name>
      <anchorfile>a05168.html</anchorfile>
      <anchor>a8b0f2e288d7a6633e4a412290e9d0d0c</anchor>
      <arglist>(NonlinearFactorGraph &amp;smootherFactors, Values &amp;smootherValues) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>synchronize</name>
      <anchorfile>a05168.html</anchorfile>
      <anchor>ae2ec1e30a6012db9a15bdccf3904d6ac</anchor>
      <arglist>(const NonlinearFactorGraph &amp;smootherSummarization, const Values &amp;smootherSummarizationValues) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>postsync</name>
      <anchorfile>a05168.html</anchorfile>
      <anchor>a0482e3c4ce9139612c68d2e1f791f4af</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="typedef">
      <type>ConcurrentFilter</type>
      <name>Base</name>
      <anchorfile>a05168.html</anchorfile>
      <anchor>aa6d88494b2afceb16f1b05ec9ef1b02b</anchor>
      <arglist></arglist>
    </member>
    <class kind="struct">gtsam::ConcurrentIncrementalFilter::Result</class>
    <member kind="variable" protection="protected">
      <type>ISAM2</type>
      <name>isam2_</name>
      <anchorfile>a05168.html</anchorfile>
      <anchor>ac769a4f1259dad73882c7acc6357a7ce</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>NonlinearFactorGraph</type>
      <name>previousSmootherSummarization_</name>
      <anchorfile>a05168.html</anchorfile>
      <anchor>a5b7a4c5d2f2ae1f2a0d28d08622434f8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>FactorIndices</type>
      <name>currentSmootherSummarizationSlots_</name>
      <anchorfile>a05168.html</anchorfile>
      <anchor>a99e40ad8d77b02624ed69e8ca501f2e9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>NonlinearFactorGraph</type>
      <name>smootherShortcut_</name>
      <anchorfile>a05168.html</anchorfile>
      <anchor>aa1f1037db6fb002c549dbe96f966e54e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>NonlinearFactorGraph</type>
      <name>smootherFactors_</name>
      <anchorfile>a05168.html</anchorfile>
      <anchor>a075382a8292a9220a2b1182e24557ffd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Values</type>
      <name>smootherValues_</name>
      <anchorfile>a05168.html</anchorfile>
      <anchor>a8435385a9faff9235f95a469226d0477</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::ConcurrentIncrementalSmoother</name>
    <filename>a05180.html</filename>
    <base virtualness="virtual">gtsam::ConcurrentSmoother</base>
    <member kind="function">
      <type></type>
      <name>ConcurrentIncrementalSmoother</name>
      <anchorfile>a05180.html</anchorfile>
      <anchor>a0e7e74fd31cb4894613ced117286b686</anchor>
      <arglist>(const ISAM2Params &amp;parameters=ISAM2Params())</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ConcurrentIncrementalSmoother</name>
      <anchorfile>a05180.html</anchorfile>
      <anchor>a9cf83fbe1e7fcf28773f0d57901bc382</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>a05180.html</anchorfile>
      <anchor>af271796e5254960266ea40d26162e717</anchor>
      <arglist>(const std::string &amp;s=&quot;Concurrent Incremental Smoother:\n&quot;, const KeyFormatter &amp;keyFormatter=DefaultKeyFormatter) const override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>equals</name>
      <anchorfile>a05180.html</anchorfile>
      <anchor>acb312b283642620e7ea4c756f9cd12a7</anchor>
      <arglist>(const ConcurrentSmoother &amp;rhs, double tol=1e-9) const override</arglist>
    </member>
    <member kind="function">
      <type>const NonlinearFactorGraph &amp;</type>
      <name>getFactors</name>
      <anchorfile>a05180.html</anchorfile>
      <anchor>abc714641199fad0f7412d358a73cc5f1</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Values &amp;</type>
      <name>getLinearizationPoint</name>
      <anchorfile>a05180.html</anchorfile>
      <anchor>a46943517bf235a0e356d18c52827c195</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const VectorValues &amp;</type>
      <name>getDelta</name>
      <anchorfile>a05180.html</anchorfile>
      <anchor>aa21c8cb05eb000a6df7fc23935145cb2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Values</type>
      <name>calculateEstimate</name>
      <anchorfile>a05180.html</anchorfile>
      <anchor>a150cfc848df3b4110a115100e367b6ca</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>VALUE</type>
      <name>calculateEstimate</name>
      <anchorfile>a05180.html</anchorfile>
      <anchor>ab5dda171348a5b4ce96bbe732900743d</anchor>
      <arglist>(Key key) const</arglist>
    </member>
    <member kind="function">
      <type>Result</type>
      <name>update</name>
      <anchorfile>a05180.html</anchorfile>
      <anchor>af14b3a18825de237ac37f48ec01273ed</anchor>
      <arglist>(const NonlinearFactorGraph &amp;newFactors=NonlinearFactorGraph(), const Values &amp;newTheta=Values(), const boost::optional&lt; FactorIndices &gt; &amp;removeFactorIndices=boost::none)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>presync</name>
      <anchorfile>a05180.html</anchorfile>
      <anchor>a2b6a59d1ce6a7feb22793f7d7bf60eaa</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getSummarizedFactors</name>
      <anchorfile>a05180.html</anchorfile>
      <anchor>a4622a77f728a99efcf3645680be88ecd</anchor>
      <arglist>(NonlinearFactorGraph &amp;summarizedFactors, Values &amp;separatorValues) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>synchronize</name>
      <anchorfile>a05180.html</anchorfile>
      <anchor>a98ec53f6398e24036e4f19f545b9a99f</anchor>
      <arglist>(const NonlinearFactorGraph &amp;smootherFactors, const Values &amp;smootherValues, const NonlinearFactorGraph &amp;summarizedFactors, const Values &amp;separatorValues) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>postsync</name>
      <anchorfile>a05180.html</anchorfile>
      <anchor>aeb6eda7dcc8c52c4bc98bbcd4da0a773</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="typedef">
      <type>ConcurrentSmoother</type>
      <name>Base</name>
      <anchorfile>a05180.html</anchorfile>
      <anchor>a1af52105708e88004190dc750aa21cd8</anchor>
      <arglist></arglist>
    </member>
    <class kind="struct">gtsam::ConcurrentIncrementalSmoother::Result</class>
    <member kind="variable" protection="protected">
      <type>ISAM2</type>
      <name>isam2_</name>
      <anchorfile>a05180.html</anchorfile>
      <anchor>a55fdf88917238da7986d6f182c442e41</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>NonlinearFactorGraph</type>
      <name>smootherFactors_</name>
      <anchorfile>a05180.html</anchorfile>
      <anchor>a559843658ae5895c4df96f332b4a9b23</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Values</type>
      <name>smootherValues_</name>
      <anchorfile>a05180.html</anchorfile>
      <anchor>a4eebdc4644affb62faf79bf0973d1120</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>NonlinearFactorGraph</type>
      <name>filterSummarizationFactors_</name>
      <anchorfile>a05180.html</anchorfile>
      <anchor>aba7be99b047cde76d1b09001461bd1b6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Values</type>
      <name>separatorValues_</name>
      <anchorfile>a05180.html</anchorfile>
      <anchor>acbd39d2a13545624adc7529024ff01ac</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>FactorIndices</type>
      <name>filterSummarizationSlots_</name>
      <anchorfile>a05180.html</anchorfile>
      <anchor>a72bbbff76f0371404fa32071e9c658db</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>synchronizationUpdatesAvailable_</name>
      <anchorfile>a05180.html</anchorfile>
      <anchor>aedc3e5c4fa2c4d8d8e5e7195023442f9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>NonlinearFactorGraph</type>
      <name>smootherSummarization_</name>
      <anchorfile>a05180.html</anchorfile>
      <anchor>a9bfd56b9fd920dbe6d5c300445d13147</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::ConcurrentMap</name>
    <filename>a02448.html</filename>
    <templarg>typename KEY</templarg>
    <templarg>typename VALUE</templarg>
    <base>gtsam::FastMap</base>
    <member kind="function">
      <type></type>
      <name>ConcurrentMap</name>
      <anchorfile>a02448.html</anchorfile>
      <anchor>ab8ff3bd589931dfcf0270d4d34087253</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ConcurrentMap</name>
      <anchorfile>a02448.html</anchorfile>
      <anchor>a00df2b0e065bb753f3f58328b3a32355</anchor>
      <arglist>(INPUTITERATOR first, INPUTITERATOR last)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ConcurrentMap</name>
      <anchorfile>a02448.html</anchorfile>
      <anchor>a32688fb734dda9eb9b437f9c63c84893</anchor>
      <arglist>(const ConcurrentMap&lt; KEY, VALUE &gt; &amp;x)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ConcurrentMap</name>
      <anchorfile>a02448.html</anchorfile>
      <anchor>a7480e044beeb4638fe108d77ff2a0e0e</anchor>
      <arglist>(const Base &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>exists</name>
      <anchorfile>a02448.html</anchorfile>
      <anchor>a65c98661457fce1b72ac720f1c102b3b</anchor>
      <arglist>(const KEY &amp;e) const</arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>boost::serialization::access</name>
      <anchorfile>a02448.html</anchorfile>
      <anchor>ac98d07dd8f7b70e16ccb9a01abf56b9c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::ConcurrentSmoother</name>
    <filename>a05164.html</filename>
    <member kind="function">
      <type></type>
      <name>ConcurrentSmoother</name>
      <anchorfile>a05164.html</anchorfile>
      <anchor>aaaf5a11b3c127522d5629d250b2aba56</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ConcurrentSmoother</name>
      <anchorfile>a05164.html</anchorfile>
      <anchor>af75fe5536e50079a580bce98b77c8a17</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>print</name>
      <anchorfile>a05164.html</anchorfile>
      <anchor>ac28d5eecacd14c145aba3ece8fac29ad</anchor>
      <arglist>(const std::string &amp;s=&quot;Concurrent Smoother:\n&quot;, const KeyFormatter &amp;keyFormatter=DefaultKeyFormatter) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>equals</name>
      <anchorfile>a05164.html</anchorfile>
      <anchor>a30ef1039401b7511b53e6caf36c55d0e</anchor>
      <arglist>(const ConcurrentSmoother &amp;rhs, double tol=1e-9) const =0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>presync</name>
      <anchorfile>a05164.html</anchorfile>
      <anchor>ac61da2c7f833ba4cf81572971b3c8659</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>getSummarizedFactors</name>
      <anchorfile>a05164.html</anchorfile>
      <anchor>a920a30be4d282d0c6a528aea212c3ccd</anchor>
      <arglist>(NonlinearFactorGraph &amp;summarizedFactors, Values &amp;separatorValues)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>synchronize</name>
      <anchorfile>a05164.html</anchorfile>
      <anchor>a2f4a1f28d7b3881a137c538f0cd08ade</anchor>
      <arglist>(const NonlinearFactorGraph &amp;smootherFactors, const Values &amp;smootherValues, const NonlinearFactorGraph &amp;summarizedFactors, const Values &amp;rootValues)=0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>postsync</name>
      <anchorfile>a05164.html</anchorfile>
      <anchor>ab7325f60eb936c3dc89dfd5d83d6898f</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::Conditional</name>
    <filename>a03528.html</filename>
    <templarg>class FACTOR</templarg>
    <templarg>class DERIVEDCONDITIONAL</templarg>
    <member kind="friend">
      <type>friend class</type>
      <name>boost::serialization::access</name>
      <anchorfile>a03528.html</anchorfile>
      <anchor>ac98d07dd8f7b70e16ccb9a01abf56b9c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>size_t &amp;</type>
      <name>nrFrontals</name>
      <anchorfile>a03528.html</anchorfile>
      <anchor>ab1bb0a9fa1d3e1a462c7f57853f693f6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>FACTOR::iterator</type>
      <name>beginFrontals</name>
      <anchorfile>a03528.html</anchorfile>
      <anchor>ab2b9bbc643244dbabfc6c82bee870499</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>FACTOR::iterator</type>
      <name>endFrontals</name>
      <anchorfile>a03528.html</anchorfile>
      <anchor>a3ec8e5074bea26f7cc04f680d9fbd4af</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>FACTOR::iterator</type>
      <name>beginParents</name>
      <anchorfile>a03528.html</anchorfile>
      <anchor>aa44803c99d5df7869d1151468c49afad</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>FACTOR::iterator</type>
      <name>endParents</name>
      <anchorfile>a03528.html</anchorfile>
      <anchor>a3b07df7eeb50133c0b40388e80c455ab</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>Conditional</name>
      <anchorfile>a03528.html</anchorfile>
      <anchor>a92872ac46ea07c2953eabbdfe816f3ed</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>Conditional</name>
      <anchorfile>a03528.html</anchorfile>
      <anchor>a97b7d1439af9d6bd666946a7d22d2fd5</anchor>
      <arglist>(size_t nrFrontals)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>a03528.html</anchorfile>
      <anchor>a2ec5a75aeba870ab0b0334733b34b449</anchor>
      <arglist>(const std::string &amp;s=&quot;Conditional&quot;, const KeyFormatter &amp;formatter=DefaultKeyFormatter) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>equals</name>
      <anchorfile>a03528.html</anchorfile>
      <anchor>af8b5b06f92b09ef2daa7e5dd6785bc33</anchor>
      <arglist>(const This &amp;c, double tol=1e-9) const</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>nrFrontals</name>
      <anchorfile>a03528.html</anchorfile>
      <anchor>a87e48132e41995e8327bc5b1daefd41d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>nrParents</name>
      <anchorfile>a03528.html</anchorfile>
      <anchor>ae19763bc0d1b12bea9e7bfcb304b40bb</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Key</type>
      <name>firstFrontalKey</name>
      <anchorfile>a03528.html</anchorfile>
      <anchor>a2c239cc3a58d08302df173d4e464f2f1</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Frontals</type>
      <name>frontals</name>
      <anchorfile>a03528.html</anchorfile>
      <anchor>ac32c96f2070f1c0a882101e02a9b3d01</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Parents</type>
      <name>parents</name>
      <anchorfile>a03528.html</anchorfile>
      <anchor>a4f7dab2390695c0972df2fc8da2ee6c4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>FACTOR::const_iterator</type>
      <name>beginFrontals</name>
      <anchorfile>a03528.html</anchorfile>
      <anchor>acca063529671c6783551c694061f17ab</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>FACTOR::const_iterator</type>
      <name>endFrontals</name>
      <anchorfile>a03528.html</anchorfile>
      <anchor>a2da329d78e91e9b7b7110c7a8370872e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>FACTOR::const_iterator</type>
      <name>beginParents</name>
      <anchorfile>a03528.html</anchorfile>
      <anchor>af1f80fbcb599d244f1f83998996d34b0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>FACTOR::const_iterator</type>
      <name>endParents</name>
      <anchorfile>a03528.html</anchorfile>
      <anchor>ae97aeba1e243d7dbbf90aff659bc490b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="typedef">
      <type>boost::iterator_range&lt; typename FACTOR::const_iterator &gt;</type>
      <name>Frontals</name>
      <anchorfile>a03528.html</anchorfile>
      <anchor>abcbfbd27ed84d38425130d72c522dcea</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::iterator_range&lt; typename FACTOR::const_iterator &gt;</type>
      <name>Parents</name>
      <anchorfile>a03528.html</anchorfile>
      <anchor>a7023eb6fc34dc7dc0d0be1f92481721f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>size_t</type>
      <name>nrFrontals_</name>
      <anchorfile>a03528.html</anchorfile>
      <anchor>a1700745916154a78b30a2fc15e28ce70</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::ConjugateGradientParameters</name>
    <filename>a03680.html</filename>
    <base>gtsam::IterativeOptimizationParameters</base>
    <member kind="variable">
      <type>size_t</type>
      <name>minIterations_</name>
      <anchorfile>a03680.html</anchorfile>
      <anchor>a02664c7fcb805142421484310dafc7a4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>size_t</type>
      <name>maxIterations_</name>
      <anchorfile>a03680.html</anchorfile>
      <anchor>abe70bda38b526a112fa873a6b042502c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>size_t</type>
      <name>reset_</name>
      <anchorfile>a03680.html</anchorfile>
      <anchor>a347b5ce7b42d5eb5722eed23db93a5eb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>epsilon_rel_</name>
      <anchorfile>a03680.html</anchorfile>
      <anchor>a74161c7d0a842b59501281ccdf584590</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>epsilon_abs_</name>
      <anchorfile>a03680.html</anchorfile>
      <anchor>ad48e0d1383ab5cabb17d268244af3b14</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>BLASKernel</name>
      <anchorfile>a03680.html</anchorfile>
      <anchor>a5f3c3b9315279cf2112501b7c0a3b499</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>GTSAM</name>
      <anchorfile>a03680.html</anchorfile>
      <anchor>a5f3c3b9315279cf2112501b7c0a3b499a6899bab70a92ace73fecfa9de464de3c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>GTSAM</name>
      <anchorfile>a03680.html</anchorfile>
      <anchor>a5f3c3b9315279cf2112501b7c0a3b499a6899bab70a92ace73fecfa9de464de3c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::BTree::const_iterator</name>
    <filename>a04984.html</filename>
    <member kind="function">
      <type></type>
      <name>const_iterator</name>
      <anchorfile>a04984.html</anchorfile>
      <anchor>a36bc81260d4778905731a90080738456</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>const_iterator</name>
      <anchorfile>a04984.html</anchorfile>
      <anchor>acd7a667dd871c41636a22d99abfcb09a</anchor>
      <arglist>(const sharedNode &amp;root)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>a04984.html</anchorfile>
      <anchor>a1e4d4081e7054283f7297a90a3637295</anchor>
      <arglist>(const Self &amp;__x) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>a04984.html</anchorfile>
      <anchor>ae6c327c5b58d7a23ff4229e0ec02c679</anchor>
      <arglist>(const Self &amp;__x) const</arglist>
    </member>
    <member kind="function">
      <type>reference</type>
      <name>operator*</name>
      <anchorfile>a04984.html</anchorfile>
      <anchor>ac0110477aec7eb925f5d774913c3f324</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>pointer</type>
      <name>operator-&gt;</name>
      <anchorfile>a04984.html</anchorfile>
      <anchor>a98ecf96dbfc698f71b7d2023846dd71b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Self &amp;</type>
      <name>operator++</name>
      <anchorfile>a04984.html</anchorfile>
      <anchor>a48efbf8b109feb8c541284acdecaed46</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Self</type>
      <name>operator++</name>
      <anchorfile>a04984.html</anchorfile>
      <anchor>a375d4997693e4623026bee3faf1f3f9b</anchor>
      <arglist>(int)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>gtsam::const_selector</name>
    <filename>a02704.html</filename>
    <templarg>typename TEST_TYPE</templarg>
    <templarg>typename BASIC_TYPE</templarg>
    <templarg>typename AS_NON_CONST</templarg>
    <templarg>typename AS_CONST</templarg>
  </compound>
  <compound kind="struct">
    <name>gtsam::const_selector&lt; BASIC_TYPE, BASIC_TYPE, AS_NON_CONST, AS_CONST &gt;</name>
    <filename>a02708.html</filename>
    <templarg>typename BASIC_TYPE</templarg>
    <templarg>typename AS_NON_CONST</templarg>
    <templarg>typename AS_CONST</templarg>
  </compound>
  <compound kind="struct">
    <name>gtsam::const_selector&lt; const BASIC_TYPE, BASIC_TYPE, AS_NON_CONST, AS_CONST &gt;</name>
    <filename>a02712.html</filename>
    <templarg>typename BASIC_TYPE</templarg>
    <templarg>typename AS_NON_CONST</templarg>
    <templarg>typename AS_CONST</templarg>
  </compound>
  <compound kind="class">
    <name>gtsam::imuBias::ConstantBias</name>
    <filename>a04088.html</filename>
    <member kind="friend">
      <type>friend class</type>
      <name>boost::serialization::access</name>
      <anchorfile>a04088.html</anchorfile>
      <anchor>ac98d07dd8f7b70e16ccb9a01abf56b9c</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>GTSAM_EXPORT friend std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a04088.html</anchorfile>
      <anchor>ab6dae176e7523b2c30f758aed0e1bf48</anchor>
      <arglist>(std::ostream &amp;os, const ConstantBias &amp;bias)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>a04088.html</anchorfile>
      <anchor>a499e58fdf6aa720bc725c82a5749fba1</anchor>
      <arglist>(const std::string &amp;s=&quot;&quot;) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>equals</name>
      <anchorfile>a04088.html</anchorfile>
      <anchor>a276162fe16d92c17dab6258d5fab6d58</anchor>
      <arglist>(const ConstantBias &amp;expected, double tol=1e-5) const</arglist>
    </member>
    <member kind="function">
      <type>ConstantBias</type>
      <name>operator-</name>
      <anchorfile>a04088.html</anchorfile>
      <anchor>a5c18fc2155eb85c45809128956a7de20</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>ConstantBias</type>
      <name>operator+</name>
      <anchorfile>a04088.html</anchorfile>
      <anchor>a96e98bcbfb7312a0ba29043a96ff8c7b</anchor>
      <arglist>(const Vector6 &amp;v) const</arglist>
    </member>
    <member kind="function">
      <type>ConstantBias</type>
      <name>operator+</name>
      <anchorfile>a04088.html</anchorfile>
      <anchor>ad28898cc918cef1f1d1fd97fcc7a1036</anchor>
      <arglist>(const ConstantBias &amp;b) const</arglist>
    </member>
    <member kind="function">
      <type>ConstantBias</type>
      <name>operator-</name>
      <anchorfile>a04088.html</anchorfile>
      <anchor>a30c89c5c856d2d7514979203f536e9a2</anchor>
      <arglist>(const ConstantBias &amp;b) const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static ConstantBias</type>
      <name>identity</name>
      <anchorfile>a04088.html</anchorfile>
      <anchor>a7bfbcd50ee6bc2428165c7a2a34bbe59</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Vector6</type>
      <name>vector</name>
      <anchorfile>a04088.html</anchorfile>
      <anchor>a93610c76ef81c251cb8d5697ee9334bd</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Vector3 &amp;</type>
      <name>accelerometer</name>
      <anchorfile>a04088.html</anchorfile>
      <anchor>ada5994c047f61ce4052159928b44d624</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Vector3 &amp;</type>
      <name>gyroscope</name>
      <anchorfile>a04088.html</anchorfile>
      <anchor>a176a703de66ddf0cf87abbcca1566478</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Vector3</type>
      <name>correctAccelerometer</name>
      <anchorfile>a04088.html</anchorfile>
      <anchor>a38e03cd494b2c3e3a0d0261a22af9662</anchor>
      <arglist>(const Vector3 &amp;measurement, OptionalJacobian&lt; 3, 6 &gt; H1=boost::none, OptionalJacobian&lt; 3, 3 &gt; H2=boost::none) const</arglist>
    </member>
    <member kind="function">
      <type>Vector3</type>
      <name>correctGyroscope</name>
      <anchorfile>a04088.html</anchorfile>
      <anchor>a75637e5863c69bf8d8ca2a5347947e73</anchor>
      <arglist>(const Vector3 &amp;measurement, OptionalJacobian&lt; 3, 6 &gt; H1=boost::none, OptionalJacobian&lt; 3, 3 &gt; H2=boost::none) const</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const size_t</type>
      <name>dimension</name>
      <anchorfile>a04088.html</anchorfile>
      <anchor>a85ba8cd799a5771ad8ac8669e1377f1d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::ConstantTwistScenario</name>
    <filename>a04176.html</filename>
    <base>gtsam::Scenario</base>
    <member kind="function">
      <type></type>
      <name>ConstantTwistScenario</name>
      <anchorfile>a04176.html</anchorfile>
      <anchor>a30f972429efb00671fc30d6c958d13b3</anchor>
      <arglist>(const Vector3 &amp;w, const Vector3 &amp;v, const Pose3 &amp;nTb0=Pose3())</arglist>
    </member>
    <member kind="function">
      <type>Pose3</type>
      <name>pose</name>
      <anchorfile>a04176.html</anchorfile>
      <anchor>acd96948b7aabca8d3edd32986f6ea517</anchor>
      <arglist>(double t) const override</arglist>
    </member>
    <member kind="function">
      <type>Vector3</type>
      <name>omega_b</name>
      <anchorfile>a04176.html</anchorfile>
      <anchor>a922a598b52121b45d9ae492453401f5c</anchor>
      <arglist>(double t) const override</arglist>
    </member>
    <member kind="function">
      <type>Vector3</type>
      <name>velocity_n</name>
      <anchorfile>a04176.html</anchorfile>
      <anchor>ad1ef4f451f2f8d8413424778ab3e1791</anchor>
      <arglist>(double t) const override</arglist>
    </member>
    <member kind="function">
      <type>Vector3</type>
      <name>acceleration_n</name>
      <anchorfile>a04176.html</anchorfile>
      <anchor>a313d9f5f2edd143748c1e20fddcd3bde</anchor>
      <arglist>(double t) const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::ConstantVelocityFactor</name>
    <filename>a04076.html</filename>
    <base>NoiseModelFactor2&lt; NavState, NavState &gt;</base>
    <member kind="function">
      <type>gtsam::Vector</type>
      <name>evaluateError</name>
      <anchorfile>a04076.html</anchorfile>
      <anchor>ac9114353e397d4299e80ee34216040a9</anchor>
      <arglist>(const NavState &amp;x1, const NavState &amp;x2, boost::optional&lt; gtsam::Matrix &amp; &gt; H1=boost::none, boost::optional&lt; gtsam::Matrix &amp; &gt; H2=boost::none) const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::Values::ConstFiltered</name>
    <filename>a04532.html</filename>
    <templarg>class ValueType</templarg>
    <member kind="function">
      <type></type>
      <name>ConstFiltered</name>
      <anchorfile>a04532.html</anchorfile>
      <anchor>a61101d5dad7e56d12e308d4c475314d8</anchor>
      <arglist>(const Filtered&lt; ValueType &gt; &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>size</name>
      <anchorfile>a04532.html</anchorfile>
      <anchor>a923578e69ab10edac875b6ee8bbee29e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="typedef">
      <type>_ValuesConstKeyValuePair&lt; ValueType &gt;</type>
      <name>KeyValuePair</name>
      <anchorfile>a04532.html</anchorfile>
      <anchor>ab19780909f6d4cd5dbeee01aa88d07ce</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>gtsam::Values::ConstKeyValuePair</name>
    <filename>a04568.html</filename>
    <member kind="variable">
      <type>const Key</type>
      <name>key</name>
      <anchorfile>a04568.html</anchorfile>
      <anchor>a1e4447d2022b8a70fabaa877641b63a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const Value &amp;</type>
      <name>value</name>
      <anchorfile>a04568.html</anchorfile>
      <anchor>a7fcc2317ca95dc55484dfa17dc31587d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::noiseModel::Constrained</name>
    <filename>a03884.html</filename>
    <base>gtsam::noiseModel::Diagonal</base>
    <member kind="function">
      <type></type>
      <name>Constrained</name>
      <anchorfile>a03884.html</anchorfile>
      <anchor>ad6aa2d673a9660668cbb5b446c2aea05</anchor>
      <arglist>(const Vector &amp;sigmas=Z_1x1)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isConstrained</name>
      <anchorfile>a03884.html</anchorfile>
      <anchor>a0e780b27866212e14eea3cd94e12a995</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>constrained</name>
      <anchorfile>a03884.html</anchorfile>
      <anchor>a8bba90d84c33f799fa4c2c7b53b1774b</anchor>
      <arglist>(size_t i) const</arglist>
    </member>
    <member kind="function">
      <type>const Vector &amp;</type>
      <name>mu</name>
      <anchorfile>a03884.html</anchorfile>
      <anchor>a85a6a9d9d7f663b22fcba2e6c2c01737</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>squaredMahalanobisDistance</name>
      <anchorfile>a03884.html</anchorfile>
      <anchor>a6ca9bc8b6feed42646804cb7005d6a15</anchor>
      <arglist>(const Vector &amp;v) const override</arglist>
    </member>
    <member kind="function">
      <type>Vector</type>
      <name>whiten</name>
      <anchorfile>a03884.html</anchorfile>
      <anchor>ae6a0505c2f3e72c99c6e3432b595efd0</anchor>
      <arglist>(const Vector &amp;v) const override</arglist>
    </member>
    <member kind="function">
      <type>Matrix</type>
      <name>Whiten</name>
      <anchorfile>a03884.html</anchorfile>
      <anchor>aa60098f5cb5731e00b70052c079c339b</anchor>
      <arglist>(const Matrix &amp;H) const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>WhitenInPlace</name>
      <anchorfile>a03884.html</anchorfile>
      <anchor>a693a87e3aa80ce9e69eb8c4b93b65899</anchor>
      <arglist>(Matrix &amp;H) const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>WhitenInPlace</name>
      <anchorfile>a03884.html</anchorfile>
      <anchor>aaf18ef6baa8f4671ab7c4a7fdc00ab86</anchor>
      <arglist>(Eigen::Block&lt; Matrix &gt; H) const override</arglist>
    </member>
    <member kind="function">
      <type>Diagonal::shared_ptr</type>
      <name>QR</name>
      <anchorfile>a03884.html</anchorfile>
      <anchor>a995edc880d181c10c72b0101d967e31d</anchor>
      <arglist>(Matrix &amp;Ab) const override</arglist>
    </member>
    <member kind="function">
      <type>shared_ptr</type>
      <name>unit</name>
      <anchorfile>a03884.html</anchorfile>
      <anchor>aceab7c38ea485767ec7141ad57fefc9f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static shared_ptr</type>
      <name>MixedSigmas</name>
      <anchorfile>a03884.html</anchorfile>
      <anchor>a5453997b983eb928f23c149bdcc887c4</anchor>
      <arglist>(const Vector &amp;mu, const Vector &amp;sigmas)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static shared_ptr</type>
      <name>MixedSigmas</name>
      <anchorfile>a03884.html</anchorfile>
      <anchor>a7ccabe92c1846eb0f2ed4df33e6e0ca4</anchor>
      <arglist>(const Vector &amp;sigmas)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static shared_ptr</type>
      <name>MixedSigmas</name>
      <anchorfile>a03884.html</anchorfile>
      <anchor>aca99bfaf36768b6ce7cbf15a768505d4</anchor>
      <arglist>(double m, const Vector &amp;sigmas)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static shared_ptr</type>
      <name>MixedVariances</name>
      <anchorfile>a03884.html</anchorfile>
      <anchor>ad42a87f248c79be2cfda2934fa910c01</anchor>
      <arglist>(const Vector &amp;mu, const Vector &amp;variances)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static shared_ptr</type>
      <name>MixedPrecisions</name>
      <anchorfile>a03884.html</anchorfile>
      <anchor>a6dec800b5293cd57a0b6e38e434a5a7c</anchor>
      <arglist>(const Vector &amp;mu, const Vector &amp;precisions)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static shared_ptr</type>
      <name>All</name>
      <anchorfile>a03884.html</anchorfile>
      <anchor>a6530a33957f49cc78f8da3842ed685b4</anchor>
      <arglist>(size_t dim)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static shared_ptr</type>
      <name>All</name>
      <anchorfile>a03884.html</anchorfile>
      <anchor>a4b1918b7655f35a3ab554b55ab27a895</anchor>
      <arglist>(size_t dim, const Vector &amp;mu)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static shared_ptr</type>
      <name>All</name>
      <anchorfile>a03884.html</anchorfile>
      <anchor>a5a966c8c2281ccea35ef993b678bc4bc</anchor>
      <arglist>(size_t dim, double mu)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>Constrained</name>
      <anchorfile>a03884.html</anchorfile>
      <anchor>a96cf4e02109b88d9be5a90d657ddd134</anchor>
      <arglist>(const Vector &amp;mu, const Vector &amp;sigmas)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Vector</type>
      <name>mu_</name>
      <anchorfile>a03884.html</anchorfile>
      <anchor>ad12d58b8b5c00ba93702bcccf15e6b4b</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>boost::serialization::access</name>
      <anchorfile>a03884.html</anchorfile>
      <anchor>ac98d07dd8f7b70e16ccb9a01abf56b9c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::Constraint</name>
    <filename>a05008.html</filename>
    <base>gtsam::DiscreteFactor</base>
    <member kind="function">
      <type></type>
      <name>Constraint</name>
      <anchorfile>a05008.html</anchorfile>
      <anchor>a30830bdf18fd5ae679c58171ffcb11cd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~Constraint</name>
      <anchorfile>a05008.html</anchorfile>
      <anchor>a1887e22160a0b5bd8d0bcb9505f4a9d8</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual shared_ptr</type>
      <name>partiallyApply</name>
      <anchorfile>a05008.html</anchorfile>
      <anchor>a3593df1b8c600a6c95d06b1c5216617a</anchor>
      <arglist>(const Values &amp;) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual shared_ptr</type>
      <name>partiallyApply</name>
      <anchorfile>a05008.html</anchorfile>
      <anchor>ac1485e2d7e97d794cae79ec053a73bac</anchor>
      <arglist>(const std::vector&lt; Domain &gt; &amp;) const =0</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Constraint</name>
      <anchorfile>a05008.html</anchorfile>
      <anchor>a30830bdf18fd5ae679c58171ffcb11cd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~Constraint</name>
      <anchorfile>a05008.html</anchorfile>
      <anchor>a1887e22160a0b5bd8d0bcb9505f4a9d8</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual shared_ptr</type>
      <name>partiallyApply</name>
      <anchorfile>a05008.html</anchorfile>
      <anchor>a3593df1b8c600a6c95d06b1c5216617a</anchor>
      <arglist>(const Values &amp;) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual shared_ptr</type>
      <name>partiallyApply</name>
      <anchorfile>a05008.html</anchorfile>
      <anchor>ac1485e2d7e97d794cae79ec053a73bac</anchor>
      <arglist>(const std::vector&lt; Domain &gt; &amp;) const =0</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>Constraint</name>
      <anchorfile>a05008.html</anchorfile>
      <anchor>a2ba8bfb584aa5d3a8e10264630fea7cc</anchor>
      <arglist>(const KeyVector &amp;js)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>Constraint</name>
      <anchorfile>a05008.html</anchorfile>
      <anchor>ac65b64bd3106f19619766800423d72de</anchor>
      <arglist>(Key j)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>Constraint</name>
      <anchorfile>a05008.html</anchorfile>
      <anchor>a641a803990fd91bafea6683a5c05474b</anchor>
      <arglist>(Key j1, Key j2)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>Constraint</name>
      <anchorfile>a05008.html</anchorfile>
      <anchor>ab4ad985f589a56d47ee4e5168cb6d771</anchor>
      <arglist>(KeyIterator beginKey, KeyIterator endKey)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>gtsam::ConstructorTraversalData</name>
    <filename>a03596.html</filename>
    <templarg>class BAYESTREE</templarg>
    <templarg>class GRAPH</templarg>
    <templarg>class ETREE_NODE</templarg>
    <class kind="class">gtsam::ConstructorTraversalData::SymbolicFactors</class>
  </compound>
  <compound kind="class">
    <name>gtsam::CRefCallAddCopy</name>
    <filename>a03556.html</filename>
    <templarg>class C</templarg>
  </compound>
  <compound kind="class">
    <name>gtsam::CRefCallPushBack</name>
    <filename>a03548.html</filename>
    <templarg>class C</templarg>
  </compound>
  <compound kind="class">
    <name>gtsam::CSP</name>
    <filename>a05012.html</filename>
    <base>gtsam::DiscreteFactorGraph</base>
    <member kind="function">
      <type>void</type>
      <name>addSingleValue</name>
      <anchorfile>a05012.html</anchorfile>
      <anchor>a31dbd12c4fe55698ad8c5234e5ea1c03</anchor>
      <arglist>(const DiscreteKey &amp;dkey, size_t value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addAllDiff</name>
      <anchorfile>a05012.html</anchorfile>
      <anchor>af4defecc411aa135ec3ca05a923bed04</anchor>
      <arglist>(const DiscreteKey &amp;key1, const DiscreteKey &amp;key2)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addAllDiff</name>
      <anchorfile>a05012.html</anchorfile>
      <anchor>aa7c9a418cb57874c801408aa17853b39</anchor>
      <arglist>(const DiscreteKeys &amp;dkeys)</arglist>
    </member>
    <member kind="function">
      <type>sharedValues</type>
      <name>optimalAssignment</name>
      <anchorfile>a05012.html</anchorfile>
      <anchor>ad25a42ce2b5322ab2e0bdcc1aa0c3fa8</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>sharedValues</type>
      <name>optimalAssignment</name>
      <anchorfile>a05012.html</anchorfile>
      <anchor>a35aca8fac6b87ddcfa4a5c9459ea6418</anchor>
      <arglist>(const Ordering &amp;ordering) const</arglist>
    </member>
    <member kind="typedef">
      <type>KeyVector</type>
      <name>Indices</name>
      <anchorfile>a05012.html</anchorfile>
      <anchor>a7968eaceebeb786bceb815eb790f3364</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::CustomFactor</name>
    <filename>a04196.html</filename>
    <base>gtsam::NoiseModelFactor</base>
    <member kind="function">
      <type></type>
      <name>CustomFactor</name>
      <anchorfile>a04196.html</anchorfile>
      <anchor>ac93d675279e7e26e966775dd64f61331</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CustomFactor</name>
      <anchorfile>a04196.html</anchorfile>
      <anchor>a53488ff12f9b8a98c49c432dd4332176</anchor>
      <arglist>(const SharedNoiseModel &amp;noiseModel, const KeyVector &amp;keys, const CustomErrorFunction &amp;errorFunction)</arglist>
    </member>
    <member kind="function">
      <type>Vector</type>
      <name>unwhitenedError</name>
      <anchorfile>a04196.html</anchorfile>
      <anchor>a019ffc0c38e4076e5acfa5eed2465921</anchor>
      <arglist>(const Values &amp;x, boost::optional&lt; std::vector&lt; Matrix &gt; &amp; &gt; H=boost::none) const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>a04196.html</anchorfile>
      <anchor>afd46028ad57228fbcd7a93f861dd609c</anchor>
      <arglist>(const std::string &amp;s, const KeyFormatter &amp;keyFormatter=DefaultKeyFormatter) const override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>sendable</name>
      <anchorfile>a04196.html</anchorfile>
      <anchor>afd0394a184c062583c4cf0cb21c8e05b</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>boost::serialization::access</name>
      <anchorfile>a04196.html</anchorfile>
      <anchor>ac98d07dd8f7b70e16ccb9a01abf56b9c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::Cyclic</name>
    <filename>a03168.html</filename>
    <templarg>size_t N</templarg>
    <member kind="function">
      <type></type>
      <name>Cyclic</name>
      <anchorfile>a03168.html</anchorfile>
      <anchor>a9fe359009a45861d7aed46f4895fc123</anchor>
      <arglist>(size_t i)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Cyclic</name>
      <anchorfile>a03168.html</anchorfile>
      <anchor>a7d391305f0d5d8928f4e87260eeb7132</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator size_t</name>
      <anchorfile>a03168.html</anchorfile>
      <anchor>adec1fe1583750a51eb414ab4c81cc7db</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Cyclic</type>
      <name>operator+</name>
      <anchorfile>a03168.html</anchorfile>
      <anchor>af8d1ead3b8a7c75fea482f87ca95d6e6</anchor>
      <arglist>(const Cyclic &amp;h) const</arglist>
    </member>
    <member kind="function">
      <type>Cyclic</type>
      <name>operator-</name>
      <anchorfile>a03168.html</anchorfile>
      <anchor>ada127fe6c598f530235f72657598762f</anchor>
      <arglist>(const Cyclic &amp;h) const</arglist>
    </member>
    <member kind="function">
      <type>Cyclic</type>
      <name>operator-</name>
      <anchorfile>a03168.html</anchorfile>
      <anchor>afc3663d590ddf7bf836a59364c5a522d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>a03168.html</anchorfile>
      <anchor>a7b94d8b155fdce35f6141c2eb648745c</anchor>
      <arglist>(const std::string &amp;s=&quot;&quot;) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>equals</name>
      <anchorfile>a03168.html</anchorfile>
      <anchor>a460e4d6082e92c1e7e655b0cab64c42a</anchor>
      <arglist>(const Cyclic &amp;other, double tol=1e-9) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::noiseModel::mEstimator::DCS</name>
    <filename>a03864.html</filename>
    <base>gtsam::noiseModel::mEstimator::Base</base>
    <member kind="friend">
      <type>friend class</type>
      <name>boost::serialization::access</name>
      <anchorfile>a03864.html</anchorfile>
      <anchor>ac98d07dd8f7b70e16ccb9a01abf56b9c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::DecisionTree</name>
    <filename>a02924.html</filename>
    <templarg>typename L</templarg>
    <templarg>typename Y</templarg>
    <member kind="function">
      <type></type>
      <name>DecisionTree</name>
      <anchorfile>a02924.html</anchorfile>
      <anchor>a6427d8a417f455f8e143ab09c3d04209</anchor>
      <arglist>(const Y &amp;y)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DecisionTree</name>
      <anchorfile>a02924.html</anchorfile>
      <anchor>ae0b844473823aa09c71e668449509cd2</anchor>
      <arglist>(const L &amp;label, const Y &amp;y1, const Y &amp;y2)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DecisionTree</name>
      <anchorfile>a02924.html</anchorfile>
      <anchor>aaa6cb1a9966203a7f43ccd31b335ca7d</anchor>
      <arglist>(const LabelC &amp;label, const Y &amp;y1, const Y &amp;y2)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DecisionTree</name>
      <anchorfile>a02924.html</anchorfile>
      <anchor>ad754d8699cb205788f889f012781bdc2</anchor>
      <arglist>(const std::vector&lt; LabelC &gt; &amp;labelCs, const std::vector&lt; Y &gt; &amp;ys)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DecisionTree</name>
      <anchorfile>a02924.html</anchorfile>
      <anchor>a3a9a4b4209812f071c1225d9542fa443</anchor>
      <arglist>(const std::vector&lt; LabelC &gt; &amp;labelCs, const std::string &amp;table)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DecisionTree</name>
      <anchorfile>a02924.html</anchorfile>
      <anchor>a1d535f26a06302403a1bd6dcac87b041</anchor>
      <arglist>(Iterator begin, Iterator end, const L &amp;label)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DecisionTree</name>
      <anchorfile>a02924.html</anchorfile>
      <anchor>afb65bfe5d3dc2b8f294ea894aabc25a3</anchor>
      <arglist>(const L &amp;label, const DecisionTree &amp;f0, const DecisionTree &amp;f1)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DecisionTree</name>
      <anchorfile>a02924.html</anchorfile>
      <anchor>ae47ff283add49f43bc4aef596cfc333d</anchor>
      <arglist>(const DecisionTree&lt; M, X &gt; &amp;other, const std::map&lt; M, L &gt; &amp;map, std::function&lt; Y(const X &amp;)&gt; op)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>a02924.html</anchorfile>
      <anchor>aea4d286beaeb3083068b052f42b2921b</anchor>
      <arglist>(const std::string &amp;s=&quot;DecisionTree&quot;) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~DecisionTree</name>
      <anchorfile>a02924.html</anchorfile>
      <anchor>a13241b8776eaca6bb50144462e01f94e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>a02924.html</anchorfile>
      <anchor>ad9c9fc1b8f2aa6bc6466c2e7b61ee693</anchor>
      <arglist>(const DecisionTree &amp;q) const</arglist>
    </member>
    <member kind="function">
      <type>const Y &amp;</type>
      <name>operator()</name>
      <anchorfile>a02924.html</anchorfile>
      <anchor>aacfdbde11b02b8a95183b8a28af57f37</anchor>
      <arglist>(const Assignment&lt; L &gt; &amp;x) const</arglist>
    </member>
    <member kind="function">
      <type>DecisionTree</type>
      <name>apply</name>
      <anchorfile>a02924.html</anchorfile>
      <anchor>a00d49afa8ffc80de9cbdbb4489e50ffe</anchor>
      <arglist>(const Unary &amp;op) const</arglist>
    </member>
    <member kind="function">
      <type>DecisionTree</type>
      <name>apply</name>
      <anchorfile>a02924.html</anchorfile>
      <anchor>a47f7b5528330806519440a58f587c93b</anchor>
      <arglist>(const DecisionTree &amp;g, const Binary &amp;op) const</arglist>
    </member>
    <member kind="function">
      <type>DecisionTree</type>
      <name>choose</name>
      <anchorfile>a02924.html</anchorfile>
      <anchor>a0263dc037625a0f804260004b4c80b7b</anchor>
      <arglist>(const L &amp;label, size_t index) const</arglist>
    </member>
    <member kind="function">
      <type>DecisionTree</type>
      <name>combine</name>
      <anchorfile>a02924.html</anchorfile>
      <anchor>a9e2c871be4518f8487a8bd610c775924</anchor>
      <arglist>(const L &amp;label, size_t cardinality, const Binary &amp;op) const</arglist>
    </member>
    <member kind="function">
      <type>DecisionTree</type>
      <name>combine</name>
      <anchorfile>a02924.html</anchorfile>
      <anchor>a1c8ac39ffe15cbc5370a835277a9c33d</anchor>
      <arglist>(const LabelC &amp;labelC, const Binary &amp;op) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>dot</name>
      <anchorfile>a02924.html</anchorfile>
      <anchor>a7d7d45e1ee0d29f4521f773b99cc043b</anchor>
      <arglist>(std::ostream &amp;os, bool showZero=true) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>dot</name>
      <anchorfile>a02924.html</anchorfile>
      <anchor>a991144175b5a349d97b799a198c7ddc0</anchor>
      <arglist>(const std::string &amp;name, bool showZero=true) const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DecisionTree</name>
      <anchorfile>a02924.html</anchorfile>
      <anchor>a6427d8a417f455f8e143ab09c3d04209</anchor>
      <arglist>(const Y &amp;y)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DecisionTree</name>
      <anchorfile>a02924.html</anchorfile>
      <anchor>ae0b844473823aa09c71e668449509cd2</anchor>
      <arglist>(const L &amp;label, const Y &amp;y1, const Y &amp;y2)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DecisionTree</name>
      <anchorfile>a02924.html</anchorfile>
      <anchor>aaa6cb1a9966203a7f43ccd31b335ca7d</anchor>
      <arglist>(const LabelC &amp;label, const Y &amp;y1, const Y &amp;y2)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DecisionTree</name>
      <anchorfile>a02924.html</anchorfile>
      <anchor>ad754d8699cb205788f889f012781bdc2</anchor>
      <arglist>(const std::vector&lt; LabelC &gt; &amp;labelCs, const std::vector&lt; Y &gt; &amp;ys)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DecisionTree</name>
      <anchorfile>a02924.html</anchorfile>
      <anchor>a3a9a4b4209812f071c1225d9542fa443</anchor>
      <arglist>(const std::vector&lt; LabelC &gt; &amp;labelCs, const std::string &amp;table)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DecisionTree</name>
      <anchorfile>a02924.html</anchorfile>
      <anchor>a1d535f26a06302403a1bd6dcac87b041</anchor>
      <arglist>(Iterator begin, Iterator end, const L &amp;label)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DecisionTree</name>
      <anchorfile>a02924.html</anchorfile>
      <anchor>afb65bfe5d3dc2b8f294ea894aabc25a3</anchor>
      <arglist>(const L &amp;label, const DecisionTree &amp;f0, const DecisionTree &amp;f1)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DecisionTree</name>
      <anchorfile>a02924.html</anchorfile>
      <anchor>ae47ff283add49f43bc4aef596cfc333d</anchor>
      <arglist>(const DecisionTree&lt; M, X &gt; &amp;other, const std::map&lt; M, L &gt; &amp;map, std::function&lt; Y(const X &amp;)&gt; op)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>a02924.html</anchorfile>
      <anchor>aea4d286beaeb3083068b052f42b2921b</anchor>
      <arglist>(const std::string &amp;s=&quot;DecisionTree&quot;) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~DecisionTree</name>
      <anchorfile>a02924.html</anchorfile>
      <anchor>a13241b8776eaca6bb50144462e01f94e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>a02924.html</anchorfile>
      <anchor>ad9c9fc1b8f2aa6bc6466c2e7b61ee693</anchor>
      <arglist>(const DecisionTree &amp;q) const</arglist>
    </member>
    <member kind="function">
      <type>const Y &amp;</type>
      <name>operator()</name>
      <anchorfile>a02924.html</anchorfile>
      <anchor>aacfdbde11b02b8a95183b8a28af57f37</anchor>
      <arglist>(const Assignment&lt; L &gt; &amp;x) const</arglist>
    </member>
    <member kind="function">
      <type>DecisionTree</type>
      <name>apply</name>
      <anchorfile>a02924.html</anchorfile>
      <anchor>a00d49afa8ffc80de9cbdbb4489e50ffe</anchor>
      <arglist>(const Unary &amp;op) const</arglist>
    </member>
    <member kind="function">
      <type>DecisionTree</type>
      <name>apply</name>
      <anchorfile>a02924.html</anchorfile>
      <anchor>a47f7b5528330806519440a58f587c93b</anchor>
      <arglist>(const DecisionTree &amp;g, const Binary &amp;op) const</arglist>
    </member>
    <member kind="function">
      <type>DecisionTree</type>
      <name>choose</name>
      <anchorfile>a02924.html</anchorfile>
      <anchor>a0263dc037625a0f804260004b4c80b7b</anchor>
      <arglist>(const L &amp;label, size_t index) const</arglist>
    </member>
    <member kind="function">
      <type>DecisionTree</type>
      <name>combine</name>
      <anchorfile>a02924.html</anchorfile>
      <anchor>a9e2c871be4518f8487a8bd610c775924</anchor>
      <arglist>(const L &amp;label, size_t cardinality, const Binary &amp;op) const</arglist>
    </member>
    <member kind="function">
      <type>DecisionTree</type>
      <name>combine</name>
      <anchorfile>a02924.html</anchorfile>
      <anchor>a1c8ac39ffe15cbc5370a835277a9c33d</anchor>
      <arglist>(const LabelC &amp;labelC, const Binary &amp;op) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>dot</name>
      <anchorfile>a02924.html</anchorfile>
      <anchor>a7d7d45e1ee0d29f4521f773b99cc043b</anchor>
      <arglist>(std::ostream &amp;os, bool showZero=true) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>dot</name>
      <anchorfile>a02924.html</anchorfile>
      <anchor>a991144175b5a349d97b799a198c7ddc0</anchor>
      <arglist>(const std::string &amp;name, bool showZero=true) const</arglist>
    </member>
    <member kind="typedef">
      <type>std::function&lt; Y(const Y &amp;)&gt;</type>
      <name>Unary</name>
      <anchorfile>a02924.html</anchorfile>
      <anchor>affa09919050198ca2a1ad1d6eb9d1238</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::pair&lt; L, size_t &gt;</type>
      <name>LabelC</name>
      <anchorfile>a02924.html</anchorfile>
      <anchor>a8fd239c82a4836b3e6d2ce39b9c46e7f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Node::Ptr</type>
      <name>NodePtr</name>
      <anchorfile>a02924.html</anchorfile>
      <anchor>aba6a583909719d5bc3d8c0cc50906270</anchor>
      <arglist></arglist>
    </member>
    <class kind="class">gtsam::DecisionTree::Choice</class>
    <class kind="class">gtsam::DecisionTree::Leaf</class>
    <class kind="class">gtsam::DecisionTree::Node</class>
    <member kind="function" protection="protected">
      <type>NodePtr</type>
      <name>create</name>
      <anchorfile>a02924.html</anchorfile>
      <anchor>a2050d2b05dfa96b77a632688284530ef</anchor>
      <arglist>(It begin, It end, ValueIt beginY, ValueIt endY) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>NodePtr</type>
      <name>convert</name>
      <anchorfile>a02924.html</anchorfile>
      <anchor>a935a4a5609b8a034819d76233b44be5b</anchor>
      <arglist>(const typename DecisionTree&lt; M, X &gt;::NodePtr &amp;f, const std::map&lt; M, L &gt; &amp;map, std::function&lt; Y(const X &amp;)&gt; op)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>DecisionTree</name>
      <anchorfile>a02924.html</anchorfile>
      <anchor>af290fdb29bb254e51bfa295208655bcf</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::DecisionTreeFactor</name>
    <filename>a02932.html</filename>
    <base>gtsam::DiscreteFactor</base>
    <base>gtsam::Potentials</base>
    <member kind="function">
      <type></type>
      <name>DecisionTreeFactor</name>
      <anchorfile>a02932.html</anchorfile>
      <anchor>ad52196341d54cfcb396eb62a52ceb7d6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DecisionTreeFactor</name>
      <anchorfile>a02932.html</anchorfile>
      <anchor>a0276612e37428bac98fbe8f00f280cbb</anchor>
      <arglist>(const DiscreteKeys &amp;keys, const ADT &amp;potentials)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DecisionTreeFactor</name>
      <anchorfile>a02932.html</anchorfile>
      <anchor>a143b3b93ebd73bfa38c90f48e4374cff</anchor>
      <arglist>(const DiscreteKeys &amp;keys, SOURCE table)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DecisionTreeFactor</name>
      <anchorfile>a02932.html</anchorfile>
      <anchor>a5f99b1a4066ec5cf56d4d5a89cb492be</anchor>
      <arglist>(const DiscreteConditional &amp;c)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>equals</name>
      <anchorfile>a02932.html</anchorfile>
      <anchor>a5a173b7ccef2a5b6c4215ff3eda6046a</anchor>
      <arglist>(const DiscreteFactor &amp;other, double tol=1e-9) const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>a02932.html</anchorfile>
      <anchor>a6e2419062097bf61c562457e33d13935</anchor>
      <arglist>(const std::string &amp;s=&quot;DecisionTreeFactor:\n&quot;, const KeyFormatter &amp;formatter=DefaultKeyFormatter) const override</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>operator()</name>
      <anchorfile>a02932.html</anchorfile>
      <anchor>a5305a9f37d9ac879a7e4f816f394d86e</anchor>
      <arglist>(const Values &amp;values) const override</arglist>
    </member>
    <member kind="function">
      <type>DecisionTreeFactor</type>
      <name>operator*</name>
      <anchorfile>a02932.html</anchorfile>
      <anchor>a37f14b34b202ae7ab770e8f55ebf64fd</anchor>
      <arglist>(const DecisionTreeFactor &amp;f) const override</arglist>
    </member>
    <member kind="function">
      <type>DecisionTreeFactor</type>
      <name>operator/</name>
      <anchorfile>a02932.html</anchorfile>
      <anchor>ae4e9dfe9ba689937cca26a497920ef43</anchor>
      <arglist>(const DecisionTreeFactor &amp;f) const</arglist>
    </member>
    <member kind="function">
      <type>DecisionTreeFactor</type>
      <name>toDecisionTreeFactor</name>
      <anchorfile>a02932.html</anchorfile>
      <anchor>ac42b7ab20c67cefbf162dd9f53a09680</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>shared_ptr</type>
      <name>sum</name>
      <anchorfile>a02932.html</anchorfile>
      <anchor>a98817134685693d2eeb11f3056835ec3</anchor>
      <arglist>(size_t nrFrontals) const</arglist>
    </member>
    <member kind="function">
      <type>shared_ptr</type>
      <name>sum</name>
      <anchorfile>a02932.html</anchorfile>
      <anchor>a21a92514194030c43d23d7ad9d159099</anchor>
      <arglist>(const Ordering &amp;keys) const</arglist>
    </member>
    <member kind="function">
      <type>shared_ptr</type>
      <name>max</name>
      <anchorfile>a02932.html</anchorfile>
      <anchor>a449d2ce18c2b905a5a54694691972d4a</anchor>
      <arglist>(size_t nrFrontals) const</arglist>
    </member>
    <member kind="function">
      <type>DecisionTreeFactor</type>
      <name>apply</name>
      <anchorfile>a02932.html</anchorfile>
      <anchor>a6e0e32506f4207cb06834effd717bac3</anchor>
      <arglist>(const DecisionTreeFactor &amp;f, ADT::Binary op) const</arglist>
    </member>
    <member kind="function">
      <type>shared_ptr</type>
      <name>combine</name>
      <anchorfile>a02932.html</anchorfile>
      <anchor>a3ee7a26df3eb4606abe8b2d59c62ef29</anchor>
      <arglist>(size_t nrFrontals, ADT::Binary op) const</arglist>
    </member>
    <member kind="function">
      <type>shared_ptr</type>
      <name>combine</name>
      <anchorfile>a02932.html</anchorfile>
      <anchor>af97c886654f4c5edc890e976e7534de2</anchor>
      <arglist>(const Ordering &amp;keys, ADT::Binary op) const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DecisionTreeFactor</name>
      <anchorfile>a02932.html</anchorfile>
      <anchor>ad52196341d54cfcb396eb62a52ceb7d6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DecisionTreeFactor</name>
      <anchorfile>a02932.html</anchorfile>
      <anchor>a0276612e37428bac98fbe8f00f280cbb</anchor>
      <arglist>(const DiscreteKeys &amp;keys, const ADT &amp;potentials)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DecisionTreeFactor</name>
      <anchorfile>a02932.html</anchorfile>
      <anchor>a143b3b93ebd73bfa38c90f48e4374cff</anchor>
      <arglist>(const DiscreteKeys &amp;keys, SOURCE table)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DecisionTreeFactor</name>
      <anchorfile>a02932.html</anchorfile>
      <anchor>a5f99b1a4066ec5cf56d4d5a89cb492be</anchor>
      <arglist>(const DiscreteConditional &amp;c)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>equals</name>
      <anchorfile>a02932.html</anchorfile>
      <anchor>a5a173b7ccef2a5b6c4215ff3eda6046a</anchor>
      <arglist>(const DiscreteFactor &amp;other, double tol=1e-9) const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>a02932.html</anchorfile>
      <anchor>a6e2419062097bf61c562457e33d13935</anchor>
      <arglist>(const std::string &amp;s=&quot;DecisionTreeFactor:\n&quot;, const KeyFormatter &amp;formatter=DefaultKeyFormatter) const override</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>operator()</name>
      <anchorfile>a02932.html</anchorfile>
      <anchor>a5305a9f37d9ac879a7e4f816f394d86e</anchor>
      <arglist>(const Values &amp;values) const override</arglist>
    </member>
    <member kind="function">
      <type>DecisionTreeFactor</type>
      <name>operator*</name>
      <anchorfile>a02932.html</anchorfile>
      <anchor>a37f14b34b202ae7ab770e8f55ebf64fd</anchor>
      <arglist>(const DecisionTreeFactor &amp;f) const override</arglist>
    </member>
    <member kind="function">
      <type>DecisionTreeFactor</type>
      <name>operator/</name>
      <anchorfile>a02932.html</anchorfile>
      <anchor>ae4e9dfe9ba689937cca26a497920ef43</anchor>
      <arglist>(const DecisionTreeFactor &amp;f) const</arglist>
    </member>
    <member kind="function">
      <type>DecisionTreeFactor</type>
      <name>toDecisionTreeFactor</name>
      <anchorfile>a02932.html</anchorfile>
      <anchor>ac42b7ab20c67cefbf162dd9f53a09680</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>shared_ptr</type>
      <name>sum</name>
      <anchorfile>a02932.html</anchorfile>
      <anchor>a98817134685693d2eeb11f3056835ec3</anchor>
      <arglist>(size_t nrFrontals) const</arglist>
    </member>
    <member kind="function">
      <type>shared_ptr</type>
      <name>sum</name>
      <anchorfile>a02932.html</anchorfile>
      <anchor>a21a92514194030c43d23d7ad9d159099</anchor>
      <arglist>(const Ordering &amp;keys) const</arglist>
    </member>
    <member kind="function">
      <type>shared_ptr</type>
      <name>max</name>
      <anchorfile>a02932.html</anchorfile>
      <anchor>a449d2ce18c2b905a5a54694691972d4a</anchor>
      <arglist>(size_t nrFrontals) const</arglist>
    </member>
    <member kind="function">
      <type>DecisionTreeFactor</type>
      <name>apply</name>
      <anchorfile>a02932.html</anchorfile>
      <anchor>a6e0e32506f4207cb06834effd717bac3</anchor>
      <arglist>(const DecisionTreeFactor &amp;f, ADT::Binary op) const</arglist>
    </member>
    <member kind="function">
      <type>shared_ptr</type>
      <name>combine</name>
      <anchorfile>a02932.html</anchorfile>
      <anchor>a3ee7a26df3eb4606abe8b2d59c62ef29</anchor>
      <arglist>(size_t nrFrontals, ADT::Binary op) const</arglist>
    </member>
    <member kind="function">
      <type>shared_ptr</type>
      <name>combine</name>
      <anchorfile>a02932.html</anchorfile>
      <anchor>af97c886654f4c5edc890e976e7534de2</anchor>
      <arglist>(const Ordering &amp;keys, ADT::Binary op) const</arglist>
    </member>
    <member kind="typedef">
      <type>DiscreteFactor</type>
      <name>Base</name>
      <anchorfile>a02932.html</anchorfile>
      <anchor>a96e20fc5f4cc476df586d28dab2da00c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::DeltaFactor</name>
    <filename>a05408.html</filename>
    <base>NoiseModelFactor2&lt; Pose2, Point2 &gt;</base>
    <member kind="function">
      <type></type>
      <name>DeltaFactor</name>
      <anchorfile>a05408.html</anchorfile>
      <anchor>a980a324026762555972df7d01de2774f</anchor>
      <arglist>(Key i, Key j, const Point2 &amp;measured, const SharedNoiseModel &amp;model)</arglist>
    </member>
    <member kind="function">
      <type>Vector</type>
      <name>evaluateError</name>
      <anchorfile>a05408.html</anchorfile>
      <anchor>ade857247f326460468208a7a7cdedc67</anchor>
      <arglist>(const Pose2 &amp;pose, const Point2 &amp;point, boost::optional&lt; Matrix &amp; &gt; H1=boost::none, boost::optional&lt; Matrix &amp; &gt; H2=boost::none) const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::DeltaFactorBase</name>
    <filename>a05412.html</filename>
    <base>NoiseModelFactor4&lt; Pose2, Pose2, Pose2, Point2 &gt;</base>
    <member kind="function">
      <type></type>
      <name>DeltaFactorBase</name>
      <anchorfile>a05412.html</anchorfile>
      <anchor>a36cfa20e61f1e646b576829f29b02403</anchor>
      <arglist>(Key b1, Key i, Key b2, Key j, const Point2 &amp;measured, const SharedNoiseModel &amp;model)</arglist>
    </member>
    <member kind="function">
      <type>Vector</type>
      <name>evaluateError</name>
      <anchorfile>a05412.html</anchorfile>
      <anchor>af9825e72fcd4f2ab69b6904f72f99df8</anchor>
      <arglist>(const Pose2 &amp;base1, const Pose2 &amp;pose, const Pose2 &amp;base2, const Point2 &amp;point, boost::optional&lt; Matrix &amp; &gt; H1=boost::none, boost::optional&lt; Matrix &amp; &gt; H2=boost::none, boost::optional&lt; Matrix &amp; &gt; H3=boost::none, boost::optional&lt; Matrix &amp; &gt; H4=boost::none) const override</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>gtsam::DeltaImpl</name>
    <filename>a04324.html</filename>
    <member kind="function" static="yes">
      <type>static size_t</type>
      <name>UpdateGaussNewtonDelta</name>
      <anchorfile>a04324.html</anchorfile>
      <anchor>a16c36efddf40563ac6fd8c2b39536446</anchor>
      <arglist>(const ISAM2::Roots &amp;roots, const KeySet &amp;replacedKeys, double wildfireThreshold, VectorValues *delta)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static size_t</type>
      <name>UpdateRgProd</name>
      <anchorfile>a04324.html</anchorfile>
      <anchor>af75c36a9eb11884e2018e11637542312</anchor>
      <arglist>(const ISAM2::Roots &amp;roots, const KeySet &amp;replacedKeys, const VectorValues &amp;gradAtZero, VectorValues *RgProd)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static VectorValues</type>
      <name>ComputeGradientSearch</name>
      <anchorfile>a04324.html</anchorfile>
      <anchor>a38e7941ab82bcdbe8f7cff431ae41b73</anchor>
      <arglist>(const VectorValues &amp;gradAtZero, const VectorValues &amp;RgProd)</arglist>
    </member>
    <class kind="struct">gtsam::DeltaImpl::PartialSolveResult</class>
    <class kind="struct">gtsam::DeltaImpl::ReorderingMode</class>
  </compound>
  <compound kind="class">
    <name>gtsam::DerivativeFactor</name>
    <filename>a02864.html</filename>
    <templarg>class BASIS</templarg>
    <base>FunctorizedFactor&lt; double, BASIS::Parameters &gt;</base>
    <member kind="function">
      <type></type>
      <name>DerivativeFactor</name>
      <anchorfile>a02864.html</anchorfile>
      <anchor>a22a6450e16d12137e40345cfe48c0838</anchor>
      <arglist>(Key key, const double &amp;z, const SharedNoiseModel &amp;model, const size_t N, double x)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DerivativeFactor</name>
      <anchorfile>a02864.html</anchorfile>
      <anchor>a04f9e06201f5c76ccaaa7dc23fc603a1</anchor>
      <arglist>(Key key, const double &amp;z, const SharedNoiseModel &amp;model, const size_t N, double x, double a, double b)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::Basis::DerivativeFunctor</name>
    <filename>a02836.html</filename>
    <base protection="protected">gtsam::Basis::DerivativeFunctorBase</base>
    <member kind="function">
      <type></type>
      <name>DerivativeFunctor</name>
      <anchorfile>a02836.html</anchorfile>
      <anchor>a9d9eb84b2ffa24dd2decd6dbd9579485</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>operator()</name>
      <anchorfile>a02836.html</anchorfile>
      <anchor>ac3be9428d30093caec99275f194e6433</anchor>
      <arglist>(const typename DERIVED::Parameters &amp;p, OptionalJacobian&lt; -1, -1 &gt; H=boost::none) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::Basis::DerivativeFunctorBase</name>
    <filename>a02832.html</filename>
    <member kind="function">
      <type></type>
      <name>DerivativeFunctorBase</name>
      <anchorfile>a02832.html</anchorfile>
      <anchor>a266e4f6a20307b0001f8adbf047cb9c0</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>gtsam::ISAM2Result::DetailedResults</name>
    <filename>a04368.html</filename>
    <member kind="variable">
      <type>StatusMap</type>
      <name>variableStatus</name>
      <anchorfile>a04368.html</anchorfile>
      <anchor>aa95ea9ffc9e1c58ae54bccea5e5e1c5a</anchor>
      <arglist></arglist>
    </member>
    <class kind="struct">gtsam::ISAM2Result::DetailedResults::VariableStatus</class>
  </compound>
  <compound kind="class">
    <name>gtsam::so3::DexpFunctor</name>
    <filename>a03376.html</filename>
    <base>gtsam::so3::ExpmapFunctor</base>
    <member kind="function">
      <type>GTSAM_EXPORT</type>
      <name>DexpFunctor</name>
      <anchorfile>a03376.html</anchorfile>
      <anchor>a29b8e81214974c238ab4b3be679c68bb</anchor>
      <arglist>(const Vector3 &amp;omega, bool nearZeroApprox=false)</arglist>
    </member>
    <member kind="function">
      <type>GTSAM_EXPORT Vector3</type>
      <name>applyDexp</name>
      <anchorfile>a03376.html</anchorfile>
      <anchor>a14afce1d01aa4f28c77317999ed65288</anchor>
      <arglist>(const Vector3 &amp;v, OptionalJacobian&lt; 3, 3 &gt; H1=boost::none, OptionalJacobian&lt; 3, 3 &gt; H2=boost::none) const</arglist>
    </member>
    <member kind="function">
      <type>GTSAM_EXPORT Vector3</type>
      <name>applyInvDexp</name>
      <anchorfile>a03376.html</anchorfile>
      <anchor>aaffb5258e5f92b1131846ea2c2fc3c17</anchor>
      <arglist>(const Vector3 &amp;v, OptionalJacobian&lt; 3, 3 &gt; H1=boost::none, OptionalJacobian&lt; 3, 3 &gt; H2=boost::none) const</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>gtsam::DGroundConstraint</name>
    <filename>a05432.html</filename>
    <base>PartialPriorFactor&lt; PoseRTV &gt;</base>
    <member kind="function">
      <type></type>
      <name>DGroundConstraint</name>
      <anchorfile>a05432.html</anchorfile>
      <anchor>aef6ee79ae04e38c60b1d6aa8381696a5</anchor>
      <arglist>(Key key, double height, const gtsam::SharedNoiseModel &amp;model)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DGroundConstraint</name>
      <anchorfile>a05432.html</anchorfile>
      <anchor>a7126927eeb877863f6da3e3328deca51</anchor>
      <arglist>(Key key, const Vector &amp;constraint, const gtsam::SharedNoiseModel &amp;model)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>gtsam::DHeightPrior</name>
    <filename>a05420.html</filename>
    <base>PartialPriorFactor&lt; PoseRTV &gt;</base>
  </compound>
  <compound kind="class">
    <name>gtsam::noiseModel::Diagonal</name>
    <filename>a03880.html</filename>
    <base>gtsam::noiseModel::Gaussian</base>
    <member kind="function">
      <type></type>
      <name>Diagonal</name>
      <anchorfile>a03880.html</anchorfile>
      <anchor>a52cdcdf2e0e6cda03100ba9d25605538</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Vector</type>
      <name>sigmas</name>
      <anchorfile>a03880.html</anchorfile>
      <anchor>a66a17d686b89fec5a1622a77465fe526</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>Vector</type>
      <name>whiten</name>
      <anchorfile>a03880.html</anchorfile>
      <anchor>ae69496b16ca1790a84605ccb83a01c97</anchor>
      <arglist>(const Vector &amp;v) const override</arglist>
    </member>
    <member kind="function">
      <type>Vector</type>
      <name>unwhiten</name>
      <anchorfile>a03880.html</anchorfile>
      <anchor>a8e5c2451a7d9ce535d747f2c5d0fd365</anchor>
      <arglist>(const Vector &amp;v) const override</arglist>
    </member>
    <member kind="function">
      <type>Matrix</type>
      <name>Whiten</name>
      <anchorfile>a03880.html</anchorfile>
      <anchor>a1ce1668cacf00f9aee453b1b3799df08</anchor>
      <arglist>(const Matrix &amp;H) const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>WhitenInPlace</name>
      <anchorfile>a03880.html</anchorfile>
      <anchor>a9ccf76e71e62b9aadff0da814309c172</anchor>
      <arglist>(Matrix &amp;H) const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>WhitenInPlace</name>
      <anchorfile>a03880.html</anchorfile>
      <anchor>a742f347282ac208a1f9c648ee332fff4</anchor>
      <arglist>(Eigen::Block&lt; Matrix &gt; H) const override</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>sigma</name>
      <anchorfile>a03880.html</anchorfile>
      <anchor>a443266e681048b5d25eb386efc145664</anchor>
      <arglist>(size_t i) const</arglist>
    </member>
    <member kind="function">
      <type>const Vector &amp;</type>
      <name>invsigmas</name>
      <anchorfile>a03880.html</anchorfile>
      <anchor>a53b4adbacd6134a45b7e9fe86b4b9aa3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Vector &amp;</type>
      <name>precisions</name>
      <anchorfile>a03880.html</anchorfile>
      <anchor>a75d121c047ebd94dd652af7364a6867f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Matrix</type>
      <name>R</name>
      <anchorfile>a03880.html</anchorfile>
      <anchor>a3e8f4f15a04e7efa68155189c211d188</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static shared_ptr</type>
      <name>Sigmas</name>
      <anchorfile>a03880.html</anchorfile>
      <anchor>a8f00b543a69c756b5277f2e89c701cc5</anchor>
      <arglist>(const Vector &amp;sigmas, bool smart=true)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static shared_ptr</type>
      <name>Variances</name>
      <anchorfile>a03880.html</anchorfile>
      <anchor>a8c23ce6bda772372da8814c0febbb36f</anchor>
      <arglist>(const Vector &amp;variances, bool smart=true)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static shared_ptr</type>
      <name>Precisions</name>
      <anchorfile>a03880.html</anchorfile>
      <anchor>a8d1a161668140ba54e1eb2fe9a7d50e0</anchor>
      <arglist>(const Vector &amp;precisions, bool smart=true)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>Diagonal</name>
      <anchorfile>a03880.html</anchorfile>
      <anchor>aa97d4530104dd414d2372892eb94859d</anchor>
      <arglist>(const Vector &amp;sigmas)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Vector</type>
      <name>sigmas_</name>
      <anchorfile>a03880.html</anchorfile>
      <anchor>a40cec73d5792d6ff6345de2207e571b1</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>boost::serialization::access</name>
      <anchorfile>a03880.html</anchorfile>
      <anchor>ac98d07dd8f7b70e16ccb9a01abf56b9c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::DirectProduct</name>
    <filename>a02516.html</filename>
    <member kind="function">
      <type></type>
      <name>DirectProduct</name>
      <anchorfile>a02516.html</anchorfile>
      <anchor>acfac23871b8e9ba54fdf2990e8fbbbeb</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::DirectSum</name>
    <filename>a02524.html</filename>
    <templarg>typename G</templarg>
    <templarg>typename H</templarg>
    <member kind="function">
      <type></type>
      <name>DirectSum</name>
      <anchorfile>a02524.html</anchorfile>
      <anchor>a920a249b3e2bf675eb9ae96ac25887b5</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::DiscreteBayesNet</name>
    <filename>a02940.html</filename>
    <base>BayesNet&lt; DiscreteConditional &gt;</base>
    <member kind="function">
      <type></type>
      <name>DiscreteBayesNet</name>
      <anchorfile>a02940.html</anchorfile>
      <anchor>a7d2ca3113fe78e4f6788d120b62f9004</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DiscreteBayesNet</name>
      <anchorfile>a02940.html</anchorfile>
      <anchor>a1caa6732f0bf990da980f5154c499755</anchor>
      <arglist>(ITERATOR firstConditional, ITERATOR lastConditional)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DiscreteBayesNet</name>
      <anchorfile>a02940.html</anchorfile>
      <anchor>a73b6d262d031217311515968c7f90f70</anchor>
      <arglist>(const CONTAINER &amp;conditionals)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DiscreteBayesNet</name>
      <anchorfile>a02940.html</anchorfile>
      <anchor>a578876c094461271ac57f31f8f5212c4</anchor>
      <arglist>(const FactorGraph&lt; DERIVEDCONDITIONAL &gt; &amp;graph)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~DiscreteBayesNet</name>
      <anchorfile>a02940.html</anchorfile>
      <anchor>a941beab50bc4b4670e228cc35d9d1fb4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>equals</name>
      <anchorfile>a02940.html</anchorfile>
      <anchor>a1fe79940d5f7754c2156ecbc22a334da</anchor>
      <arglist>(const This &amp;bn, double tol=1e-9) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add</name>
      <anchorfile>a02940.html</anchorfile>
      <anchor>a89bf8255b448563ce57c4f20f01ce92b</anchor>
      <arglist>(const Signature &amp;s)</arglist>
    </member>
    <member kind="function">
      <type>DiscreteFactor::sharedValues</type>
      <name>optimize</name>
      <anchorfile>a02940.html</anchorfile>
      <anchor>ad5f0ef91a7d10bc4892951e8ada9f055</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>DiscreteFactor::sharedValues</type>
      <name>sample</name>
      <anchorfile>a02940.html</anchorfile>
      <anchor>a1d166ba91c49124d1fed93eecd49e459</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DiscreteBayesNet</name>
      <anchorfile>a02940.html</anchorfile>
      <anchor>a7d2ca3113fe78e4f6788d120b62f9004</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DiscreteBayesNet</name>
      <anchorfile>a02940.html</anchorfile>
      <anchor>a1caa6732f0bf990da980f5154c499755</anchor>
      <arglist>(ITERATOR firstConditional, ITERATOR lastConditional)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DiscreteBayesNet</name>
      <anchorfile>a02940.html</anchorfile>
      <anchor>a73b6d262d031217311515968c7f90f70</anchor>
      <arglist>(const CONTAINER &amp;conditionals)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DiscreteBayesNet</name>
      <anchorfile>a02940.html</anchorfile>
      <anchor>a578876c094461271ac57f31f8f5212c4</anchor>
      <arglist>(const FactorGraph&lt; DERIVEDCONDITIONAL &gt; &amp;graph)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~DiscreteBayesNet</name>
      <anchorfile>a02940.html</anchorfile>
      <anchor>a941beab50bc4b4670e228cc35d9d1fb4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>equals</name>
      <anchorfile>a02940.html</anchorfile>
      <anchor>a1fe79940d5f7754c2156ecbc22a334da</anchor>
      <arglist>(const This &amp;bn, double tol=1e-9) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add</name>
      <anchorfile>a02940.html</anchorfile>
      <anchor>a89bf8255b448563ce57c4f20f01ce92b</anchor>
      <arglist>(const Signature &amp;s)</arglist>
    </member>
    <member kind="function">
      <type>DiscreteFactor::sharedValues</type>
      <name>optimize</name>
      <anchorfile>a02940.html</anchorfile>
      <anchor>ad5f0ef91a7d10bc4892951e8ada9f055</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>DiscreteFactor::sharedValues</type>
      <name>sample</name>
      <anchorfile>a02940.html</anchorfile>
      <anchor>a1d166ba91c49124d1fed93eecd49e459</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>boost::serialization::access</name>
      <anchorfile>a02940.html</anchorfile>
      <anchor>ac98d07dd8f7b70e16ccb9a01abf56b9c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::DiscreteBayesTree</name>
    <filename>a02952.html</filename>
    <base>BayesTree&lt; DiscreteBayesTreeClique &gt;</base>
    <member kind="function">
      <type></type>
      <name>DiscreteBayesTree</name>
      <anchorfile>a02952.html</anchorfile>
      <anchor>a9ed89e4e8ddbb56919ab48642a1032c4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>equals</name>
      <anchorfile>a02952.html</anchorfile>
      <anchor>a336377e75d02f87e90cd0b6bc9cd0598</anchor>
      <arglist>(const This &amp;other, double tol=1e-9) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::DiscreteBayesTreeClique</name>
    <filename>a02948.html</filename>
    <base>BayesTreeCliqueBase&lt; DiscreteBayesTreeClique, DiscreteFactorGraph &gt;</base>
    <member kind="function">
      <type>void</type>
      <name>printSignature</name>
      <anchorfile>a02948.html</anchorfile>
      <anchor>a8ca6ff30a4175181ddd476e3d4d84c55</anchor>
      <arglist>(const std::string &amp;s=&quot;Clique: &quot;, const KeyFormatter &amp;formatter=DefaultKeyFormatter) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::DiscreteConditional</name>
    <filename>a02956.html</filename>
    <base>gtsam::DecisionTreeFactor</base>
    <base>Conditional&lt; DecisionTreeFactor, DiscreteConditional &gt;</base>
    <member kind="function">
      <type></type>
      <name>DiscreteConditional</name>
      <anchorfile>a02956.html</anchorfile>
      <anchor>abde5b7e78cd17f518afb2e8048e6748d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DiscreteConditional</name>
      <anchorfile>a02956.html</anchorfile>
      <anchor>a1364e251e09ee03e49bbb21520748bbd</anchor>
      <arglist>(size_t nFrontals, const DecisionTreeFactor &amp;f)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DiscreteConditional</name>
      <anchorfile>a02956.html</anchorfile>
      <anchor>a4213103c28d8fe4b6e9f6ee28672b192</anchor>
      <arglist>(const Signature &amp;signature)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DiscreteConditional</name>
      <anchorfile>a02956.html</anchorfile>
      <anchor>ab1bdb57afa98f368e4c228a360b0ba15</anchor>
      <arglist>(const DecisionTreeFactor &amp;joint, const DecisionTreeFactor &amp;marginal)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DiscreteConditional</name>
      <anchorfile>a02956.html</anchorfile>
      <anchor>ac18ed1a2d5c0a781729c3b68b24dc424</anchor>
      <arglist>(const DecisionTreeFactor &amp;joint, const DecisionTreeFactor &amp;marginal, const Ordering &amp;orderedKeys)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static shared_ptr</type>
      <name>Combine</name>
      <anchorfile>a02956.html</anchorfile>
      <anchor>adbf49f45d8ff0282e0789d852de7fa60</anchor>
      <arglist>(ITERATOR firstConditional, ITERATOR lastConditional)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>a02956.html</anchorfile>
      <anchor>a79d711fbac861a0d701a8678689477bd</anchor>
      <arglist>(const std::string &amp;s=&quot;Discrete Conditional: &quot;, const KeyFormatter &amp;formatter=DefaultKeyFormatter) const override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>equals</name>
      <anchorfile>a02956.html</anchorfile>
      <anchor>a695f7da7b3c741b74a682796d049d6fc</anchor>
      <arglist>(const DiscreteFactor &amp;other, double tol=1e-9) const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>printSignature</name>
      <anchorfile>a02956.html</anchorfile>
      <anchor>af92db4c13444cf5454945d36c84a193e</anchor>
      <arglist>(const std::string &amp;s=&quot;Discrete Conditional: &quot;, const KeyFormatter &amp;formatter=DefaultKeyFormatter) const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>operator()</name>
      <anchorfile>a02956.html</anchorfile>
      <anchor>a17d1515f854a97585a1a07e01db0e261</anchor>
      <arglist>(const Values &amp;values) const override</arglist>
    </member>
    <member kind="function">
      <type>DecisionTreeFactor::shared_ptr</type>
      <name>toFactor</name>
      <anchorfile>a02956.html</anchorfile>
      <anchor>a5741fa0c6e0f72274af647cefb927f17</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>ADT</type>
      <name>choose</name>
      <anchorfile>a02956.html</anchorfile>
      <anchor>a3a25fd28e04bc3228930632b16197c54</anchor>
      <arglist>(const Assignment&lt; Key &gt; &amp;parentsValues) const</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>solve</name>
      <anchorfile>a02956.html</anchorfile>
      <anchor>ab1d7f638d7fb4ab304a89f0ff2206a0a</anchor>
      <arglist>(const Values &amp;parentsValues) const</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>sample</name>
      <anchorfile>a02956.html</anchorfile>
      <anchor>ade52bb95bf7cf35545b9c1415b23cfc2</anchor>
      <arglist>(const Values &amp;parentsValues) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>solveInPlace</name>
      <anchorfile>a02956.html</anchorfile>
      <anchor>a6bc7db598652ae6603c19d6321879bcc</anchor>
      <arglist>(Values &amp;parentsValues) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>sampleInPlace</name>
      <anchorfile>a02956.html</anchorfile>
      <anchor>afb97d66da1f11eea5826c4999b0beb87</anchor>
      <arglist>(Values &amp;parentsValues) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>a02956.html</anchorfile>
      <anchor>a79d711fbac861a0d701a8678689477bd</anchor>
      <arglist>(const std::string &amp;s=&quot;Discrete Conditional: &quot;, const KeyFormatter &amp;formatter=DefaultKeyFormatter) const override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>equals</name>
      <anchorfile>a02956.html</anchorfile>
      <anchor>a695f7da7b3c741b74a682796d049d6fc</anchor>
      <arglist>(const DiscreteFactor &amp;other, double tol=1e-9) const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>printSignature</name>
      <anchorfile>a02956.html</anchorfile>
      <anchor>af92db4c13444cf5454945d36c84a193e</anchor>
      <arglist>(const std::string &amp;s=&quot;Discrete Conditional: &quot;, const KeyFormatter &amp;formatter=DefaultKeyFormatter) const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>operator()</name>
      <anchorfile>a02956.html</anchorfile>
      <anchor>a17d1515f854a97585a1a07e01db0e261</anchor>
      <arglist>(const Values &amp;values) const override</arglist>
    </member>
    <member kind="function">
      <type>DecisionTreeFactor::shared_ptr</type>
      <name>toFactor</name>
      <anchorfile>a02956.html</anchorfile>
      <anchor>a5741fa0c6e0f72274af647cefb927f17</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>ADT</type>
      <name>choose</name>
      <anchorfile>a02956.html</anchorfile>
      <anchor>a3a25fd28e04bc3228930632b16197c54</anchor>
      <arglist>(const Assignment&lt; Key &gt; &amp;parentsValues) const</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>solve</name>
      <anchorfile>a02956.html</anchorfile>
      <anchor>ab1d7f638d7fb4ab304a89f0ff2206a0a</anchor>
      <arglist>(const Values &amp;parentsValues) const</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>sample</name>
      <anchorfile>a02956.html</anchorfile>
      <anchor>ade52bb95bf7cf35545b9c1415b23cfc2</anchor>
      <arglist>(const Values &amp;parentsValues) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>solveInPlace</name>
      <anchorfile>a02956.html</anchorfile>
      <anchor>a6bc7db598652ae6603c19d6321879bcc</anchor>
      <arglist>(Values &amp;parentsValues) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>sampleInPlace</name>
      <anchorfile>a02956.html</anchorfile>
      <anchor>afb97d66da1f11eea5826c4999b0beb87</anchor>
      <arglist>(Values &amp;parentsValues) const</arglist>
    </member>
    <member kind="typedef">
      <type>DiscreteConditional</type>
      <name>This</name>
      <anchorfile>a02956.html</anchorfile>
      <anchor>a87b5d53bfcabc8afdacbee26d4ef9916</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; This &gt;</type>
      <name>shared_ptr</name>
      <anchorfile>a02956.html</anchorfile>
      <anchor>a4d8b3999aa607019946cbcfd255c09dd</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>DecisionTreeFactor</type>
      <name>BaseFactor</name>
      <anchorfile>a02956.html</anchorfile>
      <anchor>a9ab81fc33a84e5f1d886f771e8492967</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Conditional&lt; BaseFactor, This &gt;</type>
      <name>BaseConditional</name>
      <anchorfile>a02956.html</anchorfile>
      <anchor>a7a8d450dab8cd70ce0e971fa92bc5982</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Assignment&lt; Key &gt;</type>
      <name>Values</name>
      <anchorfile>a02956.html</anchorfile>
      <anchor>a67b09fbd04b575685982021eab1e8544</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::DiscreteEliminationTree</name>
    <filename>a02964.html</filename>
    <base>EliminationTree&lt; DiscreteBayesNet, DiscreteFactorGraph &gt;</base>
    <member kind="function">
      <type></type>
      <name>DiscreteEliminationTree</name>
      <anchorfile>a02964.html</anchorfile>
      <anchor>a782fad055747d26fb8e876e3cf51bd6f</anchor>
      <arglist>(const DiscreteFactorGraph &amp;factorGraph, const VariableIndex &amp;structure, const Ordering &amp;order)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DiscreteEliminationTree</name>
      <anchorfile>a02964.html</anchorfile>
      <anchor>a615df00f083b043dbc3734f68bad05fc</anchor>
      <arglist>(const DiscreteFactorGraph &amp;factorGraph, const Ordering &amp;order)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>equals</name>
      <anchorfile>a02964.html</anchorfile>
      <anchor>a708057192d2685853f97fcd30c834cfc</anchor>
      <arglist>(const This &amp;other, double tol=1e-9) const</arglist>
    </member>
    <member kind="typedef">
      <type>EliminationTree&lt; DiscreteBayesNet, DiscreteFactorGraph &gt;</type>
      <name>Base</name>
      <anchorfile>a02964.html</anchorfile>
      <anchor>ae4e6afc353582183f3c881a3acad57ca</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>DiscreteEliminationTree</type>
      <name>This</name>
      <anchorfile>a02964.html</anchorfile>
      <anchor>a2b315837d2af900fce3ee59ef54a426f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; This &gt;</type>
      <name>shared_ptr</name>
      <anchorfile>a02964.html</anchorfile>
      <anchor>a850bd2d0f3c1a7b51aebd75582d86b43</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::DiscreteEulerPoincareHelicopter</name>
    <filename>a05476.html</filename>
    <base>NoiseModelFactor3&lt; Vector6, Vector6, Pose3 &gt;</base>
    <member kind="function">
      <type>return a deep copy of this factor gtsam::NonlinearFactor::shared_ptr</type>
      <name>clone</name>
      <anchorfile>a05476.html</anchorfile>
      <anchor>a62793a5aadd502174328556b8597e826</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>Vector</type>
      <name>evaluateError</name>
      <anchorfile>a05476.html</anchorfile>
      <anchor>abe11f62a13e159bbd7016c0c01e4d65b</anchor>
      <arglist>(const Vector6 &amp;xik, const Vector6 &amp;xik_1, const Pose3 &amp;gk, boost::optional&lt; Matrix &amp; &gt; H1=boost::none, boost::optional&lt; Matrix &amp; &gt; H2=boost::none, boost::optional&lt; Matrix &amp; &gt; H3=boost::none) const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::DiscreteFactor</name>
    <filename>a02968.html</filename>
    <base>gtsam::Factor</base>
    <member kind="function">
      <type></type>
      <name>DiscreteFactor</name>
      <anchorfile>a02968.html</anchorfile>
      <anchor>afadb0ff9285b8ef4c5efe5fb98167a60</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DiscreteFactor</name>
      <anchorfile>a02968.html</anchorfile>
      <anchor>af9f2d0ba3efda1bb35a2279c53c26b38</anchor>
      <arglist>(const CONTAINER &amp;keys)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~DiscreteFactor</name>
      <anchorfile>a02968.html</anchorfile>
      <anchor>aa6b82f4425946dfe76026c6f52f48e6a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>equals</name>
      <anchorfile>a02968.html</anchorfile>
      <anchor>abd2250f2c4400283923ae23ab55d2ccf</anchor>
      <arglist>(const DiscreteFactor &amp;lf, double tol=1e-9) const =0</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>a02968.html</anchorfile>
      <anchor>a27395d7758a77c76d21c57472f514c93</anchor>
      <arglist>(const std::string &amp;s=&quot;DiscreteFactor\n&quot;, const KeyFormatter &amp;formatter=DefaultKeyFormatter) const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>empty</name>
      <anchorfile>a02968.html</anchorfile>
      <anchor>a07cd4f1a7394246e28438400776c8f2a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual double</type>
      <name>operator()</name>
      <anchorfile>a02968.html</anchorfile>
      <anchor>a3d747207911fdd7827850f0948bab5b5</anchor>
      <arglist>(const Values &amp;) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual DecisionTreeFactor</type>
      <name>operator*</name>
      <anchorfile>a02968.html</anchorfile>
      <anchor>add2eb0736954ecccfeaa9fddb3a98da9</anchor>
      <arglist>(const DecisionTreeFactor &amp;) const =0</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DiscreteFactor</name>
      <anchorfile>a02968.html</anchorfile>
      <anchor>afadb0ff9285b8ef4c5efe5fb98167a60</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DiscreteFactor</name>
      <anchorfile>a02968.html</anchorfile>
      <anchor>af9f2d0ba3efda1bb35a2279c53c26b38</anchor>
      <arglist>(const CONTAINER &amp;keys)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~DiscreteFactor</name>
      <anchorfile>a02968.html</anchorfile>
      <anchor>aa6b82f4425946dfe76026c6f52f48e6a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>equals</name>
      <anchorfile>a02968.html</anchorfile>
      <anchor>abd2250f2c4400283923ae23ab55d2ccf</anchor>
      <arglist>(const DiscreteFactor &amp;lf, double tol=1e-9) const =0</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>a02968.html</anchorfile>
      <anchor>a27395d7758a77c76d21c57472f514c93</anchor>
      <arglist>(const std::string &amp;s=&quot;DiscreteFactor\n&quot;, const KeyFormatter &amp;formatter=DefaultKeyFormatter) const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>empty</name>
      <anchorfile>a02968.html</anchorfile>
      <anchor>a07cd4f1a7394246e28438400776c8f2a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual double</type>
      <name>operator()</name>
      <anchorfile>a02968.html</anchorfile>
      <anchor>a3d747207911fdd7827850f0948bab5b5</anchor>
      <arglist>(const Values &amp;) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual DecisionTreeFactor</type>
      <name>operator*</name>
      <anchorfile>a02968.html</anchorfile>
      <anchor>add2eb0736954ecccfeaa9fddb3a98da9</anchor>
      <arglist>(const DecisionTreeFactor &amp;) const =0</arglist>
    </member>
    <member kind="typedef">
      <type>DiscreteFactor</type>
      <name>This</name>
      <anchorfile>a02968.html</anchorfile>
      <anchor>ac3ef2648a55e80cefac3ce07b99a4236</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; DiscreteFactor &gt;</type>
      <name>shared_ptr</name>
      <anchorfile>a02968.html</anchorfile>
      <anchor>a7d274a86bec4b9e5339b465bf82b2c80</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Factor</type>
      <name>Base</name>
      <anchorfile>a02968.html</anchorfile>
      <anchor>a1fe887e0f0c0a7506db99e662f91aa29</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Assignment&lt; Key &gt;</type>
      <name>Values</name>
      <anchorfile>a02968.html</anchorfile>
      <anchor>abc27a873650f7676a28d2c82960b279e</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::DiscreteFactorGraph</name>
    <filename>a02984.html</filename>
    <base>FactorGraph&lt; DiscreteFactor &gt;</base>
    <base>EliminateableFactorGraph&lt; DiscreteFactorGraph &gt;</base>
    <member kind="function">
      <type></type>
      <name>DiscreteFactorGraph</name>
      <anchorfile>a02984.html</anchorfile>
      <anchor>a9c6155d411d5e8f4169ac14982175908</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DiscreteFactorGraph</name>
      <anchorfile>a02984.html</anchorfile>
      <anchor>ab200e82a32be55ee64c8e0450e289daa</anchor>
      <arglist>(ITERATOR firstFactor, ITERATOR lastFactor)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DiscreteFactorGraph</name>
      <anchorfile>a02984.html</anchorfile>
      <anchor>a1cc891cc009075ea80f8d114f5ce7941</anchor>
      <arglist>(const CONTAINER &amp;factors)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DiscreteFactorGraph</name>
      <anchorfile>a02984.html</anchorfile>
      <anchor>ab1687dd520685928c9effcaea5473416</anchor>
      <arglist>(const FactorGraph&lt; DERIVEDFACTOR &gt; &amp;graph)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~DiscreteFactorGraph</name>
      <anchorfile>a02984.html</anchorfile>
      <anchor>abb9a840e604046c811c991340006e976</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add</name>
      <anchorfile>a02984.html</anchorfile>
      <anchor>a87ce384440c43993e8f98d9fd409c001</anchor>
      <arglist>(const DiscreteKeys &amp;keys, SOURCE table)</arglist>
    </member>
    <member kind="function">
      <type>KeySet</type>
      <name>keys</name>
      <anchorfile>a02984.html</anchorfile>
      <anchor>abc343953dd57e2f19a4778f34d63dfc2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>DecisionTreeFactor</type>
      <name>product</name>
      <anchorfile>a02984.html</anchorfile>
      <anchor>ac4424bd9e7e9decc7d140610f0c515f8</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>operator()</name>
      <anchorfile>a02984.html</anchorfile>
      <anchor>ac2d1ef20ecbb34888bbbfd72d42a5b71</anchor>
      <arglist>(const DiscreteFactor::Values &amp;values) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>a02984.html</anchorfile>
      <anchor>ab247469e086e1f78c2b99d0ba8f4f236</anchor>
      <arglist>(const std::string &amp;s=&quot;DiscreteFactorGraph&quot;, const KeyFormatter &amp;formatter=DefaultKeyFormatter) const override</arglist>
    </member>
    <member kind="function">
      <type>DiscreteFactor::sharedValues</type>
      <name>optimize</name>
      <anchorfile>a02984.html</anchorfile>
      <anchor>a575e68409fd079ab7c72974aae067871</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="typedef">
      <type>DiscreteFactorGraph</type>
      <name>This</name>
      <anchorfile>a02984.html</anchorfile>
      <anchor>a50796434e042f15199bdb6695530189a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>FactorGraph&lt; DiscreteFactor &gt;</type>
      <name>Base</name>
      <anchorfile>a02984.html</anchorfile>
      <anchor>a8014b64b6ca21e950abfd4666ff81ed0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>EliminateableFactorGraph&lt; This &gt;</type>
      <name>BaseEliminateable</name>
      <anchorfile>a02984.html</anchorfile>
      <anchor>aa8426d72a4ee49cdea4c01dd04bfb412</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; This &gt;</type>
      <name>shared_ptr</name>
      <anchorfile>a02984.html</anchorfile>
      <anchor>a4a38a0fa8aea06ee7fa1d9dceab25387</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>KeyVector</type>
      <name>Indices</name>
      <anchorfile>a02984.html</anchorfile>
      <anchor>a2e98a123ffbf71a3ad7d5070c458e227</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::DiscreteJunctionTree</name>
    <filename>a02992.html</filename>
    <base>JunctionTree&lt; DiscreteBayesTree, DiscreteFactorGraph &gt;</base>
    <member kind="function">
      <type></type>
      <name>DiscreteJunctionTree</name>
      <anchorfile>a02992.html</anchorfile>
      <anchor>a4555ca722f81654a9aeb9983913dd6fc</anchor>
      <arglist>(const DiscreteEliminationTree &amp;eliminationTree)</arglist>
    </member>
    <member kind="typedef">
      <type>JunctionTree&lt; DiscreteBayesTree, DiscreteFactorGraph &gt;</type>
      <name>Base</name>
      <anchorfile>a02992.html</anchorfile>
      <anchor>a187d382e5e43fcc23e55bbbcf8cdb75c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>DiscreteJunctionTree</type>
      <name>This</name>
      <anchorfile>a02992.html</anchorfile>
      <anchor>ad6782b47cf2c877b9073da597c774d96</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; This &gt;</type>
      <name>shared_ptr</name>
      <anchorfile>a02992.html</anchorfile>
      <anchor>a67b80ddc56d75698e966b76590ab6cf0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>gtsam::DiscreteKeys</name>
    <filename>a02996.html</filename>
    <member kind="function">
      <type></type>
      <name>DiscreteKeys</name>
      <anchorfile>a02996.html</anchorfile>
      <anchor>ac710ec1e97bfeaed0c3f88694f1c9cdf</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DiscreteKeys</name>
      <anchorfile>a02996.html</anchorfile>
      <anchor>aeae84568ba908e2ea4fc5e876c08ce3f</anchor>
      <arglist>(const DiscreteKey &amp;key)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DiscreteKeys</name>
      <anchorfile>a02996.html</anchorfile>
      <anchor>af2a1fa833d44e52655656826b2a18d19</anchor>
      <arglist>(const std::vector&lt; DiscreteKey &gt; &amp;keys)</arglist>
    </member>
    <member kind="function">
      <type>GTSAM_EXPORT</type>
      <name>DiscreteKeys</name>
      <anchorfile>a02996.html</anchorfile>
      <anchor>adc6ee484dc8782489ecd65970ac29901</anchor>
      <arglist>(const std::vector&lt; int &gt; &amp;cs)</arglist>
    </member>
    <member kind="function">
      <type>GTSAM_EXPORT KeyVector</type>
      <name>indices</name>
      <anchorfile>a02996.html</anchorfile>
      <anchor>a84cdd881990fa290590eb32544f18723</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>GTSAM_EXPORT std::map&lt; Key, size_t &gt;</type>
      <name>cardinalities</name>
      <anchorfile>a02996.html</anchorfile>
      <anchor>a8ed9d6273b632b2e80f24d82eae90135</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>DiscreteKeys &amp;</type>
      <name>operator&amp;</name>
      <anchorfile>a02996.html</anchorfile>
      <anchor>a33f3cebb905515642444f7c41e943950</anchor>
      <arglist>(const DiscreteKey &amp;key)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::DiscreteMarginals</name>
    <filename>a03000.html</filename>
    <member kind="function">
      <type></type>
      <name>DiscreteMarginals</name>
      <anchorfile>a03000.html</anchorfile>
      <anchor>a989e365c2191c5db801307e50778a706</anchor>
      <arglist>(const DiscreteFactorGraph &amp;graph)</arglist>
    </member>
    <member kind="function">
      <type>DiscreteFactor::shared_ptr</type>
      <name>operator()</name>
      <anchorfile>a03000.html</anchorfile>
      <anchor>ab7e034af37152b81e3bc9e461d6c8271</anchor>
      <arglist>(Key variable) const</arglist>
    </member>
    <member kind="function">
      <type>Vector</type>
      <name>marginalProbabilities</name>
      <anchorfile>a03000.html</anchorfile>
      <anchor>a467d0ef89ee86bafe691130be9a2b4ac</anchor>
      <arglist>(const DiscreteKey &amp;key) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::DoglegOptimizer</name>
    <filename>a04208.html</filename>
    <base>gtsam::NonlinearOptimizer</base>
    <member kind="function">
      <type></type>
      <name>DoglegOptimizer</name>
      <anchorfile>a04208.html</anchorfile>
      <anchor>a803a7052a5817fde973bfe18578aee78</anchor>
      <arglist>(const NonlinearFactorGraph &amp;graph, const Values &amp;initialValues, const DoglegParams &amp;params=DoglegParams())</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DoglegOptimizer</name>
      <anchorfile>a04208.html</anchorfile>
      <anchor>a1419fd81113aa260374a94a49fe882fe</anchor>
      <arglist>(const NonlinearFactorGraph &amp;graph, const Values &amp;initialValues, const Ordering &amp;ordering)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~DoglegOptimizer</name>
      <anchorfile>a04208.html</anchorfile>
      <anchor>a332eef22765a857beb71d66946dd86c8</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>GaussianFactorGraph::shared_ptr</type>
      <name>iterate</name>
      <anchorfile>a04208.html</anchorfile>
      <anchor>acd3e7c0d62e269ea01eab3f78d952097</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>const DoglegParams &amp;</type>
      <name>params</name>
      <anchorfile>a04208.html</anchorfile>
      <anchor>ae648869d633326339be7d5d743e97a53</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getDelta</name>
      <anchorfile>a04208.html</anchorfile>
      <anchor>abb1a3d00708a7e24cb89cdd5e939ff92</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DoglegOptimizer</name>
      <anchorfile>a04208.html</anchorfile>
      <anchor>a803a7052a5817fde973bfe18578aee78</anchor>
      <arglist>(const NonlinearFactorGraph &amp;graph, const Values &amp;initialValues, const DoglegParams &amp;params=DoglegParams())</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DoglegOptimizer</name>
      <anchorfile>a04208.html</anchorfile>
      <anchor>a1419fd81113aa260374a94a49fe882fe</anchor>
      <arglist>(const NonlinearFactorGraph &amp;graph, const Values &amp;initialValues, const Ordering &amp;ordering)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~DoglegOptimizer</name>
      <anchorfile>a04208.html</anchorfile>
      <anchor>a332eef22765a857beb71d66946dd86c8</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>GaussianFactorGraph::shared_ptr</type>
      <name>iterate</name>
      <anchorfile>a04208.html</anchorfile>
      <anchor>acd3e7c0d62e269ea01eab3f78d952097</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>const DoglegParams &amp;</type>
      <name>params</name>
      <anchorfile>a04208.html</anchorfile>
      <anchor>ae648869d633326339be7d5d743e97a53</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getDelta</name>
      <anchorfile>a04208.html</anchorfile>
      <anchor>abb1a3d00708a7e24cb89cdd5e939ff92</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>const NonlinearOptimizerParams &amp;</type>
      <name>_params</name>
      <anchorfile>a04208.html</anchorfile>
      <anchor>adaa54f8214eb546568d4d61982251152</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>DoglegParams</type>
      <name>ensureHasOrdering</name>
      <anchorfile>a04208.html</anchorfile>
      <anchor>a900052675c543781cc31d263421d412a</anchor>
      <arglist>(DoglegParams params, const NonlinearFactorGraph &amp;graph) const</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>gtsam::DoglegOptimizerImpl</name>
    <filename>a04212.html</filename>
    <member kind="function" static="yes">
      <type>static IterationResult</type>
      <name>Iterate</name>
      <anchorfile>a04212.html</anchorfile>
      <anchor>a6ad13f5fb8bb2f7e19a75ff19433ffa6</anchor>
      <arglist>(double delta, TrustRegionAdaptationMode mode, const VectorValues &amp;dx_u, const VectorValues &amp;dx_n, const M &amp;Rd, const F &amp;f, const VALUES &amp;x0, const double f_error, const bool verbose=false)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static VectorValues</type>
      <name>ComputeDoglegPoint</name>
      <anchorfile>a04212.html</anchorfile>
      <anchor>aac5b7fb1a7ecb259c5ea426f9cf600bd</anchor>
      <arglist>(double delta, const VectorValues &amp;dx_u, const VectorValues &amp;dx_n, const bool verbose=false)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static VectorValues</type>
      <name>ComputeBlend</name>
      <anchorfile>a04212.html</anchorfile>
      <anchor>ada99b21591a3877bff029f87e61f53c6</anchor>
      <arglist>(double delta, const VectorValues &amp;x_u, const VectorValues &amp;x_n, const bool verbose=false)</arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>TrustRegionAdaptationMode</name>
      <anchorfile>a04212.html</anchorfile>
      <anchor>a52e03ca11a892d070c911db43f22cf04</anchor>
      <arglist></arglist>
    </member>
    <class kind="struct">gtsam::DoglegOptimizerImpl::IterationResult</class>
  </compound>
  <compound kind="class">
    <name>gtsam::DoglegParams</name>
    <filename>a04204.html</filename>
    <base>gtsam::NonlinearOptimizerParams</base>
    <member kind="variable">
      <type>double</type>
      <name>deltaInitial</name>
      <anchorfile>a04204.html</anchorfile>
      <anchor>afc7c92d489fcbea53a1b645185e43e53</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>VerbosityDL</type>
      <name>verbosityDL</name>
      <anchorfile>a04204.html</anchorfile>
      <anchor>ae6a2936aed619333036329c343281356</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>VerbosityDL</name>
      <anchorfile>a04204.html</anchorfile>
      <anchor>a857a8ae8ed6eea7960231b3359dfa349</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::Domain</name>
    <filename>a05016.html</filename>
    <base>gtsam::Constraint</base>
    <member kind="function">
      <type></type>
      <name>Domain</name>
      <anchorfile>a05016.html</anchorfile>
      <anchor>a3bbec44f10f7c4e2326ae62cc034283b</anchor>
      <arglist>(const Domain &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>insert</name>
      <anchorfile>a05016.html</anchorfile>
      <anchor>ad24dc04a3a52863f6f1a6a4ca610b6f9</anchor>
      <arglist>(size_t value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>erase</name>
      <anchorfile>a05016.html</anchorfile>
      <anchor>a2d5beda5676a34c8634d95413f365e14</anchor>
      <arglist>(size_t value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>a05016.html</anchorfile>
      <anchor>a9c0664b31e40349e67df1bac838b377c</anchor>
      <arglist>(const std::string &amp;s=&quot;&quot;, const KeyFormatter &amp;formatter=DefaultKeyFormatter) const override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>equals</name>
      <anchorfile>a05016.html</anchorfile>
      <anchor>a36d1366f60db9bab94e62ed3d03ca3c9</anchor>
      <arglist>(const DiscreteFactor &amp;other, double tol) const override</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>operator()</name>
      <anchorfile>a05016.html</anchorfile>
      <anchor>a23682992e67f5be15ca15c4d8ebf3e6c</anchor>
      <arglist>(const Values &amp;values) const override</arglist>
    </member>
    <member kind="function">
      <type>DecisionTreeFactor</type>
      <name>toDecisionTreeFactor</name>
      <anchorfile>a05016.html</anchorfile>
      <anchor>af98e8feff5422aa3f4602937a551c4f0</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>DecisionTreeFactor</type>
      <name>operator*</name>
      <anchorfile>a05016.html</anchorfile>
      <anchor>af5daa29425e0f5ad21ddd99def9d4a31</anchor>
      <arglist>(const DecisionTreeFactor &amp;f) const override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>checkAllDiff</name>
      <anchorfile>a05016.html</anchorfile>
      <anchor>a8cefd3fd9d3414abdf380c1e041e0288</anchor>
      <arglist>(const KeyVector keys, std::vector&lt; Domain &gt; &amp;domains)</arglist>
    </member>
    <member kind="function">
      <type>Constraint::shared_ptr</type>
      <name>partiallyApply</name>
      <anchorfile>a05016.html</anchorfile>
      <anchor>a9feb3c9f71e2398bab514c6448882f66</anchor>
      <arglist>(const Values &amp;values) const override</arglist>
    </member>
    <member kind="function">
      <type>Constraint::shared_ptr</type>
      <name>partiallyApply</name>
      <anchorfile>a05016.html</anchorfile>
      <anchor>a2691fb706390acaba9e3d0acec283e3a</anchor>
      <arglist>(const std::vector&lt; Domain &gt; &amp;domains) const override</arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; Domain &gt;</type>
      <name>shared_ptr</name>
      <anchorfile>a05016.html</anchorfile>
      <anchor>a9bc36f50dc751e9d0e1a237e058cfb0b</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>gtsam::DRollPrior</name>
    <filename>a05424.html</filename>
    <base>PartialPriorFactor&lt; PoseRTV &gt;</base>
    <member kind="function">
      <type></type>
      <name>DRollPrior</name>
      <anchorfile>a05424.html</anchorfile>
      <anchor>a7f497911e308950bd88caabc5d6a57b5</anchor>
      <arglist>(Key key, double wx, const gtsam::SharedNoiseModel &amp;model)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DRollPrior</name>
      <anchorfile>a05424.html</anchorfile>
      <anchor>a729602f1e3127f066c9733e6c6bb4bc8</anchor>
      <arglist>(Key key, const gtsam::SharedNoiseModel &amp;model)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::DSF</name>
    <filename>a04988.html</filename>
    <templarg>class KEY</templarg>
    <base protection="protected">BTree&lt; KEY, KEY &gt;</base>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>a04988.html</anchorfile>
      <anchor>abd79fad6174732c9d980176877484dc9</anchor>
      <arglist>(const Self &amp;t) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>a04988.html</anchorfile>
      <anchor>a304af43b6b3fb46c82ae3a5a2b9efcf7</anchor>
      <arglist>(const Self &amp;t) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>KEY</type>
      <name>findSet_</name>
      <anchorfile>a04988.html</anchorfile>
      <anchor>a27cf7131f250c665b3e4d68006dd5bf9</anchor>
      <arglist>(const KEY &amp;key)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::DSFBase</name>
    <filename>a02464.html</filename>
    <member kind="function">
      <type></type>
      <name>DSFBase</name>
      <anchorfile>a02464.html</anchorfile>
      <anchor>af0274a9e27844450d42dd02ebc3ff34f</anchor>
      <arglist>(const size_t numNodes)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DSFBase</name>
      <anchorfile>a02464.html</anchorfile>
      <anchor>a7ad36282110651ed9939c8bf8e890425</anchor>
      <arglist>(const boost::shared_ptr&lt; V &gt; &amp;v_in)</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>find</name>
      <anchorfile>a02464.html</anchorfile>
      <anchor>a1e2a75106453cbd4dad52117b02c44c2</anchor>
      <arglist>(size_t key) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>merge</name>
      <anchorfile>a02464.html</anchorfile>
      <anchor>a721b4f56885d28096e1ca598abbd7c9c</anchor>
      <arglist>(const size_t &amp;i1, const size_t &amp;i2)</arglist>
    </member>
    <member kind="typedef">
      <type>std::vector&lt; size_t &gt;</type>
      <name>V</name>
      <anchorfile>a02464.html</anchorfile>
      <anchor>aeecd94c025c092012570bb2f82f9d2c9</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::DSFMap</name>
    <filename>a02452.html</filename>
    <templarg>class KEY</templarg>
    <member kind="function">
      <type></type>
      <name>DSFMap</name>
      <anchorfile>a02452.html</anchorfile>
      <anchor>aac017122db12132a7b6656dd1bb5760f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>KEY</type>
      <name>find</name>
      <anchorfile>a02452.html</anchorfile>
      <anchor>aad793cdeca5c9150d15814c76ce8b903</anchor>
      <arglist>(const KEY &amp;key) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>merge</name>
      <anchorfile>a02452.html</anchorfile>
      <anchor>acce8aad42f635e5e0218503995afed91</anchor>
      <arglist>(const KEY &amp;x, const KEY &amp;y)</arglist>
    </member>
    <member kind="function">
      <type>std::map&lt; KEY, Set &gt;</type>
      <name>sets</name>
      <anchorfile>a02452.html</anchorfile>
      <anchor>a7d9687a620482aa0863a89bf14685055</anchor>
      <arglist>() const</arglist>
    </member>
    <class kind="struct">gtsam::DSFMap::Entry</class>
    <member kind="function" protection="protected">
      <type>iterator</type>
      <name>find__</name>
      <anchorfile>a02452.html</anchorfile>
      <anchor>a16de46adebcd2c0f874c98127bc4ffd0</anchor>
      <arglist>(const KEY &amp;key) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>iterator</type>
      <name>find_</name>
      <anchorfile>a02452.html</anchorfile>
      <anchor>a22b6fe2aec10f27fbcb9777d74d12c15</anchor>
      <arglist>(const iterator &amp;it) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>iterator</type>
      <name>find_</name>
      <anchorfile>a02452.html</anchorfile>
      <anchor>a4883de168fa5121beee34c9c7d712f28</anchor>
      <arglist>(const KEY &amp;key) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::DSFVector</name>
    <filename>a02468.html</filename>
    <base>gtsam::DSFBase</base>
    <member kind="function">
      <type></type>
      <name>DSFVector</name>
      <anchorfile>a02468.html</anchorfile>
      <anchor>abd90fd03747876b5fb43df6432ac5ad5</anchor>
      <arglist>(const size_t numNodes)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DSFVector</name>
      <anchorfile>a02468.html</anchorfile>
      <anchor>af88896d4b3454f8fdb10b60b4fa8d5ff</anchor>
      <arglist>(const std::vector&lt; size_t &gt; &amp;keys)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DSFVector</name>
      <anchorfile>a02468.html</anchorfile>
      <anchor>ac37c745fe9ba94201ca653d155d085d0</anchor>
      <arglist>(const boost::shared_ptr&lt; V &gt; &amp;v_in, const std::vector&lt; size_t &gt; &amp;keys)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isSingleton</name>
      <anchorfile>a02468.html</anchorfile>
      <anchor>a754f1174792f2c903c1d6fff8127e9e4</anchor>
      <arglist>(const size_t &amp;label) const</arglist>
    </member>
    <member kind="function">
      <type>std::set&lt; size_t &gt;</type>
      <name>set</name>
      <anchorfile>a02468.html</anchorfile>
      <anchor>a066bc96be70ef86666f9e085a5906ce1</anchor>
      <arglist>(const size_t &amp;label) const</arglist>
    </member>
    <member kind="function">
      <type>std::map&lt; size_t, std::set&lt; size_t &gt; &gt;</type>
      <name>sets</name>
      <anchorfile>a02468.html</anchorfile>
      <anchor>a891e286d24dd7d26473bb9de998a3820</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::map&lt; size_t, std::vector&lt; size_t &gt; &gt;</type>
      <name>arrays</name>
      <anchorfile>a02468.html</anchorfile>
      <anchor>a925f127b4f9b52b75b9f005142bc554f</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>gtsam::Dummy</name>
    <filename>a04992.html</filename>
  </compound>
  <compound kind="class">
    <name>gtsam::DummyFactor</name>
    <filename>a05244.html</filename>
    <base>gtsam::NonlinearFactor</base>
    <member kind="function">
      <type></type>
      <name>DummyFactor</name>
      <anchorfile>a05244.html</anchorfile>
      <anchor>a3f098b8ba8f9baf49939421c0e130108</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DummyFactor</name>
      <anchorfile>a05244.html</anchorfile>
      <anchor>a46d5f76cb3bf66198a399bcffaa17720</anchor>
      <arglist>(const Key &amp;key1, size_t dim1, const Key &amp;key2, size_t dim2)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>a05244.html</anchorfile>
      <anchor>a86ee4ed9245e73499252a05dc023ff60</anchor>
      <arglist>(const std::string &amp;s=&quot;&quot;, const KeyFormatter &amp;keyFormatter=DefaultKeyFormatter) const override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>equals</name>
      <anchorfile>a05244.html</anchorfile>
      <anchor>a258c90cfb531840ce0bee2f99259dec0</anchor>
      <arglist>(const NonlinearFactor &amp;f, double tol=1e-9) const override</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>error</name>
      <anchorfile>a05244.html</anchorfile>
      <anchor>aefd7f8ec6a36ebefc0bef6a821877478</anchor>
      <arglist>(const Values &amp;c) const override</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>dim</name>
      <anchorfile>a05244.html</anchorfile>
      <anchor>ac9c84d9822f670ff30b1f37d37463615</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>boost::shared_ptr&lt; GaussianFactor &gt;</type>
      <name>linearize</name>
      <anchorfile>a05244.html</anchorfile>
      <anchor>ab313dd930c435192a23a014ac3f92811</anchor>
      <arglist>(const Values &amp;c) const override</arglist>
    </member>
    <member kind="function">
      <type>NonlinearFactor::shared_ptr</type>
      <name>clone</name>
      <anchorfile>a05244.html</anchorfile>
      <anchor>a6a149ca808344146997a1d39874ee72e</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>size_t</type>
      <name>rowDim_</name>
      <anchorfile>a05244.html</anchorfile>
      <anchor>a5b49948366b979a1b046b3f6ced230fe</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::DummyPreconditioner</name>
    <filename>a03948.html</filename>
    <base>gtsam::Preconditioner</base>
    <member kind="function">
      <type>void</type>
      <name>solve</name>
      <anchorfile>a03948.html</anchorfile>
      <anchor>ac8f6d2ccb6eb14bdbe7fa15e6b175cb6</anchor>
      <arglist>(const Vector &amp;y, Vector &amp;x) const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>transposeSolve</name>
      <anchorfile>a03948.html</anchorfile>
      <anchor>afa90f3d7764c939969cd37ceaebf4519</anchor>
      <arglist>(const Vector &amp;y, Vector &amp;x) const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>build</name>
      <anchorfile>a03948.html</anchorfile>
      <anchor>a3345cfcc3155aadd35c1957c2bacda7b</anchor>
      <arglist>(const GaussianFactorGraph &amp;gfg, const KeyInfo &amp;info, const std::map&lt; Key, Vector &gt; &amp;lambda) override</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>gtsam::DummyPreconditionerParameters</name>
    <filename>a03944.html</filename>
    <base>gtsam::PreconditionerParameters</base>
  </compound>
  <compound kind="struct">
    <name>gtsam::internal::DynamicTraits</name>
    <filename>a02784.html</filename>
    <templarg>int M</templarg>
    <templarg>int N</templarg>
    <templarg>int Options</templarg>
    <templarg>int MaxRows</templarg>
    <templarg>int MaxCols</templarg>
  </compound>
  <compound kind="class">
    <name>gtsam::DynamicValuesMismatched</name>
    <filename>a04584.html</filename>
  </compound>
  <compound kind="struct">
    <name>gtsam::Subgraph::Edge</name>
    <filename>a03988.html</filename>
  </compound>
  <compound kind="class">
    <name>gtsam::EliminatableClusterTree</name>
    <filename>a03484.html</filename>
    <templarg>class BAYESTREE</templarg>
    <templarg>class GRAPH</templarg>
    <base>gtsam::ClusterTree</base>
    <member kind="function" protection="protected">
      <type></type>
      <name>EliminatableClusterTree</name>
      <anchorfile>a03484.html</anchorfile>
      <anchor>a8ca5e336fa4998b33d1745c52c592897</anchor>
      <arglist>(const This &amp;other)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>This &amp;</type>
      <name>operator=</name>
      <anchorfile>a03484.html</anchorfile>
      <anchor>a19b6f69043d78e06565db935e9d0b460</anchor>
      <arglist>(const This &amp;other)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>EliminatableClusterTree</name>
      <anchorfile>a03484.html</anchorfile>
      <anchor>a025f8403f75d9e98e29e99a4ed318aea</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::pair&lt; boost::shared_ptr&lt; BayesTreeType &gt;, boost::shared_ptr&lt; FactorGraphType &gt; &gt;</type>
      <name>eliminate</name>
      <anchorfile>a03484.html</anchorfile>
      <anchor>a48864b139f927eee46de3078bfbf9234</anchor>
      <arglist>(const Eliminate &amp;function) const</arglist>
    </member>
    <member kind="function">
      <type>const FastVector&lt; sharedFactor &gt; &amp;</type>
      <name>remainingFactors</name>
      <anchorfile>a03484.html</anchorfile>
      <anchor>a7217da44c142b6a3703841888406038e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::pair&lt; boost::shared_ptr&lt; BayesTreeType &gt;, boost::shared_ptr&lt; FactorGraphType &gt; &gt;</type>
      <name>eliminate</name>
      <anchorfile>a03484.html</anchorfile>
      <anchor>a48864b139f927eee46de3078bfbf9234</anchor>
      <arglist>(const Eliminate &amp;function) const</arglist>
    </member>
    <member kind="function">
      <type>const FastVector&lt; sharedFactor &gt; &amp;</type>
      <name>remainingFactors</name>
      <anchorfile>a03484.html</anchorfile>
      <anchor>a7217da44c142b6a3703841888406038e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="typedef">
      <type>BAYESTREE</type>
      <name>BayesTreeType</name>
      <anchorfile>a03484.html</anchorfile>
      <anchor>a903f18641237cb3ade58d72aeb8ba89c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GRAPH</type>
      <name>FactorGraphType</name>
      <anchorfile>a03484.html</anchorfile>
      <anchor>aa90e00878d09f0f6536a487b6c083604</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>EliminatableClusterTree&lt; BAYESTREE, GRAPH &gt;</type>
      <name>This</name>
      <anchorfile>a03484.html</anchorfile>
      <anchor>a0223c734101df3eebb97e09eabc0ecaf</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; This &gt;</type>
      <name>shared_ptr</name>
      <anchorfile>a03484.html</anchorfile>
      <anchor>acc8911d6ebde85bca47b51baede3fff8</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>BAYESTREE::ConditionalType</type>
      <name>ConditionalType</name>
      <anchorfile>a03484.html</anchorfile>
      <anchor>a0a4068d88de38214cc40f4a74d655c44</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; ConditionalType &gt;</type>
      <name>sharedConditional</name>
      <anchorfile>a03484.html</anchorfile>
      <anchor>a6157893772d92c0ea04206a8f02ddb05</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GRAPH::Eliminate</type>
      <name>Eliminate</name>
      <anchorfile>a03484.html</anchorfile>
      <anchor>af809c368808a33b15a8669ae1a04912e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GRAPH::FactorType</type>
      <name>FactorType</name>
      <anchorfile>a03484.html</anchorfile>
      <anchor>a9327311eb33b3bfc88da2473d355e56d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; FactorType &gt;</type>
      <name>sharedFactor</name>
      <anchorfile>a03484.html</anchorfile>
      <anchor>a673bca4ae33509fc9903516d9fba8794</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>EliminatableClusterTree</name>
      <anchorfile>a03484.html</anchorfile>
      <anchor>a8ca5e336fa4998b33d1745c52c592897</anchor>
      <arglist>(const This &amp;other)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>This &amp;</type>
      <name>operator=</name>
      <anchorfile>a03484.html</anchorfile>
      <anchor>a19b6f69043d78e06565db935e9d0b460</anchor>
      <arglist>(const This &amp;other)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>EliminatableClusterTree</name>
      <anchorfile>a03484.html</anchorfile>
      <anchor>a025f8403f75d9e98e29e99a4ed318aea</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::EliminateableFactorGraph</name>
    <filename>a03532.html</filename>
    <templarg>class FACTORGRAPH</templarg>
    <member kind="function">
      <type>boost::shared_ptr&lt; BayesNetType &gt;</type>
      <name>eliminateSequential</name>
      <anchorfile>a03532.html</anchorfile>
      <anchor>a84279a0dfa8e1131847079ef6329de9d</anchor>
      <arglist>(OptionalOrderingType orderingType=boost::none, const Eliminate &amp;function=EliminationTraitsType::DefaultEliminate, OptionalVariableIndex variableIndex=boost::none) const</arglist>
    </member>
    <member kind="function">
      <type>boost::shared_ptr&lt; BayesNetType &gt;</type>
      <name>eliminateSequential</name>
      <anchorfile>a03532.html</anchorfile>
      <anchor>a57b8e2b172a5857ec129b4baf07c0c8a</anchor>
      <arglist>(const Ordering &amp;ordering, const Eliminate &amp;function=EliminationTraitsType::DefaultEliminate, OptionalVariableIndex variableIndex=boost::none) const</arglist>
    </member>
    <member kind="function">
      <type>boost::shared_ptr&lt; BayesTreeType &gt;</type>
      <name>eliminateMultifrontal</name>
      <anchorfile>a03532.html</anchorfile>
      <anchor>a9496a5f692f60ecd15846d9b0b689c9c</anchor>
      <arglist>(OptionalOrderingType orderingType=boost::none, const Eliminate &amp;function=EliminationTraitsType::DefaultEliminate, OptionalVariableIndex variableIndex=boost::none) const</arglist>
    </member>
    <member kind="function">
      <type>boost::shared_ptr&lt; BayesTreeType &gt;</type>
      <name>eliminateMultifrontal</name>
      <anchorfile>a03532.html</anchorfile>
      <anchor>a0d53c0b45e56f9c8ea0367a2f253ef18</anchor>
      <arglist>(const Ordering &amp;ordering, const Eliminate &amp;function=EliminationTraitsType::DefaultEliminate, OptionalVariableIndex variableIndex=boost::none) const</arglist>
    </member>
    <member kind="function">
      <type>std::pair&lt; boost::shared_ptr&lt; BayesNetType &gt;, boost::shared_ptr&lt; FactorGraphType &gt; &gt;</type>
      <name>eliminatePartialSequential</name>
      <anchorfile>a03532.html</anchorfile>
      <anchor>aded9c4a2331cab96eadac101c9d59ca9</anchor>
      <arglist>(const Ordering &amp;ordering, const Eliminate &amp;function=EliminationTraitsType::DefaultEliminate, OptionalVariableIndex variableIndex=boost::none) const</arglist>
    </member>
    <member kind="function">
      <type>std::pair&lt; boost::shared_ptr&lt; BayesNetType &gt;, boost::shared_ptr&lt; FactorGraphType &gt; &gt;</type>
      <name>eliminatePartialSequential</name>
      <anchorfile>a03532.html</anchorfile>
      <anchor>a2ff9c400c9160cd682aa47077e2bef64</anchor>
      <arglist>(const KeyVector &amp;variables, const Eliminate &amp;function=EliminationTraitsType::DefaultEliminate, OptionalVariableIndex variableIndex=boost::none) const</arglist>
    </member>
    <member kind="function">
      <type>std::pair&lt; boost::shared_ptr&lt; BayesTreeType &gt;, boost::shared_ptr&lt; FactorGraphType &gt; &gt;</type>
      <name>eliminatePartialMultifrontal</name>
      <anchorfile>a03532.html</anchorfile>
      <anchor>ae53290598abe8dd8b0e0d95dde1efb6b</anchor>
      <arglist>(const Ordering &amp;ordering, const Eliminate &amp;function=EliminationTraitsType::DefaultEliminate, OptionalVariableIndex variableIndex=boost::none) const</arglist>
    </member>
    <member kind="function">
      <type>std::pair&lt; boost::shared_ptr&lt; BayesTreeType &gt;, boost::shared_ptr&lt; FactorGraphType &gt; &gt;</type>
      <name>eliminatePartialMultifrontal</name>
      <anchorfile>a03532.html</anchorfile>
      <anchor>af652507a2aebb5677e65d2a2d20fa6e5</anchor>
      <arglist>(const KeyVector &amp;variables, const Eliminate &amp;function=EliminationTraitsType::DefaultEliminate, OptionalVariableIndex variableIndex=boost::none) const</arglist>
    </member>
    <member kind="function">
      <type>boost::shared_ptr&lt; BayesNetType &gt;</type>
      <name>marginalMultifrontalBayesNet</name>
      <anchorfile>a03532.html</anchorfile>
      <anchor>ae2270f2d02066f20d50cb64f0fbd6b14</anchor>
      <arglist>(boost::variant&lt; const Ordering &amp;, const KeyVector &amp; &gt; variables, const Eliminate &amp;function=EliminationTraitsType::DefaultEliminate, OptionalVariableIndex variableIndex=boost::none) const</arglist>
    </member>
    <member kind="function">
      <type>boost::shared_ptr&lt; BayesNetType &gt;</type>
      <name>marginalMultifrontalBayesNet</name>
      <anchorfile>a03532.html</anchorfile>
      <anchor>a3779bc9712061c6f705e5f92498a9736</anchor>
      <arglist>(boost::variant&lt; const Ordering &amp;, const KeyVector &amp; &gt; variables, const Ordering &amp;marginalizedVariableOrdering, const Eliminate &amp;function=EliminationTraitsType::DefaultEliminate, OptionalVariableIndex variableIndex=boost::none) const</arglist>
    </member>
    <member kind="function">
      <type>boost::shared_ptr&lt; BayesTreeType &gt;</type>
      <name>marginalMultifrontalBayesTree</name>
      <anchorfile>a03532.html</anchorfile>
      <anchor>a11c2b8e671d2fa7c8dbdd71dcaff7c9c</anchor>
      <arglist>(boost::variant&lt; const Ordering &amp;, const KeyVector &amp; &gt; variables, const Eliminate &amp;function=EliminationTraitsType::DefaultEliminate, OptionalVariableIndex variableIndex=boost::none) const</arglist>
    </member>
    <member kind="function">
      <type>boost::shared_ptr&lt; BayesTreeType &gt;</type>
      <name>marginalMultifrontalBayesTree</name>
      <anchorfile>a03532.html</anchorfile>
      <anchor>aa29a150c94f045d2160b93877c1e4cd5</anchor>
      <arglist>(boost::variant&lt; const Ordering &amp;, const KeyVector &amp; &gt; variables, const Ordering &amp;marginalizedVariableOrdering, const Eliminate &amp;function=EliminationTraitsType::DefaultEliminate, OptionalVariableIndex variableIndex=boost::none) const</arglist>
    </member>
    <member kind="function">
      <type>boost::shared_ptr&lt; FactorGraphType &gt;</type>
      <name>marginal</name>
      <anchorfile>a03532.html</anchorfile>
      <anchor>a2dd60099f55b2bd1a13b88add4d0ebb7</anchor>
      <arglist>(const KeyVector &amp;variables, const Eliminate &amp;function=EliminationTraitsType::DefaultEliminate, OptionalVariableIndex variableIndex=boost::none) const</arglist>
    </member>
    <member kind="typedef">
      <type>EliminationTraits&lt; FactorGraphType &gt;</type>
      <name>EliminationTraitsType</name>
      <anchorfile>a03532.html</anchorfile>
      <anchor>ab732061a18179b70a5c03c63ee1de69d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>EliminationTraitsType::ConditionalType</type>
      <name>ConditionalType</name>
      <anchorfile>a03532.html</anchorfile>
      <anchor>abc4c30e867b516d0b5ff14761500aa07</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>EliminationTraitsType::BayesNetType</type>
      <name>BayesNetType</name>
      <anchorfile>a03532.html</anchorfile>
      <anchor>ae3cdbdc79f7d1cd8363c4986ad240d39</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>EliminationTraitsType::EliminationTreeType</type>
      <name>EliminationTreeType</name>
      <anchorfile>a03532.html</anchorfile>
      <anchor>a346379e4f07ee882f299fb36ea363095</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>EliminationTraitsType::BayesTreeType</type>
      <name>BayesTreeType</name>
      <anchorfile>a03532.html</anchorfile>
      <anchor>acadf38a0c32b1c2586dd169e0f7d1b8f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>EliminationTraitsType::JunctionTreeType</type>
      <name>JunctionTreeType</name>
      <anchorfile>a03532.html</anchorfile>
      <anchor>a09b40d82e5be58829294d734b90e74cb</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::pair&lt; boost::shared_ptr&lt; ConditionalType &gt;, boost::shared_ptr&lt; _FactorType &gt; &gt;</type>
      <name>EliminationResult</name>
      <anchorfile>a03532.html</anchorfile>
      <anchor>a65b359d184a02cd3c2f65ea09f76cada</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::function&lt; EliminationResult(const FactorGraphType &amp;, const Ordering &amp;)&gt;</type>
      <name>Eliminate</name>
      <anchorfile>a03532.html</anchorfile>
      <anchor>a03d93cbfdbb7bfa5793917f7de99b27b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::optional&lt; const VariableIndex &amp; &gt;</type>
      <name>OptionalVariableIndex</name>
      <anchorfile>a03532.html</anchorfile>
      <anchor>a1c7c9da555a7ee42ad0bccd5b3d51db9</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::optional&lt; Ordering::OrderingType &gt;</type>
      <name>OptionalOrderingType</name>
      <anchorfile>a03532.html</anchorfile>
      <anchor>acabbe9ae661818f9b84906ab285b5191</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>gtsam::EliminationData</name>
    <filename>a03512.html</filename>
    <templarg>class CLUSTERTREE</templarg>
    <class kind="class">gtsam::EliminationData::EliminationPostOrderVisitor</class>
  </compound>
  <compound kind="class">
    <name>gtsam::EliminationData::EliminationPostOrderVisitor</name>
    <filename>a03516.html</filename>
  </compound>
  <compound kind="struct">
    <name>gtsam::EliminationTraits</name>
    <filename>a03504.html</filename>
    <templarg>class GRAPH</templarg>
  </compound>
  <compound kind="struct">
    <name>gtsam::EliminationTraits&lt; DiscreteFactorGraph &gt;</name>
    <filename>a02980.html</filename>
    <member kind="function" static="yes">
      <type>static std::pair&lt; boost::shared_ptr&lt; ConditionalType &gt;, boost::shared_ptr&lt; FactorType &gt; &gt;</type>
      <name>DefaultEliminate</name>
      <anchorfile>a02980.html</anchorfile>
      <anchor>a4a8f71e10ebf83fe341b2928593b4f0c</anchor>
      <arglist>(const FactorGraphType &amp;factors, const Ordering &amp;keys)</arglist>
    </member>
    <member kind="typedef">
      <type>DiscreteFactor</type>
      <name>FactorType</name>
      <anchorfile>a02980.html</anchorfile>
      <anchor>a414bee0b0df4c0f28a479f96ac874678</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>DiscreteFactorGraph</type>
      <name>FactorGraphType</name>
      <anchorfile>a02980.html</anchorfile>
      <anchor>a0b0039647ac9edf201136931cdaaadea</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>DiscreteConditional</type>
      <name>ConditionalType</name>
      <anchorfile>a02980.html</anchorfile>
      <anchor>ac69faa24b7ee947fe6fb0c86b735c209</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>DiscreteBayesNet</type>
      <name>BayesNetType</name>
      <anchorfile>a02980.html</anchorfile>
      <anchor>a662cce5359d9cbabb3277f88ca9f3a38</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>DiscreteEliminationTree</type>
      <name>EliminationTreeType</name>
      <anchorfile>a02980.html</anchorfile>
      <anchor>af11e1b3b45d3cdbf78d07854bbb59d82</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>DiscreteBayesTree</type>
      <name>BayesTreeType</name>
      <anchorfile>a02980.html</anchorfile>
      <anchor>a4dea5984af7ae9bb7b45b9e5f750b8d9</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>DiscreteJunctionTree</type>
      <name>JunctionTreeType</name>
      <anchorfile>a02980.html</anchorfile>
      <anchor>a3105cd6512d1674d6d433034c87b4e0c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>gtsam::EliminationTraits&lt; GaussianFactorGraph &gt;</name>
    <filename>a03740.html</filename>
    <member kind="function" static="yes">
      <type>static std::pair&lt; boost::shared_ptr&lt; ConditionalType &gt;, boost::shared_ptr&lt; FactorType &gt; &gt;</type>
      <name>DefaultEliminate</name>
      <anchorfile>a03740.html</anchorfile>
      <anchor>ae06644bf558a5efd4c133007b67de4c0</anchor>
      <arglist>(const FactorGraphType &amp;factors, const Ordering &amp;keys)</arglist>
    </member>
    <member kind="typedef">
      <type>GaussianFactor</type>
      <name>FactorType</name>
      <anchorfile>a03740.html</anchorfile>
      <anchor>a44c2163f161ac7e266324bb084c81d82</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GaussianFactorGraph</type>
      <name>FactorGraphType</name>
      <anchorfile>a03740.html</anchorfile>
      <anchor>a84da0e567d8c07323dfe3cc962ab9b35</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GaussianConditional</type>
      <name>ConditionalType</name>
      <anchorfile>a03740.html</anchorfile>
      <anchor>a3cf2aefb4cd3f92327da069c3c57fd44</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GaussianBayesNet</type>
      <name>BayesNetType</name>
      <anchorfile>a03740.html</anchorfile>
      <anchor>a97ec662dcfbdf8116be7df830f288387</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GaussianEliminationTree</type>
      <name>EliminationTreeType</name>
      <anchorfile>a03740.html</anchorfile>
      <anchor>a847f1955c654f43fa24ff656fa3c763a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GaussianBayesTree</type>
      <name>BayesTreeType</name>
      <anchorfile>a03740.html</anchorfile>
      <anchor>a3b0578f45d822fdb8feea31cb08fc482</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GaussianJunctionTree</type>
      <name>JunctionTreeType</name>
      <anchorfile>a03740.html</anchorfile>
      <anchor>ac9a6d5a1e133796f4ef7957aced8c785</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>gtsam::EliminationTraits&lt; SymbolicFactorGraph &gt;</name>
    <filename>a04956.html</filename>
    <member kind="function" static="yes">
      <type>static std::pair&lt; boost::shared_ptr&lt; ConditionalType &gt;, boost::shared_ptr&lt; FactorType &gt; &gt;</type>
      <name>DefaultEliminate</name>
      <anchorfile>a04956.html</anchorfile>
      <anchor>a980005a975a05d26aabd12585a581a23</anchor>
      <arglist>(const FactorGraphType &amp;factors, const Ordering &amp;keys)</arglist>
    </member>
    <member kind="typedef">
      <type>SymbolicFactor</type>
      <name>FactorType</name>
      <anchorfile>a04956.html</anchorfile>
      <anchor>a26777b37d1fa769f5b99439417ea858b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SymbolicFactorGraph</type>
      <name>FactorGraphType</name>
      <anchorfile>a04956.html</anchorfile>
      <anchor>a28c86252b3388e6c44407cc5a7ad822c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SymbolicConditional</type>
      <name>ConditionalType</name>
      <anchorfile>a04956.html</anchorfile>
      <anchor>affe537ded99dadd0cfde84b03a1962f2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SymbolicBayesNet</type>
      <name>BayesNetType</name>
      <anchorfile>a04956.html</anchorfile>
      <anchor>a826f4935d6f37458d20a04eb666c925d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SymbolicEliminationTree</type>
      <name>EliminationTreeType</name>
      <anchorfile>a04956.html</anchorfile>
      <anchor>a4229489dec7c3ec29f4b6200aba70232</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SymbolicBayesTree</type>
      <name>BayesTreeType</name>
      <anchorfile>a04956.html</anchorfile>
      <anchor>af52148826369afe47436ed5f6e89f9bc</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SymbolicJunctionTree</type>
      <name>JunctionTreeType</name>
      <anchorfile>a04956.html</anchorfile>
      <anchor>af3f9ccb100f0c9ab446683896228ff7c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::EliminationTree</name>
    <filename>a03536.html</filename>
    <templarg>class BAYESNET</templarg>
    <templarg>class GRAPH</templarg>
    <member kind="friend">
      <type>friend class</type>
      <name>::EliminationTreeTester</name>
      <anchorfile>a03536.html</anchorfile>
      <anchor>afb1e378ea19d4d4de1a201e467e0699d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>EliminationTree</name>
      <anchorfile>a03536.html</anchorfile>
      <anchor>aacb8da2b775867c6bc7bc064ded4f68a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const FastVector&lt; sharedNode &gt; &amp;</type>
      <name>roots</name>
      <anchorfile>a03536.html</anchorfile>
      <anchor>a6a33186ea4ad6a9b0479dc0087ec30db</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const FastVector&lt; sharedFactor &gt; &amp;</type>
      <name>remainingFactors</name>
      <anchorfile>a03536.html</anchorfile>
      <anchor>afe7a2def51316f565425bb711b1a2e65</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>swap</name>
      <anchorfile>a03536.html</anchorfile>
      <anchor>aa803d492b75fb518207fb2b9a6788607</anchor>
      <arglist>(This &amp;other)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>EliminationTree</name>
      <anchorfile>a03536.html</anchorfile>
      <anchor>af9d86f2a1c1e084c02982d08b3512385</anchor>
      <arglist>(const FactorGraphType &amp;factorGraph, const VariableIndex &amp;structure, const Ordering &amp;order)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>EliminationTree</name>
      <anchorfile>a03536.html</anchorfile>
      <anchor>a5767cf9b1e41ecdd681fc3c230e4a651</anchor>
      <arglist>(const FactorGraphType &amp;factorGraph, const Ordering &amp;order)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>EliminationTree</name>
      <anchorfile>a03536.html</anchorfile>
      <anchor>a2d9565551bfe73676f82d41d86f158a5</anchor>
      <arglist>(const This &amp;other)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>This &amp;</type>
      <name>operator=</name>
      <anchorfile>a03536.html</anchorfile>
      <anchor>a1224c71a07df3951c7d4ca92f2e8c30d</anchor>
      <arglist>(const This &amp;other)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>equals</name>
      <anchorfile>a03536.html</anchorfile>
      <anchor>a056479065f5685d308ff64ed0cb609a2</anchor>
      <arglist>(const This &amp;other, double tol=1e-9) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>a03536.html</anchorfile>
      <anchor>a0d5c769b08d584c53439805f1bdccd38</anchor>
      <arglist>(const std::string &amp;name=&quot;EliminationTree: &quot;, const KeyFormatter &amp;formatter=DefaultKeyFormatter) const</arglist>
    </member>
    <member kind="function">
      <type>std::pair&lt; boost::shared_ptr&lt; BayesNetType &gt;, boost::shared_ptr&lt; FactorGraphType &gt; &gt;</type>
      <name>eliminate</name>
      <anchorfile>a03536.html</anchorfile>
      <anchor>a11b6bc4f0b28b6b60a86555ed096d805</anchor>
      <arglist>(Eliminate function) const</arglist>
    </member>
    <member kind="typedef">
      <type>GRAPH</type>
      <name>FactorGraphType</name>
      <anchorfile>a03536.html</anchorfile>
      <anchor>a8e0f85f2f105b76096963f275e801812</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GRAPH::FactorType</type>
      <name>FactorType</name>
      <anchorfile>a03536.html</anchorfile>
      <anchor>ae32081c8e91b81d6833173a86c999a49</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; FactorType &gt;</type>
      <name>sharedFactor</name>
      <anchorfile>a03536.html</anchorfile>
      <anchor>a4b18d7fff1722b2c8bb558d265d01b62</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>BAYESNET</type>
      <name>BayesNetType</name>
      <anchorfile>a03536.html</anchorfile>
      <anchor>a5a58f63ccebf38a91c029af056b8a163</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>BayesNetType::ConditionalType</type>
      <name>ConditionalType</name>
      <anchorfile>a03536.html</anchorfile>
      <anchor>ac710dbf0e617559c174181b8441c1a92</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; ConditionalType &gt;</type>
      <name>sharedConditional</name>
      <anchorfile>a03536.html</anchorfile>
      <anchor>a67f67602db3db2b835f5c1b66d659c54</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; Node &gt;</type>
      <name>sharedNode</name>
      <anchorfile>a03536.html</anchorfile>
      <anchor>ae60100edf4d90ad45a02a2f21be46e25</anchor>
      <arglist></arglist>
    </member>
    <class kind="struct">gtsam::EliminationTree::Node</class>
    <member kind="typedef" protection="protected">
      <type>EliminationTree&lt; BAYESNET, GRAPH &gt;</type>
      <name>This</name>
      <anchorfile>a03536.html</anchorfile>
      <anchor>a12e721d9dff82b978888af20a4297ae9</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>boost::shared_ptr&lt; This &gt;</type>
      <name>shared_ptr</name>
      <anchorfile>a03536.html</anchorfile>
      <anchor>acc124c37c3e0768bb6d67d679df4ff78</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>FastVector&lt; sharedNode &gt;</type>
      <name>roots_</name>
      <anchorfile>a03536.html</anchorfile>
      <anchor>a335b2e576f841c10c6cf722214c5799e</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>gtsam::DSFMap::Entry</name>
    <filename>a02456.html</filename>
  </compound>
  <compound kind="class">
    <name>gtsam::EqualityFactorGraph</name>
    <filename>a05040.html</filename>
    <base>FactorGraph&lt; LinearEquality &gt;</base>
    <member kind="function">
      <type>void</type>
      <name>add</name>
      <anchorfile>a05040.html</anchorfile>
      <anchor>ab923a1a135b41076e1adab7d726ad3a6</anchor>
      <arglist>(Args &amp;&amp;... args)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>error</name>
      <anchorfile>a05040.html</anchorfile>
      <anchor>aa9e6612db431cc91b662e8db2da13acf</anchor>
      <arglist>(const VectorValues &amp;x) const</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>gtsam::equals</name>
    <filename>a02648.html</filename>
    <templarg>class V</templarg>
  </compound>
  <compound kind="struct">
    <name>gtsam::equals_star</name>
    <filename>a02652.html</filename>
    <templarg>class V</templarg>
  </compound>
  <compound kind="class">
    <name>gtsam::EquivInertialNavFactor_GlobalVel</name>
    <filename>a05248.html</filename>
    <templarg>class POSE</templarg>
    <templarg>class VELOCITY</templarg>
    <templarg>class IMUBIAS</templarg>
    <base>NoiseModelFactor5&lt; POSE, VELOCITY, IMUBIAS, POSE, VELOCITY &gt;</base>
    <member kind="function">
      <type></type>
      <name>EquivInertialNavFactor_GlobalVel</name>
      <anchorfile>a05248.html</anchorfile>
      <anchor>ad3909c0eae412cff95ae2b01962feb7d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>EquivInertialNavFactor_GlobalVel</name>
      <anchorfile>a05248.html</anchorfile>
      <anchor>ab42b148a510e66814dc44a05a97d361c</anchor>
      <arglist>(const Key &amp;Pose1, const Key &amp;Vel1, const Key &amp;IMUBias1, const Key &amp;Pose2, const Key &amp;Vel2, const Vector &amp;delta_pos_in_t0, const Vector &amp;delta_vel_in_t0, const Vector3 &amp;delta_angles, double dt12, const Vector world_g, const Vector world_rho, const Vector &amp;world_omega_earth, const noiseModel::Gaussian::shared_ptr &amp;model_equivalent, const Matrix &amp;Jacobian_wrt_t0_Overall, boost::optional&lt; IMUBIAS &gt; Bias_initial=boost::none, boost::optional&lt; POSE &gt; body_P_sensor=boost::none)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>a05248.html</anchorfile>
      <anchor>a1f177ea1cdc2d861d3b3666785abd50f</anchor>
      <arglist>(const std::string &amp;s=&quot;EquivInertialNavFactor_GlobalVel&quot;, const KeyFormatter &amp;keyFormatter=DefaultKeyFormatter) const override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>equals</name>
      <anchorfile>a05248.html</anchorfile>
      <anchor>ad9f32619f55ecec6d8c24ede2b710602</anchor>
      <arglist>(const NonlinearFactor &amp;expected, double tol=1e-9) const override</arglist>
    </member>
    <member kind="function">
      <type>Vector</type>
      <name>evaluateError</name>
      <anchorfile>a05248.html</anchorfile>
      <anchor>a527e878f1f5d2ff1a9037aa9ae4c5549</anchor>
      <arglist>(const POSE &amp;Pose1, const VELOCITY &amp;Vel1, const IMUBIAS &amp;Bias1, const POSE &amp;Pose2, const VELOCITY &amp;Vel2, boost::optional&lt; Matrix &amp; &gt; H1=boost::none, boost::optional&lt; Matrix &amp; &gt; H2=boost::none, boost::optional&lt; Matrix &amp; &gt; H3=boost::none, boost::optional&lt; Matrix &amp; &gt; H4=boost::none, boost::optional&lt; Matrix &amp; &gt; H5=boost::none) const override</arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>boost::serialization::access</name>
      <anchorfile>a05248.html</anchorfile>
      <anchor>ac98d07dd8f7b70e16ccb9a01abf56b9c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::EquivInertialNavFactor_GlobalVel_NoBias</name>
    <filename>a05252.html</filename>
    <templarg>class POSE</templarg>
    <templarg>class VELOCITY</templarg>
    <base>NoiseModelFactor4&lt; POSE, VELOCITY, POSE, VELOCITY &gt;</base>
    <member kind="function">
      <type></type>
      <name>EquivInertialNavFactor_GlobalVel_NoBias</name>
      <anchorfile>a05252.html</anchorfile>
      <anchor>abbbadec8a23c524ca1f4705bcb478526</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>EquivInertialNavFactor_GlobalVel_NoBias</name>
      <anchorfile>a05252.html</anchorfile>
      <anchor>ae09b4d6408c2c1558219f50e13466a7d</anchor>
      <arglist>(const Key &amp;Pose1, const Key &amp;Vel1, const Key &amp;Pose2, const Key &amp;Vel2, const Vector &amp;delta_pos_in_t0, const Vector &amp;delta_vel_in_t0, const Vector3 &amp;delta_angles, double dt12, const Vector world_g, const Vector world_rho, const Vector &amp;world_omega_earth, const noiseModel::Gaussian::shared_ptr &amp;model_equivalent, const Matrix &amp;Jacobian_wrt_t0_Overall, boost::optional&lt; POSE &gt; body_P_sensor=boost::none)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>print</name>
      <anchorfile>a05252.html</anchorfile>
      <anchor>ab993e872d0302dd0f0adb734017100d9</anchor>
      <arglist>(const std::string &amp;s=&quot;EquivInertialNavFactor_GlobalVel_NoBias&quot;, const KeyFormatter &amp;keyFormatter=DefaultKeyFormatter) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>equals</name>
      <anchorfile>a05252.html</anchorfile>
      <anchor>a2fdef99e9dbcd072b423f5cfd4648421</anchor>
      <arglist>(const NonlinearFactor &amp;expected, double tol=1e-9) const override</arglist>
    </member>
    <member kind="function">
      <type>Vector</type>
      <name>evaluateError</name>
      <anchorfile>a05252.html</anchorfile>
      <anchor>a466d0e85fed8a83299d3f18f2eedcbe1</anchor>
      <arglist>(const POSE &amp;Pose1, const VELOCITY &amp;Vel1, const POSE &amp;Pose2, const VELOCITY &amp;Vel2, boost::optional&lt; Matrix &amp; &gt; H1=boost::none, boost::optional&lt; Matrix &amp; &gt; H2=boost::none, boost::optional&lt; Matrix &amp; &gt; H3=boost::none, boost::optional&lt; Matrix &amp; &gt; H4=boost::none) const</arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>boost::serialization::access</name>
      <anchorfile>a05252.html</anchorfile>
      <anchor>ac98d07dd8f7b70e16ccb9a01abf56b9c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::Errors</name>
    <filename>a03688.html</filename>
    <base>FastList&lt; Vector &gt;</base>
    <member kind="function">
      <type>GTSAM_EXPORT</type>
      <name>Errors</name>
      <anchorfile>a03688.html</anchorfile>
      <anchor>a06c11c056d90d6eea6e43c47f1a1e8d2</anchor>
      <arglist>(const VectorValues &amp;V)</arglist>
    </member>
    <member kind="function">
      <type>GTSAM_EXPORT void</type>
      <name>print</name>
      <anchorfile>a03688.html</anchorfile>
      <anchor>afeda99c08fde53f011879e45245e2989</anchor>
      <arglist>(const std::string &amp;s=&quot;Errors&quot;) const</arglist>
    </member>
    <member kind="function">
      <type>GTSAM_EXPORT bool</type>
      <name>equals</name>
      <anchorfile>a03688.html</anchorfile>
      <anchor>a916a0ae1776f150e69b5be7a889a05ce</anchor>
      <arglist>(const Errors &amp;expected, double tol=1e-9) const</arglist>
    </member>
    <member kind="function">
      <type>GTSAM_EXPORT Errors</type>
      <name>operator+</name>
      <anchorfile>a03688.html</anchorfile>
      <anchor>a5c0a6e392c37efb53ea264a0894da9bb</anchor>
      <arglist>(const Errors &amp;b) const</arglist>
    </member>
    <member kind="function">
      <type>GTSAM_EXPORT Errors</type>
      <name>operator-</name>
      <anchorfile>a03688.html</anchorfile>
      <anchor>a6cfad8051589ef1a87700492b8f8b303</anchor>
      <arglist>(const Errors &amp;b) const</arglist>
    </member>
    <member kind="function">
      <type>GTSAM_EXPORT Errors</type>
      <name>operator-</name>
      <anchorfile>a03688.html</anchorfile>
      <anchor>a1112d2e9529bc51bbdfd78257b14a42c</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::EssentialMatrix</name>
    <filename>a03176.html</filename>
    <member kind="function">
      <type>EssentialMatrix</type>
      <name>retract</name>
      <anchorfile>a03176.html</anchorfile>
      <anchor>a768f014724809c0176d1cae10beb1932</anchor>
      <arglist>(const Vector5 &amp;xi) const</arglist>
    </member>
    <member kind="function">
      <type>Vector5</type>
      <name>localCoordinates</name>
      <anchorfile>a03176.html</anchorfile>
      <anchor>a230f448b9900fe0c22a83a14ac7fca3c</anchor>
      <arglist>(const EssentialMatrix &amp;other) const</arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>boost::serialization::access</name>
      <anchorfile>a03176.html</anchorfile>
      <anchor>ac98d07dd8f7b70e16ccb9a01abf56b9c</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend EssentialMatrix</type>
      <name>operator*</name>
      <anchorfile>a03176.html</anchorfile>
      <anchor>a08d715b14a2db37464e532fa79430466</anchor>
      <arglist>(const Rot3 &amp;cRb, const EssentialMatrix &amp;E)</arglist>
    </member>
    <member kind="function">
      <type>const Rot3 &amp;</type>
      <name>rotation</name>
      <anchorfile>a03176.html</anchorfile>
      <anchor>a226caafd6197b22966fb6208b00932cc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Unit3 &amp;</type>
      <name>direction</name>
      <anchorfile>a03176.html</anchorfile>
      <anchor>ac12aedc3267b87de73518edad3d3bfba</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Matrix3 &amp;</type>
      <name>matrix</name>
      <anchorfile>a03176.html</anchorfile>
      <anchor>aed2afb85f3ed40fd981993abd0fee96d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Unit3 &amp;</type>
      <name>epipole_a</name>
      <anchorfile>a03176.html</anchorfile>
      <anchor>aaf9a60e2bf4254ded7e038737e207f53</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Unit3</type>
      <name>epipole_b</name>
      <anchorfile>a03176.html</anchorfile>
      <anchor>acb6b6c1586e1e5fbfed6d08a6f7abdff</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>GTSAM_EXPORT Point3</type>
      <name>transformTo</name>
      <anchorfile>a03176.html</anchorfile>
      <anchor>aca8ee6259be205efec13de59d13ab3a7</anchor>
      <arglist>(const Point3 &amp;p, OptionalJacobian&lt; 3, 5 &gt; DE=boost::none, OptionalJacobian&lt; 3, 3 &gt; Dpoint=boost::none) const</arglist>
    </member>
    <member kind="function">
      <type>GTSAM_EXPORT EssentialMatrix</type>
      <name>rotate</name>
      <anchorfile>a03176.html</anchorfile>
      <anchor>af9a4340182f05a4d1706d3c1ca5cc678</anchor>
      <arglist>(const Rot3 &amp;cRb, OptionalJacobian&lt; 5, 5 &gt; HE=boost::none, OptionalJacobian&lt; 5, 3 &gt; HR=boost::none) const</arglist>
    </member>
    <member kind="function">
      <type>GTSAM_EXPORT double</type>
      <name>error</name>
      <anchorfile>a03176.html</anchorfile>
      <anchor>a5516f9c1d46c81dae4506c90e8fb7031</anchor>
      <arglist>(const Vector3 &amp;vA, const Vector3 &amp;vB, OptionalJacobian&lt; 1, 5 &gt; H=boost::none) const</arglist>
    </member>
    <member kind="friend">
      <type>GTSAM_EXPORT friend std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a03176.html</anchorfile>
      <anchor>ae747d324ecd3008b7c96c28a5eeb496f</anchor>
      <arglist>(std::ostream &amp;os, const EssentialMatrix &amp;E)</arglist>
    </member>
    <member kind="friend">
      <type>GTSAM_EXPORT friend std::istream &amp;</type>
      <name>operator&gt;&gt;</name>
      <anchorfile>a03176.html</anchorfile>
      <anchor>a3b8375e79cc6e6d30a4aa40e9a011611</anchor>
      <arglist>(std::istream &amp;is, EssentialMatrix &amp;E)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static GTSAM_EXPORT EssentialMatrix</type>
      <name>FromRotationAndDirection</name>
      <anchorfile>a03176.html</anchorfile>
      <anchor>a4dcbb4588415f7fe874855f113d5008d</anchor>
      <arglist>(const Rot3 &amp;aRb, const Unit3 &amp;aTb, OptionalJacobian&lt; 5, 3 &gt; H1=boost::none, OptionalJacobian&lt; 5, 2 &gt; H2=boost::none)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static GTSAM_EXPORT EssentialMatrix</type>
      <name>FromPose3</name>
      <anchorfile>a03176.html</anchorfile>
      <anchor>a378802c7da7df87a6fd0bf563b6bdb13</anchor>
      <arglist>(const Pose3 &amp;_1P2_, OptionalJacobian&lt; 5, 6 &gt; H=boost::none)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static EssentialMatrix</type>
      <name>Random</name>
      <anchorfile>a03176.html</anchorfile>
      <anchor>a4b3fdce1e82ffb2901e53ed9bc5a7aba</anchor>
      <arglist>(Engine &amp;rng)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>EssentialMatrix</name>
      <anchorfile>a03176.html</anchorfile>
      <anchor>a29e768b352dff0cec0e50199663fd18e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>EssentialMatrix</name>
      <anchorfile>a03176.html</anchorfile>
      <anchor>a7ab38f00c9e4e460827a09b02c9e0f20</anchor>
      <arglist>(const Rot3 &amp;aRb, const Unit3 &amp;aTb)</arglist>
    </member>
    <member kind="function">
      <type>GTSAM_EXPORT void</type>
      <name>print</name>
      <anchorfile>a03176.html</anchorfile>
      <anchor>a921f152188ad8f74fae6328a690f7411</anchor>
      <arglist>(const std::string &amp;s=&quot;&quot;) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>equals</name>
      <anchorfile>a03176.html</anchorfile>
      <anchor>a24669283146c7e6df3b3d01fbd0b1fed</anchor>
      <arglist>(const EssentialMatrix &amp;other, double tol=1e-8) const</arglist>
    </member>
    <member kind="function">
      <type>GTSAM_EXPORT void</type>
      <name>print</name>
      <anchorfile>a03176.html</anchorfile>
      <anchor>a921f152188ad8f74fae6328a690f7411</anchor>
      <arglist>(const std::string &amp;s=&quot;&quot;) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>equals</name>
      <anchorfile>a03176.html</anchorfile>
      <anchor>a24669283146c7e6df3b3d01fbd0b1fed</anchor>
      <arglist>(const EssentialMatrix &amp;other, double tol=1e-8) const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Vector3</type>
      <name>Homogeneous</name>
      <anchorfile>a03176.html</anchorfile>
      <anchor>aa0ddbe48ef8253475276de478081025d</anchor>
      <arglist>(const Point2 &amp;p)</arglist>
    </member>
    <member kind="friend">
      <type>GTSAM_EXPORT friend std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a03176.html</anchorfile>
      <anchor>ae747d324ecd3008b7c96c28a5eeb496f</anchor>
      <arglist>(std::ostream &amp;os, const EssentialMatrix &amp;E)</arglist>
    </member>
    <member kind="friend">
      <type>GTSAM_EXPORT friend std::istream &amp;</type>
      <name>operator&gt;&gt;</name>
      <anchorfile>a03176.html</anchorfile>
      <anchor>a3b8375e79cc6e6d30a4aa40e9a011611</anchor>
      <arglist>(std::istream &amp;is, EssentialMatrix &amp;E)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::EssentialMatrixConstraint</name>
    <filename>a04744.html</filename>
    <base>NoiseModelFactor2&lt; Pose3, Pose3 &gt;</base>
    <member kind="function">
      <type></type>
      <name>EssentialMatrixConstraint</name>
      <anchorfile>a04744.html</anchorfile>
      <anchor>ac03a28866f89ad12046904c7c0cff4b8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>EssentialMatrixConstraint</name>
      <anchorfile>a04744.html</anchorfile>
      <anchor>ad7a49abd9aa91e0671eae13becc08ca0</anchor>
      <arglist>(Key key1, Key key2, const EssentialMatrix &amp;measuredE, const SharedNoiseModel &amp;model)</arglist>
    </member>
    <member kind="function">
      <type>gtsam::NonlinearFactor::shared_ptr</type>
      <name>clone</name>
      <anchorfile>a04744.html</anchorfile>
      <anchor>a0782238c2c386bedd704df1b3722133c</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>a04744.html</anchorfile>
      <anchor>a5c24dd58beb60745196233c39349b4d5</anchor>
      <arglist>(const std::string &amp;s=&quot;&quot;, const KeyFormatter &amp;keyFormatter=DefaultKeyFormatter) const override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>equals</name>
      <anchorfile>a04744.html</anchorfile>
      <anchor>ace9aad7a041652891aae594464b3147d</anchor>
      <arglist>(const NonlinearFactor &amp;expected, double tol=1e-9) const override</arglist>
    </member>
    <member kind="function">
      <type>Vector</type>
      <name>evaluateError</name>
      <anchorfile>a04744.html</anchorfile>
      <anchor>a72fd6f3e016d37eae81a05b6e0c3af07</anchor>
      <arglist>(const Pose3 &amp;p1, const Pose3 &amp;p2, boost::optional&lt; Matrix &amp; &gt; Hp1=boost::none, boost::optional&lt; Matrix &amp; &gt; Hp2=boost::none) const override</arglist>
    </member>
    <member kind="function">
      <type>const EssentialMatrix &amp;</type>
      <name>measured</name>
      <anchorfile>a04744.html</anchorfile>
      <anchor>a2bf85d8558be6abd29eedb4a06d3b808</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; EssentialMatrixConstraint &gt;</type>
      <name>shared_ptr</name>
      <anchorfile>a04744.html</anchorfile>
      <anchor>aa71b27df9573bff00b1a95c0fba271fe</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>boost::serialization::access</name>
      <anchorfile>a04744.html</anchorfile>
      <anchor>ac98d07dd8f7b70e16ccb9a01abf56b9c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::EssentialMatrixFactor</name>
    <filename>a04748.html</filename>
    <base>NoiseModelFactor1&lt; EssentialMatrix &gt;</base>
    <member kind="function">
      <type></type>
      <name>EssentialMatrixFactor</name>
      <anchorfile>a04748.html</anchorfile>
      <anchor>a9edbb5ac88824e6c9e87b5b979e5b5a5</anchor>
      <arglist>(Key key, const Point2 &amp;pA, const Point2 &amp;pB, const SharedNoiseModel &amp;model)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>EssentialMatrixFactor</name>
      <anchorfile>a04748.html</anchorfile>
      <anchor>ae683f489d5cfad2f4ea6a9840820808c</anchor>
      <arglist>(Key key, const Point2 &amp;pA, const Point2 &amp;pB, const SharedNoiseModel &amp;model, boost::shared_ptr&lt; CALIBRATION &gt; K)</arglist>
    </member>
    <member kind="function">
      <type>gtsam::NonlinearFactor::shared_ptr</type>
      <name>clone</name>
      <anchorfile>a04748.html</anchorfile>
      <anchor>a901bc8a01747e0f7feac7ce7c5c4b790</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>a04748.html</anchorfile>
      <anchor>ae3b443dfbb1397b2069f7e8a590928d2</anchor>
      <arglist>(const std::string &amp;s=&quot;&quot;, const KeyFormatter &amp;keyFormatter=DefaultKeyFormatter) const override</arglist>
    </member>
    <member kind="function">
      <type>Vector</type>
      <name>evaluateError</name>
      <anchorfile>a04748.html</anchorfile>
      <anchor>af17b3313bf82fd132c39835e3639a831</anchor>
      <arglist>(const EssentialMatrix &amp;E, boost::optional&lt; Matrix &amp; &gt; H=boost::none) const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::EssentialMatrixFactor2</name>
    <filename>a04752.html</filename>
    <base>NoiseModelFactor2&lt; EssentialMatrix, double &gt;</base>
    <member kind="function">
      <type></type>
      <name>EssentialMatrixFactor2</name>
      <anchorfile>a04752.html</anchorfile>
      <anchor>ad5fe19b4fbbf5721eaf7e3e59aa313da</anchor>
      <arglist>(Key key1, Key key2, const Point2 &amp;pA, const Point2 &amp;pB, const SharedNoiseModel &amp;model)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>EssentialMatrixFactor2</name>
      <anchorfile>a04752.html</anchorfile>
      <anchor>a88adb03636bff678c71f1f572b9cf5b4</anchor>
      <arglist>(Key key1, Key key2, const Point2 &amp;pA, const Point2 &amp;pB, const SharedNoiseModel &amp;model, boost::shared_ptr&lt; CALIBRATION &gt; K)</arglist>
    </member>
    <member kind="function">
      <type>gtsam::NonlinearFactor::shared_ptr</type>
      <name>clone</name>
      <anchorfile>a04752.html</anchorfile>
      <anchor>a2e32ed624a4d0d5e3acd7988c770892f</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>a04752.html</anchorfile>
      <anchor>ae8bdfa51681961bb730e2f9b9b3615c6</anchor>
      <arglist>(const std::string &amp;s=&quot;&quot;, const KeyFormatter &amp;keyFormatter=DefaultKeyFormatter) const override</arglist>
    </member>
    <member kind="function">
      <type>Vector</type>
      <name>evaluateError</name>
      <anchorfile>a04752.html</anchorfile>
      <anchor>a712515c8c8dbd19e80a7eaf6f5991052</anchor>
      <arglist>(const EssentialMatrix &amp;E, const double &amp;d, boost::optional&lt; Matrix &amp; &gt; DE=boost::none, boost::optional&lt; Matrix &amp; &gt; Dd=boost::none) const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::EssentialMatrixFactor3</name>
    <filename>a04756.html</filename>
    <base>gtsam::EssentialMatrixFactor2</base>
    <member kind="function">
      <type></type>
      <name>EssentialMatrixFactor3</name>
      <anchorfile>a04756.html</anchorfile>
      <anchor>a3168c36b93a9ebda9c7c001b90936be4</anchor>
      <arglist>(Key key1, Key key2, const Point2 &amp;pA, const Point2 &amp;pB, const Rot3 &amp;cRb, const SharedNoiseModel &amp;model)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>EssentialMatrixFactor3</name>
      <anchorfile>a04756.html</anchorfile>
      <anchor>a919fad59dac5dc1d750e8c8a3af53c4d</anchor>
      <arglist>(Key key1, Key key2, const Point2 &amp;pA, const Point2 &amp;pB, const Rot3 &amp;cRb, const SharedNoiseModel &amp;model, boost::shared_ptr&lt; CALIBRATION &gt; K)</arglist>
    </member>
    <member kind="function">
      <type>gtsam::NonlinearFactor::shared_ptr</type>
      <name>clone</name>
      <anchorfile>a04756.html</anchorfile>
      <anchor>a5a4fe75fd49188186c4a91a9c3b343fb</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>a04756.html</anchorfile>
      <anchor>a05ae686a11ef96e135c712e9410c92f8</anchor>
      <arglist>(const std::string &amp;s=&quot;&quot;, const KeyFormatter &amp;keyFormatter=DefaultKeyFormatter) const override</arglist>
    </member>
    <member kind="function">
      <type>Vector</type>
      <name>evaluateError</name>
      <anchorfile>a04756.html</anchorfile>
      <anchor>a66c25daf75e9d706f65ca6a1b1a8b0e8</anchor>
      <arglist>(const EssentialMatrix &amp;E, const double &amp;d, boost::optional&lt; Matrix &amp; &gt; DE=boost::none, boost::optional&lt; Matrix &amp; &gt; Dd=boost::none) const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::EssentialMatrixFactor4</name>
    <filename>a04760.html</filename>
    <templarg>class CALIBRATION</templarg>
    <base>NoiseModelFactor2&lt; EssentialMatrix, CALIBRATION &gt;</base>
    <member kind="function">
      <type></type>
      <name>EssentialMatrixFactor4</name>
      <anchorfile>a04760.html</anchorfile>
      <anchor>a80f46f1be2551a5a76f6b3a6db0ad8a4</anchor>
      <arglist>(Key keyE, Key keyK, const Point2 &amp;pA, const Point2 &amp;pB, const SharedNoiseModel &amp;model)</arglist>
    </member>
    <member kind="function">
      <type>gtsam::NonlinearFactor::shared_ptr</type>
      <name>clone</name>
      <anchorfile>a04760.html</anchorfile>
      <anchor>af19e19067865ed67cff5efb9f11eddff</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>a04760.html</anchorfile>
      <anchor>a76ded61c32dc94a2f1d339c8118e4f96</anchor>
      <arglist>(const std::string &amp;s=&quot;&quot;, const KeyFormatter &amp;keyFormatter=DefaultKeyFormatter) const override</arglist>
    </member>
    <member kind="function">
      <type>Vector</type>
      <name>evaluateError</name>
      <anchorfile>a04760.html</anchorfile>
      <anchor>a76f801c228185daf141feffba7c8469a</anchor>
      <arglist>(const EssentialMatrix &amp;E, const CALIBRATION &amp;K, boost::optional&lt; Matrix &amp; &gt; H1=boost::none, boost::optional&lt; Matrix &amp; &gt; H2=boost::none) const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::EvaluationFactor</name>
    <filename>a02848.html</filename>
    <templarg>class BASIS</templarg>
    <base>FunctorizedFactor&lt; double, Vector &gt;</base>
    <member kind="function">
      <type></type>
      <name>EvaluationFactor</name>
      <anchorfile>a02848.html</anchorfile>
      <anchor>a8b568697fdf69d42b2def41dd68840d7</anchor>
      <arglist>(Key key, const double &amp;z, const SharedNoiseModel &amp;model, const size_t N, double x)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>EvaluationFactor</name>
      <anchorfile>a02848.html</anchorfile>
      <anchor>a6cf76c8a646b15d5c7169dfb8bc2a768</anchor>
      <arglist>(Key key, const double &amp;z, const SharedNoiseModel &amp;model, const size_t N, double x, double a, double b)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::Basis::EvaluationFunctor</name>
    <filename>a02816.html</filename>
    <member kind="function">
      <type></type>
      <name>EvaluationFunctor</name>
      <anchorfile>a02816.html</anchorfile>
      <anchor>af40cf6dc6a2d3826e0db9cce0a5fc37f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>EvaluationFunctor</name>
      <anchorfile>a02816.html</anchorfile>
      <anchor>a525a4e981be95de1a5b9fef7b34ec253</anchor>
      <arglist>(size_t N, double x)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>EvaluationFunctor</name>
      <anchorfile>a02816.html</anchorfile>
      <anchor>a9be4f88fb81c5e28cfef8aea269e08e4</anchor>
      <arglist>(size_t N, double x, double a, double b)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>apply</name>
      <anchorfile>a02816.html</anchorfile>
      <anchor>ad973cb88d6390c928ce903874ad2c2ef</anchor>
      <arglist>(const typename DERIVED::Parameters &amp;p, OptionalJacobian&lt;-1, -1 &gt; H=boost::none) const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>operator()</name>
      <anchorfile>a02816.html</anchorfile>
      <anchor>af86622dfa0d4e4fc34258aed0e03910c</anchor>
      <arglist>(const typename DERIVED::Parameters &amp;p, OptionalJacobian&lt;-1, -1 &gt; H=boost::none) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::internal::ExecutionTrace</name>
    <filename>a04232.html</filename>
    <templarg>typename T</templarg>
  </compound>
  <compound kind="class">
    <name>gtsam::so3::ExpmapFunctor</name>
    <filename>a03372.html</filename>
    <member kind="function">
      <type></type>
      <name>ExpmapFunctor</name>
      <anchorfile>a03372.html</anchorfile>
      <anchor>a4113d13c4aa3e72b1a1f371cd0942fd0</anchor>
      <arglist>(const Vector3 &amp;omega, bool nearZeroApprox=false)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ExpmapFunctor</name>
      <anchorfile>a03372.html</anchorfile>
      <anchor>a0e0cb7af2381d11eb959b20fccdde71f</anchor>
      <arglist>(const Vector3 &amp;axis, double angle, bool nearZeroApprox=false)</arglist>
    </member>
    <member kind="function">
      <type>SO3</type>
      <name>expmap</name>
      <anchorfile>a03372.html</anchorfile>
      <anchor>a6ceef8c46763ee780baac0bc900e6b64</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::Expression</name>
    <filename>a04240.html</filename>
    <templarg>typename T</templarg>
    <member kind="function">
      <type></type>
      <name>Expression</name>
      <anchorfile>a04240.html</anchorfile>
      <anchor>ad55a2363518370d61b6cf9f31ad31e10</anchor>
      <arglist>(const T &amp;value)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Expression</name>
      <anchorfile>a04240.html</anchorfile>
      <anchor>a69589c13620a88dd2a70ccdde4cc552d</anchor>
      <arglist>(const Key &amp;key)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Expression</name>
      <anchorfile>a04240.html</anchorfile>
      <anchor>a7a74922989aee4280a13b84dea65d307</anchor>
      <arglist>(const Symbol &amp;symbol)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Expression</name>
      <anchorfile>a04240.html</anchorfile>
      <anchor>a771a8f06cf37fbe690dba7ddfdb764c9</anchor>
      <arglist>(unsigned char c, std::uint64_t j)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Expression</name>
      <anchorfile>a04240.html</anchorfile>
      <anchor>aaed796271d53563978505b3bf9718a92</anchor>
      <arglist>(typename UnaryFunction&lt; A &gt;::type function, const Expression&lt; A &gt; &amp;expression)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Expression</name>
      <anchorfile>a04240.html</anchorfile>
      <anchor>aecdcceaf150115c58443790b71474131</anchor>
      <arglist>(typename BinaryFunction&lt; A1, A2 &gt;::type function, const Expression&lt; A1 &gt; &amp;expression1, const Expression&lt; A2 &gt; &amp;expression2)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Expression</name>
      <anchorfile>a04240.html</anchorfile>
      <anchor>a732e26bb6867a8204cbca5cfe0f20b0b</anchor>
      <arglist>(typename TernaryFunction&lt; A1, A2, A3 &gt;::type function, const Expression&lt; A1 &gt; &amp;expression1, const Expression&lt; A2 &gt; &amp;expression2, const Expression&lt; A3 &gt; &amp;expression3)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Expression</name>
      <anchorfile>a04240.html</anchorfile>
      <anchor>a4eed658c5c5d6464d848091bc61782fa</anchor>
      <arglist>(const Expression&lt; A &gt; &amp;expression, T(A::*method)(typename MakeOptionalJacobian&lt; T, A &gt;::type) const)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Expression</name>
      <anchorfile>a04240.html</anchorfile>
      <anchor>a92d5051661047f5305cbae92c2ea6d20</anchor>
      <arglist>(const Expression&lt; A1 &gt; &amp;expression1, T(A1::*method)(const A2 &amp;, typename MakeOptionalJacobian&lt; T, A1 &gt;::type, typename MakeOptionalJacobian&lt; T, A2 &gt;::type) const, const Expression&lt; A2 &gt; &amp;expression2)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Expression</name>
      <anchorfile>a04240.html</anchorfile>
      <anchor>aa7287c6c5f779e61b8dee55370b0e32f</anchor>
      <arglist>(const Expression&lt; A1 &gt; &amp;expression1, T(A1::*method)(const A2 &amp;, const A3 &amp;, typename MakeOptionalJacobian&lt; T, A1 &gt;::type, typename MakeOptionalJacobian&lt; T, A2 &gt;::type, typename MakeOptionalJacobian&lt; T, A3 &gt;::type) const, const Expression&lt; A2 &gt; &amp;expression2, const Expression&lt; A3 &gt; &amp;expression3)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Expression</name>
      <anchorfile>a04240.html</anchorfile>
      <anchor>a2a3b27d773b8144ff4fddb75080ea0cf</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::set&lt; Key &gt;</type>
      <name>keys</name>
      <anchorfile>a04240.html</anchorfile>
      <anchor>a452a299e44efac69311ca5ed6d42833a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>dims</name>
      <anchorfile>a04240.html</anchorfile>
      <anchor>a708f557c8b95ab8d3f047852b9ad7267</anchor>
      <arglist>(std::map&lt; Key, int &gt; &amp;map) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>a04240.html</anchorfile>
      <anchor>a84143c345478e215a7534694deab27ba</anchor>
      <arglist>(const std::string &amp;s) const</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>value</name>
      <anchorfile>a04240.html</anchorfile>
      <anchor>acb8e427a376afb1eec8bcda057128c11</anchor>
      <arglist>(const Values &amp;values, boost::optional&lt; std::vector&lt; Matrix &gt; &amp; &gt; H=boost::none) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual boost::shared_ptr&lt; Expression &gt;</type>
      <name>clone</name>
      <anchorfile>a04240.html</anchorfile>
      <anchor>a368061c7550c0f7befb471e3eeaea792</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const boost::shared_ptr&lt; internal::ExpressionNode&lt; T &gt; &gt; &amp;</type>
      <name>root</name>
      <anchorfile>a04240.html</anchorfile>
      <anchor>a1720b8c722f71f07cb714422347fdb4b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>traceSize</name>
      <anchorfile>a04240.html</anchorfile>
      <anchor>afbfc8890e715ed28dcfc5e9e6077aebb</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Expression&lt; T &gt; &amp;</type>
      <name>operator+=</name>
      <anchorfile>a04240.html</anchorfile>
      <anchor>ae58fbcc07d76f062b6530592969915ff</anchor>
      <arglist>(const Expression&lt; T &gt; &amp;e)</arglist>
    </member>
    <member kind="typedef">
      <type>Expression&lt; T &gt;</type>
      <name>type</name>
      <anchorfile>a04240.html</anchorfile>
      <anchor>a18218921cb3aa2a55b8e73db8ff67aea</anchor>
      <arglist></arglist>
    </member>
    <class kind="struct">gtsam::Expression::BinaryFunction</class>
    <class kind="struct">gtsam::Expression::TernaryFunction</class>
    <class kind="struct">gtsam::Expression::UnaryFunction</class>
    <member kind="typedef" protection="protected">
      <type>std::pair&lt; KeyVector, FastVector&lt; int &gt; &gt;</type>
      <name>KeysAndDims</name>
      <anchorfile>a04240.html</anchorfile>
      <anchor>a6552097f187f99533d16013c7598f61b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>Expression</name>
      <anchorfile>a04240.html</anchorfile>
      <anchor>a3866041e611978ceb328ef4f61e086cc</anchor>
      <arglist>(const boost::shared_ptr&lt; internal::ExpressionNode&lt; T &gt; &gt; &amp;root)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>Expression</name>
      <anchorfile>a04240.html</anchorfile>
      <anchor>a1a57945bb87e069a703d5ee11c587826</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>T</type>
      <name>valueAndDerivatives</name>
      <anchorfile>a04240.html</anchorfile>
      <anchor>ac8c6cdfa4becdaf289fd6c9997343da3</anchor>
      <arglist>(const Values &amp;values, const KeyVector &amp;keys, const FastVector&lt; int &gt; &amp;dims, std::vector&lt; Matrix &gt; &amp;H) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>T</type>
      <name>traceExecution</name>
      <anchorfile>a04240.html</anchorfile>
      <anchor>afecaa44a9cecec402c4ffd858de147dc</anchor>
      <arglist>(const Values &amp;values, internal::ExecutionTrace&lt; T &gt; &amp;trace, void *traceStorage) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>T</type>
      <name>valueAndJacobianMap</name>
      <anchorfile>a04240.html</anchorfile>
      <anchor>a94e579dbb5e5f9ba0a3ae615d1224c9e</anchor>
      <arglist>(const Values &amp;values, internal::JacobianMap &amp;jacobians) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::ExpressionFactor</name>
    <filename>a04228.html</filename>
    <templarg>typename T</templarg>
    <base>gtsam::NoiseModelFactor</base>
    <member kind="function">
      <type></type>
      <name>ExpressionFactor</name>
      <anchorfile>a04228.html</anchorfile>
      <anchor>af495ef11db24cd68275af89229240881</anchor>
      <arglist>(const SharedNoiseModel &amp;noiseModel, const T &amp;measurement, const Expression&lt; T &gt; &amp;expression)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ExpressionFactor</name>
      <anchorfile>a04228.html</anchorfile>
      <anchor>ac58a9166bf69ea20ac66aecb8512cce7</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>const T &amp;</type>
      <name>measured</name>
      <anchorfile>a04228.html</anchorfile>
      <anchor>aa7cee9d336b73cd1a0ef1b096c4add7f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>a04228.html</anchorfile>
      <anchor>a1600ddd390f669adeb048db849bf2bf9</anchor>
      <arglist>(const std::string &amp;s=&quot;&quot;, const KeyFormatter &amp;keyFormatter=DefaultKeyFormatter) const override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>equals</name>
      <anchorfile>a04228.html</anchorfile>
      <anchor>aca56288a41761bbb584bf8dbba2ef754</anchor>
      <arglist>(const NonlinearFactor &amp;f, double tol) const override</arglist>
    </member>
    <member kind="function">
      <type>Vector</type>
      <name>unwhitenedError</name>
      <anchorfile>a04228.html</anchorfile>
      <anchor>a031b69cc6d80d4efe45cdec2e48b8bdb</anchor>
      <arglist>(const Values &amp;x, boost::optional&lt; std::vector&lt; Matrix &gt; &amp; &gt; H=boost::none) const override</arglist>
    </member>
    <member kind="function">
      <type>boost::shared_ptr&lt; GaussianFactor &gt;</type>
      <name>linearize</name>
      <anchorfile>a04228.html</anchorfile>
      <anchor>abce6eda8055ebb0fe6a3d391b037b85f</anchor>
      <arglist>(const Values &amp;x) const override</arglist>
    </member>
    <member kind="function">
      <type>gtsam::NonlinearFactor::shared_ptr</type>
      <name>clone</name>
      <anchorfile>a04228.html</anchorfile>
      <anchor>a2593715a5069b68e9f3c47771896ffa6</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>ExpressionFactor</name>
      <anchorfile>a04228.html</anchorfile>
      <anchor>ae72f1ff1db9bee9478d7d98c5384612f</anchor>
      <arglist>(const SharedNoiseModel &amp;noiseModel, const T &amp;measurement)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>initialize</name>
      <anchorfile>a04228.html</anchorfile>
      <anchor>afe7b64aa1ac8161c0765031f91618deb</anchor>
      <arglist>(const Expression&lt; T &gt; &amp;expression)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual Expression&lt; T &gt;</type>
      <name>expression</name>
      <anchorfile>a04228.html</anchorfile>
      <anchor>a2c03f13a150da9dfc0cd3aaf480eb69f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>T</type>
      <name>measured_</name>
      <anchorfile>a04228.html</anchorfile>
      <anchor>a5779a3714afe4df221b8b019cf82fbba</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Expression&lt; T &gt;</type>
      <name>expression_</name>
      <anchorfile>a04228.html</anchorfile>
      <anchor>a4c6b16e6167c0a10c83658195ac5da57</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>FastVector&lt; int &gt;</type>
      <name>dims_</name>
      <anchorfile>a04228.html</anchorfile>
      <anchor>a74e6d73bd82c3ea52a5b5878be6db725</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::ExpressionFactorGraph</name>
    <filename>a04276.html</filename>
    <base>gtsam::NonlinearFactorGraph</base>
    <member kind="function">
      <type>void</type>
      <name>addExpressionFactor</name>
      <anchorfile>a04276.html</anchorfile>
      <anchor>ac417241d59dbed10d320032a0c502929</anchor>
      <arglist>(const Expression&lt; T &gt; &amp;h, const T &amp;z, const SharedNoiseModel &amp;R)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addExpressionFactor</name>
      <anchorfile>a04276.html</anchorfile>
      <anchor>ac417241d59dbed10d320032a0c502929</anchor>
      <arglist>(const Expression&lt; T &gt; &amp;h, const T &amp;z, const SharedNoiseModel &amp;R)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::ExpressionFactorN</name>
    <filename>a04268.html</filename>
    <templarg>typename T</templarg>
    <templarg>typename... Args</templarg>
    <base>gtsam::ExpressionFactor</base>
    <member kind="function">
      <type></type>
      <name>~ExpressionFactorN</name>
      <anchorfile>a04268.html</anchorfile>
      <anchor>a7bb224b4beaec1b425728623c16202d3</anchor>
      <arglist>() override=default</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Expression&lt; T &gt;</type>
      <name>expression</name>
      <anchorfile>a04268.html</anchorfile>
      <anchor>a08d266d95905c232ef7bd1ce35ea183e</anchor>
      <arglist>(const ArrayNKeys &amp;keys) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>ExpressionFactorN</name>
      <anchorfile>a04268.html</anchorfile>
      <anchor>adb2c071818be1ec01a6e189c140c571e</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>ExpressionFactorN</name>
      <anchorfile>a04268.html</anchorfile>
      <anchor>af960d243b89bc6af96f8aa390c881fb6</anchor>
      <arglist>(const ArrayNKeys &amp;keys, const SharedNoiseModel &amp;noiseModel, const T &amp;measurement)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::internal::ExpressionNode</name>
    <filename>a04236.html</filename>
    <templarg>typename T</templarg>
  </compound>
  <compound kind="class">
    <name>gtsam::ExtendedKalmanFilter</name>
    <filename>a04280.html</filename>
    <templarg>class VALUE</templarg>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>a04280.html</anchorfile>
      <anchor>add36115e54062f7fcbb9e5f9c5644616</anchor>
      <arglist>(const std::string &amp;s=&quot;&quot;) const</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>predict</name>
      <anchorfile>a04280.html</anchorfile>
      <anchor>aa5abc72bbcb716e6bf7746cb18fc3f82</anchor>
      <arglist>(const NoiseModelFactor &amp;motionFactor)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>update</name>
      <anchorfile>a04280.html</anchorfile>
      <anchor>a2af26c404282581900319486f1669e84</anchor>
      <arglist>(const NoiseModelFactor &amp;measurementFactor)</arglist>
    </member>
    <member kind="function">
      <type>const JacobianFactor::shared_ptr</type>
      <name>Density</name>
      <anchorfile>a04280.html</anchorfile>
      <anchor>a54c50e01306dada7382926f62145526b</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::Factor</name>
    <filename>a03544.html</filename>
    <member kind="friend">
      <type>friend class</type>
      <name>boost::serialization::access</name>
      <anchorfile>a03544.html</anchorfile>
      <anchor>ac98d07dd8f7b70e16ccb9a01abf56b9c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>KeyVector &amp;</type>
      <name>keys</name>
      <anchorfile>a03544.html</anchorfile>
      <anchor>a3fd8a3bd4eb315a0a2186efd103689c6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>begin</name>
      <anchorfile>a03544.html</anchorfile>
      <anchor>a5596dcbc299a2e8eec813b78fbcfe933</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>end</name>
      <anchorfile>a03544.html</anchorfile>
      <anchor>a33597c74ba8db7396722165424fe5ec3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>Factor</name>
      <anchorfile>a03544.html</anchorfile>
      <anchor>a322a4d391be45b5909a65895fb7b023d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>Factor</name>
      <anchorfile>a03544.html</anchorfile>
      <anchor>aa3d2ef6b21961e708a4cbe10b55be59b</anchor>
      <arglist>(const CONTAINER &amp;keys)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>Factor</name>
      <anchorfile>a03544.html</anchorfile>
      <anchor>a70ff55886664229a25e29cf2a7bb1bb7</anchor>
      <arglist>(ITERATOR first, ITERATOR last)</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static Factor</type>
      <name>FromKeys</name>
      <anchorfile>a03544.html</anchorfile>
      <anchor>a5087976b9e398cd21305d33972feedad</anchor>
      <arglist>(const CONTAINER &amp;keys)</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static Factor</type>
      <name>FromIterators</name>
      <anchorfile>a03544.html</anchorfile>
      <anchor>a4157181261dc47002004d53c8b56f7bf</anchor>
      <arglist>(ITERATOR first, ITERATOR last)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>equals</name>
      <anchorfile>a03544.html</anchorfile>
      <anchor>a5cc62be07fbcde6678f8b346ab3a3f78</anchor>
      <arglist>(const This &amp;other, double tol=1e-9) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>print</name>
      <anchorfile>a03544.html</anchorfile>
      <anchor>a5388ca5d908a0cdfbfdd7dcd9021ade6</anchor>
      <arglist>(const std::string &amp;s=&quot;Factor&quot;, const KeyFormatter &amp;formatter=DefaultKeyFormatter) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>printKeys</name>
      <anchorfile>a03544.html</anchorfile>
      <anchor>a52cdda1b64d2d584b1012362963b76f3</anchor>
      <arglist>(const std::string &amp;s=&quot;Factor&quot;, const KeyFormatter &amp;formatter=DefaultKeyFormatter) const</arglist>
    </member>
    <member kind="function">
      <type>Key</type>
      <name>front</name>
      <anchorfile>a03544.html</anchorfile>
      <anchor>aeb63e9c85c567ee3b06b0d2ad0552a8a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Key</type>
      <name>back</name>
      <anchorfile>a03544.html</anchorfile>
      <anchor>ae38e5024d5b20aa06a5a6bd289e626c4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const_iterator</type>
      <name>find</name>
      <anchorfile>a03544.html</anchorfile>
      <anchor>a179a10d0319e87eda55d6925de0f5102</anchor>
      <arglist>(Key key) const</arglist>
    </member>
    <member kind="function">
      <type>const KeyVector &amp;</type>
      <name>keys</name>
      <anchorfile>a03544.html</anchorfile>
      <anchor>a03d71985cf81a0175a71d1ecf5279edb</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const_iterator</type>
      <name>begin</name>
      <anchorfile>a03544.html</anchorfile>
      <anchor>a17c02f11c35bf7768347cad4943f0f64</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const_iterator</type>
      <name>end</name>
      <anchorfile>a03544.html</anchorfile>
      <anchor>aa1f00e05967c0c278beec17af9cb0530</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>size</name>
      <anchorfile>a03544.html</anchorfile>
      <anchor>afac01740aefd22f4f90f49767010f811</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Factor</name>
      <anchorfile>a03544.html</anchorfile>
      <anchor>a6572d1c62aa0f0167fe6ebb0a77af107</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="typedef">
      <type>KeyVector::iterator</type>
      <name>iterator</name>
      <anchorfile>a03544.html</anchorfile>
      <anchor>acb069f38cc81bea20cecfad4070da59e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>KeyVector::const_iterator</type>
      <name>const_iterator</name>
      <anchorfile>a03544.html</anchorfile>
      <anchor>a71af7ad9e9474ebbcf2fdffc7f31251b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>KeyVector</type>
      <name>keys_</name>
      <anchorfile>a03544.html</anchorfile>
      <anchor>a10e886cc8b8a374e2fe864707e0b6278</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::FactorGraph</name>
    <filename>a03480.html</filename>
    <templarg>class FACTOR</templarg>
    <member kind="friend">
      <type>friend class</type>
      <name>boost::serialization::access</name>
      <anchorfile>a03480.html</anchorfile>
      <anchor>ac98d07dd8f7b70e16ccb9a01abf56b9c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>nrFactors</name>
      <anchorfile>a03480.html</anchorfile>
      <anchor>a761f1022dadf60e2cacca304ab0533b4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>KeySet</type>
      <name>keys</name>
      <anchorfile>a03480.html</anchorfile>
      <anchor>a0c4667de76265a06cc6f74b1f3b25051</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>KeyVector</type>
      <name>keyVector</name>
      <anchorfile>a03480.html</anchorfile>
      <anchor>a3b4d9bbaceeb9043ab7c20d4778b69c5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>exists</name>
      <anchorfile>a03480.html</anchorfile>
      <anchor>acbf8cdf50816d4a0571f6b9b6254f9ce</anchor>
      <arglist>(size_t idx) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>FactorGraph</name>
      <anchorfile>a03480.html</anchorfile>
      <anchor>a42db0a1062eb6c223b0a186a9d34cb4b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>FactorGraph</name>
      <anchorfile>a03480.html</anchorfile>
      <anchor>a63a80ba5a22fee5725d0efa75080cdfb</anchor>
      <arglist>(ITERATOR firstFactor, ITERATOR lastFactor)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>FactorGraph</name>
      <anchorfile>a03480.html</anchorfile>
      <anchor>a37b5e74d2c3711906f57982b4512351f</anchor>
      <arglist>(const CONTAINER &amp;factors)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reserve</name>
      <anchorfile>a03480.html</anchorfile>
      <anchor>afea8c7bf4fd19ccc1547be3a5d1834f6</anchor>
      <arglist>(size_t size)</arglist>
    </member>
    <member kind="function">
      <type>IsDerived&lt; DERIVEDFACTOR &gt;</type>
      <name>push_back</name>
      <anchorfile>a03480.html</anchorfile>
      <anchor>a1bd7154e74538b5934fc616bb5ef7281</anchor>
      <arglist>(boost::shared_ptr&lt; DERIVEDFACTOR &gt; factor)</arglist>
    </member>
    <member kind="function">
      <type>IsDerived&lt; DERIVEDFACTOR &gt;</type>
      <name>emplace_shared</name>
      <anchorfile>a03480.html</anchorfile>
      <anchor>a47695cc70eddbdfe333190267f322587</anchor>
      <arglist>(Args &amp;&amp;... args)</arglist>
    </member>
    <member kind="function">
      <type>IsDerived&lt; DERIVEDFACTOR &gt;</type>
      <name>push_back</name>
      <anchorfile>a03480.html</anchorfile>
      <anchor>ad52d3a49c561af43dfc8964d7b429a3b</anchor>
      <arglist>(const DERIVEDFACTOR &amp;factor)</arglist>
    </member>
    <member kind="function">
      <type>IsDerived&lt; DERIVEDFACTOR &gt;</type>
      <name>add</name>
      <anchorfile>a03480.html</anchorfile>
      <anchor>abfdae5dfdd83614797463fe4171b18a5</anchor>
      <arglist>(boost::shared_ptr&lt; DERIVEDFACTOR &gt; factor)</arglist>
    </member>
    <member kind="function">
      <type>std::enable_if&lt; std::is_base_of&lt; FactorType, DERIVEDFACTOR &gt;::value, boost::assign::list_inserter&lt; RefCallPushBack&lt; This &gt; &gt; &gt;::type</type>
      <name>operator+=</name>
      <anchorfile>a03480.html</anchorfile>
      <anchor>aafd0f0ba6c282b6dff10ebae9b5608d7</anchor>
      <arglist>(boost::shared_ptr&lt; DERIVEDFACTOR &gt; factor)</arglist>
    </member>
    <member kind="function">
      <type>HasDerivedElementType&lt; ITERATOR &gt;</type>
      <name>push_back</name>
      <anchorfile>a03480.html</anchorfile>
      <anchor>abf82d480691d503a5cf78eb13c2c45f0</anchor>
      <arglist>(ITERATOR firstFactor, ITERATOR lastFactor)</arglist>
    </member>
    <member kind="function">
      <type>HasDerivedValueType&lt; ITERATOR &gt;</type>
      <name>push_back</name>
      <anchorfile>a03480.html</anchorfile>
      <anchor>a85e70596230585b20b977d65c5bd5402</anchor>
      <arglist>(ITERATOR firstFactor, ITERATOR lastFactor)</arglist>
    </member>
    <member kind="function">
      <type>HasDerivedElementType&lt; CONTAINER &gt;</type>
      <name>push_back</name>
      <anchorfile>a03480.html</anchorfile>
      <anchor>a9e0f98593e999e4ea7b9253880fc73b3</anchor>
      <arglist>(const CONTAINER &amp;container)</arglist>
    </member>
    <member kind="function">
      <type>HasDerivedValueType&lt; CONTAINER &gt;</type>
      <name>push_back</name>
      <anchorfile>a03480.html</anchorfile>
      <anchor>a3fb5e47c751f8c2a8940546a7cf27957</anchor>
      <arglist>(const CONTAINER &amp;container)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add</name>
      <anchorfile>a03480.html</anchorfile>
      <anchor>a243182115ecfb081a1605fea939f86f4</anchor>
      <arglist>(const FACTOR_OR_CONTAINER &amp;factorOrContainer)</arglist>
    </member>
    <member kind="function">
      <type>boost::assign::list_inserter&lt; CRefCallPushBack&lt; This &gt; &gt;</type>
      <name>operator+=</name>
      <anchorfile>a03480.html</anchorfile>
      <anchor>aaa5dcf7ea01e1c9e2b65cda2e7576726</anchor>
      <arglist>(const FACTOR_OR_CONTAINER &amp;factorOrContainer)</arglist>
    </member>
    <member kind="function">
      <type>std::enable_if&lt; std::is_base_of&lt; This, typenameCLIQUE::FactorGraphType &gt;::value &gt;::type</type>
      <name>push_back</name>
      <anchorfile>a03480.html</anchorfile>
      <anchor>a55f58c8ba0c0765dcc43e16ef03ca19e</anchor>
      <arglist>(const BayesTree&lt; CLIQUE &gt; &amp;bayesTree)</arglist>
    </member>
    <member kind="function">
      <type>FactorIndices</type>
      <name>add_factors</name>
      <anchorfile>a03480.html</anchorfile>
      <anchor>a1aa648d53357d7638f78611144cf5b8b</anchor>
      <arglist>(const CONTAINER &amp;factors, bool useEmptySlots=false)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>print</name>
      <anchorfile>a03480.html</anchorfile>
      <anchor>a06c9c6d855c390743bd4a4472c730687</anchor>
      <arglist>(const std::string &amp;s=&quot;FactorGraph&quot;, const KeyFormatter &amp;formatter=DefaultKeyFormatter) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>equals</name>
      <anchorfile>a03480.html</anchorfile>
      <anchor>aacdf24691d25e1e93ca6b924465b7a35</anchor>
      <arglist>(const This &amp;fg, double tol=1e-9) const</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>size</name>
      <anchorfile>a03480.html</anchorfile>
      <anchor>a76fb453800c9ac164bef864782733403</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>empty</name>
      <anchorfile>a03480.html</anchorfile>
      <anchor>a0ed8834089b31ef96888643af4731a8a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const sharedFactor</type>
      <name>at</name>
      <anchorfile>a03480.html</anchorfile>
      <anchor>aec104a9847783a29065fd4d24f072b7a</anchor>
      <arglist>(size_t i) const</arglist>
    </member>
    <member kind="function">
      <type>sharedFactor &amp;</type>
      <name>at</name>
      <anchorfile>a03480.html</anchorfile>
      <anchor>a52b3ab1ea102ab17c1fa9a74c9f42329</anchor>
      <arglist>(size_t i)</arglist>
    </member>
    <member kind="function">
      <type>const sharedFactor</type>
      <name>operator[]</name>
      <anchorfile>a03480.html</anchorfile>
      <anchor>ad00637b3f124aec8b4047faea5b5647b</anchor>
      <arglist>(size_t i) const</arglist>
    </member>
    <member kind="function">
      <type>sharedFactor &amp;</type>
      <name>operator[]</name>
      <anchorfile>a03480.html</anchorfile>
      <anchor>a4f193587e68cef1335bcfb87b353d0ab</anchor>
      <arglist>(size_t i)</arglist>
    </member>
    <member kind="function">
      <type>const_iterator</type>
      <name>begin</name>
      <anchorfile>a03480.html</anchorfile>
      <anchor>abcaeffeae20930806f064f8413689c22</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const_iterator</type>
      <name>end</name>
      <anchorfile>a03480.html</anchorfile>
      <anchor>a94a257708f3530799e24d21f3125e181</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>sharedFactor</type>
      <name>front</name>
      <anchorfile>a03480.html</anchorfile>
      <anchor>a8aad182ded37c5add184e0113ec9ede9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>sharedFactor</type>
      <name>back</name>
      <anchorfile>a03480.html</anchorfile>
      <anchor>a37859ce7d210d593be80f625eceba620</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>begin</name>
      <anchorfile>a03480.html</anchorfile>
      <anchor>abaf0875f55936063d96c507de9e9255a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>end</name>
      <anchorfile>a03480.html</anchorfile>
      <anchor>ad6e1c6a2b56c2158afb28a58ab560e44</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resize</name>
      <anchorfile>a03480.html</anchorfile>
      <anchor>a231dd81b4751a9bccc3c89f35f76961e</anchor>
      <arglist>(size_t size)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>remove</name>
      <anchorfile>a03480.html</anchorfile>
      <anchor>a38468469269d7b6530cf4d32b4e462d1</anchor>
      <arglist>(size_t i)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>replace</name>
      <anchorfile>a03480.html</anchorfile>
      <anchor>aa706ee0e285f6c1a38e6a4446fe9ea4e</anchor>
      <arglist>(size_t index, sharedFactor factor)</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>erase</name>
      <anchorfile>a03480.html</anchorfile>
      <anchor>a22f324974f6e3380c54d1d69c71bc7fb</anchor>
      <arglist>(iterator item)</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>erase</name>
      <anchorfile>a03480.html</anchorfile>
      <anchor>a2825a68630a0547e1bfd5ba0cdf1de61</anchor>
      <arglist>(iterator first, iterator last)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~FactorGraph</name>
      <anchorfile>a03480.html</anchorfile>
      <anchor>afb3841eca3ce0a8b574d72e4107a342a</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="typedef">
      <type>FACTOR</type>
      <name>FactorType</name>
      <anchorfile>a03480.html</anchorfile>
      <anchor>aa54fb0b66fd8fee9f3c1f2844cf3edef</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; FACTOR &gt;</type>
      <name>sharedFactor</name>
      <anchorfile>a03480.html</anchorfile>
      <anchor>ac9bfc88025d21ff01b7e9dc609ba0b0e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>FastVector&lt; sharedFactor &gt;</type>
      <name>factors_</name>
      <anchorfile>a03480.html</anchorfile>
      <anchor>ae0c75f68e3ebc37cc4511285b12c33fc</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::noiseModel::mEstimator::Fair</name>
    <filename>a03840.html</filename>
    <base>gtsam::noiseModel::mEstimator::Base</base>
    <member kind="friend">
      <type>friend class</type>
      <name>boost::serialization::access</name>
      <anchorfile>a03840.html</anchorfile>
      <anchor>ac98d07dd8f7b70e16ccb9a01abf56b9c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>gtsam::internal::FastDefaultAllocator</name>
    <filename>a02472.html</filename>
    <templarg>typename T</templarg>
  </compound>
  <compound kind="struct">
    <name>gtsam::internal::FastDefaultVectorAllocator</name>
    <filename>a02476.html</filename>
    <templarg>typename T</templarg>
  </compound>
  <compound kind="class">
    <name>gtsam::FastList</name>
    <filename>a02480.html</filename>
    <templarg>typename VALUE</templarg>
    <member kind="function">
      <type></type>
      <name>FastList</name>
      <anchorfile>a02480.html</anchorfile>
      <anchor>a4ddfad84c21aa8e028650085d28e64e1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>FastList</name>
      <anchorfile>a02480.html</anchorfile>
      <anchor>a4b392c0cdea93c6af52956ccf6282f44</anchor>
      <arglist>(INPUTITERATOR first, INPUTITERATOR last)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>FastList</name>
      <anchorfile>a02480.html</anchorfile>
      <anchor>a64ede4dd260eb040bf895828796af872</anchor>
      <arglist>(const FastList&lt; VALUE &gt; &amp;x)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>FastList</name>
      <anchorfile>a02480.html</anchorfile>
      <anchor>ad71cc6bc403f46960f54c75bc956093f</anchor>
      <arglist>(const Base &amp;x)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator std::list&lt; VALUE &gt;</name>
      <anchorfile>a02480.html</anchorfile>
      <anchor>a7c6e1a66ccf6adc94022389c3d81af55</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>boost::serialization::access</name>
      <anchorfile>a02480.html</anchorfile>
      <anchor>ac98d07dd8f7b70e16ccb9a01abf56b9c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::FastMap</name>
    <filename>a02484.html</filename>
    <templarg>typename KEY</templarg>
    <templarg>typename VALUE</templarg>
    <member kind="function">
      <type></type>
      <name>FastMap</name>
      <anchorfile>a02484.html</anchorfile>
      <anchor>aa2c7d3ae2440cc9e7f4cbbcd6cfdfbf5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>FastMap</name>
      <anchorfile>a02484.html</anchorfile>
      <anchor>a44f4df011d0ec4151435413fe4633a76</anchor>
      <arglist>(INPUTITERATOR first, INPUTITERATOR last)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>FastMap</name>
      <anchorfile>a02484.html</anchorfile>
      <anchor>a882d34220cdc01fe4aa83ea2bbf29ce6</anchor>
      <arglist>(const FastMap&lt; KEY, VALUE &gt; &amp;x)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>FastMap</name>
      <anchorfile>a02484.html</anchorfile>
      <anchor>a2e756b7ee7f04a4e9d890ce38d388d61</anchor>
      <arglist>(const Base &amp;x)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator std::map&lt; KEY, VALUE &gt;</name>
      <anchorfile>a02484.html</anchorfile>
      <anchor>a64addaed169f9a54a4cba54da5c9571d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>insert2</name>
      <anchorfile>a02484.html</anchorfile>
      <anchor>a5c254b6b3b877e2987970bc08b2a6c89</anchor>
      <arglist>(const KEY &amp;key, const VALUE &amp;val)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>exists</name>
      <anchorfile>a02484.html</anchorfile>
      <anchor>ab2d8e8a8da5e66cffdbf553bf2ea7df0</anchor>
      <arglist>(const KEY &amp;e) const</arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>boost::serialization::access</name>
      <anchorfile>a02484.html</anchorfile>
      <anchor>ac98d07dd8f7b70e16ccb9a01abf56b9c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::FastSet</name>
    <filename>a02488.html</filename>
    <templarg>typename VALUE</templarg>
    <member kind="function">
      <type></type>
      <name>FastSet</name>
      <anchorfile>a02488.html</anchorfile>
      <anchor>a197d0827760a4c5368587771c75afe5a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>FastSet</name>
      <anchorfile>a02488.html</anchorfile>
      <anchor>a907796ca5a60503fce8a84b970289efd</anchor>
      <arglist>(INPUTITERATOR first, INPUTITERATOR last)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>FastSet</name>
      <anchorfile>a02488.html</anchorfile>
      <anchor>a6fe5c76facd1eab99fe84c19c68d9e5c</anchor>
      <arglist>(const INPUTCONTAINER &amp;container)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>FastSet</name>
      <anchorfile>a02488.html</anchorfile>
      <anchor>a7f6cb2d27052a33035f135e837b51c47</anchor>
      <arglist>(const FastSet&lt; VALUE &gt; &amp;x)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>FastSet</name>
      <anchorfile>a02488.html</anchorfile>
      <anchor>acd2dc81b5518151095ba9aef2eb4d81d</anchor>
      <arglist>(const Base &amp;x)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator std::set&lt; VALUE &gt;</name>
      <anchorfile>a02488.html</anchorfile>
      <anchor>af4d995c3e8cbeba6cb06971e3a186e9e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>exists</name>
      <anchorfile>a02488.html</anchorfile>
      <anchor>a98754bce44e06e7360da502d4383840a</anchor>
      <arglist>(const VALUE &amp;e) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>a02488.html</anchorfile>
      <anchor>a1ef04a37a0fb1bfe861a7608d84b0737</anchor>
      <arglist>(const std::string &amp;str=&quot;&quot;) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>equals</name>
      <anchorfile>a02488.html</anchorfile>
      <anchor>aa0997bdf65b508a83fcd3a0abc6211ed</anchor>
      <arglist>(const FastSet&lt; VALUE &gt; &amp;other, double tol=1e-9) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>merge</name>
      <anchorfile>a02488.html</anchorfile>
      <anchor>a1000ebc2e2248c219d34b8232905be68</anchor>
      <arglist>(const FastSet &amp;other)</arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>boost::serialization::access</name>
      <anchorfile>a02488.html</anchorfile>
      <anchor>ac98d07dd8f7b70e16ccb9a01abf56b9c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::Values::Filtered</name>
    <filename>a04528.html</filename>
    <templarg>class ValueType</templarg>
    <member kind="function">
      <type>size_t</type>
      <name>size</name>
      <anchorfile>a04528.html</anchorfile>
      <anchor>a548c4c95896dca5eea83d844b67e8b79</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="typedef">
      <type>_ValuesKeyValuePair&lt; ValueType &gt;</type>
      <name>KeyValuePair</name>
      <anchorfile>a04528.html</anchorfile>
      <anchor>a816979e5f4619b22258fe2abd87da92a</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::FitBasis</name>
    <filename>a02888.html</filename>
    <templarg>class Basis</templarg>
    <member kind="function">
      <type></type>
      <name>FitBasis</name>
      <anchorfile>a02888.html</anchorfile>
      <anchor>adba0f358e295a1def2dbe076e9526566</anchor>
      <arglist>(const Sequence &amp;sequence, const SharedNoiseModel &amp;model, size_t N)</arglist>
    </member>
    <member kind="function">
      <type>Parameters</type>
      <name>parameters</name>
      <anchorfile>a02888.html</anchorfile>
      <anchor>a9fff77639aab8e1fb67e226ac84f6701</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static NonlinearFactorGraph</type>
      <name>NonlinearGraph</name>
      <anchorfile>a02888.html</anchorfile>
      <anchor>a9442ab6aec5ec45fb14d4b3eaeeb3a85</anchor>
      <arglist>(const Sequence &amp;sequence, const SharedNoiseModel &amp;model, size_t N)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static GaussianFactorGraph::shared_ptr</type>
      <name>LinearGraph</name>
      <anchorfile>a02888.html</anchorfile>
      <anchor>ade0964cca8941494bf8fd1f54250d110</anchor>
      <arglist>(const Sequence &amp;sequence, const SharedNoiseModel &amp;model, size_t N)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>gtsam::FixedDimension</name>
    <filename>a02580.html</filename>
    <templarg>typename T</templarg>
  </compound>
  <compound kind="class">
    <name>gtsam::FixedLagSmoother</name>
    <filename>a05192.html</filename>
    <member kind="function">
      <type></type>
      <name>FixedLagSmoother</name>
      <anchorfile>a05192.html</anchorfile>
      <anchor>a9384ec1aab2b6062b1de20efda8f0ac9</anchor>
      <arglist>(double smootherLag=0.0)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~FixedLagSmoother</name>
      <anchorfile>a05192.html</anchorfile>
      <anchor>a6189c4ca8f70e3f4d171b0b702a6d404</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>print</name>
      <anchorfile>a05192.html</anchorfile>
      <anchor>a247af195b8fc6c21f775d07a6f1a093d</anchor>
      <arglist>(const std::string &amp;s=&quot;FixedLagSmoother:\n&quot;, const KeyFormatter &amp;keyFormatter=DefaultKeyFormatter) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>equals</name>
      <anchorfile>a05192.html</anchorfile>
      <anchor>a9ab7d2581a2552c83add66d586abcb8d</anchor>
      <arglist>(const FixedLagSmoother &amp;rhs, double tol=1e-9) const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>smootherLag</name>
      <anchorfile>a05192.html</anchorfile>
      <anchor>a2567f13353bd5253181965961390d1c2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double &amp;</type>
      <name>smootherLag</name>
      <anchorfile>a05192.html</anchorfile>
      <anchor>a51c707346574a844aae5efb31ec2cdf8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const KeyTimestampMap &amp;</type>
      <name>timestamps</name>
      <anchorfile>a05192.html</anchorfile>
      <anchor>ae4dd5f6ff989cf8e0db935786a32bf28</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual Result</type>
      <name>update</name>
      <anchorfile>a05192.html</anchorfile>
      <anchor>a7cbea977618f12e63f6364adcc7145e8</anchor>
      <arglist>(const NonlinearFactorGraph &amp;newFactors=NonlinearFactorGraph(), const Values &amp;newTheta=Values(), const KeyTimestampMap &amp;timestamps=KeyTimestampMap(), const FactorIndices &amp;factorsToRemove=FactorIndices())=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual Values</type>
      <name>calculateEstimate</name>
      <anchorfile>a05192.html</anchorfile>
      <anchor>aaaad70c43b93a340440d465299f99664</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; FixedLagSmoother &gt;</type>
      <name>shared_ptr</name>
      <anchorfile>a05192.html</anchorfile>
      <anchor>ae7df36b319e0d567b728f531de5458ca</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::map&lt; Key, double &gt;</type>
      <name>KeyTimestampMap</name>
      <anchorfile>a05192.html</anchorfile>
      <anchor>a7778c79a5998ac7c1768ebc1fba2e76f</anchor>
      <arglist></arglist>
    </member>
    <class kind="struct">gtsam::FixedLagSmoother::Result</class>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>updateKeyTimestampMap</name>
      <anchorfile>a05192.html</anchorfile>
      <anchor>ab6e58323e71c50b7b2ab44b713efa291</anchor>
      <arglist>(const KeyTimestampMap &amp;newTimestamps)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>eraseKeyTimestampMap</name>
      <anchorfile>a05192.html</anchorfile>
      <anchor>abf3da9a02bd1f7608eeec189156fa3c5</anchor>
      <arglist>(const KeyVector &amp;keys)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>double</type>
      <name>getCurrentTimestamp</name>
      <anchorfile>a05192.html</anchorfile>
      <anchor>aca4ec2f97e4e5c33ae0f3e4a588d767f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>KeyVector</type>
      <name>findKeysBefore</name>
      <anchorfile>a05192.html</anchorfile>
      <anchor>a98da76e547a0fecb587ba7438867c5f0</anchor>
      <arglist>(double timestamp) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>KeyVector</type>
      <name>findKeysAfter</name>
      <anchorfile>a05192.html</anchorfile>
      <anchor>ae5758e1be8478b3c35775f39a8b9132a</anchor>
      <arglist>(double timestamp) const</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>smootherLag_</name>
      <anchorfile>a05192.html</anchorfile>
      <anchor>a0df6ccadb55d8b5b85416e3ba3f216ac</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>TimestampKeyMap</type>
      <name>timestampKeyMap_</name>
      <anchorfile>a05192.html</anchorfile>
      <anchor>a3188bafd0ad41debfdc66abd10354fc5</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>gtsam::internal::FixedSizeMatrix</name>
    <filename>a02608.html</filename>
    <templarg>class Y</templarg>
    <templarg>class X</templarg>
  </compound>
  <compound kind="class">
    <name>gtsam::FixedVector</name>
    <filename>a04996.html</filename>
    <templarg>size_t N</templarg>
    <member kind="function">
      <type></type>
      <name>FixedVector</name>
      <anchorfile>a04996.html</anchorfile>
      <anchor>a0eefda65880b74607e047f079440c1a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>FixedVector</name>
      <anchorfile>a04996.html</anchorfile>
      <anchor>a3add84cf214e079640138fdd091a99b9</anchor>
      <arglist>(const FixedVector &amp;v)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>FixedVector</name>
      <anchorfile>a04996.html</anchorfile>
      <anchor>a308e4746e22b126d0b56125f13383cd4</anchor>
      <arglist>(const Vector &amp;v)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>FixedVector</name>
      <anchorfile>a04996.html</anchorfile>
      <anchor>affe70ad8bdd81fdf8244cb717ddcdc87</anchor>
      <arglist>(const double *values)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static FixedVector</type>
      <name>repeat</name>
      <anchorfile>a04996.html</anchorfile>
      <anchor>afcd08d1d982f9dcf6419d02663049f47</anchor>
      <arglist>(double value)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static FixedVector</type>
      <name>delta</name>
      <anchorfile>a04996.html</anchorfile>
      <anchor>a4c9be1322779f0231d2e5bd2a254e165</anchor>
      <arglist>(size_t i, double value)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static FixedVector</type>
      <name>basis</name>
      <anchorfile>a04996.html</anchorfile>
      <anchor>a3378d2de0c852bc10894da1568d1b4e5</anchor>
      <arglist>(size_t i)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static FixedVector</type>
      <name>zero</name>
      <anchorfile>a04996.html</anchorfile>
      <anchor>a5a612420e532aa23ada7cbcd9f4534dc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static FixedVector</type>
      <name>ones</name>
      <anchorfile>a04996.html</anchorfile>
      <anchor>af86c1747285f25a20916901e9bc510ff</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::FourierBasis</name>
    <filename>a02892.html</filename>
    <base>Basis&lt; FourierBasis &gt;</base>
    <member kind="function" static="yes">
      <type>static Weights</type>
      <name>CalculateWeights</name>
      <anchorfile>a02892.html</anchorfile>
      <anchor>a64fecbc7c52f1de9019137a3c7321b02</anchor>
      <arglist>(size_t N, double x)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Weights</type>
      <name>CalculateWeights</name>
      <anchorfile>a02892.html</anchorfile>
      <anchor>ac3de8e2182f9a04ab5b56398d6f18914</anchor>
      <arglist>(size_t N, double x, double a, double b)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static DiffMatrix</type>
      <name>DifferentiationMatrix</name>
      <anchorfile>a02892.html</anchorfile>
      <anchor>a494419be86419c6c9ced7630163adcdb</anchor>
      <arglist>(size_t N)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Weights</type>
      <name>DerivativeWeights</name>
      <anchorfile>a02892.html</anchorfile>
      <anchor>a4955a99e42eda2d5d6113bf192fb3e5e</anchor>
      <arglist>(size_t N, double x)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Weights</type>
      <name>DerivativeWeights</name>
      <anchorfile>a02892.html</anchorfile>
      <anchor>ac0f16df32079683be3138b37a1498167</anchor>
      <arglist>(size_t N, double x, double a, double b)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::FrobeniusBetweenFactor</name>
    <filename>a04772.html</filename>
    <templarg>class Rot</templarg>
    <base>NoiseModelFactor2&lt; Rot, Rot &gt;</base>
    <member kind="function">
      <type></type>
      <name>FrobeniusBetweenFactor</name>
      <anchorfile>a04772.html</anchorfile>
      <anchor>a02cf911776d2df206368c7cbe3a4acf6</anchor>
      <arglist>(Key j1, Key j2, const Rot &amp;R12, const SharedNoiseModel &amp;model=nullptr)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>a04772.html</anchorfile>
      <anchor>a13f1ed22f6fba57c2093f0f4b9d7278a</anchor>
      <arglist>(const std::string &amp;s, const KeyFormatter &amp;keyFormatter=DefaultKeyFormatter) const override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>equals</name>
      <anchorfile>a04772.html</anchorfile>
      <anchor>a7adeaf50a7919974d7c101c212a88bf7</anchor>
      <arglist>(const NonlinearFactor &amp;expected, double tol=1e-9) const override</arglist>
    </member>
    <member kind="function">
      <type>Vector</type>
      <name>evaluateError</name>
      <anchorfile>a04772.html</anchorfile>
      <anchor>a400adf48210c737a2fc44a26864fe7f9</anchor>
      <arglist>(const Rot &amp;R1, const Rot &amp;R2, boost::optional&lt; Matrix &amp; &gt; H1=boost::none, boost::optional&lt; Matrix &amp; &gt; H2=boost::none) const override</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>FrobeniusBetweenFactor</name>
      <anchorfile>a04772.html</anchorfile>
      <anchor>a02cf911776d2df206368c7cbe3a4acf6</anchor>
      <arglist>(Key j1, Key j2, const Rot &amp;R12, const SharedNoiseModel &amp;model=nullptr)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>a04772.html</anchorfile>
      <anchor>a13f1ed22f6fba57c2093f0f4b9d7278a</anchor>
      <arglist>(const std::string &amp;s, const KeyFormatter &amp;keyFormatter=DefaultKeyFormatter) const override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>equals</name>
      <anchorfile>a04772.html</anchorfile>
      <anchor>a7adeaf50a7919974d7c101c212a88bf7</anchor>
      <arglist>(const NonlinearFactor &amp;expected, double tol=1e-9) const override</arglist>
    </member>
    <member kind="function">
      <type>Vector</type>
      <name>evaluateError</name>
      <anchorfile>a04772.html</anchorfile>
      <anchor>a400adf48210c737a2fc44a26864fe7f9</anchor>
      <arglist>(const Rot &amp;R1, const Rot &amp;R2, boost::optional&lt; Matrix &amp; &gt; H1=boost::none, boost::optional&lt; Matrix &amp; &gt; H2=boost::none) const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::FrobeniusFactor</name>
    <filename>a04768.html</filename>
    <templarg>class Rot</templarg>
    <base>NoiseModelFactor2&lt; Rot, Rot &gt;</base>
    <member kind="function">
      <type></type>
      <name>FrobeniusFactor</name>
      <anchorfile>a04768.html</anchorfile>
      <anchor>a8b47df22e67b45c126cda7fd1bcb99c2</anchor>
      <arglist>(Key j1, Key j2, const SharedNoiseModel &amp;model=nullptr)</arglist>
    </member>
    <member kind="function">
      <type>Vector</type>
      <name>evaluateError</name>
      <anchorfile>a04768.html</anchorfile>
      <anchor>a1effe4dc271d84ef730a189bc3cd413e</anchor>
      <arglist>(const Rot &amp;R1, const Rot &amp;R2, boost::optional&lt; Matrix &amp; &gt; H1=boost::none, boost::optional&lt; Matrix &amp; &gt; H2=boost::none) const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::FrobeniusPrior</name>
    <filename>a04764.html</filename>
    <templarg>class Rot</templarg>
    <base>NoiseModelFactor1&lt; Rot &gt;</base>
    <member kind="function">
      <type></type>
      <name>FrobeniusPrior</name>
      <anchorfile>a04764.html</anchorfile>
      <anchor>aa0ac1b3763f16a24a3a5c75e0b968b7c</anchor>
      <arglist>(Key j, const MatrixNN &amp;M, const SharedNoiseModel &amp;model=nullptr)</arglist>
    </member>
    <member kind="function">
      <type>Vector</type>
      <name>evaluateError</name>
      <anchorfile>a04764.html</anchorfile>
      <anchor>aef850900d2b1b15beffebd6c7af8084b</anchor>
      <arglist>(const Rot &amp;R, boost::optional&lt; Matrix &amp; &gt; H=boost::none) const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::FullIMUFactor</name>
    <filename>a05436.html</filename>
    <templarg>class POSE</templarg>
    <base>NoiseModelFactor2&lt; POSE, POSE &gt;</base>
    <member kind="function">
      <type></type>
      <name>FullIMUFactor</name>
      <anchorfile>a05436.html</anchorfile>
      <anchor>a09dbb0db4e8235d13c6f69456d8bb815</anchor>
      <arglist>(const Vector3 &amp;accel, const Vector3 &amp;gyro, double dt, const Key &amp;key1, const Key &amp;key2, const SharedNoiseModel &amp;model)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>FullIMUFactor</name>
      <anchorfile>a05436.html</anchorfile>
      <anchor>a00bfde0187882ed21bae98841f8432a3</anchor>
      <arglist>(const Vector6 &amp;imu, double dt, const Key &amp;key1, const Key &amp;key2, const SharedNoiseModel &amp;model)</arglist>
    </member>
    <member kind="function">
      <type>gtsam::NonlinearFactor::shared_ptr</type>
      <name>clone</name>
      <anchorfile>a05436.html</anchorfile>
      <anchor>a30fb1e63ff04afdaff054eac93b465eb</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>equals</name>
      <anchorfile>a05436.html</anchorfile>
      <anchor>afff47728dca181bbfbd023bb04b38de4</anchor>
      <arglist>(const NonlinearFactor &amp;e, double tol=1e-9) const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>a05436.html</anchorfile>
      <anchor>ad59589ead8ce572745afb6e9b7a3660f</anchor>
      <arglist>(const std::string &amp;s=&quot;&quot;, const gtsam::KeyFormatter &amp;formatter=gtsam::DefaultKeyFormatter) const override</arglist>
    </member>
    <member kind="function">
      <type>Vector</type>
      <name>evaluateError</name>
      <anchorfile>a05436.html</anchorfile>
      <anchor>aeee3f005b255adb38ba9aa58610fc9eb</anchor>
      <arglist>(const PoseRTV &amp;x1, const PoseRTV &amp;x2, boost::optional&lt; Matrix &amp; &gt; H1=boost::none, boost::optional&lt; Matrix &amp; &gt; H2=boost::none) const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Vector</type>
      <name>evaluateError</name>
      <anchorfile>a05436.html</anchorfile>
      <anchor>a8ff0505faddb72b3e7645e781c7b039b</anchor>
      <arglist>(const Pose3 &amp;x1, const Pose3 &amp;x2, boost::optional&lt; Matrix &amp; &gt; H1=boost::none, boost::optional&lt; Matrix &amp; &gt; H2=boost::none) const</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Vector3</type>
      <name>accel_</name>
      <anchorfile>a05436.html</anchorfile>
      <anchor>a703f0064742c57e97f80d5ecc72e6b22</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::FunctorizedFactor</name>
    <filename>a04284.html</filename>
    <templarg>typename R</templarg>
    <templarg>typename T</templarg>
    <base>NoiseModelFactor1&lt; T &gt;</base>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>a04284.html</anchorfile>
      <anchor>a6012ac4008a4db8f4b5da04d4bd1acbb</anchor>
      <arglist>(const std::string &amp;s=&quot;&quot;, const KeyFormatter &amp;keyFormatter=DefaultKeyFormatter) const override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>equals</name>
      <anchorfile>a04284.html</anchorfile>
      <anchor>a3f7a93560299fa6eed82146049f023b3</anchor>
      <arglist>(const NonlinearFactor &amp;other, double tol=1e-9) const override</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>FunctorizedFactor</name>
      <anchorfile>a04284.html</anchorfile>
      <anchor>a7822d3f4c15697b3a530e97343a96e49</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>FunctorizedFactor</name>
      <anchorfile>a04284.html</anchorfile>
      <anchor>a060973f48fd727833d0dda9ef55d4dc4</anchor>
      <arglist>(Key key, const R &amp;z, const SharedNoiseModel &amp;model, const std::function&lt; R(T, boost::optional&lt; Matrix &amp; &gt;)&gt; func)</arglist>
    </member>
    <member kind="function">
      <type>NonlinearFactor::shared_ptr</type>
      <name>clone</name>
      <anchorfile>a04284.html</anchorfile>
      <anchor>af8e12562663534fc7a83ec6f104beb72</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>Vector</type>
      <name>evaluateError</name>
      <anchorfile>a04284.html</anchorfile>
      <anchor>a73554363bc42be4d6fe4bfc1f67dd27d</anchor>
      <arglist>(const T &amp;params, boost::optional&lt; Matrix &amp; &gt; H=boost::none) const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>a04284.html</anchorfile>
      <anchor>a6012ac4008a4db8f4b5da04d4bd1acbb</anchor>
      <arglist>(const std::string &amp;s=&quot;&quot;, const KeyFormatter &amp;keyFormatter=DefaultKeyFormatter) const override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>equals</name>
      <anchorfile>a04284.html</anchorfile>
      <anchor>a3f7a93560299fa6eed82146049f023b3</anchor>
      <arglist>(const NonlinearFactor &amp;other, double tol=1e-9) const override</arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>boost::serialization::access</name>
      <anchorfile>a04284.html</anchorfile>
      <anchor>ac98d07dd8f7b70e16ccb9a01abf56b9c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::FunctorizedFactor2</name>
    <filename>a04292.html</filename>
    <templarg>typename R</templarg>
    <templarg>typename T1</templarg>
    <templarg>typename T2</templarg>
    <base>NoiseModelFactor2&lt; T1, T2 &gt;</base>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>a04292.html</anchorfile>
      <anchor>a5594441f997af4aa59b279effffef04b</anchor>
      <arglist>(const std::string &amp;s=&quot;&quot;, const KeyFormatter &amp;keyFormatter=DefaultKeyFormatter) const override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>equals</name>
      <anchorfile>a04292.html</anchorfile>
      <anchor>ab1e9f0305367b120dee1aa247e75d14d</anchor>
      <arglist>(const NonlinearFactor &amp;other, double tol=1e-9) const override</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>FunctorizedFactor2</name>
      <anchorfile>a04292.html</anchorfile>
      <anchor>a0ac51a5d63d1e455a92eaa920ca785dd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>FunctorizedFactor2</name>
      <anchorfile>a04292.html</anchorfile>
      <anchor>a4b6ae8cd262108a4ba18d48519d433c2</anchor>
      <arglist>(Key key1, Key key2, const R &amp;z, const SharedNoiseModel &amp;model, const FunctionType func)</arglist>
    </member>
    <member kind="function">
      <type>NonlinearFactor::shared_ptr</type>
      <name>clone</name>
      <anchorfile>a04292.html</anchorfile>
      <anchor>a2b45e2a602481689d3c68b51a64db7d9</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>Vector</type>
      <name>evaluateError</name>
      <anchorfile>a04292.html</anchorfile>
      <anchor>a1fd31289f1cc1139652620512904fa4c</anchor>
      <arglist>(const T1 &amp;params1, const T2 &amp;params2, boost::optional&lt; Matrix &amp; &gt; H1=boost::none, boost::optional&lt; Matrix &amp; &gt; H2=boost::none) const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>a04292.html</anchorfile>
      <anchor>a5594441f997af4aa59b279effffef04b</anchor>
      <arglist>(const std::string &amp;s=&quot;&quot;, const KeyFormatter &amp;keyFormatter=DefaultKeyFormatter) const override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>equals</name>
      <anchorfile>a04292.html</anchorfile>
      <anchor>ab1e9f0305367b120dee1aa247e75d14d</anchor>
      <arglist>(const NonlinearFactor &amp;other, double tol=1e-9) const override</arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>boost::serialization::access</name>
      <anchorfile>a04292.html</anchorfile>
      <anchor>ac98d07dd8f7b70e16ccb9a01abf56b9c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::G_x1</name>
    <filename>a02612.html</filename>
    <templarg>class X1</templarg>
    <templarg>class X2</templarg>
  </compound>
  <compound kind="class">
    <name>gtsam::noiseModel::Gaussian</name>
    <filename>a03876.html</filename>
    <base>gtsam::noiseModel::Base</base>
    <member kind="function">
      <type></type>
      <name>Gaussian</name>
      <anchorfile>a03876.html</anchorfile>
      <anchor>a1d28af98ad86135fe53b5510f1253abc</anchor>
      <arglist>(size_t dim=1, const boost::optional&lt; Matrix &gt; &amp;sqrt_information=boost::none)</arglist>
    </member>
    <member kind="function">
      <type>Vector</type>
      <name>sigmas</name>
      <anchorfile>a03876.html</anchorfile>
      <anchor>a9603eb90acf7341f008f0a54df984a12</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>Vector</type>
      <name>whiten</name>
      <anchorfile>a03876.html</anchorfile>
      <anchor>ab52fae175f97c35dd0b0cc781eb6d83f</anchor>
      <arglist>(const Vector &amp;v) const override</arglist>
    </member>
    <member kind="function">
      <type>Vector</type>
      <name>unwhiten</name>
      <anchorfile>a03876.html</anchorfile>
      <anchor>a3580f4cb5f0c7f2130afe4807c832ed1</anchor>
      <arglist>(const Vector &amp;v) const override</arglist>
    </member>
    <member kind="function">
      <type>Matrix</type>
      <name>Whiten</name>
      <anchorfile>a03876.html</anchorfile>
      <anchor>a56aef08281771842737fbfa336f437a6</anchor>
      <arglist>(const Matrix &amp;H) const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>WhitenInPlace</name>
      <anchorfile>a03876.html</anchorfile>
      <anchor>a10964d6f0d955e27acd6aeb16fc83ed1</anchor>
      <arglist>(Matrix &amp;H) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>WhitenInPlace</name>
      <anchorfile>a03876.html</anchorfile>
      <anchor>a5e6730ae7579632477a1dbee37e72acf</anchor>
      <arglist>(Eigen::Block&lt; Matrix &gt; H) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>WhitenSystem</name>
      <anchorfile>a03876.html</anchorfile>
      <anchor>a4111574a34e80990d155f945140c58e6</anchor>
      <arglist>(std::vector&lt; Matrix &gt; &amp;A, Vector &amp;b) const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual boost::shared_ptr&lt; Diagonal &gt;</type>
      <name>QR</name>
      <anchorfile>a03876.html</anchorfile>
      <anchor>a69d56bbe0e3c68743c5e7f42340b6426</anchor>
      <arglist>(Matrix &amp;Ab) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Matrix</type>
      <name>R</name>
      <anchorfile>a03876.html</anchorfile>
      <anchor>a1cafaca4432cb1917bbe221bbc418f55</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Matrix</type>
      <name>information</name>
      <anchorfile>a03876.html</anchorfile>
      <anchor>a5293be6d37b726474e359df92589b462</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Matrix</type>
      <name>covariance</name>
      <anchorfile>a03876.html</anchorfile>
      <anchor>aaf6a9e33fca397915780620bf452d5d3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static shared_ptr</type>
      <name>SqrtInformation</name>
      <anchorfile>a03876.html</anchorfile>
      <anchor>a8c9d3331d5b09f086c44d99553f5e15c</anchor>
      <arglist>(const Matrix &amp;R, bool smart=true)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static shared_ptr</type>
      <name>Information</name>
      <anchorfile>a03876.html</anchorfile>
      <anchor>af7b24866cf09adbee55dad7854bfef92</anchor>
      <arglist>(const Matrix &amp;M, bool smart=true)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static shared_ptr</type>
      <name>Covariance</name>
      <anchorfile>a03876.html</anchorfile>
      <anchor>a3ed257b6e9a8016cc3c76a8962a64ba0</anchor>
      <arglist>(const Matrix &amp;covariance, bool smart=true)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>boost::optional&lt; Matrix &gt;</type>
      <name>sqrt_information_</name>
      <anchorfile>a03876.html</anchorfile>
      <anchor>a288d3c8bd743700bc19241361a32de01</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>boost::serialization::access</name>
      <anchorfile>a03876.html</anchorfile>
      <anchor>ac98d07dd8f7b70e16ccb9a01abf56b9c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::GaussianBayesNet</name>
    <filename>a03696.html</filename>
    <base>FactorGraph&lt; GaussianConditional &gt;</base>
    <member kind="function">
      <type></type>
      <name>GaussianBayesNet</name>
      <anchorfile>a03696.html</anchorfile>
      <anchor>adecacf9eadcbced34a26cd234e34d197</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GaussianBayesNet</name>
      <anchorfile>a03696.html</anchorfile>
      <anchor>ae4f5f693d7582da70a64ea80024fdf12</anchor>
      <arglist>(ITERATOR firstConditional, ITERATOR lastConditional)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GaussianBayesNet</name>
      <anchorfile>a03696.html</anchorfile>
      <anchor>ac863c8c8203f4cb9d099d6d1adf8fb3b</anchor>
      <arglist>(const CONTAINER &amp;conditionals)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GaussianBayesNet</name>
      <anchorfile>a03696.html</anchorfile>
      <anchor>a91b6b8d6390efc036e690dbaf5493ff4</anchor>
      <arglist>(const FactorGraph&lt; DERIVEDCONDITIONAL &gt; &amp;graph)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~GaussianBayesNet</name>
      <anchorfile>a03696.html</anchorfile>
      <anchor>a960d149a6a995bac3b078e6af0e00155</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>equals</name>
      <anchorfile>a03696.html</anchorfile>
      <anchor>a0dfaa4e6414429241119976691640017</anchor>
      <arglist>(const This &amp;bn, double tol=1e-9) const</arglist>
    </member>
    <member kind="function">
      <type>VectorValues</type>
      <name>optimize</name>
      <anchorfile>a03696.html</anchorfile>
      <anchor>a01ccfdc104912f80933a0814dd469f40</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>VectorValues</type>
      <name>optimize</name>
      <anchorfile>a03696.html</anchorfile>
      <anchor>ab5b987183cf89eef5973b7c3352e9662</anchor>
      <arglist>(const VectorValues &amp;solutionForMissing) const</arglist>
    </member>
    <member kind="function">
      <type>Ordering</type>
      <name>ordering</name>
      <anchorfile>a03696.html</anchorfile>
      <anchor>aa4bf7623222114b8929266f89e96aeb5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::pair&lt; Matrix, Vector &gt;</type>
      <name>matrix</name>
      <anchorfile>a03696.html</anchorfile>
      <anchor>a96b854ef1772618765314ea7b5fd7943</anchor>
      <arglist>(const Ordering &amp;ordering) const</arglist>
    </member>
    <member kind="function">
      <type>std::pair&lt; Matrix, Vector &gt;</type>
      <name>matrix</name>
      <anchorfile>a03696.html</anchorfile>
      <anchor>a0cacda01dd8275fd707bb8c82004af24</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>VectorValues</type>
      <name>optimizeGradientSearch</name>
      <anchorfile>a03696.html</anchorfile>
      <anchor>ac73cf84092ee57fa01609ae699b9282a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>VectorValues</type>
      <name>gradient</name>
      <anchorfile>a03696.html</anchorfile>
      <anchor>afeb5efde40fe64df5844ba1154933128</anchor>
      <arglist>(const VectorValues &amp;x0) const</arglist>
    </member>
    <member kind="function">
      <type>VectorValues</type>
      <name>gradientAtZero</name>
      <anchorfile>a03696.html</anchorfile>
      <anchor>a882e37f9122d59c5f9f7ab927398cb24</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>error</name>
      <anchorfile>a03696.html</anchorfile>
      <anchor>a3db1291c789e604f170c756df896d80c</anchor>
      <arglist>(const VectorValues &amp;x) const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>determinant</name>
      <anchorfile>a03696.html</anchorfile>
      <anchor>aff1f3b8337a4768252aaa17337749e2d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>logDeterminant</name>
      <anchorfile>a03696.html</anchorfile>
      <anchor>ab658420b5501d66d8df2d3fd5e78133b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>VectorValues</type>
      <name>backSubstitute</name>
      <anchorfile>a03696.html</anchorfile>
      <anchor>ae94dd75d08bf33718cfc2fd05abbdd17</anchor>
      <arglist>(const VectorValues &amp;gx) const</arglist>
    </member>
    <member kind="function">
      <type>VectorValues</type>
      <name>backSubstituteTranspose</name>
      <anchorfile>a03696.html</anchorfile>
      <anchor>aa082daa02b066634ea1b624263ce1819</anchor>
      <arglist>(const VectorValues &amp;gx) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>a03696.html</anchorfile>
      <anchor>a8bb3c347e66fc1d2ea8ae5c8e51299fa</anchor>
      <arglist>(const std::string &amp;s=&quot;&quot;, const KeyFormatter &amp;formatter=DefaultKeyFormatter) const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>saveGraph</name>
      <anchorfile>a03696.html</anchorfile>
      <anchor>a6197a028fe610016b3e4c0456c5b3e5c</anchor>
      <arglist>(const std::string &amp;s, const KeyFormatter &amp;keyFormatter=DefaultKeyFormatter) const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GaussianBayesNet</name>
      <anchorfile>a03696.html</anchorfile>
      <anchor>adecacf9eadcbced34a26cd234e34d197</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GaussianBayesNet</name>
      <anchorfile>a03696.html</anchorfile>
      <anchor>ae4f5f693d7582da70a64ea80024fdf12</anchor>
      <arglist>(ITERATOR firstConditional, ITERATOR lastConditional)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GaussianBayesNet</name>
      <anchorfile>a03696.html</anchorfile>
      <anchor>ac863c8c8203f4cb9d099d6d1adf8fb3b</anchor>
      <arglist>(const CONTAINER &amp;conditionals)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GaussianBayesNet</name>
      <anchorfile>a03696.html</anchorfile>
      <anchor>a91b6b8d6390efc036e690dbaf5493ff4</anchor>
      <arglist>(const FactorGraph&lt; DERIVEDCONDITIONAL &gt; &amp;graph)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~GaussianBayesNet</name>
      <anchorfile>a03696.html</anchorfile>
      <anchor>a960d149a6a995bac3b078e6af0e00155</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>equals</name>
      <anchorfile>a03696.html</anchorfile>
      <anchor>a0dfaa4e6414429241119976691640017</anchor>
      <arglist>(const This &amp;bn, double tol=1e-9) const</arglist>
    </member>
    <member kind="function">
      <type>VectorValues</type>
      <name>optimize</name>
      <anchorfile>a03696.html</anchorfile>
      <anchor>a01ccfdc104912f80933a0814dd469f40</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>VectorValues</type>
      <name>optimize</name>
      <anchorfile>a03696.html</anchorfile>
      <anchor>ab5b987183cf89eef5973b7c3352e9662</anchor>
      <arglist>(const VectorValues &amp;solutionForMissing) const</arglist>
    </member>
    <member kind="function">
      <type>Ordering</type>
      <name>ordering</name>
      <anchorfile>a03696.html</anchorfile>
      <anchor>aa4bf7623222114b8929266f89e96aeb5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::pair&lt; Matrix, Vector &gt;</type>
      <name>matrix</name>
      <anchorfile>a03696.html</anchorfile>
      <anchor>a96b854ef1772618765314ea7b5fd7943</anchor>
      <arglist>(const Ordering &amp;ordering) const</arglist>
    </member>
    <member kind="function">
      <type>std::pair&lt; Matrix, Vector &gt;</type>
      <name>matrix</name>
      <anchorfile>a03696.html</anchorfile>
      <anchor>a0cacda01dd8275fd707bb8c82004af24</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>VectorValues</type>
      <name>optimizeGradientSearch</name>
      <anchorfile>a03696.html</anchorfile>
      <anchor>ac73cf84092ee57fa01609ae699b9282a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>VectorValues</type>
      <name>gradient</name>
      <anchorfile>a03696.html</anchorfile>
      <anchor>afeb5efde40fe64df5844ba1154933128</anchor>
      <arglist>(const VectorValues &amp;x0) const</arglist>
    </member>
    <member kind="function">
      <type>VectorValues</type>
      <name>gradientAtZero</name>
      <anchorfile>a03696.html</anchorfile>
      <anchor>a882e37f9122d59c5f9f7ab927398cb24</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>error</name>
      <anchorfile>a03696.html</anchorfile>
      <anchor>a3db1291c789e604f170c756df896d80c</anchor>
      <arglist>(const VectorValues &amp;x) const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>determinant</name>
      <anchorfile>a03696.html</anchorfile>
      <anchor>aff1f3b8337a4768252aaa17337749e2d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>logDeterminant</name>
      <anchorfile>a03696.html</anchorfile>
      <anchor>ab658420b5501d66d8df2d3fd5e78133b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>VectorValues</type>
      <name>backSubstitute</name>
      <anchorfile>a03696.html</anchorfile>
      <anchor>ae94dd75d08bf33718cfc2fd05abbdd17</anchor>
      <arglist>(const VectorValues &amp;gx) const</arglist>
    </member>
    <member kind="function">
      <type>VectorValues</type>
      <name>backSubstituteTranspose</name>
      <anchorfile>a03696.html</anchorfile>
      <anchor>aa082daa02b066634ea1b624263ce1819</anchor>
      <arglist>(const VectorValues &amp;gx) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>a03696.html</anchorfile>
      <anchor>a8bb3c347e66fc1d2ea8ae5c8e51299fa</anchor>
      <arglist>(const std::string &amp;s=&quot;&quot;, const KeyFormatter &amp;formatter=DefaultKeyFormatter) const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>saveGraph</name>
      <anchorfile>a03696.html</anchorfile>
      <anchor>a6197a028fe610016b3e4c0456c5b3e5c</anchor>
      <arglist>(const std::string &amp;s, const KeyFormatter &amp;keyFormatter=DefaultKeyFormatter) const</arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>boost::serialization::access</name>
      <anchorfile>a03696.html</anchorfile>
      <anchor>ac98d07dd8f7b70e16ccb9a01abf56b9c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::GaussianBayesTree</name>
    <filename>a03708.html</filename>
    <base>BayesTree&lt; GaussianBayesTreeClique &gt;</base>
    <member kind="function">
      <type></type>
      <name>GaussianBayesTree</name>
      <anchorfile>a03708.html</anchorfile>
      <anchor>a10a6eb7dac9a7fcd873d0c0a3c01ca82</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>equals</name>
      <anchorfile>a03708.html</anchorfile>
      <anchor>a03c6f0a6e375f03c9338fdb51285bd68</anchor>
      <arglist>(const This &amp;other, double tol=1e-9) const</arglist>
    </member>
    <member kind="function">
      <type>VectorValues</type>
      <name>optimize</name>
      <anchorfile>a03708.html</anchorfile>
      <anchor>a8832a5973fd44c0afc4d7ace9c9d2bb2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>VectorValues</type>
      <name>optimizeGradientSearch</name>
      <anchorfile>a03708.html</anchorfile>
      <anchor>a8228e4f368150c8abc14ed7bb4f6a5e3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>VectorValues</type>
      <name>gradient</name>
      <anchorfile>a03708.html</anchorfile>
      <anchor>acd97366027e87528d3736bc7ad748485</anchor>
      <arglist>(const VectorValues &amp;x0) const</arglist>
    </member>
    <member kind="function">
      <type>VectorValues</type>
      <name>gradientAtZero</name>
      <anchorfile>a03708.html</anchorfile>
      <anchor>adf7805724675eff5b71ddf6bde6e599b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>error</name>
      <anchorfile>a03708.html</anchorfile>
      <anchor>a64a935c07cec479299fe940cf585ed40</anchor>
      <arglist>(const VectorValues &amp;x) const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>determinant</name>
      <anchorfile>a03708.html</anchorfile>
      <anchor>ab5e04f426f0cf72d1d33d9b6e8ae70a6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>logDeterminant</name>
      <anchorfile>a03708.html</anchorfile>
      <anchor>a7370eafc6174975fe9ca36782c1b2040</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Matrix</type>
      <name>marginalCovariance</name>
      <anchorfile>a03708.html</anchorfile>
      <anchor>a5804f0735805b572ee335113a245d9e5</anchor>
      <arglist>(Key key) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::GaussianBayesTreeClique</name>
    <filename>a03704.html</filename>
    <base>BayesTreeCliqueBase&lt; GaussianBayesTreeClique, GaussianFactorGraph &gt;</base>
  </compound>
  <compound kind="class">
    <name>gtsam::GaussianConditional</name>
    <filename>a03716.html</filename>
    <base>gtsam::JacobianFactor</base>
    <base>Conditional&lt; JacobianFactor, GaussianConditional &gt;</base>
    <member kind="function">
      <type></type>
      <name>GaussianConditional</name>
      <anchorfile>a03716.html</anchorfile>
      <anchor>a350122154dc86824df762ae59ee51f80</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GaussianConditional</name>
      <anchorfile>a03716.html</anchorfile>
      <anchor>a07e5a082e6ccb1034f4a9754bc1b64ab</anchor>
      <arglist>(Key key, const Vector &amp;d, const Matrix &amp;R, const SharedDiagonal &amp;sigmas=SharedDiagonal())</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GaussianConditional</name>
      <anchorfile>a03716.html</anchorfile>
      <anchor>aefa44e696b330113a6de949e457a6e4d</anchor>
      <arglist>(Key key, const Vector &amp;d, const Matrix &amp;R, Key name1, const Matrix &amp;S, const SharedDiagonal &amp;sigmas=SharedDiagonal())</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GaussianConditional</name>
      <anchorfile>a03716.html</anchorfile>
      <anchor>a961b569d232db0e156c295e2b1fcc970</anchor>
      <arglist>(Key key, const Vector &amp;d, const Matrix &amp;R, Key name1, const Matrix &amp;S, Key name2, const Matrix &amp;T, const SharedDiagonal &amp;sigmas=SharedDiagonal())</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GaussianConditional</name>
      <anchorfile>a03716.html</anchorfile>
      <anchor>a59d5c29925d10765fb5b1b3760161019</anchor>
      <arglist>(const TERMS &amp;terms, size_t nrFrontals, const Vector &amp;d, const SharedDiagonal &amp;sigmas=SharedDiagonal())</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GaussianConditional</name>
      <anchorfile>a03716.html</anchorfile>
      <anchor>a545518d753c73b6fc5b0cf644137ca26</anchor>
      <arglist>(const KEYS &amp;keys, size_t nrFrontals, const VerticalBlockMatrix &amp;augmentedMatrix, const SharedDiagonal &amp;sigmas=SharedDiagonal())</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>a03716.html</anchorfile>
      <anchor>a6a58b76adb26081398a88eb9a5570d4a</anchor>
      <arglist>(const std::string &amp;=&quot;GaussianConditional&quot;, const KeyFormatter &amp;formatter=DefaultKeyFormatter) const override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>equals</name>
      <anchorfile>a03716.html</anchorfile>
      <anchor>a0789c0f41080023d604d79581d447a9a</anchor>
      <arglist>(const GaussianFactor &amp;cg, double tol=1e-9) const override</arglist>
    </member>
    <member kind="function">
      <type>constABlock</type>
      <name>R</name>
      <anchorfile>a03716.html</anchorfile>
      <anchor>a2f625a1f4f0ebb9db26019586b1abbe5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>constABlock</type>
      <name>S</name>
      <anchorfile>a03716.html</anchorfile>
      <anchor>ac4820ff3c08b4ae60be18d631606c89d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>constABlock</type>
      <name>S</name>
      <anchorfile>a03716.html</anchorfile>
      <anchor>a2a7af628c48e3516b08c10282590ad47</anchor>
      <arglist>(const_iterator it) const</arglist>
    </member>
    <member kind="function">
      <type>const constBVector</type>
      <name>d</name>
      <anchorfile>a03716.html</anchorfile>
      <anchor>aef329c61470954e7bec349f444e5e769</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>VectorValues</type>
      <name>solve</name>
      <anchorfile>a03716.html</anchorfile>
      <anchor>a18c86069f9b255070929f52539b78bcc</anchor>
      <arglist>(const VectorValues &amp;parents) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>solveTransposeInPlace</name>
      <anchorfile>a03716.html</anchorfile>
      <anchor>abd05feec1f1252ff85383df730680af0</anchor>
      <arglist>(VectorValues &amp;gy) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>scaleFrontalsBySigma</name>
      <anchorfile>a03716.html</anchorfile>
      <anchor>a54654887719d443e56a05c258ec80d1b</anchor>
      <arglist>(VectorValues &amp;gy) const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static shared_ptr</type>
      <name>Combine</name>
      <anchorfile>a03716.html</anchorfile>
      <anchor>a9656dae242e3f9a8293b1b5c05095911</anchor>
      <arglist>(ITERATOR firstConditional, ITERATOR lastConditional)</arglist>
    </member>
    <member kind="typedef">
      <type>GaussianConditional</type>
      <name>This</name>
      <anchorfile>a03716.html</anchorfile>
      <anchor>a0f8b1ce7a6a1414f8c24e160af2f8d4e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; This &gt;</type>
      <name>shared_ptr</name>
      <anchorfile>a03716.html</anchorfile>
      <anchor>aca05dc6ca9aea64f4621a8c8d2bf3d01</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>JacobianFactor</type>
      <name>BaseFactor</name>
      <anchorfile>a03716.html</anchorfile>
      <anchor>a2fdd1b89f3665eda71256f3a57f4a4d0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Conditional&lt; BaseFactor, This &gt;</type>
      <name>BaseConditional</name>
      <anchorfile>a03716.html</anchorfile>
      <anchor>a42acbab01dda87c1017d4f996bfb9ff7</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>boost::serialization::access</name>
      <anchorfile>a03716.html</anchorfile>
      <anchor>ac98d07dd8f7b70e16ccb9a01abf56b9c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::GaussianDensity</name>
    <filename>a03724.html</filename>
    <base>gtsam::GaussianConditional</base>
    <member kind="function">
      <type></type>
      <name>GaussianDensity</name>
      <anchorfile>a03724.html</anchorfile>
      <anchor>a5e87d41948515b0ea5548aed04227acd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GaussianDensity</name>
      <anchorfile>a03724.html</anchorfile>
      <anchor>ab87337fa52b848ce99be24006daef46c</anchor>
      <arglist>(const GaussianConditional &amp;conditional)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GaussianDensity</name>
      <anchorfile>a03724.html</anchorfile>
      <anchor>a4c8ce2cd6b2708df545c4fe7778169ee</anchor>
      <arglist>(Key key, const Vector &amp;d, const Matrix &amp;R, const SharedDiagonal &amp;noiseModel=SharedDiagonal())</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>a03724.html</anchorfile>
      <anchor>af97513a655a35d1d31d6e4fd3f10c209</anchor>
      <arglist>(const std::string &amp;=&quot;GaussianDensity&quot;, const KeyFormatter &amp;formatter=DefaultKeyFormatter) const override</arglist>
    </member>
    <member kind="function">
      <type>Vector</type>
      <name>mean</name>
      <anchorfile>a03724.html</anchorfile>
      <anchor>a97499479e17fe37b3d01f1c517dad373</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Matrix</type>
      <name>covariance</name>
      <anchorfile>a03724.html</anchorfile>
      <anchor>add797ceb0bc6777c58f0540995524a38</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static GaussianDensity</type>
      <name>FromMeanAndStddev</name>
      <anchorfile>a03724.html</anchorfile>
      <anchor>a737eb90910e9ab3cb7d4f45b5d497d18</anchor>
      <arglist>(Key key, const Vector &amp;mean, const double &amp;sigma)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::GaussianEliminationTree</name>
    <filename>a03728.html</filename>
    <base>EliminationTree&lt; GaussianBayesNet, GaussianFactorGraph &gt;</base>
    <member kind="function">
      <type></type>
      <name>GaussianEliminationTree</name>
      <anchorfile>a03728.html</anchorfile>
      <anchor>acffc7084c938407b8b047843fbd7b138</anchor>
      <arglist>(const GaussianFactorGraph &amp;factorGraph, const VariableIndex &amp;structure, const Ordering &amp;order)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GaussianEliminationTree</name>
      <anchorfile>a03728.html</anchorfile>
      <anchor>abc03f84772075ab56747a259513f62a7</anchor>
      <arglist>(const GaussianFactorGraph &amp;factorGraph, const Ordering &amp;order)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>equals</name>
      <anchorfile>a03728.html</anchorfile>
      <anchor>aa5c2c091babfc2fa6b590654d73cd635</anchor>
      <arglist>(const This &amp;other, double tol=1e-9) const</arglist>
    </member>
    <member kind="typedef">
      <type>EliminationTree&lt; GaussianBayesNet, GaussianFactorGraph &gt;</type>
      <name>Base</name>
      <anchorfile>a03728.html</anchorfile>
      <anchor>a57a688c5bdfa87413e5982fb1ec61489</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GaussianEliminationTree</type>
      <name>This</name>
      <anchorfile>a03728.html</anchorfile>
      <anchor>a3d599a4ee436838e5ffba795580c2ab1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; This &gt;</type>
      <name>shared_ptr</name>
      <anchorfile>a03728.html</anchorfile>
      <anchor>a888dd1388dc43d47fda35ade35583279</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::GaussianFactor</name>
    <filename>a03732.html</filename>
    <base>gtsam::Factor</base>
    <member kind="function">
      <type></type>
      <name>GaussianFactor</name>
      <anchorfile>a03732.html</anchorfile>
      <anchor>ab31173c32b976a81d76af85e1d49e24a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GaussianFactor</name>
      <anchorfile>a03732.html</anchorfile>
      <anchor>a7fc8684c852571ea09ecea36847ed7a2</anchor>
      <arglist>(const CONTAINER &amp;keys)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~GaussianFactor</name>
      <anchorfile>a03732.html</anchorfile>
      <anchor>a5b1351803dd692f18042e2516ce1d42e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>void</type>
      <name>print</name>
      <anchorfile>a03732.html</anchorfile>
      <anchor>ace5d1eb61005ebed0c5b111891dcbb7a</anchor>
      <arglist>(const std::string &amp;s=&quot;&quot;, const KeyFormatter &amp;formatter=DefaultKeyFormatter) const override=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>equals</name>
      <anchorfile>a03732.html</anchorfile>
      <anchor>a995962014c602d30330eedc0718a5c1b</anchor>
      <arglist>(const GaussianFactor &amp;lf, double tol=1e-9) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual double</type>
      <name>error</name>
      <anchorfile>a03732.html</anchorfile>
      <anchor>a2704b2eba88bce36a17630cab8e7eebb</anchor>
      <arglist>(const VectorValues &amp;c) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual DenseIndex</type>
      <name>getDim</name>
      <anchorfile>a03732.html</anchorfile>
      <anchor>a043b7743551077755ab0a2f7ce9145a9</anchor>
      <arglist>(const_iterator variable) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual Matrix</type>
      <name>augmentedJacobian</name>
      <anchorfile>a03732.html</anchorfile>
      <anchor>aad92ba2bc352ae0e4c8e3089684f2fd2</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual std::pair&lt; Matrix, Vector &gt;</type>
      <name>jacobian</name>
      <anchorfile>a03732.html</anchorfile>
      <anchor>a11f09725e7f12bb6a17d0b883c336908</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual Matrix</type>
      <name>augmentedInformation</name>
      <anchorfile>a03732.html</anchorfile>
      <anchor>a9d0075b3f0fd624c5ae50784e29f9dc6</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual Matrix</type>
      <name>information</name>
      <anchorfile>a03732.html</anchorfile>
      <anchor>a3e5307082cc4fb1f5bc1c732ab4d61ec</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function">
      <type>VectorValues</type>
      <name>hessianDiagonal</name>
      <anchorfile>a03732.html</anchorfile>
      <anchor>a7edd251ef4aef401334e90cca0d76574</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>hessianDiagonalAdd</name>
      <anchorfile>a03732.html</anchorfile>
      <anchor>ad3dc97ac8c92c02c5b600a110598b25a</anchor>
      <arglist>(VectorValues &amp;d) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>hessianDiagonal</name>
      <anchorfile>a03732.html</anchorfile>
      <anchor>abee2d32cd8408a41f9605f4d60ff818f</anchor>
      <arglist>(double *d) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual std::map&lt; Key, Matrix &gt;</type>
      <name>hessianBlockDiagonal</name>
      <anchorfile>a03732.html</anchorfile>
      <anchor>a0d3fbeedbdf5d116787d0fb7bea1bf85</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual GaussianFactor::shared_ptr</type>
      <name>clone</name>
      <anchorfile>a03732.html</anchorfile>
      <anchor>a3e305eb0950fbb3a5ea6db3cc9f2032b</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>empty</name>
      <anchorfile>a03732.html</anchorfile>
      <anchor>adc1222b8ed44ec379c9bdfe813f6d682</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual GaussianFactor::shared_ptr</type>
      <name>negate</name>
      <anchorfile>a03732.html</anchorfile>
      <anchor>abd7ff975956b56b356d04547250650b7</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>updateHessian</name>
      <anchorfile>a03732.html</anchorfile>
      <anchor>acc9a428ca38e8899654ddf4394e07336</anchor>
      <arglist>(const KeyVector &amp;keys, SymmetricBlockMatrix *info) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>multiplyHessianAdd</name>
      <anchorfile>a03732.html</anchorfile>
      <anchor>a835e0d8c262a982cc165084304d21227</anchor>
      <arglist>(double alpha, const VectorValues &amp;x, VectorValues &amp;y) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual VectorValues</type>
      <name>gradientAtZero</name>
      <anchorfile>a03732.html</anchorfile>
      <anchor>a798113430deafb5db828d23a7187cac2</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>gradientAtZero</name>
      <anchorfile>a03732.html</anchorfile>
      <anchor>aff23fa0ddcc065591cd4301d86f7a96e</anchor>
      <arglist>(double *d) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual Vector</type>
      <name>gradient</name>
      <anchorfile>a03732.html</anchorfile>
      <anchor>a16e90a691f7240e1b973e6dd3d8dc9c9</anchor>
      <arglist>(Key key, const VectorValues &amp;x) const =0</arglist>
    </member>
    <member kind="typedef">
      <type>GaussianFactor</type>
      <name>This</name>
      <anchorfile>a03732.html</anchorfile>
      <anchor>ac49aaf7a5ac8bbf486762e9321a3d34f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; This &gt;</type>
      <name>shared_ptr</name>
      <anchorfile>a03732.html</anchorfile>
      <anchor>a0eeee0de6e144fedc937d7272be80a36</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Factor</type>
      <name>Base</name>
      <anchorfile>a03732.html</anchorfile>
      <anchor>a3fe9ce76eaef7dac2a434408e960bbd8</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>boost::serialization::access</name>
      <anchorfile>a03732.html</anchorfile>
      <anchor>ac98d07dd8f7b70e16ccb9a01abf56b9c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::GaussianFactorGraph</name>
    <filename>a03744.html</filename>
    <base>FactorGraph&lt; GaussianFactor &gt;</base>
    <base>EliminateableFactorGraph&lt; GaussianFactorGraph &gt;</base>
    <member kind="function">
      <type>std::vector&lt; std::tuple&lt; int, int, double &gt; &gt;</type>
      <name>sparseJacobian</name>
      <anchorfile>a03744.html</anchorfile>
      <anchor>a2ec5f64848183b75a6a3470c0750aeaa</anchor>
      <arglist>(const Ordering &amp;ordering, size_t &amp;nrows, size_t &amp;ncols) const</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; std::tuple&lt; int, int, double &gt; &gt;</type>
      <name>sparseJacobian</name>
      <anchorfile>a03744.html</anchorfile>
      <anchor>a0335c868e15088cc174544d55c43ce5c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Matrix</type>
      <name>sparseJacobian_</name>
      <anchorfile>a03744.html</anchorfile>
      <anchor>a5856b8544f4d9b76be4b2d8f13807e09</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Matrix</type>
      <name>augmentedJacobian</name>
      <anchorfile>a03744.html</anchorfile>
      <anchor>a1cb2c3ca428470255ceda9bee7ab06fe</anchor>
      <arglist>(const Ordering &amp;ordering) const</arglist>
    </member>
    <member kind="function">
      <type>Matrix</type>
      <name>augmentedJacobian</name>
      <anchorfile>a03744.html</anchorfile>
      <anchor>a6b61b289cddbdb999e798e3c5e0c193f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::pair&lt; Matrix, Vector &gt;</type>
      <name>jacobian</name>
      <anchorfile>a03744.html</anchorfile>
      <anchor>a0836a4b7823c2ccb0fb22910b5b1030d</anchor>
      <arglist>(const Ordering &amp;ordering) const</arglist>
    </member>
    <member kind="function">
      <type>std::pair&lt; Matrix, Vector &gt;</type>
      <name>jacobian</name>
      <anchorfile>a03744.html</anchorfile>
      <anchor>aa3c74bd13ab3b5c02cae46d78ce9af83</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Matrix</type>
      <name>augmentedHessian</name>
      <anchorfile>a03744.html</anchorfile>
      <anchor>ad79623fc64110e086baa1980b0f9406a</anchor>
      <arglist>(const Ordering &amp;ordering) const</arglist>
    </member>
    <member kind="function">
      <type>Matrix</type>
      <name>augmentedHessian</name>
      <anchorfile>a03744.html</anchorfile>
      <anchor>a225dde5026c3f44386c0559ce4320287</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::pair&lt; Matrix, Vector &gt;</type>
      <name>hessian</name>
      <anchorfile>a03744.html</anchorfile>
      <anchor>a754d3a46e1d45acb96f01c7a223842f3</anchor>
      <arglist>(const Ordering &amp;ordering) const</arglist>
    </member>
    <member kind="function">
      <type>std::pair&lt; Matrix, Vector &gt;</type>
      <name>hessian</name>
      <anchorfile>a03744.html</anchorfile>
      <anchor>a7ed3e7cefeca1b31e17021005e6f7c44</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual VectorValues</type>
      <name>hessianDiagonal</name>
      <anchorfile>a03744.html</anchorfile>
      <anchor>ab325c99d695e76a6d1b99285d9ab8dae</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::map&lt; Key, Matrix &gt;</type>
      <name>hessianBlockDiagonal</name>
      <anchorfile>a03744.html</anchorfile>
      <anchor>a4d1d71b01cfecb78005b82465ebe632d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>VectorValues</type>
      <name>optimize</name>
      <anchorfile>a03744.html</anchorfile>
      <anchor>a8314e397b9be5c5e58465e319207553f</anchor>
      <arglist>(const Eliminate &amp;function=EliminationTraitsType::DefaultEliminate) const</arglist>
    </member>
    <member kind="function">
      <type>VectorValues</type>
      <name>optimize</name>
      <anchorfile>a03744.html</anchorfile>
      <anchor>a5876c0a7c2b287b57277cbd69bc78aae</anchor>
      <arglist>(const Ordering &amp;, const Eliminate &amp;function=EliminationTraitsType::DefaultEliminate) const</arglist>
    </member>
    <member kind="function">
      <type>VectorValues</type>
      <name>optimizeDensely</name>
      <anchorfile>a03744.html</anchorfile>
      <anchor>ae26bfbcee7625daf234a43fd45796700</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>VectorValues</type>
      <name>gradient</name>
      <anchorfile>a03744.html</anchorfile>
      <anchor>aa183f87ebad359ef5dee4ef626522bf2</anchor>
      <arglist>(const VectorValues &amp;x0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual VectorValues</type>
      <name>gradientAtZero</name>
      <anchorfile>a03744.html</anchorfile>
      <anchor>a4051ae22110840eeebe855652352ef69</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>VectorValues</type>
      <name>optimizeGradientSearch</name>
      <anchorfile>a03744.html</anchorfile>
      <anchor>a31ae5450f0fbcfc7e8edf0cb9deb21c2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>VectorValues</type>
      <name>transposeMultiply</name>
      <anchorfile>a03744.html</anchorfile>
      <anchor>adb2535546d074ea20f68d1c9a82ea91f</anchor>
      <arglist>(const Errors &amp;e) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>transposeMultiplyAdd</name>
      <anchorfile>a03744.html</anchorfile>
      <anchor>ad334bc63d65bb3fd53a28fdce19c9bc1</anchor>
      <arglist>(double alpha, const Errors &amp;e, VectorValues &amp;x) const</arglist>
    </member>
    <member kind="function">
      <type>Errors</type>
      <name>gaussianErrors</name>
      <anchorfile>a03744.html</anchorfile>
      <anchor>a908618e417977a645baca9f93b9c4e16</anchor>
      <arglist>(const VectorValues &amp;x) const</arglist>
    </member>
    <member kind="function">
      <type>Errors</type>
      <name>operator*</name>
      <anchorfile>a03744.html</anchorfile>
      <anchor>ac2ea218e3a3f18f0982d6baaf1a468b9</anchor>
      <arglist>(const VectorValues &amp;x) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>multiplyHessianAdd</name>
      <anchorfile>a03744.html</anchorfile>
      <anchor>ad48bf2fb09cf416d3f980d5385dd63a8</anchor>
      <arglist>(double alpha, const VectorValues &amp;x, VectorValues &amp;y) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>multiplyInPlace</name>
      <anchorfile>a03744.html</anchorfile>
      <anchor>a4a87e24812c266e87af6b691063b11ef</anchor>
      <arglist>(const VectorValues &amp;x, Errors &amp;e) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>multiplyInPlace</name>
      <anchorfile>a03744.html</anchorfile>
      <anchor>a899a8e63e67a30a060879c8478e9d351</anchor>
      <arglist>(const VectorValues &amp;x, const Errors::iterator &amp;e) const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GaussianFactorGraph</name>
      <anchorfile>a03744.html</anchorfile>
      <anchor>a6230b36e3daf60b619e20742db3b02b6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GaussianFactorGraph</name>
      <anchorfile>a03744.html</anchorfile>
      <anchor>ae25329ab2478d0ea2054eebc7bcdde0a</anchor>
      <arglist>(ITERATOR firstFactor, ITERATOR lastFactor)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GaussianFactorGraph</name>
      <anchorfile>a03744.html</anchorfile>
      <anchor>af5974ac5896b74579db7967b05f6a146</anchor>
      <arglist>(const CONTAINER &amp;factors)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GaussianFactorGraph</name>
      <anchorfile>a03744.html</anchorfile>
      <anchor>aedece6712926154a27d3facc4899b88a</anchor>
      <arglist>(const FactorGraph&lt; DERIVEDFACTOR &gt; &amp;graph)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~GaussianFactorGraph</name>
      <anchorfile>a03744.html</anchorfile>
      <anchor>ad2cf3894566f0970a9df81f28b8a0dda</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add</name>
      <anchorfile>a03744.html</anchorfile>
      <anchor>a733aa6a7780bb3d16fb45345a655f717</anchor>
      <arglist>(const GaussianFactor &amp;factor)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add</name>
      <anchorfile>a03744.html</anchorfile>
      <anchor>a9778ee09d534bc6b8c2a2263e14875da</anchor>
      <arglist>(const sharedFactor &amp;factor)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add</name>
      <anchorfile>a03744.html</anchorfile>
      <anchor>acac67c59333e4db66b530ee09d231e3d</anchor>
      <arglist>(const Vector &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add</name>
      <anchorfile>a03744.html</anchorfile>
      <anchor>ad20e5b614636e00934414baf2a9b8636</anchor>
      <arglist>(Key key1, const Matrix &amp;A1, const Vector &amp;b, const SharedDiagonal &amp;model=SharedDiagonal())</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add</name>
      <anchorfile>a03744.html</anchorfile>
      <anchor>ad34fa381109aa8c3e1653dc352b350c9</anchor>
      <arglist>(Key key1, const Matrix &amp;A1, Key key2, const Matrix &amp;A2, const Vector &amp;b, const SharedDiagonal &amp;model=SharedDiagonal())</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add</name>
      <anchorfile>a03744.html</anchorfile>
      <anchor>a8a98904f917816d66b36a912acb44830</anchor>
      <arglist>(Key key1, const Matrix &amp;A1, Key key2, const Matrix &amp;A2, Key key3, const Matrix &amp;A3, const Vector &amp;b, const SharedDiagonal &amp;model=SharedDiagonal())</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add</name>
      <anchorfile>a03744.html</anchorfile>
      <anchor>a2eaa4c442c6a4424cb8febe3e0f4f66c</anchor>
      <arglist>(const TERMS &amp;terms, const Vector &amp;b, const SharedDiagonal &amp;model=SharedDiagonal())</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>error</name>
      <anchorfile>a03744.html</anchorfile>
      <anchor>ac0c9b70edb23bac0818ded3d32a6ed13</anchor>
      <arglist>(const VectorValues &amp;x) const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>probPrime</name>
      <anchorfile>a03744.html</anchorfile>
      <anchor>a74ed62e8ff4efeb6c33f4acd91d08625</anchor>
      <arglist>(const VectorValues &amp;c) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual GaussianFactorGraph</type>
      <name>clone</name>
      <anchorfile>a03744.html</anchorfile>
      <anchor>a85e7472485f1cfdd1354ee4161981c0f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual GaussianFactorGraph::shared_ptr</type>
      <name>cloneToPtr</name>
      <anchorfile>a03744.html</anchorfile>
      <anchor>a5ba73df3e028d51da3ee8add3f93b63e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>GaussianFactorGraph</type>
      <name>negate</name>
      <anchorfile>a03744.html</anchorfile>
      <anchor>a05bfa41e9ff99f246ea528ba26b82e69</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; std::tuple&lt; int, int, double &gt; &gt;</type>
      <name>sparseJacobian</name>
      <anchorfile>a03744.html</anchorfile>
      <anchor>a2ec5f64848183b75a6a3470c0750aeaa</anchor>
      <arglist>(const Ordering &amp;ordering, size_t &amp;nrows, size_t &amp;ncols) const</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; std::tuple&lt; int, int, double &gt; &gt;</type>
      <name>sparseJacobian</name>
      <anchorfile>a03744.html</anchorfile>
      <anchor>a0335c868e15088cc174544d55c43ce5c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Matrix</type>
      <name>sparseJacobian_</name>
      <anchorfile>a03744.html</anchorfile>
      <anchor>a5856b8544f4d9b76be4b2d8f13807e09</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Matrix</type>
      <name>augmentedJacobian</name>
      <anchorfile>a03744.html</anchorfile>
      <anchor>a1cb2c3ca428470255ceda9bee7ab06fe</anchor>
      <arglist>(const Ordering &amp;ordering) const</arglist>
    </member>
    <member kind="function">
      <type>Matrix</type>
      <name>augmentedJacobian</name>
      <anchorfile>a03744.html</anchorfile>
      <anchor>a6b61b289cddbdb999e798e3c5e0c193f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::pair&lt; Matrix, Vector &gt;</type>
      <name>jacobian</name>
      <anchorfile>a03744.html</anchorfile>
      <anchor>a0836a4b7823c2ccb0fb22910b5b1030d</anchor>
      <arglist>(const Ordering &amp;ordering) const</arglist>
    </member>
    <member kind="function">
      <type>std::pair&lt; Matrix, Vector &gt;</type>
      <name>jacobian</name>
      <anchorfile>a03744.html</anchorfile>
      <anchor>aa3c74bd13ab3b5c02cae46d78ce9af83</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Matrix</type>
      <name>augmentedHessian</name>
      <anchorfile>a03744.html</anchorfile>
      <anchor>ad79623fc64110e086baa1980b0f9406a</anchor>
      <arglist>(const Ordering &amp;ordering) const</arglist>
    </member>
    <member kind="function">
      <type>Matrix</type>
      <name>augmentedHessian</name>
      <anchorfile>a03744.html</anchorfile>
      <anchor>a225dde5026c3f44386c0559ce4320287</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::pair&lt; Matrix, Vector &gt;</type>
      <name>hessian</name>
      <anchorfile>a03744.html</anchorfile>
      <anchor>a754d3a46e1d45acb96f01c7a223842f3</anchor>
      <arglist>(const Ordering &amp;ordering) const</arglist>
    </member>
    <member kind="function">
      <type>std::pair&lt; Matrix, Vector &gt;</type>
      <name>hessian</name>
      <anchorfile>a03744.html</anchorfile>
      <anchor>a7ed3e7cefeca1b31e17021005e6f7c44</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual VectorValues</type>
      <name>hessianDiagonal</name>
      <anchorfile>a03744.html</anchorfile>
      <anchor>ab325c99d695e76a6d1b99285d9ab8dae</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::map&lt; Key, Matrix &gt;</type>
      <name>hessianBlockDiagonal</name>
      <anchorfile>a03744.html</anchorfile>
      <anchor>a4d1d71b01cfecb78005b82465ebe632d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>VectorValues</type>
      <name>optimize</name>
      <anchorfile>a03744.html</anchorfile>
      <anchor>a8314e397b9be5c5e58465e319207553f</anchor>
      <arglist>(const Eliminate &amp;function=EliminationTraitsType::DefaultEliminate) const</arglist>
    </member>
    <member kind="function">
      <type>VectorValues</type>
      <name>optimize</name>
      <anchorfile>a03744.html</anchorfile>
      <anchor>a5876c0a7c2b287b57277cbd69bc78aae</anchor>
      <arglist>(const Ordering &amp;, const Eliminate &amp;function=EliminationTraitsType::DefaultEliminate) const</arglist>
    </member>
    <member kind="function">
      <type>VectorValues</type>
      <name>optimizeDensely</name>
      <anchorfile>a03744.html</anchorfile>
      <anchor>ae26bfbcee7625daf234a43fd45796700</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>VectorValues</type>
      <name>gradient</name>
      <anchorfile>a03744.html</anchorfile>
      <anchor>aa183f87ebad359ef5dee4ef626522bf2</anchor>
      <arglist>(const VectorValues &amp;x0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual VectorValues</type>
      <name>gradientAtZero</name>
      <anchorfile>a03744.html</anchorfile>
      <anchor>a4051ae22110840eeebe855652352ef69</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>VectorValues</type>
      <name>optimizeGradientSearch</name>
      <anchorfile>a03744.html</anchorfile>
      <anchor>a31ae5450f0fbcfc7e8edf0cb9deb21c2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>VectorValues</type>
      <name>transposeMultiply</name>
      <anchorfile>a03744.html</anchorfile>
      <anchor>adb2535546d074ea20f68d1c9a82ea91f</anchor>
      <arglist>(const Errors &amp;e) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>transposeMultiplyAdd</name>
      <anchorfile>a03744.html</anchorfile>
      <anchor>ad334bc63d65bb3fd53a28fdce19c9bc1</anchor>
      <arglist>(double alpha, const Errors &amp;e, VectorValues &amp;x) const</arglist>
    </member>
    <member kind="function">
      <type>Errors</type>
      <name>gaussianErrors</name>
      <anchorfile>a03744.html</anchorfile>
      <anchor>a908618e417977a645baca9f93b9c4e16</anchor>
      <arglist>(const VectorValues &amp;x) const</arglist>
    </member>
    <member kind="function">
      <type>Errors</type>
      <name>operator*</name>
      <anchorfile>a03744.html</anchorfile>
      <anchor>ac2ea218e3a3f18f0982d6baaf1a468b9</anchor>
      <arglist>(const VectorValues &amp;x) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>multiplyHessianAdd</name>
      <anchorfile>a03744.html</anchorfile>
      <anchor>ad48bf2fb09cf416d3f980d5385dd63a8</anchor>
      <arglist>(double alpha, const VectorValues &amp;x, VectorValues &amp;y) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>multiplyInPlace</name>
      <anchorfile>a03744.html</anchorfile>
      <anchor>a4a87e24812c266e87af6b691063b11ef</anchor>
      <arglist>(const VectorValues &amp;x, Errors &amp;e) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>multiplyInPlace</name>
      <anchorfile>a03744.html</anchorfile>
      <anchor>a899a8e63e67a30a060879c8478e9d351</anchor>
      <arglist>(const VectorValues &amp;x, const Errors::iterator &amp;e) const</arglist>
    </member>
    <member kind="typedef">
      <type>GaussianFactorGraph</type>
      <name>This</name>
      <anchorfile>a03744.html</anchorfile>
      <anchor>aa5ff7a930581421abeb3b93c1347fcdb</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>FactorGraph&lt; GaussianFactor &gt;</type>
      <name>Base</name>
      <anchorfile>a03744.html</anchorfile>
      <anchor>ae9e408910e2cb068adea00486d8274e6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>EliminateableFactorGraph&lt; This &gt;</type>
      <name>BaseEliminateable</name>
      <anchorfile>a03744.html</anchorfile>
      <anchor>a1b58d74e4489680e0d4a866bad4b0dcf</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; This &gt;</type>
      <name>shared_ptr</name>
      <anchorfile>a03744.html</anchorfile>
      <anchor>a1f73f4987b9bdaac5c1414a401c0364c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>KeySet</type>
      <name>Keys</name>
      <anchorfile>a03744.html</anchorfile>
      <anchor>aacb8e92ffef9b561c3d40338ef8506f5</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>boost::serialization::access</name>
      <anchorfile>a03744.html</anchorfile>
      <anchor>ac98d07dd8f7b70e16ccb9a01abf56b9c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::GaussianFactorGraphSystem</name>
    <filename>a03928.html</filename>
  </compound>
  <compound kind="class">
    <name>gtsam::GaussianISAM</name>
    <filename>a03752.html</filename>
    <base>ISAM&lt; GaussianBayesTree &gt;</base>
    <member kind="function">
      <type></type>
      <name>GaussianISAM</name>
      <anchorfile>a03752.html</anchorfile>
      <anchor>a876e1826e8fdfda05ef9636a11a813d8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GaussianISAM</name>
      <anchorfile>a03752.html</anchorfile>
      <anchor>afa79821d0c4b3f880bd60eacb7552f15</anchor>
      <arglist>(const GaussianBayesTree &amp;bayesTree)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GaussianISAM</name>
      <anchorfile>a03752.html</anchorfile>
      <anchor>a876e1826e8fdfda05ef9636a11a813d8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GaussianISAM</name>
      <anchorfile>a03752.html</anchorfile>
      <anchor>afa79821d0c4b3f880bd60eacb7552f15</anchor>
      <arglist>(const GaussianBayesTree &amp;bayesTree)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::GaussianJunctionTree</name>
    <filename>a03760.html</filename>
    <base>JunctionTree&lt; GaussianBayesTree, GaussianFactorGraph &gt;</base>
    <member kind="function">
      <type></type>
      <name>GaussianJunctionTree</name>
      <anchorfile>a03760.html</anchorfile>
      <anchor>aeff8507ed504dfffa8f28dc7466bbb40</anchor>
      <arglist>(const GaussianEliminationTree &amp;eliminationTree)</arglist>
    </member>
    <member kind="typedef">
      <type>JunctionTree&lt; GaussianBayesTree, GaussianFactorGraph &gt;</type>
      <name>Base</name>
      <anchorfile>a03760.html</anchorfile>
      <anchor>a46850a5afd2d6af758c5209792cde593</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GaussianJunctionTree</type>
      <name>This</name>
      <anchorfile>a03760.html</anchorfile>
      <anchor>a3d2cb56f10ff0b3920a1e57af73e3371</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; This &gt;</type>
      <name>shared_ptr</name>
      <anchorfile>a03760.html</anchorfile>
      <anchor>af18233320fb77123cdc946164743704f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::GaussMarkov1stOrderFactor</name>
    <filename>a05256.html</filename>
    <templarg>class VALUE</templarg>
    <base>NoiseModelFactor2&lt; VALUE, VALUE &gt;</base>
    <member kind="function">
      <type></type>
      <name>GaussMarkov1stOrderFactor</name>
      <anchorfile>a05256.html</anchorfile>
      <anchor>a06e7fed12e1cd0e29551a6150ae3775c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GaussMarkov1stOrderFactor</name>
      <anchorfile>a05256.html</anchorfile>
      <anchor>a5b136d82361f771ed6a2e37d688de1d1</anchor>
      <arglist>(const Key &amp;key1, const Key &amp;key2, double delta_t, Vector tau, const SharedGaussian &amp;model)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>a05256.html</anchorfile>
      <anchor>a754849e924c86c2dca6eae941dc5cbba</anchor>
      <arglist>(const std::string &amp;s, const KeyFormatter &amp;keyFormatter=DefaultKeyFormatter) const override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>equals</name>
      <anchorfile>a05256.html</anchorfile>
      <anchor>aaea676ff09527df3980f45fe93218cea</anchor>
      <arglist>(const NonlinearFactor &amp;expected, double tol=1e-9) const override</arglist>
    </member>
    <member kind="function">
      <type>Vector</type>
      <name>evaluateError</name>
      <anchorfile>a05256.html</anchorfile>
      <anchor>aed9eb9f19565807c3a829691c7fa011c</anchor>
      <arglist>(const VALUE &amp;p1, const VALUE &amp;p2, boost::optional&lt; Matrix &amp; &gt; H1=boost::none, boost::optional&lt; Matrix &amp; &gt; H2=boost::none) const override</arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>boost::serialization::access</name>
      <anchorfile>a05256.html</anchorfile>
      <anchor>ac98d07dd8f7b70e16ccb9a01abf56b9c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::GaussNewtonOptimizer</name>
    <filename>a04304.html</filename>
    <base>gtsam::NonlinearOptimizer</base>
    <member kind="function">
      <type></type>
      <name>GaussNewtonOptimizer</name>
      <anchorfile>a04304.html</anchorfile>
      <anchor>ac6a87de7dcab376696ede784ccb5da0e</anchor>
      <arglist>(const NonlinearFactorGraph &amp;graph, const Values &amp;initialValues, const GaussNewtonParams &amp;params=GaussNewtonParams())</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GaussNewtonOptimizer</name>
      <anchorfile>a04304.html</anchorfile>
      <anchor>add3883c2df337aa134c62dd34460e1e9</anchor>
      <arglist>(const NonlinearFactorGraph &amp;graph, const Values &amp;initialValues, const Ordering &amp;ordering)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~GaussNewtonOptimizer</name>
      <anchorfile>a04304.html</anchorfile>
      <anchor>a1a192f29b50d7fc49c4b085cd260266e</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>GaussianFactorGraph::shared_ptr</type>
      <name>iterate</name>
      <anchorfile>a04304.html</anchorfile>
      <anchor>aac60a78f5eb2157e916514cfa070dc70</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>const GaussNewtonParams &amp;</type>
      <name>params</name>
      <anchorfile>a04304.html</anchorfile>
      <anchor>a1084408cbbd06b40403a494ee99badbe</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GaussNewtonOptimizer</name>
      <anchorfile>a04304.html</anchorfile>
      <anchor>ac6a87de7dcab376696ede784ccb5da0e</anchor>
      <arglist>(const NonlinearFactorGraph &amp;graph, const Values &amp;initialValues, const GaussNewtonParams &amp;params=GaussNewtonParams())</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GaussNewtonOptimizer</name>
      <anchorfile>a04304.html</anchorfile>
      <anchor>add3883c2df337aa134c62dd34460e1e9</anchor>
      <arglist>(const NonlinearFactorGraph &amp;graph, const Values &amp;initialValues, const Ordering &amp;ordering)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~GaussNewtonOptimizer</name>
      <anchorfile>a04304.html</anchorfile>
      <anchor>a1a192f29b50d7fc49c4b085cd260266e</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>GaussianFactorGraph::shared_ptr</type>
      <name>iterate</name>
      <anchorfile>a04304.html</anchorfile>
      <anchor>aac60a78f5eb2157e916514cfa070dc70</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>const GaussNewtonParams &amp;</type>
      <name>params</name>
      <anchorfile>a04304.html</anchorfile>
      <anchor>a1084408cbbd06b40403a494ee99badbe</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>const NonlinearOptimizerParams &amp;</type>
      <name>_params</name>
      <anchorfile>a04304.html</anchorfile>
      <anchor>a6fc51df3b0bf89e7449a5b4c5c82485d</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>GaussNewtonParams</type>
      <name>ensureHasOrdering</name>
      <anchorfile>a04304.html</anchorfile>
      <anchor>a844e8aad06fade01e6741f22335932c3</anchor>
      <arglist>(GaussNewtonParams params, const NonlinearFactorGraph &amp;graph) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::GaussNewtonParams</name>
    <filename>a04300.html</filename>
    <base>gtsam::NonlinearOptimizerParams</base>
  </compound>
  <compound kind="class">
    <name>gtsam::noiseModel::mEstimator::GemanMcClure</name>
    <filename>a03860.html</filename>
    <base>gtsam::noiseModel::mEstimator::Base</base>
    <member kind="friend">
      <type>friend class</type>
      <name>boost::serialization::access</name>
      <anchorfile>a03860.html</anchorfile>
      <anchor>ac98d07dd8f7b70e16ccb9a01abf56b9c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::GeneralSFMFactor</name>
    <filename>a04776.html</filename>
    <templarg>class CAMERA</templarg>
    <templarg>class LANDMARK</templarg>
    <base>NoiseModelFactor2&lt; CAMERA, LANDMARK &gt;</base>
    <member kind="function">
      <type></type>
      <name>GeneralSFMFactor</name>
      <anchorfile>a04776.html</anchorfile>
      <anchor>a6597e39575729001daec1f975cee4bd7</anchor>
      <arglist>(const Point2 &amp;measured, const SharedNoiseModel &amp;model, Key cameraKey, Key landmarkKey)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GeneralSFMFactor</name>
      <anchorfile>a04776.html</anchorfile>
      <anchor>a65b2030a4a080aa03d6fa2ed183e5093</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GeneralSFMFactor</name>
      <anchorfile>a04776.html</anchorfile>
      <anchor>ab4a204f23fb77bacf94dabba6aa3e6f7</anchor>
      <arglist>(const Point2 &amp;p)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~GeneralSFMFactor</name>
      <anchorfile>a04776.html</anchorfile>
      <anchor>ab7071b196653ae332480aaae3c695e97</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>gtsam::NonlinearFactor::shared_ptr</type>
      <name>clone</name>
      <anchorfile>a04776.html</anchorfile>
      <anchor>a3ee4bedb9e042bafa1f78d046dbc04be</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>a04776.html</anchorfile>
      <anchor>ac2d8e0d33afcdb9960b9e3d80c4b3481</anchor>
      <arglist>(const std::string &amp;s=&quot;SFMFactor&quot;, const KeyFormatter &amp;keyFormatter=DefaultKeyFormatter) const override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>equals</name>
      <anchorfile>a04776.html</anchorfile>
      <anchor>a510f85b6f1fac7803804cf789aaa20e0</anchor>
      <arglist>(const NonlinearFactor &amp;p, double tol=1e-9) const override</arglist>
    </member>
    <member kind="function">
      <type>Vector</type>
      <name>evaluateError</name>
      <anchorfile>a04776.html</anchorfile>
      <anchor>a304d7e531420651aaae14ade9a7d1de9</anchor>
      <arglist>(const CAMERA &amp;camera, const LANDMARK &amp;point, boost::optional&lt; Matrix &amp; &gt; H1=boost::none, boost::optional&lt; Matrix &amp; &gt; H2=boost::none) const override</arglist>
    </member>
    <member kind="function">
      <type>boost::shared_ptr&lt; GaussianFactor &gt;</type>
      <name>linearize</name>
      <anchorfile>a04776.html</anchorfile>
      <anchor>a0c4d4198b0005be830f6b6d610c4fd37</anchor>
      <arglist>(const Values &amp;values) const override</arglist>
    </member>
    <member kind="function">
      <type>const Point2</type>
      <name>measured</name>
      <anchorfile>a04776.html</anchorfile>
      <anchor>a600eee15a3c90d46b0b9d9a9ece8f378</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="typedef">
      <type>GeneralSFMFactor&lt; CAMERA, LANDMARK &gt;</type>
      <name>This</name>
      <anchorfile>a04776.html</anchorfile>
      <anchor>a666ae4717c664ab751511226b5135d08</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>NoiseModelFactor2&lt; CAMERA, LANDMARK &gt;</type>
      <name>Base</name>
      <anchorfile>a04776.html</anchorfile>
      <anchor>a98fbb3f015804b390e4a6ce485fac27c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Point2</type>
      <name>measured_</name>
      <anchorfile>a04776.html</anchorfile>
      <anchor>ad207a707318ad32b2bdcaf6f8400c8d5</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>boost::serialization::access</name>
      <anchorfile>a04776.html</anchorfile>
      <anchor>ac98d07dd8f7b70e16ccb9a01abf56b9c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::GeneralSFMFactor2</name>
    <filename>a04784.html</filename>
    <templarg>class CALIBRATION</templarg>
    <base>NoiseModelFactor3&lt; Pose3, Point3, CALIBRATION &gt;</base>
    <member kind="function">
      <type></type>
      <name>GeneralSFMFactor2</name>
      <anchorfile>a04784.html</anchorfile>
      <anchor>a9edba229f8eb9818477c7cc2a4a49b38</anchor>
      <arglist>(const Point2 &amp;measured, const SharedNoiseModel &amp;model, Key poseKey, Key landmarkKey, Key calibKey)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GeneralSFMFactor2</name>
      <anchorfile>a04784.html</anchorfile>
      <anchor>a35cb09493e3196e3ab58049a8923a2fb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~GeneralSFMFactor2</name>
      <anchorfile>a04784.html</anchorfile>
      <anchor>a4dc2ba6aad594b05d1b8ded0689ce82e</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>gtsam::NonlinearFactor::shared_ptr</type>
      <name>clone</name>
      <anchorfile>a04784.html</anchorfile>
      <anchor>a5717bc369005137425884a9eae2903f9</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>a04784.html</anchorfile>
      <anchor>a7709cbed4f944990c0379f8bbe072c15</anchor>
      <arglist>(const std::string &amp;s=&quot;SFMFactor2&quot;, const KeyFormatter &amp;keyFormatter=DefaultKeyFormatter) const override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>equals</name>
      <anchorfile>a04784.html</anchorfile>
      <anchor>ac21326cb52acdda33042691c4d595aa4</anchor>
      <arglist>(const NonlinearFactor &amp;p, double tol=1e-9) const override</arglist>
    </member>
    <member kind="function">
      <type>Vector</type>
      <name>evaluateError</name>
      <anchorfile>a04784.html</anchorfile>
      <anchor>a617d1979a278fb0d984e6bc4488d5126</anchor>
      <arglist>(const Pose3 &amp;pose3, const Point3 &amp;point, const CALIBRATION &amp;calib, boost::optional&lt; Matrix &amp; &gt; H1=boost::none, boost::optional&lt; Matrix &amp; &gt; H2=boost::none, boost::optional&lt; Matrix &amp; &gt; H3=boost::none) const override</arglist>
    </member>
    <member kind="function">
      <type>const Point2</type>
      <name>measured</name>
      <anchorfile>a04784.html</anchorfile>
      <anchor>a9282c0dd5b7ea93004e753cf1a2d1146</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="typedef">
      <type>PinholeCamera&lt; CALIBRATION &gt;</type>
      <name>Camera</name>
      <anchorfile>a04784.html</anchorfile>
      <anchor>a998a6c897312bb10c30604ab4e4176f2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>NoiseModelFactor3&lt; Pose3, Point3, CALIBRATION &gt;</type>
      <name>Base</name>
      <anchorfile>a04784.html</anchorfile>
      <anchor>a5a334159f6da23d4f4ff1fd35c9b8ab0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Point2</type>
      <name>measured_</name>
      <anchorfile>a04784.html</anchorfile>
      <anchor>a83ff3c06799436d67e7d841de2fdb80b</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>boost::serialization::access</name>
      <anchorfile>a04784.html</anchorfile>
      <anchor>ac98d07dd8f7b70e16ccb9a01abf56b9c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::GenericProjectionFactor</name>
    <filename>a04832.html</filename>
    <templarg>class POSE</templarg>
    <templarg>class LANDMARK</templarg>
    <templarg>class CALIBRATION</templarg>
    <base>NoiseModelFactor2&lt; Pose3, Point3 &gt;</base>
    <member kind="function">
      <type></type>
      <name>GenericProjectionFactor</name>
      <anchorfile>a04832.html</anchorfile>
      <anchor>a87fd316162e688e38079f1a304ca6c46</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GenericProjectionFactor</name>
      <anchorfile>a04832.html</anchorfile>
      <anchor>aebd1ec0e741d556f72ed7e8309f7b259</anchor>
      <arglist>(const Point2 &amp;measured, const SharedNoiseModel &amp;model, Key poseKey, Key pointKey, const boost::shared_ptr&lt; CALIBRATION &gt; &amp;K, boost::optional&lt; POSE &gt; body_P_sensor=boost::none)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GenericProjectionFactor</name>
      <anchorfile>a04832.html</anchorfile>
      <anchor>ac43cf4ea5f79e0c3a64b5668505d89ad</anchor>
      <arglist>(const Point2 &amp;measured, const SharedNoiseModel &amp;model, Key poseKey, Key pointKey, const boost::shared_ptr&lt; CALIBRATION &gt; &amp;K, bool throwCheirality, bool verboseCheirality, boost::optional&lt; POSE &gt; body_P_sensor=boost::none)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~GenericProjectionFactor</name>
      <anchorfile>a04832.html</anchorfile>
      <anchor>a5c77a47fddfb02c53e485a8485e2cefa</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>gtsam::NonlinearFactor::shared_ptr</type>
      <name>clone</name>
      <anchorfile>a04832.html</anchorfile>
      <anchor>ace785875bfe7d210672026bd6cc87b24</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>a04832.html</anchorfile>
      <anchor>a1a4422ae8c5fa13d99514484916e2dfe</anchor>
      <arglist>(const std::string &amp;s=&quot;&quot;, const KeyFormatter &amp;keyFormatter=DefaultKeyFormatter) const override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>equals</name>
      <anchorfile>a04832.html</anchorfile>
      <anchor>a21e172c0bce5352a1d3f549bb0ec19d6</anchor>
      <arglist>(const NonlinearFactor &amp;p, double tol=1e-9) const override</arglist>
    </member>
    <member kind="function">
      <type>Vector</type>
      <name>evaluateError</name>
      <anchorfile>a04832.html</anchorfile>
      <anchor>a77de378f6445fc99874441ed4b47f7af</anchor>
      <arglist>(const Pose3 &amp;pose, const Point3 &amp;point, boost::optional&lt; Matrix &amp; &gt; H1=boost::none, boost::optional&lt; Matrix &amp; &gt; H2=boost::none) const override</arglist>
    </member>
    <member kind="function">
      <type>const Point2 &amp;</type>
      <name>measured</name>
      <anchorfile>a04832.html</anchorfile>
      <anchor>a44f5a818d919e8a6247e230f2cff4b58</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const boost::shared_ptr&lt; CALIBRATION &gt;</type>
      <name>calibration</name>
      <anchorfile>a04832.html</anchorfile>
      <anchor>af547d6825384782e577007dce4e0ab91</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const boost::optional&lt; POSE &gt; &amp;</type>
      <name>body_P_sensor</name>
      <anchorfile>a04832.html</anchorfile>
      <anchor>aa0ff146a1bbf8fddcdec37f1be6645bf</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>verboseCheirality</name>
      <anchorfile>a04832.html</anchorfile>
      <anchor>a149d45978d1104fe970df20eb2dff450</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>throwCheirality</name>
      <anchorfile>a04832.html</anchorfile>
      <anchor>ab4d91a228926cba2922d9e2e06ff4104</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="typedef">
      <type>NoiseModelFactor2&lt; POSE, LANDMARK &gt;</type>
      <name>Base</name>
      <anchorfile>a04832.html</anchorfile>
      <anchor>afb272b23dd8aefdd5fc4747c948aca5e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GenericProjectionFactor&lt; POSE, LANDMARK, CALIBRATION &gt;</type>
      <name>This</name>
      <anchorfile>a04832.html</anchorfile>
      <anchor>a284d1618cc30f43664b512e6236485ef</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; This &gt;</type>
      <name>shared_ptr</name>
      <anchorfile>a04832.html</anchorfile>
      <anchor>ad3d894b6b0ae69d0623f6f45272acb0a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Point2</type>
      <name>measured_</name>
      <anchorfile>a04832.html</anchorfile>
      <anchor>a255e1a0498e504c1c5ec0839a3b6c755</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>boost::shared_ptr&lt; CALIBRATION &gt;</type>
      <name>K_</name>
      <anchorfile>a04832.html</anchorfile>
      <anchor>a4dccf402a384fee6b9ad802c37ab989f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>boost::optional&lt; POSE &gt;</type>
      <name>body_P_sensor_</name>
      <anchorfile>a04832.html</anchorfile>
      <anchor>a481f97058dad682badfb45fd27c8d444</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>throwCheirality_</name>
      <anchorfile>a04832.html</anchorfile>
      <anchor>a9862177693076e80e6e0cd03ab11a94d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>verboseCheirality_</name>
      <anchorfile>a04832.html</anchorfile>
      <anchor>adaf27277e2f5b0bd1cf395ef8fda68aa</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>boost::serialization::access</name>
      <anchorfile>a04832.html</anchorfile>
      <anchor>ac98d07dd8f7b70e16ccb9a01abf56b9c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::GenericStereoFactor</name>
    <filename>a04896.html</filename>
    <templarg>class POSE</templarg>
    <templarg>class LANDMARK</templarg>
    <base>NoiseModelFactor2&lt; POSE, LANDMARK &gt;</base>
    <member kind="function">
      <type></type>
      <name>GenericStereoFactor</name>
      <anchorfile>a04896.html</anchorfile>
      <anchor>aac8f2d1b74b72d392ae450974e8d1e18</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GenericStereoFactor</name>
      <anchorfile>a04896.html</anchorfile>
      <anchor>aca587c1e7ce85802898fbf398470b229</anchor>
      <arglist>(const StereoPoint2 &amp;measured, const SharedNoiseModel &amp;model, Key poseKey, Key landmarkKey, const Cal3_S2Stereo::shared_ptr &amp;K, boost::optional&lt; POSE &gt; body_P_sensor=boost::none)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GenericStereoFactor</name>
      <anchorfile>a04896.html</anchorfile>
      <anchor>a3e9bbe838c9f91e54e8b6f9d61d3f537</anchor>
      <arglist>(const StereoPoint2 &amp;measured, const SharedNoiseModel &amp;model, Key poseKey, Key landmarkKey, const Cal3_S2Stereo::shared_ptr &amp;K, bool throwCheirality, bool verboseCheirality, boost::optional&lt; POSE &gt; body_P_sensor=boost::none)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~GenericStereoFactor</name>
      <anchorfile>a04896.html</anchorfile>
      <anchor>a70805bfdaea7d8f8b283553712179c6e</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>gtsam::NonlinearFactor::shared_ptr</type>
      <name>clone</name>
      <anchorfile>a04896.html</anchorfile>
      <anchor>af8c9a316e6190af1bc99f65f4b88c1a8</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>a04896.html</anchorfile>
      <anchor>acf163325f264598418907b69c6bd3c19</anchor>
      <arglist>(const std::string &amp;s=&quot;&quot;, const KeyFormatter &amp;keyFormatter=DefaultKeyFormatter) const override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>equals</name>
      <anchorfile>a04896.html</anchorfile>
      <anchor>a169412c1d48588eebb340cac0a92ad74</anchor>
      <arglist>(const NonlinearFactor &amp;f, double tol=1e-9) const override</arglist>
    </member>
    <member kind="function">
      <type>Vector</type>
      <name>evaluateError</name>
      <anchorfile>a04896.html</anchorfile>
      <anchor>a10afa2d65614686bbf40119a1ed5a90f</anchor>
      <arglist>(const Pose3 &amp;pose, const Point3 &amp;point, boost::optional&lt; Matrix &amp; &gt; H1=boost::none, boost::optional&lt; Matrix &amp; &gt; H2=boost::none) const override</arglist>
    </member>
    <member kind="function">
      <type>const StereoPoint2 &amp;</type>
      <name>measured</name>
      <anchorfile>a04896.html</anchorfile>
      <anchor>a92382457d5ec985d0e12bccbefcc0353</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Cal3_S2Stereo::shared_ptr</type>
      <name>calibration</name>
      <anchorfile>a04896.html</anchorfile>
      <anchor>a1a512894a302677b724ef4a0c2b6d0f8</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>verboseCheirality</name>
      <anchorfile>a04896.html</anchorfile>
      <anchor>a73bfae830f21b0246b85e25870dafe34</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>throwCheirality</name>
      <anchorfile>a04896.html</anchorfile>
      <anchor>a0f42c83ba31c711f67243d36b72a7d31</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="typedef">
      <type>NoiseModelFactor2&lt; POSE, LANDMARK &gt;</type>
      <name>Base</name>
      <anchorfile>a04896.html</anchorfile>
      <anchor>afab7f245fcbd293f400fe700913a85b8</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GenericStereoFactor&lt; POSE, LANDMARK &gt;</type>
      <name>This</name>
      <anchorfile>a04896.html</anchorfile>
      <anchor>a6655f82262d0e9cfd83bf7ecea4cbea3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; GenericStereoFactor &gt;</type>
      <name>shared_ptr</name>
      <anchorfile>a04896.html</anchorfile>
      <anchor>a77ec7f1a8e17a46ad0a6e0d092b2549f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>POSE</type>
      <name>CamPose</name>
      <anchorfile>a04896.html</anchorfile>
      <anchor>acf611598e4995aaba265b3b4c853e67c</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>boost::serialization::access</name>
      <anchorfile>a04896.html</anchorfile>
      <anchor>ac98d07dd8f7b70e16ccb9a01abf56b9c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::GenericValue</name>
    <filename>a02492.html</filename>
    <templarg>class T</templarg>
    <base>gtsam::Value</base>
    <member kind="function">
      <type></type>
      <name>GenericValue</name>
      <anchorfile>a02492.html</anchorfile>
      <anchor>a8bf7ebb7a0a758cebd90d38663f88f89</anchor>
      <arglist>(const T &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>const T &amp;</type>
      <name>value</name>
      <anchorfile>a02492.html</anchorfile>
      <anchor>adb4eb10667d811f19db1e32992785c0a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>T &amp;</type>
      <name>value</name>
      <anchorfile>a02492.html</anchorfile>
      <anchor>a13de4f83b7b5305a7be4ee1136dcd201</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~GenericValue</name>
      <anchorfile>a02492.html</anchorfile>
      <anchor>addd810632994517d363f0baa629fcf66</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>equals_</name>
      <anchorfile>a02492.html</anchorfile>
      <anchor>ad352f894df0e4ede3b39e45ffa0cb98d</anchor>
      <arglist>(const Value &amp;p, double tol=1e-9) const override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>equals</name>
      <anchorfile>a02492.html</anchorfile>
      <anchor>a60ddebd2ce398b9697a0161274ae91cc</anchor>
      <arglist>(const GenericValue &amp;other, double tol=1e-9) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>a02492.html</anchorfile>
      <anchor>a5a975666c504df56c7c633401e07a0c7</anchor>
      <arglist>(const std::string &amp;str) const override</arglist>
    </member>
    <member kind="function">
      <type>Value *</type>
      <name>clone_</name>
      <anchorfile>a02492.html</anchorfile>
      <anchor>a139a63931a8e8afab4d67cb5bc326659</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>deallocate_</name>
      <anchorfile>a02492.html</anchorfile>
      <anchor>a93ec4963773f9cfcfdc34b437b0274b1</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>boost::shared_ptr&lt; Value &gt;</type>
      <name>clone</name>
      <anchorfile>a02492.html</anchorfile>
      <anchor>af542d73ada53c5e0f80f89d0fe2a937c</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>Value *</type>
      <name>retract_</name>
      <anchorfile>a02492.html</anchorfile>
      <anchor>a1e837adf9acfec8a734324b76a9266be</anchor>
      <arglist>(const Vector &amp;delta) const override</arglist>
    </member>
    <member kind="function">
      <type>Vector</type>
      <name>localCoordinates_</name>
      <anchorfile>a02492.html</anchorfile>
      <anchor>aec0e38fe2f3bab85d4e18bb7509ce152</anchor>
      <arglist>(const Value &amp;value2) const override</arglist>
    </member>
    <member kind="function">
      <type>GenericValue</type>
      <name>retract</name>
      <anchorfile>a02492.html</anchorfile>
      <anchor>ae54ab9a7abe2a7d48bc2756aa545ac78</anchor>
      <arglist>(const Vector &amp;delta) const</arglist>
    </member>
    <member kind="function">
      <type>Vector</type>
      <name>localCoordinates</name>
      <anchorfile>a02492.html</anchorfile>
      <anchor>ac47a680ad0e320fa896e740fe662ad4d</anchor>
      <arglist>(const GenericValue &amp;value2) const</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>dim</name>
      <anchorfile>a02492.html</anchorfile>
      <anchor>a69007ce84df439ad16eefdd23e55580e</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>Value &amp;</type>
      <name>operator=</name>
      <anchorfile>a02492.html</anchorfile>
      <anchor>a541ab79b139a7177b1a561ad199f9751</anchor>
      <arglist>(const Value &amp;rhs) override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>GenericValue&lt; T &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>a02492.html</anchorfile>
      <anchor>ac4562bce75070c4d3995836a25f3242d</anchor>
      <arglist>(const GenericValue&lt; T &gt; &amp;rhs)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>T</type>
      <name>value_</name>
      <anchorfile>a02492.html</anchorfile>
      <anchor>ab8454e55f25f7f475f8d31001625a8e9</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>boost::serialization::access</name>
      <anchorfile>a02492.html</anchorfile>
      <anchor>ac98d07dd8f7b70e16ccb9a01abf56b9c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>gtsam::internal::GetDimensionImpl</name>
    <filename>a02564.html</filename>
    <templarg>class Class</templarg>
    <templarg>int N</templarg>
  </compound>
  <compound kind="struct">
    <name>gtsam::internal::GetDimensionImpl&lt; Class, Eigen::Dynamic &gt;</name>
    <filename>a02568.html</filename>
    <templarg>class Class</templarg>
  </compound>
  <compound kind="class">
    <name>gtsam::GncOptimizer</name>
    <filename>a04308.html</filename>
    <templarg>class GncParameters</templarg>
    <member kind="function">
      <type></type>
      <name>GncOptimizer</name>
      <anchorfile>a04308.html</anchorfile>
      <anchor>af9300f1031aa2d642436842bc741aa73</anchor>
      <arglist>(const NonlinearFactorGraph &amp;graph, const Values &amp;initialValues, const GncParameters &amp;params=GncParameters())</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setInlierCostThresholds</name>
      <anchorfile>a04308.html</anchorfile>
      <anchor>a93e6b6f6a41740f1f8062be48836e1ea</anchor>
      <arglist>(const double inth)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setInlierCostThresholds</name>
      <anchorfile>a04308.html</anchorfile>
      <anchor>a696bed5c5439c47e5f34decb64c4656b</anchor>
      <arglist>(const Vector &amp;inthVec)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setInlierCostThresholdsAtProbability</name>
      <anchorfile>a04308.html</anchorfile>
      <anchor>a9737e9990e1c07cc2dc6e5e4e1856811</anchor>
      <arglist>(const double alpha)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setWeights</name>
      <anchorfile>a04308.html</anchorfile>
      <anchor>a2831a7daa40a2b3efff9b0ef2bd2deb7</anchor>
      <arglist>(const Vector w)</arglist>
    </member>
    <member kind="function">
      <type>const NonlinearFactorGraph &amp;</type>
      <name>getFactors</name>
      <anchorfile>a04308.html</anchorfile>
      <anchor>aae745e4be328bb80ad0632503378408e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Values &amp;</type>
      <name>getState</name>
      <anchorfile>a04308.html</anchorfile>
      <anchor>a68bf088d5768d9e9a397c6b798355a34</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const GncParameters &amp;</type>
      <name>getParams</name>
      <anchorfile>a04308.html</anchorfile>
      <anchor>adbbef1420db9c3fb2163f6e863c2837f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Vector &amp;</type>
      <name>getWeights</name>
      <anchorfile>a04308.html</anchorfile>
      <anchor>ab4d99f54006eb05a4869c043f5e38b93</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Vector &amp;</type>
      <name>getInlierCostThresholds</name>
      <anchorfile>a04308.html</anchorfile>
      <anchor>a4c05f1901f019fc12d926ef622a7d7b6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>equals</name>
      <anchorfile>a04308.html</anchorfile>
      <anchor>a8ef6a02fb66fbff32b59e86aeceddb80</anchor>
      <arglist>(const GncOptimizer &amp;other, double tol=1e-9) const</arglist>
    </member>
    <member kind="function">
      <type>Values</type>
      <name>optimize</name>
      <anchorfile>a04308.html</anchorfile>
      <anchor>a4806229b28d30542a6d259b9e6258c0a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>initializeMu</name>
      <anchorfile>a04308.html</anchorfile>
      <anchor>a7f832695042f30cf04fabb44913a64cd</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>updateMu</name>
      <anchorfile>a04308.html</anchorfile>
      <anchor>a8d4b9127e3d27f4605087eebc47b0b15</anchor>
      <arglist>(const double mu) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>checkMuConvergence</name>
      <anchorfile>a04308.html</anchorfile>
      <anchor>a302084640dd5a35e9895911aa9b841e2</anchor>
      <arglist>(const double mu) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>checkCostConvergence</name>
      <anchorfile>a04308.html</anchorfile>
      <anchor>a66d6c300cc2bc33dae93ef04b006e6e6</anchor>
      <arglist>(const double cost, const double prev_cost) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>checkWeightsConvergence</name>
      <anchorfile>a04308.html</anchorfile>
      <anchor>a1a80e232b8e63025d14647f13c6ebdfe</anchor>
      <arglist>(const Vector &amp;weights) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>checkConvergence</name>
      <anchorfile>a04308.html</anchorfile>
      <anchor>a8ff9d9337c35c4b6eb03c2858f9ae557</anchor>
      <arglist>(const double mu, const Vector &amp;weights, const double cost, const double prev_cost) const</arglist>
    </member>
    <member kind="function">
      <type>NonlinearFactorGraph</type>
      <name>makeWeightedGraph</name>
      <anchorfile>a04308.html</anchorfile>
      <anchor>aa89a7071def98a46110ead257b03e101</anchor>
      <arglist>(const Vector &amp;weights) const</arglist>
    </member>
    <member kind="function">
      <type>Vector</type>
      <name>calculateWeights</name>
      <anchorfile>a04308.html</anchorfile>
      <anchor>a7452a27c97ca9877b079da794e698ef5</anchor>
      <arglist>(const Values &amp;currentEstimate, const double mu)</arglist>
    </member>
    <member kind="typedef">
      <type>GncParameters::OptimizerType</type>
      <name>BaseOptimizer</name>
      <anchorfile>a04308.html</anchorfile>
      <anchor>a383d5ea44839ef8bcba99aac8e76d7f6</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::GncParams</name>
    <filename>a04312.html</filename>
    <templarg>class BaseOptimizerParameters</templarg>
    <member kind="function">
      <type></type>
      <name>GncParams</name>
      <anchorfile>a04312.html</anchorfile>
      <anchor>a2dc4903a5893660edbaf4ea47abcb12d</anchor>
      <arglist>(const BaseOptimizerParameters &amp;baseOptimizerParams)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GncParams</name>
      <anchorfile>a04312.html</anchorfile>
      <anchor>a14867f2ab8415772117299e4c76247a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setLossType</name>
      <anchorfile>a04312.html</anchorfile>
      <anchor>ab2a6cb7ce9df71f8f7e25298b787a918</anchor>
      <arglist>(const GncLossType type)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setMaxIterations</name>
      <anchorfile>a04312.html</anchorfile>
      <anchor>adff1a24e32e02d257f12baecea9aace3</anchor>
      <arglist>(const size_t maxIter)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setMuStep</name>
      <anchorfile>a04312.html</anchorfile>
      <anchor>acd415bde8436515800ebf6ac4c5b3e88</anchor>
      <arglist>(const double step)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setRelativeCostTol</name>
      <anchorfile>a04312.html</anchorfile>
      <anchor>a7f86f9708d9b40d06ab0f0b40b2c238d</anchor>
      <arglist>(double value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setWeightsTol</name>
      <anchorfile>a04312.html</anchorfile>
      <anchor>afbaa1e98e271f875f267e93e44587d29</anchor>
      <arglist>(double value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setVerbosityGNC</name>
      <anchorfile>a04312.html</anchorfile>
      <anchor>ad67256e7863424e19e5bc7407534e87d</anchor>
      <arglist>(const Verbosity value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setKnownInliers</name>
      <anchorfile>a04312.html</anchorfile>
      <anchor>abd0a02d936af50b5e37426667a9860b0</anchor>
      <arglist>(const std::vector&lt; size_t &gt; &amp;knownIn)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setKnownOutliers</name>
      <anchorfile>a04312.html</anchorfile>
      <anchor>a922888dec5965ae2ac89ee1fdc1bbbc0</anchor>
      <arglist>(const std::vector&lt; size_t &gt; &amp;knownOut)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>equals</name>
      <anchorfile>a04312.html</anchorfile>
      <anchor>a7aff7952711d122b9fb1fbc03ddf49a3</anchor>
      <arglist>(const GncParams &amp;other, double tol=1e-9) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>a04312.html</anchorfile>
      <anchor>a1e3d775b1a55491c0de09c8e5c58d1df</anchor>
      <arglist>(const std::string &amp;str) const</arglist>
    </member>
    <member kind="variable">
      <type>BaseOptimizerParameters</type>
      <name>baseOptimizerParams</name>
      <anchorfile>a04312.html</anchorfile>
      <anchor>a001534e4d9b2665aaf8939fc127d70c6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>GncLossType</type>
      <name>lossType</name>
      <anchorfile>a04312.html</anchorfile>
      <anchor>a82358379ad02234a33fc27904b243308</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>size_t</type>
      <name>maxIterations</name>
      <anchorfile>a04312.html</anchorfile>
      <anchor>aabd2fc9cdbe057aafbafbf75fb7de52e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>muStep</name>
      <anchorfile>a04312.html</anchorfile>
      <anchor>a4ee0444cab653b4c562673806f3754a3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>relativeCostTol</name>
      <anchorfile>a04312.html</anchorfile>
      <anchor>ad5d72e89bed6a0cd85b91ea3e5586ca3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>weightsTol</name>
      <anchorfile>a04312.html</anchorfile>
      <anchor>a631b80e4b8d78e7ba7fc27fd1ddbddcf</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Verbosity</type>
      <name>verbosity</name>
      <anchorfile>a04312.html</anchorfile>
      <anchor>a78182ebae84179daa9386e8e7564b826</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; size_t &gt;</type>
      <name>knownInliers</name>
      <anchorfile>a04312.html</anchorfile>
      <anchor>a08e1fb12a53d15807eb3d95e7311be28</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; size_t &gt;</type>
      <name>knownOutliers</name>
      <anchorfile>a04312.html</anchorfile>
      <anchor>ade891a55b899e4fd4eb8d9d1143f6742</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>Verbosity</name>
      <anchorfile>a04312.html</anchorfile>
      <anchor>af5980f9a76b2863fc402e1607227826b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>BaseOptimizerParameters::OptimizerType</type>
      <name>OptimizerType</name>
      <anchorfile>a04312.html</anchorfile>
      <anchor>a14b9310dc6d8421cc8e8fff0db4cf545</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::GPSFactor</name>
    <filename>a04080.html</filename>
    <base>NoiseModelFactor1&lt; Pose3 &gt;</base>
    <member kind="function">
      <type></type>
      <name>GPSFactor</name>
      <anchorfile>a04080.html</anchorfile>
      <anchor>a2c18c211bcbb029e12310ed4d6bcc2cd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GPSFactor</name>
      <anchorfile>a04080.html</anchorfile>
      <anchor>aadfaf1bf9a6252628e62a7259baa34a4</anchor>
      <arglist>(Key key, const Point3 &amp;gpsIn, const SharedNoiseModel &amp;model)</arglist>
    </member>
    <member kind="function">
      <type>gtsam::NonlinearFactor::shared_ptr</type>
      <name>clone</name>
      <anchorfile>a04080.html</anchorfile>
      <anchor>aae22711fd7e4f7bb66111b9c4de8dea5</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>a04080.html</anchorfile>
      <anchor>a0c9b579d3134b1956dda9a6b90492f48</anchor>
      <arglist>(const std::string &amp;s=&quot;&quot;, const KeyFormatter &amp;keyFormatter=DefaultKeyFormatter) const override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>equals</name>
      <anchorfile>a04080.html</anchorfile>
      <anchor>a2742a30b72e22ba3487b816e4ceb3dc7</anchor>
      <arglist>(const NonlinearFactor &amp;expected, double tol=1e-9) const override</arglist>
    </member>
    <member kind="function">
      <type>Vector</type>
      <name>evaluateError</name>
      <anchorfile>a04080.html</anchorfile>
      <anchor>a29e855b2db687c6287cfb6b23d783784</anchor>
      <arglist>(const Pose3 &amp;p, boost::optional&lt; Matrix &amp; &gt; H=boost::none) const override</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::pair&lt; Pose3, Vector3 &gt;</type>
      <name>EstimateState</name>
      <anchorfile>a04080.html</anchorfile>
      <anchor>aa8d4c043abd2c3692e44d9adef8f7c9e</anchor>
      <arglist>(double t1, const Point3 &amp;NED1, double t2, const Point3 &amp;NED2, double timestamp)</arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; GPSFactor &gt;</type>
      <name>shared_ptr</name>
      <anchorfile>a04080.html</anchorfile>
      <anchor>addc288a62819fd96f68feef3a953de69</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GPSFactor</type>
      <name>This</name>
      <anchorfile>a04080.html</anchorfile>
      <anchor>a09a484b80ec2d6b518c59cc8012d7895</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>boost::serialization::access</name>
      <anchorfile>a04080.html</anchorfile>
      <anchor>ac98d07dd8f7b70e16ccb9a01abf56b9c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::GPSFactor2</name>
    <filename>a04084.html</filename>
    <base>NoiseModelFactor1&lt; NavState &gt;</base>
    <member kind="function">
      <type></type>
      <name>GPSFactor2</name>
      <anchorfile>a04084.html</anchorfile>
      <anchor>ab2d41c2ac9e0bd92725e0b756dd83fef</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GPSFactor2</name>
      <anchorfile>a04084.html</anchorfile>
      <anchor>a54ca84b1574a5f94e83424155cbb3c5c</anchor>
      <arglist>(Key key, const Point3 &amp;gpsIn, const SharedNoiseModel &amp;model)</arglist>
    </member>
    <member kind="function">
      <type>gtsam::NonlinearFactor::shared_ptr</type>
      <name>clone</name>
      <anchorfile>a04084.html</anchorfile>
      <anchor>a1ad2b8adb95aecf0431905132db48841</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>a04084.html</anchorfile>
      <anchor>aaf585affc2cd4a11753e943747f42cf5</anchor>
      <arglist>(const std::string &amp;s=&quot;&quot;, const KeyFormatter &amp;keyFormatter=DefaultKeyFormatter) const override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>equals</name>
      <anchorfile>a04084.html</anchorfile>
      <anchor>ac65ab668c69a62dd8f5a091dc61e7ada</anchor>
      <arglist>(const NonlinearFactor &amp;expected, double tol=1e-9) const override</arglist>
    </member>
    <member kind="function">
      <type>Vector</type>
      <name>evaluateError</name>
      <anchorfile>a04084.html</anchorfile>
      <anchor>a9654292f7b6f12a0e59d3521f379b0f1</anchor>
      <arglist>(const NavState &amp;p, boost::optional&lt; Matrix &amp; &gt; H=boost::none) const override</arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; GPSFactor2 &gt;</type>
      <name>shared_ptr</name>
      <anchorfile>a04084.html</anchorfile>
      <anchor>a8694662da33ab6c8d077cf25b2bae69c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GPSFactor2</type>
      <name>This</name>
      <anchorfile>a04084.html</anchorfile>
      <anchor>a435d6411862b6a971171e922b355136e</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>boost::serialization::access</name>
      <anchorfile>a04084.html</anchorfile>
      <anchor>ac98d07dd8f7b70e16ccb9a01abf56b9c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>gtsam::GraphvizFormatting</name>
    <filename>a04476.html</filename>
    <member kind="function">
      <type></type>
      <name>GraphvizFormatting</name>
      <anchorfile>a04476.html</anchorfile>
      <anchor>a28cc4181d43026077d292c8f7bbc93a9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>Axis</type>
      <name>paperHorizontalAxis</name>
      <anchorfile>a04476.html</anchorfile>
      <anchor>acd47a7fd6c759b84610f2f0c8643cb3b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Axis</type>
      <name>paperVerticalAxis</name>
      <anchorfile>a04476.html</anchorfile>
      <anchor>a2510b8d60ade59a0cb2eb20bdeabefa5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>figureWidthInches</name>
      <anchorfile>a04476.html</anchorfile>
      <anchor>a956beb8694084f8d8867b0bec6a84459</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>figureHeightInches</name>
      <anchorfile>a04476.html</anchorfile>
      <anchor>ae78b1146dd869627a7e103669d96e636</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>scale</name>
      <anchorfile>a04476.html</anchorfile>
      <anchor>a7f90a6942877030cb1234c33fbc74755</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>mergeSimilarFactors</name>
      <anchorfile>a04476.html</anchorfile>
      <anchor>a7be882956fb690537dffee6b657bee1c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>plotFactorPoints</name>
      <anchorfile>a04476.html</anchorfile>
      <anchor>a37e8753118a817a2b736f988bfbb525b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>connectKeysToFactor</name>
      <anchorfile>a04476.html</anchorfile>
      <anchor>ade060391ef247c9263b2ff50ea2629f2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>binaryEdges</name>
      <anchorfile>a04476.html</anchorfile>
      <anchor>a01c61272515e5360554f0291d1293c50</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::map&lt; size_t, Point2 &gt;</type>
      <name>factorPositions</name>
      <anchorfile>a04476.html</anchorfile>
      <anchor>a8a11a96fd9d6aa85116f6c8ddc886b4a</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>gtsam::group_tag</name>
    <filename>a02500.html</filename>
  </compound>
  <compound kind="struct">
    <name>gtsam::internal::handle</name>
    <filename>a04536.html</filename>
    <templarg>typename ValueType</templarg>
  </compound>
  <compound kind="struct">
    <name>gtsam::internal::handle&lt; Eigen::Matrix&lt; double, M, N &gt; &gt;</name>
    <filename>a04552.html</filename>
    <templarg>int M</templarg>
    <templarg>int N</templarg>
  </compound>
  <compound kind="struct">
    <name>gtsam::internal::handle_matrix</name>
    <filename>a04540.html</filename>
    <templarg>typename MatrixType</templarg>
    <templarg>bool isDynamic</templarg>
  </compound>
  <compound kind="struct">
    <name>gtsam::internal::handle_matrix&lt; Eigen::Matrix&lt; double, M, N &gt;, false &gt;</name>
    <filename>a04548.html</filename>
    <templarg>int M</templarg>
    <templarg>int N</templarg>
  </compound>
  <compound kind="struct">
    <name>gtsam::internal::handle_matrix&lt; Eigen::Matrix&lt; double, M, N &gt;, true &gt;</name>
    <filename>a04544.html</filename>
    <templarg>int M</templarg>
    <templarg>int N</templarg>
  </compound>
  <compound kind="struct">
    <name>gtsam::HasBearing</name>
    <filename>a03040.html</filename>
    <templarg>class A1</templarg>
    <templarg>typename A2</templarg>
    <templarg>class RT</templarg>
  </compound>
  <compound kind="struct">
    <name>gtsam::internal::HasManifoldPrereqs</name>
    <filename>a02560.html</filename>
    <templarg>class Class</templarg>
  </compound>
  <compound kind="struct">
    <name>gtsam::HasRange</name>
    <filename>a03044.html</filename>
    <templarg>class A1</templarg>
    <templarg>typename A2</templarg>
    <templarg>class RT</templarg>
  </compound>
  <compound kind="struct">
    <name>gtsam::HasTestablePrereqs</name>
    <filename>a02656.html</filename>
    <templarg>typename T</templarg>
  </compound>
  <compound kind="struct">
    <name>gtsam::internal::HasVectorSpacePrereqs</name>
    <filename>a02756.html</filename>
    <templarg>class Class</templarg>
  </compound>
  <compound kind="class">
    <name>gtsam::HessianFactor</name>
    <filename>a03764.html</filename>
    <base>gtsam::GaussianFactor</base>
    <member kind="function">
      <type></type>
      <name>HessianFactor</name>
      <anchorfile>a03764.html</anchorfile>
      <anchor>acdcbc6dc5ead9bfdb6010f74bee3c8df</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HessianFactor</name>
      <anchorfile>a03764.html</anchorfile>
      <anchor>a7f637f93694de5b61c160376f5702cdd</anchor>
      <arglist>(Key j, const Matrix &amp;G, const Vector &amp;g, double f)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HessianFactor</name>
      <anchorfile>a03764.html</anchorfile>
      <anchor>aaebd96bc8dc741f8509a173814df19d2</anchor>
      <arglist>(Key j, const Vector &amp;mu, const Matrix &amp;Sigma)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HessianFactor</name>
      <anchorfile>a03764.html</anchorfile>
      <anchor>abb07c3bd55ff688700f82f6024bdf9f0</anchor>
      <arglist>(Key j1, Key j2, const Matrix &amp;G11, const Matrix &amp;G12, const Vector &amp;g1, const Matrix &amp;G22, const Vector &amp;g2, double f)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HessianFactor</name>
      <anchorfile>a03764.html</anchorfile>
      <anchor>a8dd0c87ce694143e2ad42c48559f9883</anchor>
      <arglist>(Key j1, Key j2, Key j3, const Matrix &amp;G11, const Matrix &amp;G12, const Matrix &amp;G13, const Vector &amp;g1, const Matrix &amp;G22, const Matrix &amp;G23, const Vector &amp;g2, const Matrix &amp;G33, const Vector &amp;g3, double f)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HessianFactor</name>
      <anchorfile>a03764.html</anchorfile>
      <anchor>a3dcc955082863c99391622760e7bdc93</anchor>
      <arglist>(const KeyVector &amp;js, const std::vector&lt; Matrix &gt; &amp;Gs, const std::vector&lt; Vector &gt; &amp;gs, double f)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HessianFactor</name>
      <anchorfile>a03764.html</anchorfile>
      <anchor>aea53397c9d43a943410ca33a4d8953d4</anchor>
      <arglist>(const KEYS &amp;keys, const SymmetricBlockMatrix &amp;augmentedInformation)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HessianFactor</name>
      <anchorfile>a03764.html</anchorfile>
      <anchor>ab4d355478837b450288cb1aac6d2d7ba</anchor>
      <arglist>(const JacobianFactor &amp;cg)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HessianFactor</name>
      <anchorfile>a03764.html</anchorfile>
      <anchor>ae8dd0248da60828ce386aed28b5dbd8e</anchor>
      <arglist>(const GaussianFactor &amp;factor)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HessianFactor</name>
      <anchorfile>a03764.html</anchorfile>
      <anchor>a2d0d01c6cb988106b0c4ae553f39803b</anchor>
      <arglist>(const GaussianFactorGraph &amp;factors, const Scatter &amp;scatter)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HessianFactor</name>
      <anchorfile>a03764.html</anchorfile>
      <anchor>a6c95f71b3d19762166fd37e02871f978</anchor>
      <arglist>(const GaussianFactorGraph &amp;factors)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~HessianFactor</name>
      <anchorfile>a03764.html</anchorfile>
      <anchor>a5ca13764e5e0c9fa435202ccd258b1b8</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>GaussianFactor::shared_ptr</type>
      <name>clone</name>
      <anchorfile>a03764.html</anchorfile>
      <anchor>a2b524c273030776e97488d1c66841b3f</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>a03764.html</anchorfile>
      <anchor>ae0d9d31da273dd46de1778a717694bf6</anchor>
      <arglist>(const std::string &amp;s=&quot;&quot;, const KeyFormatter &amp;formatter=DefaultKeyFormatter) const override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>equals</name>
      <anchorfile>a03764.html</anchorfile>
      <anchor>af35fc14302ac414bc88a697c1658beac</anchor>
      <arglist>(const GaussianFactor &amp;lf, double tol=1e-9) const override</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>error</name>
      <anchorfile>a03764.html</anchorfile>
      <anchor>a3981ad4ee1b4c518288f212fe936a141</anchor>
      <arglist>(const VectorValues &amp;c) const override</arglist>
    </member>
    <member kind="function">
      <type>DenseIndex</type>
      <name>getDim</name>
      <anchorfile>a03764.html</anchorfile>
      <anchor>a80ddf11f944f88ac1e695b72cbca4885</anchor>
      <arglist>(const_iterator variable) const override</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>rows</name>
      <anchorfile>a03764.html</anchorfile>
      <anchor>aa8ebfa1105fd175d5c1eea3380c94259</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>GaussianFactor::shared_ptr</type>
      <name>negate</name>
      <anchorfile>a03764.html</anchorfile>
      <anchor>aa868c09fc1707b72e61c0a945c4d1177</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>empty</name>
      <anchorfile>a03764.html</anchorfile>
      <anchor>aff44c3b4be9094e3340870d5161adacc</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>constantTerm</name>
      <anchorfile>a03764.html</anchorfile>
      <anchor>a51e8f87fdbb60bd0744b624a6bdaa8e4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double &amp;</type>
      <name>constantTerm</name>
      <anchorfile>a03764.html</anchorfile>
      <anchor>afca56ce4b4515feb1b108a80f0dbd152</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>SymmetricBlockMatrix::constBlock</type>
      <name>linearTerm</name>
      <anchorfile>a03764.html</anchorfile>
      <anchor>a8640eb9977d58a1e01be42dc49b7bc76</anchor>
      <arglist>(const_iterator j) const</arglist>
    </member>
    <member kind="function">
      <type>SymmetricBlockMatrix::constBlock</type>
      <name>linearTerm</name>
      <anchorfile>a03764.html</anchorfile>
      <anchor>a5bd74e517dd02d55684db2fc68114529</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>SymmetricBlockMatrix::Block</type>
      <name>linearTerm</name>
      <anchorfile>a03764.html</anchorfile>
      <anchor>a475512a6c478d8e02f212d9b851bd8ec</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const SymmetricBlockMatrix &amp;</type>
      <name>info</name>
      <anchorfile>a03764.html</anchorfile>
      <anchor>a3d10684a9c0a7862120a29c08a380dbf</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>SymmetricBlockMatrix &amp;</type>
      <name>info</name>
      <anchorfile>a03764.html</anchorfile>
      <anchor>af1d7847f2ddce062419421a8e0033653</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Matrix</type>
      <name>augmentedInformation</name>
      <anchorfile>a03764.html</anchorfile>
      <anchor>a08697c1955144897f7ece0e610ea6ccb</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>Eigen::SelfAdjointView&lt; SymmetricBlockMatrix::constBlock, Eigen::Upper &gt;</type>
      <name>informationView</name>
      <anchorfile>a03764.html</anchorfile>
      <anchor>a17f12be473e2564e46c2b80eef3148a5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Matrix</type>
      <name>information</name>
      <anchorfile>a03764.html</anchorfile>
      <anchor>a8c9bc75c63dfb203d591a7f6c1f673d3</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>hessianDiagonalAdd</name>
      <anchorfile>a03764.html</anchorfile>
      <anchor>a45f984fe30fcc84c9bd08a364ba21274</anchor>
      <arglist>(VectorValues &amp;d) const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>hessianDiagonal</name>
      <anchorfile>a03764.html</anchorfile>
      <anchor>afe3a19169e67ef66ebaf001cd9490e4f</anchor>
      <arglist>(double *d) const override</arglist>
    </member>
    <member kind="function">
      <type>std::map&lt; Key, Matrix &gt;</type>
      <name>hessianBlockDiagonal</name>
      <anchorfile>a03764.html</anchorfile>
      <anchor>a7614387b038c94ad4e922bf9abbc5b48</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>std::pair&lt; Matrix, Vector &gt;</type>
      <name>jacobian</name>
      <anchorfile>a03764.html</anchorfile>
      <anchor>ae3d28ed30c20bf84e8323448250421e0</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>Matrix</type>
      <name>augmentedJacobian</name>
      <anchorfile>a03764.html</anchorfile>
      <anchor>a00ed68d5f1a4eee245c9b540c3fa8ad4</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>updateHessian</name>
      <anchorfile>a03764.html</anchorfile>
      <anchor>aa89e11ba53507ec7f643fd10cb76eeea</anchor>
      <arglist>(const KeyVector &amp;keys, SymmetricBlockMatrix *info) const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>updateHessian</name>
      <anchorfile>a03764.html</anchorfile>
      <anchor>a09b438b583509deb200750a1c4de317a</anchor>
      <arglist>(HessianFactor *other) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>multiplyHessianAdd</name>
      <anchorfile>a03764.html</anchorfile>
      <anchor>aab47423e43d6cadef55f150cb15c7fe2</anchor>
      <arglist>(double alpha, const VectorValues &amp;x, VectorValues &amp;y) const override</arglist>
    </member>
    <member kind="function">
      <type>VectorValues</type>
      <name>gradientAtZero</name>
      <anchorfile>a03764.html</anchorfile>
      <anchor>a2c5ab9e17a2b8baab78a727d55ac0ecc</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>gradientAtZero</name>
      <anchorfile>a03764.html</anchorfile>
      <anchor>a8c62669b17c6255bd79ca1bf80e5f800</anchor>
      <arglist>(double *d) const override</arglist>
    </member>
    <member kind="function">
      <type>Vector</type>
      <name>gradient</name>
      <anchorfile>a03764.html</anchorfile>
      <anchor>a12776bd287d1cbf62f1943877c0de161</anchor>
      <arglist>(Key key, const VectorValues &amp;x) const override</arglist>
    </member>
    <member kind="function">
      <type>boost::shared_ptr&lt; GaussianConditional &gt;</type>
      <name>eliminateCholesky</name>
      <anchorfile>a03764.html</anchorfile>
      <anchor>a4153fcedb4ea45db327ee1620a3f2ca6</anchor>
      <arglist>(const Ordering &amp;keys)</arglist>
    </member>
    <member kind="function">
      <type>VectorValues</type>
      <name>solve</name>
      <anchorfile>a03764.html</anchorfile>
      <anchor>a08367080ea54ebc1e299d46fe2300d40</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="typedef">
      <type>GaussianFactor</type>
      <name>Base</name>
      <anchorfile>a03764.html</anchorfile>
      <anchor>aa789851c9863ba4440fba3f3a0a93fc9</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>HessianFactor</type>
      <name>This</name>
      <anchorfile>a03764.html</anchorfile>
      <anchor>a0300131de1073bdca240aa56a41b5e41</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; This &gt;</type>
      <name>shared_ptr</name>
      <anchorfile>a03764.html</anchorfile>
      <anchor>a10c151a4d4beb9d9af4249f4a02791ff</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SymmetricBlockMatrix::Block</type>
      <name>Block</name>
      <anchorfile>a03764.html</anchorfile>
      <anchor>af327feedf9d9e897e81fd0fb7254f3cc</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SymmetricBlockMatrix::constBlock</type>
      <name>constBlock</name>
      <anchorfile>a03764.html</anchorfile>
      <anchor>ad46fcd8ecbfad2f75caa390ac491fa88</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>SymmetricBlockMatrix</type>
      <name>info_</name>
      <anchorfile>a03764.html</anchorfile>
      <anchor>a9de862db7722018e839c909d6ff9236b</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>boost::serialization::access</name>
      <anchorfile>a03764.html</anchorfile>
      <anchor>ac98d07dd8f7b70e16ccb9a01abf56b9c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::noiseModel::mEstimator::Huber</name>
    <filename>a03844.html</filename>
    <base>gtsam::noiseModel::mEstimator::Base</base>
    <member kind="friend">
      <type>friend class</type>
      <name>boost::serialization::access</name>
      <anchorfile>a03844.html</anchorfile>
      <anchor>ac98d07dd8f7b70e16ccb9a01abf56b9c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::ImuFactor</name>
    <filename>a04100.html</filename>
    <base>NoiseModelFactor5&lt; Pose3, Vector3, Pose3, Vector3, imuBias::ConstantBias &gt;</base>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>a04100.html</anchorfile>
      <anchor>a684fa5f7dab9f2022c09066d2ad23b1d</anchor>
      <arglist>(const std::string &amp;s=&quot;&quot;, const KeyFormatter &amp;keyFormatter=DefaultKeyFormatter) const override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>equals</name>
      <anchorfile>a04100.html</anchorfile>
      <anchor>af6c2268c8800ca4406d7f9777b6c213e</anchor>
      <arglist>(const NonlinearFactor &amp;expected, double tol=1e-9) const override</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ImuFactor</name>
      <anchorfile>a04100.html</anchorfile>
      <anchor>ae252ef148a19d5906acb5dea75a760b8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ImuFactor</name>
      <anchorfile>a04100.html</anchorfile>
      <anchor>a93d499891d2801915a26a344b06036bb</anchor>
      <arglist>(Key pose_i, Key vel_i, Key pose_j, Key vel_j, Key bias, const PreintegratedImuMeasurements &amp;preintegratedMeasurements)</arglist>
    </member>
    <member kind="function">
      <type>gtsam::NonlinearFactor::shared_ptr</type>
      <name>clone</name>
      <anchorfile>a04100.html</anchorfile>
      <anchor>ac1214d81f67bda3d4cb205526d203dcf</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>const PreintegratedImuMeasurements &amp;</type>
      <name>preintegratedMeasurements</name>
      <anchorfile>a04100.html</anchorfile>
      <anchor>a6552bb854acbe95518a34b6c5ac40890</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Vector</type>
      <name>evaluateError</name>
      <anchorfile>a04100.html</anchorfile>
      <anchor>acf99aaee595ce792961ae8d21d104055</anchor>
      <arglist>(const Pose3 &amp;pose_i, const Vector3 &amp;vel_i, const Pose3 &amp;pose_j, const Vector3 &amp;vel_j, const imuBias::ConstantBias &amp;bias_i, boost::optional&lt; Matrix &amp; &gt; H1=boost::none, boost::optional&lt; Matrix &amp; &gt; H2=boost::none, boost::optional&lt; Matrix &amp; &gt; H3=boost::none, boost::optional&lt; Matrix &amp; &gt; H4=boost::none, boost::optional&lt; Matrix &amp; &gt; H5=boost::none) const override</arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; ImuFactor &gt;</type>
      <name>shared_ptr</name>
      <anchorfile>a04100.html</anchorfile>
      <anchor>af09006b1c068a81855e46397a4040c68</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>boost::serialization::access</name>
      <anchorfile>a04100.html</anchorfile>
      <anchor>ac98d07dd8f7b70e16ccb9a01abf56b9c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::IMUFactor</name>
    <filename>a05440.html</filename>
    <templarg>class POSE</templarg>
    <base>NoiseModelFactor2&lt; POSE, POSE &gt;</base>
    <member kind="function">
      <type></type>
      <name>IMUFactor</name>
      <anchorfile>a05440.html</anchorfile>
      <anchor>a82c99eae1feb895c77e4e0511a2d9d3c</anchor>
      <arglist>(const Vector3 &amp;accel, const Vector3 &amp;gyro, double dt, const Key &amp;key1, const Key &amp;key2, const SharedNoiseModel &amp;model)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IMUFactor</name>
      <anchorfile>a05440.html</anchorfile>
      <anchor>aaa50f0dfe5836eb4d74f4ad53c192fac</anchor>
      <arglist>(const Vector6 &amp;imu_vector, double dt, const Key &amp;key1, const Key &amp;key2, const SharedNoiseModel &amp;model)</arglist>
    </member>
    <member kind="function">
      <type>gtsam::NonlinearFactor::shared_ptr</type>
      <name>clone</name>
      <anchorfile>a05440.html</anchorfile>
      <anchor>adea3dda237e9044d9de796c7b73ba717</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>equals</name>
      <anchorfile>a05440.html</anchorfile>
      <anchor>ad63be99a907d14afad8d43eebca4ec12</anchor>
      <arglist>(const NonlinearFactor &amp;e, double tol=1e-9) const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>a05440.html</anchorfile>
      <anchor>ad52ce04b90d19efe1c959f2fa8db7e0f</anchor>
      <arglist>(const std::string &amp;s=&quot;&quot;, const gtsam::KeyFormatter &amp;formatter=gtsam::DefaultKeyFormatter) const override</arglist>
    </member>
    <member kind="function">
      <type>Vector</type>
      <name>evaluateError</name>
      <anchorfile>a05440.html</anchorfile>
      <anchor>a4467bf06eb36aa3fd6dc9c5c8719071b</anchor>
      <arglist>(const PoseRTV &amp;x1, const PoseRTV &amp;x2, boost::optional&lt; Matrix &amp; &gt; H1=boost::none, boost::optional&lt; Matrix &amp; &gt; H2=boost::none) const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Vector</type>
      <name>evaluateError</name>
      <anchorfile>a05440.html</anchorfile>
      <anchor>a72ab6da39812e54aa5318b8c0b5ce52e</anchor>
      <arglist>(const Pose3 &amp;x1, const Pose3 &amp;x2, boost::optional&lt; Matrix &amp; &gt; H1=boost::none, boost::optional&lt; Matrix &amp; &gt; H2=boost::none) const</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Vector3</type>
      <name>accel_</name>
      <anchorfile>a05440.html</anchorfile>
      <anchor>ace44d48bf0957926d4b493f0afd261bc</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::ImuFactor2</name>
    <filename>a04104.html</filename>
    <base>NoiseModelFactor3&lt; NavState, NavState, imuBias::ConstantBias &gt;</base>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>a04104.html</anchorfile>
      <anchor>abce0b7ed5ad19976410a8c7c71245903</anchor>
      <arglist>(const std::string &amp;s=&quot;&quot;, const KeyFormatter &amp;keyFormatter=DefaultKeyFormatter) const override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>equals</name>
      <anchorfile>a04104.html</anchorfile>
      <anchor>af6e1942af28387533561f1193d593ebd</anchor>
      <arglist>(const NonlinearFactor &amp;expected, double tol=1e-9) const override</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ImuFactor2</name>
      <anchorfile>a04104.html</anchorfile>
      <anchor>a0abb4a12c32bea6d415ff0977b2ef75b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ImuFactor2</name>
      <anchorfile>a04104.html</anchorfile>
      <anchor>ae90d38f249a8da177d3b9263113899ec</anchor>
      <arglist>(Key state_i, Key state_j, Key bias, const PreintegratedImuMeasurements &amp;preintegratedMeasurements)</arglist>
    </member>
    <member kind="function">
      <type>gtsam::NonlinearFactor::shared_ptr</type>
      <name>clone</name>
      <anchorfile>a04104.html</anchorfile>
      <anchor>a5a7ad374c90f25f8e6113b2dc704c06c</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>const PreintegratedImuMeasurements &amp;</type>
      <name>preintegratedMeasurements</name>
      <anchorfile>a04104.html</anchorfile>
      <anchor>ad8b426f8d6d3ccea12b90028ff77f804</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Vector</type>
      <name>evaluateError</name>
      <anchorfile>a04104.html</anchorfile>
      <anchor>a0a354040b47157a8f42844b02f637012</anchor>
      <arglist>(const NavState &amp;state_i, const NavState &amp;state_j, const imuBias::ConstantBias &amp;bias_i, boost::optional&lt; Matrix &amp; &gt; H1=boost::none, boost::optional&lt; Matrix &amp; &gt; H2=boost::none, boost::optional&lt; Matrix &amp; &gt; H3=boost::none) const override</arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>boost::serialization::access</name>
      <anchorfile>a04104.html</anchorfile>
      <anchor>ac98d07dd8f7b70e16ccb9a01abf56b9c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::InconsistentEliminationRequested</name>
    <filename>a03588.html</filename>
  </compound>
  <compound kind="class">
    <name>gtsam::IncrementalFixedLagSmoother</name>
    <filename>a05200.html</filename>
    <base>gtsam::FixedLagSmoother</base>
    <member kind="function">
      <type></type>
      <name>IncrementalFixedLagSmoother</name>
      <anchorfile>a05200.html</anchorfile>
      <anchor>afd7daa9f16738872b734787a310ae957</anchor>
      <arglist>(double smootherLag=0.0, const ISAM2Params &amp;parameters=DefaultISAM2Params())</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~IncrementalFixedLagSmoother</name>
      <anchorfile>a05200.html</anchorfile>
      <anchor>a2d0267922c9ebfb340ed6f05973f42c1</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>a05200.html</anchorfile>
      <anchor>a45318bf4d7e5b4f68fc7ca1997a8d4eb</anchor>
      <arglist>(const std::string &amp;s=&quot;IncrementalFixedLagSmoother:\n&quot;, const KeyFormatter &amp;keyFormatter=DefaultKeyFormatter) const override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>equals</name>
      <anchorfile>a05200.html</anchorfile>
      <anchor>aae0d2e50d3b4124dc407044e48882cca</anchor>
      <arglist>(const FixedLagSmoother &amp;rhs, double tol=1e-9) const override</arglist>
    </member>
    <member kind="function">
      <type>Result</type>
      <name>update</name>
      <anchorfile>a05200.html</anchorfile>
      <anchor>a8dad872087b50e7e54e2b434a3a4b8f4</anchor>
      <arglist>(const NonlinearFactorGraph &amp;newFactors=NonlinearFactorGraph(), const Values &amp;newTheta=Values(), const KeyTimestampMap &amp;timestamps=KeyTimestampMap(), const FactorIndices &amp;factorsToRemove=FactorIndices()) override</arglist>
    </member>
    <member kind="function">
      <type>Values</type>
      <name>calculateEstimate</name>
      <anchorfile>a05200.html</anchorfile>
      <anchor>a463d3c75d447173b3ceb79b2b368511b</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>VALUE</type>
      <name>calculateEstimate</name>
      <anchorfile>a05200.html</anchorfile>
      <anchor>a43bacdbc94462499b206289851dff5f4</anchor>
      <arglist>(Key key) const</arglist>
    </member>
    <member kind="function">
      <type>const ISAM2Params &amp;</type>
      <name>params</name>
      <anchorfile>a05200.html</anchorfile>
      <anchor>ae1fae019aec3059e8570a45306df4365</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const NonlinearFactorGraph &amp;</type>
      <name>getFactors</name>
      <anchorfile>a05200.html</anchorfile>
      <anchor>a64284f8a566c5d5976a60e5d88b967e2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Values &amp;</type>
      <name>getLinearizationPoint</name>
      <anchorfile>a05200.html</anchorfile>
      <anchor>a62e477ac01b8d5852369d6d6282cac17</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const VectorValues &amp;</type>
      <name>getDelta</name>
      <anchorfile>a05200.html</anchorfile>
      <anchor>a36b26dbe6cbae0925e58f2b8b92dbfe5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Matrix</type>
      <name>marginalCovariance</name>
      <anchorfile>a05200.html</anchorfile>
      <anchor>a5c817f301560a2af0c87e5a2a2789f0e</anchor>
      <arglist>(Key key) const</arglist>
    </member>
    <member kind="function">
      <type>const ISAM2Result &amp;</type>
      <name>getISAM2Result</name>
      <anchorfile>a05200.html</anchorfile>
      <anchor>afc2e3665911e3e4c0fa4329995929243</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; IncrementalFixedLagSmoother &gt;</type>
      <name>shared_ptr</name>
      <anchorfile>a05200.html</anchorfile>
      <anchor>af49d03dc028e2d965e8b97f65c139d25</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>eraseKeysBefore</name>
      <anchorfile>a05200.html</anchorfile>
      <anchor>a41b599965a6a30d1b0f2e0362a30331b</anchor>
      <arglist>(double timestamp)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>createOrderingConstraints</name>
      <anchorfile>a05200.html</anchorfile>
      <anchor>a4f73b7fe3ea0ba38d6f36c859383b141</anchor>
      <arglist>(const KeyVector &amp;marginalizableKeys, boost::optional&lt; FastMap&lt; Key, int &gt; &gt; &amp;constrainedKeys) const</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static ISAM2Params</type>
      <name>DefaultISAM2Params</name>
      <anchorfile>a05200.html</anchorfile>
      <anchor>abaad8fc60a40939ac60bd3b737e7bdc5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ISAM2</type>
      <name>isam_</name>
      <anchorfile>a05200.html</anchorfile>
      <anchor>a030a15052e4af9e5bcf3554c502f0581</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ISAM2Result</type>
      <name>isamResult_</name>
      <anchorfile>a05200.html</anchorfile>
      <anchor>a8d6bfa51f655245a20f4c2e79f4c98c8</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::IndeterminantLinearSystemException</name>
    <filename>a03816.html</filename>
    <base>ThreadsafeException&lt; IndeterminantLinearSystemException &gt;</base>
  </compound>
  <compound kind="class">
    <name>gtsam::IndexPair</name>
    <filename>a02460.html</filename>
  </compound>
  <compound kind="class">
    <name>gtsam::InequalityFactorGraph</name>
    <filename>a05048.html</filename>
    <base>FactorGraph&lt; LinearInequality &gt;</base>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>a05048.html</anchorfile>
      <anchor>ac5cef2b7a8610c9f4088907f7760da48</anchor>
      <arglist>(const std::string &amp;str=&quot;&quot;, const KeyFormatter &amp;keyFormatter=DefaultKeyFormatter) const override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>equals</name>
      <anchorfile>a05048.html</anchorfile>
      <anchor>aa912f296bc5c346fe610b7bfd176de1e</anchor>
      <arglist>(const InequalityFactorGraph &amp;other, double tol=1e-9) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add</name>
      <anchorfile>a05048.html</anchorfile>
      <anchor>a9b2bb810a0e3c088e8f0dc3f57a7e088</anchor>
      <arglist>(Args &amp;&amp;... args)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>error</name>
      <anchorfile>a05048.html</anchorfile>
      <anchor>aa3a2e1023ef4cc34a91d4791a4f10e51</anchor>
      <arglist>(const VectorValues &amp;x) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::InertialNavFactor_GlobalVelocity</name>
    <filename>a05264.html</filename>
    <templarg>class POSE</templarg>
    <templarg>class VELOCITY</templarg>
    <templarg>class IMUBIAS</templarg>
    <base>NoiseModelFactor5&lt; POSE, VELOCITY, IMUBIAS, POSE, VELOCITY &gt;</base>
    <member kind="function">
      <type></type>
      <name>InertialNavFactor_GlobalVelocity</name>
      <anchorfile>a05264.html</anchorfile>
      <anchor>a8163cf109163faa6b8a1c0f86a41b5e0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>InertialNavFactor_GlobalVelocity</name>
      <anchorfile>a05264.html</anchorfile>
      <anchor>a712cad1c44cf0aaba905a736166e24b6</anchor>
      <arglist>(const Key &amp;Pose1, const Key &amp;Vel1, const Key &amp;IMUBias1, const Key &amp;Pose2, const Key &amp;Vel2, const Vector &amp;measurement_acc, const Vector &amp;measurement_gyro, const double measurement_dt, const Vector world_g, const Vector world_rho, const Vector &amp;world_omega_earth, const noiseModel::Gaussian::shared_ptr &amp;model_continuous, boost::optional&lt; POSE &gt; body_P_sensor=boost::none)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>a05264.html</anchorfile>
      <anchor>a7be7761f86f89cca2f7b9d0ae386d953</anchor>
      <arglist>(const std::string &amp;s=&quot;InertialNavFactor_GlobalVelocity&quot;, const KeyFormatter &amp;keyFormatter=DefaultKeyFormatter) const override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>equals</name>
      <anchorfile>a05264.html</anchorfile>
      <anchor>a0b2be9b5b882555fa122f738bedf7c54</anchor>
      <arglist>(const NonlinearFactor &amp;expected, double tol=1e-9) const override</arglist>
    </member>
    <member kind="function">
      <type>Vector</type>
      <name>evaluateError</name>
      <anchorfile>a05264.html</anchorfile>
      <anchor>a218477f240125a056d0e93e70badb519</anchor>
      <arglist>(const POSE &amp;Pose1, const VELOCITY &amp;Vel1, const IMUBIAS &amp;Bias1, const POSE &amp;Pose2, const VELOCITY &amp;Vel2, boost::optional&lt; Matrix &amp; &gt; H1=boost::none, boost::optional&lt; Matrix &amp; &gt; H2=boost::none, boost::optional&lt; Matrix &amp; &gt; H3=boost::none, boost::optional&lt; Matrix &amp; &gt; H4=boost::none, boost::optional&lt; Matrix &amp; &gt; H5=boost::none) const override</arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>boost::serialization::access</name>
      <anchorfile>a05264.html</anchorfile>
      <anchor>ac98d07dd8f7b70e16ccb9a01abf56b9c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::InfeasibleInitialValues</name>
    <filename>a05056.html</filename>
    <base>ThreadsafeException&lt; InfeasibleInitialValues &gt;</base>
  </compound>
  <compound kind="class">
    <name>gtsam::InfeasibleOrUnboundedProblem</name>
    <filename>a05060.html</filename>
    <base>ThreadsafeException&lt; InfeasibleOrUnboundedProblem &gt;</base>
  </compound>
  <compound kind="struct">
    <name>gtsam::InitializePose3</name>
    <filename>a04792.html</filename>
    <member kind="function" static="yes">
      <type>static Values</type>
      <name>computeOrientationsChordal</name>
      <anchorfile>a04792.html</anchorfile>
      <anchor>a5fb65b015ebd0b64ddf59f62f24ee661</anchor>
      <arglist>(const NonlinearFactorGraph &amp;pose3Graph)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Values</type>
      <name>computeOrientationsGradient</name>
      <anchorfile>a04792.html</anchorfile>
      <anchor>a9218509c31ac0030fa685d68144d083b</anchor>
      <arglist>(const NonlinearFactorGraph &amp;pose3Graph, const Values &amp;givenGuess, size_t maxIter=10000, const bool setRefFrame=true)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static NonlinearFactorGraph</type>
      <name>buildPose3graph</name>
      <anchorfile>a04792.html</anchorfile>
      <anchor>a908ec0e39fe22080bdb2fe10cef9f83f</anchor>
      <arglist>(const NonlinearFactorGraph &amp;graph)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Values</type>
      <name>computePoses</name>
      <anchorfile>a04792.html</anchorfile>
      <anchor>a0ff566967ec8ea9e5c14d5579c611d60</anchor>
      <arglist>(const Values &amp;initialRot, NonlinearFactorGraph *poseGraph, bool singleIter=true)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Values</type>
      <name>initializeOrientations</name>
      <anchorfile>a04792.html</anchorfile>
      <anchor>ad8900891ebae624b54cb32bd387f81f2</anchor>
      <arglist>(const NonlinearFactorGraph &amp;graph)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Values</type>
      <name>initialize</name>
      <anchorfile>a04792.html</anchorfile>
      <anchor>a0de66d19607ddc19c27d3e5be2911f6c</anchor>
      <arglist>(const NonlinearFactorGraph &amp;graph, const Values &amp;givenGuess, bool useGradient=false)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Values</type>
      <name>initialize</name>
      <anchorfile>a04792.html</anchorfile>
      <anchor>a28534d9ea0e1486f3f32cf1b24c17da8</anchor>
      <arglist>(const NonlinearFactorGraph &amp;graph)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::InvalidArgumentThreadsafe</name>
    <filename>a02676.html</filename>
    <base>ThreadsafeException&lt; InvalidArgumentThreadsafe &gt;</base>
    <member kind="function">
      <type></type>
      <name>InvalidArgumentThreadsafe</name>
      <anchorfile>a02676.html</anchorfile>
      <anchor>a5b59c8bf5a4f3ed5ab5a3bdc4bb0dad2</anchor>
      <arglist>(const std::string &amp;description)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::InvalidDenseElimination</name>
    <filename>a03828.html</filename>
    <base>ThreadsafeException&lt; InvalidDenseElimination &gt;</base>
  </compound>
  <compound kind="class">
    <name>gtsam::InvalidMatrixBlock</name>
    <filename>a03824.html</filename>
    <base>ThreadsafeException&lt; InvalidMatrixBlock &gt;</base>
    <member kind="variable">
      <type>const DenseIndex</type>
      <name>factorRows</name>
      <anchorfile>a03824.html</anchorfile>
      <anchor>a59d61b85cd1f8048f26ce0b990d2c91f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const DenseIndex</type>
      <name>blockRows</name>
      <anchorfile>a03824.html</anchorfile>
      <anchor>aa31b41ba5908fca8f458ea7d49278f4f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::InvalidNoiseModel</name>
    <filename>a03820.html</filename>
    <base>ThreadsafeException&lt; InvalidNoiseModel &gt;</base>
    <member kind="variable">
      <type>const DenseIndex</type>
      <name>factorDims</name>
      <anchorfile>a03820.html</anchorfile>
      <anchor>a725a99a84ba90f5847f283c5c63ad7f4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const DenseIndex</type>
      <name>noiseModelDims</name>
      <anchorfile>a03820.html</anchorfile>
      <anchor>af1938d77a9e6086a0ffe9352bac15467</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::InvDepthFactor3</name>
    <filename>a05272.html</filename>
    <templarg>class POSE</templarg>
    <templarg>class LANDMARK</templarg>
    <templarg>class INVDEPTH</templarg>
    <base>NoiseModelFactor3&lt; POSE, LANDMARK, INVDEPTH &gt;</base>
    <member kind="function">
      <type></type>
      <name>InvDepthFactor3</name>
      <anchorfile>a05272.html</anchorfile>
      <anchor>ae28e2a2bc71914dc6e4eaf24522b6719</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>InvDepthFactor3</name>
      <anchorfile>a05272.html</anchorfile>
      <anchor>aa6f43b18dda94eaa5ce4936954a43437</anchor>
      <arglist>(const Point2 &amp;measured, const SharedNoiseModel &amp;model, const Key poseKey, Key pointKey, Key invDepthKey, const Cal3_S2::shared_ptr &amp;K)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~InvDepthFactor3</name>
      <anchorfile>a05272.html</anchorfile>
      <anchor>ae711615cf33caa3bd831476444332fbe</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>a05272.html</anchorfile>
      <anchor>a50615c25e0f007f2f6ea440d6a211bce</anchor>
      <arglist>(const std::string &amp;s=&quot;InvDepthFactor3&quot;, const KeyFormatter &amp;keyFormatter=DefaultKeyFormatter) const override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>equals</name>
      <anchorfile>a05272.html</anchorfile>
      <anchor>a07c690e1fb9739a0d70761c03078dfe8</anchor>
      <arglist>(const NonlinearFactor &amp;p, double tol=1e-9) const override</arglist>
    </member>
    <member kind="function">
      <type>Vector</type>
      <name>evaluateError</name>
      <anchorfile>a05272.html</anchorfile>
      <anchor>a8a4fde42f7941a0720ecb94a376298e2</anchor>
      <arglist>(const POSE &amp;pose, const Vector5 &amp;point, const INVDEPTH &amp;invDepth, boost::optional&lt; Matrix &amp; &gt; H1=boost::none, boost::optional&lt; Matrix &amp; &gt; H2=boost::none, boost::optional&lt; Matrix &amp; &gt; H3=boost::none) const override</arglist>
    </member>
    <member kind="function">
      <type>const Point2 &amp;</type>
      <name>imagePoint</name>
      <anchorfile>a05272.html</anchorfile>
      <anchor>a60e208052f114508516e6ed424929ddc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Cal3_S2::shared_ptr</type>
      <name>calibration</name>
      <anchorfile>a05272.html</anchorfile>
      <anchor>ab36361e456d11753382fca93192dc882</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="typedef">
      <type>NoiseModelFactor3&lt; POSE, LANDMARK, INVDEPTH &gt;</type>
      <name>Base</name>
      <anchorfile>a05272.html</anchorfile>
      <anchor>a7a0516070352606670b8beeb4fc657dc</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>InvDepthFactor3&lt; POSE, LANDMARK, INVDEPTH &gt;</type>
      <name>This</name>
      <anchorfile>a05272.html</anchorfile>
      <anchor>a9ce8d35838cf82d2623348ae23e0f146</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; This &gt;</type>
      <name>shared_ptr</name>
      <anchorfile>a05272.html</anchorfile>
      <anchor>a739bca5aed776aabe012c320a802bab6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Point2</type>
      <name>measured_</name>
      <anchorfile>a05272.html</anchorfile>
      <anchor>ab133b86c75ad5feb11f50f8d2cc4511f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>boost::shared_ptr&lt; Cal3_S2 &gt;</type>
      <name>K_</name>
      <anchorfile>a05272.html</anchorfile>
      <anchor>a14d8163202992f7165c6e2d1cc37d0a3</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>boost::serialization::access</name>
      <anchorfile>a05272.html</anchorfile>
      <anchor>ac98d07dd8f7b70e16ccb9a01abf56b9c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::InvDepthFactorVariant1</name>
    <filename>a05276.html</filename>
    <base>NoiseModelFactor2&lt; Pose3, Vector6 &gt;</base>
    <member kind="function">
      <type></type>
      <name>InvDepthFactorVariant1</name>
      <anchorfile>a05276.html</anchorfile>
      <anchor>a6fa08a3de5a08032d4ad4e5fd2679788</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>InvDepthFactorVariant1</name>
      <anchorfile>a05276.html</anchorfile>
      <anchor>a3e9e55e4e1c4a0cad887e4b05610f010</anchor>
      <arglist>(const Key poseKey, const Key landmarkKey, const Point2 &amp;measured, const Cal3_S2::shared_ptr &amp;K, const SharedNoiseModel &amp;model)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~InvDepthFactorVariant1</name>
      <anchorfile>a05276.html</anchorfile>
      <anchor>a0b37a95136b8797d0c6103d9ab5a70a3</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>a05276.html</anchorfile>
      <anchor>a6255dc06f9ed6639804733ae66546ae3</anchor>
      <arglist>(const std::string &amp;s=&quot;InvDepthFactorVariant1&quot;, const KeyFormatter &amp;keyFormatter=DefaultKeyFormatter) const override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>equals</name>
      <anchorfile>a05276.html</anchorfile>
      <anchor>af47f468b02b199a93fd0eae87077d779</anchor>
      <arglist>(const NonlinearFactor &amp;p, double tol=1e-9) const override</arglist>
    </member>
    <member kind="function">
      <type>Vector</type>
      <name>evaluateError</name>
      <anchorfile>a05276.html</anchorfile>
      <anchor>afa7772e3bdfb3cd4eba5ba7c0f2c787c</anchor>
      <arglist>(const Pose3 &amp;pose, const Vector6 &amp;landmark, boost::optional&lt; Matrix &amp; &gt; H1=boost::none, boost::optional&lt; Matrix &amp; &gt; H2=boost::none) const override</arglist>
    </member>
    <member kind="function">
      <type>const Point2 &amp;</type>
      <name>imagePoint</name>
      <anchorfile>a05276.html</anchorfile>
      <anchor>a2664392dd923a6324e56a5eff7c83243</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Cal3_S2::shared_ptr</type>
      <name>calibration</name>
      <anchorfile>a05276.html</anchorfile>
      <anchor>a81594d8d924371f1bf88f029862b29d2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="typedef">
      <type>NoiseModelFactor2&lt; Pose3, Vector6 &gt;</type>
      <name>Base</name>
      <anchorfile>a05276.html</anchorfile>
      <anchor>a088a5a08d3871c6349069cdc38ebf825</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>InvDepthFactorVariant1</type>
      <name>This</name>
      <anchorfile>a05276.html</anchorfile>
      <anchor>a70a6793b4772b74b8e0f94e79af5a961</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; This &gt;</type>
      <name>shared_ptr</name>
      <anchorfile>a05276.html</anchorfile>
      <anchor>afd6c9ecc9b98d0534c1fad00a6109f6b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Point2</type>
      <name>measured_</name>
      <anchorfile>a05276.html</anchorfile>
      <anchor>ac774fa86b569a9c510990ab32f11ed02</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Cal3_S2::shared_ptr</type>
      <name>K_</name>
      <anchorfile>a05276.html</anchorfile>
      <anchor>a957de95c74c3421d820677029cab3040</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>boost::serialization::access</name>
      <anchorfile>a05276.html</anchorfile>
      <anchor>ac98d07dd8f7b70e16ccb9a01abf56b9c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::InvDepthFactorVariant2</name>
    <filename>a05280.html</filename>
    <base>NoiseModelFactor2&lt; Pose3, Vector3 &gt;</base>
    <member kind="function">
      <type></type>
      <name>InvDepthFactorVariant2</name>
      <anchorfile>a05280.html</anchorfile>
      <anchor>a2a1562da3696397fcbdfc15b5ea37029</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>InvDepthFactorVariant2</name>
      <anchorfile>a05280.html</anchorfile>
      <anchor>ae845ae5cd3dcb960941edd2e29fdd643</anchor>
      <arglist>(const Key poseKey, const Key landmarkKey, const Point2 &amp;measured, const Cal3_S2::shared_ptr &amp;K, const Point3 referencePoint, const SharedNoiseModel &amp;model)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~InvDepthFactorVariant2</name>
      <anchorfile>a05280.html</anchorfile>
      <anchor>a4f7c7c86906838768800ddb8e0d55556</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>a05280.html</anchorfile>
      <anchor>a9bc66090d5477a029e92d339ffd9fbe6</anchor>
      <arglist>(const std::string &amp;s=&quot;InvDepthFactorVariant2&quot;, const KeyFormatter &amp;keyFormatter=DefaultKeyFormatter) const override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>equals</name>
      <anchorfile>a05280.html</anchorfile>
      <anchor>a399e49735e88e4900188a60bfc74d7a1</anchor>
      <arglist>(const NonlinearFactor &amp;p, double tol=1e-9) const override</arglist>
    </member>
    <member kind="function">
      <type>Vector</type>
      <name>evaluateError</name>
      <anchorfile>a05280.html</anchorfile>
      <anchor>ae55671a9b4d761551279932faf94f884</anchor>
      <arglist>(const Pose3 &amp;pose, const Vector3 &amp;landmark, boost::optional&lt; Matrix &amp; &gt; H1=boost::none, boost::optional&lt; Matrix &amp; &gt; H2=boost::none) const override</arglist>
    </member>
    <member kind="function">
      <type>const Point2 &amp;</type>
      <name>imagePoint</name>
      <anchorfile>a05280.html</anchorfile>
      <anchor>a051afbabd8429b95e2f87f56e14fcc3d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Cal3_S2::shared_ptr</type>
      <name>calibration</name>
      <anchorfile>a05280.html</anchorfile>
      <anchor>a768c00d6eec5a1241b49f8095c8cc673</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Point3 &amp;</type>
      <name>referencePoint</name>
      <anchorfile>a05280.html</anchorfile>
      <anchor>a99e83c3e07540b08e4138201532504ee</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="typedef">
      <type>NoiseModelFactor2&lt; Pose3, Vector3 &gt;</type>
      <name>Base</name>
      <anchorfile>a05280.html</anchorfile>
      <anchor>addb66abec98197833c991df96ccdbd48</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>InvDepthFactorVariant2</type>
      <name>This</name>
      <anchorfile>a05280.html</anchorfile>
      <anchor>af99a8bcbe5cfe559724ec2d02df4d072</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; This &gt;</type>
      <name>shared_ptr</name>
      <anchorfile>a05280.html</anchorfile>
      <anchor>aa1de0753a1897687a3376956a56a21c9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Point2</type>
      <name>measured_</name>
      <anchorfile>a05280.html</anchorfile>
      <anchor>af936b4b128aac0b1cad29a8ad021dd96</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Cal3_S2::shared_ptr</type>
      <name>K_</name>
      <anchorfile>a05280.html</anchorfile>
      <anchor>a02c0d546827eaf8efd7cb7447b0e37b1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Point3</type>
      <name>referencePoint_</name>
      <anchorfile>a05280.html</anchorfile>
      <anchor>a1751ebcce9070692b0323a99e500b5c3</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>boost::serialization::access</name>
      <anchorfile>a05280.html</anchorfile>
      <anchor>ac98d07dd8f7b70e16ccb9a01abf56b9c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::InvDepthFactorVariant3a</name>
    <filename>a05284.html</filename>
    <base>NoiseModelFactor2&lt; Pose3, Vector3 &gt;</base>
    <member kind="function">
      <type></type>
      <name>InvDepthFactorVariant3a</name>
      <anchorfile>a05284.html</anchorfile>
      <anchor>a6bc0d2d5d888499778c38bdc03ff7092</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>InvDepthFactorVariant3a</name>
      <anchorfile>a05284.html</anchorfile>
      <anchor>ad1c9778a690c2d5634613bfd3cb5e04e</anchor>
      <arglist>(const Key poseKey, const Key landmarkKey, const Point2 &amp;measured, const Cal3_S2::shared_ptr &amp;K, const SharedNoiseModel &amp;model)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~InvDepthFactorVariant3a</name>
      <anchorfile>a05284.html</anchorfile>
      <anchor>a853c66233bd7810a9749b18857e199a6</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>a05284.html</anchorfile>
      <anchor>a6fa3cb137bed5b186a3f3af65fb8ebf8</anchor>
      <arglist>(const std::string &amp;s=&quot;InvDepthFactorVariant3a&quot;, const KeyFormatter &amp;keyFormatter=DefaultKeyFormatter) const override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>equals</name>
      <anchorfile>a05284.html</anchorfile>
      <anchor>acf2987c423576c72efd96b60594e7c77</anchor>
      <arglist>(const NonlinearFactor &amp;p, double tol=1e-9) const override</arglist>
    </member>
    <member kind="function">
      <type>Vector</type>
      <name>evaluateError</name>
      <anchorfile>a05284.html</anchorfile>
      <anchor>aba62d639e773e1a2aca48bc9b32f25aa</anchor>
      <arglist>(const Pose3 &amp;pose, const Vector3 &amp;landmark, boost::optional&lt; Matrix &amp; &gt; H1=boost::none, boost::optional&lt; Matrix &amp; &gt; H2=boost::none) const override</arglist>
    </member>
    <member kind="function">
      <type>const Point2 &amp;</type>
      <name>imagePoint</name>
      <anchorfile>a05284.html</anchorfile>
      <anchor>a305e199afac0d4c49842980de3a09dff</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Cal3_S2::shared_ptr</type>
      <name>calibration</name>
      <anchorfile>a05284.html</anchorfile>
      <anchor>abf04968147189a3b3332026f8129d87c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="typedef">
      <type>NoiseModelFactor2&lt; Pose3, Vector3 &gt;</type>
      <name>Base</name>
      <anchorfile>a05284.html</anchorfile>
      <anchor>a919616999e4c7099be2b4d31202e7e0c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>InvDepthFactorVariant3a</type>
      <name>This</name>
      <anchorfile>a05284.html</anchorfile>
      <anchor>ad03ae2a53548c1fc5bb40f126438a9aa</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; This &gt;</type>
      <name>shared_ptr</name>
      <anchorfile>a05284.html</anchorfile>
      <anchor>a6506671a0b5ef18ef818887f231eb90e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Point2</type>
      <name>measured_</name>
      <anchorfile>a05284.html</anchorfile>
      <anchor>a967aa072c8724d0fdafbe4303d41f42b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Cal3_S2::shared_ptr</type>
      <name>K_</name>
      <anchorfile>a05284.html</anchorfile>
      <anchor>a224b89d16d5ce28caf912ba7985f6e40</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>boost::serialization::access</name>
      <anchorfile>a05284.html</anchorfile>
      <anchor>ac98d07dd8f7b70e16ccb9a01abf56b9c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::InvDepthFactorVariant3b</name>
    <filename>a05288.html</filename>
    <base>NoiseModelFactor3&lt; Pose3, Pose3, Vector3 &gt;</base>
    <member kind="function">
      <type></type>
      <name>InvDepthFactorVariant3b</name>
      <anchorfile>a05288.html</anchorfile>
      <anchor>ad18e773d05dffcbaecf5527ee66b9ce3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>InvDepthFactorVariant3b</name>
      <anchorfile>a05288.html</anchorfile>
      <anchor>a6aeb62eacb0bfe61f9e47babafe64470</anchor>
      <arglist>(const Key poseKey1, const Key poseKey2, const Key landmarkKey, const Point2 &amp;measured, const Cal3_S2::shared_ptr &amp;K, const SharedNoiseModel &amp;model)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~InvDepthFactorVariant3b</name>
      <anchorfile>a05288.html</anchorfile>
      <anchor>a9f7f02c629a864958dd2a48c6f932d88</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>a05288.html</anchorfile>
      <anchor>a02400e2e934fad85b665585b1295a49a</anchor>
      <arglist>(const std::string &amp;s=&quot;InvDepthFactorVariant3&quot;, const KeyFormatter &amp;keyFormatter=DefaultKeyFormatter) const override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>equals</name>
      <anchorfile>a05288.html</anchorfile>
      <anchor>a9005975f527420fb54b64db68bd55025</anchor>
      <arglist>(const NonlinearFactor &amp;p, double tol=1e-9) const override</arglist>
    </member>
    <member kind="function">
      <type>Vector</type>
      <name>evaluateError</name>
      <anchorfile>a05288.html</anchorfile>
      <anchor>a031b621bf26bf236095a708f40fd8fc0</anchor>
      <arglist>(const Pose3 &amp;pose1, const Pose3 &amp;pose2, const Vector3 &amp;landmark, boost::optional&lt; Matrix &amp; &gt; H1=boost::none, boost::optional&lt; Matrix &amp; &gt; H2=boost::none, boost::optional&lt; Matrix &amp; &gt; H3=boost::none) const override</arglist>
    </member>
    <member kind="function">
      <type>const Point2 &amp;</type>
      <name>imagePoint</name>
      <anchorfile>a05288.html</anchorfile>
      <anchor>a37acf5e4dca54439d39e01a160cd83fb</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Cal3_S2::shared_ptr</type>
      <name>calibration</name>
      <anchorfile>a05288.html</anchorfile>
      <anchor>aff82b7383e7d93698b7a8d3910daa39c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="typedef">
      <type>NoiseModelFactor3&lt; Pose3, Pose3, Vector3 &gt;</type>
      <name>Base</name>
      <anchorfile>a05288.html</anchorfile>
      <anchor>a7da9d30fc14dcdbf407609bdb60203e1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>InvDepthFactorVariant3b</type>
      <name>This</name>
      <anchorfile>a05288.html</anchorfile>
      <anchor>aa9eca5307e666875ee641073f65c00c3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; This &gt;</type>
      <name>shared_ptr</name>
      <anchorfile>a05288.html</anchorfile>
      <anchor>af5841e6aab0cd2e621432a0022eb3a27</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Point2</type>
      <name>measured_</name>
      <anchorfile>a05288.html</anchorfile>
      <anchor>af1c6da4f3f92c262060ac5f4591ee86f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Cal3_S2::shared_ptr</type>
      <name>K_</name>
      <anchorfile>a05288.html</anchorfile>
      <anchor>a84202eefb6c47352247e491d9c9c5ae5</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>boost::serialization::access</name>
      <anchorfile>a05288.html</anchorfile>
      <anchor>ac98d07dd8f7b70e16ccb9a01abf56b9c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::ISAM</name>
    <filename>a03592.html</filename>
    <templarg>class BAYESTREE</templarg>
    <member kind="function">
      <type></type>
      <name>ISAM</name>
      <anchorfile>a03592.html</anchorfile>
      <anchor>a528e028d3e062171007e8f40b55fdbae</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ISAM</name>
      <anchorfile>a03592.html</anchorfile>
      <anchor>a0c7b81b104909590d1341dcfd19dadc9</anchor>
      <arglist>(const Base &amp;bayesTree)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>update</name>
      <anchorfile>a03592.html</anchorfile>
      <anchor>a0994a7782d39515a5c2869ef9efb65f3</anchor>
      <arglist>(const FactorGraphType &amp;newFactors, const Eliminate &amp;function=EliminationTraitsType::DefaultEliminate)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>updateInternal</name>
      <anchorfile>a03592.html</anchorfile>
      <anchor>af0cea02debf437dfc89023b081a431ac</anchor>
      <arglist>(const FactorGraphType &amp;newFactors, Cliques *orphans, const Eliminate &amp;function=EliminationTraitsType::DefaultEliminate)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::ISAM2</name>
    <filename>a04340.html</filename>
    <base>BayesTree&lt; ISAM2Clique &gt;</base>
    <member kind="function">
      <type>Values</type>
      <name>calculateBestEstimate</name>
      <anchorfile>a04340.html</anchorfile>
      <anchor>a9d6f2b0d018f817f64fee6abdaa413ff</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const VectorValues &amp;</type>
      <name>getDelta</name>
      <anchorfile>a04340.html</anchorfile>
      <anchor>a54c3a0329b3397df717271cfd530b105</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>error</name>
      <anchorfile>a04340.html</anchorfile>
      <anchor>ae2e2d054d1dcbc65bf886d016662a36c</anchor>
      <arglist>(const VectorValues &amp;x) const</arglist>
    </member>
    <member kind="function">
      <type>const NonlinearFactorGraph &amp;</type>
      <name>getFactorsUnsafe</name>
      <anchorfile>a04340.html</anchorfile>
      <anchor>aeb325a51d89054173898efa31be0096e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const VariableIndex &amp;</type>
      <name>getVariableIndex</name>
      <anchorfile>a04340.html</anchorfile>
      <anchor>a9b334c28f63172f3b0ed4e77989e3a93</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const KeySet &amp;</type>
      <name>getFixedVariables</name>
      <anchorfile>a04340.html</anchorfile>
      <anchor>a50cd19a4c757c0128aa658662c2e6273</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>printStats</name>
      <anchorfile>a04340.html</anchorfile>
      <anchor>a8e147b16c01a4651d7f3a27ac834e39a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>VectorValues</type>
      <name>gradientAtZero</name>
      <anchorfile>a04340.html</anchorfile>
      <anchor>acb78e33b3c8f18302b1ba591a938fccd</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ISAM2</name>
      <anchorfile>a04340.html</anchorfile>
      <anchor>ab79162caabd11ce503c7115c4e9f9419</anchor>
      <arglist>(const ISAM2Params &amp;params)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ISAM2</name>
      <anchorfile>a04340.html</anchorfile>
      <anchor>ade4c702ba582e744962b5bd403f22206</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ISAM2</name>
      <anchorfile>a04340.html</anchorfile>
      <anchor>a35e0e8a7a31690c623e594774879ace1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>equals</name>
      <anchorfile>a04340.html</anchorfile>
      <anchor>a8f8912a98f58032d5fcf449ea6db5195</anchor>
      <arglist>(const ISAM2 &amp;other, double tol=1e-9) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ISAM2Result</type>
      <name>update</name>
      <anchorfile>a04340.html</anchorfile>
      <anchor>abd282f9b00477204ab09590993a974e6</anchor>
      <arglist>(const NonlinearFactorGraph &amp;newFactors=NonlinearFactorGraph(), const Values &amp;newTheta=Values(), const FactorIndices &amp;removeFactorIndices=FactorIndices(), const boost::optional&lt; FastMap&lt; Key, int &gt; &gt; &amp;constrainedKeys=boost::none, const boost::optional&lt; FastList&lt; Key &gt; &gt; &amp;noRelinKeys=boost::none, const boost::optional&lt; FastList&lt; Key &gt; &gt; &amp;extraReelimKeys=boost::none, bool force_relinearize=false)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ISAM2Result</type>
      <name>update</name>
      <anchorfile>a04340.html</anchorfile>
      <anchor>a16771a9595e08e708107e609b582b856</anchor>
      <arglist>(const NonlinearFactorGraph &amp;newFactors, const Values &amp;newTheta, const ISAM2UpdateParams &amp;updateParams)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>marginalizeLeaves</name>
      <anchorfile>a04340.html</anchorfile>
      <anchor>a321fb6f90eb0035ef8e5bb383f8da4a2</anchor>
      <arglist>(const FastList&lt; Key &gt; &amp;leafKeys, boost::optional&lt; FactorIndices &amp; &gt; marginalFactorsIndices=boost::none, boost::optional&lt; FactorIndices &amp; &gt; deletedFactorsIndices=boost::none)</arglist>
    </member>
    <member kind="function">
      <type>const Values &amp;</type>
      <name>getLinearizationPoint</name>
      <anchorfile>a04340.html</anchorfile>
      <anchor>ab9fa90025d1a881151e8e203a61a05ed</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>valueExists</name>
      <anchorfile>a04340.html</anchorfile>
      <anchor>affcd8d849cfa6e8dbfc73628d38552b9</anchor>
      <arglist>(Key key) const</arglist>
    </member>
    <member kind="function">
      <type>Values</type>
      <name>calculateEstimate</name>
      <anchorfile>a04340.html</anchorfile>
      <anchor>ae12fc71728266a75fa3893f40531f597</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>VALUE</type>
      <name>calculateEstimate</name>
      <anchorfile>a04340.html</anchorfile>
      <anchor>a35b4a27886c7dd9caacb1ff2e04ca8a9</anchor>
      <arglist>(Key key) const</arglist>
    </member>
    <member kind="function">
      <type>const Value &amp;</type>
      <name>calculateEstimate</name>
      <anchorfile>a04340.html</anchorfile>
      <anchor>a29aac843741b236546fa2f8b70929404</anchor>
      <arglist>(Key key) const</arglist>
    </member>
    <member kind="function">
      <type>Matrix</type>
      <name>marginalCovariance</name>
      <anchorfile>a04340.html</anchorfile>
      <anchor>a4be1cf1c4427ef29581c30618e5e1a4a</anchor>
      <arglist>(Key key) const</arglist>
    </member>
    <member kind="function">
      <type>Values</type>
      <name>calculateBestEstimate</name>
      <anchorfile>a04340.html</anchorfile>
      <anchor>a9d6f2b0d018f817f64fee6abdaa413ff</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const VectorValues &amp;</type>
      <name>getDelta</name>
      <anchorfile>a04340.html</anchorfile>
      <anchor>a54c3a0329b3397df717271cfd530b105</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>error</name>
      <anchorfile>a04340.html</anchorfile>
      <anchor>ae2e2d054d1dcbc65bf886d016662a36c</anchor>
      <arglist>(const VectorValues &amp;x) const</arglist>
    </member>
    <member kind="function">
      <type>const NonlinearFactorGraph &amp;</type>
      <name>getFactorsUnsafe</name>
      <anchorfile>a04340.html</anchorfile>
      <anchor>aeb325a51d89054173898efa31be0096e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const VariableIndex &amp;</type>
      <name>getVariableIndex</name>
      <anchorfile>a04340.html</anchorfile>
      <anchor>a9b334c28f63172f3b0ed4e77989e3a93</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const KeySet &amp;</type>
      <name>getFixedVariables</name>
      <anchorfile>a04340.html</anchorfile>
      <anchor>a50cd19a4c757c0128aa658662c2e6273</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>printStats</name>
      <anchorfile>a04340.html</anchorfile>
      <anchor>a8e147b16c01a4651d7f3a27ac834e39a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>VectorValues</type>
      <name>gradientAtZero</name>
      <anchorfile>a04340.html</anchorfile>
      <anchor>acb78e33b3c8f18302b1ba591a938fccd</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="typedef">
      <type>ISAM2</type>
      <name>This</name>
      <anchorfile>a04340.html</anchorfile>
      <anchor>af8b9f410dae63f79dfd229506370f31e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>BayesTree&lt; ISAM2Clique &gt;</type>
      <name>Base</name>
      <anchorfile>a04340.html</anchorfile>
      <anchor>a32db7eb856bee27d1274306284f15a88</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Base::Clique</type>
      <name>Clique</name>
      <anchorfile>a04340.html</anchorfile>
      <anchor>a7aa1a454fa0d3f1e0cf194b10803b882</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Base::sharedClique</type>
      <name>sharedClique</name>
      <anchorfile>a04340.html</anchorfile>
      <anchor>a9b7c2355b667269d2cd08fc7b414f3f5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Base::Cliques</type>
      <name>Cliques</name>
      <anchorfile>a04340.html</anchorfile>
      <anchor>a73115b2f980fb72b2f3087b697f69990</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>recalculate</name>
      <anchorfile>a04340.html</anchorfile>
      <anchor>a7b0f1ee7faa12cca775ed9d434bdd339</anchor>
      <arglist>(const ISAM2UpdateParams &amp;updateParams, const KeySet &amp;relinKeys, ISAM2Result *result)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>addVariables</name>
      <anchorfile>a04340.html</anchorfile>
      <anchor>a8e688975ac20a2ab273ba60285f87904</anchor>
      <arglist>(const Values &amp;newTheta, ISAM2Result::DetailedResults *detail=0)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>removeVariables</name>
      <anchorfile>a04340.html</anchorfile>
      <anchor>a16e2e5fbcc35c91e434858bddde793f9</anchor>
      <arglist>(const KeySet &amp;unusedKeys)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Values</type>
      <name>theta_</name>
      <anchorfile>a04340.html</anchorfile>
      <anchor>abe3ea23a8d9b61097f28bf2a5c23057e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>VariableIndex</type>
      <name>variableIndex_</name>
      <anchorfile>a04340.html</anchorfile>
      <anchor>ab9bd085bcf745368cb4801d04538ec18</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>VectorValues</type>
      <name>delta_</name>
      <anchorfile>a04340.html</anchorfile>
      <anchor>aa1a5f004e312d381945569e74e801941</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>KeySet</type>
      <name>deltaReplacedMask_</name>
      <anchorfile>a04340.html</anchorfile>
      <anchor>a0f7ba75bbd10998951d79a62106e0623</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>NonlinearFactorGraph</type>
      <name>nonlinearFactors_</name>
      <anchorfile>a04340.html</anchorfile>
      <anchor>a9307a6fb614f33fb354e4e445467c258</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>GaussianFactorGraph</type>
      <name>linearFactors_</name>
      <anchorfile>a04340.html</anchorfile>
      <anchor>ada63722602d709e210d4e1ab45dcc6a8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ISAM2Params</type>
      <name>params_</name>
      <anchorfile>a04340.html</anchorfile>
      <anchor>abec56652222d97d144e75a175ba3e8d0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>boost::optional&lt; double &gt;</type>
      <name>doglegDelta_</name>
      <anchorfile>a04340.html</anchorfile>
      <anchor>ad460de94ada9813a2a9ca8ee8a953a19</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>KeySet</type>
      <name>fixedVariables_</name>
      <anchorfile>a04340.html</anchorfile>
      <anchor>a0d0807258336ff483ad89c80cdb88eea</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>update_count_</name>
      <anchorfile>a04340.html</anchorfile>
      <anchor>a29b30773e68652011e31ee0a9a0cfa4d</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>boost::serialization::access</name>
      <anchorfile>a04340.html</anchorfile>
      <anchor>ac98d07dd8f7b70e16ccb9a01abf56b9c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::ISAM2BayesTree</name>
    <filename>a04316.html</filename>
    <base>BayesTree&lt; ISAM2Clique &gt;</base>
  </compound>
  <compound kind="class">
    <name>gtsam::ISAM2Clique</name>
    <filename>a04348.html</filename>
    <base>BayesTreeCliqueBase&lt; ISAM2Clique, GaussianFactorGraph &gt;</base>
    <member kind="function">
      <type></type>
      <name>ISAM2Clique</name>
      <anchorfile>a04348.html</anchorfile>
      <anchor>a65df62d31a1b1634ab9ebd9e2bbe32a8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ISAM2Clique</name>
      <anchorfile>a04348.html</anchorfile>
      <anchor>a19fabd19af262f6e8bda230a2efadc82</anchor>
      <arglist>(const ISAM2Clique &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>ISAM2Clique &amp;</type>
      <name>operator=</name>
      <anchorfile>a04348.html</anchorfile>
      <anchor>a3409885cf82ae7cc29c9055603e39b43</anchor>
      <arglist>(const ISAM2Clique &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setEliminationResult</name>
      <anchorfile>a04348.html</anchorfile>
      <anchor>ad79e1c0e71cabe328a510a571cc29206</anchor>
      <arglist>(const FactorGraphType::EliminationResult &amp;eliminationResult)</arglist>
    </member>
    <member kind="function">
      <type>Base::FactorType::shared_ptr &amp;</type>
      <name>cachedFactor</name>
      <anchorfile>a04348.html</anchorfile>
      <anchor>a62401d890a558a8060361caeba80c219</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const Vector &amp;</type>
      <name>gradientContribution</name>
      <anchorfile>a04348.html</anchorfile>
      <anchor>a18b009c1b660a1d79b405aed8551062c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addGradientAtZero</name>
      <anchorfile>a04348.html</anchorfile>
      <anchor>a1c5a6243555e289db64c6f440c0ac2a4</anchor>
      <arglist>(VectorValues *g) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>a04348.html</anchorfile>
      <anchor>a841660c31e786eef2b7add6e9b6aad9d</anchor>
      <arglist>(const std::string &amp;s=&quot;&quot;, const KeyFormatter &amp;formatter=DefaultKeyFormatter) const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>nnz_internal</name>
      <anchorfile>a04348.html</anchorfile>
      <anchor>a62a816c05cad8360c92599ae644b0554</anchor>
      <arglist>(size_t *result) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>findAll</name>
      <anchorfile>a04348.html</anchorfile>
      <anchor>a184ab7f333a15833d70c2533413d2ab5</anchor>
      <arglist>(const KeySet &amp;markedMask, KeySet *keys) const</arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>boost::serialization::access</name>
      <anchorfile>a04348.html</anchorfile>
      <anchor>ac98d07dd8f7b70e16ccb9a01abf56b9c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>gtsam::ISAM2DoglegParams</name>
    <filename>a04356.html</filename>
    <member kind="function">
      <type></type>
      <name>ISAM2DoglegParams</name>
      <anchorfile>a04356.html</anchorfile>
      <anchor>a68b79a86c44c9bec6549ecdfaf0cf536</anchor>
      <arglist>(double _initialDelta=1.0, double _wildfireThreshold=1e-5, DoglegOptimizerImpl::TrustRegionAdaptationMode _adaptationMode=DoglegOptimizerImpl::SEARCH_EACH_ITERATION, bool _verbose=false)</arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>initialDelta</name>
      <anchorfile>a04356.html</anchorfile>
      <anchor>a929d62bcb7aefda2b8514a813360d272</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>wildfireThreshold</name>
      <anchorfile>a04356.html</anchorfile>
      <anchor>aaf78f71297ce1a510acd290b3e7289f2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>DoglegOptimizerImpl::TrustRegionAdaptationMode</type>
      <name>adaptationMode</name>
      <anchorfile>a04356.html</anchorfile>
      <anchor>a4011adf62546c0fca59e62c0522136b8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>verbose</name>
      <anchorfile>a04356.html</anchorfile>
      <anchor>a423adc06cbc8c72f89469d1c3eb24571</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>gtsam::ISAM2GaussNewtonParams</name>
    <filename>a04352.html</filename>
    <member kind="function">
      <type></type>
      <name>ISAM2GaussNewtonParams</name>
      <anchorfile>a04352.html</anchorfile>
      <anchor>ab1b9012a5a0d91351d13174c5208dc7e</anchor>
      <arglist>(double _wildfireThreshold=0.001)</arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>wildfireThreshold</name>
      <anchorfile>a04352.html</anchorfile>
      <anchor>a2d9c7345a550e3719689a75a4e203f3b</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::ISAM2JunctionTree</name>
    <filename>a04320.html</filename>
    <base>JunctionTree&lt; ISAM2BayesTree, GaussianFactorGraph &gt;</base>
  </compound>
  <compound kind="struct">
    <name>gtsam::ISAM2Params</name>
    <filename>a04360.html</filename>
    <member kind="function">
      <type></type>
      <name>ISAM2Params</name>
      <anchorfile>a04360.html</anchorfile>
      <anchor>af9b8cf95eb016d68fa9ce9d06e4a3888</anchor>
      <arglist>(OptimizationParams _optimizationParams=ISAM2GaussNewtonParams(), RelinearizationThreshold _relinearizeThreshold=0.1, int _relinearizeSkip=10, bool _enableRelinearization=true, bool _evaluateNonlinearError=false, Factorization _factorization=ISAM2Params::CHOLESKY, bool _cacheLinearizedFactors=true, const KeyFormatter &amp;_keyFormatter=DefaultKeyFormatter, bool _enableDetailedResults=false)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>a04360.html</anchorfile>
      <anchor>a31940d63f74bdd2ac6f7d6dff2e94d84</anchor>
      <arglist>(const std::string &amp;str=&quot;&quot;) const</arglist>
    </member>
    <member kind="variable">
      <type>OptimizationParams</type>
      <name>optimizationParams</name>
      <anchorfile>a04360.html</anchorfile>
      <anchor>a228293673dafedcf900dc0927be66b1d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>RelinearizationThreshold</type>
      <name>relinearizeThreshold</name>
      <anchorfile>a04360.html</anchorfile>
      <anchor>af5da340f5774c8ccbbdecfc0a5299888</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>relinearizeSkip</name>
      <anchorfile>a04360.html</anchorfile>
      <anchor>ab914df94ba4aeff0d19293240f61838c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>enableRelinearization</name>
      <anchorfile>a04360.html</anchorfile>
      <anchor>a39c7b95cdffb77c3f9b02c8b74d135d2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>evaluateNonlinearError</name>
      <anchorfile>a04360.html</anchorfile>
      <anchor>a6d72361621ace3e37e5b06eed1ef2a40</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Factorization</type>
      <name>factorization</name>
      <anchorfile>a04360.html</anchorfile>
      <anchor>ae9aeb4bedb786390f4c64e8217730cf4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>cacheLinearizedFactors</name>
      <anchorfile>a04360.html</anchorfile>
      <anchor>a63f4f566f792b1bfe55ced8c8d0f77c1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>KeyFormatter</type>
      <name>keyFormatter</name>
      <anchorfile>a04360.html</anchorfile>
      <anchor>af43c5940b56d327638b1a04bf8f85c91</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>enableDetailedResults</name>
      <anchorfile>a04360.html</anchorfile>
      <anchor>a705057d0849755bb974848f57ca1482f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>enablePartialRelinearizationCheck</name>
      <anchorfile>a04360.html</anchorfile>
      <anchor>a086c925f9657f69bb87381f5caa35d8d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>findUnusedFactorSlots</name>
      <anchorfile>a04360.html</anchorfile>
      <anchor>a8ff00037b52caa1ac8ce81747dfd794e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::variant&lt; ISAM2GaussNewtonParams, ISAM2DoglegParams &gt;</type>
      <name>OptimizationParams</name>
      <anchorfile>a04360.html</anchorfile>
      <anchor>a78914164d9fc6f601b2e41ed6f29d386</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::variant&lt; double, FastMap&lt; char, Vector &gt; &gt;</type>
      <name>RelinearizationThreshold</name>
      <anchorfile>a04360.html</anchorfile>
      <anchor>aaca0be318ade6e00378389976c5cb761</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>gtsam::ISAM2Result</name>
    <filename>a04364.html</filename>
    <member kind="function">
      <type>DetailedResults *</type>
      <name>details</name>
      <anchorfile>a04364.html</anchorfile>
      <anchor>a4227f8804aa21a281f88defd2c4f325a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>a04364.html</anchorfile>
      <anchor>a718880ff6d90f0cad85ee97bc2f1791c</anchor>
      <arglist>(const std::string str=&quot;&quot;) const</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>getVariablesRelinearized</name>
      <anchorfile>a04364.html</anchorfile>
      <anchor>a1b2b5247eaf3ef6f6d3e639e2e310962</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable">
      <type>boost::optional&lt; double &gt;</type>
      <name>errorBefore</name>
      <anchorfile>a04364.html</anchorfile>
      <anchor>a5ddf96680d6cac030d8862da98bcaba5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>boost::optional&lt; double &gt;</type>
      <name>errorAfter</name>
      <anchorfile>a04364.html</anchorfile>
      <anchor>ae57486e5d3d6592d0c08b4783baf2f27</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>size_t</type>
      <name>variablesRelinearized</name>
      <anchorfile>a04364.html</anchorfile>
      <anchor>a0ef240bad454346811a3db6a28e2516a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>size_t</type>
      <name>variablesReeliminated</name>
      <anchorfile>a04364.html</anchorfile>
      <anchor>aa591562d9627adfff6641e1b7f217c06</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>size_t</type>
      <name>factorsRecalculated</name>
      <anchorfile>a04364.html</anchorfile>
      <anchor>a3d4494a9ce533ee7fac5acf6819f2484</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>size_t</type>
      <name>cliques</name>
      <anchorfile>a04364.html</anchorfile>
      <anchor>a8676d942982667bd0a77975c944c6ae4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>FactorIndices</type>
      <name>newFactorsIndices</name>
      <anchorfile>a04364.html</anchorfile>
      <anchor>adb82c057d927f3c326ca3c38dac29660</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>KeySet</type>
      <name>unusedKeys</name>
      <anchorfile>a04364.html</anchorfile>
      <anchor>acdadbbcde16f1bed137cff50aab3cdc3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>KeyVector</type>
      <name>observedKeys</name>
      <anchorfile>a04364.html</anchorfile>
      <anchor>ad140bcd611177fa14bda1d8ea9c58259</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>KeySet</type>
      <name>keysWithRemovedFactors</name>
      <anchorfile>a04364.html</anchorfile>
      <anchor>a87494d0c056b34eae1ab3de758b4aa66</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>KeySet</type>
      <name>markedKeys</name>
      <anchorfile>a04364.html</anchorfile>
      <anchor>ad985256cc02447c0c82da8446c179e4b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>boost::optional&lt; DetailedResults &gt;</type>
      <name>detail</name>
      <anchorfile>a04364.html</anchorfile>
      <anchor>a7cc687e12fe3ad3a6fba651108fac6b7</anchor>
      <arglist></arglist>
    </member>
    <class kind="struct">gtsam::ISAM2Result::DetailedResults</class>
  </compound>
  <compound kind="struct">
    <name>gtsam::ISAM2UpdateParams</name>
    <filename>a04376.html</filename>
    <member kind="variable">
      <type>FactorIndices</type>
      <name>removeFactorIndices</name>
      <anchorfile>a04376.html</anchorfile>
      <anchor>a722ee268dfe1cf90d65433b01bc02a9e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>boost::optional&lt; FastMap&lt; Key, int &gt; &gt;</type>
      <name>constrainedKeys</name>
      <anchorfile>a04376.html</anchorfile>
      <anchor>a1171e13a3213ea4ebbde502583e51e9b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>boost::optional&lt; FastList&lt; Key &gt; &gt;</type>
      <name>noRelinKeys</name>
      <anchorfile>a04376.html</anchorfile>
      <anchor>adee5e549912cce0c412f2476bb12c389</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>boost::optional&lt; FastList&lt; Key &gt; &gt;</type>
      <name>extraReelimKeys</name>
      <anchorfile>a04376.html</anchorfile>
      <anchor>add8ddce81b7606cdfe2690239a863ef8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>force_relinearize</name>
      <anchorfile>a04376.html</anchorfile>
      <anchor>a3faf0991b952cebcd6da9d13d09dbbf3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>boost::optional&lt; FastMap&lt; FactorIndex, KeySet &gt; &gt;</type>
      <name>newAffectedKeys</name>
      <anchorfile>a04376.html</anchorfile>
      <anchor>ae8d90d9110de52141a784e2c7b41ec69</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>forceFullSolve</name>
      <anchorfile>a04376.html</anchorfile>
      <anchor>a8d9c49f7f7070d873c58913714c11a11</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::IsGroup</name>
    <filename>a02512.html</filename>
    <templarg>typename G</templarg>
  </compound>
  <compound kind="class">
    <name>gtsam::IsLieGroup</name>
    <filename>a02548.html</filename>
    <templarg>typename T</templarg>
    <base>IsGroup&lt; T &gt;</base>
  </compound>
  <compound kind="class">
    <name>gtsam::noiseModel::Isotropic</name>
    <filename>a03888.html</filename>
    <base>gtsam::noiseModel::Diagonal</base>
    <member kind="function">
      <type>double</type>
      <name>squaredMahalanobisDistance</name>
      <anchorfile>a03888.html</anchorfile>
      <anchor>af7c4601cba5427791b6cb6777fb40fc8</anchor>
      <arglist>(const Vector &amp;v) const override</arglist>
    </member>
    <member kind="function">
      <type>Vector</type>
      <name>whiten</name>
      <anchorfile>a03888.html</anchorfile>
      <anchor>a90f77b77984d15a4956e7112d4967c8d</anchor>
      <arglist>(const Vector &amp;v) const override</arglist>
    </member>
    <member kind="function">
      <type>Vector</type>
      <name>unwhiten</name>
      <anchorfile>a03888.html</anchorfile>
      <anchor>aa1ac067e6ff2c70540efa795475a3bfa</anchor>
      <arglist>(const Vector &amp;v) const override</arglist>
    </member>
    <member kind="function">
      <type>Matrix</type>
      <name>Whiten</name>
      <anchorfile>a03888.html</anchorfile>
      <anchor>ab8e0677ad0e9c6a2c9793a0971af8178</anchor>
      <arglist>(const Matrix &amp;H) const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>WhitenInPlace</name>
      <anchorfile>a03888.html</anchorfile>
      <anchor>a0a3c7a16da1df4075e2ff45bf64e5762</anchor>
      <arglist>(Matrix &amp;H) const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>whitenInPlace</name>
      <anchorfile>a03888.html</anchorfile>
      <anchor>af896ee11596ae0642f47d3b8a8792e5a</anchor>
      <arglist>(Vector &amp;v) const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>WhitenInPlace</name>
      <anchorfile>a03888.html</anchorfile>
      <anchor>ad493fa826ba97bfb8f577d3703cd64c9</anchor>
      <arglist>(Eigen::Block&lt; Matrix &gt; H) const override</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>sigma</name>
      <anchorfile>a03888.html</anchorfile>
      <anchor>a0d9e4784fd131f6f47c9c24e9973f0ab</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static shared_ptr</type>
      <name>Sigma</name>
      <anchorfile>a03888.html</anchorfile>
      <anchor>a6f34496ff6924bd5552c77810e991015</anchor>
      <arglist>(size_t dim, double sigma, bool smart=true)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static shared_ptr</type>
      <name>Variance</name>
      <anchorfile>a03888.html</anchorfile>
      <anchor>af176eeec710dc59f5e0125e52a9e8326</anchor>
      <arglist>(size_t dim, double variance, bool smart=true)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static shared_ptr</type>
      <name>Precision</name>
      <anchorfile>a03888.html</anchorfile>
      <anchor>a82d8d86deec2e1cc7185c9ccf113b724</anchor>
      <arglist>(size_t dim, double precision, bool smart=true)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>Isotropic</name>
      <anchorfile>a03888.html</anchorfile>
      <anchor>ae18e287216417166319c4ea7ba046941</anchor>
      <arglist>(size_t dim, double sigma)</arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>boost::serialization::access</name>
      <anchorfile>a03888.html</anchorfile>
      <anchor>ac98d07dd8f7b70e16ccb9a01abf56b9c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::IsTestable</name>
    <filename>a02644.html</filename>
    <templarg>class T</templarg>
  </compound>
  <compound kind="class">
    <name>gtsam::IsVectorSpace</name>
    <filename>a02800.html</filename>
    <templarg>typename T</templarg>
    <base>gtsam::IsLieGroup</base>
  </compound>
  <compound kind="struct">
    <name>gtsam::DoglegOptimizerImpl::IterationResult</name>
    <filename>a04216.html</filename>
  </compound>
  <compound kind="class">
    <name>gtsam::IterativeOptimizationParameters</name>
    <filename>a03780.html</filename>
  </compound>
  <compound kind="class">
    <name>gtsam::IterativeSolver</name>
    <filename>a03784.html</filename>
  </compound>
  <compound kind="class">
    <name>gtsam::JacobianFactor</name>
    <filename>a03796.html</filename>
    <base>gtsam::GaussianFactor</base>
    <member kind="function">
      <type></type>
      <name>JacobianFactor</name>
      <anchorfile>a03796.html</anchorfile>
      <anchor>aebf0c4a50146cf293ad757393edb7eba</anchor>
      <arglist>(const GaussianFactor &amp;gf)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>JacobianFactor</name>
      <anchorfile>a03796.html</anchorfile>
      <anchor>a51dae31470b597cfcb125d8eea11c9f7</anchor>
      <arglist>(const JacobianFactor &amp;jf)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>JacobianFactor</name>
      <anchorfile>a03796.html</anchorfile>
      <anchor>a3f6c68122081325fba60790aea4e3033</anchor>
      <arglist>(const HessianFactor &amp;hf)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>JacobianFactor</name>
      <anchorfile>a03796.html</anchorfile>
      <anchor>a6529a99f529d8d5e9a7d65e0aed8622b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>JacobianFactor</name>
      <anchorfile>a03796.html</anchorfile>
      <anchor>a6b7a84b699fe0ef46cedd5e523f5bec6</anchor>
      <arglist>(const Vector &amp;b_in)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>JacobianFactor</name>
      <anchorfile>a03796.html</anchorfile>
      <anchor>a8242a86e1822da752487387b49ff5e30</anchor>
      <arglist>(Key i1, const Matrix &amp;A1, const Vector &amp;b, const SharedDiagonal &amp;model=SharedDiagonal())</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>JacobianFactor</name>
      <anchorfile>a03796.html</anchorfile>
      <anchor>a19bfb262816122d0bbe6ec6b1b2c7b1f</anchor>
      <arglist>(Key i1, const Matrix &amp;A1, Key i2, const Matrix &amp;A2, const Vector &amp;b, const SharedDiagonal &amp;model=SharedDiagonal())</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>JacobianFactor</name>
      <anchorfile>a03796.html</anchorfile>
      <anchor>a10686053f59eecc6fa400436ae7524d7</anchor>
      <arglist>(Key i1, const Matrix &amp;A1, Key i2, const Matrix &amp;A2, Key i3, const Matrix &amp;A3, const Vector &amp;b, const SharedDiagonal &amp;model=SharedDiagonal())</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>JacobianFactor</name>
      <anchorfile>a03796.html</anchorfile>
      <anchor>adc5d50005aa660bbcd38e56d036a16f1</anchor>
      <arglist>(const TERMS &amp;terms, const Vector &amp;b, const SharedDiagonal &amp;model=SharedDiagonal())</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>JacobianFactor</name>
      <anchorfile>a03796.html</anchorfile>
      <anchor>aa3af91d18474a5833c9aa706e2faffbf</anchor>
      <arglist>(const KEYS &amp;keys, const VerticalBlockMatrix &amp;augmentedMatrix, const SharedDiagonal &amp;sigmas=SharedDiagonal())</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>JacobianFactor</name>
      <anchorfile>a03796.html</anchorfile>
      <anchor>a4959a025f4d1eacca2993efe008e677f</anchor>
      <arglist>(const GaussianFactorGraph &amp;graph)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>JacobianFactor</name>
      <anchorfile>a03796.html</anchorfile>
      <anchor>adaf45845f8b02c3116399327b3e8d11c</anchor>
      <arglist>(const GaussianFactorGraph &amp;graph, const VariableSlots &amp;p_variableSlots)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>JacobianFactor</name>
      <anchorfile>a03796.html</anchorfile>
      <anchor>a8afcfbbd9d3e67eec03c53681aa1f723</anchor>
      <arglist>(const GaussianFactorGraph &amp;graph, const Ordering &amp;ordering)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>JacobianFactor</name>
      <anchorfile>a03796.html</anchorfile>
      <anchor>a535a38f98c39e2d8e92a6f3f6d2dd4cd</anchor>
      <arglist>(const GaussianFactorGraph &amp;graph, const Ordering &amp;ordering, const VariableSlots &amp;p_variableSlots)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~JacobianFactor</name>
      <anchorfile>a03796.html</anchorfile>
      <anchor>ab3cbfa08c3d97f37971b3672d6d1faed</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>GaussianFactor::shared_ptr</type>
      <name>clone</name>
      <anchorfile>a03796.html</anchorfile>
      <anchor>a70e3ef7f06e906236d784f5cd817adec</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>a03796.html</anchorfile>
      <anchor>a5f867573eb4c8e492a4942aee507a82a</anchor>
      <arglist>(const std::string &amp;s=&quot;&quot;, const KeyFormatter &amp;formatter=DefaultKeyFormatter) const override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>equals</name>
      <anchorfile>a03796.html</anchorfile>
      <anchor>a779ec13dc400cccddf6e29d22a79cb65</anchor>
      <arglist>(const GaussianFactor &amp;lf, double tol=1e-9) const override</arglist>
    </member>
    <member kind="function">
      <type>Vector</type>
      <name>error_vector</name>
      <anchorfile>a03796.html</anchorfile>
      <anchor>a916898a80621163ad8a94cae1677cb58</anchor>
      <arglist>(const VectorValues &amp;c) const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>error</name>
      <anchorfile>a03796.html</anchorfile>
      <anchor>a34bda1c09405ced840a15a6cdb5aafe4</anchor>
      <arglist>(const VectorValues &amp;c) const override</arglist>
    </member>
    <member kind="function">
      <type>Matrix</type>
      <name>augmentedInformation</name>
      <anchorfile>a03796.html</anchorfile>
      <anchor>ab649ae538013b52c92c89330d71aed97</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>Matrix</type>
      <name>information</name>
      <anchorfile>a03796.html</anchorfile>
      <anchor>a7c9ccf3f79558b2e1b872f867dff7023</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>hessianDiagonalAdd</name>
      <anchorfile>a03796.html</anchorfile>
      <anchor>a77ace3ef7d0b915ff079f9628db1b3a3</anchor>
      <arglist>(VectorValues &amp;d) const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>hessianDiagonal</name>
      <anchorfile>a03796.html</anchorfile>
      <anchor>a4f42fbe09fc9326e832e985bd8915e5b</anchor>
      <arglist>(double *d) const override</arglist>
    </member>
    <member kind="function">
      <type>std::map&lt; Key, Matrix &gt;</type>
      <name>hessianBlockDiagonal</name>
      <anchorfile>a03796.html</anchorfile>
      <anchor>a30e01d2ebb8605ba3c1095f99b0034c5</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>std::pair&lt; Matrix, Vector &gt;</type>
      <name>jacobian</name>
      <anchorfile>a03796.html</anchorfile>
      <anchor>a278e5748ada384c2b8a4b314cf82f612</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>std::pair&lt; Matrix, Vector &gt;</type>
      <name>jacobianUnweighted</name>
      <anchorfile>a03796.html</anchorfile>
      <anchor>ae1ad69f4f0b17f81856166f021b47e95</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Matrix</type>
      <name>augmentedJacobian</name>
      <anchorfile>a03796.html</anchorfile>
      <anchor>a556fc3b8cd798fe1488fab397f7fd5c9</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>Matrix</type>
      <name>augmentedJacobianUnweighted</name>
      <anchorfile>a03796.html</anchorfile>
      <anchor>ac0a22f1c66f89d6b147f190c58bb753a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const VerticalBlockMatrix &amp;</type>
      <name>matrixObject</name>
      <anchorfile>a03796.html</anchorfile>
      <anchor>ab9e95472e3bb81cd8e6c1cb9ed92b4af</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>VerticalBlockMatrix &amp;</type>
      <name>matrixObject</name>
      <anchorfile>a03796.html</anchorfile>
      <anchor>a9b86a19789d41d0f1205674704ace5ab</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>GaussianFactor::shared_ptr</type>
      <name>negate</name>
      <anchorfile>a03796.html</anchorfile>
      <anchor>a90dbb43e40ade33781ec73d1be532936</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>empty</name>
      <anchorfile>a03796.html</anchorfile>
      <anchor>a0faf07212d1c51df502859fb36ff3008</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isConstrained</name>
      <anchorfile>a03796.html</anchorfile>
      <anchor>a6c450b7717764964f270faeb3beb36ac</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>DenseIndex</type>
      <name>getDim</name>
      <anchorfile>a03796.html</anchorfile>
      <anchor>a98d8f3afec4f66783375942908e5a2d6</anchor>
      <arglist>(const_iterator variable) const override</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>rows</name>
      <anchorfile>a03796.html</anchorfile>
      <anchor>abb57c8cec2af9109edb3127ae89f69a8</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>cols</name>
      <anchorfile>a03796.html</anchorfile>
      <anchor>ad8665a5b047867d807cd1808edad1e0c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const SharedDiagonal &amp;</type>
      <name>get_model</name>
      <anchorfile>a03796.html</anchorfile>
      <anchor>a44a2ce150ef653460b6f2c3c3cd251c6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>SharedDiagonal &amp;</type>
      <name>get_model</name>
      <anchorfile>a03796.html</anchorfile>
      <anchor>a8f98cfd8b995762c9836eb15c6653d16</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const constBVector</type>
      <name>getb</name>
      <anchorfile>a03796.html</anchorfile>
      <anchor>a0d0aa9bc7d1cdf639b6731d6cef6b2f8</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>constABlock</type>
      <name>getA</name>
      <anchorfile>a03796.html</anchorfile>
      <anchor>af3116737337ff3df51a5c5fe884154c4</anchor>
      <arglist>(const_iterator variable) const</arglist>
    </member>
    <member kind="function">
      <type>constABlock</type>
      <name>getA</name>
      <anchorfile>a03796.html</anchorfile>
      <anchor>a6ec09943327b0cf49a05216eb9c128de</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>BVector</type>
      <name>getb</name>
      <anchorfile>a03796.html</anchorfile>
      <anchor>a283d02687937cd199624b53d515622af</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>ABlock</type>
      <name>getA</name>
      <anchorfile>a03796.html</anchorfile>
      <anchor>a83e85032eecb0d6deee3743bd4d21253</anchor>
      <arglist>(iterator variable)</arglist>
    </member>
    <member kind="function">
      <type>ABlock</type>
      <name>getA</name>
      <anchorfile>a03796.html</anchorfile>
      <anchor>a9cf15287bde9bbd4eed7209140418057</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>updateHessian</name>
      <anchorfile>a03796.html</anchorfile>
      <anchor>af31998ed8504122ae86c4a6a02f9deab</anchor>
      <arglist>(const KeyVector &amp;keys, SymmetricBlockMatrix *info) const override</arglist>
    </member>
    <member kind="function">
      <type>Vector</type>
      <name>operator*</name>
      <anchorfile>a03796.html</anchorfile>
      <anchor>a8615e1645fe69f6c4750f730a95b36ee</anchor>
      <arglist>(const VectorValues &amp;x) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>transposeMultiplyAdd</name>
      <anchorfile>a03796.html</anchorfile>
      <anchor>a41d2a9584c072dd01977752acf05fd06</anchor>
      <arglist>(double alpha, const Vector &amp;e, VectorValues &amp;x) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>multiplyHessianAdd</name>
      <anchorfile>a03796.html</anchorfile>
      <anchor>aabe526ce4e90dbd961510c0de2937ffd</anchor>
      <arglist>(double alpha, const VectorValues &amp;x, VectorValues &amp;y) const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>multiplyHessianAdd</name>
      <anchorfile>a03796.html</anchorfile>
      <anchor>a89568ca7957c90ebdd47dcdb4a1a6994</anchor>
      <arglist>(double alpha, const double *x, double *y, const std::vector&lt; size_t &gt; &amp;accumulatedDims) const</arglist>
    </member>
    <member kind="function">
      <type>VectorValues</type>
      <name>gradientAtZero</name>
      <anchorfile>a03796.html</anchorfile>
      <anchor>a4c7251b47b04dce9d3fbf4db90fedf9f</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>gradientAtZero</name>
      <anchorfile>a03796.html</anchorfile>
      <anchor>a3e3a1a61305fa92b4149f862a1092ade</anchor>
      <arglist>(double *d) const override</arglist>
    </member>
    <member kind="function">
      <type>Vector</type>
      <name>gradient</name>
      <anchorfile>a03796.html</anchorfile>
      <anchor>a264274afdb545e533ec19c57f38b3c76</anchor>
      <arglist>(Key key, const VectorValues &amp;x) const override</arglist>
    </member>
    <member kind="function">
      <type>JacobianFactor</type>
      <name>whiten</name>
      <anchorfile>a03796.html</anchorfile>
      <anchor>aa5170ead08445576b43ba1fc1ca065f3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::pair&lt; boost::shared_ptr&lt; GaussianConditional &gt;, shared_ptr &gt;</type>
      <name>eliminate</name>
      <anchorfile>a03796.html</anchorfile>
      <anchor>aacf73ccbc1b57b515c9733bbe91e36aa</anchor>
      <arglist>(const Ordering &amp;keys)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setModel</name>
      <anchorfile>a03796.html</anchorfile>
      <anchor>aed654ae2a8c5ef5862636bd068571409</anchor>
      <arglist>(bool anyConstrained, const Vector &amp;sigmas)</arglist>
    </member>
    <member kind="function">
      <type>boost::shared_ptr&lt; GaussianConditional &gt;</type>
      <name>splitConditional</name>
      <anchorfile>a03796.html</anchorfile>
      <anchor>a25834726868b7b4e5427588ee38212aa</anchor>
      <arglist>(size_t nrFrontals)</arglist>
    </member>
    <member kind="typedef">
      <type>JacobianFactor</type>
      <name>This</name>
      <anchorfile>a03796.html</anchorfile>
      <anchor>a53b64a11dd54af2f37fc441d6475ed0b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GaussianFactor</type>
      <name>Base</name>
      <anchorfile>a03796.html</anchorfile>
      <anchor>a9fc30c262bb0a6b6d2ea13d39086f3b9</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; This &gt;</type>
      <name>shared_ptr</name>
      <anchorfile>a03796.html</anchorfile>
      <anchor>adaf03a52ed83559d6a03cbab95092698</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>fillTerms</name>
      <anchorfile>a03796.html</anchorfile>
      <anchor>a44d0e92d8e8e74eab3792080ed648b5e</anchor>
      <arglist>(const TERMS &amp;terms, const Vector &amp;b, const SharedDiagonal &amp;noiseModel)</arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>boost::serialization::access</name>
      <anchorfile>a03796.html</anchorfile>
      <anchor>ac98d07dd8f7b70e16ccb9a01abf56b9c</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend GTSAM_EXPORT std::pair&lt; boost::shared_ptr&lt; GaussianConditional &gt;, shared_ptr &gt;</type>
      <name>EliminateQR</name>
      <anchorfile>a03796.html</anchorfile>
      <anchor>a7f318e1523041b005d1214436e2ed821</anchor>
      <arglist>(const GaussianFactorGraph &amp;factors, const Ordering &amp;keys)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::JacobianFactorQ</name>
    <filename>a04796.html</filename>
    <templarg>size_t D</templarg>
    <templarg>size_t ZDim</templarg>
    <base>gtsam::RegularJacobianFactor</base>
    <member kind="function">
      <type></type>
      <name>JacobianFactorQ</name>
      <anchorfile>a04796.html</anchorfile>
      <anchor>a4dd3fbba46a6dff75bcf902931a3b769</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>JacobianFactorQ</name>
      <anchorfile>a04796.html</anchorfile>
      <anchor>abfb38e58b5b2d1293cf374b7eca2b2d4</anchor>
      <arglist>(const KeyVector &amp;keys, const SharedDiagonal &amp;model=SharedDiagonal())</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>JacobianFactorQ</name>
      <anchorfile>a04796.html</anchorfile>
      <anchor>a549fef1272025c45472f2e4294bd319e</anchor>
      <arglist>(const KeyVector &amp;keys, const std::vector&lt; MatrixZD, Eigen::aligned_allocator&lt; MatrixZD &gt; &gt; &amp;FBlocks, const Matrix &amp;E, const Matrix3 &amp;P, const Vector &amp;b, const SharedDiagonal &amp;model=SharedDiagonal())</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::JacobianFactorQR</name>
    <filename>a04804.html</filename>
    <templarg>size_t D</templarg>
    <templarg>size_t ZDim</templarg>
    <base>gtsam::RegularJacobianFactor</base>
    <member kind="function">
      <type></type>
      <name>JacobianFactorQR</name>
      <anchorfile>a04804.html</anchorfile>
      <anchor>a6acdcc2e3a964795a0438cdb3ea94b1d</anchor>
      <arglist>(const KeyVector &amp;keys, const std::vector&lt; MatrixZD, Eigen::aligned_allocator&lt; MatrixZD &gt; &gt; &amp;FBlocks, const Matrix &amp;E, const Matrix3 &amp;P, const Vector &amp;b, const SharedDiagonal &amp;model=SharedDiagonal())</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::JacobianFactorSVD</name>
    <filename>a04808.html</filename>
    <templarg>size_t D</templarg>
    <templarg>size_t ZDim</templarg>
    <base>gtsam::RegularJacobianFactor</base>
    <member kind="function">
      <type></type>
      <name>JacobianFactorSVD</name>
      <anchorfile>a04808.html</anchorfile>
      <anchor>a551b1c04012573be8cb418c02ed77295</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>JacobianFactorSVD</name>
      <anchorfile>a04808.html</anchorfile>
      <anchor>a7631acc7207dd75097e22708237f3632</anchor>
      <arglist>(const KeyVector &amp;keys, const SharedDiagonal &amp;model=SharedDiagonal())</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>JacobianFactorSVD</name>
      <anchorfile>a04808.html</anchorfile>
      <anchor>a72d8f9bc4560c97915194f35f8c2025f</anchor>
      <arglist>(const KeyVector &amp;keys, const std::vector&lt; MatrixZD, Eigen::aligned_allocator&lt; MatrixZD &gt; &gt; &amp;Fblocks, const Matrix &amp;Enull, const Vector &amp;b, const SharedDiagonal &amp;model=SharedDiagonal())</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::JointMarginal</name>
    <filename>a04400.html</filename>
    <member kind="function">
      <type></type>
      <name>JointMarginal</name>
      <anchorfile>a04400.html</anchorfile>
      <anchor>ab2fcf64154122a05a99c0d7c29611d34</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Matrix</type>
      <name>operator()</name>
      <anchorfile>a04400.html</anchorfile>
      <anchor>a6a6394311df16f326cab72ef545cbd9c</anchor>
      <arglist>(Key iVariable, Key jVariable) const</arglist>
    </member>
    <member kind="function">
      <type>Matrix</type>
      <name>at</name>
      <anchorfile>a04400.html</anchorfile>
      <anchor>a31082f007860b235520dfe7e427d7c88</anchor>
      <arglist>(Key iVariable, Key jVariable) const</arglist>
    </member>
    <member kind="function">
      <type>Matrix</type>
      <name>fullMatrix</name>
      <anchorfile>a04400.html</anchorfile>
      <anchor>a5faff6a6fe223f246b99c727fcb59e8a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>a04400.html</anchorfile>
      <anchor>ae436258b48812bdea2492f505a8d66c2</anchor>
      <arglist>(const std::string &amp;s=&quot;&quot;, const KeyFormatter &amp;formatter=DefaultKeyFormatter) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::JunctionTree</name>
    <filename>a03604.html</filename>
    <templarg>class BAYESTREE</templarg>
    <templarg>class GRAPH</templarg>
    <base>gtsam::EliminatableClusterTree</base>
    <member kind="function" protection="protected" static="yes">
      <type>static This</type>
      <name>FromEliminationTree</name>
      <anchorfile>a03604.html</anchorfile>
      <anchor>a0a0aed924d0fb7d666de293d7e8611d1</anchor>
      <arglist>(const ETREE &amp;eliminationTree)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>JunctionTree</name>
      <anchorfile>a03604.html</anchorfile>
      <anchor>a5812db967ae1a284a243c5a695656d52</anchor>
      <arglist>(const EliminationTree&lt; ETREE_BAYESNET, ETREE_GRAPH &gt; &amp;eliminationTree)</arglist>
    </member>
    <member kind="typedef">
      <type>JunctionTree&lt; BAYESTREE, GRAPH &gt;</type>
      <name>This</name>
      <anchorfile>a03604.html</anchorfile>
      <anchor>a5cd5f2112feb82893591bc85c5608dfc</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; This &gt;</type>
      <name>shared_ptr</name>
      <anchorfile>a03604.html</anchorfile>
      <anchor>acf4f22ad215c4df3d6f76cc82189a205</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>EliminatableClusterTree&lt; BAYESTREE, GRAPH &gt;</type>
      <name>Base</name>
      <anchorfile>a03604.html</anchorfile>
      <anchor>ab2fa0727164979796294c2231971bfb4</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::KalmanFilter</name>
    <filename>a03804.html</filename>
    <member kind="function">
      <type>State</type>
      <name>init</name>
      <anchorfile>a03804.html</anchorfile>
      <anchor>acb9daee749e2ef26748b521997f07e5c</anchor>
      <arglist>(const Vector &amp;x0, const SharedDiagonal &amp;P0) const</arglist>
    </member>
    <member kind="function">
      <type>State</type>
      <name>init</name>
      <anchorfile>a03804.html</anchorfile>
      <anchor>a90e5b9b28e841532e440df526dae5724</anchor>
      <arglist>(const Vector &amp;x0, const Matrix &amp;P0) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>a03804.html</anchorfile>
      <anchor>ac986e5f05f8b7f238263aabc5531bad2</anchor>
      <arglist>(const std::string &amp;s=&quot;&quot;) const</arglist>
    </member>
    <member kind="function">
      <type>State</type>
      <name>predict</name>
      <anchorfile>a03804.html</anchorfile>
      <anchor>ab13a9d493e5a274d55930633f3465e9e</anchor>
      <arglist>(const State &amp;p, const Matrix &amp;F, const Matrix &amp;B, const Vector &amp;u, const SharedDiagonal &amp;modelQ) const</arglist>
    </member>
    <member kind="function">
      <type>State</type>
      <name>predict2</name>
      <anchorfile>a03804.html</anchorfile>
      <anchor>acd841a23216a6a1751e72c22fca8481c</anchor>
      <arglist>(const State &amp;p, const Matrix &amp;A0, const Matrix &amp;A1, const Vector &amp;b, const SharedDiagonal &amp;model) const</arglist>
    </member>
    <member kind="function">
      <type>State</type>
      <name>update</name>
      <anchorfile>a03804.html</anchorfile>
      <anchor>a7cfd02544165e7a80eee93ab9e04fb57</anchor>
      <arglist>(const State &amp;p, const Matrix &amp;H, const Vector &amp;z, const SharedDiagonal &amp;model) const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Key</type>
      <name>step</name>
      <anchorfile>a03804.html</anchorfile>
      <anchor>a511b92f76e4d965f50f88a805af12ff8</anchor>
      <arglist>(const State &amp;p)</arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>Factorization</name>
      <anchorfile>a03804.html</anchorfile>
      <anchor>a0e169084c003be746ef37e980b8266a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GaussianDensity::shared_ptr</type>
      <name>State</name>
      <anchorfile>a03804.html</anchorfile>
      <anchor>a943f07d46bc01eac1070cd08fc193cc1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::KarcherMeanFactor</name>
    <filename>a04812.html</filename>
    <templarg>class T</templarg>
    <base>gtsam::NonlinearFactor</base>
    <member kind="function">
      <type></type>
      <name>KarcherMeanFactor</name>
      <anchorfile>a04812.html</anchorfile>
      <anchor>a2a629fe6552384f331d8af2a9a2e746f</anchor>
      <arglist>(const CONTAINER &amp;keys, int d=D, boost::optional&lt; double &gt; beta=boost::none)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~KarcherMeanFactor</name>
      <anchorfile>a04812.html</anchorfile>
      <anchor>acd61ca0d89f80448537dbaed5964b429</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>error</name>
      <anchorfile>a04812.html</anchorfile>
      <anchor>a1f7ee10ee0fe130c9c2e8780571520d7</anchor>
      <arglist>(const Values &amp;c) const override</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>dim</name>
      <anchorfile>a04812.html</anchorfile>
      <anchor>a5eae98c33fbadf006492d3e5a0b7164c</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>boost::shared_ptr&lt; GaussianFactor &gt;</type>
      <name>linearize</name>
      <anchorfile>a04812.html</anchorfile>
      <anchor>a96e646c2e519ab84bc8fcd86ca5f443e</anchor>
      <arglist>(const Values &amp;c) const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::key_formatter</name>
    <filename>a03612.html</filename>
  </compound>
  <compound kind="class">
    <name>gtsam::KeyInfo</name>
    <filename>a03792.html</filename>
    <member kind="function">
      <type></type>
      <name>KeyInfo</name>
      <anchorfile>a03792.html</anchorfile>
      <anchor>af566da66fd34a7a1b378035f35561867</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>KeyInfo</name>
      <anchorfile>a03792.html</anchorfile>
      <anchor>a38579ec81944e0423a2b54457b8f0114</anchor>
      <arglist>(const GaussianFactorGraph &amp;fg)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>KeyInfo</name>
      <anchorfile>a03792.html</anchorfile>
      <anchor>a48cb80c1c64a52be1cefd24b17de65c9</anchor>
      <arglist>(const GaussianFactorGraph &amp;fg, const Ordering &amp;ordering)</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>numCols</name>
      <anchorfile>a03792.html</anchorfile>
      <anchor>aa7d0169c6f78e236980fa6d60733fb73</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Ordering &amp;</type>
      <name>ordering</name>
      <anchorfile>a03792.html</anchorfile>
      <anchor>a4035dbfff1070304ae63a4ecf214adc0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; size_t &gt;</type>
      <name>colSpec</name>
      <anchorfile>a03792.html</anchorfile>
      <anchor>a3b6bf0c3234fb34484fc1d1dd7f0de75</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>VectorValues</type>
      <name>x0</name>
      <anchorfile>a03792.html</anchorfile>
      <anchor>a25347b9393790061a70ce7bd2c89b650</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Vector</type>
      <name>x0vector</name>
      <anchorfile>a03792.html</anchorfile>
      <anchor>a2044f33e89c81087afe7bccef2b3d650</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>gtsam::KeyInfoEntry</name>
    <filename>a03788.html</filename>
  </compound>
  <compound kind="struct">
    <name>gtsam::Values::KeyValuePair</name>
    <filename>a04564.html</filename>
    <member kind="variable">
      <type>const Key</type>
      <name>key</name>
      <anchorfile>a04564.html</anchorfile>
      <anchor>ae8240622f321ec9a81a9c41679ca530b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Value &amp;</type>
      <name>value</name>
      <anchorfile>a04564.html</anchorfile>
      <anchor>a512e61d8416f2210a0c41a0a96232b54</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::noiseModel::mEstimator::L2WithDeadZone</name>
    <filename>a03868.html</filename>
    <base>gtsam::noiseModel::mEstimator::Base</base>
    <member kind="friend">
      <type>friend class</type>
      <name>boost::serialization::access</name>
      <anchorfile>a03868.html</anchorfile>
      <anchor>ac98d07dd8f7b70e16ccb9a01abf56b9c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::LabeledSymbol</name>
    <filename>a03620.html</filename>
    <member kind="function">
      <type></type>
      <name>LabeledSymbol</name>
      <anchorfile>a03620.html</anchorfile>
      <anchor>a26423032387e3e0615c2f168a3ad0389</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>LabeledSymbol</name>
      <anchorfile>a03620.html</anchorfile>
      <anchor>aa3fb596d35048a62db4081d6805a2788</anchor>
      <arglist>(const LabeledSymbol &amp;key)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>LabeledSymbol</name>
      <anchorfile>a03620.html</anchorfile>
      <anchor>a67e7b55ea34de161202e6cc27ede4d3a</anchor>
      <arglist>(unsigned char c, unsigned char label, std::uint64_t j)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>LabeledSymbol</name>
      <anchorfile>a03620.html</anchorfile>
      <anchor>a6adf25100691a1e4d85a52984d97b890</anchor>
      <arglist>(gtsam::Key key)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator gtsam::Key</name>
      <anchorfile>a03620.html</anchorfile>
      <anchor>afe4e15a83b906dd5b4dc92fd9e9fda91</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>gtsam::Key</type>
      <name>key</name>
      <anchorfile>a03620.html</anchorfile>
      <anchor>aab3ca67a6a5cf4956873157e03b98a40</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>unsigned char</type>
      <name>label</name>
      <anchorfile>a03620.html</anchorfile>
      <anchor>ad222539e4fb96408cb54a19cdd736a5b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>unsigned char</type>
      <name>chr</name>
      <anchorfile>a03620.html</anchorfile>
      <anchor>a9b4c02257d2f21b0be48725cfe5fbe01</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>index</name>
      <anchorfile>a03620.html</anchorfile>
      <anchor>ac076b7b884539583308adb9e5116dc18</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator std::string</name>
      <anchorfile>a03620.html</anchorfile>
      <anchor>ae2acaada18ce4cf5328b7c7524f2566d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;</name>
      <anchorfile>a03620.html</anchorfile>
      <anchor>ab35881951614403c3bfb08cc117e488b</anchor>
      <arglist>(const LabeledSymbol &amp;comp) const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::function&lt; bool(gtsam::Key)&gt;</type>
      <name>TypeTest</name>
      <anchorfile>a03620.html</anchorfile>
      <anchor>a09ae767d472370836a43228960039702</anchor>
      <arglist>(unsigned char c)</arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>boost::serialization::access</name>
      <anchorfile>a03620.html</anchorfile>
      <anchor>ac98d07dd8f7b70e16ccb9a01abf56b9c</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend GTSAM_EXPORT std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a03620.html</anchorfile>
      <anchor>a51c83aaa24316fe9445284ab1fd99b03</anchor>
      <arglist>(std::ostream &amp;, const LabeledSymbol &amp;)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::DecisionTree::Leaf</name>
    <filename>a02916.html</filename>
    <templarg>typename L</templarg>
    <templarg>typename Y</templarg>
    <base>gtsam::DecisionTree::Node</base>
    <member kind="function">
      <type></type>
      <name>Leaf</name>
      <anchorfile>a02916.html</anchorfile>
      <anchor>a97c108bf62752ef8d78b231358987bed</anchor>
      <arglist>(const Y &amp;constant)</arglist>
    </member>
    <member kind="function">
      <type>const Y &amp;</type>
      <name>constant</name>
      <anchorfile>a02916.html</anchorfile>
      <anchor>ae4a9810c6cd41cec1d75c7b14f2c962a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>sameLeaf</name>
      <anchorfile>a02916.html</anchorfile>
      <anchor>aa6774e54e3ba0e023affb34cf15cf909</anchor>
      <arglist>(const Leaf &amp;q) const override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>sameLeaf</name>
      <anchorfile>a02916.html</anchorfile>
      <anchor>adf4a8748523fd516f12885a0776cb138</anchor>
      <arglist>(const Node &amp;q) const override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>equals</name>
      <anchorfile>a02916.html</anchorfile>
      <anchor>a4941c73a8445e31b9b34ea6761b5b42c</anchor>
      <arglist>(const Node &amp;q, double tol) const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>a02916.html</anchorfile>
      <anchor>a956552fbee79b3b48907c227a09f079c</anchor>
      <arglist>(const std::string &amp;s) const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>dot</name>
      <anchorfile>a02916.html</anchorfile>
      <anchor>ab0ea010e2e81ac383a3be89b7ebbd482</anchor>
      <arglist>(std::ostream &amp;os, bool showZero) const override</arglist>
    </member>
    <member kind="function">
      <type>const Y &amp;</type>
      <name>operator()</name>
      <anchorfile>a02916.html</anchorfile>
      <anchor>a1c43bcb6c1672fbcf1efe9fe7b8048dc</anchor>
      <arglist>(const Assignment&lt; L &gt; &amp;x) const override</arglist>
    </member>
    <member kind="function">
      <type>NodePtr</type>
      <name>apply</name>
      <anchorfile>a02916.html</anchorfile>
      <anchor>a91fc19bb5115c0825b6ad93d02cb8d42</anchor>
      <arglist>(const Unary &amp;op) const override</arglist>
    </member>
    <member kind="function">
      <type>NodePtr</type>
      <name>choose</name>
      <anchorfile>a02916.html</anchorfile>
      <anchor>a0bbb7370b145f38b7dcb569ed91f4bb9</anchor>
      <arglist>(const L &amp;label, size_t index) const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::LevenbergMarquardtOptimizer</name>
    <filename>a04380.html</filename>
    <base>gtsam::NonlinearOptimizer</base>
    <member kind="function">
      <type></type>
      <name>LevenbergMarquardtOptimizer</name>
      <anchorfile>a04380.html</anchorfile>
      <anchor>afbc0d366428f3339505587ac0848e2f3</anchor>
      <arglist>(const NonlinearFactorGraph &amp;graph, const Values &amp;initialValues, const LevenbergMarquardtParams &amp;params=LevenbergMarquardtParams())</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>LevenbergMarquardtOptimizer</name>
      <anchorfile>a04380.html</anchorfile>
      <anchor>aa9fd26c5fea8ba07a0a5cbe08c5f2e6f</anchor>
      <arglist>(const NonlinearFactorGraph &amp;graph, const Values &amp;initialValues, const Ordering &amp;ordering, const LevenbergMarquardtParams &amp;params=LevenbergMarquardtParams())</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~LevenbergMarquardtOptimizer</name>
      <anchorfile>a04380.html</anchorfile>
      <anchor>a173eabb76bd68cf8fb01665c64d9a649</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>lambda</name>
      <anchorfile>a04380.html</anchorfile>
      <anchor>a297f58837db566e305af2bbeb166a29a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getInnerIterations</name>
      <anchorfile>a04380.html</anchorfile>
      <anchor>afa4715456d87cc7a4aa33374f9f567c5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>a04380.html</anchorfile>
      <anchor>a899353dce14ec64bf389164011b58c72</anchor>
      <arglist>(const std::string &amp;str=&quot;&quot;) const</arglist>
    </member>
    <member kind="function">
      <type>GaussianFactorGraph::shared_ptr</type>
      <name>iterate</name>
      <anchorfile>a04380.html</anchorfile>
      <anchor>acdede5810712b3645ce2daecb874a8f9</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>const LevenbergMarquardtParams &amp;</type>
      <name>params</name>
      <anchorfile>a04380.html</anchorfile>
      <anchor>a3b8146a2452e87a600c61d9a2b195ef0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual GaussianFactorGraph::shared_ptr</type>
      <name>linearize</name>
      <anchorfile>a04380.html</anchorfile>
      <anchor>a057a2f55586c21863a382345375a13f4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>GaussianFactorGraph</type>
      <name>buildDampedSystem</name>
      <anchorfile>a04380.html</anchorfile>
      <anchor>a993dac110d6205c2566ec9c4cf22cb2c</anchor>
      <arglist>(const GaussianFactorGraph &amp;linear, const VectorValues &amp;sqrtHessianDiagonal) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>tryLambda</name>
      <anchorfile>a04380.html</anchorfile>
      <anchor>aedf9c658eb5e461dbfdee6d952970daa</anchor>
      <arglist>(const GaussianFactorGraph &amp;linear, const VectorValues &amp;sqrtHessianDiagonal)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>LevenbergMarquardtOptimizer</name>
      <anchorfile>a04380.html</anchorfile>
      <anchor>afbc0d366428f3339505587ac0848e2f3</anchor>
      <arglist>(const NonlinearFactorGraph &amp;graph, const Values &amp;initialValues, const LevenbergMarquardtParams &amp;params=LevenbergMarquardtParams())</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>LevenbergMarquardtOptimizer</name>
      <anchorfile>a04380.html</anchorfile>
      <anchor>aa9fd26c5fea8ba07a0a5cbe08c5f2e6f</anchor>
      <arglist>(const NonlinearFactorGraph &amp;graph, const Values &amp;initialValues, const Ordering &amp;ordering, const LevenbergMarquardtParams &amp;params=LevenbergMarquardtParams())</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~LevenbergMarquardtOptimizer</name>
      <anchorfile>a04380.html</anchorfile>
      <anchor>a173eabb76bd68cf8fb01665c64d9a649</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>lambda</name>
      <anchorfile>a04380.html</anchorfile>
      <anchor>a297f58837db566e305af2bbeb166a29a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getInnerIterations</name>
      <anchorfile>a04380.html</anchorfile>
      <anchor>afa4715456d87cc7a4aa33374f9f567c5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>a04380.html</anchorfile>
      <anchor>a899353dce14ec64bf389164011b58c72</anchor>
      <arglist>(const std::string &amp;str=&quot;&quot;) const</arglist>
    </member>
    <member kind="function">
      <type>GaussianFactorGraph::shared_ptr</type>
      <name>iterate</name>
      <anchorfile>a04380.html</anchorfile>
      <anchor>acdede5810712b3645ce2daecb874a8f9</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>const LevenbergMarquardtParams &amp;</type>
      <name>params</name>
      <anchorfile>a04380.html</anchorfile>
      <anchor>a3b8146a2452e87a600c61d9a2b195ef0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual GaussianFactorGraph::shared_ptr</type>
      <name>linearize</name>
      <anchorfile>a04380.html</anchorfile>
      <anchor>a057a2f55586c21863a382345375a13f4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>GaussianFactorGraph</type>
      <name>buildDampedSystem</name>
      <anchorfile>a04380.html</anchorfile>
      <anchor>a993dac110d6205c2566ec9c4cf22cb2c</anchor>
      <arglist>(const GaussianFactorGraph &amp;linear, const VectorValues &amp;sqrtHessianDiagonal) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>tryLambda</name>
      <anchorfile>a04380.html</anchorfile>
      <anchor>aedf9c658eb5e461dbfdee6d952970daa</anchor>
      <arglist>(const GaussianFactorGraph &amp;linear, const VectorValues &amp;sqrtHessianDiagonal)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>const NonlinearOptimizerParams &amp;</type>
      <name>_params</name>
      <anchorfile>a04380.html</anchorfile>
      <anchor>a4e5a89a3c51d32d018a0ecfd194d1f9d</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const LevenbergMarquardtParams</type>
      <name>params_</name>
      <anchorfile>a04380.html</anchorfile>
      <anchor>a81721702704bfbd35d14db2b1978f911</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::LevenbergMarquardtParams</name>
    <filename>a04384.html</filename>
    <base>gtsam::NonlinearOptimizerParams</base>
    <member kind="function">
      <type>boost::shared_ptr&lt; NonlinearOptimizerParams &gt;</type>
      <name>clone</name>
      <anchorfile>a04384.html</anchorfile>
      <anchor>aaf71e4bb99992c8c118659892aaeb8a2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>boost::shared_ptr&lt; NonlinearOptimizerParams &gt;</type>
      <name>clone</name>
      <anchorfile>a04384.html</anchorfile>
      <anchor>aaf71e4bb99992c8c118659892aaeb8a2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>lambdaInitial</name>
      <anchorfile>a04384.html</anchorfile>
      <anchor>a49aef82106661bcbd87299fa60209912</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>lambdaFactor</name>
      <anchorfile>a04384.html</anchorfile>
      <anchor>a0ff6f8698a3993eb6a2fe5720b5c45d6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>lambdaUpperBound</name>
      <anchorfile>a04384.html</anchorfile>
      <anchor>a465daecb791ab692aa14fe0405b64e36</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>lambdaLowerBound</name>
      <anchorfile>a04384.html</anchorfile>
      <anchor>aad53fd303fc59476683c27e942f63ae2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>VerbosityLM</type>
      <name>verbosityLM</name>
      <anchorfile>a04384.html</anchorfile>
      <anchor>afbde4b9a9a164eb9e3af824e0651686e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>minModelFidelity</name>
      <anchorfile>a04384.html</anchorfile>
      <anchor>aa6ab26143bf0ebbada2c325a88ca3348</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::string</type>
      <name>logFile</name>
      <anchorfile>a04384.html</anchorfile>
      <anchor>ae713aec0fbc945c84d7d18c966115674</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>diagonalDamping</name>
      <anchorfile>a04384.html</anchorfile>
      <anchor>ac5d85270de6828947a2d6e980a5c22a4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>useFixedLambdaFactor</name>
      <anchorfile>a04384.html</anchorfile>
      <anchor>ad003372fa93954c8f2c86fd3e413f3ae</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>minDiagonal</name>
      <anchorfile>a04384.html</anchorfile>
      <anchor>a23c5fa1bbf749c1997a7e685f0cc4d49</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>maxDiagonal</name>
      <anchorfile>a04384.html</anchorfile>
      <anchor>a4e94ad90d500f35181d23aa2461bf84d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>VerbosityLM</name>
      <anchorfile>a04384.html</anchorfile>
      <anchor>af2f0633976570cd713705bdb91598bfd</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>gtsam::lie_group_tag</name>
    <filename>a02536.html</filename>
    <base>gtsam::manifold_tag</base>
    <base>gtsam::group_tag</base>
  </compound>
  <compound kind="struct">
    <name>gtsam::internal::LieGroup</name>
    <filename>a02544.html</filename>
    <templarg>class Class</templarg>
    <base>gtsam::internal::LieGroupTraits</base>
    <base>Testable&lt; Class &gt;</base>
  </compound>
  <compound kind="struct">
    <name>gtsam::LieGroup</name>
    <filename>a02532.html</filename>
    <templarg>class Class</templarg>
    <templarg>int N</templarg>
    <member kind="function">
      <type>Class</type>
      <name>expmap</name>
      <anchorfile>a02532.html</anchorfile>
      <anchor>aee395d766c6c8afb27a9bece5c42400e</anchor>
      <arglist>(const TangentVector &amp;v) const</arglist>
    </member>
    <member kind="function">
      <type>TangentVector</type>
      <name>logmap</name>
      <anchorfile>a02532.html</anchorfile>
      <anchor>a9a8ba0a0f7442929df460d79292134aa</anchor>
      <arglist>(const Class &amp;g) const</arglist>
    </member>
    <member kind="function">
      <type>Class</type>
      <name>expmap</name>
      <anchorfile>a02532.html</anchorfile>
      <anchor>a6e41bdf1904caef72ea3f014a0ddd802</anchor>
      <arglist>(const TangentVector &amp;v, ChartJacobian H1, ChartJacobian H2=boost::none) const</arglist>
    </member>
    <member kind="function">
      <type>TangentVector</type>
      <name>logmap</name>
      <anchorfile>a02532.html</anchorfile>
      <anchor>aa23724169652cc5d3eddd61bdb5863a8</anchor>
      <arglist>(const Class &amp;g, ChartJacobian H1, ChartJacobian H2=boost::none) const</arglist>
    </member>
    <member kind="function">
      <type>Class</type>
      <name>retract</name>
      <anchorfile>a02532.html</anchorfile>
      <anchor>adf52076de7615c335b4574f577a22b77</anchor>
      <arglist>(const TangentVector &amp;v) const</arglist>
    </member>
    <member kind="function">
      <type>TangentVector</type>
      <name>localCoordinates</name>
      <anchorfile>a02532.html</anchorfile>
      <anchor>a5380bfede1eb39fa9473824009a747a7</anchor>
      <arglist>(const Class &amp;g) const</arglist>
    </member>
    <member kind="function">
      <type>Class</type>
      <name>retract</name>
      <anchorfile>a02532.html</anchorfile>
      <anchor>abf5136443b24362863f0ad7473168641</anchor>
      <arglist>(const TangentVector &amp;v, ChartJacobian H1, ChartJacobian H2=boost::none) const</arglist>
    </member>
    <member kind="function">
      <type>TangentVector</type>
      <name>localCoordinates</name>
      <anchorfile>a02532.html</anchorfile>
      <anchor>a7c6ad50bc991512d6cf712ab9b0c28c1</anchor>
      <arglist>(const Class &amp;g, ChartJacobian H1, ChartJacobian H2=boost::none) const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Class</type>
      <name>Retract</name>
      <anchorfile>a02532.html</anchorfile>
      <anchor>af0dab5bebe52a8ccebe8ea8a1dbafd21</anchor>
      <arglist>(const TangentVector &amp;v)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static TangentVector</type>
      <name>LocalCoordinates</name>
      <anchorfile>a02532.html</anchorfile>
      <anchor>aaa535efd2e685eeb1f26e828d49d7819</anchor>
      <arglist>(const Class &amp;g)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Class</type>
      <name>Retract</name>
      <anchorfile>a02532.html</anchorfile>
      <anchor>a0a33185a535749337d9fe29fc15b6876</anchor>
      <arglist>(const TangentVector &amp;v, ChartJacobian H)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static TangentVector</type>
      <name>LocalCoordinates</name>
      <anchorfile>a02532.html</anchorfile>
      <anchor>ad01a6917a30ac38fa975ee70b8442568</anchor>
      <arglist>(const Class &amp;g, ChartJacobian H)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>gtsam::internal::LieGroupTraits</name>
    <filename>a02540.html</filename>
    <templarg>class Class</templarg>
    <base>GetDimensionImpl&lt; Class, Class::dimension &gt;</base>
  </compound>
  <compound kind="class">
    <name>gtsam::Line3</name>
    <filename>a03188.html</filename>
    <member kind="function">
      <type></type>
      <name>Line3</name>
      <anchorfile>a03188.html</anchorfile>
      <anchor>a496c45a5ae638d6a7db373c1886c3de6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Line3</name>
      <anchorfile>a03188.html</anchorfile>
      <anchor>a84441b40640c2f8a861272be3ac189eb</anchor>
      <arglist>(const Rot3 &amp;R, const double a, const double b)</arglist>
    </member>
    <member kind="function">
      <type>Line3</type>
      <name>retract</name>
      <anchorfile>a03188.html</anchorfile>
      <anchor>a3fd44072d0f8391c2b8b81387f1e5c21</anchor>
      <arglist>(const Vector4 &amp;v, OptionalJacobian&lt; 4, 4 &gt; Dp=boost::none, OptionalJacobian&lt; 4, 4 &gt; Dv=boost::none) const</arglist>
    </member>
    <member kind="function">
      <type>Vector4</type>
      <name>localCoordinates</name>
      <anchorfile>a03188.html</anchorfile>
      <anchor>a228acdaddcd94f5fec9a0d87350fe575</anchor>
      <arglist>(const Line3 &amp;q, OptionalJacobian&lt; 4, 4 &gt; Dp=boost::none, OptionalJacobian&lt; 4, 4 &gt; Dq=boost::none) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>a03188.html</anchorfile>
      <anchor>a43107590da7b571648a6c97318791c4d</anchor>
      <arglist>(const std::string &amp;s=&quot;&quot;) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>equals</name>
      <anchorfile>a03188.html</anchorfile>
      <anchor>a714d4e5b74cdc0133eb58587ab56cb25</anchor>
      <arglist>(const Line3 &amp;l2, double tol=10e-9) const</arglist>
    </member>
    <member kind="function">
      <type>Unit3</type>
      <name>project</name>
      <anchorfile>a03188.html</anchorfile>
      <anchor>a00e63f458f3694269c086f69bb5425d5</anchor>
      <arglist>(OptionalJacobian&lt; 2, 4 &gt; Dline=boost::none) const</arglist>
    </member>
    <member kind="function">
      <type>Point3</type>
      <name>point</name>
      <anchorfile>a03188.html</anchorfile>
      <anchor>ab3ef9a107396ff65d222037dfd9fd32a</anchor>
      <arglist>(double distance=0) const</arglist>
    </member>
    <member kind="function">
      <type>Rot3</type>
      <name>R</name>
      <anchorfile>a03188.html</anchorfile>
      <anchor>a36f6ef46daaa96b8b916ed6a9b060476</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>a</name>
      <anchorfile>a03188.html</anchorfile>
      <anchor>afae30ed094cdc2596cb4a2afc9e9a6fe</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>b</name>
      <anchorfile>a03188.html</anchorfile>
      <anchor>ac303ffcfda71b6a5d3ce0fa8196b4ead</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="friend">
      <type>friend Line3</type>
      <name>transformTo</name>
      <anchorfile>a03188.html</anchorfile>
      <anchor>aff839f494b2f4ce6f838204bef162cda</anchor>
      <arglist>(const Pose3 &amp;wTc, const Line3 &amp;wL, OptionalJacobian&lt; 4, 6 &gt; Dpose, OptionalJacobian&lt; 4, 4 &gt; Dline)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::LinearContainerFactor</name>
    <filename>a04388.html</filename>
    <base>gtsam::NonlinearFactor</base>
    <member kind="function">
      <type></type>
      <name>LinearContainerFactor</name>
      <anchorfile>a04388.html</anchorfile>
      <anchor>a0a29b56bbe991b4e0ee8b4205b5a1b42</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>GTSAM_EXPORT</type>
      <name>LinearContainerFactor</name>
      <anchorfile>a04388.html</anchorfile>
      <anchor>a3df136440d82f7ee96f45f5a0bfe8d9a</anchor>
      <arglist>(const JacobianFactor &amp;factor, const Values &amp;linearizationPoint=Values())</arglist>
    </member>
    <member kind="function">
      <type>GTSAM_EXPORT</type>
      <name>LinearContainerFactor</name>
      <anchorfile>a04388.html</anchorfile>
      <anchor>ade7ae78a7f514eafa8f0b95b4ec8192c</anchor>
      <arglist>(const HessianFactor &amp;factor, const Values &amp;linearizationPoint=Values())</arglist>
    </member>
    <member kind="function">
      <type>GTSAM_EXPORT</type>
      <name>LinearContainerFactor</name>
      <anchorfile>a04388.html</anchorfile>
      <anchor>a3b9d025a1624a404f8ed8dff8fd03c19</anchor>
      <arglist>(const GaussianFactor::shared_ptr &amp;factor, const Values &amp;linearizationPoint=Values())</arglist>
    </member>
    <member kind="function">
      <type>GTSAM_EXPORT void</type>
      <name>print</name>
      <anchorfile>a04388.html</anchorfile>
      <anchor>a404a07f057fc915ac75eb15161043f12</anchor>
      <arglist>(const std::string &amp;s=&quot;&quot;, const KeyFormatter &amp;keyFormatter=gtsam::DefaultKeyFormatter) const override</arglist>
    </member>
    <member kind="function">
      <type>GTSAM_EXPORT bool</type>
      <name>equals</name>
      <anchorfile>a04388.html</anchorfile>
      <anchor>a83b9e2bf9ae8960b806e9138e26471cb</anchor>
      <arglist>(const NonlinearFactor &amp;f, double tol=1e-9) const override</arglist>
    </member>
    <member kind="function">
      <type>GTSAM_EXPORT double</type>
      <name>error</name>
      <anchorfile>a04388.html</anchorfile>
      <anchor>af9263484de6d6f815f418c57bfb67465</anchor>
      <arglist>(const Values &amp;c) const override</arglist>
    </member>
    <member kind="function">
      <type>GTSAM_EXPORT size_t</type>
      <name>dim</name>
      <anchorfile>a04388.html</anchorfile>
      <anchor>a2c23dfc1dbcc1646eecfd214a07e4e0e</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>const boost::optional&lt; Values &gt; &amp;</type>
      <name>linearizationPoint</name>
      <anchorfile>a04388.html</anchorfile>
      <anchor>a31c9a4fc8894239e25799f094d3aaf42</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>GTSAM_EXPORT GaussianFactor::shared_ptr</type>
      <name>linearize</name>
      <anchorfile>a04388.html</anchorfile>
      <anchor>abcfb524d85d9b36b8bfffcb0b4d5d15b</anchor>
      <arglist>(const Values &amp;c) const override</arglist>
    </member>
    <member kind="function">
      <type>GTSAM_EXPORT GaussianFactor::shared_ptr</type>
      <name>negateToGaussian</name>
      <anchorfile>a04388.html</anchorfile>
      <anchor>a7c207d0c0a1625dbe0bb8bc32a017a31</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>GTSAM_EXPORT NonlinearFactor::shared_ptr</type>
      <name>negateToNonlinear</name>
      <anchorfile>a04388.html</anchorfile>
      <anchor>aa36d3afe29adc8d20590f23e3a8df7c8</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>NonlinearFactor::shared_ptr</type>
      <name>clone</name>
      <anchorfile>a04388.html</anchorfile>
      <anchor>a07a1309a4300a8eec95febd6724abc1e</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>NonlinearFactor::shared_ptr</type>
      <name>rekey</name>
      <anchorfile>a04388.html</anchorfile>
      <anchor>a3d393813c52b8598feb1fdf54ee77c99</anchor>
      <arglist>(const std::map&lt; Key, Key &gt; &amp;rekey_mapping) const override</arglist>
    </member>
    <member kind="function">
      <type>NonlinearFactor::shared_ptr</type>
      <name>rekey</name>
      <anchorfile>a04388.html</anchorfile>
      <anchor>a6f6ca31f919023c288ef80d8cf580d60</anchor>
      <arglist>(const KeyVector &amp;new_keys) const override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasLinearizationPoint</name>
      <anchorfile>a04388.html</anchorfile>
      <anchor>a99d40c3be2d34120baf342b834fbb356</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>GTSAM_EXPORT bool</type>
      <name>isJacobian</name>
      <anchorfile>a04388.html</anchorfile>
      <anchor>a9aea6bbcd5160699b755aac5d65e4f79</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>GTSAM_EXPORT boost::shared_ptr&lt; JacobianFactor &gt;</type>
      <name>toJacobian</name>
      <anchorfile>a04388.html</anchorfile>
      <anchor>a7dd10105bea727ca5a0b846b749ba900</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>GTSAM_EXPORT boost::shared_ptr&lt; HessianFactor &gt;</type>
      <name>toHessian</name>
      <anchorfile>a04388.html</anchorfile>
      <anchor>a011841322e848555d848bf0fd0346f4b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static GTSAM_EXPORT NonlinearFactorGraph</type>
      <name>ConvertLinearGraph</name>
      <anchorfile>a04388.html</anchorfile>
      <anchor>af9fdf12a0a8775f4deed5250bdd22657</anchor>
      <arglist>(const GaussianFactorGraph &amp;linear_graph, const Values &amp;linearizationPoint=Values())</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>GTSAM_EXPORT</type>
      <name>LinearContainerFactor</name>
      <anchorfile>a04388.html</anchorfile>
      <anchor>a513eab0403b8af02730e086fbd7a2eb5</anchor>
      <arglist>(const GaussianFactor::shared_ptr &amp;factor, const boost::optional&lt; Values &gt; &amp;linearizationPoint)</arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>boost::serialization::access</name>
      <anchorfile>a04388.html</anchorfile>
      <anchor>ac98d07dd8f7b70e16ccb9a01abf56b9c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::LinearCost</name>
    <filename>a05064.html</filename>
    <base>gtsam::JacobianFactor</base>
    <member kind="function">
      <type></type>
      <name>LinearCost</name>
      <anchorfile>a05064.html</anchorfile>
      <anchor>a7f6582793cc44f94f357a26fa2c7ff77</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>LinearCost</name>
      <anchorfile>a05064.html</anchorfile>
      <anchor>abd196c0c083e3b69befd4dad31241cb8</anchor>
      <arglist>(const HessianFactor &amp;hf)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>LinearCost</name>
      <anchorfile>a05064.html</anchorfile>
      <anchor>abd74904bafc90a8f05c98bf146aa8b89</anchor>
      <arglist>(const JacobianFactor &amp;jf)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>LinearCost</name>
      <anchorfile>a05064.html</anchorfile>
      <anchor>a2f96566edf7dd337ec411582d7d53a84</anchor>
      <arglist>(Key i1, const RowVector &amp;A1)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>LinearCost</name>
      <anchorfile>a05064.html</anchorfile>
      <anchor>ad05786a7a5a62430f995ddc445c426ec</anchor>
      <arglist>(Key i1, const RowVector &amp;A1, Key i2, const RowVector &amp;A2, double b)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>LinearCost</name>
      <anchorfile>a05064.html</anchorfile>
      <anchor>a38aa6f84e94a1fe51519e5ad2a36e7e8</anchor>
      <arglist>(Key i1, const RowVector &amp;A1, Key i2, const RowVector &amp;A2, Key i3, const RowVector &amp;A3)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>LinearCost</name>
      <anchorfile>a05064.html</anchorfile>
      <anchor>ab5eff4ab861d335173f328a032d16d3d</anchor>
      <arglist>(const TERMS &amp;terms)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~LinearCost</name>
      <anchorfile>a05064.html</anchorfile>
      <anchor>a1303c25e723b349b1e90228701ccd568</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>equals</name>
      <anchorfile>a05064.html</anchorfile>
      <anchor>a31b390806745b98980d0f468e79f4582</anchor>
      <arglist>(const GaussianFactor &amp;lf, double tol=1e-9) const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>a05064.html</anchorfile>
      <anchor>a7f2ef2b39aec1f5b35bdf739d6dd0e77</anchor>
      <arglist>(const std::string &amp;s=&quot;&quot;, const KeyFormatter &amp;formatter=DefaultKeyFormatter) const override</arglist>
    </member>
    <member kind="function">
      <type>GaussianFactor::shared_ptr</type>
      <name>clone</name>
      <anchorfile>a05064.html</anchorfile>
      <anchor>ae158add6563cf24f1139102eb1c2f200</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>Vector</type>
      <name>error_vector</name>
      <anchorfile>a05064.html</anchorfile>
      <anchor>a5bcc1438786e3d909fad4b030d0d247e</anchor>
      <arglist>(const VectorValues &amp;c) const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>error</name>
      <anchorfile>a05064.html</anchorfile>
      <anchor>a8365052f731dbc3aba25facac95fc33d</anchor>
      <arglist>(const VectorValues &amp;c) const override</arglist>
    </member>
    <member kind="typedef">
      <type>LinearCost</type>
      <name>This</name>
      <anchorfile>a05064.html</anchorfile>
      <anchor>a880663d1c0a5d36d9ce71dfda5daa79f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>JacobianFactor</type>
      <name>Base</name>
      <anchorfile>a05064.html</anchorfile>
      <anchor>a448b4fe53cdcfe9653d39efc3f324a38</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; This &gt;</type>
      <name>shared_ptr</name>
      <anchorfile>a05064.html</anchorfile>
      <anchor>a36fb8e2177a1d834b6f75a800424b26e</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::LinearEquality</name>
    <filename>a05072.html</filename>
    <base>gtsam::JacobianFactor</base>
    <member kind="function">
      <type></type>
      <name>LinearEquality</name>
      <anchorfile>a05072.html</anchorfile>
      <anchor>af14d3c561504798fd4e25f8fb01032a7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>LinearEquality</name>
      <anchorfile>a05072.html</anchorfile>
      <anchor>a98ad667a15c1ef60257970dcb967ea84</anchor>
      <arglist>(const JacobianFactor &amp;jf, Key dualKey)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>LinearEquality</name>
      <anchorfile>a05072.html</anchorfile>
      <anchor>a0f585fedf9e402552b731ed7ad3dfbdc</anchor>
      <arglist>(const HessianFactor &amp;hf)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>LinearEquality</name>
      <anchorfile>a05072.html</anchorfile>
      <anchor>afb481af43d1a78c70adda882bb9d0dcc</anchor>
      <arglist>(Key i1, const Matrix &amp;A1, const Vector &amp;b, Key dualKey)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>LinearEquality</name>
      <anchorfile>a05072.html</anchorfile>
      <anchor>ad5e5e4288be87ed2ce512440dd00b84c</anchor>
      <arglist>(Key i1, const Matrix &amp;A1, Key i2, const Matrix &amp;A2, const Vector &amp;b, Key dualKey)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>LinearEquality</name>
      <anchorfile>a05072.html</anchorfile>
      <anchor>aaf4f379ca3d74bf04c21a575df6edec4</anchor>
      <arglist>(Key i1, const Matrix &amp;A1, Key i2, const Matrix &amp;A2, Key i3, const Matrix &amp;A3, const Vector &amp;b, Key dualKey)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>LinearEquality</name>
      <anchorfile>a05072.html</anchorfile>
      <anchor>a7a3051fdde76faeb85dc3a455b8a2c34</anchor>
      <arglist>(const TERMS &amp;terms, const Vector &amp;b, Key dualKey)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~LinearEquality</name>
      <anchorfile>a05072.html</anchorfile>
      <anchor>a841d653365b06471e09a0911a298b8ce</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>equals</name>
      <anchorfile>a05072.html</anchorfile>
      <anchor>a6d08ee374d0dd6f581f6cd6a3f20e886</anchor>
      <arglist>(const GaussianFactor &amp;lf, double tol=1e-9) const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>a05072.html</anchorfile>
      <anchor>a56ffdceeaba48fe5eaeb46550e56899d</anchor>
      <arglist>(const std::string &amp;s=&quot;&quot;, const KeyFormatter &amp;formatter=DefaultKeyFormatter) const override</arglist>
    </member>
    <member kind="function">
      <type>GaussianFactor::shared_ptr</type>
      <name>clone</name>
      <anchorfile>a05072.html</anchorfile>
      <anchor>a5dbcf4196a25fb291817aac3433e726e</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>Key</type>
      <name>dualKey</name>
      <anchorfile>a05072.html</anchorfile>
      <anchor>a0bddeadfb86e4525f1040d39f1e90f75</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>active</name>
      <anchorfile>a05072.html</anchorfile>
      <anchor>a4df80bba11ef8fc55572aa01583aba16</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Vector</type>
      <name>error_vector</name>
      <anchorfile>a05072.html</anchorfile>
      <anchor>a93a0228dd1a30f95d5e0a5eed073870b</anchor>
      <arglist>(const VectorValues &amp;c) const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>error</name>
      <anchorfile>a05072.html</anchorfile>
      <anchor>a6f056ec2aa1d9e9653bcda0712965625</anchor>
      <arglist>(const VectorValues &amp;c) const override</arglist>
    </member>
    <member kind="typedef">
      <type>LinearEquality</type>
      <name>This</name>
      <anchorfile>a05072.html</anchorfile>
      <anchor>aa21421cb759b6518ceeee14ebf24785c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>JacobianFactor</type>
      <name>Base</name>
      <anchorfile>a05072.html</anchorfile>
      <anchor>aebda5d7b3c18d7c10a9c4c0aa5a3f746</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; This &gt;</type>
      <name>shared_ptr</name>
      <anchorfile>a05072.html</anchorfile>
      <anchor>a7d6724ff3dafd9eddefe71eacb302a59</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::LinearInequality</name>
    <filename>a05080.html</filename>
    <base>gtsam::JacobianFactor</base>
    <member kind="function">
      <type></type>
      <name>LinearInequality</name>
      <anchorfile>a05080.html</anchorfile>
      <anchor>a318c4a6f8b83b5040b2ba8556f47447e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>LinearInequality</name>
      <anchorfile>a05080.html</anchorfile>
      <anchor>ac0336c52983b0df9715badc9131dc196</anchor>
      <arglist>(const HessianFactor &amp;hf)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>LinearInequality</name>
      <anchorfile>a05080.html</anchorfile>
      <anchor>a7b633c7b207ada226bb6f4efe233be98</anchor>
      <arglist>(const JacobianFactor &amp;jf, Key dualKey)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>LinearInequality</name>
      <anchorfile>a05080.html</anchorfile>
      <anchor>a72392e2ce1f18048deabbcede32f9035</anchor>
      <arglist>(Key i1, const RowVector &amp;A1, double b, Key dualKey)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>LinearInequality</name>
      <anchorfile>a05080.html</anchorfile>
      <anchor>ae3d0f1f6aedb2ccc246eb1f20e5716be</anchor>
      <arglist>(Key i1, const RowVector &amp;A1, Key i2, const RowVector &amp;A2, double b, Key dualKey)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>LinearInequality</name>
      <anchorfile>a05080.html</anchorfile>
      <anchor>aeadc6eaa9e67d9b825c5b785734e3a4d</anchor>
      <arglist>(Key i1, const RowVector &amp;A1, Key i2, const RowVector &amp;A2, Key i3, const RowVector &amp;A3, double b, Key dualKey)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>LinearInequality</name>
      <anchorfile>a05080.html</anchorfile>
      <anchor>a36679e8023dedce578bb5c9634a194d2</anchor>
      <arglist>(const TERMS &amp;terms, double b, Key dualKey)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~LinearInequality</name>
      <anchorfile>a05080.html</anchorfile>
      <anchor>a3cb78125dffc6c42b089346191a1454f</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>equals</name>
      <anchorfile>a05080.html</anchorfile>
      <anchor>a0787d8c6f6852a0b087f6e20cdc7e505</anchor>
      <arglist>(const GaussianFactor &amp;lf, double tol=1e-9) const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>a05080.html</anchorfile>
      <anchor>a8cd52633a57e012cf82e4ae39a7ff4d1</anchor>
      <arglist>(const std::string &amp;s=&quot;&quot;, const KeyFormatter &amp;formatter=DefaultKeyFormatter) const override</arglist>
    </member>
    <member kind="function">
      <type>GaussianFactor::shared_ptr</type>
      <name>clone</name>
      <anchorfile>a05080.html</anchorfile>
      <anchor>a3073d8c3ed521d7bf13fbc03883617b3</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>Key</type>
      <name>dualKey</name>
      <anchorfile>a05080.html</anchorfile>
      <anchor>aad12f50494ff2b1b59ae2a7d78777c00</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>active</name>
      <anchorfile>a05080.html</anchorfile>
      <anchor>ab7d88f376bf8b99b2c59117399e6c33c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>activate</name>
      <anchorfile>a05080.html</anchorfile>
      <anchor>aaf8872367199b360f35c6fd7e3b19712</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>inactivate</name>
      <anchorfile>a05080.html</anchorfile>
      <anchor>a0ea11e4b21477672ef4ab6bdc7017675</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Vector</type>
      <name>error_vector</name>
      <anchorfile>a05080.html</anchorfile>
      <anchor>ad1992c39586ff322a39064d66c252be0</anchor>
      <arglist>(const VectorValues &amp;c) const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>error</name>
      <anchorfile>a05080.html</anchorfile>
      <anchor>ab692eb63d8ef1f259738c4d9af8f6623</anchor>
      <arglist>(const VectorValues &amp;c) const override</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>dotProductRow</name>
      <anchorfile>a05080.html</anchorfile>
      <anchor>a8887d186334237c732bb137b71722fa6</anchor>
      <arglist>(const VectorValues &amp;p) const</arglist>
    </member>
    <member kind="typedef">
      <type>LinearInequality</type>
      <name>This</name>
      <anchorfile>a05080.html</anchorfile>
      <anchor>aeb0dcb2152c3266d1e17ac279bc91b02</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>JacobianFactor</type>
      <name>Base</name>
      <anchorfile>a05080.html</anchorfile>
      <anchor>a4aeacce12d9d4ba428ffd29a653543e6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; This &gt;</type>
      <name>shared_ptr</name>
      <anchorfile>a05080.html</anchorfile>
      <anchor>a6d3c692d1e6758dcab4770758023aeb1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::LinearizedGaussianFactor</name>
    <filename>a05204.html</filename>
    <base>gtsam::NonlinearFactor</base>
    <member kind="function">
      <type></type>
      <name>LinearizedGaussianFactor</name>
      <anchorfile>a05204.html</anchorfile>
      <anchor>a76f724cf12a809ffd2a0740e6bdaa08b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>LinearizedGaussianFactor</name>
      <anchorfile>a05204.html</anchorfile>
      <anchor>a1d52cd91562bcf1362ccff4fd4a01c3f</anchor>
      <arglist>(const GaussianFactor::shared_ptr &amp;gaussian, const Values &amp;lin_points)</arglist>
    </member>
    <member kind="typedef">
      <type>NonlinearFactor</type>
      <name>Base</name>
      <anchorfile>a05204.html</anchorfile>
      <anchor>a97beab87c47fe88f025dfd73b00d1a7b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; LinearizedGaussianFactor &gt;</type>
      <name>shared_ptr</name>
      <anchorfile>a05204.html</anchorfile>
      <anchor>ae0ab7941f13f7e6e9ddc9c2ba28ebe26</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Values</type>
      <name>lin_points_</name>
      <anchorfile>a05204.html</anchorfile>
      <anchor>ac6daae35e932f735a1583eab077f3826</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>boost::serialization::access</name>
      <anchorfile>a05204.html</anchorfile>
      <anchor>ac98d07dd8f7b70e16ccb9a01abf56b9c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::LinearizedHessianFactor</name>
    <filename>a05216.html</filename>
    <base>gtsam::LinearizedGaussianFactor</base>
    <member kind="function">
      <type></type>
      <name>LinearizedHessianFactor</name>
      <anchorfile>a05216.html</anchorfile>
      <anchor>a83440cd16b1e4fae3ab24e200224bea0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>LinearizedHessianFactor</name>
      <anchorfile>a05216.html</anchorfile>
      <anchor>a61d1d64e8fb85e8658702e99816a4311</anchor>
      <arglist>(const HessianFactor::shared_ptr &amp;hessian, const Values &amp;lin_points)</arglist>
    </member>
    <member kind="function">
      <type>gtsam::NonlinearFactor::shared_ptr</type>
      <name>clone</name>
      <anchorfile>a05216.html</anchorfile>
      <anchor>a547d239c9ee28e3795ff6e875426bb80</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>a05216.html</anchorfile>
      <anchor>afcb50b1438147e13334815c6e469996a</anchor>
      <arglist>(const std::string &amp;s=&quot;&quot;, const KeyFormatter &amp;keyFormatter=DefaultKeyFormatter) const override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>equals</name>
      <anchorfile>a05216.html</anchorfile>
      <anchor>af74902aed717aa648a67dc6575b029b3</anchor>
      <arglist>(const NonlinearFactor &amp;expected, double tol=1e-9) const override</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>constantTerm</name>
      <anchorfile>a05216.html</anchorfile>
      <anchor>ac0218f6b63946c4fd83a87a1f35c37b0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>constColumn</type>
      <name>linearTerm</name>
      <anchorfile>a05216.html</anchorfile>
      <anchor>a23d7637efe22a11bc124f4ab2149306d</anchor>
      <arglist>(const_iterator j) const</arglist>
    </member>
    <member kind="function">
      <type>constColumn</type>
      <name>linearTerm</name>
      <anchorfile>a05216.html</anchorfile>
      <anchor>a8c8183736bab5f3463864545f4eb6da0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Matrix</type>
      <name>squaredTerm</name>
      <anchorfile>a05216.html</anchorfile>
      <anchor>a5f703080a8235fc7c27e848a42dc3716</anchor>
      <arglist>(const_iterator j1, const_iterator j2) const</arglist>
    </member>
    <member kind="function">
      <type>Eigen::SelfAdjointView&lt; constBlock, Eigen::Upper &gt;</type>
      <name>squaredTerm</name>
      <anchorfile>a05216.html</anchorfile>
      <anchor>aa59512e262daaf9f916345e036ec2f7f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>dim</name>
      <anchorfile>a05216.html</anchorfile>
      <anchor>aa9bbd38d5acd97005274316db6f76a2b</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>error</name>
      <anchorfile>a05216.html</anchorfile>
      <anchor>a9417b6bba27e8e972028ba783bc91f18</anchor>
      <arglist>(const Values &amp;c) const override</arglist>
    </member>
    <member kind="function">
      <type>boost::shared_ptr&lt; GaussianFactor &gt;</type>
      <name>linearize</name>
      <anchorfile>a05216.html</anchorfile>
      <anchor>a68daaccc8bc525d9d2613a52e1c54384</anchor>
      <arglist>(const Values &amp;c) const override</arglist>
    </member>
    <member kind="typedef">
      <type>LinearizedGaussianFactor</type>
      <name>Base</name>
      <anchorfile>a05216.html</anchorfile>
      <anchor>a20d9a7d41e7826339c5f27d41eca81c6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; LinearizedHessianFactor &gt;</type>
      <name>shared_ptr</name>
      <anchorfile>a05216.html</anchorfile>
      <anchor>af1963d9a181a84f82d6045a6b85c7a7c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SymmetricBlockMatrix::Block</type>
      <name>Block</name>
      <anchorfile>a05216.html</anchorfile>
      <anchor>aa39f1014aa1cbfc9d9a941faa077070c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SymmetricBlockMatrix::constBlock</type>
      <name>constBlock</name>
      <anchorfile>a05216.html</anchorfile>
      <anchor>a56bf9689ab6a550ce4937ce1432a6864</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SymmetricBlockMatrix::Block::ColXpr</type>
      <name>Column</name>
      <anchorfile>a05216.html</anchorfile>
      <anchor>a38ed8e18d42f2932cbd92a2a395c42eb</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SymmetricBlockMatrix::constBlock::ColXpr</type>
      <name>constColumn</name>
      <anchorfile>a05216.html</anchorfile>
      <anchor>aaf1740804322bf9d1440f0228b27f305</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>SymmetricBlockMatrix</type>
      <name>info_</name>
      <anchorfile>a05216.html</anchorfile>
      <anchor>a4e74af7801749eb32354b4284ae7c86c</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>boost::serialization::access</name>
      <anchorfile>a05216.html</anchorfile>
      <anchor>ac98d07dd8f7b70e16ccb9a01abf56b9c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::LinearizedJacobianFactor</name>
    <filename>a05208.html</filename>
    <base>gtsam::LinearizedGaussianFactor</base>
    <member kind="function">
      <type></type>
      <name>LinearizedJacobianFactor</name>
      <anchorfile>a05208.html</anchorfile>
      <anchor>a80f529ae554bf662f4449d5295b24a02</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>LinearizedJacobianFactor</name>
      <anchorfile>a05208.html</anchorfile>
      <anchor>aa00b8e5ad6f8c51dfe1ba4d20338a653</anchor>
      <arglist>(const JacobianFactor::shared_ptr &amp;jacobian, const Values &amp;lin_points)</arglist>
    </member>
    <member kind="function">
      <type>gtsam::NonlinearFactor::shared_ptr</type>
      <name>clone</name>
      <anchorfile>a05208.html</anchorfile>
      <anchor>ad821817029d604fc70231983848889c3</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>a05208.html</anchorfile>
      <anchor>aee28f956b2cde27374b20a8cb8c45129</anchor>
      <arglist>(const std::string &amp;s=&quot;&quot;, const KeyFormatter &amp;keyFormatter=DefaultKeyFormatter) const override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>equals</name>
      <anchorfile>a05208.html</anchorfile>
      <anchor>abba9305127fa1be22b20d59adae35547</anchor>
      <arglist>(const NonlinearFactor &amp;expected, double tol=1e-9) const override</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>dim</name>
      <anchorfile>a05208.html</anchorfile>
      <anchor>a415569957d8c1421e563a187ec846283</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>error</name>
      <anchorfile>a05208.html</anchorfile>
      <anchor>a64f00b3ec4058ba6d88a84300673b40c</anchor>
      <arglist>(const Values &amp;c) const override</arglist>
    </member>
    <member kind="function">
      <type>boost::shared_ptr&lt; GaussianFactor &gt;</type>
      <name>linearize</name>
      <anchorfile>a05208.html</anchorfile>
      <anchor>a3516d2feafadc5491dbd1f5ea4177394</anchor>
      <arglist>(const Values &amp;c) const override</arglist>
    </member>
    <member kind="function">
      <type>Vector</type>
      <name>error_vector</name>
      <anchorfile>a05208.html</anchorfile>
      <anchor>af3b094b4f8fcb0a55af3ba29f9128ce6</anchor>
      <arglist>(const Values &amp;c) const</arglist>
    </member>
    <member kind="typedef">
      <type>LinearizedGaussianFactor</type>
      <name>Base</name>
      <anchorfile>a05208.html</anchorfile>
      <anchor>ad9f025e87094d40cef15ebc7d4cfec1b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; LinearizedJacobianFactor &gt;</type>
      <name>shared_ptr</name>
      <anchorfile>a05208.html</anchorfile>
      <anchor>a2c9ce0179f9d40ed11525ba899e7eaa4</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>boost::serialization::access</name>
      <anchorfile>a05208.html</anchorfile>
      <anchor>ac98d07dd8f7b70e16ccb9a01abf56b9c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::ListOfOneContainer</name>
    <filename>a02720.html</filename>
    <templarg>typename T</templarg>
  </compound>
  <compound kind="class">
    <name>gtsam::LocalOrientedPlane3Factor</name>
    <filename>a05292.html</filename>
    <base>NoiseModelFactor3&lt; Pose3, Pose3, OrientedPlane3 &gt;</base>
    <member kind="function">
      <type></type>
      <name>LocalOrientedPlane3Factor</name>
      <anchorfile>a05292.html</anchorfile>
      <anchor>acf086a59a66bc80d66fb83e1d32b18cc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>LocalOrientedPlane3Factor</name>
      <anchorfile>a05292.html</anchorfile>
      <anchor>aaf8cc9f165c07d53bc42a19e3eb4638d</anchor>
      <arglist>(const Vector4 &amp;z, const SharedGaussian &amp;noiseModel, Key poseKey, Key anchorPoseKey, Key landmarkKey)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>a05292.html</anchorfile>
      <anchor>aa4a3f8f208da8d4bd841703714056746</anchor>
      <arglist>(const std::string &amp;s=&quot;LocalOrientedPlane3Factor&quot;, const KeyFormatter &amp;keyFormatter=DefaultKeyFormatter) const override</arglist>
    </member>
    <member kind="function">
      <type>Vector</type>
      <name>evaluateError</name>
      <anchorfile>a05292.html</anchorfile>
      <anchor>aeee9d74e845cc676bd6aaf615a55d4c2</anchor>
      <arglist>(const Pose3 &amp;wTwi, const Pose3 &amp;wTwa, const OrientedPlane3 &amp;a_plane, boost::optional&lt; Matrix &amp; &gt; H1=boost::none, boost::optional&lt; Matrix &amp; &gt; H2=boost::none, boost::optional&lt; Matrix &amp; &gt; H3=boost::none) const override</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>gtsam::LP</name>
    <filename>a05088.html</filename>
    <member kind="function">
      <type>bool</type>
      <name>isFeasible</name>
      <anchorfile>a05088.html</anchorfile>
      <anchor>a80bc0818938b203b105f4d920824a8d5</anchor>
      <arglist>(const VectorValues &amp;x) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>a05088.html</anchorfile>
      <anchor>a79e21ab0c633e75fd1d2b08df998f87f</anchor>
      <arglist>(const string &amp;s=&quot;&quot;) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>equals</name>
      <anchorfile>a05088.html</anchorfile>
      <anchor>a73f5064264c1558d0fefaf866d74590c</anchor>
      <arglist>(const LP &amp;other, double tol=1e-9) const</arglist>
    </member>
    <member kind="variable">
      <type>LinearCost</type>
      <name>cost</name>
      <anchorfile>a05088.html</anchorfile>
      <anchor>a8a2b168b07db8e54b818920f388ff7ff</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>EqualityFactorGraph</type>
      <name>equalities</name>
      <anchorfile>a05088.html</anchorfile>
      <anchor>aca53e6e5db3108597f75298ab9666c50</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>InequalityFactorGraph</type>
      <name>inequalities</name>
      <anchorfile>a05088.html</anchorfile>
      <anchor>a86b8513e9c04af56e1e0e5126c7bc4f2</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::LPInitSolver</name>
    <filename>a05096.html</filename>
    <member kind="function">
      <type></type>
      <name>LPInitSolver</name>
      <anchorfile>a05096.html</anchorfile>
      <anchor>a67b90d48db4e0404c21158e716a6cba3</anchor>
      <arglist>(const LP &amp;lp)</arglist>
    </member>
    <member kind="function">
      <type>VectorValues</type>
      <name>solve</name>
      <anchorfile>a05096.html</anchorfile>
      <anchor>afe3f43d8a5c5c82e6d994ecb0b6aacad</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>gtsam::LPPolicy</name>
    <filename>a05100.html</filename>
    <member kind="function" static="yes">
      <type>static GaussianFactorGraph</type>
      <name>buildCostFunction</name>
      <anchorfile>a05100.html</anchorfile>
      <anchor>ad38a54d5c4c962b9110e5a74339cc110</anchor>
      <arglist>(const LP &amp;lp, const VectorValues &amp;xk)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr double</type>
      <name>maxAlpha</name>
      <anchorfile>a05100.html</anchorfile>
      <anchor>a43b6a6ed49b3c70474a0424dc3d9ad87</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::MagFactor</name>
    <filename>a04120.html</filename>
    <base>NoiseModelFactor1&lt; Rot2 &gt;</base>
    <member kind="function">
      <type></type>
      <name>MagFactor</name>
      <anchorfile>a04120.html</anchorfile>
      <anchor>ae9daca6c0ee19dd63e4889c6acbb13d9</anchor>
      <arglist>(Key key, const Point3 &amp;measured, double scale, const Unit3 &amp;direction, const Point3 &amp;bias, const SharedNoiseModel &amp;model)</arglist>
    </member>
    <member kind="function">
      <type>NonlinearFactor::shared_ptr</type>
      <name>clone</name>
      <anchorfile>a04120.html</anchorfile>
      <anchor>ac2f56a15b85ac3cdb6d3152bba310478</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>Vector</type>
      <name>evaluateError</name>
      <anchorfile>a04120.html</anchorfile>
      <anchor>aedf031d2d43cc4d96aceaaf601fb78ab</anchor>
      <arglist>(const Rot2 &amp;nRb, boost::optional&lt; Matrix &amp; &gt; H=boost::none) const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::MagFactor1</name>
    <filename>a04124.html</filename>
    <base>NoiseModelFactor1&lt; Rot3 &gt;</base>
    <member kind="function">
      <type></type>
      <name>MagFactor1</name>
      <anchorfile>a04124.html</anchorfile>
      <anchor>a5667d9e3964646f534760bab0b309241</anchor>
      <arglist>(Key key, const Point3 &amp;measured, double scale, const Unit3 &amp;direction, const Point3 &amp;bias, const SharedNoiseModel &amp;model)</arglist>
    </member>
    <member kind="function">
      <type>NonlinearFactor::shared_ptr</type>
      <name>clone</name>
      <anchorfile>a04124.html</anchorfile>
      <anchor>ab33c8f9faac8b893842bd7161deb7dbf</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>Vector</type>
      <name>evaluateError</name>
      <anchorfile>a04124.html</anchorfile>
      <anchor>ad9a3f71f998a680db3f6c3164d4f09f9</anchor>
      <arglist>(const Rot3 &amp;nRb, boost::optional&lt; Matrix &amp; &gt; H=boost::none) const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::MagFactor2</name>
    <filename>a04128.html</filename>
    <base>NoiseModelFactor2&lt; Point3, Point3 &gt;</base>
    <member kind="function">
      <type></type>
      <name>MagFactor2</name>
      <anchorfile>a04128.html</anchorfile>
      <anchor>a5d8d154a6e667e362d68d1250b2c5f40</anchor>
      <arglist>(Key key1, Key key2, const Point3 &amp;measured, const Rot3 &amp;nRb, const SharedNoiseModel &amp;model)</arglist>
    </member>
    <member kind="function">
      <type>NonlinearFactor::shared_ptr</type>
      <name>clone</name>
      <anchorfile>a04128.html</anchorfile>
      <anchor>a28f8be461fbacaff200cec07cbb6073b</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>Vector</type>
      <name>evaluateError</name>
      <anchorfile>a04128.html</anchorfile>
      <anchor>ab734baf406fe5b1a8c44128013909453</anchor>
      <arglist>(const Point3 &amp;nM, const Point3 &amp;bias, boost::optional&lt; Matrix &amp; &gt; H1=boost::none, boost::optional&lt; Matrix &amp; &gt; H2=boost::none) const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::MagFactor3</name>
    <filename>a04132.html</filename>
    <base>NoiseModelFactor3&lt; double, Unit3, Point3 &gt;</base>
    <member kind="function">
      <type></type>
      <name>MagFactor3</name>
      <anchorfile>a04132.html</anchorfile>
      <anchor>a796f1b1585f0c205eb6d7ced3ff40a86</anchor>
      <arglist>(Key key1, Key key2, Key key3, const Point3 &amp;measured, const Rot3 &amp;nRb, const SharedNoiseModel &amp;model)</arglist>
    </member>
    <member kind="function">
      <type>NonlinearFactor::shared_ptr</type>
      <name>clone</name>
      <anchorfile>a04132.html</anchorfile>
      <anchor>ae81baf0e93a8bc7c4fbbf712fa0e6c21</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>Vector</type>
      <name>evaluateError</name>
      <anchorfile>a04132.html</anchorfile>
      <anchor>a7236c539f2cbf67a4b13ec6e1ca30c8c</anchor>
      <arglist>(const double &amp;scale, const Unit3 &amp;direction, const Point3 &amp;bias, boost::optional&lt; Matrix &amp; &gt; H1=boost::none, boost::optional&lt; Matrix &amp; &gt; H2=boost::none, boost::optional&lt; Matrix &amp; &gt; H3=boost::none) const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::MagPoseFactor</name>
    <filename>a04136.html</filename>
    <templarg>class POSE</templarg>
    <base>NoiseModelFactor1&lt; POSE &gt;</base>
    <member kind="function">
      <type></type>
      <name>~MagPoseFactor</name>
      <anchorfile>a04136.html</anchorfile>
      <anchor>a656d17c286ec113767ef884aee0f8824</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MagPoseFactor</name>
      <anchorfile>a04136.html</anchorfile>
      <anchor>af2dcbb081485187cf5c939fb6d11971c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MagPoseFactor</name>
      <anchorfile>a04136.html</anchorfile>
      <anchor>ae8ceef5add571dd7693f07c94a53bf15</anchor>
      <arglist>(Key pose_key, const Point &amp;measured, double scale, const Point &amp;direction, const Point &amp;bias, const SharedNoiseModel &amp;model, const boost::optional&lt; POSE &gt; &amp;body_P_sensor)</arglist>
    </member>
    <member kind="function">
      <type>NonlinearFactor::shared_ptr</type>
      <name>clone</name>
      <anchorfile>a04136.html</anchorfile>
      <anchor>a92332428d020dd43443bef64b5d7d60b</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>a04136.html</anchorfile>
      <anchor>a2aca2cdd3d1977fbacd40c4795baf777</anchor>
      <arglist>(const std::string &amp;s=&quot;&quot;, const KeyFormatter &amp;keyFormatter=DefaultKeyFormatter) const override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>equals</name>
      <anchorfile>a04136.html</anchorfile>
      <anchor>a7ef0d9702290ea515cbb502ab0acdbb8</anchor>
      <arglist>(const NonlinearFactor &amp;expected, double tol=1e-9) const override</arglist>
    </member>
    <member kind="function">
      <type>Vector</type>
      <name>evaluateError</name>
      <anchorfile>a04136.html</anchorfile>
      <anchor>ae97cf77232a179037cc8076aa4c6a591</anchor>
      <arglist>(const POSE &amp;nPb, boost::optional&lt; Matrix &amp; &gt; H=boost::none) const override</arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>boost::serialization::access</name>
      <anchorfile>a04136.html</anchorfile>
      <anchor>ac98d07dd8f7b70e16ccb9a01abf56b9c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>gtsam::MakeJacobian</name>
    <filename>a02624.html</filename>
    <templarg>class T</templarg>
    <templarg>class A</templarg>
  </compound>
  <compound kind="struct">
    <name>gtsam::MakeOptionalJacobian</name>
    <filename>a02628.html</filename>
    <templarg>class T</templarg>
    <templarg>class A</templarg>
  </compound>
  <compound kind="struct">
    <name>gtsam::internal::Manifold</name>
    <filename>a02576.html</filename>
    <templarg>class Class</templarg>
    <base>gtsam::internal::ManifoldTraits</base>
    <base>Testable&lt; Class &gt;</base>
  </compound>
  <compound kind="struct">
    <name>gtsam::manifold_tag</name>
    <filename>a02556.html</filename>
  </compound>
  <compound kind="class">
    <name>gtsam::ManifoldEvaluationFactor</name>
    <filename>a02860.html</filename>
    <templarg>class BASIS</templarg>
    <templarg>typename T</templarg>
    <base>FunctorizedFactor&lt; T, ParameterMatrix&lt; traits&lt; T &gt;::dimension &gt; &gt;</base>
    <member kind="function">
      <type></type>
      <name>ManifoldEvaluationFactor</name>
      <anchorfile>a02860.html</anchorfile>
      <anchor>ad3a72c44acc22b08ddd6f0f6d6fdb27a</anchor>
      <arglist>(Key key, const T &amp;z, const SharedNoiseModel &amp;model, const size_t N, double x)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ManifoldEvaluationFactor</name>
      <anchorfile>a02860.html</anchorfile>
      <anchor>a8f01911815a4daec250e6f141dbda835</anchor>
      <arglist>(Key key, const T &amp;z, const SharedNoiseModel &amp;model, const size_t N, double x, double a, double b)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::Basis::ManifoldEvaluationFunctor</name>
    <filename>a02828.html</filename>
    <templarg>class T</templarg>
    <base>VectorEvaluationFunctor&lt; traits&lt; T &gt;::dimension &gt;</base>
    <member kind="function">
      <type></type>
      <name>ManifoldEvaluationFunctor</name>
      <anchorfile>a02828.html</anchorfile>
      <anchor>adc1dccac65323471e335c170b89c7aa1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ManifoldEvaluationFunctor</name>
      <anchorfile>a02828.html</anchorfile>
      <anchor>ae631ad8f7f6687e1bf930b7a92c13654</anchor>
      <arglist>(size_t N, double x)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ManifoldEvaluationFunctor</name>
      <anchorfile>a02828.html</anchorfile>
      <anchor>a54268f8915b3418642e44acfec95126a</anchor>
      <arglist>(size_t N, double x, double a, double b)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>apply</name>
      <anchorfile>a02828.html</anchorfile>
      <anchor>a585d3347ac4ee460c42b5c53edb12f6d</anchor>
      <arglist>(const ParameterMatrix&lt; M &gt; &amp;P, OptionalJacobian&lt; -1, -1 &gt; H=boost::none) const</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator()</name>
      <anchorfile>a02828.html</anchorfile>
      <anchor>afbc744fb80ea42e0d42a60ebd11f79ca</anchor>
      <arglist>(const ParameterMatrix&lt; M &gt; &amp;P, OptionalJacobian&lt; -1, -1 &gt; H=boost::none) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::ManifoldPreintegration</name>
    <filename>a04140.html</filename>
    <base>gtsam::PreintegrationBase</base>
    <member kind="function">
      <type></type>
      <name>ManifoldPreintegration</name>
      <anchorfile>a04140.html</anchorfile>
      <anchor>a41ee2c0894d6b99c7d537530b57b2bce</anchor>
      <arglist>(const boost::shared_ptr&lt; Params &gt; &amp;p, const imuBias::ConstantBias &amp;biasHat=imuBias::ConstantBias())</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>update</name>
      <anchorfile>a04140.html</anchorfile>
      <anchor>a5634a540fa491ed01c0a84341d91d9ff</anchor>
      <arglist>(const Vector3 &amp;measuredAcc, const Vector3 &amp;measuredOmega, const double dt, Matrix9 *A, Matrix93 *B, Matrix93 *C) override</arglist>
    </member>
    <member kind="function">
      <type>Vector9</type>
      <name>biasCorrectedDelta</name>
      <anchorfile>a04140.html</anchorfile>
      <anchor>a8df1dd0307e9f0e4f840c4e169b296e9</anchor>
      <arglist>(const imuBias::ConstantBias &amp;bias_i, OptionalJacobian&lt; 9, 6 &gt; H=boost::none) const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual boost::shared_ptr&lt; ManifoldPreintegration &gt;</type>
      <name>clone</name>
      <anchorfile>a04140.html</anchorfile>
      <anchor>afabc3a0026ff2610680675d39048a55c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ManifoldPreintegration</name>
      <anchorfile>a04140.html</anchorfile>
      <anchor>a41ee2c0894d6b99c7d537530b57b2bce</anchor>
      <arglist>(const boost::shared_ptr&lt; Params &gt; &amp;p, const imuBias::ConstantBias &amp;biasHat=imuBias::ConstantBias())</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>update</name>
      <anchorfile>a04140.html</anchorfile>
      <anchor>a5634a540fa491ed01c0a84341d91d9ff</anchor>
      <arglist>(const Vector3 &amp;measuredAcc, const Vector3 &amp;measuredOmega, const double dt, Matrix9 *A, Matrix93 *B, Matrix93 *C) override</arglist>
    </member>
    <member kind="function">
      <type>Vector9</type>
      <name>biasCorrectedDelta</name>
      <anchorfile>a04140.html</anchorfile>
      <anchor>a8df1dd0307e9f0e4f840c4e169b296e9</anchor>
      <arglist>(const imuBias::ConstantBias &amp;bias_i, OptionalJacobian&lt; 9, 6 &gt; H=boost::none) const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual boost::shared_ptr&lt; ManifoldPreintegration &gt;</type>
      <name>clone</name>
      <anchorfile>a04140.html</anchorfile>
      <anchor>afabc3a0026ff2610680675d39048a55c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>ManifoldPreintegration</name>
      <anchorfile>a04140.html</anchorfile>
      <anchor>a4ece2b4ce023308fa06561e94309ea50</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>NavState</type>
      <name>deltaXij_</name>
      <anchorfile>a04140.html</anchorfile>
      <anchor>ad07a36d86d1aa1dd13df4eb7ae83670f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Matrix3</type>
      <name>delRdelBiasOmega_</name>
      <anchorfile>a04140.html</anchorfile>
      <anchor>a6e4e68542018e0a7e4637cdd276cb1f7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Matrix3</type>
      <name>delPdelBiasAcc_</name>
      <anchorfile>a04140.html</anchorfile>
      <anchor>a966a8f392b260b54a17e7e86b14debab</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Matrix3</type>
      <name>delPdelBiasOmega_</name>
      <anchorfile>a04140.html</anchorfile>
      <anchor>af95bfbf520cf98b71cb9773d0446915a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Matrix3</type>
      <name>delVdelBiasAcc_</name>
      <anchorfile>a04140.html</anchorfile>
      <anchor>a569f26b6e3f98cf370d4143d8cecb4a5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Matrix3</type>
      <name>delVdelBiasOmega_</name>
      <anchorfile>a04140.html</anchorfile>
      <anchor>afd1ae2fb12470f49f8c8454f17f3a453</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>boost::serialization::access</name>
      <anchorfile>a04140.html</anchorfile>
      <anchor>ac98d07dd8f7b70e16ccb9a01abf56b9c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>gtsam::internal::ManifoldTraits</name>
    <filename>a02572.html</filename>
    <templarg>class Class</templarg>
    <base>GetDimensionImpl&lt; Class, Class::dimension &gt;</base>
  </compound>
  <compound kind="class">
    <name>gtsam::MarginalizeNonleafException</name>
    <filename>a04436.html</filename>
  </compound>
  <compound kind="class">
    <name>gtsam::Marginals</name>
    <filename>a04396.html</filename>
    <member kind="function">
      <type></type>
      <name>Marginals</name>
      <anchorfile>a04396.html</anchorfile>
      <anchor>a9b2936df991e163538fda5fee6801c82</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Marginals</name>
      <anchorfile>a04396.html</anchorfile>
      <anchor>a01013a1a59b793d9338c498eae0107fa</anchor>
      <arglist>(const NonlinearFactorGraph &amp;graph, const Values &amp;solution, Factorization factorization=CHOLESKY)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Marginals</name>
      <anchorfile>a04396.html</anchorfile>
      <anchor>a9d9ffd54551128922a030edd7ba7429e</anchor>
      <arglist>(const NonlinearFactorGraph &amp;graph, const Values &amp;solution, const Ordering &amp;ordering, Factorization factorization=CHOLESKY)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Marginals</name>
      <anchorfile>a04396.html</anchorfile>
      <anchor>a2fbdb20bd50fae670e3e0fef483026a5</anchor>
      <arglist>(const GaussianFactorGraph &amp;graph, const Values &amp;solution, Factorization factorization=CHOLESKY)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Marginals</name>
      <anchorfile>a04396.html</anchorfile>
      <anchor>ac4edd962c1ecd98277a8a51a5cb5f712</anchor>
      <arglist>(const GaussianFactorGraph &amp;graph, const Values &amp;solution, const Ordering &amp;ordering, Factorization factorization=CHOLESKY)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Marginals</name>
      <anchorfile>a04396.html</anchorfile>
      <anchor>ace605e9e351421289bdf3c2bee6c9015</anchor>
      <arglist>(const GaussianFactorGraph &amp;graph, const VectorValues &amp;solution, Factorization factorization=CHOLESKY)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Marginals</name>
      <anchorfile>a04396.html</anchorfile>
      <anchor>abf63e2c6a652fb8763ee04527a9a725d</anchor>
      <arglist>(const GaussianFactorGraph &amp;graph, const VectorValues &amp;solution, const Ordering &amp;ordering, Factorization factorization=CHOLESKY)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>a04396.html</anchorfile>
      <anchor>a0a83af7a860020bf30cb03748fe93ecc</anchor>
      <arglist>(const std::string &amp;str=&quot;Marginals: &quot;, const KeyFormatter &amp;keyFormatter=DefaultKeyFormatter) const</arglist>
    </member>
    <member kind="function">
      <type>GaussianFactor::shared_ptr</type>
      <name>marginalFactor</name>
      <anchorfile>a04396.html</anchorfile>
      <anchor>afb12db81c7a8b6a845df288adfa8404b</anchor>
      <arglist>(Key variable) const</arglist>
    </member>
    <member kind="function">
      <type>Matrix</type>
      <name>marginalInformation</name>
      <anchorfile>a04396.html</anchorfile>
      <anchor>ac9d5bd3265575302931f1f25d7e4e903</anchor>
      <arglist>(Key variable) const</arglist>
    </member>
    <member kind="function">
      <type>Matrix</type>
      <name>marginalCovariance</name>
      <anchorfile>a04396.html</anchorfile>
      <anchor>a326cae38c0af8c1e0e9c11b7bd10e65b</anchor>
      <arglist>(Key variable) const</arglist>
    </member>
    <member kind="function">
      <type>JointMarginal</type>
      <name>jointMarginalCovariance</name>
      <anchorfile>a04396.html</anchorfile>
      <anchor>a79299e7bb9a34e93be69d07882d95133</anchor>
      <arglist>(const KeyVector &amp;variables) const</arglist>
    </member>
    <member kind="function">
      <type>JointMarginal</type>
      <name>jointMarginalInformation</name>
      <anchorfile>a04396.html</anchorfile>
      <anchor>a18949767da9858fbcc63268b4e28c24e</anchor>
      <arglist>(const KeyVector &amp;variables) const</arglist>
    </member>
    <member kind="function">
      <type>VectorValues</type>
      <name>optimize</name>
      <anchorfile>a04396.html</anchorfile>
      <anchor>af82762c57bfcf5cd8ae6d689245f52a1</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>Factorization</name>
      <anchorfile>a04396.html</anchorfile>
      <anchor>a201eb50ae0aed6ac636e32ebb5f5d833</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>computeBayesTree</name>
      <anchorfile>a04396.html</anchorfile>
      <anchor>afcb050debc9e434c7e0af2c557e28f02</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>computeBayesTree</name>
      <anchorfile>a04396.html</anchorfile>
      <anchor>ab30d09d4a152a97662e4039a42ae710f</anchor>
      <arglist>(const Ordering &amp;ordering)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::Mechanization_bRn2</name>
    <filename>a05296.html</filename>
    <member kind="function">
      <type></type>
      <name>Mechanization_bRn2</name>
      <anchorfile>a05296.html</anchorfile>
      <anchor>ae600cdbf5e6bb7c0854eff7552d06f0a</anchor>
      <arglist>(const Rot3 &amp;initial_bRn=Rot3(), const Vector3 &amp;initial_x_g=Z_3x1, const Vector3 &amp;initial_x_a=Z_3x1)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Mechanization_bRn2</name>
      <anchorfile>a05296.html</anchorfile>
      <anchor>a067da54e2c94ac735e985ff1d2f23c9e</anchor>
      <arglist>(const Mechanization_bRn2 &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>Vector3</type>
      <name>b_g</name>
      <anchorfile>a05296.html</anchorfile>
      <anchor>ab31b64fdf01995eb3d3ffb25b9765b2d</anchor>
      <arglist>(double g_e) const</arglist>
    </member>
    <member kind="function">
      <type>Mechanization_bRn2</type>
      <name>correct</name>
      <anchorfile>a05296.html</anchorfile>
      <anchor>a4e21eb7cd1689e8a1b47d1dec5f7aa0c</anchor>
      <arglist>(const Vector9 &amp;dx) const</arglist>
    </member>
    <member kind="function">
      <type>Mechanization_bRn2</type>
      <name>integrate</name>
      <anchorfile>a05296.html</anchorfile>
      <anchor>ab01e93fa4d4885f5a899235463f54876</anchor>
      <arglist>(const Vector3 &amp;u, const double dt) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>a05296.html</anchorfile>
      <anchor>a6cbf56218ccbbc0a1da0d4a2049a9988</anchor>
      <arglist>(const std::string &amp;s=&quot;&quot;) const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Mechanization_bRn2</type>
      <name>initializeVector</name>
      <anchorfile>a05296.html</anchorfile>
      <anchor>a356446b60e10116679dfe65fc0e06bae</anchor>
      <arglist>(const std::list&lt; Vector &gt; &amp;U, const std::list&lt; Vector &gt; &amp;F, const double g_e=0, bool flat=false)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Mechanization_bRn2</type>
      <name>initialize</name>
      <anchorfile>a05296.html</anchorfile>
      <anchor>adcc8608ae50bbb183e8efc38ce1a7900</anchor>
      <arglist>(const Matrix &amp;U, const Matrix &amp;F, const double g_e=0, bool flat=false)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::MetisIndex</name>
    <filename>a03628.html</filename>
    <member kind="function">
      <type></type>
      <name>MetisIndex</name>
      <anchorfile>a03628.html</anchorfile>
      <anchor>a1969389ac1418955a2d2763fe3d49fd6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>augment</name>
      <anchorfile>a03628.html</anchorfile>
      <anchor>a6b967746dd481508a4ef054a56043df9</anchor>
      <arglist>(const FactorGraph&lt; FACTOR &gt; &amp;factors)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::MFAS</name>
    <filename>a04640.html</filename>
    <member kind="function">
      <type></type>
      <name>MFAS</name>
      <anchorfile>a04640.html</anchorfile>
      <anchor>a0fbe57d306aa53ff9f9ef6b4dd5f4ca2</anchor>
      <arglist>(const std::map&lt; KeyPair, double &gt; &amp;edgeWeights)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MFAS</name>
      <anchorfile>a04640.html</anchorfile>
      <anchor>ab67e60b4b7da2c9d2dd82a0e6b6e6e15</anchor>
      <arglist>(const TranslationEdges &amp;relativeTranslations, const Unit3 &amp;projectionDirection)</arglist>
    </member>
    <member kind="function">
      <type>KeyVector</type>
      <name>computeOrdering</name>
      <anchorfile>a04640.html</anchorfile>
      <anchor>a8decdf4c77d7835bd322183cb4a6c565</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::map&lt; KeyPair, double &gt;</type>
      <name>computeOutlierWeights</name>
      <anchorfile>a04640.html</anchorfile>
      <anchor>a978f4d86b334dbcaedeb1e1646b764da</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>gtsam::multiplicative_group_tag</name>
    <filename>a02504.html</filename>
  </compound>
  <compound kind="struct">
    <name>gtsam::MultiplyWithInverse</name>
    <filename>a02600.html</filename>
    <templarg>int N</templarg>
    <member kind="function">
      <type>VectorN</type>
      <name>operator()</name>
      <anchorfile>a02600.html</anchorfile>
      <anchor>a45be31afb639bbb371651691d57818fe</anchor>
      <arglist>(const MatrixN &amp;A, const VectorN &amp;b, OptionalJacobian&lt; N, N *N &gt; H1=boost::none, OptionalJacobian&lt; N, N &gt; H2=boost::none) const</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>gtsam::MultiplyWithInverseFunction</name>
    <filename>a02604.html</filename>
    <templarg>typename T</templarg>
    <templarg>int N</templarg>
    <member kind="function">
      <type></type>
      <name>MultiplyWithInverseFunction</name>
      <anchorfile>a02604.html</anchorfile>
      <anchor>af22fec3bfb7858ad0eb9bfe19bf1329e</anchor>
      <arglist>(const Operator &amp;phi)</arglist>
    </member>
    <member kind="function">
      <type>VectorN</type>
      <name>operator()</name>
      <anchorfile>a02604.html</anchorfile>
      <anchor>a8d632e9f7d98ecdcfb72a67ecfb4f103</anchor>
      <arglist>(const T &amp;a, const VectorN &amp;b, OptionalJacobian&lt; N, M &gt; H1=boost::none, OptionalJacobian&lt; N, N &gt; H2=boost::none) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::MultiProjectionFactor</name>
    <filename>a05300.html</filename>
    <templarg>class POSE</templarg>
    <templarg>class LANDMARK</templarg>
    <templarg>class CALIBRATION</templarg>
    <base>gtsam::NoiseModelFactor</base>
    <member kind="function">
      <type></type>
      <name>MultiProjectionFactor</name>
      <anchorfile>a05300.html</anchorfile>
      <anchor>a3bc577127465810c9e1f9701a48ea9a6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MultiProjectionFactor</name>
      <anchorfile>a05300.html</anchorfile>
      <anchor>a7fc8d7c97680b073749a232998d10aae</anchor>
      <arglist>(const Vector &amp;measured, const SharedNoiseModel &amp;model, KeySet poseKeys, Key pointKey, const boost::shared_ptr&lt; CALIBRATION &gt; &amp;K, boost::optional&lt; POSE &gt; body_P_sensor=boost::none)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MultiProjectionFactor</name>
      <anchorfile>a05300.html</anchorfile>
      <anchor>a34e49a07ea3fda26a104d2ad56c4bac3</anchor>
      <arglist>(const Vector &amp;measured, const SharedNoiseModel &amp;model, KeySet poseKeys, Key pointKey, const boost::shared_ptr&lt; CALIBRATION &gt; &amp;K, bool throwCheirality, bool verboseCheirality, boost::optional&lt; POSE &gt; body_P_sensor=boost::none)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~MultiProjectionFactor</name>
      <anchorfile>a05300.html</anchorfile>
      <anchor>a56b2e19a1c1e839278c80b327d9ff824</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>NonlinearFactor::shared_ptr</type>
      <name>clone</name>
      <anchorfile>a05300.html</anchorfile>
      <anchor>a1331c52865a4a2149409f4507bab7aa2</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>a05300.html</anchorfile>
      <anchor>a5d7e15903e59db91d0b4c308259cf3d9</anchor>
      <arglist>(const std::string &amp;s=&quot;&quot;, const KeyFormatter &amp;keyFormatter=DefaultKeyFormatter) const override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>equals</name>
      <anchorfile>a05300.html</anchorfile>
      <anchor>ab13663091d51c8e392ca5fdf5023267e</anchor>
      <arglist>(const NonlinearFactor &amp;p, double tol=1e-9) const override</arglist>
    </member>
    <member kind="function">
      <type>Vector</type>
      <name>unwhitenedError</name>
      <anchorfile>a05300.html</anchorfile>
      <anchor>a124dad2a422da11160850c3ec915a632</anchor>
      <arglist>(const Values &amp;x, boost::optional&lt; std::vector&lt; Matrix &gt; &amp; &gt; H=boost::none) const override</arglist>
    </member>
    <member kind="function">
      <type>const Vector &amp;</type>
      <name>measured</name>
      <anchorfile>a05300.html</anchorfile>
      <anchor>acb7d7adc05aafeb5b2535142ae39ace7</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const boost::shared_ptr&lt; CALIBRATION &gt;</type>
      <name>calibration</name>
      <anchorfile>a05300.html</anchorfile>
      <anchor>ad712208c6759314c484282f5f625bf00</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>verboseCheirality</name>
      <anchorfile>a05300.html</anchorfile>
      <anchor>ac0925c77fef8c616e6b9f526be629cdd</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>throwCheirality</name>
      <anchorfile>a05300.html</anchorfile>
      <anchor>a2b6c0646f1aa240251c6b37533629791</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="typedef">
      <type>NoiseModelFactor</type>
      <name>Base</name>
      <anchorfile>a05300.html</anchorfile>
      <anchor>a96a41b9891d16b6ce5f0bf80f505dd62</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>MultiProjectionFactor&lt; POSE, LANDMARK, CALIBRATION &gt;</type>
      <name>This</name>
      <anchorfile>a05300.html</anchorfile>
      <anchor>a2fd84aa829efcd0bcc1784ae62fc7f7a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; This &gt;</type>
      <name>shared_ptr</name>
      <anchorfile>a05300.html</anchorfile>
      <anchor>af5e79fe4c75bebb47cb7a742c2e2db8b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Vector</type>
      <name>measured_</name>
      <anchorfile>a05300.html</anchorfile>
      <anchor>aee577459b2f629f11adba5f97d834f98</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>boost::shared_ptr&lt; CALIBRATION &gt;</type>
      <name>K_</name>
      <anchorfile>a05300.html</anchorfile>
      <anchor>aa6ee9db44e0b3cf847f4985809eb8be0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>boost::optional&lt; POSE &gt;</type>
      <name>body_P_sensor_</name>
      <anchorfile>a05300.html</anchorfile>
      <anchor>a1cf9b7f12e7b5c4a18cdf0821ea39c3a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>throwCheirality_</name>
      <anchorfile>a05300.html</anchorfile>
      <anchor>a84554cb8d86304fb490899163288e78e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>verboseCheirality_</name>
      <anchorfile>a05300.html</anchorfile>
      <anchor>ab84a4cb5f008ffebbe4c38a01abfea12</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>boost::serialization::access</name>
      <anchorfile>a05300.html</anchorfile>
      <anchor>ac98d07dd8f7b70e16ccb9a01abf56b9c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::NavState</name>
    <filename>a04144.html</filename>
    <member kind="friend">
      <type>friend class</type>
      <name>boost::serialization::access</name>
      <anchorfile>a04144.html</anchorfile>
      <anchor>ac98d07dd8f7b70e16ccb9a01abf56b9c</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>GTSAM_EXPORT friend std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a04144.html</anchorfile>
      <anchor>a9e64e944a2e62fd6f7bf9c6ff2d2d268</anchor>
      <arglist>(std::ostream &amp;os, const NavState &amp;state)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>a04144.html</anchorfile>
      <anchor>a96e05e58d5a866fb5adb3733398bc865</anchor>
      <arglist>(const std::string &amp;s=&quot;&quot;) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>equals</name>
      <anchorfile>a04144.html</anchorfile>
      <anchor>a2f4d89924b733b8e38b48a63c35cae06</anchor>
      <arglist>(const NavState &amp;other, double tol=1e-8) const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>NavState</name>
      <anchorfile>a04144.html</anchorfile>
      <anchor>a071b7ef082393fab89cf6d80d19c0cd3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>NavState</name>
      <anchorfile>a04144.html</anchorfile>
      <anchor>a54a1a1b9c7946d32ae2aae70edff9d24</anchor>
      <arglist>(const Rot3 &amp;R, const Point3 &amp;t, const Velocity3 &amp;v)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>NavState</name>
      <anchorfile>a04144.html</anchorfile>
      <anchor>a6b70be99390c6bcd2acf6e4af81c79f6</anchor>
      <arglist>(const Pose3 &amp;pose, const Velocity3 &amp;v)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>NavState</name>
      <anchorfile>a04144.html</anchorfile>
      <anchor>a34f54d76bde9c673cd9c408adee824b2</anchor>
      <arglist>(const Matrix3 &amp;R, const Vector6 &amp;tv)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static NavState</type>
      <name>Create</name>
      <anchorfile>a04144.html</anchorfile>
      <anchor>a427fdcd1b121d4664b0cbed24ff91f30</anchor>
      <arglist>(const Rot3 &amp;R, const Point3 &amp;t, const Velocity3 &amp;v, OptionalJacobian&lt; 9, 3 &gt; H1, OptionalJacobian&lt; 9, 3 &gt; H2, OptionalJacobian&lt; 9, 3 &gt; H3)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static NavState</type>
      <name>FromPoseVelocity</name>
      <anchorfile>a04144.html</anchorfile>
      <anchor>af646c47e90caa49c8f87c39eeb83bb1e</anchor>
      <arglist>(const Pose3 &amp;pose, const Vector3 &amp;vel, OptionalJacobian&lt; 9, 6 &gt; H1, OptionalJacobian&lt; 9, 3 &gt; H2)</arglist>
    </member>
    <member kind="function">
      <type>Matrix3</type>
      <name>R</name>
      <anchorfile>a04144.html</anchorfile>
      <anchor>a5d380bc53c23a5ace7cf9536a9c7e171</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Quaternion</type>
      <name>quaternion</name>
      <anchorfile>a04144.html</anchorfile>
      <anchor>aa0bdee90f949dc61e8e9ce0c631b0809</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Vector3</type>
      <name>t</name>
      <anchorfile>a04144.html</anchorfile>
      <anchor>a70316c7d1f14ac7576af31da54da6065</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Vector3 &amp;</type>
      <name>v</name>
      <anchorfile>a04144.html</anchorfile>
      <anchor>a6e9145448b44826ede5c9efee843673c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Matrix7</type>
      <name>matrix</name>
      <anchorfile>a04144.html</anchorfile>
      <anchor>ac1d0d44a05b2f1f301cc0de223e9236d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>NavState</type>
      <name>retract</name>
      <anchorfile>a04144.html</anchorfile>
      <anchor>aa7b09432d17b90e204a7a70705033c35</anchor>
      <arglist>(const Vector9 &amp;v, OptionalJacobian&lt; 9, 9 &gt; H1=boost::none, OptionalJacobian&lt; 9, 9 &gt; H2=boost::none) const</arglist>
    </member>
    <member kind="function">
      <type>Vector9</type>
      <name>localCoordinates</name>
      <anchorfile>a04144.html</anchorfile>
      <anchor>a171cf3f73c659cce019a08f0945d4c7a</anchor>
      <arglist>(const NavState &amp;g, OptionalJacobian&lt; 9, 9 &gt; H1=boost::none, OptionalJacobian&lt; 9, 9 &gt; H2=boost::none) const</arglist>
    </member>
    <member kind="function">
      <type>NavState</type>
      <name>update</name>
      <anchorfile>a04144.html</anchorfile>
      <anchor>a5494db1f41c8a61acc2d63c32b9adc31</anchor>
      <arglist>(const Vector3 &amp;b_acceleration, const Vector3 &amp;b_omega, const double dt, OptionalJacobian&lt; 9, 9 &gt; F, OptionalJacobian&lt; 9, 3 &gt; G1, OptionalJacobian&lt; 9, 3 &gt; G2) const</arglist>
    </member>
    <member kind="function">
      <type>Vector9</type>
      <name>coriolis</name>
      <anchorfile>a04144.html</anchorfile>
      <anchor>ac5bb08fc702c2efb6e07b22ccce6f0c8</anchor>
      <arglist>(double dt, const Vector3 &amp;omega, bool secondOrder=false, OptionalJacobian&lt; 9, 9 &gt; H=boost::none) const</arglist>
    </member>
    <member kind="function">
      <type>Vector9</type>
      <name>correctPIM</name>
      <anchorfile>a04144.html</anchorfile>
      <anchor>acc621f24a423d613ceaad961429d4ce6</anchor>
      <arglist>(const Vector9 &amp;pim, double dt, const Vector3 &amp;n_gravity, const boost::optional&lt; Vector3 &gt; &amp;omegaCoriolis, bool use2ndOrderCoriolis=false, OptionalJacobian&lt; 9, 9 &gt; H1=boost::none, OptionalJacobian&lt; 9, 9 &gt; H2=boost::none) const</arglist>
    </member>
    <member kind="function">
      <type>Matrix3</type>
      <name>R</name>
      <anchorfile>a04144.html</anchorfile>
      <anchor>a5d380bc53c23a5ace7cf9536a9c7e171</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Quaternion</type>
      <name>quaternion</name>
      <anchorfile>a04144.html</anchorfile>
      <anchor>aa0bdee90f949dc61e8e9ce0c631b0809</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Vector3</type>
      <name>t</name>
      <anchorfile>a04144.html</anchorfile>
      <anchor>a70316c7d1f14ac7576af31da54da6065</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Vector3 &amp;</type>
      <name>v</name>
      <anchorfile>a04144.html</anchorfile>
      <anchor>a6e9145448b44826ede5c9efee843673c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Matrix7</type>
      <name>matrix</name>
      <anchorfile>a04144.html</anchorfile>
      <anchor>ac1d0d44a05b2f1f301cc0de223e9236d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>NavState</type>
      <name>update</name>
      <anchorfile>a04144.html</anchorfile>
      <anchor>a5494db1f41c8a61acc2d63c32b9adc31</anchor>
      <arglist>(const Vector3 &amp;b_acceleration, const Vector3 &amp;b_omega, const double dt, OptionalJacobian&lt; 9, 9 &gt; F, OptionalJacobian&lt; 9, 3 &gt; G1, OptionalJacobian&lt; 9, 3 &gt; G2) const</arglist>
    </member>
    <member kind="function">
      <type>Vector9</type>
      <name>coriolis</name>
      <anchorfile>a04144.html</anchorfile>
      <anchor>ac5bb08fc702c2efb6e07b22ccce6f0c8</anchor>
      <arglist>(double dt, const Vector3 &amp;omega, bool secondOrder=false, OptionalJacobian&lt; 9, 9 &gt; H=boost::none) const</arglist>
    </member>
    <member kind="function">
      <type>Vector9</type>
      <name>correctPIM</name>
      <anchorfile>a04144.html</anchorfile>
      <anchor>acc621f24a423d613ceaad961429d4ce6</anchor>
      <arglist>(const Vector9 &amp;pim, double dt, const Vector3 &amp;n_gravity, const boost::optional&lt; Vector3 &gt; &amp;omegaCoriolis, bool use2ndOrderCoriolis=false, OptionalJacobian&lt; 9, 9 &gt; H1=boost::none, OptionalJacobian&lt; 9, 9 &gt; H2=boost::none) const</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>gtsam::needs_eigen_aligned_allocator</name>
    <filename>a02728.html</filename>
    <templarg>typename</templarg>
    <templarg>typename</templarg>
  </compound>
  <compound kind="struct">
    <name>gtsam::needs_eigen_aligned_allocator&lt; T, void_t&lt; typename T::_eigen_aligned_allocator_trait &gt; &gt;</name>
    <filename>a02732.html</filename>
    <templarg>typename T</templarg>
  </compound>
  <compound kind="class">
    <name>gtsam::DecisionTree::Node</name>
    <filename>a02928.html</filename>
  </compound>
  <compound kind="struct">
    <name>gtsam::EliminationTree::Node</name>
    <filename>a03540.html</filename>
    <member kind="variable">
      <type>Key</type>
      <name>key</name>
      <anchorfile>a03540.html</anchorfile>
      <anchor>a725807c0f6a2b62cea3626dec4d12d24</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Factors</type>
      <name>factors</name>
      <anchorfile>a03540.html</anchorfile>
      <anchor>ae4ed45ec77035fd0c0cc91696276ea8f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Children</type>
      <name>children</name>
      <anchorfile>a03540.html</anchorfile>
      <anchor>ad6730594a7070d7cc565e0bdfcc4d699</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::NoiseModelFactor</name>
    <filename>a04448.html</filename>
    <base>gtsam::NonlinearFactor</base>
    <member kind="function">
      <type></type>
      <name>NoiseModelFactor</name>
      <anchorfile>a04448.html</anchorfile>
      <anchor>ad6e8ef3348e042d598617d1d55f20300</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~NoiseModelFactor</name>
      <anchorfile>a04448.html</anchorfile>
      <anchor>a276c60c37e44b34eadf59b4b67d4a5c9</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>NoiseModelFactor</name>
      <anchorfile>a04448.html</anchorfile>
      <anchor>a02cea97db30d27b51feaf1f0444d743c</anchor>
      <arglist>(const SharedNoiseModel &amp;noiseModel, const CONTAINER &amp;keys)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>a04448.html</anchorfile>
      <anchor>ab45b9c35a90eca2777f32dab550d1569</anchor>
      <arglist>(const std::string &amp;s=&quot;&quot;, const KeyFormatter &amp;keyFormatter=DefaultKeyFormatter) const override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>equals</name>
      <anchorfile>a04448.html</anchorfile>
      <anchor>a0cb99e64e817f707a5bd5ed2e951af2e</anchor>
      <arglist>(const NonlinearFactor &amp;f, double tol=1e-9) const override</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>dim</name>
      <anchorfile>a04448.html</anchorfile>
      <anchor>a7f892150e927e38368fe55971f001a5e</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>const SharedNoiseModel &amp;</type>
      <name>noiseModel</name>
      <anchorfile>a04448.html</anchorfile>
      <anchor>ae995e64bbd0660091eb6b40cba60aef7</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual Vector</type>
      <name>unwhitenedError</name>
      <anchorfile>a04448.html</anchorfile>
      <anchor>afd61874915a8076bf83f9d8311fc0e26</anchor>
      <arglist>(const Values &amp;x, boost::optional&lt; std::vector&lt; Matrix &gt; &amp; &gt; H=boost::none) const =0</arglist>
    </member>
    <member kind="function">
      <type>Vector</type>
      <name>whitenedError</name>
      <anchorfile>a04448.html</anchorfile>
      <anchor>addfc2a7b595961339be70ab10d51759a</anchor>
      <arglist>(const Values &amp;c) const</arglist>
    </member>
    <member kind="function">
      <type>Vector</type>
      <name>unweightedWhitenedError</name>
      <anchorfile>a04448.html</anchorfile>
      <anchor>a4b741e8f05633ffed9c1cd7b1fe916f5</anchor>
      <arglist>(const Values &amp;c) const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>weight</name>
      <anchorfile>a04448.html</anchorfile>
      <anchor>a1eb5c519b51b97bbf46ad49c7750efdc</anchor>
      <arglist>(const Values &amp;c) const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>error</name>
      <anchorfile>a04448.html</anchorfile>
      <anchor>a2ed0cb2886177c0b26e56cf2e2d75904</anchor>
      <arglist>(const Values &amp;c) const override</arglist>
    </member>
    <member kind="function">
      <type>boost::shared_ptr&lt; GaussianFactor &gt;</type>
      <name>linearize</name>
      <anchorfile>a04448.html</anchorfile>
      <anchor>a89eecad518dc06d0dc16c438954d5f5b</anchor>
      <arglist>(const Values &amp;x) const override</arglist>
    </member>
    <member kind="function">
      <type>shared_ptr</type>
      <name>cloneWithNewNoiseModel</name>
      <anchorfile>a04448.html</anchorfile>
      <anchor>a56977f62e96af92fea528f3f2bfd2f63</anchor>
      <arglist>(const SharedNoiseModel newNoise) const</arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; This &gt;</type>
      <name>shared_ptr</name>
      <anchorfile>a04448.html</anchorfile>
      <anchor>a762f6984cfd67b1e83cc530d71093dcf</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>NoiseModelFactor</name>
      <anchorfile>a04448.html</anchorfile>
      <anchor>a4605224417029e9dc58c5267efa9a46d</anchor>
      <arglist>(const SharedNoiseModel &amp;noiseModel)</arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>boost::serialization::access</name>
      <anchorfile>a04448.html</anchorfile>
      <anchor>ac98d07dd8f7b70e16ccb9a01abf56b9c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::NoiseModelFactor1</name>
    <filename>a04452.html</filename>
    <templarg>class VALUE</templarg>
    <base>gtsam::NoiseModelFactor</base>
    <member kind="function">
      <type></type>
      <name>NoiseModelFactor1</name>
      <anchorfile>a04452.html</anchorfile>
      <anchor>a85c649f81b216f5b5d7e321febc7762c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>NoiseModelFactor1</name>
      <anchorfile>a04452.html</anchorfile>
      <anchor>a70a0b32dd5feba3631815614d8386c86</anchor>
      <arglist>(const SharedNoiseModel &amp;noiseModel, Key key1)</arglist>
    </member>
    <member kind="function">
      <type>Vector</type>
      <name>unwhitenedError</name>
      <anchorfile>a04452.html</anchorfile>
      <anchor>acc4b063d7885ad782b7fdf9a84b01875</anchor>
      <arglist>(const Values &amp;x, boost::optional&lt; std::vector&lt; Matrix &gt; &amp; &gt; H=boost::none) const override</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual Vector</type>
      <name>evaluateError</name>
      <anchorfile>a04452.html</anchorfile>
      <anchor>a42ed690bfeafe79ab396126886b05820</anchor>
      <arglist>(const X &amp;x, boost::optional&lt; Matrix &amp; &gt; H=boost::none) const =0</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>NoiseModelFactor1</name>
      <anchorfile>a04452.html</anchorfile>
      <anchor>a85c649f81b216f5b5d7e321febc7762c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>NoiseModelFactor1</name>
      <anchorfile>a04452.html</anchorfile>
      <anchor>a70a0b32dd5feba3631815614d8386c86</anchor>
      <arglist>(const SharedNoiseModel &amp;noiseModel, Key key1)</arglist>
    </member>
    <member kind="function">
      <type>Vector</type>
      <name>unwhitenedError</name>
      <anchorfile>a04452.html</anchorfile>
      <anchor>acc4b063d7885ad782b7fdf9a84b01875</anchor>
      <arglist>(const Values &amp;x, boost::optional&lt; std::vector&lt; Matrix &gt; &amp; &gt; H=boost::none) const override</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual Vector</type>
      <name>evaluateError</name>
      <anchorfile>a04452.html</anchorfile>
      <anchor>a42ed690bfeafe79ab396126886b05820</anchor>
      <arglist>(const X &amp;x, boost::optional&lt; Matrix &amp; &gt; H=boost::none) const =0</arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>boost::serialization::access</name>
      <anchorfile>a04452.html</anchorfile>
      <anchor>ac98d07dd8f7b70e16ccb9a01abf56b9c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::NoiseModelFactor2</name>
    <filename>a04456.html</filename>
    <templarg>class VALUE1</templarg>
    <templarg>class VALUE2</templarg>
    <base>gtsam::NoiseModelFactor</base>
    <member kind="function">
      <type></type>
      <name>NoiseModelFactor2</name>
      <anchorfile>a04456.html</anchorfile>
      <anchor>a04f5873776c784cafd55b4ac05b4b757</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>NoiseModelFactor2</name>
      <anchorfile>a04456.html</anchorfile>
      <anchor>a35453b054509f5679a29a06b59340cf1</anchor>
      <arglist>(const SharedNoiseModel &amp;noiseModel, Key j1, Key j2)</arglist>
    </member>
    <member kind="function">
      <type>Key</type>
      <name>key1</name>
      <anchorfile>a04456.html</anchorfile>
      <anchor>a6fb96c2753a88e1e214b450cfda19e21</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Vector</type>
      <name>unwhitenedError</name>
      <anchorfile>a04456.html</anchorfile>
      <anchor>ab75406b27ededf3d03e3b79fd617e625</anchor>
      <arglist>(const Values &amp;x, boost::optional&lt; std::vector&lt; Matrix &gt; &amp; &gt; H=boost::none) const override</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual Vector</type>
      <name>evaluateError</name>
      <anchorfile>a04456.html</anchorfile>
      <anchor>a9aa6dcd7db6734479e2212213b021ec1</anchor>
      <arglist>(const X1 &amp;, const X2 &amp;, boost::optional&lt; Matrix &amp; &gt; H1=boost::none, boost::optional&lt; Matrix &amp; &gt; H2=boost::none) const =0</arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>boost::serialization::access</name>
      <anchorfile>a04456.html</anchorfile>
      <anchor>ac98d07dd8f7b70e16ccb9a01abf56b9c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::NoiseModelFactor3</name>
    <filename>a04460.html</filename>
    <templarg>class VALUE1</templarg>
    <templarg>class VALUE2</templarg>
    <templarg>class VALUE3</templarg>
    <base>gtsam::NoiseModelFactor</base>
    <member kind="function">
      <type></type>
      <name>NoiseModelFactor3</name>
      <anchorfile>a04460.html</anchorfile>
      <anchor>a0bf4383cea2cdb0d263e570e98499ac7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>NoiseModelFactor3</name>
      <anchorfile>a04460.html</anchorfile>
      <anchor>ac2a8e8247e7d55768915fac27a4c078c</anchor>
      <arglist>(const SharedNoiseModel &amp;noiseModel, Key j1, Key j2, Key j3)</arglist>
    </member>
    <member kind="function">
      <type>Key</type>
      <name>key1</name>
      <anchorfile>a04460.html</anchorfile>
      <anchor>aaf8b02ae3b5cb2afb24c78620ca80537</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Vector</type>
      <name>unwhitenedError</name>
      <anchorfile>a04460.html</anchorfile>
      <anchor>acc5835589efbdd3da762a7ffd800f271</anchor>
      <arglist>(const Values &amp;x, boost::optional&lt; std::vector&lt; Matrix &gt; &amp; &gt; H=boost::none) const override</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual Vector</type>
      <name>evaluateError</name>
      <anchorfile>a04460.html</anchorfile>
      <anchor>a78613881d348f96be1a158b9bb812950</anchor>
      <arglist>(const X1 &amp;, const X2 &amp;, const X3 &amp;, boost::optional&lt; Matrix &amp; &gt; H1=boost::none, boost::optional&lt; Matrix &amp; &gt; H2=boost::none, boost::optional&lt; Matrix &amp; &gt; H3=boost::none) const =0</arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>boost::serialization::access</name>
      <anchorfile>a04460.html</anchorfile>
      <anchor>ac98d07dd8f7b70e16ccb9a01abf56b9c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::NoiseModelFactor4</name>
    <filename>a04464.html</filename>
    <templarg>class VALUE1</templarg>
    <templarg>class VALUE2</templarg>
    <templarg>class VALUE3</templarg>
    <templarg>class VALUE4</templarg>
    <base>gtsam::NoiseModelFactor</base>
    <member kind="function">
      <type></type>
      <name>NoiseModelFactor4</name>
      <anchorfile>a04464.html</anchorfile>
      <anchor>a65adc8d1272df63390168b26f4f7bc70</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>NoiseModelFactor4</name>
      <anchorfile>a04464.html</anchorfile>
      <anchor>a8ce3daa05897e12db9e38a9c96043ce3</anchor>
      <arglist>(const SharedNoiseModel &amp;noiseModel, Key j1, Key j2, Key j3, Key j4)</arglist>
    </member>
    <member kind="function">
      <type>Key</type>
      <name>key1</name>
      <anchorfile>a04464.html</anchorfile>
      <anchor>afef69655d7981909b9f331f52c1e5378</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Vector</type>
      <name>unwhitenedError</name>
      <anchorfile>a04464.html</anchorfile>
      <anchor>a6ec477a1617cd86185605fa8a2338f99</anchor>
      <arglist>(const Values &amp;x, boost::optional&lt; std::vector&lt; Matrix &gt; &amp; &gt; H=boost::none) const override</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual Vector</type>
      <name>evaluateError</name>
      <anchorfile>a04464.html</anchorfile>
      <anchor>a5e4197ee6a113e77d2abc1dbbebb0857</anchor>
      <arglist>(const X1 &amp;, const X2 &amp;, const X3 &amp;, const X4 &amp;, boost::optional&lt; Matrix &amp; &gt; H1=boost::none, boost::optional&lt; Matrix &amp; &gt; H2=boost::none, boost::optional&lt; Matrix &amp; &gt; H3=boost::none, boost::optional&lt; Matrix &amp; &gt; H4=boost::none) const =0</arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>boost::serialization::access</name>
      <anchorfile>a04464.html</anchorfile>
      <anchor>ac98d07dd8f7b70e16ccb9a01abf56b9c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::NoiseModelFactor5</name>
    <filename>a04468.html</filename>
    <templarg>class VALUE1</templarg>
    <templarg>class VALUE2</templarg>
    <templarg>class VALUE3</templarg>
    <templarg>class VALUE4</templarg>
    <templarg>class VALUE5</templarg>
    <base>gtsam::NoiseModelFactor</base>
    <member kind="function">
      <type></type>
      <name>NoiseModelFactor5</name>
      <anchorfile>a04468.html</anchorfile>
      <anchor>a424c4633f6c1907d0dd3381cffbed82a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>NoiseModelFactor5</name>
      <anchorfile>a04468.html</anchorfile>
      <anchor>a01d2e8a5253a67ceac02320a719c5280</anchor>
      <arglist>(const SharedNoiseModel &amp;noiseModel, Key j1, Key j2, Key j3, Key j4, Key j5)</arglist>
    </member>
    <member kind="function">
      <type>Key</type>
      <name>key1</name>
      <anchorfile>a04468.html</anchorfile>
      <anchor>a6bad01a6ef7ceaa2a710450cd53db3e1</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Vector</type>
      <name>unwhitenedError</name>
      <anchorfile>a04468.html</anchorfile>
      <anchor>a8a883403ec8f3c860a97ba2e1f976816</anchor>
      <arglist>(const Values &amp;x, boost::optional&lt; std::vector&lt; Matrix &gt; &amp; &gt; H=boost::none) const override</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual Vector</type>
      <name>evaluateError</name>
      <anchorfile>a04468.html</anchorfile>
      <anchor>af0adaca3d551e42404aaf98c3053b009</anchor>
      <arglist>(const X1 &amp;, const X2 &amp;, const X3 &amp;, const X4 &amp;, const X5 &amp;, boost::optional&lt; Matrix &amp; &gt; H1=boost::none, boost::optional&lt; Matrix &amp; &gt; H2=boost::none, boost::optional&lt; Matrix &amp; &gt; H3=boost::none, boost::optional&lt; Matrix &amp; &gt; H4=boost::none, boost::optional&lt; Matrix &amp; &gt; H5=boost::none) const =0</arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>boost::serialization::access</name>
      <anchorfile>a04468.html</anchorfile>
      <anchor>ac98d07dd8f7b70e16ccb9a01abf56b9c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::NoiseModelFactor6</name>
    <filename>a04472.html</filename>
    <templarg>class VALUE1</templarg>
    <templarg>class VALUE2</templarg>
    <templarg>class VALUE3</templarg>
    <templarg>class VALUE4</templarg>
    <templarg>class VALUE5</templarg>
    <templarg>class VALUE6</templarg>
    <base>gtsam::NoiseModelFactor</base>
    <member kind="function">
      <type></type>
      <name>NoiseModelFactor6</name>
      <anchorfile>a04472.html</anchorfile>
      <anchor>a15bcca054e397e486fb9dda0d0436cdb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>NoiseModelFactor6</name>
      <anchorfile>a04472.html</anchorfile>
      <anchor>ad3d89a85f0c70d7a424f2060d514cab9</anchor>
      <arglist>(const SharedNoiseModel &amp;noiseModel, Key j1, Key j2, Key j3, Key j4, Key j5, Key j6)</arglist>
    </member>
    <member kind="function">
      <type>Key</type>
      <name>key1</name>
      <anchorfile>a04472.html</anchorfile>
      <anchor>ad54ff6215db19c9cd972705b26a9da0d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Vector</type>
      <name>unwhitenedError</name>
      <anchorfile>a04472.html</anchorfile>
      <anchor>a1c11127a18b2ad1301bdc1f898640a2b</anchor>
      <arglist>(const Values &amp;x, boost::optional&lt; std::vector&lt; Matrix &gt; &amp; &gt; H=boost::none) const override</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual Vector</type>
      <name>evaluateError</name>
      <anchorfile>a04472.html</anchorfile>
      <anchor>a896a223b88b621bfe9f45bf8e2cd9960</anchor>
      <arglist>(const X1 &amp;, const X2 &amp;, const X3 &amp;, const X4 &amp;, const X5 &amp;, const X6 &amp;, boost::optional&lt; Matrix &amp; &gt; H1=boost::none, boost::optional&lt; Matrix &amp; &gt; H2=boost::none, boost::optional&lt; Matrix &amp; &gt; H3=boost::none, boost::optional&lt; Matrix &amp; &gt; H4=boost::none, boost::optional&lt; Matrix &amp; &gt; H5=boost::none, boost::optional&lt; Matrix &amp; &gt; H6=boost::none) const =0</arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>boost::serialization::access</name>
      <anchorfile>a04472.html</anchorfile>
      <anchor>ac98d07dd8f7b70e16ccb9a01abf56b9c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::NoMatchFoundForFixed</name>
    <filename>a04588.html</filename>
  </compound>
  <compound kind="struct">
    <name>gtsam::NonlinearClusterTree::NonlinearCluster</name>
    <filename>a05228.html</filename>
  </compound>
  <compound kind="class">
    <name>gtsam::NonlinearClusterTree</name>
    <filename>a05224.html</filename>
    <base>ClusterTree&lt; NonlinearFactorGraph &gt;</base>
    <class kind="struct">gtsam::NonlinearClusterTree::NonlinearCluster</class>
  </compound>
  <compound kind="class">
    <name>gtsam::NonlinearConjugateGradientOptimizer</name>
    <filename>a04404.html</filename>
    <base>gtsam::NonlinearOptimizer</base>
    <member kind="function">
      <type></type>
      <name>NonlinearConjugateGradientOptimizer</name>
      <anchorfile>a04404.html</anchorfile>
      <anchor>afdd9a2c13cf10cd09e1631de75c04c70</anchor>
      <arglist>(const NonlinearFactorGraph &amp;graph, const Values &amp;initialValues, const Parameters &amp;params=Parameters())</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~NonlinearConjugateGradientOptimizer</name>
      <anchorfile>a04404.html</anchorfile>
      <anchor>ab6b66f719378f19f3476473736bed1d2</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>GaussianFactorGraph::shared_ptr</type>
      <name>iterate</name>
      <anchorfile>a04404.html</anchorfile>
      <anchor>af3c7e05ebc6e57faf4b4754da4349131</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>const Values &amp;</type>
      <name>optimize</name>
      <anchorfile>a04404.html</anchorfile>
      <anchor>ac2c578988b04c1027ec8a8ce57c4adce</anchor>
      <arglist>() override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::NonlinearEquality</name>
    <filename>a04412.html</filename>
    <templarg>class VALUE</templarg>
    <base>gtsam::NoiseModelFactor1</base>
    <member kind="function">
      <type></type>
      <name>NonlinearEquality</name>
      <anchorfile>a04412.html</anchorfile>
      <anchor>ad4c12b4ca31c51cdc77d2ed5c1249d6a</anchor>
      <arglist>(Key j, const T &amp;feasible, const CompareFunction &amp;_compare=std::bind(traits&lt; T &gt;::Equals, std::placeholders::_1, std::placeholders::_2, 1e-9))</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>NonlinearEquality</name>
      <anchorfile>a04412.html</anchorfile>
      <anchor>aa6506dd1416b9762ce601e8fc5d2f13e</anchor>
      <arglist>(Key j, const T &amp;feasible, double error_gain, const CompareFunction &amp;_compare=std::bind(traits&lt; T &gt;::Equals, std::placeholders::_1, std::placeholders::_2, 1e-9))</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>a04412.html</anchorfile>
      <anchor>a14c6572f5e2f6ba8535ed93b0388cffe</anchor>
      <arglist>(const std::string &amp;s=&quot;&quot;, const KeyFormatter &amp;keyFormatter=DefaultKeyFormatter) const override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>equals</name>
      <anchorfile>a04412.html</anchorfile>
      <anchor>a9782a6fb43f9f2790cf582d8f3b69822</anchor>
      <arglist>(const NonlinearFactor &amp;f, double tol=1e-9) const override</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>error</name>
      <anchorfile>a04412.html</anchorfile>
      <anchor>a0d5bbfdec96f7e30dff7564170d4457c</anchor>
      <arglist>(const Values &amp;c) const override</arglist>
    </member>
    <member kind="function">
      <type>Vector</type>
      <name>evaluateError</name>
      <anchorfile>a04412.html</anchorfile>
      <anchor>ab9f2723503c90a35c3ccf854b0d02868</anchor>
      <arglist>(const T &amp;xj, boost::optional&lt; Matrix &amp; &gt; H=boost::none) const override</arglist>
    </member>
    <member kind="function">
      <type>GaussianFactor::shared_ptr</type>
      <name>linearize</name>
      <anchorfile>a04412.html</anchorfile>
      <anchor>aed0ace6a161e3eb7c13ec754af2fc5e2</anchor>
      <arglist>(const Values &amp;x) const override</arglist>
    </member>
    <member kind="function">
      <type>gtsam::NonlinearFactor::shared_ptr</type>
      <name>clone</name>
      <anchorfile>a04412.html</anchorfile>
      <anchor>aab572ab30a7cfe0eb19f2e34a88d68f3</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>NonlinearEquality</name>
      <anchorfile>a04412.html</anchorfile>
      <anchor>a925972afca1aa82cf9efc736ef7a21d4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="typedef">
      <type>std::function&lt; bool(const T &amp;, const T &amp;)&gt;</type>
      <name>CompareFunction</name>
      <anchorfile>a04412.html</anchorfile>
      <anchor>a76dde3ce9e92a24ad589de414b201418</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>boost::serialization::access</name>
      <anchorfile>a04412.html</anchorfile>
      <anchor>ac98d07dd8f7b70e16ccb9a01abf56b9c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::NonlinearEquality1</name>
    <filename>a04420.html</filename>
    <templarg>class VALUE</templarg>
    <base>gtsam::NoiseModelFactor1</base>
    <member kind="function">
      <type></type>
      <name>NonlinearEquality1</name>
      <anchorfile>a04420.html</anchorfile>
      <anchor>a86774b96d825d51f4946a54341dcef18</anchor>
      <arglist>(const X &amp;value, Key key, double mu=1000.0)</arglist>
    </member>
    <member kind="function">
      <type>gtsam::NonlinearFactor::shared_ptr</type>
      <name>clone</name>
      <anchorfile>a04420.html</anchorfile>
      <anchor>a6df933bfe67aaa3c48da0179580fc06b</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>Vector</type>
      <name>evaluateError</name>
      <anchorfile>a04420.html</anchorfile>
      <anchor>a24e249f727d84108c5ca3af95f7f4fd3</anchor>
      <arglist>(const X &amp;x1, boost::optional&lt; Matrix &amp; &gt; H=boost::none) const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>a04420.html</anchorfile>
      <anchor>aae94462adcb31337aa0b67d94126a45a</anchor>
      <arglist>(const std::string &amp;s=&quot;&quot;, const KeyFormatter &amp;keyFormatter=DefaultKeyFormatter) const override</arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; NonlinearEquality1&lt; VALUE &gt; &gt;</type>
      <name>shared_ptr</name>
      <anchorfile>a04420.html</anchorfile>
      <anchor>a852d310c682c6e720a50dae759002fd1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>NonlinearEquality1</name>
      <anchorfile>a04420.html</anchorfile>
      <anchor>aa331a1cacd4c4c69f2d8386d3f8cd327</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>boost::serialization::access</name>
      <anchorfile>a04420.html</anchorfile>
      <anchor>ac98d07dd8f7b70e16ccb9a01abf56b9c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::NonlinearEquality2</name>
    <filename>a04428.html</filename>
    <templarg>class T</templarg>
    <base>NoiseModelFactor2&lt; T, T &gt;</base>
    <member kind="function">
      <type></type>
      <name>NonlinearEquality2</name>
      <anchorfile>a04428.html</anchorfile>
      <anchor>a712bbf54a226defd53f67679ad7f16fe</anchor>
      <arglist>(Key key1, Key key2, double mu=1e4)</arglist>
    </member>
    <member kind="function">
      <type>gtsam::NonlinearFactor::shared_ptr</type>
      <name>clone</name>
      <anchorfile>a04428.html</anchorfile>
      <anchor>a0f3aca0fcd5a4c6621a77965e06b219e</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>Vector</type>
      <name>evaluateError</name>
      <anchorfile>a04428.html</anchorfile>
      <anchor>a1d4e632e8fd8d32b0a170f10587aa644</anchor>
      <arglist>(const T &amp;x1, const T &amp;x2, boost::optional&lt; Matrix &amp; &gt; H1=boost::none, boost::optional&lt; Matrix &amp; &gt; H2=boost::none) const override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>NonlinearEquality2</name>
      <anchorfile>a04428.html</anchorfile>
      <anchor>ad9f7e774a73917e34dcd0ed7f7df32b0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>boost::serialization::access</name>
      <anchorfile>a04428.html</anchorfile>
      <anchor>ac98d07dd8f7b70e16ccb9a01abf56b9c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::NonlinearFactor</name>
    <filename>a04440.html</filename>
    <base>gtsam::Factor</base>
    <member kind="function">
      <type></type>
      <name>NonlinearFactor</name>
      <anchorfile>a04440.html</anchorfile>
      <anchor>a7c719ae67f222f66569ccb3b526cb9cb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>NonlinearFactor</name>
      <anchorfile>a04440.html</anchorfile>
      <anchor>a8a7610dba7e9a6f878268c2769ea0e04</anchor>
      <arglist>(const CONTAINER &amp;keys)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>a04440.html</anchorfile>
      <anchor>ad04d5a910e3ded8e97b0d1c487c09e9a</anchor>
      <arglist>(const std::string &amp;s=&quot;&quot;, const KeyFormatter &amp;keyFormatter=DefaultKeyFormatter) const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>equals</name>
      <anchorfile>a04440.html</anchorfile>
      <anchor>a7cdbb5d11658740a4e8a30f35ba0bc26</anchor>
      <arglist>(const NonlinearFactor &amp;f, double tol=1e-9) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~NonlinearFactor</name>
      <anchorfile>a04440.html</anchorfile>
      <anchor>ac457810c504de58732d51d61f715c2de</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual double</type>
      <name>error</name>
      <anchorfile>a04440.html</anchorfile>
      <anchor>a8e67e58ff0e4f9d58f07e5eb227adc52</anchor>
      <arglist>(const Values &amp;c) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual size_t</type>
      <name>dim</name>
      <anchorfile>a04440.html</anchorfile>
      <anchor>a5f0fcf1c93ded207d4a31e8ede07d797</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>active</name>
      <anchorfile>a04440.html</anchorfile>
      <anchor>a84901748b435ae9b39908abf57d5620c</anchor>
      <arglist>(const Values &amp;) const</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual boost::shared_ptr&lt; GaussianFactor &gt;</type>
      <name>linearize</name>
      <anchorfile>a04440.html</anchorfile>
      <anchor>a1381d89840dd9f0ce41a45899d6ab8ac</anchor>
      <arglist>(const Values &amp;c) const =0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual shared_ptr</type>
      <name>clone</name>
      <anchorfile>a04440.html</anchorfile>
      <anchor>a9b1f311731e3344c33c376aa0f5f729c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual shared_ptr</type>
      <name>rekey</name>
      <anchorfile>a04440.html</anchorfile>
      <anchor>a21da54d0d30ad57c20bcef145f2f099b</anchor>
      <arglist>(const std::map&lt; Key, Key &gt; &amp;rekey_mapping) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual shared_ptr</type>
      <name>rekey</name>
      <anchorfile>a04440.html</anchorfile>
      <anchor>ae8e5c42aa9eec2aa66d141f014040e01</anchor>
      <arglist>(const KeyVector &amp;new_keys) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>sendable</name>
      <anchorfile>a04440.html</anchorfile>
      <anchor>a9959dc6860b3e2624498ccbd457e290b</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::NonlinearFactorGraph</name>
    <filename>a04480.html</filename>
    <base>FactorGraph&lt; NonlinearFactor &gt;</base>
    <member kind="function">
      <type></type>
      <name>NonlinearFactorGraph</name>
      <anchorfile>a04480.html</anchorfile>
      <anchor>a08a2bceb4013a4ffe20c27f76aae7a96</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>NonlinearFactorGraph</name>
      <anchorfile>a04480.html</anchorfile>
      <anchor>ab1ca065994632164fe3986388d847604</anchor>
      <arglist>(ITERATOR firstFactor, ITERATOR lastFactor)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>NonlinearFactorGraph</name>
      <anchorfile>a04480.html</anchorfile>
      <anchor>a955686c166a967d8fc4884d65cd4ce56</anchor>
      <arglist>(const CONTAINER &amp;factors)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>NonlinearFactorGraph</name>
      <anchorfile>a04480.html</anchorfile>
      <anchor>acd147df7d707f0486daf2b9936b08d71</anchor>
      <arglist>(const FactorGraph&lt; DERIVEDFACTOR &gt; &amp;graph)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~NonlinearFactorGraph</name>
      <anchorfile>a04480.html</anchorfile>
      <anchor>ad7adfd40c18b07133807873a62f32dc2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>a04480.html</anchorfile>
      <anchor>a1ced15cb85285ad5d07081ab6b37692a</anchor>
      <arglist>(const std::string &amp;str=&quot;NonlinearFactorGraph: &quot;, const KeyFormatter &amp;keyFormatter=DefaultKeyFormatter) const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>printErrors</name>
      <anchorfile>a04480.html</anchorfile>
      <anchor>a3ae72d3df18cc9182672b92ecdf65590</anchor>
      <arglist>(const Values &amp;values, const std::string &amp;str=&quot;NonlinearFactorGraph: &quot;, const KeyFormatter &amp;keyFormatter=DefaultKeyFormatter, const std::function&lt; bool(const Factor *, double, size_t)&gt; &amp;printCondition=[](const Factor *, double, size_t) {return true;}) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>equals</name>
      <anchorfile>a04480.html</anchorfile>
      <anchor>a9d4aee2ca25c603b26c600041e337505</anchor>
      <arglist>(const NonlinearFactorGraph &amp;other, double tol=1e-9) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>saveGraph</name>
      <anchorfile>a04480.html</anchorfile>
      <anchor>a6d45c7c50ce30af0c9ab4b6158ff1c58</anchor>
      <arglist>(std::ostream &amp;stm, const Values &amp;values=Values(), const GraphvizFormatting &amp;graphvizFormatting=GraphvizFormatting(), const KeyFormatter &amp;keyFormatter=DefaultKeyFormatter) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>saveGraph</name>
      <anchorfile>a04480.html</anchorfile>
      <anchor>a40c34fb460ab15095c13d304b593c32a</anchor>
      <arglist>(const std::string &amp;file, const Values &amp;values=Values(), const GraphvizFormatting &amp;graphvizFormatting=GraphvizFormatting(), const KeyFormatter &amp;keyFormatter=DefaultKeyFormatter) const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>error</name>
      <anchorfile>a04480.html</anchorfile>
      <anchor>ab7eff95b1c24699da4fd8f31080afb84</anchor>
      <arglist>(const Values &amp;values) const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>probPrime</name>
      <anchorfile>a04480.html</anchorfile>
      <anchor>ae69c68a86780b2a4d96cec127678dad4</anchor>
      <arglist>(const Values &amp;values) const</arglist>
    </member>
    <member kind="function">
      <type>boost::shared_ptr&lt; SymbolicFactorGraph &gt;</type>
      <name>symbolic</name>
      <anchorfile>a04480.html</anchorfile>
      <anchor>a77c8ab235e4bfe0dbe15122b201ef7d0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Ordering</type>
      <name>orderingCOLAMD</name>
      <anchorfile>a04480.html</anchorfile>
      <anchor>af1fbc30c54273417321df1d313022fa7</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Ordering</type>
      <name>orderingCOLAMDConstrained</name>
      <anchorfile>a04480.html</anchorfile>
      <anchor>aa8ba0c68e6ff1853aa548e1338f1890f</anchor>
      <arglist>(const FastMap&lt; Key, int &gt; &amp;constraints) const</arglist>
    </member>
    <member kind="function">
      <type>boost::shared_ptr&lt; GaussianFactorGraph &gt;</type>
      <name>linearize</name>
      <anchorfile>a04480.html</anchorfile>
      <anchor>ad864a2d53fea332c7ae042dda1bb3453</anchor>
      <arglist>(const Values &amp;linearizationPoint) const</arglist>
    </member>
    <member kind="function">
      <type>boost::shared_ptr&lt; HessianFactor &gt;</type>
      <name>linearizeToHessianFactor</name>
      <anchorfile>a04480.html</anchorfile>
      <anchor>ad914c4c62bdec8cc7b352494e1fddccf</anchor>
      <arglist>(const Values &amp;values, const Dampen &amp;dampen=nullptr) const</arglist>
    </member>
    <member kind="function">
      <type>boost::shared_ptr&lt; HessianFactor &gt;</type>
      <name>linearizeToHessianFactor</name>
      <anchorfile>a04480.html</anchorfile>
      <anchor>a898de41920d19bfc58283de460c082fe</anchor>
      <arglist>(const Values &amp;values, const Ordering &amp;ordering, const Dampen &amp;dampen=nullptr) const</arglist>
    </member>
    <member kind="function">
      <type>Values</type>
      <name>updateCholesky</name>
      <anchorfile>a04480.html</anchorfile>
      <anchor>aa1e5d8dcc8fec429b9c25a432046df7a</anchor>
      <arglist>(const Values &amp;values, const Dampen &amp;dampen=nullptr) const</arglist>
    </member>
    <member kind="function">
      <type>Values</type>
      <name>updateCholesky</name>
      <anchorfile>a04480.html</anchorfile>
      <anchor>a6139283b6b57d73c99c89bd7e02ee262</anchor>
      <arglist>(const Values &amp;values, const Ordering &amp;ordering, const Dampen &amp;dampen=nullptr) const</arglist>
    </member>
    <member kind="function">
      <type>NonlinearFactorGraph</type>
      <name>clone</name>
      <anchorfile>a04480.html</anchorfile>
      <anchor>a6475c83606a3e177d15037abfc531e77</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>NonlinearFactorGraph</type>
      <name>rekey</name>
      <anchorfile>a04480.html</anchorfile>
      <anchor>a5ef04effe8cd7b6461cb6bf58edabf45</anchor>
      <arglist>(const std::map&lt; Key, Key &gt; &amp;rekey_mapping) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addExpressionFactor</name>
      <anchorfile>a04480.html</anchorfile>
      <anchor>aa4fc387db1c9ef83536769a0fdc9bdaf</anchor>
      <arglist>(const SharedNoiseModel &amp;R, const T &amp;z, const Expression&lt; T &gt; &amp;h)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addPrior</name>
      <anchorfile>a04480.html</anchorfile>
      <anchor>a23ea9d159257906e354b32509916fe5c</anchor>
      <arglist>(Key key, const T &amp;prior, const SharedNoiseModel &amp;model=nullptr)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addPrior</name>
      <anchorfile>a04480.html</anchorfile>
      <anchor>aa525b486067782de0442e63489da4c0f</anchor>
      <arglist>(Key key, const T &amp;prior, const Matrix &amp;covariance)</arglist>
    </member>
    <member kind="typedef">
      <type>std::function&lt; void(const boost::shared_ptr&lt; HessianFactor &gt; &amp;hessianFactor)&gt;</type>
      <name>Dampen</name>
      <anchorfile>a04480.html</anchorfile>
      <anchor>abb04d87a8f860dad18c1898a0f3da21d</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>boost::serialization::access</name>
      <anchorfile>a04480.html</anchorfile>
      <anchor>ac98d07dd8f7b70e16ccb9a01abf56b9c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::NonlinearISAM</name>
    <filename>a04488.html</filename>
    <member kind="function">
      <type></type>
      <name>NonlinearISAM</name>
      <anchorfile>a04488.html</anchorfile>
      <anchor>acce79d0a1cb22a2874f3b15c3a2bf0bc</anchor>
      <arglist>(int reorderInterval=1, const GaussianFactorGraph::Eliminate &amp;eliminationFunction=GaussianFactorGraph::EliminationTraitsType::DefaultEliminate)</arglist>
    </member>
    <member kind="function">
      <type>Values</type>
      <name>estimate</name>
      <anchorfile>a04488.html</anchorfile>
      <anchor>a3999448ba8a3ef4f032ae64c746b3598</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Matrix</type>
      <name>marginalCovariance</name>
      <anchorfile>a04488.html</anchorfile>
      <anchor>ab338ebc6fba1762d28d4907cbe95277d</anchor>
      <arglist>(Key key) const</arglist>
    </member>
    <member kind="function">
      <type>const GaussianISAM &amp;</type>
      <name>bayesTree</name>
      <anchorfile>a04488.html</anchorfile>
      <anchor>a76efdc9eccb062477ffd6cb29544d94c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Values &amp;</type>
      <name>getLinearizationPoint</name>
      <anchorfile>a04488.html</anchorfile>
      <anchor>aff98e8571b6ed8f1ac9002834b36c470</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const NonlinearFactorGraph &amp;</type>
      <name>getFactorsUnsafe</name>
      <anchorfile>a04488.html</anchorfile>
      <anchor>adaf180df5658f7977a3418f896af5e28</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>reorderInterval</name>
      <anchorfile>a04488.html</anchorfile>
      <anchor>a97c87450a87bff7fe29484ae254b938a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>reorderCounter</name>
      <anchorfile>a04488.html</anchorfile>
      <anchor>ad091cf1a8c2890cd041fb7f525ba8b7e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>a04488.html</anchorfile>
      <anchor>ac851a75e1cb16194629a9abab6c922c8</anchor>
      <arglist>(const std::string &amp;s=&quot;&quot;, const KeyFormatter &amp;keyFormatter=DefaultKeyFormatter) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>printStats</name>
      <anchorfile>a04488.html</anchorfile>
      <anchor>a5b2530a38683fd75be0a9ee8efd61caf</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>saveGraph</name>
      <anchorfile>a04488.html</anchorfile>
      <anchor>ad124da4c030e1139612ecb0f0d142685</anchor>
      <arglist>(const std::string &amp;s, const KeyFormatter &amp;keyFormatter=DefaultKeyFormatter) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>update</name>
      <anchorfile>a04488.html</anchorfile>
      <anchor>a11c6752e75625cd1532a5a6503c4d7cd</anchor>
      <arglist>(const NonlinearFactorGraph &amp;newFactors, const Values &amp;initialValues)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reorder_relinearize</name>
      <anchorfile>a04488.html</anchorfile>
      <anchor>a8098f317cbc91772e3988ae70d775b9c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>NonlinearISAM</name>
      <anchorfile>a04488.html</anchorfile>
      <anchor>acce79d0a1cb22a2874f3b15c3a2bf0bc</anchor>
      <arglist>(int reorderInterval=1, const GaussianFactorGraph::Eliminate &amp;eliminationFunction=GaussianFactorGraph::EliminationTraitsType::DefaultEliminate)</arglist>
    </member>
    <member kind="function">
      <type>Values</type>
      <name>estimate</name>
      <anchorfile>a04488.html</anchorfile>
      <anchor>a3999448ba8a3ef4f032ae64c746b3598</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Matrix</type>
      <name>marginalCovariance</name>
      <anchorfile>a04488.html</anchorfile>
      <anchor>ab338ebc6fba1762d28d4907cbe95277d</anchor>
      <arglist>(Key key) const</arglist>
    </member>
    <member kind="function">
      <type>const GaussianISAM &amp;</type>
      <name>bayesTree</name>
      <anchorfile>a04488.html</anchorfile>
      <anchor>a76efdc9eccb062477ffd6cb29544d94c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Values &amp;</type>
      <name>getLinearizationPoint</name>
      <anchorfile>a04488.html</anchorfile>
      <anchor>aff98e8571b6ed8f1ac9002834b36c470</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const NonlinearFactorGraph &amp;</type>
      <name>getFactorsUnsafe</name>
      <anchorfile>a04488.html</anchorfile>
      <anchor>adaf180df5658f7977a3418f896af5e28</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>reorderInterval</name>
      <anchorfile>a04488.html</anchorfile>
      <anchor>a97c87450a87bff7fe29484ae254b938a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>reorderCounter</name>
      <anchorfile>a04488.html</anchorfile>
      <anchor>ad091cf1a8c2890cd041fb7f525ba8b7e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>a04488.html</anchorfile>
      <anchor>ac851a75e1cb16194629a9abab6c922c8</anchor>
      <arglist>(const std::string &amp;s=&quot;&quot;, const KeyFormatter &amp;keyFormatter=DefaultKeyFormatter) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>printStats</name>
      <anchorfile>a04488.html</anchorfile>
      <anchor>a5b2530a38683fd75be0a9ee8efd61caf</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>saveGraph</name>
      <anchorfile>a04488.html</anchorfile>
      <anchor>ad124da4c030e1139612ecb0f0d142685</anchor>
      <arglist>(const std::string &amp;s, const KeyFormatter &amp;keyFormatter=DefaultKeyFormatter) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>update</name>
      <anchorfile>a04488.html</anchorfile>
      <anchor>a11c6752e75625cd1532a5a6503c4d7cd</anchor>
      <arglist>(const NonlinearFactorGraph &amp;newFactors, const Values &amp;initialValues)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reorder_relinearize</name>
      <anchorfile>a04488.html</anchorfile>
      <anchor>a8098f317cbc91772e3988ae70d775b9c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>gtsam::GaussianISAM</type>
      <name>isam_</name>
      <anchorfile>a04488.html</anchorfile>
      <anchor>afd3d7d897197b0a60a8e25dc68c588fd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Values</type>
      <name>linPoint_</name>
      <anchorfile>a04488.html</anchorfile>
      <anchor>aed05de793f4fde627a4c234bbc38a8f2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>NonlinearFactorGraph</type>
      <name>factors_</name>
      <anchorfile>a04488.html</anchorfile>
      <anchor>a3abd8344c16dc519209aec578a9f56df</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>reorderInterval_</name>
      <anchorfile>a04488.html</anchorfile>
      <anchor>ae53203f6b84dc0f29f9fb52afdc49fd9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>GaussianFactorGraph::Eliminate</type>
      <name>eliminationFunction_</name>
      <anchorfile>a04488.html</anchorfile>
      <anchor>a177189467b87cc41c92f03e3d73b283e</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::NonlinearOptimizer</name>
    <filename>a04492.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual const Values &amp;</type>
      <name>optimize</name>
      <anchorfile>a04492.html</anchorfile>
      <anchor>a823730cdeb1c0b0c5c1fef2e1ac546d7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const Values &amp;</type>
      <name>optimizeSafely</name>
      <anchorfile>a04492.html</anchorfile>
      <anchor>a3f5f50cd14a0b2862b886f8eb9ffaeeb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>error</name>
      <anchorfile>a04492.html</anchorfile>
      <anchor>aae495c988fe69aec8ff0f4b4eba83bde</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>iterations</name>
      <anchorfile>a04492.html</anchorfile>
      <anchor>ad87eeae75b136c470a59df02ce3414aa</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Values &amp;</type>
      <name>values</name>
      <anchorfile>a04492.html</anchorfile>
      <anchor>ac7240fdeae0ca240e20e74ae593eb32c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const NonlinearFactorGraph &amp;</type>
      <name>graph</name>
      <anchorfile>a04492.html</anchorfile>
      <anchor>a2ffd892baed9b62d31ce39a9243f3c78</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~NonlinearOptimizer</name>
      <anchorfile>a04492.html</anchorfile>
      <anchor>ab852c8574086cacb316c579bcf19f294</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual VectorValues</type>
      <name>solve</name>
      <anchorfile>a04492.html</anchorfile>
      <anchor>a541e8b6b63d4bce95e56cf043416e10f</anchor>
      <arglist>(const GaussianFactorGraph &amp;gfg, const NonlinearOptimizerParams &amp;params) const</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual GaussianFactorGraph::shared_ptr</type>
      <name>iterate</name>
      <anchorfile>a04492.html</anchorfile>
      <anchor>ab238f0a58ca49edd63ad552baf852599</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Values &amp;</type>
      <name>optimize</name>
      <anchorfile>a04492.html</anchorfile>
      <anchor>a823730cdeb1c0b0c5c1fef2e1ac546d7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const Values &amp;</type>
      <name>optimizeSafely</name>
      <anchorfile>a04492.html</anchorfile>
      <anchor>a3f5f50cd14a0b2862b886f8eb9ffaeeb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>error</name>
      <anchorfile>a04492.html</anchorfile>
      <anchor>aae495c988fe69aec8ff0f4b4eba83bde</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>iterations</name>
      <anchorfile>a04492.html</anchorfile>
      <anchor>ad87eeae75b136c470a59df02ce3414aa</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Values &amp;</type>
      <name>values</name>
      <anchorfile>a04492.html</anchorfile>
      <anchor>ac7240fdeae0ca240e20e74ae593eb32c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const NonlinearFactorGraph &amp;</type>
      <name>graph</name>
      <anchorfile>a04492.html</anchorfile>
      <anchor>a2ffd892baed9b62d31ce39a9243f3c78</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~NonlinearOptimizer</name>
      <anchorfile>a04492.html</anchorfile>
      <anchor>ab852c8574086cacb316c579bcf19f294</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual VectorValues</type>
      <name>solve</name>
      <anchorfile>a04492.html</anchorfile>
      <anchor>a541e8b6b63d4bce95e56cf043416e10f</anchor>
      <arglist>(const GaussianFactorGraph &amp;gfg, const NonlinearOptimizerParams &amp;params) const</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual GaussianFactorGraph::shared_ptr</type>
      <name>iterate</name>
      <anchorfile>a04492.html</anchorfile>
      <anchor>ab238f0a58ca49edd63ad552baf852599</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; const NonlinearOptimizer &gt;</type>
      <name>shared_ptr</name>
      <anchorfile>a04492.html</anchorfile>
      <anchor>ab0f7caa60ea97aa83c85cc09452f2c2d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>defaultOptimize</name>
      <anchorfile>a04492.html</anchorfile>
      <anchor>acd13b9acb0d502edafac78c63815a9f1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>NonlinearOptimizer</name>
      <anchorfile>a04492.html</anchorfile>
      <anchor>ac6b7a069a596fda982cc4aa1ddc79324</anchor>
      <arglist>(const NonlinearFactorGraph &amp;graph, std::unique_ptr&lt; internal::NonlinearOptimizerState &gt; state)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>NonlinearFactorGraph</type>
      <name>graph_</name>
      <anchorfile>a04492.html</anchorfile>
      <anchor>a7142764a820ba039a610074f855bce13</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::unique_ptr&lt; internal::NonlinearOptimizerState &gt;</type>
      <name>state_</name>
      <anchorfile>a04492.html</anchorfile>
      <anchor>aa51bf89ae24b609a58201f224c36b7b8</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::NonlinearOptimizerParams</name>
    <filename>a04496.html</filename>
    <member kind="variable">
      <type>size_t</type>
      <name>maxIterations</name>
      <anchorfile>a04496.html</anchorfile>
      <anchor>a19a9e8d9b25df5abe12c41fc7e8b1075</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>relativeErrorTol</name>
      <anchorfile>a04496.html</anchorfile>
      <anchor>a9525e668e93fbb60ea4bffeab963629e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>absoluteErrorTol</name>
      <anchorfile>a04496.html</anchorfile>
      <anchor>a01f8529b9f7efdd818e0d75134f1ae8b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>errorTol</name>
      <anchorfile>a04496.html</anchorfile>
      <anchor>aaf5a44f1a3dfd67a8027a797641cc31c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Verbosity</type>
      <name>verbosity</name>
      <anchorfile>a04496.html</anchorfile>
      <anchor>a21971e7b985115acab326deeedcfe220</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Ordering::OrderingType</type>
      <name>orderingType</name>
      <anchorfile>a04496.html</anchorfile>
      <anchor>a9d851ffe0289f4dcd861b18bc6a05960</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>IterationHook</type>
      <name>iterationHook</name>
      <anchorfile>a04496.html</anchorfile>
      <anchor>a100c28f729c2b58813428058b57a5085</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>LinearSolverType</type>
      <name>linearSolverType</name>
      <anchorfile>a04496.html</anchorfile>
      <anchor>a4d103fcbdff857b83e748011a69490d2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>boost::optional&lt; Ordering &gt;</type>
      <name>ordering</name>
      <anchorfile>a04496.html</anchorfile>
      <anchor>af485749d046e54e52317b96311db3697</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>IterativeOptimizationParameters::shared_ptr</type>
      <name>iterativeParams</name>
      <anchorfile>a04496.html</anchorfile>
      <anchor>a22f0350290afc3b8f3731b67a4917ea6</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>Verbosity</name>
      <anchorfile>a04496.html</anchorfile>
      <anchor>a2b085d375ec6effa42e3deaaeab98694</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>LinearSolverType</name>
      <anchorfile>a04496.html</anchorfile>
      <anchor>a8eaa669b1681529cdc98d1e7b7b6203b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::function&lt; void(size_t, double, double)&gt;</type>
      <name>IterationHook</name>
      <anchorfile>a04496.html</anchorfile>
      <anchor>aa62b693f8dae9f82e5ed0b3dab19f1c3</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::noiseModel::mEstimator::Null</name>
    <filename>a03836.html</filename>
    <base>gtsam::noiseModel::mEstimator::Base</base>
    <member kind="friend">
      <type>friend class</type>
      <name>boost::serialization::access</name>
      <anchorfile>a03836.html</anchorfile>
      <anchor>ac98d07dd8f7b70e16ccb9a01abf56b9c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::OdometryFactorBase</name>
    <filename>a05416.html</filename>
    <base>NoiseModelFactor4&lt; Pose2, Pose2, Pose2, Pose2 &gt;</base>
    <member kind="function">
      <type></type>
      <name>OdometryFactorBase</name>
      <anchorfile>a05416.html</anchorfile>
      <anchor>afa4700593035ff0275404fe79de725c4</anchor>
      <arglist>(Key b1, Key i, Key b2, Key j, const Pose2 &amp;measured, const SharedNoiseModel &amp;model)</arglist>
    </member>
    <member kind="function">
      <type>Vector</type>
      <name>evaluateError</name>
      <anchorfile>a05416.html</anchorfile>
      <anchor>af3a73a2f1094483b979c099d5a542bd1</anchor>
      <arglist>(const Pose2 &amp;base1, const Pose2 &amp;pose1, const Pose2 &amp;base2, const Pose2 &amp;pose2, boost::optional&lt; Matrix &amp; &gt; H1=boost::none, boost::optional&lt; Matrix &amp; &gt; H2=boost::none, boost::optional&lt; Matrix &amp; &gt; H3=boost::none, boost::optional&lt; Matrix &amp; &gt; H4=boost::none) const override</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>gtsam::internal::linearAlgorithms::OptimizeClique</name>
    <filename>a03812.html</filename>
    <templarg>class CLIQUE</templarg>
  </compound>
  <compound kind="struct">
    <name>gtsam::internal::linearAlgorithms::OptimizeData</name>
    <filename>a03808.html</filename>
  </compound>
  <compound kind="class">
    <name>gtsam::OptionalJacobian</name>
    <filename>a02616.html</filename>
    <templarg>int Rows</templarg>
    <templarg>int Cols</templarg>
    <member kind="function">
      <type></type>
      <name>OptionalJacobian</name>
      <anchorfile>a02616.html</anchorfile>
      <anchor>a59115dc58b27a4d622d06f1a43deebe9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>OptionalJacobian</name>
      <anchorfile>a02616.html</anchorfile>
      <anchor>a672b19c6773109bb67a5e8e78e0fc7bb</anchor>
      <arglist>(Jacobian &amp;fixed)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>OptionalJacobian</name>
      <anchorfile>a02616.html</anchorfile>
      <anchor>ac2b2b0c5b95f654313726ccbf95e993d</anchor>
      <arglist>(Jacobian *fixedPtr)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>OptionalJacobian</name>
      <anchorfile>a02616.html</anchorfile>
      <anchor>a51b212c26f1b568bfedceadad052f3ad</anchor>
      <arglist>(Eigen::MatrixXd &amp;dynamic)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>OptionalJacobian</name>
      <anchorfile>a02616.html</anchorfile>
      <anchor>a8e8b7f5456518fb96961bf055aecaa71</anchor>
      <arglist>(Eigen::MatrixXd *dynamic)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>OptionalJacobian</name>
      <anchorfile>a02616.html</anchorfile>
      <anchor>a2f2e381c633b5a8125ceaea77f2f3c51</anchor>
      <arglist>(boost::none_t)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>OptionalJacobian</name>
      <anchorfile>a02616.html</anchorfile>
      <anchor>a15fd73e523755b78f5ee6c994b0d584d</anchor>
      <arglist>(const boost::optional&lt; Eigen::MatrixXd &amp; &gt; optional)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator bool</name>
      <anchorfile>a02616.html</anchorfile>
      <anchor>a6686cfa51063175cc51326ce90d5f7b0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Eigen::Map&lt; Jacobian &gt; &amp;</type>
      <name>operator*</name>
      <anchorfile>a02616.html</anchorfile>
      <anchor>a556d3b411e9d1387ede5dd6ad798f639</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Eigen::Map&lt; Jacobian &gt; *</type>
      <name>operator-&gt;</name>
      <anchorfile>a02616.html</anchorfile>
      <anchor>a8ed907b7cc1367188fad8ac2cd99aa15</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>OptionalJacobian&lt; Rows, N &gt;</type>
      <name>cols</name>
      <anchorfile>a02616.html</anchorfile>
      <anchor>af99817fb2887d9029b642f8b7f5a2227</anchor>
      <arglist>(int startCol)</arglist>
    </member>
    <member kind="typedef">
      <type>Eigen::Matrix&lt; double, Rows, Cols &gt;</type>
      <name>Jacobian</name>
      <anchorfile>a02616.html</anchorfile>
      <anchor>aad86e44b7f9c9327f166c01167c20f54</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::OptionalJacobian&lt; Eigen::Dynamic, Eigen::Dynamic &gt;</name>
    <filename>a02620.html</filename>
    <member kind="function">
      <type></type>
      <name>OptionalJacobian</name>
      <anchorfile>a02620.html</anchorfile>
      <anchor>a3009c0d094984c8b892f7573f3f722bf</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>OptionalJacobian</name>
      <anchorfile>a02620.html</anchorfile>
      <anchor>a98082822bae323ca57ddcaba6ed1f785</anchor>
      <arglist>(Jacobian *pointer)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>OptionalJacobian</name>
      <anchorfile>a02620.html</anchorfile>
      <anchor>ab7617a054d6c047600c829db61a6ee9f</anchor>
      <arglist>(Jacobian &amp;dynamic)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>OptionalJacobian</name>
      <anchorfile>a02620.html</anchorfile>
      <anchor>a8c7596c4767e1254224e59c191a30486</anchor>
      <arglist>(boost::none_t)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>OptionalJacobian</name>
      <anchorfile>a02620.html</anchorfile>
      <anchor>a38f5ef78eef67e4ef45356adfef88da3</anchor>
      <arglist>(const boost::optional&lt; Eigen::MatrixXd &amp; &gt; optional)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator bool</name>
      <anchorfile>a02620.html</anchorfile>
      <anchor>aeac04b3e0d6bf65fe4d69b84709e657a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Jacobian &amp;</type>
      <name>operator*</name>
      <anchorfile>a02620.html</anchorfile>
      <anchor>a8898ad351d830aee1e3dd7e878f1fcfc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Jacobian *</type>
      <name>operator-&gt;</name>
      <anchorfile>a02620.html</anchorfile>
      <anchor>adca2873028cc90c2047c77bc5b398feb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="typedef">
      <type>Eigen::MatrixXd</type>
      <name>Jacobian</name>
      <anchorfile>a02620.html</anchorfile>
      <anchor>a4804b29dee9d045095431989ef71da6f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::Ordering</name>
    <filename>a03632.html</filename>
    <member kind="function" static="yes">
      <type>static Ordering</type>
      <name>Colamd</name>
      <anchorfile>a03632.html</anchorfile>
      <anchor>a39e84731eed0e57cb62dd2c21fa92851</anchor>
      <arglist>(const FACTOR_GRAPH &amp;graph)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static GTSAM_EXPORT Ordering</type>
      <name>Colamd</name>
      <anchorfile>a03632.html</anchorfile>
      <anchor>ab691d95771d14a1493786c9e71b4bf5a</anchor>
      <arglist>(const VariableIndex &amp;variableIndex)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Ordering</type>
      <name>ColamdConstrainedLast</name>
      <anchorfile>a03632.html</anchorfile>
      <anchor>a47d55b354a7f44790dd83c47cf5df5e5</anchor>
      <arglist>(const FACTOR_GRAPH &amp;graph, const KeyVector &amp;constrainLast, bool forceOrder=false)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static GTSAM_EXPORT Ordering</type>
      <name>ColamdConstrainedLast</name>
      <anchorfile>a03632.html</anchorfile>
      <anchor>ad04799ab8db19e9a382059e5ad12db44</anchor>
      <arglist>(const VariableIndex &amp;variableIndex, const KeyVector &amp;constrainLast, bool forceOrder=false)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Ordering</type>
      <name>ColamdConstrainedFirst</name>
      <anchorfile>a03632.html</anchorfile>
      <anchor>aa631456cdd28f8c8a735b1fb58604d84</anchor>
      <arglist>(const FACTOR_GRAPH &amp;graph, const KeyVector &amp;constrainFirst, bool forceOrder=false)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static GTSAM_EXPORT Ordering</type>
      <name>ColamdConstrainedFirst</name>
      <anchorfile>a03632.html</anchorfile>
      <anchor>a8876744fd7db49ce80c12f16666672a8</anchor>
      <arglist>(const VariableIndex &amp;variableIndex, const KeyVector &amp;constrainFirst, bool forceOrder=false)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Ordering</type>
      <name>ColamdConstrained</name>
      <anchorfile>a03632.html</anchorfile>
      <anchor>a0eaaa4e1bf99e2adef62867cc57ef531</anchor>
      <arglist>(const FACTOR_GRAPH &amp;graph, const FastMap&lt; Key, int &gt; &amp;groups)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static GTSAM_EXPORT Ordering</type>
      <name>ColamdConstrained</name>
      <anchorfile>a03632.html</anchorfile>
      <anchor>a317c72a02c46d8560817218e86d4255a</anchor>
      <arglist>(const VariableIndex &amp;variableIndex, const FastMap&lt; Key, int &gt; &amp;groups)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Ordering</type>
      <name>Natural</name>
      <anchorfile>a03632.html</anchorfile>
      <anchor>a02aaadeaaa80f88b654358d648ed7022</anchor>
      <arglist>(const FACTOR_GRAPH &amp;fg)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static GTSAM_EXPORT void</type>
      <name>CSRFormat</name>
      <anchorfile>a03632.html</anchorfile>
      <anchor>af93f2b27c190bd5d15e3aa426778a45e</anchor>
      <arglist>(std::vector&lt; int &gt; &amp;xadj, std::vector&lt; int &gt; &amp;adj, const FACTOR_GRAPH &amp;graph)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static GTSAM_EXPORT Ordering</type>
      <name>Metis</name>
      <anchorfile>a03632.html</anchorfile>
      <anchor>abed79593d0128b7dd45b66021b94b1d9</anchor>
      <arglist>(const MetisIndex &amp;met)</arglist>
    </member>
    <member kind="function">
      <type>GTSAM_EXPORT</type>
      <name>Ordering</name>
      <anchorfile>a03632.html</anchorfile>
      <anchor>aa7f3dd0f38b06fa10b7fe9dc1ee1c378</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Ordering</name>
      <anchorfile>a03632.html</anchorfile>
      <anchor>a0fdb342e68a74e19c25a1d3364233cde</anchor>
      <arglist>(const KEYS &amp;keys)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Ordering</name>
      <anchorfile>a03632.html</anchorfile>
      <anchor>a8e58b2de0eaa0f54f0a8790009abf39e</anchor>
      <arglist>(ITERATOR firstKey, ITERATOR lastKey)</arglist>
    </member>
    <member kind="function">
      <type>boost::assign::list_inserter&lt; boost::assign_detail::call_push_back&lt; This &gt; &gt;</type>
      <name>operator+=</name>
      <anchorfile>a03632.html</anchorfile>
      <anchor>a8bb52bc75d45ee11ab119220ac1caed1</anchor>
      <arglist>(Key key)</arglist>
    </member>
    <member kind="function">
      <type>FastMap&lt; Key, size_t &gt;</type>
      <name>invert</name>
      <anchorfile>a03632.html</anchorfile>
      <anchor>ac8590c3149674d3b05a8648fd01b97a2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Ordering</type>
      <name>Colamd</name>
      <anchorfile>a03632.html</anchorfile>
      <anchor>a39e84731eed0e57cb62dd2c21fa92851</anchor>
      <arglist>(const FACTOR_GRAPH &amp;graph)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static GTSAM_EXPORT Ordering</type>
      <name>Colamd</name>
      <anchorfile>a03632.html</anchorfile>
      <anchor>ab691d95771d14a1493786c9e71b4bf5a</anchor>
      <arglist>(const VariableIndex &amp;variableIndex)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Ordering</type>
      <name>ColamdConstrainedLast</name>
      <anchorfile>a03632.html</anchorfile>
      <anchor>a47d55b354a7f44790dd83c47cf5df5e5</anchor>
      <arglist>(const FACTOR_GRAPH &amp;graph, const KeyVector &amp;constrainLast, bool forceOrder=false)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static GTSAM_EXPORT Ordering</type>
      <name>ColamdConstrainedLast</name>
      <anchorfile>a03632.html</anchorfile>
      <anchor>ad04799ab8db19e9a382059e5ad12db44</anchor>
      <arglist>(const VariableIndex &amp;variableIndex, const KeyVector &amp;constrainLast, bool forceOrder=false)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Ordering</type>
      <name>ColamdConstrainedFirst</name>
      <anchorfile>a03632.html</anchorfile>
      <anchor>aa631456cdd28f8c8a735b1fb58604d84</anchor>
      <arglist>(const FACTOR_GRAPH &amp;graph, const KeyVector &amp;constrainFirst, bool forceOrder=false)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static GTSAM_EXPORT Ordering</type>
      <name>ColamdConstrainedFirst</name>
      <anchorfile>a03632.html</anchorfile>
      <anchor>a8876744fd7db49ce80c12f16666672a8</anchor>
      <arglist>(const VariableIndex &amp;variableIndex, const KeyVector &amp;constrainFirst, bool forceOrder=false)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Ordering</type>
      <name>ColamdConstrained</name>
      <anchorfile>a03632.html</anchorfile>
      <anchor>a0eaaa4e1bf99e2adef62867cc57ef531</anchor>
      <arglist>(const FACTOR_GRAPH &amp;graph, const FastMap&lt; Key, int &gt; &amp;groups)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static GTSAM_EXPORT Ordering</type>
      <name>ColamdConstrained</name>
      <anchorfile>a03632.html</anchorfile>
      <anchor>a317c72a02c46d8560817218e86d4255a</anchor>
      <arglist>(const VariableIndex &amp;variableIndex, const FastMap&lt; Key, int &gt; &amp;groups)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Ordering</type>
      <name>Natural</name>
      <anchorfile>a03632.html</anchorfile>
      <anchor>a02aaadeaaa80f88b654358d648ed7022</anchor>
      <arglist>(const FACTOR_GRAPH &amp;fg)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static GTSAM_EXPORT void</type>
      <name>CSRFormat</name>
      <anchorfile>a03632.html</anchorfile>
      <anchor>af93f2b27c190bd5d15e3aa426778a45e</anchor>
      <arglist>(std::vector&lt; int &gt; &amp;xadj, std::vector&lt; int &gt; &amp;adj, const FACTOR_GRAPH &amp;graph)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static GTSAM_EXPORT Ordering</type>
      <name>Metis</name>
      <anchorfile>a03632.html</anchorfile>
      <anchor>abed79593d0128b7dd45b66021b94b1d9</anchor>
      <arglist>(const MetisIndex &amp;met)</arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>OrderingType</name>
      <anchorfile>a03632.html</anchorfile>
      <anchor>a41194f31ec42052094cf91d81dcd796d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Ordering</type>
      <name>This</name>
      <anchorfile>a03632.html</anchorfile>
      <anchor>ad29de1a2966331f21b1fd88a18234091</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; This &gt;</type>
      <name>shared_ptr</name>
      <anchorfile>a03632.html</anchorfile>
      <anchor>a5389765361ecd73747234ac0a1fd9c62</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>boost::serialization::access</name>
      <anchorfile>a03632.html</anchorfile>
      <anchor>ac98d07dd8f7b70e16ccb9a01abf56b9c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::ordering_key_visitor</name>
    <filename>a03560.html</filename>
    <templarg>class KEY</templarg>
  </compound>
  <compound kind="class">
    <name>gtsam::OrientedPlane3</name>
    <filename>a03200.html</filename>
    <member kind="function">
      <type></type>
      <name>OrientedPlane3</name>
      <anchorfile>a03200.html</anchorfile>
      <anchor>aabbde8eb3a3a90e7de6f036fd1dceae0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>OrientedPlane3</name>
      <anchorfile>a03200.html</anchorfile>
      <anchor>a6b0a8a30855003d8f0ec99174881f6dd</anchor>
      <arglist>(const Unit3 &amp;n, double d)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>OrientedPlane3</name>
      <anchorfile>a03200.html</anchorfile>
      <anchor>a9cfeab3cd026b150b1405f4e8d212f01</anchor>
      <arglist>(const Vector4 &amp;vec)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>OrientedPlane3</name>
      <anchorfile>a03200.html</anchorfile>
      <anchor>a293ad9e04b7b2c629cd764e8091e1ecd</anchor>
      <arglist>(double a, double b, double c, double d)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>a03200.html</anchorfile>
      <anchor>adae06dc5e2404d2f88dba94b3cd45b2e</anchor>
      <arglist>(const std::string &amp;s=std::string()) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>equals</name>
      <anchorfile>a03200.html</anchorfile>
      <anchor>a93f0b31776da67a551c77026039f671c</anchor>
      <arglist>(const OrientedPlane3 &amp;s, double tol=1e-9) const</arglist>
    </member>
    <member kind="function">
      <type>OrientedPlane3</type>
      <name>transform</name>
      <anchorfile>a03200.html</anchorfile>
      <anchor>a646c180545ff02291b42eb74f2715a91</anchor>
      <arglist>(const Pose3 &amp;xr, OptionalJacobian&lt; 3, 3 &gt; Hp=boost::none, OptionalJacobian&lt; 3, 6 &gt; Hr=boost::none) const</arglist>
    </member>
    <member kind="function">
      <type>Vector3</type>
      <name>errorVector</name>
      <anchorfile>a03200.html</anchorfile>
      <anchor>a3cb324d48dd534ceab417db6a94a9a3a</anchor>
      <arglist>(const OrientedPlane3 &amp;other, OptionalJacobian&lt; 3, 3 &gt; H1=boost::none, OptionalJacobian&lt; 3, 3 &gt; H2=boost::none) const</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>dim</name>
      <anchorfile>a03200.html</anchorfile>
      <anchor>a83f544699aacfc65567316f5d66d0832</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>OrientedPlane3</type>
      <name>retract</name>
      <anchorfile>a03200.html</anchorfile>
      <anchor>a3d28d6bd13ad76bc592fc7ad8f0e4b72</anchor>
      <arglist>(const Vector3 &amp;v, OptionalJacobian&lt; 3, 3 &gt; H=boost::none) const</arglist>
    </member>
    <member kind="function">
      <type>Vector3</type>
      <name>localCoordinates</name>
      <anchorfile>a03200.html</anchorfile>
      <anchor>abe0d7a93b66fb6e0c41633a64b62d942</anchor>
      <arglist>(const OrientedPlane3 &amp;s) const</arglist>
    </member>
    <member kind="function">
      <type>Vector4</type>
      <name>planeCoefficients</name>
      <anchorfile>a03200.html</anchorfile>
      <anchor>a6803d86bef515eaaa4815f74b7f6e958</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Unit3</type>
      <name>normal</name>
      <anchorfile>a03200.html</anchorfile>
      <anchor>a3692427c5a81832bcecd6936113ae925</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>distance</name>
      <anchorfile>a03200.html</anchorfile>
      <anchor>ae27325e7964c49797f3338140bce08c6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>OrientedPlane3</name>
      <anchorfile>a03200.html</anchorfile>
      <anchor>aabbde8eb3a3a90e7de6f036fd1dceae0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>OrientedPlane3</name>
      <anchorfile>a03200.html</anchorfile>
      <anchor>a6b0a8a30855003d8f0ec99174881f6dd</anchor>
      <arglist>(const Unit3 &amp;n, double d)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>OrientedPlane3</name>
      <anchorfile>a03200.html</anchorfile>
      <anchor>a9cfeab3cd026b150b1405f4e8d212f01</anchor>
      <arglist>(const Vector4 &amp;vec)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>OrientedPlane3</name>
      <anchorfile>a03200.html</anchorfile>
      <anchor>a293ad9e04b7b2c629cd764e8091e1ecd</anchor>
      <arglist>(double a, double b, double c, double d)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>a03200.html</anchorfile>
      <anchor>adae06dc5e2404d2f88dba94b3cd45b2e</anchor>
      <arglist>(const std::string &amp;s=std::string()) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>equals</name>
      <anchorfile>a03200.html</anchorfile>
      <anchor>a93f0b31776da67a551c77026039f671c</anchor>
      <arglist>(const OrientedPlane3 &amp;s, double tol=1e-9) const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static size_t</type>
      <name>Dim</name>
      <anchorfile>a03200.html</anchorfile>
      <anchor>a9fb56e750fdd8a07783fed0958fde710</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::OrientedPlane3DirectionPrior</name>
    <filename>a04820.html</filename>
    <base>NoiseModelFactor1&lt; OrientedPlane3 &gt;</base>
    <member kind="function">
      <type></type>
      <name>OrientedPlane3DirectionPrior</name>
      <anchorfile>a04820.html</anchorfile>
      <anchor>a58474b01947fec6eb41ddb88161b95ea</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>OrientedPlane3DirectionPrior</name>
      <anchorfile>a04820.html</anchorfile>
      <anchor>a49d1d6cb599428a31cde4ccea91d1e49</anchor>
      <arglist>(Key key, const Vector4 &amp;z, const SharedGaussian &amp;noiseModel)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>a04820.html</anchorfile>
      <anchor>ae18ddfab834abb8fb7ba3d8b27a5c57d</anchor>
      <arglist>(const std::string &amp;s=&quot;OrientedPlane3DirectionPrior&quot;, const KeyFormatter &amp;keyFormatter=DefaultKeyFormatter) const override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>equals</name>
      <anchorfile>a04820.html</anchorfile>
      <anchor>a4e18dfc0e93053c3051d3862dc6e39bf</anchor>
      <arglist>(const NonlinearFactor &amp;expected, double tol=1e-9) const override</arglist>
    </member>
    <member kind="function">
      <type>Vector</type>
      <name>evaluateError</name>
      <anchorfile>a04820.html</anchorfile>
      <anchor>acadd394bc6eec0f1d894dc79387d8cd0</anchor>
      <arglist>(const OrientedPlane3 &amp;plane, boost::optional&lt; Matrix &amp; &gt; H=boost::none) const override</arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>NoiseModelFactor1&lt; OrientedPlane3 &gt;</type>
      <name>Base</name>
      <anchorfile>a04820.html</anchorfile>
      <anchor>a55996a1a85c2893e735de5fafcead092</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::OrientedPlane3Factor</name>
    <filename>a04816.html</filename>
    <base>NoiseModelFactor2&lt; Pose3, OrientedPlane3 &gt;</base>
    <member kind="function">
      <type></type>
      <name>OrientedPlane3Factor</name>
      <anchorfile>a04816.html</anchorfile>
      <anchor>a8b12c19ade2fbcafc3dfbddeb5b84f85</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>OrientedPlane3Factor</name>
      <anchorfile>a04816.html</anchorfile>
      <anchor>a2cef73cad1acb86d374f8aaa07f3a647</anchor>
      <arglist>(const Vector4 &amp;z, const SharedGaussian &amp;noiseModel, Key poseKey, Key landmarkKey)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>a04816.html</anchorfile>
      <anchor>a3edf9a79b6d769435ebeb0f45e463acc</anchor>
      <arglist>(const std::string &amp;s=&quot;OrientedPlane3Factor&quot;, const KeyFormatter &amp;keyFormatter=DefaultKeyFormatter) const override</arglist>
    </member>
    <member kind="function">
      <type>Vector</type>
      <name>evaluateError</name>
      <anchorfile>a04816.html</anchorfile>
      <anchor>a6d9b52821e0fc09d0c70117f06b838d3</anchor>
      <arglist>(const Pose3 &amp;pose, const OrientedPlane3 &amp;plane, boost::optional&lt; Matrix &amp; &gt; H1=boost::none, boost::optional&lt; Matrix &amp; &gt; H2=boost::none) const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::OutOfRangeThreadsafe</name>
    <filename>a02672.html</filename>
    <base>ThreadsafeException&lt; OutOfRangeThreadsafe &gt;</base>
    <member kind="function">
      <type></type>
      <name>OutOfRangeThreadsafe</name>
      <anchorfile>a02672.html</anchorfile>
      <anchor>abc191cc95d1df7bb9e9fcf7edb857162</anchor>
      <arglist>(const std::string &amp;description)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::ParameterMatrix</name>
    <filename>a02896.html</filename>
    <templarg>int M</templarg>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>a02896.html</anchorfile>
      <anchor>aaa3cd51cdeb932034271a8b0092ca55d</anchor>
      <arglist>(const std::string &amp;s=&quot;&quot;) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>equals</name>
      <anchorfile>a02896.html</anchorfile>
      <anchor>a845cf91d75276bc9c1954d550294c861</anchor>
      <arglist>(const ParameterMatrix&lt; M &gt; &amp;other, double tol=1e-8) const</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>dim</name>
      <anchorfile>a02896.html</anchorfile>
      <anchor>af2f346e14dc665e7afa7919d68e9e1b9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Vector</type>
      <name>vector</name>
      <anchorfile>a02896.html</anchorfile>
      <anchor>a7084d6c72c7582b7759ac0d7f2e0e770</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static ParameterMatrix</type>
      <name>identity</name>
      <anchorfile>a02896.html</anchorfile>
      <anchor>a9254f5b746c13d2b403aed7735012054</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ParameterMatrix</name>
      <anchorfile>a02896.html</anchorfile>
      <anchor>a0a9e1e32765538a3a161e3b06d29272d</anchor>
      <arglist>(const size_t N)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ParameterMatrix</name>
      <anchorfile>a02896.html</anchorfile>
      <anchor>a6787a06d269f6f9ed9d403a3caa8e02e</anchor>
      <arglist>(const MatrixType &amp;matrix)</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>rows</name>
      <anchorfile>a02896.html</anchorfile>
      <anchor>aa2444e79c40069c8e5a9906678739b14</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>cols</name>
      <anchorfile>a02896.html</anchorfile>
      <anchor>afb7465e65a040c4af126147520a60946</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>MatrixType</type>
      <name>matrix</name>
      <anchorfile>a02896.html</anchorfile>
      <anchor>a567c2b9c7e29b6ecd14134d3e91dfd57</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Eigen::Matrix&lt; double, -1, M &gt;</type>
      <name>transpose</name>
      <anchorfile>a02896.html</anchorfile>
      <anchor>afc1bcdad04c69671fb6a3b5c20616693</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Eigen::Matrix&lt; double, 1, -1 &gt;</type>
      <name>row</name>
      <anchorfile>a02896.html</anchorfile>
      <anchor>a0961883adba33dfbaef18f4f51f7ff53</anchor>
      <arglist>(size_t index) const</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>row</name>
      <anchorfile>a02896.html</anchorfile>
      <anchor>aa7bb17954038db540a17538689a3f66a</anchor>
      <arglist>(size_t index) -&gt; Eigen::Block&lt; MatrixType, 1, -1, false &gt;</arglist>
    </member>
    <member kind="function">
      <type>Eigen::Matrix&lt; double, M, 1 &gt;</type>
      <name>col</name>
      <anchorfile>a02896.html</anchorfile>
      <anchor>a6eab77c9c3e20187a2c6c3e54052d534</anchor>
      <arglist>(size_t index) const</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>col</name>
      <anchorfile>a02896.html</anchorfile>
      <anchor>acd002830d61a565536a2da07c6eccf6a</anchor>
      <arglist>(size_t index) -&gt; Eigen::Block&lt; MatrixType, M, 1, true &gt;</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setZero</name>
      <anchorfile>a02896.html</anchorfile>
      <anchor>a4a0bde5ab596ae385a8e0e5e36b7e7a8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>ParameterMatrix&lt; M &gt;</type>
      <name>operator+</name>
      <anchorfile>a02896.html</anchorfile>
      <anchor>a89d77018724db4b48a5e91b9d909ae4a</anchor>
      <arglist>(const ParameterMatrix&lt; M &gt; &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>ParameterMatrix&lt; M &gt;</type>
      <name>operator+</name>
      <anchorfile>a02896.html</anchorfile>
      <anchor>adcb462f76fde3b4441911002af00e177</anchor>
      <arglist>(const Eigen::Matrix&lt; double, -1, 1 &gt; &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>ParameterMatrix&lt; M &gt;</type>
      <name>operator-</name>
      <anchorfile>a02896.html</anchorfile>
      <anchor>adda56daa3c2f7b66a4fb14d47b00a4a9</anchor>
      <arglist>(const ParameterMatrix&lt; M &gt; &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>ParameterMatrix&lt; M &gt;</type>
      <name>operator-</name>
      <anchorfile>a02896.html</anchorfile>
      <anchor>a0563b162b9f9d26eaa8a23023157a1e1</anchor>
      <arglist>(const Eigen::Matrix&lt; double, -1, 1 &gt; &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>MatrixType</type>
      <name>operator*</name>
      <anchorfile>a02896.html</anchorfile>
      <anchor>a008a4181a72fb774673a5fe0fd2449f4</anchor>
      <arglist>(const Eigen::Matrix&lt; double, -1, -1 &gt; &amp;other) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::PartialPriorFactor</name>
    <filename>a05304.html</filename>
    <templarg>class VALUE</templarg>
    <base>gtsam::NoiseModelFactor1</base>
    <member kind="function">
      <type></type>
      <name>PartialPriorFactor</name>
      <anchorfile>a05304.html</anchorfile>
      <anchor>ad5a12a098a699df0b73429e6d3f871ac</anchor>
      <arglist>(Key key, size_t idx, double prior, const SharedNoiseModel &amp;model)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PartialPriorFactor</name>
      <anchorfile>a05304.html</anchorfile>
      <anchor>a6969bf871f12631a5cb501b2469d26dc</anchor>
      <arglist>(Key key, const std::vector&lt; size_t &gt; &amp;indices, const Vector &amp;prior, const SharedNoiseModel &amp;model)</arglist>
    </member>
    <member kind="function">
      <type>gtsam::NonlinearFactor::shared_ptr</type>
      <name>clone</name>
      <anchorfile>a05304.html</anchorfile>
      <anchor>a5286977b9b5620b2e06234ac787fc8ab</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>a05304.html</anchorfile>
      <anchor>ab5e46638975f8c82f8ceacc116a8db73</anchor>
      <arglist>(const std::string &amp;s, const KeyFormatter &amp;keyFormatter=DefaultKeyFormatter) const override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>equals</name>
      <anchorfile>a05304.html</anchorfile>
      <anchor>a8e614d18bdb12fc1911ca5fa509d8064</anchor>
      <arglist>(const NonlinearFactor &amp;expected, double tol=1e-9) const override</arglist>
    </member>
    <member kind="function">
      <type>Vector</type>
      <name>evaluateError</name>
      <anchorfile>a05304.html</anchorfile>
      <anchor>a7a8a69850c0e1464471a43077e0c501c</anchor>
      <arglist>(const T &amp;p, boost::optional&lt; Matrix &amp; &gt; H=boost::none) const override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>PartialPriorFactor</name>
      <anchorfile>a05304.html</anchorfile>
      <anchor>a60cb0382a63e9b4f09464bb74799d88d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>PartialPriorFactor</name>
      <anchorfile>a05304.html</anchorfile>
      <anchor>a2af74d1a2b166d8009a484c0946593fe</anchor>
      <arglist>(Key key, const SharedNoiseModel &amp;model)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Vector</type>
      <name>prior_</name>
      <anchorfile>a05304.html</anchorfile>
      <anchor>a776b942489678b074b0e9a02b255a194</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; size_t &gt;</type>
      <name>indices_</name>
      <anchorfile>a05304.html</anchorfile>
      <anchor>ae85b9d64ccfd4b4fb2dadd0e83737897</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>boost::serialization::access</name>
      <anchorfile>a05304.html</anchorfile>
      <anchor>ac98d07dd8f7b70e16ccb9a01abf56b9c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>gtsam::DeltaImpl::PartialSolveResult</name>
    <filename>a04328.html</filename>
  </compound>
  <compound kind="class">
    <name>gtsam::PCGSolver</name>
    <filename>a03924.html</filename>
    <base>gtsam::IterativeSolver</base>
  </compound>
  <compound kind="struct">
    <name>gtsam::PCGSolverParameters</name>
    <filename>a03920.html</filename>
    <base>gtsam::ConjugateGradientParameters</base>
  </compound>
  <compound kind="class">
    <name>gtsam::PendulumFactor1</name>
    <filename>a05444.html</filename>
    <base>NoiseModelFactor3&lt; double, double, double &gt;</base>
    <member kind="function">
      <type></type>
      <name>PendulumFactor1</name>
      <anchorfile>a05444.html</anchorfile>
      <anchor>ad0b6d537386c773e357b65c60b977eb3</anchor>
      <arglist>(Key k1, Key k, Key velKey, double h, double mu=1000.0)</arglist>
    </member>
    <member kind="function">
      <type>gtsam::NonlinearFactor::shared_ptr</type>
      <name>clone</name>
      <anchorfile>a05444.html</anchorfile>
      <anchor>a4e30a67a912fdcdcfa978457dedfb2e0</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>Vector</type>
      <name>evaluateError</name>
      <anchorfile>a05444.html</anchorfile>
      <anchor>a9b2be7f9ea311ac09ac7e72cfca6aad2</anchor>
      <arglist>(const double &amp;qk1, const double &amp;qk, const double &amp;v, boost::optional&lt; Matrix &amp; &gt; H1=boost::none, boost::optional&lt; Matrix &amp; &gt; H2=boost::none, boost::optional&lt; Matrix &amp; &gt; H3=boost::none) const override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>PendulumFactor1</name>
      <anchorfile>a05444.html</anchorfile>
      <anchor>a399fcf321c25b51a4a1df2f7a5c70c6a</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::PendulumFactor2</name>
    <filename>a05448.html</filename>
    <base>NoiseModelFactor3&lt; double, double, double &gt;</base>
    <member kind="function">
      <type></type>
      <name>PendulumFactor2</name>
      <anchorfile>a05448.html</anchorfile>
      <anchor>ac487b574f576f24d60ce763979ddffc2</anchor>
      <arglist>(Key vk1, Key vk, Key qkey, double h, double r=1.0, double g=9.81, double mu=1000.0)</arglist>
    </member>
    <member kind="function">
      <type>gtsam::NonlinearFactor::shared_ptr</type>
      <name>clone</name>
      <anchorfile>a05448.html</anchorfile>
      <anchor>a662c23358ef8154fcae0bcf5eaa1fdfd</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>Vector</type>
      <name>evaluateError</name>
      <anchorfile>a05448.html</anchorfile>
      <anchor>a534ac235ff104a0ca19a22d811f49b1e</anchor>
      <arglist>(const double &amp;vk1, const double &amp;vk, const double &amp;q, boost::optional&lt; Matrix &amp; &gt; H1=boost::none, boost::optional&lt; Matrix &amp; &gt; H2=boost::none, boost::optional&lt; Matrix &amp; &gt; H3=boost::none) const override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>PendulumFactor2</name>
      <anchorfile>a05448.html</anchorfile>
      <anchor>ad3ca918c4d0e2c6bfedb0b80cd4f7bf1</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::PendulumFactorPk</name>
    <filename>a05452.html</filename>
    <base>NoiseModelFactor3&lt; double, double, double &gt;</base>
    <member kind="function">
      <type></type>
      <name>PendulumFactorPk</name>
      <anchorfile>a05452.html</anchorfile>
      <anchor>aaffbb4b8c92e113c31bd8c580b3cc874</anchor>
      <arglist>(Key pKey, Key qKey, Key qKey1, double h, double m=1.0, double r=1.0, double g=9.81, double alpha=0.0, double mu=1000.0)</arglist>
    </member>
    <member kind="function">
      <type>gtsam::NonlinearFactor::shared_ptr</type>
      <name>clone</name>
      <anchorfile>a05452.html</anchorfile>
      <anchor>abb67d76024f26c47bc814bd6cfc1b463</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>Vector</type>
      <name>evaluateError</name>
      <anchorfile>a05452.html</anchorfile>
      <anchor>a8498b8417cb0c915576b61ff25a1293a</anchor>
      <arglist>(const double &amp;pk, const double &amp;qk, const double &amp;qk1, boost::optional&lt; Matrix &amp; &gt; H1=boost::none, boost::optional&lt; Matrix &amp; &gt; H2=boost::none, boost::optional&lt; Matrix &amp; &gt; H3=boost::none) const override</arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; PendulumFactorPk &gt;</type>
      <name>shared_ptr</name>
      <anchorfile>a05452.html</anchorfile>
      <anchor>aa288f4a04b4342d7824621fb258b1560</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>PendulumFactorPk</name>
      <anchorfile>a05452.html</anchorfile>
      <anchor>a30a9744e8bbdc8633e4e7b8a803b5896</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>m_</name>
      <anchorfile>a05452.html</anchorfile>
      <anchor>acfabe67ca0df54173a25ef1587c75383</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>r_</name>
      <anchorfile>a05452.html</anchorfile>
      <anchor>ab89d4012430291fb8a83beef94324567</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>g_</name>
      <anchorfile>a05452.html</anchorfile>
      <anchor>a7e8e4429640b8ee294074cdd1148ed3c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>alpha_</name>
      <anchorfile>a05452.html</anchorfile>
      <anchor>a6e20ff7795b329216404fd72666112af</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::PendulumFactorPk1</name>
    <filename>a05456.html</filename>
    <base>NoiseModelFactor3&lt; double, double, double &gt;</base>
    <member kind="function">
      <type></type>
      <name>PendulumFactorPk1</name>
      <anchorfile>a05456.html</anchorfile>
      <anchor>af2c9c405303ae5416a23be1ba14f3fc5</anchor>
      <arglist>(Key pKey1, Key qKey, Key qKey1, double h, double m=1.0, double r=1.0, double g=9.81, double alpha=0.0, double mu=1000.0)</arglist>
    </member>
    <member kind="function">
      <type>gtsam::NonlinearFactor::shared_ptr</type>
      <name>clone</name>
      <anchorfile>a05456.html</anchorfile>
      <anchor>a5f37ea269d0c6ebd2fa2024e66f5a5ad</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>Vector</type>
      <name>evaluateError</name>
      <anchorfile>a05456.html</anchorfile>
      <anchor>afd64eac7d1259bde2ee8e42941576a12</anchor>
      <arglist>(const double &amp;pk1, const double &amp;qk, const double &amp;qk1, boost::optional&lt; Matrix &amp; &gt; H1=boost::none, boost::optional&lt; Matrix &amp; &gt; H2=boost::none, boost::optional&lt; Matrix &amp; &gt; H3=boost::none) const override</arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; PendulumFactorPk1 &gt;</type>
      <name>shared_ptr</name>
      <anchorfile>a05456.html</anchorfile>
      <anchor>ad1efb166780c759a3bbfcdac61ddcde2</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>PendulumFactorPk1</name>
      <anchorfile>a05456.html</anchorfile>
      <anchor>a4ede43a361df1f1a114621d81a28a945</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>m_</name>
      <anchorfile>a05456.html</anchorfile>
      <anchor>a01b560d9fa72b5d296941aa83424d80a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>r_</name>
      <anchorfile>a05456.html</anchorfile>
      <anchor>a9054bf1b3146a12be984e30f18a43aea</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>g_</name>
      <anchorfile>a05456.html</anchorfile>
      <anchor>a4c5794563dcdd08958f81c9bf45acbec</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>alpha_</name>
      <anchorfile>a05456.html</anchorfile>
      <anchor>a157bb96120ca03e249f7f50aa40936bc</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::PinholeBase</name>
    <filename>a03132.html</filename>
    <member kind="function" protection="protected" static="yes">
      <type>static Matrix26</type>
      <name>Dpose</name>
      <anchorfile>a03132.html</anchorfile>
      <anchor>a1b8bc2bf7c2d619cebc1a957b0ba9207</anchor>
      <arglist>(const Point2 &amp;pn, double d)</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static Matrix23</type>
      <name>Dpoint</name>
      <anchorfile>a03132.html</anchorfile>
      <anchor>ab774b22d9bbb3b58e5a05f8fcadd981a</anchor>
      <arglist>(const Point2 &amp;pn, double d, const Matrix3 &amp;Rt)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Pose3</type>
      <name>LevelPose</name>
      <anchorfile>a03132.html</anchorfile>
      <anchor>a9f4fe91997b7fc6a928cac93c80e80f7</anchor>
      <arglist>(const Pose2 &amp;pose2, double height)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Pose3</type>
      <name>LookatPose</name>
      <anchorfile>a03132.html</anchorfile>
      <anchor>ae4e5ed1b27dceeabcb83c0f1c729adae</anchor>
      <arglist>(const Point3 &amp;eye, const Point3 &amp;target, const Point3 &amp;upVector)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Point2</type>
      <name>Project</name>
      <anchorfile>a03132.html</anchorfile>
      <anchor>a1f8c70f7b2535d87c175fa62be7df074</anchor>
      <arglist>(const Point3 &amp;pc, OptionalJacobian&lt; 2, 3 &gt; Dpoint=boost::none)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Point2</type>
      <name>Project</name>
      <anchorfile>a03132.html</anchorfile>
      <anchor>a0441cb1da2f151488628e73e2d717a37</anchor>
      <arglist>(const Unit3 &amp;pc, OptionalJacobian&lt; 2, 2 &gt; Dpoint=boost::none)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Point3</type>
      <name>BackprojectFromCamera</name>
      <anchorfile>a03132.html</anchorfile>
      <anchor>ad966818e83a45253db0d95381764ead1</anchor>
      <arglist>(const Point2 &amp;p, const double depth, OptionalJacobian&lt; 3, 2 &gt; Dpoint=boost::none, OptionalJacobian&lt; 3, 1 &gt; Ddepth=boost::none)</arglist>
    </member>
    <member kind="function">
      <type>std::pair&lt; Point2, bool &gt;</type>
      <name>projectSafe</name>
      <anchorfile>a03132.html</anchorfile>
      <anchor>a494b5e93c6f577b2a2ef6a2517370429</anchor>
      <arglist>(const Point3 &amp;pw) const</arglist>
    </member>
    <member kind="function">
      <type>Point2</type>
      <name>project2</name>
      <anchorfile>a03132.html</anchorfile>
      <anchor>af5f782cab768cd810a44dabd47717ca7</anchor>
      <arglist>(const Point3 &amp;point, OptionalJacobian&lt; 2, 6 &gt; Dpose=boost::none, OptionalJacobian&lt; 2, 3 &gt; Dpoint=boost::none) const</arglist>
    </member>
    <member kind="function">
      <type>Point2</type>
      <name>project2</name>
      <anchorfile>a03132.html</anchorfile>
      <anchor>a0e3f4fd8319948cd68d442a3d5db94df</anchor>
      <arglist>(const Unit3 &amp;point, OptionalJacobian&lt; 2, 6 &gt; Dpose=boost::none, OptionalJacobian&lt; 2, 2 &gt; Dpoint=boost::none) const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::pair&lt; size_t, size_t &gt;</type>
      <name>translationInterval</name>
      <anchorfile>a03132.html</anchorfile>
      <anchor>aa178d815e1b0fefb7c98f3c21609f297</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PinholeBase</name>
      <anchorfile>a03132.html</anchorfile>
      <anchor>a0cc83392655c4906ab9840b126d63a0c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PinholeBase</name>
      <anchorfile>a03132.html</anchorfile>
      <anchor>a68dca334cf708ac9fd3935dc869b8808</anchor>
      <arglist>(const Pose3 &amp;pose)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~PinholeBase</name>
      <anchorfile>a03132.html</anchorfile>
      <anchor>ae82cffa320b42dc9f88974ab57ba489c</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>equals</name>
      <anchorfile>a03132.html</anchorfile>
      <anchor>ab01155d3124c3f50bb1239815029e5a7</anchor>
      <arglist>(const PinholeBase &amp;camera, double tol=1e-9) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>print</name>
      <anchorfile>a03132.html</anchorfile>
      <anchor>a354034afc01c7db755000c0baed17205</anchor>
      <arglist>(const std::string &amp;s=&quot;PinholeBase&quot;) const</arglist>
    </member>
    <member kind="function">
      <type>const Pose3 &amp;</type>
      <name>pose</name>
      <anchorfile>a03132.html</anchorfile>
      <anchor>a8e481999434032fbf1f99baa18ef41a7</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Rot3 &amp;</type>
      <name>rotation</name>
      <anchorfile>a03132.html</anchorfile>
      <anchor>a78a5c2d8a175cbad6f18b242481a49ad</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Point3 &amp;</type>
      <name>translation</name>
      <anchorfile>a03132.html</anchorfile>
      <anchor>a6974500dec40a0c7c0491aaca37f700c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Pose3 &amp;</type>
      <name>getPose</name>
      <anchorfile>a03132.html</anchorfile>
      <anchor>a08f39b2a0a59b1f4b59a74a631349df9</anchor>
      <arglist>(OptionalJacobian&lt; 6, 6 &gt; H) const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PinholeBase</name>
      <anchorfile>a03132.html</anchorfile>
      <anchor>a0cc83392655c4906ab9840b126d63a0c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PinholeBase</name>
      <anchorfile>a03132.html</anchorfile>
      <anchor>a68dca334cf708ac9fd3935dc869b8808</anchor>
      <arglist>(const Pose3 &amp;pose)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~PinholeBase</name>
      <anchorfile>a03132.html</anchorfile>
      <anchor>ae82cffa320b42dc9f88974ab57ba489c</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>equals</name>
      <anchorfile>a03132.html</anchorfile>
      <anchor>ab01155d3124c3f50bb1239815029e5a7</anchor>
      <arglist>(const PinholeBase &amp;camera, double tol=1e-9) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>print</name>
      <anchorfile>a03132.html</anchorfile>
      <anchor>a354034afc01c7db755000c0baed17205</anchor>
      <arglist>(const std::string &amp;s=&quot;PinholeBase&quot;) const</arglist>
    </member>
    <member kind="function">
      <type>const Pose3 &amp;</type>
      <name>pose</name>
      <anchorfile>a03132.html</anchorfile>
      <anchor>a8e481999434032fbf1f99baa18ef41a7</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Rot3 &amp;</type>
      <name>rotation</name>
      <anchorfile>a03132.html</anchorfile>
      <anchor>a78a5c2d8a175cbad6f18b242481a49ad</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Point3 &amp;</type>
      <name>translation</name>
      <anchorfile>a03132.html</anchorfile>
      <anchor>a6974500dec40a0c7c0491aaca37f700c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Pose3 &amp;</type>
      <name>getPose</name>
      <anchorfile>a03132.html</anchorfile>
      <anchor>a08f39b2a0a59b1f4b59a74a631349df9</anchor>
      <arglist>(OptionalJacobian&lt; 6, 6 &gt; H) const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Pose3</type>
      <name>LevelPose</name>
      <anchorfile>a03132.html</anchorfile>
      <anchor>a9f4fe91997b7fc6a928cac93c80e80f7</anchor>
      <arglist>(const Pose2 &amp;pose2, double height)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Pose3</type>
      <name>LookatPose</name>
      <anchorfile>a03132.html</anchorfile>
      <anchor>ae4e5ed1b27dceeabcb83c0f1c729adae</anchor>
      <arglist>(const Point3 &amp;eye, const Point3 &amp;target, const Point3 &amp;upVector)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::pair&lt; size_t, size_t &gt;</type>
      <name>translationInterval</name>
      <anchorfile>a03132.html</anchorfile>
      <anchor>aa178d815e1b0fefb7c98f3c21609f297</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="typedef">
      <type>Rot3</type>
      <name>Rotation</name>
      <anchorfile>a03132.html</anchorfile>
      <anchor>ada38a77a8898dce412f93c8f097d656d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Point2</type>
      <name>Measurement</name>
      <anchorfile>a03132.html</anchorfile>
      <anchor>a83aa0bf26358e7e473a8e56a8ff88f97</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static Matrix26</type>
      <name>Dpose</name>
      <anchorfile>a03132.html</anchorfile>
      <anchor>a1b8bc2bf7c2d619cebc1a957b0ba9207</anchor>
      <arglist>(const Point2 &amp;pn, double d)</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static Matrix23</type>
      <name>Dpoint</name>
      <anchorfile>a03132.html</anchorfile>
      <anchor>ab774b22d9bbb3b58e5a05f8fcadd981a</anchor>
      <arglist>(const Point2 &amp;pn, double d, const Matrix3 &amp;Rt)</arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>boost::serialization::access</name>
      <anchorfile>a03132.html</anchorfile>
      <anchor>ac98d07dd8f7b70e16ccb9a01abf56b9c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::PinholeBaseK</name>
    <filename>a03228.html</filename>
    <templarg>typename CALIBRATION</templarg>
    <base>gtsam::PinholeBase</base>
    <member kind="friend">
      <type>friend class</type>
      <name>boost::serialization::access</name>
      <anchorfile>a03228.html</anchorfile>
      <anchor>ac98d07dd8f7b70e16ccb9a01abf56b9c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>std::pair&lt; Point2, bool &gt;</type>
      <name>projectSafe</name>
      <anchorfile>a03228.html</anchorfile>
      <anchor>a26082170ef43a374f355f10046fcd51a</anchor>
      <arglist>(const Point3 &amp;pw) const</arglist>
    </member>
    <member kind="function">
      <type>Point2</type>
      <name>_project</name>
      <anchorfile>a03228.html</anchorfile>
      <anchor>acac57ed14a4ce11516655cde62a78a6e</anchor>
      <arglist>(const POINT &amp;pw, OptionalJacobian&lt; 2, 6 &gt; Dpose, OptionalJacobian&lt; 2, FixedDimension&lt; POINT &gt;::value &gt; Dpoint, OptionalJacobian&lt; 2, DimK &gt; Dcal) const</arglist>
    </member>
    <member kind="function">
      <type>Point2</type>
      <name>project</name>
      <anchorfile>a03228.html</anchorfile>
      <anchor>a23034ce37bc65be08a5e1ad942eacb5a</anchor>
      <arglist>(const Point3 &amp;pw, OptionalJacobian&lt; 2, 6 &gt; Dpose=boost::none, OptionalJacobian&lt; 2, 3 &gt; Dpoint=boost::none, OptionalJacobian&lt; 2, DimK &gt; Dcal=boost::none) const</arglist>
    </member>
    <member kind="function">
      <type>Point2</type>
      <name>project</name>
      <anchorfile>a03228.html</anchorfile>
      <anchor>a2098458d3817715320032666f146d9b3</anchor>
      <arglist>(const Unit3 &amp;pw, OptionalJacobian&lt; 2, 6 &gt; Dpose=boost::none, OptionalJacobian&lt; 2, 2 &gt; Dpoint=boost::none, OptionalJacobian&lt; 2, DimK &gt; Dcal=boost::none) const</arglist>
    </member>
    <member kind="function">
      <type>Point3</type>
      <name>backproject</name>
      <anchorfile>a03228.html</anchorfile>
      <anchor>a95424c329c9afbc47ead6181d6e662fb</anchor>
      <arglist>(const Point2 &amp;p, double depth, OptionalJacobian&lt; 3, 6 &gt; Dresult_dpose=boost::none, OptionalJacobian&lt; 3, 2 &gt; Dresult_dp=boost::none, OptionalJacobian&lt; 3, 1 &gt; Dresult_ddepth=boost::none, OptionalJacobian&lt; 3, DimK &gt; Dresult_dcal=boost::none) const</arglist>
    </member>
    <member kind="function">
      <type>Unit3</type>
      <name>backprojectPointAtInfinity</name>
      <anchorfile>a03228.html</anchorfile>
      <anchor>ac551b75b228e8716edc1a448e6356c60</anchor>
      <arglist>(const Point2 &amp;p) const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>range</name>
      <anchorfile>a03228.html</anchorfile>
      <anchor>a29aad57997b95a716f03dd8f13583413</anchor>
      <arglist>(const Point3 &amp;point, OptionalJacobian&lt; 1, 6 &gt; Dcamera=boost::none, OptionalJacobian&lt; 1, 3 &gt; Dpoint=boost::none) const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>range</name>
      <anchorfile>a03228.html</anchorfile>
      <anchor>ae9497d340bbe9582ee1ce018f28c0385</anchor>
      <arglist>(const Pose3 &amp;pose, OptionalJacobian&lt; 1, 6 &gt; Dcamera=boost::none, OptionalJacobian&lt; 1, 6 &gt; Dpose=boost::none) const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>range</name>
      <anchorfile>a03228.html</anchorfile>
      <anchor>a0b1a80eddb959ae1474cb5cbc730b5c4</anchor>
      <arglist>(const CalibratedCamera &amp;camera, OptionalJacobian&lt; 1, 6 &gt; Dcamera=boost::none, OptionalJacobian&lt; 1, 6 &gt; Dother=boost::none) const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>range</name>
      <anchorfile>a03228.html</anchorfile>
      <anchor>ab0d0614dc7838829690a78e7434268a1</anchor>
      <arglist>(const PinholeBaseK&lt; CalibrationB &gt; &amp;camera, OptionalJacobian&lt; 1, 6 &gt; Dcamera=boost::none, OptionalJacobian&lt; 1, 6 &gt; Dother=boost::none) const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PinholeBaseK</name>
      <anchorfile>a03228.html</anchorfile>
      <anchor>a270bc95972da02d583525d15259c3e92</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PinholeBaseK</name>
      <anchorfile>a03228.html</anchorfile>
      <anchor>a361c9de1b3397f8e80ee8c63841c0477</anchor>
      <arglist>(const Pose3 &amp;pose)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const CALIBRATION &amp;</type>
      <name>calibration</name>
      <anchorfile>a03228.html</anchorfile>
      <anchor>a314022519384075b365248f9ccf152fc</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PinholeBaseK</name>
      <anchorfile>a03228.html</anchorfile>
      <anchor>a270bc95972da02d583525d15259c3e92</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PinholeBaseK</name>
      <anchorfile>a03228.html</anchorfile>
      <anchor>a361c9de1b3397f8e80ee8c63841c0477</anchor>
      <arglist>(const Pose3 &amp;pose)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const CALIBRATION &amp;</type>
      <name>calibration</name>
      <anchorfile>a03228.html</anchorfile>
      <anchor>a314022519384075b365248f9ccf152fc</anchor>
      <arglist>() const =0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::PinholeCamera</name>
    <filename>a03212.html</filename>
    <templarg>typename Calibration</templarg>
    <base>PinholeBaseK&lt; Calibration &gt;</base>
    <member kind="function">
      <type>size_t</type>
      <name>dim</name>
      <anchorfile>a03212.html</anchorfile>
      <anchor>a6a29f766d77720bc389eb1e5fe99635b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>PinholeCamera</type>
      <name>retract</name>
      <anchorfile>a03212.html</anchorfile>
      <anchor>ac70b5b5b934344a5af23a15337cc02d7</anchor>
      <arglist>(const Vector &amp;d) const</arglist>
    </member>
    <member kind="function">
      <type>VectorK6</type>
      <name>localCoordinates</name>
      <anchorfile>a03212.html</anchorfile>
      <anchor>ac37ca91118e6beac5c5c334471ea261d</anchor>
      <arglist>(const PinholeCamera &amp;T2) const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static size_t</type>
      <name>Dim</name>
      <anchorfile>a03212.html</anchorfile>
      <anchor>a830247e12e520b09ec15897ddd7b95fc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static PinholeCamera</type>
      <name>identity</name>
      <anchorfile>a03212.html</anchorfile>
      <anchor>ab0fab3fd28880de1a4f6564b595511c7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>boost::serialization::access</name>
      <anchorfile>a03212.html</anchorfile>
      <anchor>ac98d07dd8f7b70e16ccb9a01abf56b9c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>Point2</type>
      <name>_project2</name>
      <anchorfile>a03212.html</anchorfile>
      <anchor>a1831d4028eb7d564b8ca412468fa32f0</anchor>
      <arglist>(const POINT &amp;pw, OptionalJacobian&lt; 2, dimension &gt; Dcamera, OptionalJacobian&lt; 2, FixedDimension&lt; POINT &gt;::value &gt; Dpoint) const</arglist>
    </member>
    <member kind="function">
      <type>Point2</type>
      <name>project2</name>
      <anchorfile>a03212.html</anchorfile>
      <anchor>a441980d0f04bfb4a4144f3af647602bf</anchor>
      <arglist>(const Point3 &amp;pw, OptionalJacobian&lt; 2, dimension &gt; Dcamera=boost::none, OptionalJacobian&lt; 2, 3 &gt; Dpoint=boost::none) const</arglist>
    </member>
    <member kind="function">
      <type>Point2</type>
      <name>project2</name>
      <anchorfile>a03212.html</anchorfile>
      <anchor>acc44b8ef143a9380d56872f8e6b71626</anchor>
      <arglist>(const Unit3 &amp;pw, OptionalJacobian&lt; 2, dimension &gt; Dcamera=boost::none, OptionalJacobian&lt; 2, 2 &gt; Dpoint=boost::none) const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>range</name>
      <anchorfile>a03212.html</anchorfile>
      <anchor>af87c42ad7a9f91ea00561fe6edc2679c</anchor>
      <arglist>(const Point3 &amp;point, OptionalJacobian&lt; 1, dimension &gt; Dcamera=boost::none, OptionalJacobian&lt; 1, 3 &gt; Dpoint=boost::none) const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>range</name>
      <anchorfile>a03212.html</anchorfile>
      <anchor>aa1b92a4f46a3fa94f998006c9b0c0f58</anchor>
      <arglist>(const Pose3 &amp;pose, OptionalJacobian&lt; 1, dimension &gt; Dcamera=boost::none, OptionalJacobian&lt; 1, 6 &gt; Dpose=boost::none) const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>range</name>
      <anchorfile>a03212.html</anchorfile>
      <anchor>aada0a64f2eacd47c83500511c00a6613</anchor>
      <arglist>(const PinholeCamera&lt; CalibrationB &gt; &amp;camera, OptionalJacobian&lt; 1, dimension &gt; Dcamera=boost::none, OptionalJacobian&lt; 1, 6+CalibrationB::dimension &gt; Dother=boost::none) const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>range</name>
      <anchorfile>a03212.html</anchorfile>
      <anchor>af6ad1d251f9454ed7e621441c14f71d9</anchor>
      <arglist>(const CalibratedCamera &amp;camera, OptionalJacobian&lt; 1, dimension &gt; Dcamera=boost::none, OptionalJacobian&lt; 1, 6 &gt; Dother=boost::none) const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PinholeCamera</name>
      <anchorfile>a03212.html</anchorfile>
      <anchor>af2d439f6216b9f80e5dc38509caee6cb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PinholeCamera</name>
      <anchorfile>a03212.html</anchorfile>
      <anchor>a491f98259acec7e03e50e93c4e26a9bb</anchor>
      <arglist>(const Pose3 &amp;pose)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PinholeCamera</name>
      <anchorfile>a03212.html</anchorfile>
      <anchor>a4c5c98302819a067de838de6b17adaf0</anchor>
      <arglist>(const Pose3 &amp;pose, const Calibration &amp;K)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PinholeCamera</name>
      <anchorfile>a03212.html</anchorfile>
      <anchor>ad1c537e3934ddede949402b11416bb1f</anchor>
      <arglist>(const Vector &amp;v)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PinholeCamera</name>
      <anchorfile>a03212.html</anchorfile>
      <anchor>ab58ad82e7ebe548736e7fc04ba4433d6</anchor>
      <arglist>(const Vector &amp;v, const Vector &amp;K)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>equals</name>
      <anchorfile>a03212.html</anchorfile>
      <anchor>a84e6182a46e5866f91d1ad658d2f8560</anchor>
      <arglist>(const Base &amp;camera, double tol=1e-9) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>a03212.html</anchorfile>
      <anchor>a0acaf102396fbce8d6891213caaa5a42</anchor>
      <arglist>(const std::string &amp;s=&quot;PinholeCamera&quot;) const override</arglist>
    </member>
    <member kind="function">
      <type>const Pose3 &amp;</type>
      <name>pose</name>
      <anchorfile>a03212.html</anchorfile>
      <anchor>acc6493292702b7412a23d38a4390531b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Pose3 &amp;</type>
      <name>getPose</name>
      <anchorfile>a03212.html</anchorfile>
      <anchor>a3ee59b1849e7d20063478d64ce993934</anchor>
      <arglist>(OptionalJacobian&lt; 6, dimension &gt; H) const</arglist>
    </member>
    <member kind="function">
      <type>const Calibration &amp;</type>
      <name>calibration</name>
      <anchorfile>a03212.html</anchorfile>
      <anchor>a355cc4de98c3581c452fa36c930f8baa</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static PinholeCamera</type>
      <name>Level</name>
      <anchorfile>a03212.html</anchorfile>
      <anchor>a4fd70e98dd6aeb348052060a70253192</anchor>
      <arglist>(const Calibration &amp;K, const Pose2 &amp;pose2, double height)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static PinholeCamera</type>
      <name>Level</name>
      <anchorfile>a03212.html</anchorfile>
      <anchor>a4bd8045e10a47a2d036d83185bddae7a</anchor>
      <arglist>(const Pose2 &amp;pose2, double height)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static PinholeCamera</type>
      <name>Lookat</name>
      <anchorfile>a03212.html</anchorfile>
      <anchor>abb3ee13749b14276c08002c4e668e3dd</anchor>
      <arglist>(const Point3 &amp;eye, const Point3 &amp;target, const Point3 &amp;upVector, const Calibration &amp;K=Calibration())</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PinholeCamera</name>
      <anchorfile>a03212.html</anchorfile>
      <anchor>af2d439f6216b9f80e5dc38509caee6cb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PinholeCamera</name>
      <anchorfile>a03212.html</anchorfile>
      <anchor>a491f98259acec7e03e50e93c4e26a9bb</anchor>
      <arglist>(const Pose3 &amp;pose)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PinholeCamera</name>
      <anchorfile>a03212.html</anchorfile>
      <anchor>a4c5c98302819a067de838de6b17adaf0</anchor>
      <arglist>(const Pose3 &amp;pose, const Calibration &amp;K)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PinholeCamera</name>
      <anchorfile>a03212.html</anchorfile>
      <anchor>ad1c537e3934ddede949402b11416bb1f</anchor>
      <arglist>(const Vector &amp;v)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PinholeCamera</name>
      <anchorfile>a03212.html</anchorfile>
      <anchor>ab58ad82e7ebe548736e7fc04ba4433d6</anchor>
      <arglist>(const Vector &amp;v, const Vector &amp;K)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>equals</name>
      <anchorfile>a03212.html</anchorfile>
      <anchor>a84e6182a46e5866f91d1ad658d2f8560</anchor>
      <arglist>(const Base &amp;camera, double tol=1e-9) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>a03212.html</anchorfile>
      <anchor>a0acaf102396fbce8d6891213caaa5a42</anchor>
      <arglist>(const std::string &amp;s=&quot;PinholeCamera&quot;) const override</arglist>
    </member>
    <member kind="function">
      <type>const Pose3 &amp;</type>
      <name>pose</name>
      <anchorfile>a03212.html</anchorfile>
      <anchor>acc6493292702b7412a23d38a4390531b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Pose3 &amp;</type>
      <name>getPose</name>
      <anchorfile>a03212.html</anchorfile>
      <anchor>a3ee59b1849e7d20063478d64ce993934</anchor>
      <arglist>(OptionalJacobian&lt; 6, dimension &gt; H) const</arglist>
    </member>
    <member kind="function">
      <type>const Calibration &amp;</type>
      <name>calibration</name>
      <anchorfile>a03212.html</anchorfile>
      <anchor>a355cc4de98c3581c452fa36c930f8baa</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static PinholeCamera</type>
      <name>Level</name>
      <anchorfile>a03212.html</anchorfile>
      <anchor>a4fd70e98dd6aeb348052060a70253192</anchor>
      <arglist>(const Calibration &amp;K, const Pose2 &amp;pose2, double height)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static PinholeCamera</type>
      <name>Level</name>
      <anchorfile>a03212.html</anchorfile>
      <anchor>a4bd8045e10a47a2d036d83185bddae7a</anchor>
      <arglist>(const Pose2 &amp;pose2, double height)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static PinholeCamera</type>
      <name>Lookat</name>
      <anchorfile>a03212.html</anchorfile>
      <anchor>abb3ee13749b14276c08002c4e668e3dd</anchor>
      <arglist>(const Point3 &amp;eye, const Point3 &amp;target, const Point3 &amp;upVector, const Calibration &amp;K=Calibration())</arglist>
    </member>
    <member kind="typedef">
      <type>Point2</type>
      <name>Measurement</name>
      <anchorfile>a03212.html</anchorfile>
      <anchor>af399d9d8f7df9814febd70928842ba60</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::PinholePose</name>
    <filename>a03232.html</filename>
    <templarg>typename CALIBRATION</templarg>
    <base>gtsam::PinholeBaseK</base>
    <member kind="friend">
      <type>friend std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a03232.html</anchorfile>
      <anchor>a5f428bdcc1d1ac6ba612c9add1190ec6</anchor>
      <arglist>(std::ostream &amp;os, const PinholePose &amp;camera)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>equals</name>
      <anchorfile>a03232.html</anchorfile>
      <anchor>ad129a0682b6b96172d39c918dc17b76d</anchor>
      <arglist>(const Base &amp;camera, double tol=1e-9) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>a03232.html</anchorfile>
      <anchor>adb13f44f0f0b532b24d845437f63d4c4</anchor>
      <arglist>(const std::string &amp;s=&quot;PinholePose&quot;) const override</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PinholePose</name>
      <anchorfile>a03232.html</anchorfile>
      <anchor>a0f03ed9ab476d4fef2c5dc602e1081f7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PinholePose</name>
      <anchorfile>a03232.html</anchorfile>
      <anchor>ae8c10a4c38cf272931232cf2d2723de2</anchor>
      <arglist>(const Pose3 &amp;pose)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PinholePose</name>
      <anchorfile>a03232.html</anchorfile>
      <anchor>aadf627b6018a112d49f5d3649b5667ca</anchor>
      <arglist>(const Pose3 &amp;pose, const boost::shared_ptr&lt; CALIBRATION &gt; &amp;K)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PinholePose</name>
      <anchorfile>a03232.html</anchorfile>
      <anchor>aad52e2f5639eba5fca2d1ea983e984af</anchor>
      <arglist>(const Vector &amp;v)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PinholePose</name>
      <anchorfile>a03232.html</anchorfile>
      <anchor>a6d953e746fa85d581282c70edef4677f</anchor>
      <arglist>(const Vector &amp;v, const Vector &amp;K)</arglist>
    </member>
    <member kind="function">
      <type>const boost::shared_ptr&lt; CALIBRATION &gt; &amp;</type>
      <name>sharedCalibration</name>
      <anchorfile>a03232.html</anchorfile>
      <anchor>a7972bb82212cb0007c567c25c4351169</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const CALIBRATION &amp;</type>
      <name>calibration</name>
      <anchorfile>a03232.html</anchorfile>
      <anchor>a33a168ebe251f7b2e13ba060373994ac</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>Point2</type>
      <name>project2</name>
      <anchorfile>a03232.html</anchorfile>
      <anchor>a9e7a5edd54be46fd47ffe95ad5bda312</anchor>
      <arglist>(const Point3 &amp;pw, OptionalJacobian&lt; 2, 6 &gt; Dpose=boost::none, OptionalJacobian&lt; 2, 3 &gt; Dpoint=boost::none) const</arglist>
    </member>
    <member kind="function">
      <type>Point2</type>
      <name>project2</name>
      <anchorfile>a03232.html</anchorfile>
      <anchor>a2b4877980028e6b41ea39934e0fbbebe</anchor>
      <arglist>(const Unit3 &amp;pw, OptionalJacobian&lt; 2, 6 &gt; Dpose=boost::none, OptionalJacobian&lt; 2, 2 &gt; Dpoint=boost::none) const</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>dim</name>
      <anchorfile>a03232.html</anchorfile>
      <anchor>a8ccb4afc06d4e6103d2852c6ef21bbe0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>PinholePose</type>
      <name>retract</name>
      <anchorfile>a03232.html</anchorfile>
      <anchor>a9ee164dc395a79d050aa6b944532e291</anchor>
      <arglist>(const Vector6 &amp;d) const</arglist>
    </member>
    <member kind="function">
      <type>Vector6</type>
      <name>localCoordinates</name>
      <anchorfile>a03232.html</anchorfile>
      <anchor>aed8c543d3a6e2e81577475f9cad8188b</anchor>
      <arglist>(const PinholePose &amp;p) const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static size_t</type>
      <name>Dim</name>
      <anchorfile>a03232.html</anchorfile>
      <anchor>ac85db680765c0d0aeb9bbbe1b7f05a10</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static PinholePose</type>
      <name>identity</name>
      <anchorfile>a03232.html</anchorfile>
      <anchor>a115bd12796da4f8a7fe4f57d4e97bda0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static PinholePose</type>
      <name>Level</name>
      <anchorfile>a03232.html</anchorfile>
      <anchor>ae0e7364bd9eced44eb4ee081de10c336</anchor>
      <arglist>(const boost::shared_ptr&lt; CALIBRATION &gt; &amp;K, const Pose2 &amp;pose2, double height)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static PinholePose</type>
      <name>Level</name>
      <anchorfile>a03232.html</anchorfile>
      <anchor>ae9e4f3177ad0f29b2c955a88f2430ede</anchor>
      <arglist>(const Pose2 &amp;pose2, double height)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static PinholePose</type>
      <name>Lookat</name>
      <anchorfile>a03232.html</anchorfile>
      <anchor>a0936e707aaa93ae8c7b38fae33adcfb5</anchor>
      <arglist>(const Point3 &amp;eye, const Point3 &amp;target, const Point3 &amp;upVector, const boost::shared_ptr&lt; CALIBRATION &gt; &amp;K=boost::make_shared&lt; CALIBRATION &gt;())</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PinholePose</name>
      <anchorfile>a03232.html</anchorfile>
      <anchor>a0f03ed9ab476d4fef2c5dc602e1081f7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PinholePose</name>
      <anchorfile>a03232.html</anchorfile>
      <anchor>ae8c10a4c38cf272931232cf2d2723de2</anchor>
      <arglist>(const Pose3 &amp;pose)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PinholePose</name>
      <anchorfile>a03232.html</anchorfile>
      <anchor>aadf627b6018a112d49f5d3649b5667ca</anchor>
      <arglist>(const Pose3 &amp;pose, const boost::shared_ptr&lt; CALIBRATION &gt; &amp;K)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PinholePose</name>
      <anchorfile>a03232.html</anchorfile>
      <anchor>aad52e2f5639eba5fca2d1ea983e984af</anchor>
      <arglist>(const Vector &amp;v)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PinholePose</name>
      <anchorfile>a03232.html</anchorfile>
      <anchor>a6d953e746fa85d581282c70edef4677f</anchor>
      <arglist>(const Vector &amp;v, const Vector &amp;K)</arglist>
    </member>
    <member kind="function">
      <type>const boost::shared_ptr&lt; CALIBRATION &gt; &amp;</type>
      <name>sharedCalibration</name>
      <anchorfile>a03232.html</anchorfile>
      <anchor>a7972bb82212cb0007c567c25c4351169</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const CALIBRATION &amp;</type>
      <name>calibration</name>
      <anchorfile>a03232.html</anchorfile>
      <anchor>a33a168ebe251f7b2e13ba060373994ac</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>Point2</type>
      <name>project2</name>
      <anchorfile>a03232.html</anchorfile>
      <anchor>a9e7a5edd54be46fd47ffe95ad5bda312</anchor>
      <arglist>(const Point3 &amp;pw, OptionalJacobian&lt; 2, 6 &gt; Dpose=boost::none, OptionalJacobian&lt; 2, 3 &gt; Dpoint=boost::none) const</arglist>
    </member>
    <member kind="function">
      <type>Point2</type>
      <name>project2</name>
      <anchorfile>a03232.html</anchorfile>
      <anchor>a2b4877980028e6b41ea39934e0fbbebe</anchor>
      <arglist>(const Unit3 &amp;pw, OptionalJacobian&lt; 2, 6 &gt; Dpose=boost::none, OptionalJacobian&lt; 2, 2 &gt; Dpoint=boost::none) const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static PinholePose</type>
      <name>Level</name>
      <anchorfile>a03232.html</anchorfile>
      <anchor>ae0e7364bd9eced44eb4ee081de10c336</anchor>
      <arglist>(const boost::shared_ptr&lt; CALIBRATION &gt; &amp;K, const Pose2 &amp;pose2, double height)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static PinholePose</type>
      <name>Level</name>
      <anchorfile>a03232.html</anchorfile>
      <anchor>ae9e4f3177ad0f29b2c955a88f2430ede</anchor>
      <arglist>(const Pose2 &amp;pose2, double height)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static PinholePose</type>
      <name>Lookat</name>
      <anchorfile>a03232.html</anchorfile>
      <anchor>a0936e707aaa93ae8c7b38fae33adcfb5</anchor>
      <arglist>(const Point3 &amp;eye, const Point3 &amp;target, const Point3 &amp;upVector, const boost::shared_ptr&lt; CALIBRATION &gt; &amp;K=boost::make_shared&lt; CALIBRATION &gt;())</arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>boost::serialization::access</name>
      <anchorfile>a03232.html</anchorfile>
      <anchor>ac98d07dd8f7b70e16ccb9a01abf56b9c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::PinholeSet</name>
    <filename>a03244.html</filename>
    <templarg>class CAMERA</templarg>
    <base>gtsam::CameraSet</base>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>a03244.html</anchorfile>
      <anchor>aa2ed9343887e0e179490f51eb93cf078</anchor>
      <arglist>(const std::string &amp;s=&quot;&quot;) const override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>equals</name>
      <anchorfile>a03244.html</anchorfile>
      <anchor>a6b1c8e5f683d1e9bb704134f4ec038cf</anchor>
      <arglist>(const PinholeSet &amp;p, double tol=1e-9) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~PinholeSet</name>
      <anchorfile>a03244.html</anchorfile>
      <anchor>a7e8ddbbd82ec0b1c73a62bf8ce4af97a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>TriangulationResult</type>
      <name>triangulateSafe</name>
      <anchorfile>a03244.html</anchorfile>
      <anchor>a5fbe615d1bfd9e5c3a797e44297eea09</anchor>
      <arglist>(const typename CAMERA::MeasurementVector &amp;measured, const TriangulationParameters &amp;params) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>a03244.html</anchorfile>
      <anchor>aa2ed9343887e0e179490f51eb93cf078</anchor>
      <arglist>(const std::string &amp;s=&quot;&quot;) const override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>equals</name>
      <anchorfile>a03244.html</anchorfile>
      <anchor>a6b1c8e5f683d1e9bb704134f4ec038cf</anchor>
      <arglist>(const PinholeSet &amp;p, double tol=1e-9) const</arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>boost::serialization::access</name>
      <anchorfile>a03244.html</anchorfile>
      <anchor>ac98d07dd8f7b70e16ccb9a01abf56b9c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::Pose2</name>
    <filename>a03264.html</filename>
    <base>LieGroup&lt; Pose2, 3 &gt;</base>
    <member kind="friend">
      <type>GTSAM_EXPORT friend std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a03264.html</anchorfile>
      <anchor>a5a26ea88283360b8948b4a18c0a4b0bc</anchor>
      <arglist>(std::ostream &amp;os, const Pose2 &amp;p)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::pair&lt; size_t, size_t &gt;</type>
      <name>translationInterval</name>
      <anchorfile>a03264.html</anchorfile>
      <anchor>a68e923aa25cf68f1368685e61807e89f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::pair&lt; size_t, size_t &gt;</type>
      <name>rotationInterval</name>
      <anchorfile>a03264.html</anchorfile>
      <anchor>aa639abcd4855c99f69b37e7832092a28</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Pose2</name>
      <anchorfile>a03264.html</anchorfile>
      <anchor>ab9d2ac29304985d9ccfd66ef0f9a9aaf</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Pose2</name>
      <anchorfile>a03264.html</anchorfile>
      <anchor>aeed938448e4b42c715527831c1ddf57a</anchor>
      <arglist>(const Pose2 &amp;pose)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Pose2</name>
      <anchorfile>a03264.html</anchorfile>
      <anchor>a5d0b6d7bfebdf3f4478407160f480a1a</anchor>
      <arglist>(double x, double y, double theta)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Pose2</name>
      <anchorfile>a03264.html</anchorfile>
      <anchor>a698cbb45d2308207237e0a0ab6b27f2c</anchor>
      <arglist>(double theta, const Point2 &amp;t)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Pose2</name>
      <anchorfile>a03264.html</anchorfile>
      <anchor>ae857f3177acf6c8924aedeebafe10ede</anchor>
      <arglist>(const Rot2 &amp;r, const Point2 &amp;t)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Pose2</name>
      <anchorfile>a03264.html</anchorfile>
      <anchor>afcd35e3178b6b949cc6d5e1009c5e844</anchor>
      <arglist>(const Matrix &amp;T)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Pose2</name>
      <anchorfile>a03264.html</anchorfile>
      <anchor>a7c1a8decfc2de14e194e1f744b969525</anchor>
      <arglist>(const Vector &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>GTSAM_EXPORT void</type>
      <name>print</name>
      <anchorfile>a03264.html</anchorfile>
      <anchor>a12d332c686d07c52f163da1307db90b0</anchor>
      <arglist>(const std::string &amp;s=&quot;&quot;) const</arglist>
    </member>
    <member kind="function">
      <type>GTSAM_EXPORT bool</type>
      <name>equals</name>
      <anchorfile>a03264.html</anchorfile>
      <anchor>aaf55bed292a098e2e2275157d1707b1b</anchor>
      <arglist>(const Pose2 &amp;pose, double tol=1e-9) const</arglist>
    </member>
    <member kind="function">
      <type>GTSAM_EXPORT Pose2</type>
      <name>inverse</name>
      <anchorfile>a03264.html</anchorfile>
      <anchor>a438b73dbeda3e8c7818aeff5954f60b3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Pose2</type>
      <name>operator*</name>
      <anchorfile>a03264.html</anchorfile>
      <anchor>a06fa36176baf3acd3360732d61bac68c</anchor>
      <arglist>(const Pose2 &amp;p2) const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Pose2</type>
      <name>identity</name>
      <anchorfile>a03264.html</anchorfile>
      <anchor>a2466b7e884c66d680df22cc010934570</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>GTSAM_EXPORT Matrix3</type>
      <name>AdjointMap</name>
      <anchorfile>a03264.html</anchorfile>
      <anchor>a18b9d32432bf102feaa79876e21144b2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Vector3</type>
      <name>Adjoint</name>
      <anchorfile>a03264.html</anchorfile>
      <anchor>a7f8fdf9dc8060c51b3e2f8b45f56c2ab</anchor>
      <arglist>(const Vector3 &amp;xi) const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static GTSAM_EXPORT Pose2</type>
      <name>Expmap</name>
      <anchorfile>a03264.html</anchorfile>
      <anchor>ad7c8b920b4eb67784282b0be16b628b5</anchor>
      <arglist>(const Vector3 &amp;xi, ChartJacobian H=boost::none)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static GTSAM_EXPORT Vector3</type>
      <name>Logmap</name>
      <anchorfile>a03264.html</anchorfile>
      <anchor>a359665687e55048e5c8a774501ee6f38</anchor>
      <arglist>(const Pose2 &amp;p, ChartJacobian H=boost::none)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static GTSAM_EXPORT Matrix3</type>
      <name>adjointMap</name>
      <anchorfile>a03264.html</anchorfile>
      <anchor>aa63d9d4f5080b99b252fe5b4b3788d52</anchor>
      <arglist>(const Vector3 &amp;v)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Vector3</type>
      <name>adjoint</name>
      <anchorfile>a03264.html</anchorfile>
      <anchor>aebf426eee4f34bf41f9af9bfa694fd3f</anchor>
      <arglist>(const Vector3 &amp;xi, const Vector3 &amp;y)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Vector3</type>
      <name>adjointTranspose</name>
      <anchorfile>a03264.html</anchorfile>
      <anchor>ad5fa68cf06a58781b95ad44c4cee5e2e</anchor>
      <arglist>(const Vector3 &amp;xi, const Vector3 &amp;y)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Matrix3</type>
      <name>wedge</name>
      <anchorfile>a03264.html</anchorfile>
      <anchor>a83238c667ac924dabe99c03ae3ad427b</anchor>
      <arglist>(double vx, double vy, double w)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static GTSAM_EXPORT Matrix3</type>
      <name>ExpmapDerivative</name>
      <anchorfile>a03264.html</anchorfile>
      <anchor>aad85077d2e761a774cb3867ca58b6dbc</anchor>
      <arglist>(const Vector3 &amp;v)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static GTSAM_EXPORT Matrix3</type>
      <name>LogmapDerivative</name>
      <anchorfile>a03264.html</anchorfile>
      <anchor>a2217de338c4eed206bdfc15c6bd41006</anchor>
      <arglist>(const Pose2 &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>GTSAM_EXPORT Point2</type>
      <name>transformTo</name>
      <anchorfile>a03264.html</anchorfile>
      <anchor>aa8c17b03157c2e9ba530df4e6d6cc5ba</anchor>
      <arglist>(const Point2 &amp;point, OptionalJacobian&lt; 2, 3 &gt; Dpose=boost::none, OptionalJacobian&lt; 2, 2 &gt; Dpoint=boost::none) const</arglist>
    </member>
    <member kind="function">
      <type>GTSAM_EXPORT Point2</type>
      <name>transformFrom</name>
      <anchorfile>a03264.html</anchorfile>
      <anchor>ad0a9c33e172aa071a77233c7f593fed2</anchor>
      <arglist>(const Point2 &amp;point, OptionalJacobian&lt; 2, 3 &gt; Dpose=boost::none, OptionalJacobian&lt; 2, 2 &gt; Dpoint=boost::none) const</arglist>
    </member>
    <member kind="function">
      <type>Point2</type>
      <name>operator*</name>
      <anchorfile>a03264.html</anchorfile>
      <anchor>a5a4294a40d9483ef634f315021ee26de</anchor>
      <arglist>(const Point2 &amp;point) const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>x</name>
      <anchorfile>a03264.html</anchorfile>
      <anchor>a7228f4c1503c94e90f5d5e5fdbd7fd5e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>y</name>
      <anchorfile>a03264.html</anchorfile>
      <anchor>a31c18f608276bec9877030ce8b1fe9c2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>theta</name>
      <anchorfile>a03264.html</anchorfile>
      <anchor>aab82b98ef745bb0f8f487ee83420f606</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Point2 &amp;</type>
      <name>t</name>
      <anchorfile>a03264.html</anchorfile>
      <anchor>a5f4e106e45e7bb12471dc62f4bcd187c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Rot2 &amp;</type>
      <name>r</name>
      <anchorfile>a03264.html</anchorfile>
      <anchor>a7a70ba51dc16fe3d18cd2c16cb10b46c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Point2 &amp;</type>
      <name>translation</name>
      <anchorfile>a03264.html</anchorfile>
      <anchor>af90cdc82f62b599fa4bb52b3ce5952c1</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Rot2 &amp;</type>
      <name>rotation</name>
      <anchorfile>a03264.html</anchorfile>
      <anchor>a146e3067c22a5587afa1b333f34c41b3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>GTSAM_EXPORT Rot2</type>
      <name>bearing</name>
      <anchorfile>a03264.html</anchorfile>
      <anchor>a042ecb4d4610474d807cca54845857a1</anchor>
      <arglist>(const Point2 &amp;point, OptionalJacobian&lt; 1, 3 &gt; H1=boost::none, OptionalJacobian&lt; 1, 2 &gt; H2=boost::none) const</arglist>
    </member>
    <member kind="function">
      <type>GTSAM_EXPORT Rot2</type>
      <name>bearing</name>
      <anchorfile>a03264.html</anchorfile>
      <anchor>a5a2fce495bc99c18c585095e1d93777b</anchor>
      <arglist>(const Pose2 &amp;pose, OptionalJacobian&lt; 1, 3 &gt; H1=boost::none, OptionalJacobian&lt; 1, 3 &gt; H2=boost::none) const</arglist>
    </member>
    <member kind="function">
      <type>GTSAM_EXPORT double</type>
      <name>range</name>
      <anchorfile>a03264.html</anchorfile>
      <anchor>abf475c986fbabd94ff35601458c3ce8f</anchor>
      <arglist>(const Point2 &amp;point, OptionalJacobian&lt; 1, 3 &gt; H1=boost::none, OptionalJacobian&lt; 1, 2 &gt; H2=boost::none) const</arglist>
    </member>
    <member kind="function">
      <type>GTSAM_EXPORT double</type>
      <name>range</name>
      <anchorfile>a03264.html</anchorfile>
      <anchor>ac77e1c6bbb043077a5a09d4e71868da9</anchor>
      <arglist>(const Pose2 &amp;point, OptionalJacobian&lt; 1, 3 &gt; H1=boost::none, OptionalJacobian&lt; 1, 3 &gt; H2=boost::none) const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Pose2</name>
      <anchorfile>a03264.html</anchorfile>
      <anchor>ab9d2ac29304985d9ccfd66ef0f9a9aaf</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Pose2</name>
      <anchorfile>a03264.html</anchorfile>
      <anchor>aeed938448e4b42c715527831c1ddf57a</anchor>
      <arglist>(const Pose2 &amp;pose)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Pose2</name>
      <anchorfile>a03264.html</anchorfile>
      <anchor>a5d0b6d7bfebdf3f4478407160f480a1a</anchor>
      <arglist>(double x, double y, double theta)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Pose2</name>
      <anchorfile>a03264.html</anchorfile>
      <anchor>a698cbb45d2308207237e0a0ab6b27f2c</anchor>
      <arglist>(double theta, const Point2 &amp;t)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Pose2</name>
      <anchorfile>a03264.html</anchorfile>
      <anchor>ae857f3177acf6c8924aedeebafe10ede</anchor>
      <arglist>(const Rot2 &amp;r, const Point2 &amp;t)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Pose2</name>
      <anchorfile>a03264.html</anchorfile>
      <anchor>afcd35e3178b6b949cc6d5e1009c5e844</anchor>
      <arglist>(const Matrix &amp;T)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Pose2</name>
      <anchorfile>a03264.html</anchorfile>
      <anchor>a7c1a8decfc2de14e194e1f744b969525</anchor>
      <arglist>(const Vector &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>GTSAM_EXPORT void</type>
      <name>print</name>
      <anchorfile>a03264.html</anchorfile>
      <anchor>a12d332c686d07c52f163da1307db90b0</anchor>
      <arglist>(const std::string &amp;s=&quot;&quot;) const</arglist>
    </member>
    <member kind="function">
      <type>GTSAM_EXPORT bool</type>
      <name>equals</name>
      <anchorfile>a03264.html</anchorfile>
      <anchor>aaf55bed292a098e2e2275157d1707b1b</anchor>
      <arglist>(const Pose2 &amp;pose, double tol=1e-9) const</arglist>
    </member>
    <member kind="function">
      <type>GTSAM_EXPORT Point2</type>
      <name>transformTo</name>
      <anchorfile>a03264.html</anchorfile>
      <anchor>aa8c17b03157c2e9ba530df4e6d6cc5ba</anchor>
      <arglist>(const Point2 &amp;point, OptionalJacobian&lt; 2, 3 &gt; Dpose=boost::none, OptionalJacobian&lt; 2, 2 &gt; Dpoint=boost::none) const</arglist>
    </member>
    <member kind="function">
      <type>GTSAM_EXPORT Point2</type>
      <name>transformFrom</name>
      <anchorfile>a03264.html</anchorfile>
      <anchor>ad0a9c33e172aa071a77233c7f593fed2</anchor>
      <arglist>(const Point2 &amp;point, OptionalJacobian&lt; 2, 3 &gt; Dpose=boost::none, OptionalJacobian&lt; 2, 2 &gt; Dpoint=boost::none) const</arglist>
    </member>
    <member kind="function">
      <type>Point2</type>
      <name>operator*</name>
      <anchorfile>a03264.html</anchorfile>
      <anchor>a5a4294a40d9483ef634f315021ee26de</anchor>
      <arglist>(const Point2 &amp;point) const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>x</name>
      <anchorfile>a03264.html</anchorfile>
      <anchor>a7228f4c1503c94e90f5d5e5fdbd7fd5e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>y</name>
      <anchorfile>a03264.html</anchorfile>
      <anchor>a31c18f608276bec9877030ce8b1fe9c2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>theta</name>
      <anchorfile>a03264.html</anchorfile>
      <anchor>aab82b98ef745bb0f8f487ee83420f606</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Point2 &amp;</type>
      <name>t</name>
      <anchorfile>a03264.html</anchorfile>
      <anchor>a5f4e106e45e7bb12471dc62f4bcd187c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Rot2 &amp;</type>
      <name>r</name>
      <anchorfile>a03264.html</anchorfile>
      <anchor>a7a70ba51dc16fe3d18cd2c16cb10b46c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Point2 &amp;</type>
      <name>translation</name>
      <anchorfile>a03264.html</anchorfile>
      <anchor>af90cdc82f62b599fa4bb52b3ce5952c1</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Rot2 &amp;</type>
      <name>rotation</name>
      <anchorfile>a03264.html</anchorfile>
      <anchor>a146e3067c22a5587afa1b333f34c41b3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>GTSAM_EXPORT Rot2</type>
      <name>bearing</name>
      <anchorfile>a03264.html</anchorfile>
      <anchor>a042ecb4d4610474d807cca54845857a1</anchor>
      <arglist>(const Point2 &amp;point, OptionalJacobian&lt; 1, 3 &gt; H1=boost::none, OptionalJacobian&lt; 1, 2 &gt; H2=boost::none) const</arglist>
    </member>
    <member kind="function">
      <type>GTSAM_EXPORT Rot2</type>
      <name>bearing</name>
      <anchorfile>a03264.html</anchorfile>
      <anchor>a5a2fce495bc99c18c585095e1d93777b</anchor>
      <arglist>(const Pose2 &amp;pose, OptionalJacobian&lt; 1, 3 &gt; H1=boost::none, OptionalJacobian&lt; 1, 3 &gt; H2=boost::none) const</arglist>
    </member>
    <member kind="function">
      <type>GTSAM_EXPORT double</type>
      <name>range</name>
      <anchorfile>a03264.html</anchorfile>
      <anchor>abf475c986fbabd94ff35601458c3ce8f</anchor>
      <arglist>(const Point2 &amp;point, OptionalJacobian&lt; 1, 3 &gt; H1=boost::none, OptionalJacobian&lt; 1, 2 &gt; H2=boost::none) const</arglist>
    </member>
    <member kind="function">
      <type>GTSAM_EXPORT double</type>
      <name>range</name>
      <anchorfile>a03264.html</anchorfile>
      <anchor>ac77e1c6bbb043077a5a09d4e71868da9</anchor>
      <arglist>(const Pose2 &amp;point, OptionalJacobian&lt; 1, 3 &gt; H1=boost::none, OptionalJacobian&lt; 1, 3 &gt; H2=boost::none) const</arglist>
    </member>
    <member kind="typedef">
      <type>Rot2</type>
      <name>Rotation</name>
      <anchorfile>a03264.html</anchorfile>
      <anchor>ab75a2a0b67f731473b712ffea2ed1593</anchor>
      <arglist></arglist>
    </member>
    <class kind="struct">gtsam::Pose2::ChartAtOrigin</class>
  </compound>
  <compound kind="class">
    <name>gtsam::Pose3</name>
    <filename>a03288.html</filename>
    <base>LieGroup&lt; Pose3, 6 &gt;</base>
    <member kind="friend">
      <type>friend class</type>
      <name>boost::serialization::access</name>
      <anchorfile>a03288.html</anchorfile>
      <anchor>ac98d07dd8f7b70e16ccb9a01abf56b9c</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>GTSAM_EXPORT friend std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a03288.html</anchorfile>
      <anchor>a85bbc9c7d97c2d9c3fc86315666e8ead</anchor>
      <arglist>(std::ostream &amp;os, const Pose3 &amp;p)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::pair&lt; size_t, size_t &gt;</type>
      <name>translationInterval</name>
      <anchorfile>a03288.html</anchorfile>
      <anchor>af2afca9454555dae0073967b4d16794e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::pair&lt; size_t, size_t &gt;</type>
      <name>rotationInterval</name>
      <anchorfile>a03288.html</anchorfile>
      <anchor>a7fe78f77176483ceb4d0ce942bee15a8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Pose3</name>
      <anchorfile>a03288.html</anchorfile>
      <anchor>a14eb4114ff69f17c5251ff147a75bff3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Pose3</name>
      <anchorfile>a03288.html</anchorfile>
      <anchor>a14c25a44db9aa7dfaf7e3121b47f04c0</anchor>
      <arglist>(const Pose3 &amp;pose)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Pose3</name>
      <anchorfile>a03288.html</anchorfile>
      <anchor>a2cdb58c69c0afbea2bf74af9798b523a</anchor>
      <arglist>(const Rot3 &amp;R, const Point3 &amp;t)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Pose3</name>
      <anchorfile>a03288.html</anchorfile>
      <anchor>a05842ee58d3e5b7998cdd84932b71738</anchor>
      <arglist>(const Pose2 &amp;pose2)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Pose3</name>
      <anchorfile>a03288.html</anchorfile>
      <anchor>a3d7ad3e9bd3ea0954d4b74959b8dab0a</anchor>
      <arglist>(const Matrix &amp;T)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Pose3</type>
      <name>Create</name>
      <anchorfile>a03288.html</anchorfile>
      <anchor>a3f7ca8a32e642d11b87c6337169b200f</anchor>
      <arglist>(const Rot3 &amp;R, const Point3 &amp;t, OptionalJacobian&lt; 6, 3 &gt; HR=boost::none, OptionalJacobian&lt; 6, 3 &gt; Ht=boost::none)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static boost::optional&lt; Pose3 &gt;</type>
      <name>Align</name>
      <anchorfile>a03288.html</anchorfile>
      <anchor>acd1fe00bcd9a6fca07c0bba8fb47d25a</anchor>
      <arglist>(const std::vector&lt; Point3Pair &gt; &amp;abPointPairs)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>a03288.html</anchorfile>
      <anchor>a6f26a83f13d69819fc35a7bfde311cbf</anchor>
      <arglist>(const std::string &amp;s=&quot;&quot;) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>equals</name>
      <anchorfile>a03288.html</anchorfile>
      <anchor>a61394e151281c274dc53cb45f219d371</anchor>
      <arglist>(const Pose3 &amp;pose, double tol=1e-9) const</arglist>
    </member>
    <member kind="function">
      <type>Pose3</type>
      <name>inverse</name>
      <anchorfile>a03288.html</anchorfile>
      <anchor>aef9cc3d8b23d0f93c763781a59b2b70a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Pose3</type>
      <name>operator*</name>
      <anchorfile>a03288.html</anchorfile>
      <anchor>a90b4c72fb4a29c816b403ed72f82f2a2</anchor>
      <arglist>(const Pose3 &amp;T) const</arglist>
    </member>
    <member kind="function">
      <type>Pose3</type>
      <name>interpolateRt</name>
      <anchorfile>a03288.html</anchorfile>
      <anchor>a4a8f136a03b38e8f5fc8734f0977d8a7</anchor>
      <arglist>(const Pose3 &amp;T, double t) const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Pose3</type>
      <name>identity</name>
      <anchorfile>a03288.html</anchorfile>
      <anchor>ab3eed17c04ba8a1b6fcabc17e13151df</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Matrix6</type>
      <name>AdjointMap</name>
      <anchorfile>a03288.html</anchorfile>
      <anchor>a586ca175dcdf9e6db21ddb669f9d0317</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Vector6</type>
      <name>Adjoint</name>
      <anchorfile>a03288.html</anchorfile>
      <anchor>a56ef5e93192ba0a74c113a345c7e7705</anchor>
      <arglist>(const Vector6 &amp;xi_b, OptionalJacobian&lt; 6, 6 &gt; H_this=boost::none, OptionalJacobian&lt; 6, 6 &gt; H_xib=boost::none) const</arglist>
    </member>
    <member kind="function">
      <type>Vector6</type>
      <name>AdjointTranspose</name>
      <anchorfile>a03288.html</anchorfile>
      <anchor>a7a73a73b500f0929370f374da90e2df9</anchor>
      <arglist>(const Vector6 &amp;x, OptionalJacobian&lt; 6, 6 &gt; H_this=boost::none, OptionalJacobian&lt; 6, 6 &gt; H_x=boost::none) const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Pose3</type>
      <name>Expmap</name>
      <anchorfile>a03288.html</anchorfile>
      <anchor>a52ab9cbf3ed295e298676fa46413cc2c</anchor>
      <arglist>(const Vector6 &amp;xi, OptionalJacobian&lt; 6, 6 &gt; Hxi=boost::none)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Vector6</type>
      <name>Logmap</name>
      <anchorfile>a03288.html</anchorfile>
      <anchor>a07ea9cf1a331aa1218c8d4cb7ce6e07d</anchor>
      <arglist>(const Pose3 &amp;pose, OptionalJacobian&lt; 6, 6 &gt; Hpose=boost::none)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Matrix6</type>
      <name>adjointMap</name>
      <anchorfile>a03288.html</anchorfile>
      <anchor>aafc615f37da7f1900677dbc639fcb8bd</anchor>
      <arglist>(const Vector6 &amp;xi)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Vector6</type>
      <name>adjoint</name>
      <anchorfile>a03288.html</anchorfile>
      <anchor>a5d3a23604ece22a44ac639cc9bced4dc</anchor>
      <arglist>(const Vector6 &amp;xi, const Vector6 &amp;y, OptionalJacobian&lt; 6, 6 &gt; Hxi=boost::none, OptionalJacobian&lt; 6, 6 &gt; H_y=boost::none)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Vector6</type>
      <name>adjointTranspose</name>
      <anchorfile>a03288.html</anchorfile>
      <anchor>af84d7c844d8f61951e481224ad9848de</anchor>
      <arglist>(const Vector6 &amp;xi, const Vector6 &amp;y, OptionalJacobian&lt; 6, 6 &gt; Hxi=boost::none, OptionalJacobian&lt; 6, 6 &gt; H_y=boost::none)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Matrix6</type>
      <name>ExpmapDerivative</name>
      <anchorfile>a03288.html</anchorfile>
      <anchor>a5f01b380b0f935b61dea73a5ca4e14f5</anchor>
      <arglist>(const Vector6 &amp;xi)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Matrix6</type>
      <name>LogmapDerivative</name>
      <anchorfile>a03288.html</anchorfile>
      <anchor>a0824514b90d45a14131fb1d49ff349a5</anchor>
      <arglist>(const Pose3 &amp;xi)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Matrix3</type>
      <name>ComputeQforExpmapDerivative</name>
      <anchorfile>a03288.html</anchorfile>
      <anchor>a6786b697423a6c1512077f9df22523aa</anchor>
      <arglist>(const Vector6 &amp;xi, double nearZeroThreshold=1e-5)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Matrix</type>
      <name>wedge</name>
      <anchorfile>a03288.html</anchorfile>
      <anchor>a1eeb3016a5aefa1a986debf77c1a75ee</anchor>
      <arglist>(double wx, double wy, double wz, double vx, double vy, double vz)</arglist>
    </member>
    <member kind="function">
      <type>Point3</type>
      <name>transformFrom</name>
      <anchorfile>a03288.html</anchorfile>
      <anchor>a6d1ab071e2b417434f958487c705a28e</anchor>
      <arglist>(const Point3 &amp;point, OptionalJacobian&lt; 3, 6 &gt; Hself=boost::none, OptionalJacobian&lt; 3, 3 &gt; Hpoint=boost::none) const</arglist>
    </member>
    <member kind="function">
      <type>Point3</type>
      <name>operator*</name>
      <anchorfile>a03288.html</anchorfile>
      <anchor>af4702fa269f16f0a5082fb45488d83d0</anchor>
      <arglist>(const Point3 &amp;point) const</arglist>
    </member>
    <member kind="function">
      <type>Point3</type>
      <name>transformTo</name>
      <anchorfile>a03288.html</anchorfile>
      <anchor>a028e169aef6b7c7d1a03f51a829d4399</anchor>
      <arglist>(const Point3 &amp;point, OptionalJacobian&lt; 3, 6 &gt; Hself=boost::none, OptionalJacobian&lt; 3, 3 &gt; Hpoint=boost::none) const</arglist>
    </member>
    <member kind="function">
      <type>const Rot3 &amp;</type>
      <name>rotation</name>
      <anchorfile>a03288.html</anchorfile>
      <anchor>afafe5e27cd633890ebd79169e4481311</anchor>
      <arglist>(OptionalJacobian&lt; 3, 6 &gt; Hself=boost::none) const</arglist>
    </member>
    <member kind="function">
      <type>const Point3 &amp;</type>
      <name>translation</name>
      <anchorfile>a03288.html</anchorfile>
      <anchor>a8b17f5c70d59c202c17415e687e21e42</anchor>
      <arglist>(OptionalJacobian&lt; 3, 6 &gt; Hself=boost::none) const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>x</name>
      <anchorfile>a03288.html</anchorfile>
      <anchor>af4d73efffa95965276cd540d1289f2cc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>y</name>
      <anchorfile>a03288.html</anchorfile>
      <anchor>ada239a387d00eeffc204c8404f95ad93</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>z</name>
      <anchorfile>a03288.html</anchorfile>
      <anchor>a55dbf8aa130e078fdd0ebf9764d6a4f7</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Matrix4</type>
      <name>matrix</name>
      <anchorfile>a03288.html</anchorfile>
      <anchor>ab73eb5d52cb4140d768ac68790c8b73a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Pose3</type>
      <name>transformPoseFrom</name>
      <anchorfile>a03288.html</anchorfile>
      <anchor>a5f85501f6916c56a528cf3ff490e4586</anchor>
      <arglist>(const Pose3 &amp;aTb, OptionalJacobian&lt; 6, 6 &gt; Hself=boost::none, OptionalJacobian&lt; 6, 6 &gt; HaTb=boost::none) const</arglist>
    </member>
    <member kind="function">
      <type>Pose3</type>
      <name>transformPoseTo</name>
      <anchorfile>a03288.html</anchorfile>
      <anchor>a8fa6ef49176c5a44c6802ef3b71ec159</anchor>
      <arglist>(const Pose3 &amp;wTb, OptionalJacobian&lt; 6, 6 &gt; Hself=boost::none, OptionalJacobian&lt; 6, 6 &gt; HwTb=boost::none) const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>range</name>
      <anchorfile>a03288.html</anchorfile>
      <anchor>a70ebf439fcb8d34c8c26c85ae3820b54</anchor>
      <arglist>(const Point3 &amp;point, OptionalJacobian&lt; 1, 6 &gt; Hself=boost::none, OptionalJacobian&lt; 1, 3 &gt; Hpoint=boost::none) const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>range</name>
      <anchorfile>a03288.html</anchorfile>
      <anchor>ac03bf52f2a7be0165b414e8839d9fe7a</anchor>
      <arglist>(const Pose3 &amp;pose, OptionalJacobian&lt; 1, 6 &gt; Hself=boost::none, OptionalJacobian&lt; 1, 6 &gt; Hpose=boost::none) const</arglist>
    </member>
    <member kind="function">
      <type>Unit3</type>
      <name>bearing</name>
      <anchorfile>a03288.html</anchorfile>
      <anchor>a21e94f74f9bb295c607bd45d710cea96</anchor>
      <arglist>(const Point3 &amp;point, OptionalJacobian&lt; 2, 6 &gt; Hself=boost::none, OptionalJacobian&lt; 2, 3 &gt; Hpoint=boost::none) const</arglist>
    </member>
    <member kind="function">
      <type>Unit3</type>
      <name>bearing</name>
      <anchorfile>a03288.html</anchorfile>
      <anchor>a63d304febcd36d2f1b8e7f800a77254b</anchor>
      <arglist>(const Pose3 &amp;pose, OptionalJacobian&lt; 2, 6 &gt; Hself=boost::none, OptionalJacobian&lt; 2, 6 &gt; Hpose=boost::none) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>a03288.html</anchorfile>
      <anchor>a6f26a83f13d69819fc35a7bfde311cbf</anchor>
      <arglist>(const std::string &amp;s=&quot;&quot;) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>equals</name>
      <anchorfile>a03288.html</anchorfile>
      <anchor>a61394e151281c274dc53cb45f219d371</anchor>
      <arglist>(const Pose3 &amp;pose, double tol=1e-9) const</arglist>
    </member>
    <member kind="function">
      <type>Point3</type>
      <name>transformFrom</name>
      <anchorfile>a03288.html</anchorfile>
      <anchor>a6d1ab071e2b417434f958487c705a28e</anchor>
      <arglist>(const Point3 &amp;point, OptionalJacobian&lt; 3, 6 &gt; Hself=boost::none, OptionalJacobian&lt; 3, 3 &gt; Hpoint=boost::none) const</arglist>
    </member>
    <member kind="function">
      <type>Point3</type>
      <name>operator*</name>
      <anchorfile>a03288.html</anchorfile>
      <anchor>af4702fa269f16f0a5082fb45488d83d0</anchor>
      <arglist>(const Point3 &amp;point) const</arglist>
    </member>
    <member kind="function">
      <type>Point3</type>
      <name>transformTo</name>
      <anchorfile>a03288.html</anchorfile>
      <anchor>a028e169aef6b7c7d1a03f51a829d4399</anchor>
      <arglist>(const Point3 &amp;point, OptionalJacobian&lt; 3, 6 &gt; Hself=boost::none, OptionalJacobian&lt; 3, 3 &gt; Hpoint=boost::none) const</arglist>
    </member>
    <member kind="function">
      <type>const Rot3 &amp;</type>
      <name>rotation</name>
      <anchorfile>a03288.html</anchorfile>
      <anchor>afafe5e27cd633890ebd79169e4481311</anchor>
      <arglist>(OptionalJacobian&lt; 3, 6 &gt; Hself=boost::none) const</arglist>
    </member>
    <member kind="function">
      <type>const Point3 &amp;</type>
      <name>translation</name>
      <anchorfile>a03288.html</anchorfile>
      <anchor>a8b17f5c70d59c202c17415e687e21e42</anchor>
      <arglist>(OptionalJacobian&lt; 3, 6 &gt; Hself=boost::none) const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>x</name>
      <anchorfile>a03288.html</anchorfile>
      <anchor>af4d73efffa95965276cd540d1289f2cc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>y</name>
      <anchorfile>a03288.html</anchorfile>
      <anchor>ada239a387d00eeffc204c8404f95ad93</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>z</name>
      <anchorfile>a03288.html</anchorfile>
      <anchor>a55dbf8aa130e078fdd0ebf9764d6a4f7</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Matrix4</type>
      <name>matrix</name>
      <anchorfile>a03288.html</anchorfile>
      <anchor>ab73eb5d52cb4140d768ac68790c8b73a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Pose3</type>
      <name>transformPoseFrom</name>
      <anchorfile>a03288.html</anchorfile>
      <anchor>a5f85501f6916c56a528cf3ff490e4586</anchor>
      <arglist>(const Pose3 &amp;aTb, OptionalJacobian&lt; 6, 6 &gt; Hself=boost::none, OptionalJacobian&lt; 6, 6 &gt; HaTb=boost::none) const</arglist>
    </member>
    <member kind="function">
      <type>Pose3</type>
      <name>transformPoseTo</name>
      <anchorfile>a03288.html</anchorfile>
      <anchor>a8fa6ef49176c5a44c6802ef3b71ec159</anchor>
      <arglist>(const Pose3 &amp;wTb, OptionalJacobian&lt; 6, 6 &gt; Hself=boost::none, OptionalJacobian&lt; 6, 6 &gt; HwTb=boost::none) const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>range</name>
      <anchorfile>a03288.html</anchorfile>
      <anchor>a70ebf439fcb8d34c8c26c85ae3820b54</anchor>
      <arglist>(const Point3 &amp;point, OptionalJacobian&lt; 1, 6 &gt; Hself=boost::none, OptionalJacobian&lt; 1, 3 &gt; Hpoint=boost::none) const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>range</name>
      <anchorfile>a03288.html</anchorfile>
      <anchor>ac03bf52f2a7be0165b414e8839d9fe7a</anchor>
      <arglist>(const Pose3 &amp;pose, OptionalJacobian&lt; 1, 6 &gt; Hself=boost::none, OptionalJacobian&lt; 1, 6 &gt; Hpose=boost::none) const</arglist>
    </member>
    <member kind="function">
      <type>Unit3</type>
      <name>bearing</name>
      <anchorfile>a03288.html</anchorfile>
      <anchor>a21e94f74f9bb295c607bd45d710cea96</anchor>
      <arglist>(const Point3 &amp;point, OptionalJacobian&lt; 2, 6 &gt; Hself=boost::none, OptionalJacobian&lt; 2, 3 &gt; Hpoint=boost::none) const</arglist>
    </member>
    <member kind="function">
      <type>Unit3</type>
      <name>bearing</name>
      <anchorfile>a03288.html</anchorfile>
      <anchor>a63d304febcd36d2f1b8e7f800a77254b</anchor>
      <arglist>(const Pose3 &amp;pose, OptionalJacobian&lt; 2, 6 &gt; Hself=boost::none, OptionalJacobian&lt; 2, 6 &gt; Hpose=boost::none) const</arglist>
    </member>
    <member kind="typedef">
      <type>Rot3</type>
      <name>Rotation</name>
      <anchorfile>a03288.html</anchorfile>
      <anchor>ab8bad91d0d31f7fe4858738e257917ca</anchor>
      <arglist></arglist>
    </member>
    <class kind="struct">gtsam::Pose3::ChartAtOrigin</class>
  </compound>
  <compound kind="class">
    <name>gtsam::Pose3AttitudeFactor</name>
    <filename>a04044.html</filename>
    <base>NoiseModelFactor1&lt; Pose3 &gt;</base>
    <base>gtsam::AttitudeFactor</base>
    <member kind="function">
      <type></type>
      <name>Pose3AttitudeFactor</name>
      <anchorfile>a04044.html</anchorfile>
      <anchor>a9d6daa9a5b6c9b0cc88178d524b55ab4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Pose3AttitudeFactor</name>
      <anchorfile>a04044.html</anchorfile>
      <anchor>aefde8d161d0c93a51f1cbf48a6d9d390</anchor>
      <arglist>(Key key, const Unit3 &amp;nZ, const SharedNoiseModel &amp;model, const Unit3 &amp;bRef=Unit3(0, 0, 1))</arglist>
    </member>
    <member kind="function">
      <type>gtsam::NonlinearFactor::shared_ptr</type>
      <name>clone</name>
      <anchorfile>a04044.html</anchorfile>
      <anchor>aba9dedbc0f0b54e10c2026e329567f3d</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>a04044.html</anchorfile>
      <anchor>a93c905bd17d7029f511cc58657209317</anchor>
      <arglist>(const std::string &amp;s=&quot;&quot;, const KeyFormatter &amp;keyFormatter=DefaultKeyFormatter) const override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>equals</name>
      <anchorfile>a04044.html</anchorfile>
      <anchor>a264ca56e0fe6ad3761576cfca0eb871c</anchor>
      <arglist>(const NonlinearFactor &amp;expected, double tol=1e-9) const override</arglist>
    </member>
    <member kind="function">
      <type>Vector</type>
      <name>evaluateError</name>
      <anchorfile>a04044.html</anchorfile>
      <anchor>a1d862b418dec823ea7b0169544af6159</anchor>
      <arglist>(const Pose3 &amp;nTb, boost::optional&lt; Matrix &amp; &gt; H=boost::none) const override</arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; Pose3AttitudeFactor &gt;</type>
      <name>shared_ptr</name>
      <anchorfile>a04044.html</anchorfile>
      <anchor>a730c43b4e39863d59615043c5dc3a232</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Pose3AttitudeFactor</type>
      <name>This</name>
      <anchorfile>a04044.html</anchorfile>
      <anchor>a806143353387330c0f423d0f2857ee7d</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>boost::serialization::access</name>
      <anchorfile>a04044.html</anchorfile>
      <anchor>ac98d07dd8f7b70e16ccb9a01abf56b9c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::PoseBetweenFactor</name>
    <filename>a05308.html</filename>
    <templarg>class POSE</templarg>
    <base>NoiseModelFactor2&lt; POSE, POSE &gt;</base>
    <member kind="function">
      <type></type>
      <name>PoseBetweenFactor</name>
      <anchorfile>a05308.html</anchorfile>
      <anchor>a40a9e9a7cdfe85a53de173ba1f318df9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PoseBetweenFactor</name>
      <anchorfile>a05308.html</anchorfile>
      <anchor>ab419b0fab0fe2ae47ab2dc0e92df510f</anchor>
      <arglist>(Key key1, Key key2, const POSE &amp;measured, const SharedNoiseModel &amp;model, boost::optional&lt; POSE &gt; body_P_sensor=boost::none)</arglist>
    </member>
    <member kind="function">
      <type>gtsam::NonlinearFactor::shared_ptr</type>
      <name>clone</name>
      <anchorfile>a05308.html</anchorfile>
      <anchor>ac884af16801f69e07e34a933b5f23de5</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>a05308.html</anchorfile>
      <anchor>abc33b078568e4bd4cf482c51fed0d3a9</anchor>
      <arglist>(const std::string &amp;s, const KeyFormatter &amp;keyFormatter=DefaultKeyFormatter) const override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>equals</name>
      <anchorfile>a05308.html</anchorfile>
      <anchor>a75fc33487aaa79762978cded98c9ee34</anchor>
      <arglist>(const NonlinearFactor &amp;expected, double tol=1e-9) const override</arglist>
    </member>
    <member kind="function">
      <type>Vector</type>
      <name>evaluateError</name>
      <anchorfile>a05308.html</anchorfile>
      <anchor>a130f24feafc7be022ebacd7c18625ed4</anchor>
      <arglist>(const POSE &amp;p1, const POSE &amp;p2, boost::optional&lt; Matrix &amp; &gt; H1=boost::none, boost::optional&lt; Matrix &amp; &gt; H2=boost::none) const override</arglist>
    </member>
    <member kind="function">
      <type>const POSE &amp;</type>
      <name>measured</name>
      <anchorfile>a05308.html</anchorfile>
      <anchor>acf3ebc8c99c38466048c08b5c867a813</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; PoseBetweenFactor &gt;</type>
      <name>shared_ptr</name>
      <anchorfile>a05308.html</anchorfile>
      <anchor>a77e586abea4748946d0256b4d0a527bc</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>boost::serialization::access</name>
      <anchorfile>a05308.html</anchorfile>
      <anchor>ac98d07dd8f7b70e16ccb9a01abf56b9c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::PoseConcept</name>
    <filename>a03164.html</filename>
    <templarg>class POSE</templarg>
  </compound>
  <compound kind="class">
    <name>gtsam::PosePriorFactor</name>
    <filename>a05312.html</filename>
    <templarg>class POSE</templarg>
    <base>NoiseModelFactor1&lt; POSE &gt;</base>
    <member kind="function">
      <type></type>
      <name>PosePriorFactor</name>
      <anchorfile>a05312.html</anchorfile>
      <anchor>a37a5d7f641d57ca2e54d9aae05fb5778</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PosePriorFactor</name>
      <anchorfile>a05312.html</anchorfile>
      <anchor>ab719930cd800766a834c6ecf4c97495e</anchor>
      <arglist>(Key key, const POSE &amp;prior, const SharedNoiseModel &amp;model, boost::optional&lt; POSE &gt; body_P_sensor=boost::none)</arglist>
    </member>
    <member kind="function">
      <type>gtsam::NonlinearFactor::shared_ptr</type>
      <name>clone</name>
      <anchorfile>a05312.html</anchorfile>
      <anchor>ae612868e6b3ab11e87ce4bc82a39b6cb</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>a05312.html</anchorfile>
      <anchor>a2e24905f6c1ba8800f1e9ef95ddf76c1</anchor>
      <arglist>(const std::string &amp;s, const KeyFormatter &amp;keyFormatter=DefaultKeyFormatter) const override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>equals</name>
      <anchorfile>a05312.html</anchorfile>
      <anchor>a50f35f6f097176649339a9774031aa56</anchor>
      <arglist>(const NonlinearFactor &amp;expected, double tol=1e-9) const override</arglist>
    </member>
    <member kind="function">
      <type>Vector</type>
      <name>evaluateError</name>
      <anchorfile>a05312.html</anchorfile>
      <anchor>a6cc28f56809d366912a82f483dd23385</anchor>
      <arglist>(const POSE &amp;p, boost::optional&lt; Matrix &amp; &gt; H=boost::none) const override</arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; PosePriorFactor&lt; POSE &gt; &gt;</type>
      <name>shared_ptr</name>
      <anchorfile>a05312.html</anchorfile>
      <anchor>a07cc4c30506fa3542d2faef52cc2a50d</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>boost::serialization::access</name>
      <anchorfile>a05312.html</anchorfile>
      <anchor>ac98d07dd8f7b70e16ccb9a01abf56b9c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::PoseRotationPrior</name>
    <filename>a04824.html</filename>
    <templarg>class POSE</templarg>
    <base>NoiseModelFactor1&lt; POSE &gt;</base>
    <member kind="function">
      <type></type>
      <name>PoseRotationPrior</name>
      <anchorfile>a04824.html</anchorfile>
      <anchor>a33069d1c86da3e6c66d5feccb75c7a1b</anchor>
      <arglist>(Key key, const Rotation &amp;rot_z, const SharedNoiseModel &amp;model)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PoseRotationPrior</name>
      <anchorfile>a04824.html</anchorfile>
      <anchor>a400f290b75d021bd4852523fc19e0d06</anchor>
      <arglist>(Key key, const POSE &amp;pose_z, const SharedNoiseModel &amp;model)</arglist>
    </member>
    <member kind="function">
      <type>gtsam::NonlinearFactor::shared_ptr</type>
      <name>clone</name>
      <anchorfile>a04824.html</anchorfile>
      <anchor>a57ae31b9774b55afea7ec4ec7dce2c90</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>equals</name>
      <anchorfile>a04824.html</anchorfile>
      <anchor>a6e46bdb0f7b0bdbd763667be2e5376bd</anchor>
      <arglist>(const NonlinearFactor &amp;expected, double tol=1e-9) const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>a04824.html</anchorfile>
      <anchor>ab7505e088cb746352684276bbf3b8ac3</anchor>
      <arglist>(const std::string &amp;s=&quot;&quot;, const KeyFormatter &amp;keyFormatter=DefaultKeyFormatter) const override</arglist>
    </member>
    <member kind="function">
      <type>Vector</type>
      <name>evaluateError</name>
      <anchorfile>a04824.html</anchorfile>
      <anchor>a9cf16a83427a608a5fbe72c134043923</anchor>
      <arglist>(const Pose &amp;pose, boost::optional&lt; Matrix &amp; &gt; H=boost::none) const override</arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>boost::serialization::access</name>
      <anchorfile>a04824.html</anchorfile>
      <anchor>ac98d07dd8f7b70e16ccb9a01abf56b9c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::PoseRTV</name>
    <filename>a05460.html</filename>
    <base>ProductLieGroup&lt; Pose3, Velocity3 &gt;</base>
    <member kind="function">
      <type>double</type>
      <name>range</name>
      <anchorfile>a05460.html</anchorfile>
      <anchor>ac045ea3808c230baeaf847ab5b06b11f</anchor>
      <arglist>(const PoseRTV &amp;other, OptionalJacobian&lt; 1, 9 &gt; H1=boost::none, OptionalJacobian&lt; 1, 9 &gt; H2=boost::none) const</arglist>
    </member>
    <member kind="function">
      <type>PoseRTV</type>
      <name>planarDynamics</name>
      <anchorfile>a05460.html</anchorfile>
      <anchor>a5e0ef41a0c454320e1f5b0bd786b99eb</anchor>
      <arglist>(double vel_rate, double heading_rate, double max_accel, double dt) const</arglist>
    </member>
    <member kind="function">
      <type>PoseRTV</type>
      <name>flyingDynamics</name>
      <anchorfile>a05460.html</anchorfile>
      <anchor>a48d10745a368079668364e9aa315719c</anchor>
      <arglist>(double pitch_rate, double heading_rate, double lift_control, double dt) const</arglist>
    </member>
    <member kind="function">
      <type>PoseRTV</type>
      <name>generalDynamics</name>
      <anchorfile>a05460.html</anchorfile>
      <anchor>a5eb06040cb415f1693c7ffc5dfda8d6e</anchor>
      <arglist>(const Vector &amp;accel, const Vector &amp;gyro, double dt) const</arglist>
    </member>
    <member kind="function">
      <type>Vector6</type>
      <name>imuPrediction</name>
      <anchorfile>a05460.html</anchorfile>
      <anchor>aaa8a9bdd9dea2e70eb844890c22dce7a</anchor>
      <arglist>(const PoseRTV &amp;x2, double dt) const</arglist>
    </member>
    <member kind="function">
      <type>Point3</type>
      <name>translationIntegration</name>
      <anchorfile>a05460.html</anchorfile>
      <anchor>a30dcd5811fbe68ef3d8097d250960580</anchor>
      <arglist>(const Rot3 &amp;r2, const Velocity3 &amp;v2, double dt) const</arglist>
    </member>
    <member kind="function">
      <type>Point3</type>
      <name>translationIntegration</name>
      <anchorfile>a05460.html</anchorfile>
      <anchor>af110dd152edd6fb41d918788e390d0f1</anchor>
      <arglist>(const PoseRTV &amp;x2, double dt) const</arglist>
    </member>
    <member kind="function">
      <type>Vector</type>
      <name>translationIntegrationVec</name>
      <anchorfile>a05460.html</anchorfile>
      <anchor>a451dcbcf269147948292486d3cb9626f</anchor>
      <arglist>(const PoseRTV &amp;x2, double dt) const</arglist>
    </member>
    <member kind="function">
      <type>PoseRTV</type>
      <name>transformed_from</name>
      <anchorfile>a05460.html</anchorfile>
      <anchor>a189334f48cb38cfa9895fcc5575418c1</anchor>
      <arglist>(const Pose3 &amp;trans, ChartJacobian Dglobal=boost::none, OptionalJacobian&lt; 9, 6 &gt; Dtrans=boost::none) const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Matrix</type>
      <name>RRTMbn</name>
      <anchorfile>a05460.html</anchorfile>
      <anchor>a89d18cfd01515e3c5743b09de43e8bd7</anchor>
      <arglist>(const Vector3 &amp;euler)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Matrix</type>
      <name>RRTMnb</name>
      <anchorfile>a05460.html</anchorfile>
      <anchor>ac520162c0446004ad0771e42c33903b0</anchor>
      <arglist>(const Vector3 &amp;euler)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PoseRTV</name>
      <anchorfile>a05460.html</anchorfile>
      <anchor>aedcae2852c2c9adcea4e5760e1ad2afc</anchor>
      <arglist>(double roll, double pitch, double yaw, double x, double y, double z, double vx, double vy, double vz)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PoseRTV</name>
      <anchorfile>a05460.html</anchorfile>
      <anchor>a25ad65cb06c27e0e6a2c618a75f3dd4a</anchor>
      <arglist>(const Vector &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>range</name>
      <anchorfile>a05460.html</anchorfile>
      <anchor>ac045ea3808c230baeaf847ab5b06b11f</anchor>
      <arglist>(const PoseRTV &amp;other, OptionalJacobian&lt; 1, 9 &gt; H1=boost::none, OptionalJacobian&lt; 1, 9 &gt; H2=boost::none) const</arglist>
    </member>
    <member kind="function">
      <type>PoseRTV</type>
      <name>planarDynamics</name>
      <anchorfile>a05460.html</anchorfile>
      <anchor>a5e0ef41a0c454320e1f5b0bd786b99eb</anchor>
      <arglist>(double vel_rate, double heading_rate, double max_accel, double dt) const</arglist>
    </member>
    <member kind="function">
      <type>PoseRTV</type>
      <name>flyingDynamics</name>
      <anchorfile>a05460.html</anchorfile>
      <anchor>a48d10745a368079668364e9aa315719c</anchor>
      <arglist>(double pitch_rate, double heading_rate, double lift_control, double dt) const</arglist>
    </member>
    <member kind="function">
      <type>PoseRTV</type>
      <name>generalDynamics</name>
      <anchorfile>a05460.html</anchorfile>
      <anchor>a5eb06040cb415f1693c7ffc5dfda8d6e</anchor>
      <arglist>(const Vector &amp;accel, const Vector &amp;gyro, double dt) const</arglist>
    </member>
    <member kind="function">
      <type>Vector6</type>
      <name>imuPrediction</name>
      <anchorfile>a05460.html</anchorfile>
      <anchor>aaa8a9bdd9dea2e70eb844890c22dce7a</anchor>
      <arglist>(const PoseRTV &amp;x2, double dt) const</arglist>
    </member>
    <member kind="function">
      <type>Point3</type>
      <name>translationIntegration</name>
      <anchorfile>a05460.html</anchorfile>
      <anchor>a30dcd5811fbe68ef3d8097d250960580</anchor>
      <arglist>(const Rot3 &amp;r2, const Velocity3 &amp;v2, double dt) const</arglist>
    </member>
    <member kind="function">
      <type>Point3</type>
      <name>translationIntegration</name>
      <anchorfile>a05460.html</anchorfile>
      <anchor>af110dd152edd6fb41d918788e390d0f1</anchor>
      <arglist>(const PoseRTV &amp;x2, double dt) const</arglist>
    </member>
    <member kind="function">
      <type>Vector</type>
      <name>translationIntegrationVec</name>
      <anchorfile>a05460.html</anchorfile>
      <anchor>a451dcbcf269147948292486d3cb9626f</anchor>
      <arglist>(const PoseRTV &amp;x2, double dt) const</arglist>
    </member>
    <member kind="function">
      <type>PoseRTV</type>
      <name>transformed_from</name>
      <anchorfile>a05460.html</anchorfile>
      <anchor>a189334f48cb38cfa9895fcc5575418c1</anchor>
      <arglist>(const Pose3 &amp;trans, ChartJacobian Dglobal=boost::none, OptionalJacobian&lt; 9, 6 &gt; Dtrans=boost::none) const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Matrix</type>
      <name>RRTMbn</name>
      <anchorfile>a05460.html</anchorfile>
      <anchor>a89d18cfd01515e3c5743b09de43e8bd7</anchor>
      <arglist>(const Vector3 &amp;euler)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Matrix</type>
      <name>RRTMnb</name>
      <anchorfile>a05460.html</anchorfile>
      <anchor>ac520162c0446004ad0771e42c33903b0</anchor>
      <arglist>(const Vector3 &amp;euler)</arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>boost::serialization::access</name>
      <anchorfile>a05460.html</anchorfile>
      <anchor>ac98d07dd8f7b70e16ccb9a01abf56b9c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::PoseToPointFactor</name>
    <filename>a05316.html</filename>
    <base>NoiseModelFactor2&lt; Pose3, Point3 &gt;</base>
    <member kind="function">
      <type></type>
      <name>PoseToPointFactor</name>
      <anchorfile>a05316.html</anchorfile>
      <anchor>afed52ad6d896a37ba37225570fc786aa</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PoseToPointFactor</name>
      <anchorfile>a05316.html</anchorfile>
      <anchor>a90b63c0ac9a8c58af51e152588e3457f</anchor>
      <arglist>(Key key1, Key key2, const Point3 &amp;measured, const SharedNoiseModel &amp;model)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>print</name>
      <anchorfile>a05316.html</anchorfile>
      <anchor>ad2485aa92bd99b9ba909957c16446162</anchor>
      <arglist>(const std::string &amp;s, const KeyFormatter &amp;keyFormatter=DefaultKeyFormatter) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>equals</name>
      <anchorfile>a05316.html</anchorfile>
      <anchor>ad1565a2097fbf693373c7615d10e3039</anchor>
      <arglist>(const NonlinearFactor &amp;expected, double tol=1e-9) const</arglist>
    </member>
    <member kind="function">
      <type>Vector</type>
      <name>evaluateError</name>
      <anchorfile>a05316.html</anchorfile>
      <anchor>ada48d91c2894511e8db442c88e8207fa</anchor>
      <arglist>(const Pose3 &amp;wTwi, const Point3 &amp;wPwp, boost::optional&lt; Matrix &amp; &gt; H1=boost::none, boost::optional&lt; Matrix &amp; &gt; H2=boost::none) const</arglist>
    </member>
    <member kind="function">
      <type>const Point3 &amp;</type>
      <name>measured</name>
      <anchorfile>a05316.html</anchorfile>
      <anchor>a16224530054cbd1d9d5aa019684888bf</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; PoseToPointFactor &gt;</type>
      <name>shared_ptr</name>
      <anchorfile>a05316.html</anchorfile>
      <anchor>abbe292d9528820d5b49d433291ffa751</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>boost::serialization::access</name>
      <anchorfile>a05316.html</anchorfile>
      <anchor>ac98d07dd8f7b70e16ccb9a01abf56b9c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::PoseTranslationPrior</name>
    <filename>a04828.html</filename>
    <templarg>class POSE</templarg>
    <base>NoiseModelFactor1&lt; POSE &gt;</base>
    <member kind="function">
      <type></type>
      <name>PoseTranslationPrior</name>
      <anchorfile>a04828.html</anchorfile>
      <anchor>adad7eab23d69d2dec6ae4ad59e0a8c65</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PoseTranslationPrior</name>
      <anchorfile>a04828.html</anchorfile>
      <anchor>a1701c62175b4e30c8c1df8159764480c</anchor>
      <arglist>(Key key, const Translation &amp;measured, const noiseModel::Base::shared_ptr &amp;model)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PoseTranslationPrior</name>
      <anchorfile>a04828.html</anchorfile>
      <anchor>a204e0b877e117aabfe599ca247a195f8</anchor>
      <arglist>(Key key, const POSE &amp;pose_z, const noiseModel::Base::shared_ptr &amp;model)</arglist>
    </member>
    <member kind="function">
      <type>gtsam::NonlinearFactor::shared_ptr</type>
      <name>clone</name>
      <anchorfile>a04828.html</anchorfile>
      <anchor>a6f953d9574be86ccdac8564de316d3d1</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>Vector</type>
      <name>evaluateError</name>
      <anchorfile>a04828.html</anchorfile>
      <anchor>a21443e02e31c610c1cacb743e4896215</anchor>
      <arglist>(const Pose &amp;pose, boost::optional&lt; Matrix &amp; &gt; H=boost::none) const override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>equals</name>
      <anchorfile>a04828.html</anchorfile>
      <anchor>a313a43f301ee6b4745496477484173cd</anchor>
      <arglist>(const NonlinearFactor &amp;expected, double tol=1e-9) const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>a04828.html</anchorfile>
      <anchor>aeda95f7a98f9e73490cb1c92e26facc0</anchor>
      <arglist>(const std::string &amp;s=&quot;&quot;, const KeyFormatter &amp;keyFormatter=DefaultKeyFormatter) const override</arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>boost::serialization::access</name>
      <anchorfile>a04828.html</anchorfile>
      <anchor>ac98d07dd8f7b70e16ccb9a01abf56b9c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::Potentials</name>
    <filename>a03004.html</filename>
    <base>AlgebraicDecisionTree&lt; Key &gt;</base>
    <member kind="function">
      <type>GTSAM_EXPORT</type>
      <name>Potentials</name>
      <anchorfile>a03004.html</anchorfile>
      <anchor>a3086f766807fdfdc53ba6e6b55451f48</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>GTSAM_EXPORT</type>
      <name>Potentials</name>
      <anchorfile>a03004.html</anchorfile>
      <anchor>a5aab8730c80a7070ac1f295b9ab66e5d</anchor>
      <arglist>(const DiscreteKeys &amp;keys, const ADT &amp;decisionTree)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Potentials</name>
      <anchorfile>a03004.html</anchorfile>
      <anchor>ada2ab8851536ff2373c2ec65653ef766</anchor>
      <arglist>(const DiscreteKeys &amp;keys, SOURCE table)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>Potentials</name>
      <anchorfile>a03004.html</anchorfile>
      <anchor>a9765260313d922c2b8feb976089f52ec</anchor>
      <arglist>(const ADT &amp;potentials)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::map&lt; Key, size_t &gt;</type>
      <name>cardinalities_</name>
      <anchorfile>a03004.html</anchorfile>
      <anchor>adaa8e2ca551588ed0b07aa0a20379338</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::PowerMethod</name>
    <filename>a03932.html</filename>
    <templarg>class Operator</templarg>
    <member kind="function">
      <type></type>
      <name>PowerMethod</name>
      <anchorfile>a03932.html</anchorfile>
      <anchor>a72f5174af96689cf0a4b2586c592351c</anchor>
      <arglist>(const Operator &amp;A, const boost::optional&lt; Vector &gt; initial=boost::none)</arglist>
    </member>
    <member kind="function">
      <type>Vector</type>
      <name>powerIteration</name>
      <anchorfile>a03932.html</anchorfile>
      <anchor>a0f67a41b8945aadb46d2c83167a6dd4c</anchor>
      <arglist>(const Vector &amp;x) const</arglist>
    </member>
    <member kind="function">
      <type>Vector</type>
      <name>powerIteration</name>
      <anchorfile>a03932.html</anchorfile>
      <anchor>a88659c24feb5400af80957d4fca5953f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>converged</name>
      <anchorfile>a03932.html</anchorfile>
      <anchor>ab3d3f23ecef093f1610f92207cc13589</anchor>
      <arglist>(double tol) const</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>nrIterations</name>
      <anchorfile>a03932.html</anchorfile>
      <anchor>af6ad9276cf74347a207fc72cac5d79cd</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>compute</name>
      <anchorfile>a03932.html</anchorfile>
      <anchor>adf125a55542b6b8889e1fbbf8ca6d412</anchor>
      <arglist>(size_t maxIterations, double tol)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>eigenvalue</name>
      <anchorfile>a03932.html</anchorfile>
      <anchor>a50cd517d97bfb4e1ab29c1b7b9b8aec5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Vector</type>
      <name>eigenvector</name>
      <anchorfile>a03932.html</anchorfile>
      <anchor>a15e499d997ab3e8d388cb8d2cfe138f2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PowerMethod</name>
      <anchorfile>a03932.html</anchorfile>
      <anchor>a72f5174af96689cf0a4b2586c592351c</anchor>
      <arglist>(const Operator &amp;A, const boost::optional&lt; Vector &gt; initial=boost::none)</arglist>
    </member>
    <member kind="function">
      <type>Vector</type>
      <name>powerIteration</name>
      <anchorfile>a03932.html</anchorfile>
      <anchor>a0f67a41b8945aadb46d2c83167a6dd4c</anchor>
      <arglist>(const Vector &amp;x) const</arglist>
    </member>
    <member kind="function">
      <type>Vector</type>
      <name>powerIteration</name>
      <anchorfile>a03932.html</anchorfile>
      <anchor>a88659c24feb5400af80957d4fca5953f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>converged</name>
      <anchorfile>a03932.html</anchorfile>
      <anchor>ab3d3f23ecef093f1610f92207cc13589</anchor>
      <arglist>(double tol) const</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>nrIterations</name>
      <anchorfile>a03932.html</anchorfile>
      <anchor>af6ad9276cf74347a207fc72cac5d79cd</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>compute</name>
      <anchorfile>a03932.html</anchorfile>
      <anchor>adf125a55542b6b8889e1fbbf8ca6d412</anchor>
      <arglist>(size_t maxIterations, double tol)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>eigenvalue</name>
      <anchorfile>a03932.html</anchorfile>
      <anchor>a50cd517d97bfb4e1ab29c1b7b9b8aec5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Vector</type>
      <name>eigenvector</name>
      <anchorfile>a03932.html</anchorfile>
      <anchor>a15e499d997ab3e8d388cb8d2cfe138f2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const Operator &amp;</type>
      <name>A_</name>
      <anchorfile>a03932.html</anchorfile>
      <anchor>a403a1a99553f905fb490b12c44be24f8</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::Preconditioner</name>
    <filename>a03940.html</filename>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>solve</name>
      <anchorfile>a03940.html</anchorfile>
      <anchor>a1487b9feccdfff75cf25cff86affb81b</anchor>
      <arglist>(const Vector &amp;y, Vector &amp;x) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>transposeSolve</name>
      <anchorfile>a03940.html</anchorfile>
      <anchor>aae3d89e2b3e004d227e9fd28ff8dba64</anchor>
      <arglist>(const Vector &amp;y, Vector &amp;x) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>build</name>
      <anchorfile>a03940.html</anchorfile>
      <anchor>a2d978320d9036aa10dcb4cf4ae289739</anchor>
      <arglist>(const GaussianFactorGraph &amp;gfg, const KeyInfo &amp;info, const std::map&lt; Key, Vector &gt; &amp;lambda)=0</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>gtsam::PreconditionerParameters</name>
    <filename>a03936.html</filename>
  </compound>
  <compound kind="class">
    <name>gtsam::PredecessorMap</name>
    <filename>a03576.html</filename>
    <templarg>class KEY</templarg>
    <member kind="function">
      <type>void</type>
      <name>insert</name>
      <anchorfile>a03576.html</anchorfile>
      <anchor>a682e34c430a538cf5792a49b2d4697e9</anchor>
      <arglist>(const KEY &amp;key, const KEY &amp;parent)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::PreintegratedAhrsMeasurements</name>
    <filename>a04024.html</filename>
    <base>gtsam::PreintegratedRotation</base>
    <member kind="function">
      <type></type>
      <name>PreintegratedAhrsMeasurements</name>
      <anchorfile>a04024.html</anchorfile>
      <anchor>ae37277d97a500ca9ae98682821e5eb61</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PreintegratedAhrsMeasurements</name>
      <anchorfile>a04024.html</anchorfile>
      <anchor>ab223cf8e404c688014e73154d551e85e</anchor>
      <arglist>(const boost::shared_ptr&lt; Params &gt; &amp;p, const Vector3 &amp;biasHat)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PreintegratedAhrsMeasurements</name>
      <anchorfile>a04024.html</anchorfile>
      <anchor>ad0e3bbcd43f9e574a03292d00c5c2e79</anchor>
      <arglist>(const boost::shared_ptr&lt; Params &gt; &amp;p, const Vector3 &amp;bias_hat, double deltaTij, const Rot3 &amp;deltaRij, const Matrix3 &amp;delRdelBiasOmega, const Matrix3 &amp;preint_meas_cov)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>a04024.html</anchorfile>
      <anchor>a2355d2f603e4ad6d5df418fac26d6579</anchor>
      <arglist>(const std::string &amp;s=&quot;Preintegrated Measurements: &quot;) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>equals</name>
      <anchorfile>a04024.html</anchorfile>
      <anchor>ae3b9f8f5d1d5f397f06e13c12d8ea75b</anchor>
      <arglist>(const PreintegratedAhrsMeasurements &amp;, double tol=1e-9) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resetIntegration</name>
      <anchorfile>a04024.html</anchorfile>
      <anchor>a6b18d19def1f97d5c4c2a3f5f33a9eb7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>integrateMeasurement</name>
      <anchorfile>a04024.html</anchorfile>
      <anchor>a051cbc796709f657c8988c0755aaaf6d</anchor>
      <arglist>(const Vector3 &amp;measuredOmega, double deltaT)</arglist>
    </member>
    <member kind="function">
      <type>Vector3</type>
      <name>predict</name>
      <anchorfile>a04024.html</anchorfile>
      <anchor>a89701c96e7d6cbff07900aa2c7bb2c95</anchor>
      <arglist>(const Vector3 &amp;bias, OptionalJacobian&lt; 3, 3 &gt; H=boost::none) const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PreintegratedAhrsMeasurements</name>
      <anchorfile>a04024.html</anchorfile>
      <anchor>a7b586af5a0ce47da8a64cbc6047216fe</anchor>
      <arglist>(const Vector3 &amp;biasHat, const Matrix3 &amp;measuredOmegaCovariance)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Vector3</type>
      <name>biasHat_</name>
      <anchorfile>a04024.html</anchorfile>
      <anchor>a2afdb871fd5690fe3017d26728714f18</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Matrix3</type>
      <name>preintMeasCov_</name>
      <anchorfile>a04024.html</anchorfile>
      <anchor>ac4e58456c03e2e2ed835d0455e6b591c</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>boost::serialization::access</name>
      <anchorfile>a04024.html</anchorfile>
      <anchor>ac98d07dd8f7b70e16ccb9a01abf56b9c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::PreintegratedCombinedMeasurements</name>
    <filename>a04056.html</filename>
    <base>gtsam::ManifoldPreintegration</base>
    <member kind="function">
      <type></type>
      <name>PreintegratedCombinedMeasurements</name>
      <anchorfile>a04056.html</anchorfile>
      <anchor>a8d86e0d37b74640d5ac6d7efc2f02c8e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PreintegratedCombinedMeasurements</name>
      <anchorfile>a04056.html</anchorfile>
      <anchor>af27a09b0665d2cdc0e598cfb56296e2c</anchor>
      <arglist>(const boost::shared_ptr&lt; Params &gt; &amp;p, const imuBias::ConstantBias &amp;biasHat=imuBias::ConstantBias())</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PreintegratedCombinedMeasurements</name>
      <anchorfile>a04056.html</anchorfile>
      <anchor>a34e2f12de09b370ab111168a0894b694</anchor>
      <arglist>(const PreintegrationType &amp;base, const Eigen::Matrix&lt; double, 15, 15 &gt; &amp;preintMeasCov)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~PreintegratedCombinedMeasurements</name>
      <anchorfile>a04056.html</anchorfile>
      <anchor>a3c37f2688a71e6f0736f6e668082fe80</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resetIntegration</name>
      <anchorfile>a04056.html</anchorfile>
      <anchor>afabc1d4fda08383f44b0d59967908f8f</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>Params &amp;</type>
      <name>p</name>
      <anchorfile>a04056.html</anchorfile>
      <anchor>ae14b02ae69aba415d90bc1dc16411f4f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>equals</name>
      <anchorfile>a04056.html</anchorfile>
      <anchor>a4075f53ca73ef6fa81e29e5fefd5dd2b</anchor>
      <arglist>(const PreintegratedCombinedMeasurements &amp;expected, double tol=1e-9) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>integrateMeasurement</name>
      <anchorfile>a04056.html</anchorfile>
      <anchor>a9c9d6f736444eab5d49fa9a9b305c738</anchor>
      <arglist>(const Vector3 &amp;measuredAcc, const Vector3 &amp;measuredOmega, const double dt) override</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PreintegratedCombinedMeasurements</name>
      <anchorfile>a04056.html</anchorfile>
      <anchor>a8d86e0d37b74640d5ac6d7efc2f02c8e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PreintegratedCombinedMeasurements</name>
      <anchorfile>a04056.html</anchorfile>
      <anchor>af27a09b0665d2cdc0e598cfb56296e2c</anchor>
      <arglist>(const boost::shared_ptr&lt; Params &gt; &amp;p, const imuBias::ConstantBias &amp;biasHat=imuBias::ConstantBias())</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PreintegratedCombinedMeasurements</name>
      <anchorfile>a04056.html</anchorfile>
      <anchor>a34e2f12de09b370ab111168a0894b694</anchor>
      <arglist>(const PreintegrationType &amp;base, const Eigen::Matrix&lt; double, 15, 15 &gt; &amp;preintMeasCov)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~PreintegratedCombinedMeasurements</name>
      <anchorfile>a04056.html</anchorfile>
      <anchor>a3c37f2688a71e6f0736f6e668082fe80</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resetIntegration</name>
      <anchorfile>a04056.html</anchorfile>
      <anchor>afabc1d4fda08383f44b0d59967908f8f</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>Params &amp;</type>
      <name>p</name>
      <anchorfile>a04056.html</anchorfile>
      <anchor>ae14b02ae69aba415d90bc1dc16411f4f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>equals</name>
      <anchorfile>a04056.html</anchorfile>
      <anchor>a4075f53ca73ef6fa81e29e5fefd5dd2b</anchor>
      <arglist>(const PreintegratedCombinedMeasurements &amp;expected, double tol=1e-9) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>integrateMeasurement</name>
      <anchorfile>a04056.html</anchorfile>
      <anchor>a9c9d6f736444eab5d49fa9a9b305c738</anchor>
      <arglist>(const Vector3 &amp;measuredAcc, const Vector3 &amp;measuredOmega, const double dt) override</arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>boost::serialization::access</name>
      <anchorfile>a04056.html</anchorfile>
      <anchor>ac98d07dd8f7b70e16ccb9a01abf56b9c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::PreintegratedImuMeasurements</name>
    <filename>a04096.html</filename>
    <base>gtsam::ManifoldPreintegration</base>
    <member kind="function">
      <type></type>
      <name>PreintegratedImuMeasurements</name>
      <anchorfile>a04096.html</anchorfile>
      <anchor>aa721d1492af019a1402e37a6de502332</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PreintegratedImuMeasurements</name>
      <anchorfile>a04096.html</anchorfile>
      <anchor>a5245d321c127ab974124b66a6bec2197</anchor>
      <arglist>(const boost::shared_ptr&lt; PreintegrationParams &gt; &amp;p, const imuBias::ConstantBias &amp;biasHat=imuBias::ConstantBias())</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PreintegratedImuMeasurements</name>
      <anchorfile>a04096.html</anchorfile>
      <anchor>a78557e146fcc85022f3f6b883b2dd55b</anchor>
      <arglist>(const PreintegrationType &amp;base, const Matrix9 &amp;preintMeasCov)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~PreintegratedImuMeasurements</name>
      <anchorfile>a04096.html</anchorfile>
      <anchor>a348e4875ac77b30417e5f0371b3e597c</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>a04096.html</anchorfile>
      <anchor>af23f75e0cfc8c3de5b7558d3ab5eeeac</anchor>
      <arglist>(const std::string &amp;s=&quot;Preintegrated Measurements:&quot;) const override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>equals</name>
      <anchorfile>a04096.html</anchorfile>
      <anchor>a707df59c5b8586455ebb5e1c0ebdc332</anchor>
      <arglist>(const PreintegratedImuMeasurements &amp;expected, double tol=1e-9) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resetIntegration</name>
      <anchorfile>a04096.html</anchorfile>
      <anchor>a32712ad644fb2990ebeb7e39a3b7d3ec</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>integrateMeasurement</name>
      <anchorfile>a04096.html</anchorfile>
      <anchor>a988e29fd66bb628c2f7669acb21e1eb8</anchor>
      <arglist>(const Vector3 &amp;measuredAcc, const Vector3 &amp;measuredOmega, const double dt) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>integrateMeasurements</name>
      <anchorfile>a04096.html</anchorfile>
      <anchor>a7be2b4be8f31b0da8d0ee791a3e18c42</anchor>
      <arglist>(const Matrix &amp;measuredAccs, const Matrix &amp;measuredOmegas, const Matrix &amp;dts)</arglist>
    </member>
    <member kind="function">
      <type>Matrix</type>
      <name>preintMeasCov</name>
      <anchorfile>a04096.html</anchorfile>
      <anchor>abe18ef369004d8789af398089920f908</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Matrix9</type>
      <name>preintMeasCov_</name>
      <anchorfile>a04096.html</anchorfile>
      <anchor>acb8eb38a2b6f4b6969636c213113343b</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>boost::serialization::access</name>
      <anchorfile>a04096.html</anchorfile>
      <anchor>ac98d07dd8f7b70e16ccb9a01abf56b9c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::PreintegratedRotation</name>
    <filename>a04156.html</filename>
    <member kind="function">
      <type></type>
      <name>PreintegratedRotation</name>
      <anchorfile>a04156.html</anchorfile>
      <anchor>aa1900dc3e0d71ae87a3cd149739493dc</anchor>
      <arglist>(const boost::shared_ptr&lt; Params &gt; &amp;p)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PreintegratedRotation</name>
      <anchorfile>a04156.html</anchorfile>
      <anchor>a845409e08ff8c2de417086eff14aac88</anchor>
      <arglist>(const boost::shared_ptr&lt; Params &gt; &amp;p, double deltaTij, const Rot3 &amp;deltaRij, const Matrix3 &amp;delRdelBiasOmega)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resetIntegration</name>
      <anchorfile>a04156.html</anchorfile>
      <anchor>afef7a62e383296931b88afe371ec8f3c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>matchesParamsWith</name>
      <anchorfile>a04156.html</anchorfile>
      <anchor>ad4a13c89dc8226456aaeef68736b9ae2</anchor>
      <arglist>(const PreintegratedRotation &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>Rot3</type>
      <name>incrementalRotation</name>
      <anchorfile>a04156.html</anchorfile>
      <anchor>a8ae1c42a1167736378498fb09d4a761a</anchor>
      <arglist>(const Vector3 &amp;measuredOmega, const Vector3 &amp;biasHat, double deltaT, OptionalJacobian&lt; 3, 3 &gt; D_incrR_integratedOmega) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>integrateMeasurement</name>
      <anchorfile>a04156.html</anchorfile>
      <anchor>ac3f08ff7738f84d49725a8b72b7a9af2</anchor>
      <arglist>(const Vector3 &amp;measuredOmega, const Vector3 &amp;biasHat, double deltaT, OptionalJacobian&lt; 3, 3 &gt; D_incrR_integratedOmega=boost::none, OptionalJacobian&lt; 3, 3 &gt; F=boost::none)</arglist>
    </member>
    <member kind="function">
      <type>Rot3</type>
      <name>biascorrectedDeltaRij</name>
      <anchorfile>a04156.html</anchorfile>
      <anchor>a10fbefa82ee213aba78f119fb5acafba</anchor>
      <arglist>(const Vector3 &amp;biasOmegaIncr, OptionalJacobian&lt; 3, 3 &gt; H=boost::none) const</arglist>
    </member>
    <member kind="function">
      <type>Vector3</type>
      <name>integrateCoriolis</name>
      <anchorfile>a04156.html</anchorfile>
      <anchor>ade1b314ed09d29bdcdaa677b202d9a65</anchor>
      <arglist>(const Rot3 &amp;rot_i) const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PreintegratedRotation</name>
      <anchorfile>a04156.html</anchorfile>
      <anchor>aa1900dc3e0d71ae87a3cd149739493dc</anchor>
      <arglist>(const boost::shared_ptr&lt; Params &gt; &amp;p)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PreintegratedRotation</name>
      <anchorfile>a04156.html</anchorfile>
      <anchor>a845409e08ff8c2de417086eff14aac88</anchor>
      <arglist>(const boost::shared_ptr&lt; Params &gt; &amp;p, double deltaTij, const Rot3 &amp;deltaRij, const Matrix3 &amp;delRdelBiasOmega)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resetIntegration</name>
      <anchorfile>a04156.html</anchorfile>
      <anchor>afef7a62e383296931b88afe371ec8f3c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>matchesParamsWith</name>
      <anchorfile>a04156.html</anchorfile>
      <anchor>ad4a13c89dc8226456aaeef68736b9ae2</anchor>
      <arglist>(const PreintegratedRotation &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>Rot3</type>
      <name>incrementalRotation</name>
      <anchorfile>a04156.html</anchorfile>
      <anchor>a8ae1c42a1167736378498fb09d4a761a</anchor>
      <arglist>(const Vector3 &amp;measuredOmega, const Vector3 &amp;biasHat, double deltaT, OptionalJacobian&lt; 3, 3 &gt; D_incrR_integratedOmega) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>integrateMeasurement</name>
      <anchorfile>a04156.html</anchorfile>
      <anchor>ac3f08ff7738f84d49725a8b72b7a9af2</anchor>
      <arglist>(const Vector3 &amp;measuredOmega, const Vector3 &amp;biasHat, double deltaT, OptionalJacobian&lt; 3, 3 &gt; D_incrR_integratedOmega=boost::none, OptionalJacobian&lt; 3, 3 &gt; F=boost::none)</arglist>
    </member>
    <member kind="function">
      <type>Rot3</type>
      <name>biascorrectedDeltaRij</name>
      <anchorfile>a04156.html</anchorfile>
      <anchor>a10fbefa82ee213aba78f119fb5acafba</anchor>
      <arglist>(const Vector3 &amp;biasOmegaIncr, OptionalJacobian&lt; 3, 3 &gt; H=boost::none) const</arglist>
    </member>
    <member kind="function">
      <type>Vector3</type>
      <name>integrateCoriolis</name>
      <anchorfile>a04156.html</anchorfile>
      <anchor>ade1b314ed09d29bdcdaa677b202d9a65</anchor>
      <arglist>(const Rot3 &amp;rot_i) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>PreintegratedRotation</name>
      <anchorfile>a04156.html</anchorfile>
      <anchor>ae744d5c7fcf27da650d08f65467f15e1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>boost::shared_ptr&lt; Params &gt;</type>
      <name>p_</name>
      <anchorfile>a04156.html</anchorfile>
      <anchor>a6a57eaeabb9d6144a8dff15e9b895a87</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>deltaTij_</name>
      <anchorfile>a04156.html</anchorfile>
      <anchor>ac290e4fa241ce8f6a7a1c94e6f2fccb8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Rot3</type>
      <name>deltaRij_</name>
      <anchorfile>a04156.html</anchorfile>
      <anchor>aead7cee1ef09b022ad4e2836c51c4cc0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Matrix3</type>
      <name>delRdelBiasOmega_</name>
      <anchorfile>a04156.html</anchorfile>
      <anchor>a44e2af0899009e3d0eb935bc411d14a1</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>boost::serialization::access</name>
      <anchorfile>a04156.html</anchorfile>
      <anchor>ac98d07dd8f7b70e16ccb9a01abf56b9c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>gtsam::PreintegratedRotationParams</name>
    <filename>a04152.html</filename>
    <member kind="variable">
      <type>Matrix3</type>
      <name>gyroscopeCovariance</name>
      <anchorfile>a04152.html</anchorfile>
      <anchor>a59e97f78c2725df39d3844e75d950fa8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>boost::optional&lt; Vector3 &gt;</type>
      <name>omegaCoriolis</name>
      <anchorfile>a04152.html</anchorfile>
      <anchor>a58b443499fde3879301ea6ef9604a130</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>boost::optional&lt; Pose3 &gt;</type>
      <name>body_P_sensor</name>
      <anchorfile>a04152.html</anchorfile>
      <anchor>a12119fb0a8727799308455777aeaadb6</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>boost::serialization::access</name>
      <anchorfile>a04152.html</anchorfile>
      <anchor>ac98d07dd8f7b70e16ccb9a01abf56b9c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::PreintegrationBase</name>
    <filename>a04164.html</filename>
    <member kind="friend">
      <type>friend class</type>
      <name>boost::serialization::access</name>
      <anchorfile>a04164.html</anchorfile>
      <anchor>ac98d07dd8f7b70e16ccb9a01abf56b9c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>std::pair&lt; Vector3, Vector3 &gt;</type>
      <name>correctMeasurementsBySensorPose</name>
      <anchorfile>a04164.html</anchorfile>
      <anchor>afd4f1d6e3b27cf02d8fb04642f01cf60</anchor>
      <arglist>(const Vector3 &amp;unbiasedAcc, const Vector3 &amp;unbiasedOmega, OptionalJacobian&lt; 3, 3 &gt; correctedAcc_H_unbiasedAcc=boost::none, OptionalJacobian&lt; 3, 3 &gt; correctedAcc_H_unbiasedOmega=boost::none, OptionalJacobian&lt; 3, 3 &gt; correctedOmega_H_unbiasedOmega=boost::none) const</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>update</name>
      <anchorfile>a04164.html</anchorfile>
      <anchor>af562d10048eb544a7057443feaefb8c6</anchor>
      <arglist>(const Vector3 &amp;measuredAcc, const Vector3 &amp;measuredOmega, const double dt, Matrix9 *A, Matrix93 *B, Matrix93 *C)=0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>integrateMeasurement</name>
      <anchorfile>a04164.html</anchorfile>
      <anchor>af81180bb6e01ac950d29784a43e8f18d</anchor>
      <arglist>(const Vector3 &amp;measuredAcc, const Vector3 &amp;measuredOmega, const double dt)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual Vector9</type>
      <name>biasCorrectedDelta</name>
      <anchorfile>a04164.html</anchorfile>
      <anchor>a60931119ee6fa92d208a0f2a57c86f44</anchor>
      <arglist>(const imuBias::ConstantBias &amp;bias_i, OptionalJacobian&lt; 9, 6 &gt; H=boost::none) const =0</arglist>
    </member>
    <member kind="function">
      <type>NavState</type>
      <name>predict</name>
      <anchorfile>a04164.html</anchorfile>
      <anchor>a7015fe8c3bca3f16cbb2cde2c0c0490e</anchor>
      <arglist>(const NavState &amp;state_i, const imuBias::ConstantBias &amp;bias_i, OptionalJacobian&lt; 9, 9 &gt; H1=boost::none, OptionalJacobian&lt; 9, 6 &gt; H2=boost::none) const</arglist>
    </member>
    <member kind="function">
      <type>Vector9</type>
      <name>computeError</name>
      <anchorfile>a04164.html</anchorfile>
      <anchor>a42d05558104ab6ff36d87502a0e90856</anchor>
      <arglist>(const NavState &amp;state_i, const NavState &amp;state_j, const imuBias::ConstantBias &amp;bias_i, OptionalJacobian&lt; 9, 9 &gt; H1, OptionalJacobian&lt; 9, 9 &gt; H2, OptionalJacobian&lt; 9, 6 &gt; H3) const</arglist>
    </member>
    <member kind="function">
      <type>Vector9</type>
      <name>computeErrorAndJacobians</name>
      <anchorfile>a04164.html</anchorfile>
      <anchor>a38d963567b8b346c38f86405f2964ef5</anchor>
      <arglist>(const Pose3 &amp;pose_i, const Vector3 &amp;vel_i, const Pose3 &amp;pose_j, const Vector3 &amp;vel_j, const imuBias::ConstantBias &amp;bias_i, OptionalJacobian&lt; 9, 6 &gt; H1=boost::none, OptionalJacobian&lt; 9, 3 &gt; H2=boost::none, OptionalJacobian&lt; 9, 6 &gt; H3=boost::none, OptionalJacobian&lt; 9, 3 &gt; H4=boost::none, OptionalJacobian&lt; 9, 6 &gt; H5=boost::none) const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PreintegrationBase</name>
      <anchorfile>a04164.html</anchorfile>
      <anchor>ab2d778943f9acd1126975f7133fa73c5</anchor>
      <arglist>(const boost::shared_ptr&lt; Params &gt; &amp;p, const imuBias::ConstantBias &amp;biasHat=imuBias::ConstantBias())</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>matchesParamsWith</name>
      <anchorfile>a04164.html</anchorfile>
      <anchor>a4d978fd06c9d44dfdcf2eee1e4b33e79</anchor>
      <arglist>(const PreintegrationBase &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>const boost::shared_ptr&lt; Params &gt; &amp;</type>
      <name>params</name>
      <anchorfile>a04164.html</anchorfile>
      <anchor>abf8bcbed6faa28b929feb17ebc945cbc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Params &amp;</type>
      <name>p</name>
      <anchorfile>a04164.html</anchorfile>
      <anchor>a62835e11ff9409ffd26a59c6ec8d7cfd</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PreintegrationBase</name>
      <anchorfile>a04164.html</anchorfile>
      <anchor>ab2d778943f9acd1126975f7133fa73c5</anchor>
      <arglist>(const boost::shared_ptr&lt; Params &gt; &amp;p, const imuBias::ConstantBias &amp;biasHat=imuBias::ConstantBias())</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>matchesParamsWith</name>
      <anchorfile>a04164.html</anchorfile>
      <anchor>a4d978fd06c9d44dfdcf2eee1e4b33e79</anchor>
      <arglist>(const PreintegrationBase &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>const boost::shared_ptr&lt; Params &gt; &amp;</type>
      <name>params</name>
      <anchorfile>a04164.html</anchorfile>
      <anchor>abf8bcbed6faa28b929feb17ebc945cbc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Params &amp;</type>
      <name>p</name>
      <anchorfile>a04164.html</anchorfile>
      <anchor>a62835e11ff9409ffd26a59c6ec8d7cfd</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>PreintegrationBase</name>
      <anchorfile>a04164.html</anchorfile>
      <anchor>a85da47fc93662940e6bd38d02a3b3118</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~PreintegrationBase</name>
      <anchorfile>a04164.html</anchorfile>
      <anchor>a4d5ead934c4582183ddc8a7b415decef</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Bias</type>
      <name>biasHat_</name>
      <anchorfile>a04164.html</anchorfile>
      <anchor>a774c243fcec68bbfcfc2c62db3ca2d2a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>deltaTij_</name>
      <anchorfile>a04164.html</anchorfile>
      <anchor>a05698caf670ddcd7a108505898a71134</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>gtsam::PreintegrationCombinedParams</name>
    <filename>a04052.html</filename>
    <base>gtsam::PreintegrationParams</base>
    <member kind="function">
      <type></type>
      <name>PreintegrationCombinedParams</name>
      <anchorfile>a04052.html</anchorfile>
      <anchor>a811adb48729d4b60f3b69d657e620fe0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PreintegrationCombinedParams</name>
      <anchorfile>a04052.html</anchorfile>
      <anchor>a58fe7d6b87985831e14de19acb729f4f</anchor>
      <arglist>(const Vector3 &amp;n_gravity)</arglist>
    </member>
    <member kind="variable">
      <type>Matrix3</type>
      <name>biasAccCovariance</name>
      <anchorfile>a04052.html</anchorfile>
      <anchor>af2eda5c67b594a6e4276465503b1f00b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Matrix3</type>
      <name>biasOmegaCovariance</name>
      <anchorfile>a04052.html</anchorfile>
      <anchor>ad871987bbb1686a134f0e0212793ed67</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Matrix6</type>
      <name>biasAccOmegaInt</name>
      <anchorfile>a04052.html</anchorfile>
      <anchor>a0a7739a500c8feb97dc42687bacd6b77</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>boost::serialization::access</name>
      <anchorfile>a04052.html</anchorfile>
      <anchor>ac98d07dd8f7b70e16ccb9a01abf56b9c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>gtsam::PreintegrationParams</name>
    <filename>a04168.html</filename>
    <base>gtsam::PreintegratedRotationParams</base>
    <member kind="function">
      <type></type>
      <name>PreintegrationParams</name>
      <anchorfile>a04168.html</anchorfile>
      <anchor>a2b734623439aeb465143f0ca4a918ad8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PreintegrationParams</name>
      <anchorfile>a04168.html</anchorfile>
      <anchor>a4172ae9d785221171cf39c019547ba51</anchor>
      <arglist>(const Vector3 &amp;n_gravity)</arglist>
    </member>
    <member kind="variable">
      <type>Matrix3</type>
      <name>accelerometerCovariance</name>
      <anchorfile>a04168.html</anchorfile>
      <anchor>a1fb0a8f02d0568b27b2bd6a25c558935</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Matrix3</type>
      <name>integrationCovariance</name>
      <anchorfile>a04168.html</anchorfile>
      <anchor>a593988febdb8bbf93a2524f14b98d16a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>use2ndOrderCoriolis</name>
      <anchorfile>a04168.html</anchorfile>
      <anchor>a2732ec155327ae88f23a6b983c173162</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Vector3</type>
      <name>n_gravity</name>
      <anchorfile>a04168.html</anchorfile>
      <anchor>a355a21d1ad3b0ab250ab8596790eb387</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>boost::serialization::access</name>
      <anchorfile>a04168.html</anchorfile>
      <anchor>ac98d07dd8f7b70e16ccb9a01abf56b9c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::PriorFactor</name>
    <filename>a04500.html</filename>
    <templarg>class VALUE</templarg>
    <base>gtsam::NoiseModelFactor1</base>
    <member kind="function">
      <type></type>
      <name>PriorFactor</name>
      <anchorfile>a04500.html</anchorfile>
      <anchor>a17a6bb1e3cde61261a2e998d7869c74a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PriorFactor</name>
      <anchorfile>a04500.html</anchorfile>
      <anchor>abfaae06f4b11fa2ca13d9e7012558a8e</anchor>
      <arglist>(Key key, const VALUE &amp;prior, const SharedNoiseModel &amp;model=nullptr)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PriorFactor</name>
      <anchorfile>a04500.html</anchorfile>
      <anchor>a51256d9bd0f3d7842406157ca5485f35</anchor>
      <arglist>(Key key, const VALUE &amp;prior, const Matrix &amp;covariance)</arglist>
    </member>
    <member kind="function">
      <type>gtsam::NonlinearFactor::shared_ptr</type>
      <name>clone</name>
      <anchorfile>a04500.html</anchorfile>
      <anchor>af8228364964fe8505ad7969e47230f0c</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>a04500.html</anchorfile>
      <anchor>a5a1856976a4e5c4208872567896fb52f</anchor>
      <arglist>(const std::string &amp;s, const KeyFormatter &amp;keyFormatter=DefaultKeyFormatter) const override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>equals</name>
      <anchorfile>a04500.html</anchorfile>
      <anchor>a872702c81465bf7b64998284105347df</anchor>
      <arglist>(const NonlinearFactor &amp;expected, double tol=1e-9) const override</arglist>
    </member>
    <member kind="function">
      <type>Vector</type>
      <name>evaluateError</name>
      <anchorfile>a04500.html</anchorfile>
      <anchor>ab59677dbfa55b63e89c40cda8552f56b</anchor>
      <arglist>(const T &amp;x, boost::optional&lt; Matrix &amp; &gt; H=boost::none) const override</arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; PriorFactor&lt; VALUE &gt; &gt;</type>
      <name>shared_ptr</name>
      <anchorfile>a04500.html</anchorfile>
      <anchor>a99936335b31d38f22c30f1f184396278</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>PriorFactor&lt; VALUE &gt;</type>
      <name>This</name>
      <anchorfile>a04500.html</anchorfile>
      <anchor>a08069e4df59458c6d65e91a9bd671c83</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>boost::serialization::access</name>
      <anchorfile>a04500.html</anchorfile>
      <anchor>ac98d07dd8f7b70e16ccb9a01abf56b9c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::ProductLieGroup</name>
    <filename>a02632.html</filename>
    <templarg>typename G</templarg>
    <templarg>typename H</templarg>
    <member kind="function">
      <type></type>
      <name>ProductLieGroup</name>
      <anchorfile>a02632.html</anchorfile>
      <anchor>aa25886a3e8642f111a265dec1045c6f3</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::ProjectionFactorPPP</name>
    <filename>a05320.html</filename>
    <templarg>class POSE</templarg>
    <templarg>class LANDMARK</templarg>
    <templarg>class CALIBRATION</templarg>
    <base>NoiseModelFactor3&lt; POSE, POSE, LANDMARK &gt;</base>
    <member kind="function">
      <type></type>
      <name>ProjectionFactorPPP</name>
      <anchorfile>a05320.html</anchorfile>
      <anchor>a589c25761c57d14af73256cae5fadec2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ProjectionFactorPPP</name>
      <anchorfile>a05320.html</anchorfile>
      <anchor>a177ebd896e28da54d7082c59b81bdc0e</anchor>
      <arglist>(const Point2 &amp;measured, const SharedNoiseModel &amp;model, Key poseKey, Key transformKey, Key pointKey, const boost::shared_ptr&lt; CALIBRATION &gt; &amp;K)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ProjectionFactorPPP</name>
      <anchorfile>a05320.html</anchorfile>
      <anchor>aea0762713d7a9405d90526a0e142fb05</anchor>
      <arglist>(const Point2 &amp;measured, const SharedNoiseModel &amp;model, Key poseKey, Key transformKey, Key pointKey, const boost::shared_ptr&lt; CALIBRATION &gt; &amp;K, bool throwCheirality, bool verboseCheirality)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ProjectionFactorPPP</name>
      <anchorfile>a05320.html</anchorfile>
      <anchor>a8a1ffbcd0bd291fefb07667f0152257a</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>NonlinearFactor::shared_ptr</type>
      <name>clone</name>
      <anchorfile>a05320.html</anchorfile>
      <anchor>a1462ac1f47d7adc51a1574f3435760c5</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>a05320.html</anchorfile>
      <anchor>a7479b1fe07bf1f0cedd207f7914aeccb</anchor>
      <arglist>(const std::string &amp;s=&quot;&quot;, const KeyFormatter &amp;keyFormatter=DefaultKeyFormatter) const override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>equals</name>
      <anchorfile>a05320.html</anchorfile>
      <anchor>a104354456ddafb590d8700d84da1b375</anchor>
      <arglist>(const NonlinearFactor &amp;p, double tol=1e-9) const override</arglist>
    </member>
    <member kind="function">
      <type>Vector</type>
      <name>evaluateError</name>
      <anchorfile>a05320.html</anchorfile>
      <anchor>ab510b9945477f0c92cd324382780388b</anchor>
      <arglist>(const Pose3 &amp;pose, const Pose3 &amp;transform, const Point3 &amp;point, boost::optional&lt; Matrix &amp; &gt; H1=boost::none, boost::optional&lt; Matrix &amp; &gt; H2=boost::none, boost::optional&lt; Matrix &amp; &gt; H3=boost::none) const override</arglist>
    </member>
    <member kind="function">
      <type>const Point2 &amp;</type>
      <name>measured</name>
      <anchorfile>a05320.html</anchorfile>
      <anchor>afb54d9a827512c84a613de57ae917aab</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const boost::shared_ptr&lt; CALIBRATION &gt;</type>
      <name>calibration</name>
      <anchorfile>a05320.html</anchorfile>
      <anchor>aeafa11e0bbf0d0dee8f86e9761db3865</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>verboseCheirality</name>
      <anchorfile>a05320.html</anchorfile>
      <anchor>afff13be68448debfb2f000b66d2122c7</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>throwCheirality</name>
      <anchorfile>a05320.html</anchorfile>
      <anchor>a44dec190fc18fac36c699efcecddc6d6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="typedef">
      <type>NoiseModelFactor3&lt; POSE, POSE, LANDMARK &gt;</type>
      <name>Base</name>
      <anchorfile>a05320.html</anchorfile>
      <anchor>af5b00561d31ef7e336860fc18be9cb02</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ProjectionFactorPPP&lt; POSE, LANDMARK, CALIBRATION &gt;</type>
      <name>This</name>
      <anchorfile>a05320.html</anchorfile>
      <anchor>a5d24ba7d314270d1d8c41ce03f2d68da</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; This &gt;</type>
      <name>shared_ptr</name>
      <anchorfile>a05320.html</anchorfile>
      <anchor>ac3e12d75639d43d2207f287ea5994df8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Point2</type>
      <name>measured_</name>
      <anchorfile>a05320.html</anchorfile>
      <anchor>a9e698f7757fac5f204c864f103d57aca</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>boost::shared_ptr&lt; CALIBRATION &gt;</type>
      <name>K_</name>
      <anchorfile>a05320.html</anchorfile>
      <anchor>aa73006508ebe7142eeeafa5cb404071d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>throwCheirality_</name>
      <anchorfile>a05320.html</anchorfile>
      <anchor>ac0f752b9c0383f5713707f255bcced6f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>verboseCheirality_</name>
      <anchorfile>a05320.html</anchorfile>
      <anchor>a1491acbd1b2524022c1306060ffe44b0</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>boost::serialization::access</name>
      <anchorfile>a05320.html</anchorfile>
      <anchor>ac98d07dd8f7b70e16ccb9a01abf56b9c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::ProjectionFactorPPPC</name>
    <filename>a05328.html</filename>
    <templarg>class POSE</templarg>
    <templarg>class LANDMARK</templarg>
    <templarg>class CALIBRATION</templarg>
    <base>NoiseModelFactor4&lt; POSE, POSE, LANDMARK, Cal3_S2 &gt;</base>
    <member kind="function">
      <type></type>
      <name>ProjectionFactorPPPC</name>
      <anchorfile>a05328.html</anchorfile>
      <anchor>a4a0656579705f1736865de1a947d7217</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ProjectionFactorPPPC</name>
      <anchorfile>a05328.html</anchorfile>
      <anchor>aebaf6d080d0a2dadee9e208f27cf2079</anchor>
      <arglist>(const Point2 &amp;measured, const SharedNoiseModel &amp;model, Key poseKey, Key transformKey, Key pointKey, Key calibKey)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ProjectionFactorPPPC</name>
      <anchorfile>a05328.html</anchorfile>
      <anchor>a6891b990aa68b652574949b54fea4bd6</anchor>
      <arglist>(const Point2 &amp;measured, const SharedNoiseModel &amp;model, Key poseKey, Key transformKey, Key pointKey, Key calibKey, bool throwCheirality, bool verboseCheirality)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ProjectionFactorPPPC</name>
      <anchorfile>a05328.html</anchorfile>
      <anchor>ae089ec2491a587ec0675e5b090a18f7a</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>NonlinearFactor::shared_ptr</type>
      <name>clone</name>
      <anchorfile>a05328.html</anchorfile>
      <anchor>a32a10e85207bcdfa317a95d0ddada5f7</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>a05328.html</anchorfile>
      <anchor>a6c3bceed57ad7c9f6ffe2db1ba736ee5</anchor>
      <arglist>(const std::string &amp;s=&quot;&quot;, const KeyFormatter &amp;keyFormatter=DefaultKeyFormatter) const override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>equals</name>
      <anchorfile>a05328.html</anchorfile>
      <anchor>a3b774da0693619dead0671fd7d60e0ca</anchor>
      <arglist>(const NonlinearFactor &amp;p, double tol=1e-9) const override</arglist>
    </member>
    <member kind="function">
      <type>Vector</type>
      <name>evaluateError</name>
      <anchorfile>a05328.html</anchorfile>
      <anchor>aeaac0ba188fb4b69fbf915bec0cd8ed6</anchor>
      <arglist>(const Pose3 &amp;pose, const Pose3 &amp;transform, const Point3 &amp;point, const CALIBRATION &amp;K, boost::optional&lt; Matrix &amp; &gt; H1=boost::none, boost::optional&lt; Matrix &amp; &gt; H2=boost::none, boost::optional&lt; Matrix &amp; &gt; H3=boost::none, boost::optional&lt; Matrix &amp; &gt; H4=boost::none) const override</arglist>
    </member>
    <member kind="function">
      <type>const Point2 &amp;</type>
      <name>measured</name>
      <anchorfile>a05328.html</anchorfile>
      <anchor>a2aaf0487c2f876872e7b904bbb86c29b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>verboseCheirality</name>
      <anchorfile>a05328.html</anchorfile>
      <anchor>a976ed3a887b0aa05d18fdcab03e40b14</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>throwCheirality</name>
      <anchorfile>a05328.html</anchorfile>
      <anchor>ab2f7f79705c8d6c7cdb070aaab8e411d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="typedef">
      <type>NoiseModelFactor4&lt; POSE, POSE, LANDMARK, CALIBRATION &gt;</type>
      <name>Base</name>
      <anchorfile>a05328.html</anchorfile>
      <anchor>a891b5bdb2014f6c1845c76cd0feb46d1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ProjectionFactorPPPC&lt; POSE, LANDMARK, CALIBRATION &gt;</type>
      <name>This</name>
      <anchorfile>a05328.html</anchorfile>
      <anchor>a132b45cc5b5bb701d02e9d18a903aa7f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; This &gt;</type>
      <name>shared_ptr</name>
      <anchorfile>a05328.html</anchorfile>
      <anchor>a3951c828e749aa83499b5f70674b54fa</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Point2</type>
      <name>measured_</name>
      <anchorfile>a05328.html</anchorfile>
      <anchor>a9077d49edc80d41f4548baa0ce3dfcf3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>throwCheirality_</name>
      <anchorfile>a05328.html</anchorfile>
      <anchor>a7f13081f4eb981ca6cf610a74f8b9e6d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>verboseCheirality_</name>
      <anchorfile>a05328.html</anchorfile>
      <anchor>a3c9a438838b0550ba4155e60c912eeff</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>boost::serialization::access</name>
      <anchorfile>a05328.html</anchorfile>
      <anchor>ac98d07dd8f7b70e16ccb9a01abf56b9c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::ProjectionFactorRollingShutter</name>
    <filename>a05336.html</filename>
    <base>NoiseModelFactor3&lt; Pose3, Pose3, Point3 &gt;</base>
    <member kind="function">
      <type></type>
      <name>ProjectionFactorRollingShutter</name>
      <anchorfile>a05336.html</anchorfile>
      <anchor>a9ac6e9c8420eaac87a4f28ccfc3391db</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ProjectionFactorRollingShutter</name>
      <anchorfile>a05336.html</anchorfile>
      <anchor>a6402f9d8875982d7ec94885a66ad0484</anchor>
      <arglist>(const Point2 &amp;measured, double alpha, const SharedNoiseModel &amp;model, Key poseKey_a, Key poseKey_b, Key pointKey, const boost::shared_ptr&lt; Cal3_S2 &gt; &amp;K, boost::optional&lt; Pose3 &gt; body_P_sensor=boost::none)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ProjectionFactorRollingShutter</name>
      <anchorfile>a05336.html</anchorfile>
      <anchor>ab8365ab42223bb89a1d28e42efc3a4d9</anchor>
      <arglist>(const Point2 &amp;measured, double alpha, const SharedNoiseModel &amp;model, Key poseKey_a, Key poseKey_b, Key pointKey, const boost::shared_ptr&lt; Cal3_S2 &gt; &amp;K, bool throwCheirality, bool verboseCheirality, boost::optional&lt; Pose3 &gt; body_P_sensor=boost::none)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ProjectionFactorRollingShutter</name>
      <anchorfile>a05336.html</anchorfile>
      <anchor>ae2e1f2d9f7b032d940b84b0fe86c37fa</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>gtsam::NonlinearFactor::shared_ptr</type>
      <name>clone</name>
      <anchorfile>a05336.html</anchorfile>
      <anchor>a3ce37da1f4fbc4dac740fd10c73c0684</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>a05336.html</anchorfile>
      <anchor>a1260aae4e7d0eb54ba79d92a412fb423</anchor>
      <arglist>(const std::string &amp;s=&quot;&quot;, const KeyFormatter &amp;keyFormatter=DefaultKeyFormatter) const override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>equals</name>
      <anchorfile>a05336.html</anchorfile>
      <anchor>af62caba48143deeda22eeff8ce469aa5</anchor>
      <arglist>(const NonlinearFactor &amp;p, double tol=1e-9) const override</arglist>
    </member>
    <member kind="function">
      <type>Vector</type>
      <name>evaluateError</name>
      <anchorfile>a05336.html</anchorfile>
      <anchor>a7efaac89c101f1d97679169a3d731e7b</anchor>
      <arglist>(const Pose3 &amp;pose_a, const Pose3 &amp;pose_b, const Point3 &amp;point, boost::optional&lt; Matrix &amp; &gt; H1=boost::none, boost::optional&lt; Matrix &amp; &gt; H2=boost::none, boost::optional&lt; Matrix &amp; &gt; H3=boost::none) const override</arglist>
    </member>
    <member kind="function">
      <type>const Point2 &amp;</type>
      <name>measured</name>
      <anchorfile>a05336.html</anchorfile>
      <anchor>a238a478d34f4e6fc6dc9e2c4f0f54d4c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const boost::shared_ptr&lt; Cal3_S2 &gt;</type>
      <name>calibration</name>
      <anchorfile>a05336.html</anchorfile>
      <anchor>a160b40e73d96266dd7cb8e1297c89dc8</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>alpha</name>
      <anchorfile>a05336.html</anchorfile>
      <anchor>aa18e8b27dc289936419d6668a240769d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>verboseCheirality</name>
      <anchorfile>a05336.html</anchorfile>
      <anchor>a86dd8f95a5ba0a9c3d2f0dec236f6b58</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>throwCheirality</name>
      <anchorfile>a05336.html</anchorfile>
      <anchor>a16d630d27bf257d3d45543c7200c8b91</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="typedef">
      <type>NoiseModelFactor3&lt; Pose3, Pose3, Point3 &gt;</type>
      <name>Base</name>
      <anchorfile>a05336.html</anchorfile>
      <anchor>a59f44334f54db6dfde7db415e2b7d67e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ProjectionFactorRollingShutter</type>
      <name>This</name>
      <anchorfile>a05336.html</anchorfile>
      <anchor>a678d042843d6ea97e488b2203581e645</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; This &gt;</type>
      <name>shared_ptr</name>
      <anchorfile>a05336.html</anchorfile>
      <anchor>af1c5bc60e158906cb0926f40deff7a4a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Point2</type>
      <name>measured_</name>
      <anchorfile>a05336.html</anchorfile>
      <anchor>aabe0458509ea493e34150afcaa777dec</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>alpha_</name>
      <anchorfile>a05336.html</anchorfile>
      <anchor>aba7298e56577cb1152cce0e6a77843f4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>boost::shared_ptr&lt; Cal3_S2 &gt;</type>
      <name>K_</name>
      <anchorfile>a05336.html</anchorfile>
      <anchor>a97fb9b1fcfe5392126a7aab7ec29f1f6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>boost::optional&lt; Pose3 &gt;</type>
      <name>body_P_sensor_</name>
      <anchorfile>a05336.html</anchorfile>
      <anchor>a0856f578d2781efe874e9db0f04bb31a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>throwCheirality_</name>
      <anchorfile>a05336.html</anchorfile>
      <anchor>ad483a9fb2fba89dace34fa4d376fe743</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>verboseCheirality_</name>
      <anchorfile>a05336.html</anchorfile>
      <anchor>af3e2e410b6e0829cb74c740f4fdbd0b5</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>boost::serialization::access</name>
      <anchorfile>a05336.html</anchorfile>
      <anchor>ac98d07dd8f7b70e16ccb9a01abf56b9c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>gtsam::QP</name>
    <filename>a05104.html</filename>
    <member kind="function">
      <type></type>
      <name>QP</name>
      <anchorfile>a05104.html</anchorfile>
      <anchor>ad544a37499ba9d678be25c0130b9378f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>QP</name>
      <anchorfile>a05104.html</anchorfile>
      <anchor>adf435b767063d6837b94cdcd94efc752</anchor>
      <arglist>(const GaussianFactorGraph &amp;_cost, const EqualityFactorGraph &amp;_linearEqualities, const InequalityFactorGraph &amp;_linearInequalities)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>a05104.html</anchorfile>
      <anchor>ab73ebe2b1b83af2151f6af8048a8f68a</anchor>
      <arglist>(const std::string &amp;s=&quot;&quot;)</arglist>
    </member>
    <member kind="variable">
      <type>GaussianFactorGraph</type>
      <name>cost</name>
      <anchorfile>a05104.html</anchorfile>
      <anchor>a1451f8006011f50382fac56e9bc201f7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>EqualityFactorGraph</type>
      <name>equalities</name>
      <anchorfile>a05104.html</anchorfile>
      <anchor>a057b647092792637cc6180852be1c2da</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>InequalityFactorGraph</type>
      <name>inequalities</name>
      <anchorfile>a05104.html</anchorfile>
      <anchor>a035aeb6d8eea0055ec191e14d3c1a2a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::QPInitSolver</name>
    <filename>a05108.html</filename>
    <member kind="function">
      <type></type>
      <name>QPInitSolver</name>
      <anchorfile>a05108.html</anchorfile>
      <anchor>a707146397c7df386d3204a5cd7645fab</anchor>
      <arglist>(const QP &amp;qp)</arglist>
    </member>
    <member kind="function">
      <type>VectorValues</type>
      <name>solve</name>
      <anchorfile>a05108.html</anchorfile>
      <anchor>ab17e293a327b632ccfa90e624defebec</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>gtsam::QPPolicy</name>
    <filename>a05112.html</filename>
    <member kind="function" static="yes">
      <type>static const GaussianFactorGraph</type>
      <name>buildCostFunction</name>
      <anchorfile>a05112.html</anchorfile>
      <anchor>ac3cb9b8ac1ccff09b784c4239d3ba0b3</anchor>
      <arglist>(const QP &amp;qp, const VectorValues &amp;xk=VectorValues())</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr double</type>
      <name>maxAlpha</name>
      <anchorfile>a05112.html</anchorfile>
      <anchor>a3ea4225936addef99667e41f5a86d754</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::QPSParser</name>
    <filename>a05124.html</filename>
  </compound>
  <compound kind="class">
    <name>gtsam::QPSParserException</name>
    <filename>a05128.html</filename>
    <base>ThreadsafeException&lt; QPSParserException &gt;</base>
  </compound>
  <compound kind="struct">
    <name>gtsam::Range</name>
    <filename>a03028.html</filename>
    <templarg>typename A1</templarg>
    <templarg>typename A2</templarg>
  </compound>
  <compound kind="struct">
    <name>gtsam::Range&lt; CalibratedCamera, T &gt;</name>
    <filename>a03148.html</filename>
    <templarg>typename T</templarg>
    <base>HasRange&lt; CalibratedCamera, T, double &gt;</base>
  </compound>
  <compound kind="struct">
    <name>gtsam::Range&lt; PinholeCamera&lt; Calibration &gt;, T &gt;</name>
    <filename>a03224.html</filename>
    <templarg>typename Calibration</templarg>
    <templarg>typename T</templarg>
    <base>HasRange&lt; PinholeCamera&lt; Calibration &gt;, T, double &gt;</base>
  </compound>
  <compound kind="struct">
    <name>gtsam::Range&lt; Point2, Point2 &gt;</name>
    <filename>a03256.html</filename>
  </compound>
  <compound kind="struct">
    <name>gtsam::Range&lt; Point3, Point3 &gt;</name>
    <filename>a03260.html</filename>
  </compound>
  <compound kind="struct">
    <name>gtsam::Range&lt; Pose2, T &gt;</name>
    <filename>a03284.html</filename>
    <templarg>typename T</templarg>
    <base>HasRange&lt; Pose2, T, double &gt;</base>
  </compound>
  <compound kind="struct">
    <name>gtsam::Range&lt; Pose3, T &gt;</name>
    <filename>a03312.html</filename>
    <templarg>typename T</templarg>
    <base>HasRange&lt; Pose3, T, double &gt;</base>
  </compound>
  <compound kind="struct">
    <name>gtsam::Range&lt; PoseRTV, PoseRTV &gt;</name>
    <filename>a05468.html</filename>
    <base>HasRange&lt; PoseRTV, PoseRTV, double &gt;</base>
  </compound>
  <compound kind="class">
    <name>gtsam::RangeFactor</name>
    <filename>a04616.html</filename>
    <templarg>typename A1</templarg>
    <templarg>typename A2</templarg>
    <templarg>typename T</templarg>
    <base>ExpressionFactorN&lt; double, A1, A1 &gt;</base>
    <member kind="function">
      <type></type>
      <name>RangeFactor</name>
      <anchorfile>a04616.html</anchorfile>
      <anchor>ac14920d2ec8d8ed84a30f42108a212ce</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>gtsam::NonlinearFactor::shared_ptr</type>
      <name>clone</name>
      <anchorfile>a04616.html</anchorfile>
      <anchor>a30b02823ed76dba9160d21d604c8ea99</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>a04616.html</anchorfile>
      <anchor>aa5ba8b8cdf1b802457ebaa265f737cbc</anchor>
      <arglist>(const std::string &amp;s=&quot;&quot;, const KeyFormatter &amp;kf=DefaultKeyFormatter) const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::RangeFactorWithTransform</name>
    <filename>a04624.html</filename>
    <templarg>typename A1</templarg>
    <templarg>typename A2</templarg>
    <templarg>typename T</templarg>
    <base>ExpressionFactorN&lt; typename Range&lt; A1, A1 &gt;::result_type, A1, A1 &gt;</base>
    <member kind="function">
      <type>gtsam::NonlinearFactor::shared_ptr</type>
      <name>clone</name>
      <anchorfile>a04624.html</anchorfile>
      <anchor>a1b0af7d9c8b8babcce83d5441e709bd4</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>a04624.html</anchorfile>
      <anchor>ae81f9104be00e096add7ae6fb6d1b80f</anchor>
      <arglist>(const std::string &amp;s=&quot;&quot;, const KeyFormatter &amp;keyFormatter=DefaultKeyFormatter) const override</arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>boost::serialization::access</name>
      <anchorfile>a04624.html</anchorfile>
      <anchor>ac98d07dd8f7b70e16ccb9a01abf56b9c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::Reconstruction</name>
    <filename>a05472.html</filename>
    <base>NoiseModelFactor3&lt; Pose3, Pose3, Vector6 &gt;</base>
    <member kind="function">
      <type>gtsam::NonlinearFactor::shared_ptr</type>
      <name>clone</name>
      <anchorfile>a05472.html</anchorfile>
      <anchor>a31da9edb47abeba2218f0a1050d96a03</anchor>
      <arglist>() const override</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>gtsam::RedirectCout</name>
    <filename>a02736.html</filename>
    <member kind="function">
      <type></type>
      <name>RedirectCout</name>
      <anchorfile>a02736.html</anchorfile>
      <anchor>acea65ff66039691f574aea2894a255d8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>str</name>
      <anchorfile>a02736.html</anchorfile>
      <anchor>a65a98f77981bd096f65841afb0215747</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~RedirectCout</name>
      <anchorfile>a02736.html</anchorfile>
      <anchor>a37b3ac486d866219fe29f05bd0d742b2</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::RefCallPushBack</name>
    <filename>a03552.html</filename>
    <templarg>class C</templarg>
  </compound>
  <compound kind="class">
    <name>gtsam::ReferenceFrameFactor</name>
    <filename>a04840.html</filename>
    <templarg>class POINT</templarg>
    <templarg>class TRANSFORM</templarg>
    <base>NoiseModelFactor3&lt; POINT, TRANSFORM, POINT &gt;</base>
    <member kind="function">
      <type></type>
      <name>ReferenceFrameFactor</name>
      <anchorfile>a04840.html</anchorfile>
      <anchor>a142d0dde9f42aa80e9b6c57d3c49cd58</anchor>
      <arglist>(Key globalKey, Key transKey, Key localKey, const noiseModel::Base::shared_ptr &amp;model)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ReferenceFrameFactor</name>
      <anchorfile>a04840.html</anchorfile>
      <anchor>ac48e1fa01565b66115b7faed7d132f89</anchor>
      <arglist>(double mu, Key globalKey, Key transKey, Key localKey)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ReferenceFrameFactor</name>
      <anchorfile>a04840.html</anchorfile>
      <anchor>abf5b0891b95e33c718560d86bb3ffc93</anchor>
      <arglist>(Key globalKey, Key transKey, Key localKey, double sigma=1e-2)</arglist>
    </member>
    <member kind="function">
      <type>NonlinearFactor::shared_ptr</type>
      <name>clone</name>
      <anchorfile>a04840.html</anchorfile>
      <anchor>a89ced5876573f8d830506ade112fec56</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>Vector</type>
      <name>evaluateError</name>
      <anchorfile>a04840.html</anchorfile>
      <anchor>a3a3d9c0f1963fde024eef6de4d5c6792</anchor>
      <arglist>(const Point &amp;global, const Transform &amp;trans, const Point &amp;local, boost::optional&lt; Matrix &amp; &gt; Dforeign=boost::none, boost::optional&lt; Matrix &amp; &gt; Dtrans=boost::none, boost::optional&lt; Matrix &amp; &gt; Dlocal=boost::none) const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>a04840.html</anchorfile>
      <anchor>a03fd8cbe33b239dfb1e99277a6ae947c</anchor>
      <arglist>(const std::string &amp;s=&quot;&quot;, const gtsam::KeyFormatter &amp;keyFormatter=DefaultKeyFormatter) const override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>ReferenceFrameFactor</name>
      <anchorfile>a04840.html</anchorfile>
      <anchor>ae45ff48bf3b510669dbd0105c9970c30</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>boost::serialization::access</name>
      <anchorfile>a04840.html</anchorfile>
      <anchor>ac98d07dd8f7b70e16ccb9a01abf56b9c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::RegularHessianFactor</name>
    <filename>a03960.html</filename>
    <templarg>size_t D</templarg>
    <base>gtsam::HessianFactor</base>
    <member kind="function">
      <type></type>
      <name>RegularHessianFactor</name>
      <anchorfile>a03960.html</anchorfile>
      <anchor>aceacc209ee0628bae0e7da7d6f03b15f</anchor>
      <arglist>(const KeyVector &amp;js, const std::vector&lt; Matrix &gt; &amp;Gs, const std::vector&lt; Vector &gt; &amp;gs, double f)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RegularHessianFactor</name>
      <anchorfile>a03960.html</anchorfile>
      <anchor>ae70fc62e57d66f8b30c082a74356b754</anchor>
      <arglist>(Key j1, Key j2, const MatrixD &amp;G11, const MatrixD &amp;G12, const VectorD &amp;g1, const MatrixD &amp;G22, const VectorD &amp;g2, double f)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RegularHessianFactor</name>
      <anchorfile>a03960.html</anchorfile>
      <anchor>a6bf59fdc2fcc8ef982a624866997e40d</anchor>
      <arglist>(Key j1, Key j2, Key j3, const MatrixD &amp;G11, const MatrixD &amp;G12, const MatrixD &amp;G13, const VectorD &amp;g1, const MatrixD &amp;G22, const MatrixD &amp;G23, const VectorD &amp;g2, const MatrixD &amp;G33, const VectorD &amp;g3, double f)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RegularHessianFactor</name>
      <anchorfile>a03960.html</anchorfile>
      <anchor>ab50690c5b18b531c590bf02777f48f97</anchor>
      <arglist>(const KEYS &amp;keys, const SymmetricBlockMatrix &amp;augmentedInformation)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RegularHessianFactor</name>
      <anchorfile>a03960.html</anchorfile>
      <anchor>aef13b780689c4a3e45dc9ae4e1154a25</anchor>
      <arglist>(const RegularJacobianFactor&lt; D &gt; &amp;jf)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RegularHessianFactor</name>
      <anchorfile>a03960.html</anchorfile>
      <anchor>ac6ff8787eee6162ba77b6abc092a981b</anchor>
      <arglist>(const GaussianFactorGraph &amp;factors, const Scatter &amp;scatter)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RegularHessianFactor</name>
      <anchorfile>a03960.html</anchorfile>
      <anchor>a147284fc57080b9133b344e7b1846764</anchor>
      <arglist>(const GaussianFactorGraph &amp;factors)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>multiplyHessianAdd</name>
      <anchorfile>a03960.html</anchorfile>
      <anchor>a48b7f1f14c35e2987fc4de581861b718</anchor>
      <arglist>(double alpha, const VectorValues &amp;x, VectorValues &amp;y) const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>multiplyHessianAdd</name>
      <anchorfile>a03960.html</anchorfile>
      <anchor>a86c8ed56f8dac11c6998d53e7fee7017</anchor>
      <arglist>(double alpha, const double *x, double *yvalues) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>multiplyHessianAdd</name>
      <anchorfile>a03960.html</anchorfile>
      <anchor>a7814cc156d32763235d6b42d3ed007fe</anchor>
      <arglist>(double alpha, const double *x, double *yvalues, std::vector&lt; size_t &gt; offsets) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>hessianDiagonal</name>
      <anchorfile>a03960.html</anchorfile>
      <anchor>a99b34b7df4156edecb6592edbc685991</anchor>
      <arglist>(double *d) const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>gradientAtZero</name>
      <anchorfile>a03960.html</anchorfile>
      <anchor>ac4395e2fffa40e7f5208819c99b4e6c2</anchor>
      <arglist>(double *d) const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::RegularImplicitSchurFactor</name>
    <filename>a04848.html</filename>
    <templarg>class CAMERA</templarg>
    <base>gtsam::GaussianFactor</base>
    <member kind="function">
      <type></type>
      <name>RegularImplicitSchurFactor</name>
      <anchorfile>a04848.html</anchorfile>
      <anchor>a3118fa6535b6cafacd6b2f07b6f7156c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RegularImplicitSchurFactor</name>
      <anchorfile>a04848.html</anchorfile>
      <anchor>a282852bf3235bd03329556de26e91869</anchor>
      <arglist>(const KeyVector &amp;keys, const FBlocks &amp;Fs, const Matrix &amp;E, const Matrix &amp;P, const Vector &amp;b)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~RegularImplicitSchurFactor</name>
      <anchorfile>a04848.html</anchorfile>
      <anchor>a688e719e0ef96be802790cc00b6d9517</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>a04848.html</anchorfile>
      <anchor>aae24834ce6b85137ca5a28b19d19d5f0</anchor>
      <arglist>(const std::string &amp;s=&quot;&quot;, const KeyFormatter &amp;keyFormatter=DefaultKeyFormatter) const override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>equals</name>
      <anchorfile>a04848.html</anchorfile>
      <anchor>ad37be1291308f5eab28c110ca500d412</anchor>
      <arglist>(const GaussianFactor &amp;lf, double tol) const override</arglist>
    </member>
    <member kind="function">
      <type>DenseIndex</type>
      <name>getDim</name>
      <anchorfile>a04848.html</anchorfile>
      <anchor>ac04d00dc29bbfb1fb6b5dd720c163ce8</anchor>
      <arglist>(const_iterator variable) const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>updateHessian</name>
      <anchorfile>a04848.html</anchorfile>
      <anchor>a693be797800c445d358cccf8dd694efc</anchor>
      <arglist>(const KeyVector &amp;keys, SymmetricBlockMatrix *info) const override</arglist>
    </member>
    <member kind="function">
      <type>Matrix</type>
      <name>augmentedJacobian</name>
      <anchorfile>a04848.html</anchorfile>
      <anchor>adfd5435eee5fd5ab66ea57e961f21548</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>std::pair&lt; Matrix, Vector &gt;</type>
      <name>jacobian</name>
      <anchorfile>a04848.html</anchorfile>
      <anchor>a4aa1c7f76f99a7d1cdaeddefecdf407e</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>Matrix</type>
      <name>augmentedInformation</name>
      <anchorfile>a04848.html</anchorfile>
      <anchor>aa3c86f067df339641287ae75fb2c4dd0</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>Matrix</type>
      <name>information</name>
      <anchorfile>a04848.html</anchorfile>
      <anchor>a5d4e8be8806c609f58a996a4dae63431</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>hessianDiagonalAdd</name>
      <anchorfile>a04848.html</anchorfile>
      <anchor>a1b9332201be5d0d6de0fc23fa1b05100</anchor>
      <arglist>(VectorValues &amp;d) const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>hessianDiagonal</name>
      <anchorfile>a04848.html</anchorfile>
      <anchor>aefd7b22cc73151b1386bf3d0517823e6</anchor>
      <arglist>(double *d) const override</arglist>
    </member>
    <member kind="function">
      <type>std::map&lt; Key, Matrix &gt;</type>
      <name>hessianBlockDiagonal</name>
      <anchorfile>a04848.html</anchorfile>
      <anchor>a9f64dca2564ec4a9e4f1c2e354ef81d0</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>GaussianFactor::shared_ptr</type>
      <name>clone</name>
      <anchorfile>a04848.html</anchorfile>
      <anchor>a1796ac1a8f089893a5c72629a54d4dc0</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>empty</name>
      <anchorfile>a04848.html</anchorfile>
      <anchor>a12168cfaa13015d3b1d776bcf19f4330</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>GaussianFactor::shared_ptr</type>
      <name>negate</name>
      <anchorfile>a04848.html</anchorfile>
      <anchor>aa7fb0d4677e73b965d8d9f6527f1067a</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>projectError2</name>
      <anchorfile>a04848.html</anchorfile>
      <anchor>ae79b4ba309675ac2287a002251618516</anchor>
      <arglist>(const Error2s &amp;e1, Error2s &amp;e2) const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>error</name>
      <anchorfile>a04848.html</anchorfile>
      <anchor>aa7e939ed14e72b775c8c21ec80cafcf6</anchor>
      <arglist>(const VectorValues &amp;x) const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>projectError</name>
      <anchorfile>a04848.html</anchorfile>
      <anchor>a11d2626a8e429e4f783ff28bd51919d9</anchor>
      <arglist>(const Error2s &amp;e1, Error2s &amp;e2) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>multiplyHessianAdd</name>
      <anchorfile>a04848.html</anchorfile>
      <anchor>aee4903685ce186a9c0810212a27fec1e</anchor>
      <arglist>(double alpha, const double *x, double *y) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>multiplyHessianAdd</name>
      <anchorfile>a04848.html</anchorfile>
      <anchor>a8fb1be84ad628978a1d62ae55cd7d556</anchor>
      <arglist>(double alpha, const VectorValues &amp;x, VectorValues &amp;y) const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>multiplyHessianDummy</name>
      <anchorfile>a04848.html</anchorfile>
      <anchor>af635715343e998cf75f58fca733ac21b</anchor>
      <arglist>(double alpha, const VectorValues &amp;x, VectorValues &amp;y) const</arglist>
    </member>
    <member kind="function">
      <type>VectorValues</type>
      <name>gradientAtZero</name>
      <anchorfile>a04848.html</anchorfile>
      <anchor>a6a4014c8cf1511473d97bd3bbcc44027</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>gradientAtZero</name>
      <anchorfile>a04848.html</anchorfile>
      <anchor>a528d8560e61df829642b66635b2c300c</anchor>
      <arglist>(double *d) const override</arglist>
    </member>
    <member kind="function">
      <type>Vector</type>
      <name>gradient</name>
      <anchorfile>a04848.html</anchorfile>
      <anchor>af8146da85b1f05fdf2541310a9d35f9c</anchor>
      <arglist>(Key key, const VectorValues &amp;x) const override</arglist>
    </member>
    <member kind="function">
      <type>VectorValues</type>
      <name>hessianDiagonal</name>
      <anchorfile>a04848.html</anchorfile>
      <anchor>a7edd251ef4aef401334e90cca0d76574</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>virtual void</type>
      <name>hessianDiagonal</name>
      <anchorfile>a04848.html</anchorfile>
      <anchor>a6a2957fcf90108761c60639a1ae8cca5</anchor>
      <arglist>(double *d) const=0</arglist>
    </member>
    <member kind="variable">
      <type>Error2s</type>
      <name>e1</name>
      <anchorfile>a04848.html</anchorfile>
      <anchor>aad5d33e3b6c90d6714e914e3761b2ad5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>RegularImplicitSchurFactor</type>
      <name>This</name>
      <anchorfile>a04848.html</anchorfile>
      <anchor>ae27c2d8b7b8fec95ba158611c13852a3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; This &gt;</type>
      <name>shared_ptr</name>
      <anchorfile>a04848.html</anchorfile>
      <anchor>aab9a813ad0f77e79b708d3b90342853e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>Eigen::Matrix&lt; double, ZDim, D &gt;</type>
      <name>MatrixZD</name>
      <anchorfile>a04848.html</anchorfile>
      <anchor>a777da647d82c1bcebc2ca98ce22f9e7e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>Eigen::Matrix&lt; double, D, D &gt;</type>
      <name>MatrixDD</name>
      <anchorfile>a04848.html</anchorfile>
      <anchor>a505e379475ff4d2234d928ebb1898346</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>FBlocks</type>
      <name>FBlocks_</name>
      <anchorfile>a04848.html</anchorfile>
      <anchor>a699927e30f0c0cbdc11d474aa78c1b2f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const Matrix</type>
      <name>PointCovariance_</name>
      <anchorfile>a04848.html</anchorfile>
      <anchor>a887d7170cefb1a72bf7576ff95237ed6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const Matrix</type>
      <name>E_</name>
      <anchorfile>a04848.html</anchorfile>
      <anchor>a06015828e1b9c3e2496e541f3a9deabb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const Vector</type>
      <name>b_</name>
      <anchorfile>a04848.html</anchorfile>
      <anchor>a40f26952b993e2e303ecbeb5696f0cd1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected" static="yes">
      <type>static const int</type>
      <name>D</name>
      <anchorfile>a04848.html</anchorfile>
      <anchor>ae663e89e83ac498f97f5847d714f7af0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected" static="yes">
      <type>static const int</type>
      <name>ZDim</name>
      <anchorfile>a04848.html</anchorfile>
      <anchor>a5ccb1beea0e12a8796f3aaaaf1855c47</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::RegularJacobianFactor</name>
    <filename>a03968.html</filename>
    <templarg>size_t D</templarg>
    <base>gtsam::JacobianFactor</base>
    <member kind="function">
      <type></type>
      <name>RegularJacobianFactor</name>
      <anchorfile>a03968.html</anchorfile>
      <anchor>ae43bf2cf406f9b68d7aebce9cb7a025a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RegularJacobianFactor</name>
      <anchorfile>a03968.html</anchorfile>
      <anchor>ad915ad01a506fff9ef5cedc072bd70da</anchor>
      <arglist>(const TERMS &amp;terms, const Vector &amp;b, const SharedDiagonal &amp;model=SharedDiagonal())</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RegularJacobianFactor</name>
      <anchorfile>a03968.html</anchorfile>
      <anchor>aef8d95559114ea3a3a2ca912994bf923</anchor>
      <arglist>(const KEYS &amp;keys, const VerticalBlockMatrix &amp;augmentedMatrix, const SharedDiagonal &amp;sigmas=SharedDiagonal())</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>multiplyHessianAdd</name>
      <anchorfile>a03968.html</anchorfile>
      <anchor>ade96e8a9580291651b8d26b0c0252da4</anchor>
      <arglist>(double alpha, const VectorValues &amp;x, VectorValues &amp;y) const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>multiplyHessianAdd</name>
      <anchorfile>a03968.html</anchorfile>
      <anchor>af9750ddbef0d1c2811726283f3d1e94d</anchor>
      <arglist>(double alpha, const double *x, double *y) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>hessianDiagonal</name>
      <anchorfile>a03968.html</anchorfile>
      <anchor>a10c15c224df4d13d92667a7141bce671</anchor>
      <arglist>(double *d) const override</arglist>
    </member>
    <member kind="function">
      <type>VectorValues</type>
      <name>gradientAtZero</name>
      <anchorfile>a03968.html</anchorfile>
      <anchor>ad8b04301db47560279f3861d8e758303</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>gradientAtZero</name>
      <anchorfile>a03968.html</anchorfile>
      <anchor>a2eedf8a854cd87ae1145e45d0396bf05</anchor>
      <arglist>(double *d) const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>transposeMultiplyAdd</name>
      <anchorfile>a03968.html</anchorfile>
      <anchor>a66275f36981f3c95ef15fd5638635b22</anchor>
      <arglist>(double alpha, const Vector &amp;e, double *x) const</arglist>
    </member>
    <member kind="function">
      <type>Vector</type>
      <name>operator*</name>
      <anchorfile>a03968.html</anchorfile>
      <anchor>a0fe685889d37e08930a598d12046b06f</anchor>
      <arglist>(const double *x) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>multiplyHessianAdd</name>
      <anchorfile>a03968.html</anchorfile>
      <anchor>aabe526ce4e90dbd961510c0de2937ffd</anchor>
      <arglist>(double alpha, const VectorValues &amp;x, VectorValues &amp;y) const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>multiplyHessianAdd</name>
      <anchorfile>a03968.html</anchorfile>
      <anchor>a89568ca7957c90ebdd47dcdb4a1a6994</anchor>
      <arglist>(double alpha, const double *x, double *y, const std::vector&lt; size_t &gt; &amp;accumulatedDims) const</arglist>
    </member>
    <member kind="function">
      <type>VectorValues</type>
      <name>hessianDiagonal</name>
      <anchorfile>a03968.html</anchorfile>
      <anchor>a7edd251ef4aef401334e90cca0d76574</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>virtual void</type>
      <name>hessianDiagonal</name>
      <anchorfile>a03968.html</anchorfile>
      <anchor>a6a2957fcf90108761c60639a1ae8cca5</anchor>
      <arglist>(double *d) const=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::RelativeElevationFactor</name>
    <filename>a05344.html</filename>
    <base>NoiseModelFactor2&lt; Pose3, Point3 &gt;</base>
    <member kind="function">
      <type>gtsam::NonlinearFactor::shared_ptr</type>
      <name>clone</name>
      <anchorfile>a05344.html</anchorfile>
      <anchor>a4dd6f2759e48b20cbd5d3c4c47ea3c6e</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>Vector</type>
      <name>evaluateError</name>
      <anchorfile>a05344.html</anchorfile>
      <anchor>af78eb5fbe1e5b0be89a164d2052efc10</anchor>
      <arglist>(const Pose3 &amp;pose, const Point3 &amp;point, boost::optional&lt; Matrix &amp; &gt; H1=boost::none, boost::optional&lt; Matrix &amp; &gt; H2=boost::none) const override</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>measured</name>
      <anchorfile>a05344.html</anchorfile>
      <anchor>a398ffcaea8e6a84d1e285e5b9632cf2f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>equals</name>
      <anchorfile>a05344.html</anchorfile>
      <anchor>a551402f030dc6d7ecd98680d5eb31b60</anchor>
      <arglist>(const NonlinearFactor &amp;expected, double tol=1e-9) const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>a05344.html</anchorfile>
      <anchor>ad7abafd571bb1e34b277f0c0a6a9091e</anchor>
      <arglist>(const std::string &amp;s=&quot;&quot;, const KeyFormatter &amp;keyFormatter=DefaultKeyFormatter) const override</arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>boost::serialization::access</name>
      <anchorfile>a05344.html</anchorfile>
      <anchor>ac98d07dd8f7b70e16ccb9a01abf56b9c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>gtsam::DeltaImpl::ReorderingMode</name>
    <filename>a04332.html</filename>
  </compound>
  <compound kind="struct">
    <name>gtsam::Reshape</name>
    <filename>a02584.html</filename>
    <templarg>int OutM</templarg>
    <templarg>int OutN</templarg>
    <templarg>int OutOptions</templarg>
    <templarg>int InM</templarg>
    <templarg>int InN</templarg>
    <templarg>int InOptions</templarg>
  </compound>
  <compound kind="struct">
    <name>gtsam::Reshape&lt; M, M, InOptions, M, M, InOptions &gt;</name>
    <filename>a02588.html</filename>
    <templarg>int M</templarg>
    <templarg>int InOptions</templarg>
  </compound>
  <compound kind="struct">
    <name>gtsam::Reshape&lt; M, N, InOptions, M, N, InOptions &gt;</name>
    <filename>a02592.html</filename>
    <templarg>int M</templarg>
    <templarg>int N</templarg>
    <templarg>int InOptions</templarg>
  </compound>
  <compound kind="struct">
    <name>gtsam::Reshape&lt; N, M, InOptions, M, N, InOptions &gt;</name>
    <filename>a02596.html</filename>
    <templarg>int M</templarg>
    <templarg>int N</templarg>
    <templarg>int InOptions</templarg>
  </compound>
  <compound kind="struct">
    <name>gtsam::ConcurrentBatchFilter::Result</name>
    <filename>a05140.html</filename>
    <member kind="function">
      <type></type>
      <name>Result</name>
      <anchorfile>a05140.html</anchorfile>
      <anchor>aea81f70ca0399c13a5e89d0a51e5a652</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>getIterations</name>
      <anchorfile>a05140.html</anchorfile>
      <anchor>ad9308a29688b9b298d539af7ca6a0535</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable">
      <type>size_t</type>
      <name>iterations</name>
      <anchorfile>a05140.html</anchorfile>
      <anchor>adfc3514d5b5adef4592a3f4315951090</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>size_t</type>
      <name>lambdas</name>
      <anchorfile>a05140.html</anchorfile>
      <anchor>a01e85f0e8c326defd589159fa7cd4749</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>size_t</type>
      <name>nonlinearVariables</name>
      <anchorfile>a05140.html</anchorfile>
      <anchor>a3c373018d7f079c4e832ff9a64843f18</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>size_t</type>
      <name>linearVariables</name>
      <anchorfile>a05140.html</anchorfile>
      <anchor>af8d5cefa24e5800190d787166445cb97</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; size_t &gt;</type>
      <name>newFactorsIndices</name>
      <anchorfile>a05140.html</anchorfile>
      <anchor>ad1bc4f8182a82aa740fe5484345fec54</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>error</name>
      <anchorfile>a05140.html</anchorfile>
      <anchor>a2d87c3908f0904a3446fc0e0e355f45f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>gtsam::ConcurrentBatchSmoother::Result</name>
    <filename>a05152.html</filename>
    <member kind="function">
      <type></type>
      <name>Result</name>
      <anchorfile>a05152.html</anchorfile>
      <anchor>a13a591a7e49fc5b6d047b5163c818807</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>getIterations</name>
      <anchorfile>a05152.html</anchorfile>
      <anchor>a9cf90353f76ea158904f4e9ab182a0a5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable">
      <type>size_t</type>
      <name>iterations</name>
      <anchorfile>a05152.html</anchorfile>
      <anchor>acb4926b09bdf3d4c5a09f9526cb435ce</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>size_t</type>
      <name>lambdas</name>
      <anchorfile>a05152.html</anchorfile>
      <anchor>acbaefc53b1b9b9a60439c1d2fe06d9c6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>size_t</type>
      <name>nonlinearVariables</name>
      <anchorfile>a05152.html</anchorfile>
      <anchor>a9510e3729b1962a85bb15016507e0f68</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>size_t</type>
      <name>linearVariables</name>
      <anchorfile>a05152.html</anchorfile>
      <anchor>a713e990c9168a07db8bc594406a84c71</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>error</name>
      <anchorfile>a05152.html</anchorfile>
      <anchor>ae8b33307acb0feffa4df92b6f3ab3f98</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>gtsam::ConcurrentIncrementalFilter::Result</name>
    <filename>a05172.html</filename>
    <member kind="function">
      <type></type>
      <name>Result</name>
      <anchorfile>a05172.html</anchorfile>
      <anchor>a2d88a7a63d39d35f219eea57099bd483</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>getIterations</name>
      <anchorfile>a05172.html</anchorfile>
      <anchor>a6275c99b9db02ee7d2ad659acca18278</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable">
      <type>size_t</type>
      <name>iterations</name>
      <anchorfile>a05172.html</anchorfile>
      <anchor>aafa9f1c68e9c5c8c524d51985057cf91</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>size_t</type>
      <name>nonlinearVariables</name>
      <anchorfile>a05172.html</anchorfile>
      <anchor>ab3ae9f578bb91d4a84228cc64697b409</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>size_t</type>
      <name>linearVariables</name>
      <anchorfile>a05172.html</anchorfile>
      <anchor>ad0ed5b6d5757bf743ca52795e5e5bf4b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>FactorIndices</type>
      <name>newFactorsIndices</name>
      <anchorfile>a05172.html</anchorfile>
      <anchor>a4a40ecd23d1a1a31cf364b5d0f8b847c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>error</name>
      <anchorfile>a05172.html</anchorfile>
      <anchor>a8111967e71690ccad647b6ef23c6d1b5</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>gtsam::ConcurrentIncrementalSmoother::Result</name>
    <filename>a05184.html</filename>
    <member kind="function">
      <type></type>
      <name>Result</name>
      <anchorfile>a05184.html</anchorfile>
      <anchor>a078a08a0b00b8dd9b5dcf0d187048992</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>getIterations</name>
      <anchorfile>a05184.html</anchorfile>
      <anchor>a89a0ded5460cf453ab60f5845f027470</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable">
      <type>size_t</type>
      <name>iterations</name>
      <anchorfile>a05184.html</anchorfile>
      <anchor>a968feb5cf718b0b06a13ae84f6ad7976</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>size_t</type>
      <name>nonlinearVariables</name>
      <anchorfile>a05184.html</anchorfile>
      <anchor>a5898919d92711e1ed30d46550dfa9be0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>size_t</type>
      <name>linearVariables</name>
      <anchorfile>a05184.html</anchorfile>
      <anchor>a0576bd4dbc58585f0714b3206a174b31</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>error</name>
      <anchorfile>a05184.html</anchorfile>
      <anchor>a615205ade22582c6aa30fe2ed5b0d713</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>gtsam::FixedLagSmoother::Result</name>
    <filename>a05196.html</filename>
    <member kind="function">
      <type>size_t</type>
      <name>getIterations</name>
      <anchorfile>a05196.html</anchorfile>
      <anchor>a8bc0b69e5e92c84b1ba7ebc656a20d1d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable">
      <type>size_t</type>
      <name>iterations</name>
      <anchorfile>a05196.html</anchorfile>
      <anchor>a033f08a7ba38504c13dd924a548508fd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>size_t</type>
      <name>intermediateSteps</name>
      <anchorfile>a05196.html</anchorfile>
      <anchor>a68c4d214b1904c6eaa3c1915f1661070</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>size_t</type>
      <name>nonlinearVariables</name>
      <anchorfile>a05196.html</anchorfile>
      <anchor>a71cbb6d1a9bbbbc2fcd84ff24ffb2631</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>size_t</type>
      <name>linearVariables</name>
      <anchorfile>a05196.html</anchorfile>
      <anchor>afd5396592531dacf86c7a0a480025999</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>error</name>
      <anchorfile>a05196.html</anchorfile>
      <anchor>a9536f78994092c233308b336f41272f8</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>gtsam::AlgebraicDecisionTree::Ring</name>
    <filename>a02908.html</filename>
  </compound>
  <compound kind="class">
    <name>gtsam::noiseModel::Robust</name>
    <filename>a03896.html</filename>
    <base>gtsam::noiseModel::Base</base>
    <member kind="function">
      <type></type>
      <name>Robust</name>
      <anchorfile>a03896.html</anchorfile>
      <anchor>a1ccfaa5e2bbe890d0a2a394053c6f8e0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Robust</name>
      <anchorfile>a03896.html</anchorfile>
      <anchor>a1fe3b2482f328c7c3ae26b30bef10945</anchor>
      <arglist>(const RobustModel::shared_ptr robust, const NoiseModel::shared_ptr noise)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~Robust</name>
      <anchorfile>a03896.html</anchorfile>
      <anchor>adf26d8fa83003b48f3365a65f8e8ab31</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>const RobustModel::shared_ptr &amp;</type>
      <name>robust</name>
      <anchorfile>a03896.html</anchorfile>
      <anchor>a13592529f116ca7d92decc4dc54f8a70</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const NoiseModel::shared_ptr &amp;</type>
      <name>noise</name>
      <anchorfile>a03896.html</anchorfile>
      <anchor>ae97958b0cfa1ccf9f43c0943eee21731</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Vector</type>
      <name>whiten</name>
      <anchorfile>a03896.html</anchorfile>
      <anchor>aeddffd32ce242c230c0fcd02b87c6244</anchor>
      <arglist>(const Vector &amp;v) const override</arglist>
    </member>
    <member kind="function">
      <type>Matrix</type>
      <name>Whiten</name>
      <anchorfile>a03896.html</anchorfile>
      <anchor>adbba26b1737a903fd8154ca411e97042</anchor>
      <arglist>(const Matrix &amp;A) const override</arglist>
    </member>
    <member kind="function">
      <type>Vector</type>
      <name>unwhiten</name>
      <anchorfile>a03896.html</anchorfile>
      <anchor>ab92c1d629217ecdb4343cd3cb11a0505</anchor>
      <arglist>(const Vector &amp;) const override</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>loss</name>
      <anchorfile>a03896.html</anchorfile>
      <anchor>aa07d480911c906054766b3f3c9dbb980</anchor>
      <arglist>(const double squared_distance) const override</arglist>
    </member>
    <member kind="function">
      <type>Vector</type>
      <name>unweightedWhiten</name>
      <anchorfile>a03896.html</anchorfile>
      <anchor>a2a977f4aa5ad7e2b05ab344a19ef8754</anchor>
      <arglist>(const Vector &amp;v) const override</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>weight</name>
      <anchorfile>a03896.html</anchorfile>
      <anchor>a432c990520fc35ff8c88cb631dd0c4cb</anchor>
      <arglist>(const Vector &amp;v) const override</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const RobustModel::shared_ptr</type>
      <name>robust_</name>
      <anchorfile>a03896.html</anchorfile>
      <anchor>adbe38b28c96ab791af4c5539ad31aa04</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const NoiseModel::shared_ptr</type>
      <name>noise_</name>
      <anchorfile>a03896.html</anchorfile>
      <anchor>a62f108dcedf22a16571a290ecad62642</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>boost::serialization::access</name>
      <anchorfile>a03896.html</anchorfile>
      <anchor>ac98d07dd8f7b70e16ccb9a01abf56b9c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::Rot2</name>
    <filename>a03320.html</filename>
    <base>LieGroup&lt; Rot2, 1 &gt;</base>
    <member kind="friend">
      <type>friend class</type>
      <name>boost::serialization::access</name>
      <anchorfile>a03320.html</anchorfile>
      <anchor>ac98d07dd8f7b70e16ccb9a01abf56b9c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>Point2</type>
      <name>unit</name>
      <anchorfile>a03320.html</anchorfile>
      <anchor>a430d64f851eeea05cce37fd62fb99a2b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>theta</name>
      <anchorfile>a03320.html</anchorfile>
      <anchor>a4647614b08d02297a48a2f8c8b4a8054</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>degrees</name>
      <anchorfile>a03320.html</anchorfile>
      <anchor>aae290dc0ffb1a0543c304edd177ad53a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>c</name>
      <anchorfile>a03320.html</anchorfile>
      <anchor>a19d35a5033fe0b7b1bb040f46a36fd78</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>s</name>
      <anchorfile>a03320.html</anchorfile>
      <anchor>a758035f915383e2583a5615477e25595</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Matrix2</type>
      <name>matrix</name>
      <anchorfile>a03320.html</anchorfile>
      <anchor>ac2ff90ed954479cf5ec7be19ffbf93cf</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Matrix2</type>
      <name>transpose</name>
      <anchorfile>a03320.html</anchorfile>
      <anchor>a112c97d1fed02e92a48ba42a78d93549</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Rot2</name>
      <anchorfile>a03320.html</anchorfile>
      <anchor>ae1383d61756e94cd2cbb837a00078ee2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Rot2</name>
      <anchorfile>a03320.html</anchorfile>
      <anchor>aec86a74ee72b1d982db5023f4add4fc3</anchor>
      <arglist>(const Rot2 &amp;r)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Rot2</name>
      <anchorfile>a03320.html</anchorfile>
      <anchor>acda969716a9ad7e96bc817a22eefe83d</anchor>
      <arglist>(double theta)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Rot2</type>
      <name>fromAngle</name>
      <anchorfile>a03320.html</anchorfile>
      <anchor>afb35e14b4b02f27820711c8bcc37367a</anchor>
      <arglist>(double theta)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Rot2</type>
      <name>fromDegrees</name>
      <anchorfile>a03320.html</anchorfile>
      <anchor>ad5570449789e34060ee8117a35fc6904</anchor>
      <arglist>(double theta)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Rot2</type>
      <name>fromCosSin</name>
      <anchorfile>a03320.html</anchorfile>
      <anchor>a720c06bc182de5f11c25688bd3859584</anchor>
      <arglist>(double c, double s)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Rot2</type>
      <name>relativeBearing</name>
      <anchorfile>a03320.html</anchorfile>
      <anchor>a63d13689284fa19a2d0299b0b2529bfc</anchor>
      <arglist>(const Point2 &amp;d, OptionalJacobian&lt; 1, 2 &gt; H=boost::none)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Rot2</type>
      <name>atan2</name>
      <anchorfile>a03320.html</anchorfile>
      <anchor>afbd8489d8ff30a5acbc0c39d3e9c2040</anchor>
      <arglist>(double y, double x)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Rot2</type>
      <name>Random</name>
      <anchorfile>a03320.html</anchorfile>
      <anchor>acd2d8f3949a506ffa1ad74a901370fa2</anchor>
      <arglist>(std::mt19937 &amp;rng)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>a03320.html</anchorfile>
      <anchor>a812360a6966f3a1aef2293f85482dc9b</anchor>
      <arglist>(const std::string &amp;s=&quot;theta&quot;) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>equals</name>
      <anchorfile>a03320.html</anchorfile>
      <anchor>a71019bb67807f8013cd2d8fb9f84349d</anchor>
      <arglist>(const Rot2 &amp;R, double tol=1e-9) const</arglist>
    </member>
    <member kind="function">
      <type>Rot2</type>
      <name>inverse</name>
      <anchorfile>a03320.html</anchorfile>
      <anchor>a4c5d02fd84eb445e2275a67c31af8453</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Rot2</type>
      <name>operator*</name>
      <anchorfile>a03320.html</anchorfile>
      <anchor>a0ee7e4888afe8f920ba74171f31e3233</anchor>
      <arglist>(const Rot2 &amp;R) const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Rot2</type>
      <name>identity</name>
      <anchorfile>a03320.html</anchorfile>
      <anchor>a155d20b57edeebbd8c6dbb04b4d6ab1c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Matrix1</type>
      <name>AdjointMap</name>
      <anchorfile>a03320.html</anchorfile>
      <anchor>abc0cc11cb4231694ab806bed2c963749</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Rot2</type>
      <name>Expmap</name>
      <anchorfile>a03320.html</anchorfile>
      <anchor>a2426e879e750adc540529e6069401d1a</anchor>
      <arglist>(const Vector1 &amp;v, ChartJacobian H=boost::none)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Vector1</type>
      <name>Logmap</name>
      <anchorfile>a03320.html</anchorfile>
      <anchor>a285b68d0862794b9b1bedbd793c419b7</anchor>
      <arglist>(const Rot2 &amp;r, ChartJacobian H=boost::none)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Matrix</type>
      <name>ExpmapDerivative</name>
      <anchorfile>a03320.html</anchorfile>
      <anchor>a1c7e0139ddba7ebb91c851acc604de47</anchor>
      <arglist>(const Vector &amp;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Matrix</type>
      <name>LogmapDerivative</name>
      <anchorfile>a03320.html</anchorfile>
      <anchor>ab94601796e7aaaa59611cb4fa490e356</anchor>
      <arglist>(const Vector &amp;)</arglist>
    </member>
    <member kind="function">
      <type>Point2</type>
      <name>rotate</name>
      <anchorfile>a03320.html</anchorfile>
      <anchor>a2519597142ae3cb4c8dcedf11424bc69</anchor>
      <arglist>(const Point2 &amp;p, OptionalJacobian&lt; 2, 1 &gt; H1=boost::none, OptionalJacobian&lt; 2, 2 &gt; H2=boost::none) const</arglist>
    </member>
    <member kind="function">
      <type>Point2</type>
      <name>operator*</name>
      <anchorfile>a03320.html</anchorfile>
      <anchor>a5763de37572cac7a2831b900f313e145</anchor>
      <arglist>(const Point2 &amp;p) const</arglist>
    </member>
    <member kind="function">
      <type>Point2</type>
      <name>unrotate</name>
      <anchorfile>a03320.html</anchorfile>
      <anchor>a634aa257fde116ba3fd1bc6d9457c71a</anchor>
      <arglist>(const Point2 &amp;p, OptionalJacobian&lt; 2, 1 &gt; H1=boost::none, OptionalJacobian&lt; 2, 2 &gt; H2=boost::none) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>a03320.html</anchorfile>
      <anchor>a812360a6966f3a1aef2293f85482dc9b</anchor>
      <arglist>(const std::string &amp;s=&quot;theta&quot;) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>equals</name>
      <anchorfile>a03320.html</anchorfile>
      <anchor>a71019bb67807f8013cd2d8fb9f84349d</anchor>
      <arglist>(const Rot2 &amp;R, double tol=1e-9) const</arglist>
    </member>
    <member kind="function">
      <type>Point2</type>
      <name>rotate</name>
      <anchorfile>a03320.html</anchorfile>
      <anchor>a2519597142ae3cb4c8dcedf11424bc69</anchor>
      <arglist>(const Point2 &amp;p, OptionalJacobian&lt; 2, 1 &gt; H1=boost::none, OptionalJacobian&lt; 2, 2 &gt; H2=boost::none) const</arglist>
    </member>
    <member kind="function">
      <type>Point2</type>
      <name>operator*</name>
      <anchorfile>a03320.html</anchorfile>
      <anchor>a5763de37572cac7a2831b900f313e145</anchor>
      <arglist>(const Point2 &amp;p) const</arglist>
    </member>
    <member kind="function">
      <type>Point2</type>
      <name>unrotate</name>
      <anchorfile>a03320.html</anchorfile>
      <anchor>a634aa257fde116ba3fd1bc6d9457c71a</anchor>
      <arglist>(const Point2 &amp;p, OptionalJacobian&lt; 2, 1 &gt; H1=boost::none, OptionalJacobian&lt; 2, 2 &gt; H2=boost::none) const</arglist>
    </member>
    <class kind="struct">gtsam::Rot2::ChartAtOrigin</class>
  </compound>
  <compound kind="class">
    <name>gtsam::Rot3</name>
    <filename>a03336.html</filename>
    <base>LieGroup&lt; Rot3, 3 &gt;</base>
    <member kind="enumeration">
      <type></type>
      <name>CoordinatesMode</name>
      <anchorfile>a03336.html</anchorfile>
      <anchor>ae4277d914aedd191dabc95684484ca8d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>EXPMAP</name>
      <anchorfile>a03336.html</anchorfile>
      <anchor>ae4277d914aedd191dabc95684484ca8da8a660629652ff98b7da4185926534054</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CAYLEY</name>
      <anchorfile>a03336.html</anchorfile>
      <anchor>ae4277d914aedd191dabc95684484ca8da70572972f22e25d28c44626d43629d9f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>Rot3</type>
      <name>retractCayley</name>
      <anchorfile>a03336.html</anchorfile>
      <anchor>a13c38b259a72671589bc8a25a5477d43</anchor>
      <arglist>(const Vector &amp;omega) const</arglist>
    </member>
    <member kind="function">
      <type>Vector3</type>
      <name>localCayley</name>
      <anchorfile>a03336.html</anchorfile>
      <anchor>a9e39d4d4f3de8c13420a3bbecfe8b97a</anchor>
      <arglist>(const Rot3 &amp;other) const</arglist>
    </member>
    <member kind="friend">
      <type>GTSAM_EXPORT friend std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a03336.html</anchorfile>
      <anchor>a11132dded9469c0847b9f53708c0d6dc</anchor>
      <arglist>(std::ostream &amp;os, const Rot3 &amp;p)</arglist>
    </member>
    <member kind="function">
      <type>std::pair&lt; Unit3, double &gt;</type>
      <name>axisAngle</name>
      <anchorfile>a03336.html</anchorfile>
      <anchor>a0193e96cd616345b7fbc1c08fba9740e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>gtsam::Quaternion</type>
      <name>toQuaternion</name>
      <anchorfile>a03336.html</anchorfile>
      <anchor>a61088cbea39ce3dd5a634004ff16683e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Vector</type>
      <name>quaternion</name>
      <anchorfile>a03336.html</anchorfile>
      <anchor>a7041a1a90992a5a9cfe1ed85a729608c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Rot3</type>
      <name>slerp</name>
      <anchorfile>a03336.html</anchorfile>
      <anchor>a20cf6b0207651b09a891e8af6e9cd24b</anchor>
      <arglist>(double t, const Rot3 &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Rot3</name>
      <anchorfile>a03336.html</anchorfile>
      <anchor>a790096d9b3f1cd0d90a723915339d847</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Rot3</name>
      <anchorfile>a03336.html</anchorfile>
      <anchor>a5e063e8687e36f5dbaa3281b488a5f37</anchor>
      <arglist>(const Point3 &amp;col1, const Point3 &amp;col2, const Point3 &amp;col3)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Rot3</name>
      <anchorfile>a03336.html</anchorfile>
      <anchor>a933c42065af5ea1e1e3fdcd71451cd23</anchor>
      <arglist>(double R11, double R12, double R13, double R21, double R22, double R23, double R31, double R32, double R33)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Rot3</name>
      <anchorfile>a03336.html</anchorfile>
      <anchor>ae445466f4653469da9c2122f3ec34cd9</anchor>
      <arglist>(const Eigen::MatrixBase&lt; Derived &gt; &amp;R)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Rot3</name>
      <anchorfile>a03336.html</anchorfile>
      <anchor>a6b994c07306b4bd7b5e327d43826b750</anchor>
      <arglist>(const Matrix3 &amp;R)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Rot3</name>
      <anchorfile>a03336.html</anchorfile>
      <anchor>ab681d4d2916e7390b30239312aaf373f</anchor>
      <arglist>(const SO3 &amp;R)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Rot3</name>
      <anchorfile>a03336.html</anchorfile>
      <anchor>a439f4b2a000a5d1a1db1a493222ad2ec</anchor>
      <arglist>(const Quaternion &amp;q)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Rot3</name>
      <anchorfile>a03336.html</anchorfile>
      <anchor>a2609eade1ee0d77c6e680e7d06e6fb5c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Rot3</type>
      <name>normalized</name>
      <anchorfile>a03336.html</anchorfile>
      <anchor>a3db91fd2232b7ab0939410bf664f67f1</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Rot3</type>
      <name>Random</name>
      <anchorfile>a03336.html</anchorfile>
      <anchor>a4529e98aca0ec68b04627cde118b43e1</anchor>
      <arglist>(std::mt19937 &amp;rng)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Rot3</type>
      <name>Rx</name>
      <anchorfile>a03336.html</anchorfile>
      <anchor>aa575339f78d2aa7cf36f877120786541</anchor>
      <arglist>(double t)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Rot3</type>
      <name>Ry</name>
      <anchorfile>a03336.html</anchorfile>
      <anchor>a83da1dfe33a1a9c0ac2d10dda41a5de9</anchor>
      <arglist>(double t)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Rot3</type>
      <name>Rz</name>
      <anchorfile>a03336.html</anchorfile>
      <anchor>ad7b10d122b2f4647d03c5339478e7eb4</anchor>
      <arglist>(double t)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Rot3</type>
      <name>RzRyRx</name>
      <anchorfile>a03336.html</anchorfile>
      <anchor>a2df5a4051a52c140ec7eabb262952c4b</anchor>
      <arglist>(double x, double y, double z, OptionalJacobian&lt; 3, 1 &gt; Hx=boost::none, OptionalJacobian&lt; 3, 1 &gt; Hy=boost::none, OptionalJacobian&lt; 3, 1 &gt; Hz=boost::none)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Rot3</type>
      <name>RzRyRx</name>
      <anchorfile>a03336.html</anchorfile>
      <anchor>a9584d6ddd332cc2b86a4ae96a245e952</anchor>
      <arglist>(const Vector &amp;xyz, OptionalJacobian&lt; 3, 3 &gt; H=boost::none)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Rot3</type>
      <name>Yaw</name>
      <anchorfile>a03336.html</anchorfile>
      <anchor>a4c246f45dd2c3522aa137d6a7daa2c48</anchor>
      <arglist>(double t)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Rot3</type>
      <name>Pitch</name>
      <anchorfile>a03336.html</anchorfile>
      <anchor>a910f3e76bf0abda247eb9a8e496c6e27</anchor>
      <arglist>(double t)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Rot3</type>
      <name>Ypr</name>
      <anchorfile>a03336.html</anchorfile>
      <anchor>ae0859d27d3611d23d2ded9e3af5da4b6</anchor>
      <arglist>(double y, double p, double r, OptionalJacobian&lt; 3, 1 &gt; Hy=boost::none, OptionalJacobian&lt; 3, 1 &gt; Hp=boost::none, OptionalJacobian&lt; 3, 1 &gt; Hr=boost::none)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Rot3</type>
      <name>Quaternion</name>
      <anchorfile>a03336.html</anchorfile>
      <anchor>a9f6c4e458645b64d2a38282ed7fdd825</anchor>
      <arglist>(double w, double x, double y, double z)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Rot3</type>
      <name>AxisAngle</name>
      <anchorfile>a03336.html</anchorfile>
      <anchor>a8667b13a8b05f6897884a1eb127faf9e</anchor>
      <arglist>(const Point3 &amp;axis, double angle)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Rot3</type>
      <name>AxisAngle</name>
      <anchorfile>a03336.html</anchorfile>
      <anchor>a63bcfbea65d533f3751ab15ad33a2e91</anchor>
      <arglist>(const Unit3 &amp;axis, double angle)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Rot3</type>
      <name>Rodrigues</name>
      <anchorfile>a03336.html</anchorfile>
      <anchor>a71b9f35dd204e3f3616e64b03146bfe1</anchor>
      <arglist>(const Vector3 &amp;w)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Rot3</type>
      <name>Rodrigues</name>
      <anchorfile>a03336.html</anchorfile>
      <anchor>ab02570988c454d513ea33f01b291d175</anchor>
      <arglist>(double wx, double wy, double wz)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Rot3</type>
      <name>AlignPair</name>
      <anchorfile>a03336.html</anchorfile>
      <anchor>aca7791d39f8aaccf4fbf5fa33fc17950</anchor>
      <arglist>(const Unit3 &amp;axis, const Unit3 &amp;a_p, const Unit3 &amp;b_p)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Rot3</type>
      <name>AlignTwoPairs</name>
      <anchorfile>a03336.html</anchorfile>
      <anchor>a5bc30180b7f2fecaa6f5a0abe25c5c09</anchor>
      <arglist>(const Unit3 &amp;a_p, const Unit3 &amp;b_p, const Unit3 &amp;a_q, const Unit3 &amp;b_q)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Rot3</type>
      <name>ClosestTo</name>
      <anchorfile>a03336.html</anchorfile>
      <anchor>a25a7702701155fa9199756d5384cb6e5</anchor>
      <arglist>(const Matrix3 &amp;M)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>a03336.html</anchorfile>
      <anchor>a4d01453190c57d5a491c819b5e4a8a03</anchor>
      <arglist>(const std::string &amp;s=&quot;&quot;) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>equals</name>
      <anchorfile>a03336.html</anchorfile>
      <anchor>a364e8e84b5a595b3bd236594130013d6</anchor>
      <arglist>(const Rot3 &amp;p, double tol=1e-9) const</arglist>
    </member>
    <member kind="function">
      <type>Rot3</type>
      <name>operator*</name>
      <anchorfile>a03336.html</anchorfile>
      <anchor>a8d4a7b2163e524182df6783fae7e013b</anchor>
      <arglist>(const Rot3 &amp;R2) const</arglist>
    </member>
    <member kind="function">
      <type>Rot3</type>
      <name>inverse</name>
      <anchorfile>a03336.html</anchorfile>
      <anchor>ab5e9bf20c7a5dc294012debdbd4f7acb</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Rot3</type>
      <name>conjugate</name>
      <anchorfile>a03336.html</anchorfile>
      <anchor>aa809377e3681fa7a1a16d13e716d40fc</anchor>
      <arglist>(const Rot3 &amp;cRb) const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Rot3</type>
      <name>identity</name>
      <anchorfile>a03336.html</anchorfile>
      <anchor>aa1dba48999e8d2cd6bd39084ec87b28b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Matrix3</type>
      <name>AdjointMap</name>
      <anchorfile>a03336.html</anchorfile>
      <anchor>a25619f49eea7ab16bc40bab6ea82b3b9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Rot3</type>
      <name>Expmap</name>
      <anchorfile>a03336.html</anchorfile>
      <anchor>abb5ec33c245b0df9455d55fd0689c9d2</anchor>
      <arglist>(const Vector3 &amp;v, OptionalJacobian&lt; 3, 3 &gt; H=boost::none)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Vector3</type>
      <name>Logmap</name>
      <anchorfile>a03336.html</anchorfile>
      <anchor>aa5501d5c5344170d9ccbea59468c2763</anchor>
      <arglist>(const Rot3 &amp;R, OptionalJacobian&lt; 3, 3 &gt; H=boost::none)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Matrix3</type>
      <name>ExpmapDerivative</name>
      <anchorfile>a03336.html</anchorfile>
      <anchor>abf20b8d8216c557e88647063c5fb2218</anchor>
      <arglist>(const Vector3 &amp;x)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Matrix3</type>
      <name>LogmapDerivative</name>
      <anchorfile>a03336.html</anchorfile>
      <anchor>af8930a51cb70977b3d4671f4094ca2e8</anchor>
      <arglist>(const Vector3 &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>Point3</type>
      <name>rotate</name>
      <anchorfile>a03336.html</anchorfile>
      <anchor>a89483be3c6be7b7aca15eea0be0f2bdd</anchor>
      <arglist>(const Point3 &amp;p, OptionalJacobian&lt; 3, 3 &gt; H1=boost::none, OptionalJacobian&lt; 3, 3 &gt; H2=boost::none) const</arglist>
    </member>
    <member kind="function">
      <type>Point3</type>
      <name>operator*</name>
      <anchorfile>a03336.html</anchorfile>
      <anchor>ac30473d7ee9aab83e1990ff46e60c383</anchor>
      <arglist>(const Point3 &amp;p) const</arglist>
    </member>
    <member kind="function">
      <type>Point3</type>
      <name>unrotate</name>
      <anchorfile>a03336.html</anchorfile>
      <anchor>a39890aed76e02db7071b3989358cddae</anchor>
      <arglist>(const Point3 &amp;p, OptionalJacobian&lt; 3, 3 &gt; H1=boost::none, OptionalJacobian&lt; 3, 3 &gt; H2=boost::none) const</arglist>
    </member>
    <member kind="function">
      <type>Unit3</type>
      <name>rotate</name>
      <anchorfile>a03336.html</anchorfile>
      <anchor>acb55146464dbf21a89e4cce324a2ae62</anchor>
      <arglist>(const Unit3 &amp;p, OptionalJacobian&lt; 2, 3 &gt; HR=boost::none, OptionalJacobian&lt; 2, 2 &gt; Hp=boost::none) const</arglist>
    </member>
    <member kind="function">
      <type>Unit3</type>
      <name>unrotate</name>
      <anchorfile>a03336.html</anchorfile>
      <anchor>a631de745b256300931949188fc44d32e</anchor>
      <arglist>(const Unit3 &amp;p, OptionalJacobian&lt; 2, 3 &gt; HR=boost::none, OptionalJacobian&lt; 2, 2 &gt; Hp=boost::none) const</arglist>
    </member>
    <member kind="function">
      <type>Unit3</type>
      <name>operator*</name>
      <anchorfile>a03336.html</anchorfile>
      <anchor>a87975e7cddb5ef7e3c22b4c773df9de9</anchor>
      <arglist>(const Unit3 &amp;p) const</arglist>
    </member>
    <member kind="function">
      <type>Matrix3</type>
      <name>matrix</name>
      <anchorfile>a03336.html</anchorfile>
      <anchor>aece3904d5ef70057da19943b10cb8fd0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Matrix3</type>
      <name>transpose</name>
      <anchorfile>a03336.html</anchorfile>
      <anchor>a34b31466e7f777ca2ff550ec2cf804c7</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Point3</type>
      <name>column</name>
      <anchorfile>a03336.html</anchorfile>
      <anchor>a441f639f252ff5c5aec31e56ce9bcda9</anchor>
      <arglist>(int index) const</arglist>
    </member>
    <member kind="function">
      <type>Point3</type>
      <name>r1</name>
      <anchorfile>a03336.html</anchorfile>
      <anchor>a4a9d8ce0731b4cf165f6fac05759581c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Point3</type>
      <name>r2</name>
      <anchorfile>a03336.html</anchorfile>
      <anchor>a59383116fba2a9b28e576b6b9b987bc0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Point3</type>
      <name>r3</name>
      <anchorfile>a03336.html</anchorfile>
      <anchor>aa422cf8342ce6cb73783a71a79e1b506</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Vector3</type>
      <name>xyz</name>
      <anchorfile>a03336.html</anchorfile>
      <anchor>a72c5fbbe2b341377fed3caaf1357d8cf</anchor>
      <arglist>(OptionalJacobian&lt; 3, 3 &gt; H=boost::none) const</arglist>
    </member>
    <member kind="function">
      <type>Vector3</type>
      <name>ypr</name>
      <anchorfile>a03336.html</anchorfile>
      <anchor>af54c8741689cba1180406f55f800aaeb</anchor>
      <arglist>(OptionalJacobian&lt; 3, 3 &gt; H=boost::none) const</arglist>
    </member>
    <member kind="function">
      <type>Vector3</type>
      <name>rpy</name>
      <anchorfile>a03336.html</anchorfile>
      <anchor>abf08727e9869914ee562aef1543bfeea</anchor>
      <arglist>(OptionalJacobian&lt; 3, 3 &gt; H=boost::none) const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>roll</name>
      <anchorfile>a03336.html</anchorfile>
      <anchor>acfe1a2bb07e42b407e92952a741ce678</anchor>
      <arglist>(OptionalJacobian&lt; 1, 3 &gt; H=boost::none) const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>pitch</name>
      <anchorfile>a03336.html</anchorfile>
      <anchor>a10f2fca06dab15d15c64b8f9bb3195ce</anchor>
      <arglist>(OptionalJacobian&lt; 1, 3 &gt; H=boost::none) const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>yaw</name>
      <anchorfile>a03336.html</anchorfile>
      <anchor>a9022feecd4cf94fdefe252ac85fc0cb2</anchor>
      <arglist>(OptionalJacobian&lt; 1, 3 &gt; H=boost::none) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>a03336.html</anchorfile>
      <anchor>a4d01453190c57d5a491c819b5e4a8a03</anchor>
      <arglist>(const std::string &amp;s=&quot;&quot;) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>equals</name>
      <anchorfile>a03336.html</anchorfile>
      <anchor>a364e8e84b5a595b3bd236594130013d6</anchor>
      <arglist>(const Rot3 &amp;p, double tol=1e-9) const</arglist>
    </member>
    <member kind="function">
      <type>Point3</type>
      <name>rotate</name>
      <anchorfile>a03336.html</anchorfile>
      <anchor>a89483be3c6be7b7aca15eea0be0f2bdd</anchor>
      <arglist>(const Point3 &amp;p, OptionalJacobian&lt; 3, 3 &gt; H1=boost::none, OptionalJacobian&lt; 3, 3 &gt; H2=boost::none) const</arglist>
    </member>
    <member kind="function">
      <type>Point3</type>
      <name>operator*</name>
      <anchorfile>a03336.html</anchorfile>
      <anchor>ac30473d7ee9aab83e1990ff46e60c383</anchor>
      <arglist>(const Point3 &amp;p) const</arglist>
    </member>
    <member kind="function">
      <type>Point3</type>
      <name>unrotate</name>
      <anchorfile>a03336.html</anchorfile>
      <anchor>a39890aed76e02db7071b3989358cddae</anchor>
      <arglist>(const Point3 &amp;p, OptionalJacobian&lt; 3, 3 &gt; H1=boost::none, OptionalJacobian&lt; 3, 3 &gt; H2=boost::none) const</arglist>
    </member>
    <member kind="function">
      <type>Unit3</type>
      <name>rotate</name>
      <anchorfile>a03336.html</anchorfile>
      <anchor>acb55146464dbf21a89e4cce324a2ae62</anchor>
      <arglist>(const Unit3 &amp;p, OptionalJacobian&lt; 2, 3 &gt; HR=boost::none, OptionalJacobian&lt; 2, 2 &gt; Hp=boost::none) const</arglist>
    </member>
    <member kind="function">
      <type>Unit3</type>
      <name>unrotate</name>
      <anchorfile>a03336.html</anchorfile>
      <anchor>a631de745b256300931949188fc44d32e</anchor>
      <arglist>(const Unit3 &amp;p, OptionalJacobian&lt; 2, 3 &gt; HR=boost::none, OptionalJacobian&lt; 2, 2 &gt; Hp=boost::none) const</arglist>
    </member>
    <member kind="function">
      <type>Unit3</type>
      <name>operator*</name>
      <anchorfile>a03336.html</anchorfile>
      <anchor>a87975e7cddb5ef7e3c22b4c773df9de9</anchor>
      <arglist>(const Unit3 &amp;p) const</arglist>
    </member>
    <member kind="function">
      <type>Matrix3</type>
      <name>matrix</name>
      <anchorfile>a03336.html</anchorfile>
      <anchor>aece3904d5ef70057da19943b10cb8fd0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Matrix3</type>
      <name>transpose</name>
      <anchorfile>a03336.html</anchorfile>
      <anchor>a34b31466e7f777ca2ff550ec2cf804c7</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Point3</type>
      <name>column</name>
      <anchorfile>a03336.html</anchorfile>
      <anchor>a441f639f252ff5c5aec31e56ce9bcda9</anchor>
      <arglist>(int index) const</arglist>
    </member>
    <member kind="function">
      <type>Point3</type>
      <name>r1</name>
      <anchorfile>a03336.html</anchorfile>
      <anchor>a4a9d8ce0731b4cf165f6fac05759581c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Point3</type>
      <name>r2</name>
      <anchorfile>a03336.html</anchorfile>
      <anchor>a59383116fba2a9b28e576b6b9b987bc0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Point3</type>
      <name>r3</name>
      <anchorfile>a03336.html</anchorfile>
      <anchor>aa422cf8342ce6cb73783a71a79e1b506</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Vector3</type>
      <name>xyz</name>
      <anchorfile>a03336.html</anchorfile>
      <anchor>a72c5fbbe2b341377fed3caaf1357d8cf</anchor>
      <arglist>(OptionalJacobian&lt; 3, 3 &gt; H=boost::none) const</arglist>
    </member>
    <member kind="function">
      <type>Vector3</type>
      <name>ypr</name>
      <anchorfile>a03336.html</anchorfile>
      <anchor>af54c8741689cba1180406f55f800aaeb</anchor>
      <arglist>(OptionalJacobian&lt; 3, 3 &gt; H=boost::none) const</arglist>
    </member>
    <member kind="function">
      <type>Vector3</type>
      <name>rpy</name>
      <anchorfile>a03336.html</anchorfile>
      <anchor>abf08727e9869914ee562aef1543bfeea</anchor>
      <arglist>(OptionalJacobian&lt; 3, 3 &gt; H=boost::none) const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>roll</name>
      <anchorfile>a03336.html</anchorfile>
      <anchor>acfe1a2bb07e42b407e92952a741ce678</anchor>
      <arglist>(OptionalJacobian&lt; 1, 3 &gt; H=boost::none) const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>pitch</name>
      <anchorfile>a03336.html</anchorfile>
      <anchor>a10f2fca06dab15d15c64b8f9bb3195ce</anchor>
      <arglist>(OptionalJacobian&lt; 1, 3 &gt; H=boost::none) const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>yaw</name>
      <anchorfile>a03336.html</anchorfile>
      <anchor>a9022feecd4cf94fdefe252ac85fc0cb2</anchor>
      <arglist>(OptionalJacobian&lt; 1, 3 &gt; H=boost::none) const</arglist>
    </member>
    <member kind="enumvalue">
      <name>EXPMAP</name>
      <anchorfile>a03336.html</anchorfile>
      <anchor>ae4277d914aedd191dabc95684484ca8da8a660629652ff98b7da4185926534054</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CAYLEY</name>
      <anchorfile>a03336.html</anchorfile>
      <anchor>ae4277d914aedd191dabc95684484ca8da70572972f22e25d28c44626d43629d9f</anchor>
      <arglist></arglist>
    </member>
    <class kind="struct">gtsam::Rot3::CayleyChart</class>
    <class kind="struct">gtsam::Rot3::ChartAtOrigin</class>
    <member kind="friend">
      <type>friend class</type>
      <name>boost::serialization::access</name>
      <anchorfile>a03336.html</anchorfile>
      <anchor>ac98d07dd8f7b70e16ccb9a01abf56b9c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::Rot3AttitudeFactor</name>
    <filename>a04036.html</filename>
    <base>NoiseModelFactor1&lt; Rot3 &gt;</base>
    <base>gtsam::AttitudeFactor</base>
    <member kind="function">
      <type></type>
      <name>Rot3AttitudeFactor</name>
      <anchorfile>a04036.html</anchorfile>
      <anchor>a4e4f004110e20207646c5ed97065910f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Rot3AttitudeFactor</name>
      <anchorfile>a04036.html</anchorfile>
      <anchor>a6cf360ba0e94862339fadb61ce232c49</anchor>
      <arglist>(Key key, const Unit3 &amp;nZ, const SharedNoiseModel &amp;model, const Unit3 &amp;bRef=Unit3(0, 0, 1))</arglist>
    </member>
    <member kind="function">
      <type>gtsam::NonlinearFactor::shared_ptr</type>
      <name>clone</name>
      <anchorfile>a04036.html</anchorfile>
      <anchor>a85d4af75af5204d14b503f7dc2e7a1b7</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>a04036.html</anchorfile>
      <anchor>ac6acd5e0830401e8c9dd879ad6b063d0</anchor>
      <arglist>(const std::string &amp;s=&quot;&quot;, const KeyFormatter &amp;keyFormatter=DefaultKeyFormatter) const override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>equals</name>
      <anchorfile>a04036.html</anchorfile>
      <anchor>a0a508230bd2509811145563f817fe2fd</anchor>
      <arglist>(const NonlinearFactor &amp;expected, double tol=1e-9) const override</arglist>
    </member>
    <member kind="function">
      <type>Vector</type>
      <name>evaluateError</name>
      <anchorfile>a04036.html</anchorfile>
      <anchor>a2a14ceb9c92994d58d2ab039350f5344</anchor>
      <arglist>(const Rot3 &amp;nRb, boost::optional&lt; Matrix &amp; &gt; H=boost::none) const override</arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; Rot3AttitudeFactor &gt;</type>
      <name>shared_ptr</name>
      <anchorfile>a04036.html</anchorfile>
      <anchor>a6b910391b1ed4a20413232fe4336cc51</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Rot3AttitudeFactor</type>
      <name>This</name>
      <anchorfile>a04036.html</anchorfile>
      <anchor>a7d12dd56719f608d202fcdf9b8dbdb2d</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>boost::serialization::access</name>
      <anchorfile>a04036.html</anchorfile>
      <anchor>ac98d07dd8f7b70e16ccb9a01abf56b9c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::RotateDirectionsFactor</name>
    <filename>a04860.html</filename>
    <base>NoiseModelFactor1&lt; Rot3 &gt;</base>
    <member kind="function">
      <type></type>
      <name>RotateDirectionsFactor</name>
      <anchorfile>a04860.html</anchorfile>
      <anchor>a2b5ada837b7cc3b3c6d0c175535eb330</anchor>
      <arglist>(Key key, const Unit3 &amp;i_p, const Unit3 &amp;c_z, const SharedNoiseModel &amp;model)</arglist>
    </member>
    <member kind="function">
      <type>gtsam::NonlinearFactor::shared_ptr</type>
      <name>clone</name>
      <anchorfile>a04860.html</anchorfile>
      <anchor>ac8ea2e754b87da8f290ff06caaf379bd</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>a04860.html</anchorfile>
      <anchor>a2d89ad40d9d152a28288cb96a2281fc4</anchor>
      <arglist>(const std::string &amp;s=&quot;&quot;, const KeyFormatter &amp;keyFormatter=DefaultKeyFormatter) const override</arglist>
    </member>
    <member kind="function">
      <type>Vector</type>
      <name>evaluateError</name>
      <anchorfile>a04860.html</anchorfile>
      <anchor>a0fc5bf648ed2f7e84586319553533d91</anchor>
      <arglist>(const Rot3 &amp;iRc, boost::optional&lt; Matrix &amp; &gt; H=boost::none) const override</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Rot3</type>
      <name>Initialize</name>
      <anchorfile>a04860.html</anchorfile>
      <anchor>a85c5981614f80245fbba7ebb05fa2442</anchor>
      <arglist>(const Unit3 &amp;i_p, const Unit3 &amp;c_z)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::RotateFactor</name>
    <filename>a04856.html</filename>
    <base>NoiseModelFactor1&lt; Rot3 &gt;</base>
    <member kind="function">
      <type></type>
      <name>RotateFactor</name>
      <anchorfile>a04856.html</anchorfile>
      <anchor>a27b0b48d60af56c8849a51e450e45718</anchor>
      <arglist>(Key key, const Rot3 &amp;P, const Rot3 &amp;Z, const SharedNoiseModel &amp;model)</arglist>
    </member>
    <member kind="function">
      <type>gtsam::NonlinearFactor::shared_ptr</type>
      <name>clone</name>
      <anchorfile>a04856.html</anchorfile>
      <anchor>ae9d19dec624e26382ac6c4919f53a290</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>a04856.html</anchorfile>
      <anchor>a86c7e85bcd301007c8b8ebff742ae400</anchor>
      <arglist>(const std::string &amp;s=&quot;&quot;, const KeyFormatter &amp;keyFormatter=DefaultKeyFormatter) const override</arglist>
    </member>
    <member kind="function">
      <type>Vector</type>
      <name>evaluateError</name>
      <anchorfile>a04856.html</anchorfile>
      <anchor>a7ca24ffac19c499d95a3d1bbaeb4995d</anchor>
      <arglist>(const Rot3 &amp;R, boost::optional&lt; Matrix &amp; &gt; H=boost::none) const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::RuntimeErrorThreadsafe</name>
    <filename>a02668.html</filename>
    <base>ThreadsafeException&lt; RuntimeErrorThreadsafe &gt;</base>
    <member kind="function">
      <type></type>
      <name>RuntimeErrorThreadsafe</name>
      <anchorfile>a02668.html</anchorfile>
      <anchor>aa618fffc79e001904f7d53e0f27a29fd</anchor>
      <arglist>(const std::string &amp;description)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::Sampler</name>
    <filename>a03972.html</filename>
    <member kind="function">
      <type></type>
      <name>Sampler</name>
      <anchorfile>a03972.html</anchorfile>
      <anchor>a0e799f78224c4853560f87c293e14470</anchor>
      <arglist>(const noiseModel::Diagonal::shared_ptr &amp;model, uint_fast64_t seed=42u)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Sampler</name>
      <anchorfile>a03972.html</anchorfile>
      <anchor>a9b01291ff045243d1c73b112e36ea0a7</anchor>
      <arglist>(const Vector &amp;sigmas, uint_fast64_t seed=42u)</arglist>
    </member>
    <member kind="function">
      <type>Vector</type>
      <name>sample</name>
      <anchorfile>a03972.html</anchorfile>
      <anchor>a4d30e0a9bec4bdd7e8a882bbb8fab9be</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Sampler</name>
      <anchorfile>a03972.html</anchorfile>
      <anchor>a0e799f78224c4853560f87c293e14470</anchor>
      <arglist>(const noiseModel::Diagonal::shared_ptr &amp;model, uint_fast64_t seed=42u)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Sampler</name>
      <anchorfile>a03972.html</anchorfile>
      <anchor>a9b01291ff045243d1c73b112e36ea0a7</anchor>
      <arglist>(const Vector &amp;sigmas, uint_fast64_t seed=42u)</arglist>
    </member>
    <member kind="function">
      <type>Vector</type>
      <name>sample</name>
      <anchorfile>a03972.html</anchorfile>
      <anchor>a4d30e0a9bec4bdd7e8a882bbb8fab9be</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>Vector</type>
      <name>sampleDiagonal</name>
      <anchorfile>a03972.html</anchorfile>
      <anchor>a3c39257c64dd6f95fdc173aed274c724</anchor>
      <arglist>(const Vector &amp;sigmas) const</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>noiseModel::Diagonal::shared_ptr</type>
      <name>model_</name>
      <anchorfile>a03972.html</anchorfile>
      <anchor>a715947053d2c801444799e4ce00e6118</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::mt19937_64</type>
      <name>generator_</name>
      <anchorfile>a03972.html</anchorfile>
      <anchor>aafc871086f7dd8ee5bf99795c8f98ba1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::ScalarMultiplyExpression</name>
    <filename>a04256.html</filename>
    <templarg>typename T</templarg>
    <base>gtsam::Expression</base>
  </compound>
  <compound kind="struct">
    <name>gtsam::internal::ScalarTraits</name>
    <filename>a02768.html</filename>
    <templarg>typename Scalar</templarg>
    <base>VectorSpaceImpl&lt; Scalar, 1 &gt;</base>
  </compound>
  <compound kind="class">
    <name>gtsam::Scatter</name>
    <filename>a03980.html</filename>
    <member kind="function">
      <type>GTSAM_EXPORT</type>
      <name>Scatter</name>
      <anchorfile>a03980.html</anchorfile>
      <anchor>ad4220161208c55a3e426b0b078567a4b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>GTSAM_EXPORT</type>
      <name>Scatter</name>
      <anchorfile>a03980.html</anchorfile>
      <anchor>a2486845fa12d82fbd7b84427d8d5832e</anchor>
      <arglist>(const GaussianFactorGraph &amp;gfg)</arglist>
    </member>
    <member kind="function">
      <type>GTSAM_EXPORT</type>
      <name>Scatter</name>
      <anchorfile>a03980.html</anchorfile>
      <anchor>af5136cc8acb2902c1f17c2a7e463ecb4</anchor>
      <arglist>(const GaussianFactorGraph &amp;gfg, const Ordering &amp;ordering)</arglist>
    </member>
    <member kind="function">
      <type>GTSAM_EXPORT void</type>
      <name>add</name>
      <anchorfile>a03980.html</anchorfile>
      <anchor>a513b73f7ed08f72f79c1362d8959eb9a</anchor>
      <arglist>(Key key, size_t dim)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::Scenario</name>
    <filename>a04172.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Scenario</name>
      <anchorfile>a04172.html</anchorfile>
      <anchor>ae8038fa841d5344145b545a150e9ff67</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual Pose3</type>
      <name>pose</name>
      <anchorfile>a04172.html</anchorfile>
      <anchor>a6463a26287f7e5d3ec6792f05f81211e</anchor>
      <arglist>(double t) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual Vector3</type>
      <name>omega_b</name>
      <anchorfile>a04172.html</anchorfile>
      <anchor>af820f44e5f5d6916856e21eee855d3ff</anchor>
      <arglist>(double t) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual Vector3</type>
      <name>velocity_n</name>
      <anchorfile>a04172.html</anchorfile>
      <anchor>ad696947e9da2987f0913113957b64162</anchor>
      <arglist>(double t) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual Vector3</type>
      <name>acceleration_n</name>
      <anchorfile>a04172.html</anchorfile>
      <anchor>ad590b2a67dc6c674d25cf39638849655</anchor>
      <arglist>(double t) const =0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::ScenarioRunner</name>
    <filename>a04184.html</filename>
    <member kind="function">
      <type>PreintegratedImuMeasurements</type>
      <name>integrate</name>
      <anchorfile>a04184.html</anchorfile>
      <anchor>a7018ff10b2c41e14df95200d25d87730</anchor>
      <arglist>(double T, const Bias &amp;estimatedBias=Bias(), bool corrupted=false) const</arglist>
    </member>
    <member kind="function">
      <type>NavState</type>
      <name>predict</name>
      <anchorfile>a04184.html</anchorfile>
      <anchor>a921c0bae7d51d2e613b767d2719e4ec5</anchor>
      <arglist>(const PreintegratedImuMeasurements &amp;pim, const Bias &amp;estimatedBias=Bias()) const</arglist>
    </member>
    <member kind="function">
      <type>Matrix9</type>
      <name>estimateCovariance</name>
      <anchorfile>a04184.html</anchorfile>
      <anchor>a7416290bec81103b2acde2962753fb45</anchor>
      <arglist>(double T, size_t N=1000, const Bias &amp;estimatedBias=Bias()) const</arglist>
    </member>
    <member kind="function">
      <type>Matrix6</type>
      <name>estimateNoiseCovariance</name>
      <anchorfile>a04184.html</anchorfile>
      <anchor>a4dc8a7308cf72e5ecea732570a5f84ec</anchor>
      <arglist>(size_t N=1000) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::Scheduler</name>
    <filename>a05020.html</filename>
    <base>gtsam::CSP</base>
    <member kind="function">
      <type></type>
      <name>Scheduler</name>
      <anchorfile>a05020.html</anchorfile>
      <anchor>a36761905f1f1c3187747226051ff0c5d</anchor>
      <arglist>(size_t maxNrStudents)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Scheduler</name>
      <anchorfile>a05020.html</anchorfile>
      <anchor>ad2bdcafd14b8c32db3fb96650f56fce2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setAvailability</name>
      <anchorfile>a05020.html</anchorfile>
      <anchor>aa7133cdf3fdf88d1698e1e9d1f6406d2</anchor>
      <arglist>(const std::string &amp;available)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSlotsAvailable</name>
      <anchorfile>a05020.html</anchorfile>
      <anchor>a23d902eb0978fadec33cf71307dbae46</anchor>
      <arglist>(const std::vector&lt; double &gt; &amp;slotsAvailable)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Scheduler</name>
      <anchorfile>a05020.html</anchorfile>
      <anchor>a2280899b03244b6f6201defafb913a0b</anchor>
      <arglist>(size_t maxNrStudents, const std::string &amp;filename)</arglist>
    </member>
    <member kind="function">
      <type>const DiscreteKey &amp;</type>
      <name>key</name>
      <anchorfile>a05020.html</anchorfile>
      <anchor>a1d1bcdea94ffab129b4772fb78467bf9</anchor>
      <arglist>(size_t s, boost::optional&lt; size_t &gt; area=boost::none) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addStudent</name>
      <anchorfile>a05020.html</anchorfile>
      <anchor>ae9a9df7cb2cd893513707adb11557d3f</anchor>
      <arglist>(const std::string &amp;studentName, const std::string &amp;area1, const std::string &amp;area2, const std::string &amp;area3, const std::string &amp;advisor)</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>nrStudents</name>
      <anchorfile>a05020.html</anchorfile>
      <anchor>a7c71970a7f4311d26c572c072880e65d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addStudentSpecificConstraints</name>
      <anchorfile>a05020.html</anchorfile>
      <anchor>ad6aa6f9ff70d702fbdf36ca7cd03cdd7</anchor>
      <arglist>(size_t i, boost::optional&lt; size_t &gt; slot=boost::none)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>buildGraph</name>
      <anchorfile>a05020.html</anchorfile>
      <anchor>a921d55920a3c9649c0dee4abf780dad8</anchor>
      <arglist>(size_t mutexBound=7)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>a05020.html</anchorfile>
      <anchor>a255e84489d3651a2e30c1c506f54331c</anchor>
      <arglist>(const std::string &amp;s=&quot;Scheduler&quot;, const KeyFormatter &amp;formatter=DefaultKeyFormatter) const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>printAssignment</name>
      <anchorfile>a05020.html</anchorfile>
      <anchor>ad377a75c9e70faa28d22cfdf640ab3f7</anchor>
      <arglist>(sharedValues assignment) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>printSpecial</name>
      <anchorfile>a05020.html</anchorfile>
      <anchor>aa86a12f820cb37cbae334cc59898bfb5</anchor>
      <arglist>(sharedValues assignment) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>accumulateStats</name>
      <anchorfile>a05020.html</anchorfile>
      <anchor>a6ba3138db8245f3c5e01c9769d01f3e9</anchor>
      <arglist>(sharedValues assignment, std::vector&lt; size_t &gt; &amp;stats) const</arglist>
    </member>
    <member kind="function">
      <type>DiscreteBayesNet::shared_ptr</type>
      <name>eliminate</name>
      <anchorfile>a05020.html</anchorfile>
      <anchor>a80147d73f0869ce751cafc0294e6a7e3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>sharedValues</type>
      <name>optimalAssignment</name>
      <anchorfile>a05020.html</anchorfile>
      <anchor>a7fddf54a28e9b1555500b15d2d0ffc8d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>sharedValues</type>
      <name>bestSchedule</name>
      <anchorfile>a05020.html</anchorfile>
      <anchor>ad9ed323020955936e3f9ed11696ee9dc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>sharedValues</type>
      <name>bestAssignment</name>
      <anchorfile>a05020.html</anchorfile>
      <anchor>a47ee777599bfbcd97f72cecbe2698f19</anchor>
      <arglist>(sharedValues bestSchedule) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::SDGraph</name>
    <filename>a03568.html</filename>
    <templarg>class KEY</templarg>
  </compound>
  <compound kind="struct">
    <name>gtsam::SfmData</name>
    <filename>a04736.html</filename>
    <member kind="function">
      <type>bool</type>
      <name>equals</name>
      <anchorfile>a04736.html</anchorfile>
      <anchor>acfa3f4865e32f376834698b0b5c0015d</anchor>
      <arglist>(const SfmData &amp;sfmData, double tol=1e-9) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>a04736.html</anchorfile>
      <anchor>a7a750e92aa66d797bc4fd2c81945a26f</anchor>
      <arglist>(const std::string &amp;s=&quot;&quot;) const</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>number_tracks</name>
      <anchorfile>a04736.html</anchorfile>
      <anchor>a9841e93745d8f04f03a693a0e394e93f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>SfmCamera</type>
      <name>camera</name>
      <anchorfile>a04736.html</anchorfile>
      <anchor>a5d9e4e3f81537ddddeadca4158838035</anchor>
      <arglist>(size_t idx) const</arglist>
    </member>
    <member kind="function">
      <type>SfmTrack</type>
      <name>track</name>
      <anchorfile>a04736.html</anchorfile>
      <anchor>ad0ab63b2d4ef111241daf4d6a46e36eb</anchor>
      <arglist>(size_t idx) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add_track</name>
      <anchorfile>a04736.html</anchorfile>
      <anchor>ace978d7c7296290128dd9b4885f01025</anchor>
      <arglist>(const SfmTrack &amp;t)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add_camera</name>
      <anchorfile>a04736.html</anchorfile>
      <anchor>a5f3288570bf9c5a42318cff4e3750848</anchor>
      <arglist>(const SfmCamera &amp;cam)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>equals</name>
      <anchorfile>a04736.html</anchorfile>
      <anchor>acfa3f4865e32f376834698b0b5c0015d</anchor>
      <arglist>(const SfmData &amp;sfmData, double tol=1e-9) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>a04736.html</anchorfile>
      <anchor>a7a750e92aa66d797bc4fd2c81945a26f</anchor>
      <arglist>(const std::string &amp;s=&quot;&quot;) const</arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; SfmCamera &gt;</type>
      <name>cameras</name>
      <anchorfile>a04736.html</anchorfile>
      <anchor>aca9835ee681fe7dfbd3d0e2b58d4f50d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; SfmTrack &gt;</type>
      <name>tracks</name>
      <anchorfile>a04736.html</anchorfile>
      <anchor>ad005f3beddfb6a8f735ad3369d2b81e6</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>boost::serialization::access</name>
      <anchorfile>a04736.html</anchorfile>
      <anchor>ac98d07dd8f7b70e16ccb9a01abf56b9c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>gtsam::SfmTrack</name>
    <filename>a04728.html</filename>
    <member kind="function">
      <type>const Point3</type>
      <name>rgb</name>
      <anchorfile>a04728.html</anchorfile>
      <anchor>a90dd56a1da58c988dd0c7d07d1fb5dbe</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>number_measurements</name>
      <anchorfile>a04728.html</anchorfile>
      <anchor>a5d86b317d6e709358a3e83a29fcf2960</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>SfmMeasurement</type>
      <name>measurement</name>
      <anchorfile>a04728.html</anchorfile>
      <anchor>a799c63d2b142c564b0d881a34c009ac1</anchor>
      <arglist>(size_t idx) const</arglist>
    </member>
    <member kind="function">
      <type>SiftIndex</type>
      <name>siftIndex</name>
      <anchorfile>a04728.html</anchorfile>
      <anchor>ac20a33974c20b6483a01737e54d20dbb</anchor>
      <arglist>(size_t idx) const</arglist>
    </member>
    <member kind="function">
      <type>const Point3 &amp;</type>
      <name>point3</name>
      <anchorfile>a04728.html</anchorfile>
      <anchor>aca2f67edf3d1f91fafb20df210ecae05</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add_measurement</name>
      <anchorfile>a04728.html</anchorfile>
      <anchor>a48c2b4be3914de59231f947c175927d0</anchor>
      <arglist>(size_t idx, const gtsam::Point2 &amp;m)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>equals</name>
      <anchorfile>a04728.html</anchorfile>
      <anchor>a9de7887bf83fa03d9033dca2b6bad8c2</anchor>
      <arglist>(const SfmTrack &amp;sfmTrack, double tol=1e-9) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>a04728.html</anchorfile>
      <anchor>a27ceb08ad28befeb78a8986d60ebb505</anchor>
      <arglist>(const std::string &amp;s=&quot;&quot;) const</arglist>
    </member>
    <member kind="variable">
      <type>Point3</type>
      <name>p</name>
      <anchorfile>a04728.html</anchorfile>
      <anchor>afc7eeb850fb338b79b5aaf4c6394032d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>float</type>
      <name>b</name>
      <anchorfile>a04728.html</anchorfile>
      <anchor>a475f25156aad977cfff3485a79d7a4f9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; SfmMeasurement &gt;</type>
      <name>measurements</name>
      <anchorfile>a04728.html</anchorfile>
      <anchor>a0da83838370bac2cb6d05b125a266a93</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>boost::serialization::access</name>
      <anchorfile>a04728.html</anchorfile>
      <anchor>ac98d07dd8f7b70e16ccb9a01abf56b9c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::SGraph</name>
    <filename>a03572.html</filename>
    <templarg>class KEY</templarg>
  </compound>
  <compound kind="class">
    <name>gtsam::ShonanAveraging</name>
    <filename>a04652.html</filename>
    <templarg>size_t d</templarg>
    <member kind="function">
      <type></type>
      <name>ShonanAveraging</name>
      <anchorfile>a04652.html</anchorfile>
      <anchor>aaf8a29eafed5a8a6fd587386dcc16800</anchor>
      <arglist>(const Measurements &amp;measurements, const Parameters &amp;parameters=Parameters())</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>nrUnknowns</name>
      <anchorfile>a04652.html</anchorfile>
      <anchor>a73a3d9209cdb506f24a8aadfe5096793</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>nrMeasurements</name>
      <anchorfile>a04652.html</anchorfile>
      <anchor>ac0e85ff1df9afa01e2c4d5a78514a593</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const BinaryMeasurement&lt; Rot &gt; &amp;</type>
      <name>measurement</name>
      <anchorfile>a04652.html</anchorfile>
      <anchor>a077abdafcd9aae0b4daefaf239643347</anchor>
      <arglist>(size_t k) const</arglist>
    </member>
    <member kind="function">
      <type>Measurements</type>
      <name>makeNoiseModelRobust</name>
      <anchorfile>a04652.html</anchorfile>
      <anchor>a09977170b3c9931ed26537ee5d09986d</anchor>
      <arglist>(const Measurements &amp;measurements, double k=1.345) const</arglist>
    </member>
    <member kind="function">
      <type>const Rot &amp;</type>
      <name>measured</name>
      <anchorfile>a04652.html</anchorfile>
      <anchor>a4a45d4410bc1cbb8212db9b30baaad01</anchor>
      <arglist>(size_t k) const</arglist>
    </member>
    <member kind="function">
      <type>const KeyVector &amp;</type>
      <name>keys</name>
      <anchorfile>a04652.html</anchorfile>
      <anchor>aa8cea5fe74aa2616fffc4cbf711e8662</anchor>
      <arglist>(size_t k) const</arglist>
    </member>
    <member kind="function">
      <type>Sparse</type>
      <name>D</name>
      <anchorfile>a04652.html</anchorfile>
      <anchor>a036786a6ac6beb8d10de99c9b6cda632</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Matrix</type>
      <name>denseD</name>
      <anchorfile>a04652.html</anchorfile>
      <anchor>a5748b335c0c3b95f89ac2d3bbb152eff</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Sparse</type>
      <name>Q</name>
      <anchorfile>a04652.html</anchorfile>
      <anchor>a50ca95fe2ab218f46501b39c3f5d1e2d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Matrix</type>
      <name>denseQ</name>
      <anchorfile>a04652.html</anchorfile>
      <anchor>a94660ac78112004d0f64bf1b556f83e7</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Sparse</type>
      <name>L</name>
      <anchorfile>a04652.html</anchorfile>
      <anchor>a457e132d85aca876807abf89704ea612</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Matrix</type>
      <name>denseL</name>
      <anchorfile>a04652.html</anchorfile>
      <anchor>a7fe6b3d3e2ef9da0daf7399774aa699f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Sparse</type>
      <name>computeLambda</name>
      <anchorfile>a04652.html</anchorfile>
      <anchor>a8e5f37b68e4c7ba969a627349172bf87</anchor>
      <arglist>(const Matrix &amp;S) const</arglist>
    </member>
    <member kind="function">
      <type>Matrix</type>
      <name>computeLambda_</name>
      <anchorfile>a04652.html</anchorfile>
      <anchor>ac62c551ccc46a01cd1b19244319b2ffd</anchor>
      <arglist>(const Values &amp;values) const</arglist>
    </member>
    <member kind="function">
      <type>Matrix</type>
      <name>computeLambda_</name>
      <anchorfile>a04652.html</anchorfile>
      <anchor>a8ae5f4e85edc78332d53908e9d8dac24</anchor>
      <arglist>(const Matrix &amp;S) const</arglist>
    </member>
    <member kind="function">
      <type>Sparse</type>
      <name>computeA</name>
      <anchorfile>a04652.html</anchorfile>
      <anchor>ac2f90d8c8f79596bab759bbbe2359210</anchor>
      <arglist>(const Values &amp;values) const</arglist>
    </member>
    <member kind="function">
      <type>Sparse</type>
      <name>computeA</name>
      <anchorfile>a04652.html</anchorfile>
      <anchor>a72088abb3c741dfa2e9e2d6206690417</anchor>
      <arglist>(const Matrix &amp;S) const</arglist>
    </member>
    <member kind="function">
      <type>Matrix</type>
      <name>computeA_</name>
      <anchorfile>a04652.html</anchorfile>
      <anchor>ae2a5385c908fdc7d81dc855488de4b3e</anchor>
      <arglist>(const Values &amp;values) const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>computeMinEigenValue</name>
      <anchorfile>a04652.html</anchorfile>
      <anchor>a88676e48f88b98f00673784af6dcd6ab</anchor>
      <arglist>(const Values &amp;values, Vector *minEigenVector=nullptr) const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>computeMinEigenValueAP</name>
      <anchorfile>a04652.html</anchorfile>
      <anchor>a4160aed15bc48cde963f54c5ce07a386</anchor>
      <arglist>(const Values &amp;values, Vector *minEigenVector=nullptr) const</arglist>
    </member>
    <member kind="function">
      <type>Values</type>
      <name>roundSolutionS</name>
      <anchorfile>a04652.html</anchorfile>
      <anchor>a18a09e5b13d08bfddf9f9c86ad0bd181</anchor>
      <arglist>(const Matrix &amp;S) const</arglist>
    </member>
    <member kind="function">
      <type>Matrix</type>
      <name>riemannianGradient</name>
      <anchorfile>a04652.html</anchorfile>
      <anchor>ad5573b0d099114ccb6855e3f0c65e85e</anchor>
      <arglist>(size_t p, const Values &amp;values) const</arglist>
    </member>
    <member kind="function">
      <type>Values</type>
      <name>initializeWithDescent</name>
      <anchorfile>a04652.html</anchorfile>
      <anchor>a3517f3dd0e982648727d1444a235bb68</anchor>
      <arglist>(size_t p, const Values &amp;values, const Vector &amp;minEigenVector, double minEigenValue, double gradienTolerance=1e-2, double preconditionedGradNormTolerance=1e-4) const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Matrix</type>
      <name>StiefelElementMatrix</name>
      <anchorfile>a04652.html</anchorfile>
      <anchor>ac226dd643bb70588df2769f6e0c501f7</anchor>
      <arglist>(const Values &amp;values)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static VectorValues</type>
      <name>TangentVectorValues</name>
      <anchorfile>a04652.html</anchorfile>
      <anchor>a46814fc53a47f7d48eb1fcdc85f930ed</anchor>
      <arglist>(size_t p, const Vector &amp;v)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Values</type>
      <name>LiftwithDescent</name>
      <anchorfile>a04652.html</anchorfile>
      <anchor>a4d2db4bfdca54ca20a2c9d432b45850b</anchor>
      <arglist>(size_t p, const Values &amp;values, const Vector &amp;minEigenVector)</arglist>
    </member>
    <member kind="function">
      <type>NonlinearFactorGraph</type>
      <name>buildGraphAt</name>
      <anchorfile>a04652.html</anchorfile>
      <anchor>aeee0e8e51580b48b717700db924dee2f</anchor>
      <arglist>(size_t p) const</arglist>
    </member>
    <member kind="function">
      <type>Values</type>
      <name>initializeRandomlyAt</name>
      <anchorfile>a04652.html</anchorfile>
      <anchor>ac68049b4d0f88bdb30f8cc05a293d543</anchor>
      <arglist>(size_t p, std::mt19937 &amp;rng) const</arglist>
    </member>
    <member kind="function">
      <type>Values</type>
      <name>initializeRandomlyAt</name>
      <anchorfile>a04652.html</anchorfile>
      <anchor>aab225bd95f94fa28485cf50254bba087</anchor>
      <arglist>(size_t p) const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>costAt</name>
      <anchorfile>a04652.html</anchorfile>
      <anchor>aa6814e9cf9743b0c4001f95f45668bfa</anchor>
      <arglist>(size_t p, const Values &amp;values) const</arglist>
    </member>
    <member kind="function">
      <type>Sparse</type>
      <name>computeLambda</name>
      <anchorfile>a04652.html</anchorfile>
      <anchor>a7085e3d935d4f803373219b6a9f3ed71</anchor>
      <arglist>(const Values &amp;values) const</arglist>
    </member>
    <member kind="function">
      <type>std::pair&lt; double, Vector &gt;</type>
      <name>computeMinEigenVector</name>
      <anchorfile>a04652.html</anchorfile>
      <anchor>a06fcc093c3505b1bcb79724b6d3bf7ac</anchor>
      <arglist>(const Values &amp;values) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>checkOptimality</name>
      <anchorfile>a04652.html</anchorfile>
      <anchor>abc3f7ed58fd5ac17e3472d70f8adca35</anchor>
      <arglist>(const Values &amp;values) const</arglist>
    </member>
    <member kind="function">
      <type>boost::shared_ptr&lt; LevenbergMarquardtOptimizer &gt;</type>
      <name>createOptimizerAt</name>
      <anchorfile>a04652.html</anchorfile>
      <anchor>a018f27a0c8b6d52d2e0e327b7a42ab98</anchor>
      <arglist>(size_t p, const Values &amp;initial) const</arglist>
    </member>
    <member kind="function">
      <type>Values</type>
      <name>tryOptimizingAt</name>
      <anchorfile>a04652.html</anchorfile>
      <anchor>ac48a348adbe626ecb65db0ea68cc8dfb</anchor>
      <arglist>(size_t p, const Values &amp;initial) const</arglist>
    </member>
    <member kind="function">
      <type>Values</type>
      <name>projectFrom</name>
      <anchorfile>a04652.html</anchorfile>
      <anchor>a780feee9b086f33757f7fba7dec9f3ac</anchor>
      <arglist>(size_t p, const Values &amp;values) const</arglist>
    </member>
    <member kind="function">
      <type>Values</type>
      <name>roundSolution</name>
      <anchorfile>a04652.html</anchorfile>
      <anchor>a1221fbe9ab98a9df8407788321ae2f15</anchor>
      <arglist>(const Values &amp;values) const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Values</type>
      <name>LiftTo</name>
      <anchorfile>a04652.html</anchorfile>
      <anchor>af3985795537724da9056bcdd7e1c62b0</anchor>
      <arglist>(size_t p, const Values &amp;values)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>cost</name>
      <anchorfile>a04652.html</anchorfile>
      <anchor>a79519dbc0444f7f34b5c66411de05c73</anchor>
      <arglist>(const Values &amp;values) const</arglist>
    </member>
    <member kind="function">
      <type>Values</type>
      <name>initializeRandomly</name>
      <anchorfile>a04652.html</anchorfile>
      <anchor>a6cc6dc67c3a886181343943a29580000</anchor>
      <arglist>(std::mt19937 &amp;rng) const</arglist>
    </member>
    <member kind="function">
      <type>Values</type>
      <name>initializeRandomly</name>
      <anchorfile>a04652.html</anchorfile>
      <anchor>a7dd6f6b45c55d8f871e613cd0691a9e0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::pair&lt; Values, double &gt;</type>
      <name>run</name>
      <anchorfile>a04652.html</anchorfile>
      <anchor>a072b16b99e66c24ab9dde3c985c3fcf3</anchor>
      <arglist>(const Values &amp;initialEstimate, size_t pMin=d, size_t pMax=10) const</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; BinaryMeasurement&lt; T &gt; &gt;</type>
      <name>maybeRobust</name>
      <anchorfile>a04652.html</anchorfile>
      <anchor>a1ac40e97b5dc1cca6f0033dd5de498c1</anchor>
      <arglist>(const std::vector&lt; BinaryMeasurement&lt; T &gt; &gt; &amp;measurements, bool useRobustModel=false) const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ShonanAveraging</name>
      <anchorfile>a04652.html</anchorfile>
      <anchor>aaf8a29eafed5a8a6fd587386dcc16800</anchor>
      <arglist>(const Measurements &amp;measurements, const Parameters &amp;parameters=Parameters())</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>nrUnknowns</name>
      <anchorfile>a04652.html</anchorfile>
      <anchor>a73a3d9209cdb506f24a8aadfe5096793</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>nrMeasurements</name>
      <anchorfile>a04652.html</anchorfile>
      <anchor>ac0e85ff1df9afa01e2c4d5a78514a593</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const BinaryMeasurement&lt; Rot &gt; &amp;</type>
      <name>measurement</name>
      <anchorfile>a04652.html</anchorfile>
      <anchor>a077abdafcd9aae0b4daefaf239643347</anchor>
      <arglist>(size_t k) const</arglist>
    </member>
    <member kind="function">
      <type>Measurements</type>
      <name>makeNoiseModelRobust</name>
      <anchorfile>a04652.html</anchorfile>
      <anchor>a09977170b3c9931ed26537ee5d09986d</anchor>
      <arglist>(const Measurements &amp;measurements, double k=1.345) const</arglist>
    </member>
    <member kind="function">
      <type>const Rot &amp;</type>
      <name>measured</name>
      <anchorfile>a04652.html</anchorfile>
      <anchor>a4a45d4410bc1cbb8212db9b30baaad01</anchor>
      <arglist>(size_t k) const</arglist>
    </member>
    <member kind="function">
      <type>const KeyVector &amp;</type>
      <name>keys</name>
      <anchorfile>a04652.html</anchorfile>
      <anchor>aa8cea5fe74aa2616fffc4cbf711e8662</anchor>
      <arglist>(size_t k) const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>cost</name>
      <anchorfile>a04652.html</anchorfile>
      <anchor>a79519dbc0444f7f34b5c66411de05c73</anchor>
      <arglist>(const Values &amp;values) const</arglist>
    </member>
    <member kind="function">
      <type>Values</type>
      <name>initializeRandomly</name>
      <anchorfile>a04652.html</anchorfile>
      <anchor>a6cc6dc67c3a886181343943a29580000</anchor>
      <arglist>(std::mt19937 &amp;rng) const</arglist>
    </member>
    <member kind="function">
      <type>Values</type>
      <name>initializeRandomly</name>
      <anchorfile>a04652.html</anchorfile>
      <anchor>a7dd6f6b45c55d8f871e613cd0691a9e0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::pair&lt; Values, double &gt;</type>
      <name>run</name>
      <anchorfile>a04652.html</anchorfile>
      <anchor>a072b16b99e66c24ab9dde3c985c3fcf3</anchor>
      <arglist>(const Values &amp;initialEstimate, size_t pMin=d, size_t pMax=10) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::ShonanAveraging2</name>
    <filename>a04656.html</filename>
    <base>ShonanAveraging&lt; 2 &gt;</base>
  </compound>
  <compound kind="class">
    <name>gtsam::ShonanAveraging3</name>
    <filename>a04660.html</filename>
    <base>ShonanAveraging&lt; 3 &gt;</base>
  </compound>
  <compound kind="struct">
    <name>gtsam::ShonanAveragingParameters</name>
    <filename>a04648.html</filename>
    <templarg>size_t d</templarg>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>a04648.html</anchorfile>
      <anchor>a2bab664f53f9076da75419313b749c7c</anchor>
      <arglist>(const std::string &amp;s=&quot;&quot;) const</arglist>
    </member>
    <member kind="variable">
      <type>LevenbergMarquardtParams</type>
      <name>lm</name>
      <anchorfile>a04648.html</anchorfile>
      <anchor>a36e5640b67f504340629a778037d5d5b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>optimalityThreshold</name>
      <anchorfile>a04648.html</anchorfile>
      <anchor>a5fa92f66528f5d8cf7a93a51444d0191</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Anchor</type>
      <name>anchor</name>
      <anchorfile>a04648.html</anchorfile>
      <anchor>aa3e7cf11f726612ed535207812ad84b5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>alpha</name>
      <anchorfile>a04648.html</anchorfile>
      <anchor>a086e5b1226828a332909f3c811a69cbb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>beta</name>
      <anchorfile>a04648.html</anchorfile>
      <anchor>a788004c0af2e4be08ab6ca2329d3696f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>gamma</name>
      <anchorfile>a04648.html</anchorfile>
      <anchor>a8e7edde5adb22c3f44b02481a82d6d03</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>useHuber</name>
      <anchorfile>a04648.html</anchorfile>
      <anchor>a4ecbf5f9a9e9ecbc2c4ef549af57d543</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>certifyOptimality</name>
      <anchorfile>a04648.html</anchorfile>
      <anchor>ab3cb56e493ff3794f0a906ff51157eec</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::ShonanFactor</name>
    <filename>a04664.html</filename>
    <templarg>size_t d</templarg>
    <base>NoiseModelFactor2&lt; SOn, SOn &gt;</base>
    <member kind="function">
      <type></type>
      <name>ShonanFactor</name>
      <anchorfile>a04664.html</anchorfile>
      <anchor>ae70223be76f2bbce2cab7a2a1f912322</anchor>
      <arglist>(Key j1, Key j2, const Rot &amp;R12, size_t p, const SharedNoiseModel &amp;model=nullptr, const boost::shared_ptr&lt; Matrix &gt; &amp;G=nullptr)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>a04664.html</anchorfile>
      <anchor>afb99e27849ddf4ca7cc6f5b6246ab077</anchor>
      <arglist>(const std::string &amp;s, const KeyFormatter &amp;keyFormatter=DefaultKeyFormatter) const override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>equals</name>
      <anchorfile>a04664.html</anchorfile>
      <anchor>a13d9c660039d7e6a77b236e1b1d5b04f</anchor>
      <arglist>(const NonlinearFactor &amp;expected, double tol=1e-9) const override</arglist>
    </member>
    <member kind="function">
      <type>Vector</type>
      <name>evaluateError</name>
      <anchorfile>a04664.html</anchorfile>
      <anchor>a486e23495180a3049d924b0588ee7ed6</anchor>
      <arglist>(const SOn &amp;Q1, const SOn &amp;Q2, boost::optional&lt; Matrix &amp; &gt; H1=boost::none, boost::optional&lt; Matrix &amp; &gt; H2=boost::none) const override</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ShonanFactor</name>
      <anchorfile>a04664.html</anchorfile>
      <anchor>ae70223be76f2bbce2cab7a2a1f912322</anchor>
      <arglist>(Key j1, Key j2, const Rot &amp;R12, size_t p, const SharedNoiseModel &amp;model=nullptr, const boost::shared_ptr&lt; Matrix &gt; &amp;G=nullptr)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>a04664.html</anchorfile>
      <anchor>afb99e27849ddf4ca7cc6f5b6246ab077</anchor>
      <arglist>(const std::string &amp;s, const KeyFormatter &amp;keyFormatter=DefaultKeyFormatter) const override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>equals</name>
      <anchorfile>a04664.html</anchorfile>
      <anchor>a13d9c660039d7e6a77b236e1b1d5b04f</anchor>
      <arglist>(const NonlinearFactor &amp;expected, double tol=1e-9) const override</arglist>
    </member>
    <member kind="function">
      <type>Vector</type>
      <name>evaluateError</name>
      <anchorfile>a04664.html</anchorfile>
      <anchor>a486e23495180a3049d924b0588ee7ed6</anchor>
      <arglist>(const SOn &amp;Q1, const SOn &amp;Q2, boost::optional&lt; Matrix &amp; &gt; H1=boost::none, boost::optional&lt; Matrix &amp; &gt; H2=boost::none) const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::ShonanGaugeFactor</name>
    <filename>a04668.html</filename>
    <base>gtsam::NonlinearFactor</base>
    <member kind="function">
      <type></type>
      <name>ShonanGaugeFactor</name>
      <anchorfile>a04668.html</anchorfile>
      <anchor>af066e4ba178cc6af9a3163f005d4deea</anchor>
      <arglist>(Key key, size_t p, size_t d=3, boost::optional&lt; double &gt; gamma=boost::none)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ShonanGaugeFactor</name>
      <anchorfile>a04668.html</anchorfile>
      <anchor>a94cec89a59809e64fd9e439ec4757018</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>error</name>
      <anchorfile>a04668.html</anchorfile>
      <anchor>a408de50cac8a0dbca050acf9d5a5d209</anchor>
      <arglist>(const Values &amp;c) const override</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>dim</name>
      <anchorfile>a04668.html</anchorfile>
      <anchor>acf710e8b8ddd4c7c2b87c6baf513b310</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>boost::shared_ptr&lt; GaussianFactor &gt;</type>
      <name>linearize</name>
      <anchorfile>a04668.html</anchorfile>
      <anchor>aa1f2e5da985917e369cb1f9a408e2420</anchor>
      <arglist>(const Values &amp;c) const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::Signature</name>
    <filename>a03020.html</filename>
    <member kind="function">
      <type></type>
      <name>Signature</name>
      <anchorfile>a03020.html</anchorfile>
      <anchor>a3ad921ac92454eb5397709294082ce8c</anchor>
      <arglist>(const DiscreteKey &amp;key)</arglist>
    </member>
    <member kind="function">
      <type>const DiscreteKey &amp;</type>
      <name>key</name>
      <anchorfile>a03020.html</anchorfile>
      <anchor>a10c4bb368ec774f858fb8b285d8d3fd9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const DiscreteKeys &amp;</type>
      <name>parents</name>
      <anchorfile>a03020.html</anchorfile>
      <anchor>ad7f3050204ed5d3e880642817f5c18e6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>DiscreteKeys</type>
      <name>discreteKeys</name>
      <anchorfile>a03020.html</anchorfile>
      <anchor>a64fdc562c9030fca676e5f20103ce4b1</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>KeyVector</type>
      <name>indices</name>
      <anchorfile>a03020.html</anchorfile>
      <anchor>adbe99487fcc5aed360e16ea58599ad0c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Signature &amp;</type>
      <name>operator,</name>
      <anchorfile>a03020.html</anchorfile>
      <anchor>a7c6858868dbc60a707ec686b14263a7a</anchor>
      <arglist>(const DiscreteKey &amp;parent)</arglist>
    </member>
    <member kind="function">
      <type>Signature &amp;</type>
      <name>operator=</name>
      <anchorfile>a03020.html</anchorfile>
      <anchor>a7f92248d9f002bbc34942db22580ed76</anchor>
      <arglist>(const std::string &amp;spec)</arglist>
    </member>
    <member kind="function">
      <type>Signature &amp;</type>
      <name>operator=</name>
      <anchorfile>a03020.html</anchorfile>
      <anchor>a9ec0c17cbe7f60e4497e5eace4d254cb</anchor>
      <arglist>(const Table &amp;table)</arglist>
    </member>
    <member kind="typedef">
      <type>std::vector&lt; double &gt;</type>
      <name>Row</name>
      <anchorfile>a03020.html</anchorfile>
      <anchor>a058b129adfd1cdb887c88efedf2c8ca3</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>GTSAM_EXPORT friend std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a03020.html</anchorfile>
      <anchor>af83334c783e65906cd4c6a379b278f09</anchor>
      <arglist>(std::ostream &amp;os, const Signature &amp;s)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::Similarity3</name>
    <filename>a03356.html</filename>
    <base>LieGroup&lt; Similarity3, 7 &gt;</base>
    <member kind="function">
      <type>GTSAM_EXPORT</type>
      <name>Similarity3</name>
      <anchorfile>a03356.html</anchorfile>
      <anchor>a5bd853342d60651fc03695e950564a47</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>GTSAM_EXPORT</type>
      <name>Similarity3</name>
      <anchorfile>a03356.html</anchorfile>
      <anchor>a37c7935249173dbef177d1615fa47c21</anchor>
      <arglist>(double s)</arglist>
    </member>
    <member kind="function">
      <type>GTSAM_EXPORT</type>
      <name>Similarity3</name>
      <anchorfile>a03356.html</anchorfile>
      <anchor>a7e69a343835c52aee6ada8a48a2e9680</anchor>
      <arglist>(const Rot3 &amp;R, const Point3 &amp;t, double s)</arglist>
    </member>
    <member kind="function">
      <type>GTSAM_EXPORT</type>
      <name>Similarity3</name>
      <anchorfile>a03356.html</anchorfile>
      <anchor>a62d827f2276a6c98b47d9b5724f01a45</anchor>
      <arglist>(const Matrix3 &amp;R, const Vector3 &amp;t, double s)</arglist>
    </member>
    <member kind="function">
      <type>GTSAM_EXPORT</type>
      <name>Similarity3</name>
      <anchorfile>a03356.html</anchorfile>
      <anchor>ad3203c1d4df89ae786dd7dc5263fdcca</anchor>
      <arglist>(const Matrix4 &amp;T)</arglist>
    </member>
    <member kind="function">
      <type>GTSAM_EXPORT bool</type>
      <name>equals</name>
      <anchorfile>a03356.html</anchorfile>
      <anchor>aa6f77a24dbaa26292115a8406df9630c</anchor>
      <arglist>(const Similarity3 &amp;sim, double tol) const</arglist>
    </member>
    <member kind="function">
      <type>GTSAM_EXPORT bool</type>
      <name>operator==</name>
      <anchorfile>a03356.html</anchorfile>
      <anchor>afc94281a3f187c6baf75c824e1c55ee1</anchor>
      <arglist>(const Similarity3 &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>GTSAM_EXPORT void</type>
      <name>print</name>
      <anchorfile>a03356.html</anchorfile>
      <anchor>a0fb6ed28fa8d29417c28e5199f2009da</anchor>
      <arglist>(const std::string &amp;s) const</arglist>
    </member>
    <member kind="function">
      <type>GTSAM_EXPORT Similarity3</type>
      <name>operator*</name>
      <anchorfile>a03356.html</anchorfile>
      <anchor>aefe14b1c24257fe1975d69a85c78c56a</anchor>
      <arglist>(const Similarity3 &amp;S) const</arglist>
    </member>
    <member kind="function">
      <type>GTSAM_EXPORT Similarity3</type>
      <name>inverse</name>
      <anchorfile>a03356.html</anchorfile>
      <anchor>a5873b80995627940cdf79da5b631fa6c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static GTSAM_EXPORT Similarity3</type>
      <name>identity</name>
      <anchorfile>a03356.html</anchorfile>
      <anchor>a20542e5c60f507977da8636f9e7f8490</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>GTSAM_EXPORT Point3</type>
      <name>transformFrom</name>
      <anchorfile>a03356.html</anchorfile>
      <anchor>ab7680b3620bc476049e93e421e1b4a8a</anchor>
      <arglist>(const Point3 &amp;p, OptionalJacobian&lt; 3, 7 &gt; H1=boost::none, OptionalJacobian&lt; 3, 3 &gt; H2=boost::none) const</arglist>
    </member>
    <member kind="function">
      <type>GTSAM_EXPORT Pose3</type>
      <name>transformFrom</name>
      <anchorfile>a03356.html</anchorfile>
      <anchor>aa26f89eb7dbcdb6ec21570b4913cfd02</anchor>
      <arglist>(const Pose3 &amp;T) const</arglist>
    </member>
    <member kind="function">
      <type>GTSAM_EXPORT Point3</type>
      <name>operator*</name>
      <anchorfile>a03356.html</anchorfile>
      <anchor>a9fafe89d73317ae47d47b93d422405cf</anchor>
      <arglist>(const Point3 &amp;p) const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static GTSAM_EXPORT Similarity3</type>
      <name>Align</name>
      <anchorfile>a03356.html</anchorfile>
      <anchor>a253f4f529b2c70dc6319211150763f09</anchor>
      <arglist>(const std::vector&lt; Point3Pair &gt; &amp;abPointPairs)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static GTSAM_EXPORT Similarity3</type>
      <name>Align</name>
      <anchorfile>a03356.html</anchorfile>
      <anchor>ac69a898f450b149bd8f78e14b34e7117</anchor>
      <arglist>(const std::vector&lt; Pose3Pair &gt; &amp;abPosePairs)</arglist>
    </member>
    <member kind="function">
      <type>GTSAM_EXPORT Matrix7</type>
      <name>AdjointMap</name>
      <anchorfile>a03356.html</anchorfile>
      <anchor>a17e108e5ab54a6f626ba0659ecdb5387</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static GTSAM_EXPORT Vector7</type>
      <name>Logmap</name>
      <anchorfile>a03356.html</anchorfile>
      <anchor>a0925df7c202a4445801fd82c0662683a</anchor>
      <arglist>(const Similarity3 &amp;s, OptionalJacobian&lt; 7, 7 &gt; Hm=boost::none)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static GTSAM_EXPORT Similarity3</type>
      <name>Expmap</name>
      <anchorfile>a03356.html</anchorfile>
      <anchor>a1b766a73225ce425322625ad1b7734b2</anchor>
      <arglist>(const Vector7 &amp;v, OptionalJacobian&lt; 7, 7 &gt; Hm=boost::none)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static GTSAM_EXPORT Matrix4</type>
      <name>wedge</name>
      <anchorfile>a03356.html</anchorfile>
      <anchor>a96905d8d1f2e42badb7ad13280cd07e3</anchor>
      <arglist>(const Vector7 &amp;xi)</arglist>
    </member>
    <member kind="function">
      <type>GTSAM_EXPORT const Matrix4</type>
      <name>matrix</name>
      <anchorfile>a03356.html</anchorfile>
      <anchor>a900ed5c553a93d6410b64c51c28255eb</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Rot3 &amp;</type>
      <name>rotation</name>
      <anchorfile>a03356.html</anchorfile>
      <anchor>a422e7c17c20a376b1ced6cb562dd7b30</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Point3 &amp;</type>
      <name>translation</name>
      <anchorfile>a03356.html</anchorfile>
      <anchor>afdded5fc9f9944ba70d86cf423df57c4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>scale</name>
      <anchorfile>a03356.html</anchorfile>
      <anchor>ab29559834678c644820664e1c523516b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>GTSAM_EXPORT</type>
      <name>operator Pose3</name>
      <anchorfile>a03356.html</anchorfile>
      <anchor>a358e9b2c763ae608f782514bb5bcdc2d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>dim</name>
      <anchorfile>a03356.html</anchorfile>
      <anchor>a894f8eb8f22d0170757e6215b311b8d2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static size_t</type>
      <name>Dim</name>
      <anchorfile>a03356.html</anchorfile>
      <anchor>a0ce60f9e336910059d51fdb97abe1648</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>GTSAM_EXPORT</type>
      <name>Similarity3</name>
      <anchorfile>a03356.html</anchorfile>
      <anchor>a5bd853342d60651fc03695e950564a47</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>GTSAM_EXPORT</type>
      <name>Similarity3</name>
      <anchorfile>a03356.html</anchorfile>
      <anchor>a37c7935249173dbef177d1615fa47c21</anchor>
      <arglist>(double s)</arglist>
    </member>
    <member kind="function">
      <type>GTSAM_EXPORT</type>
      <name>Similarity3</name>
      <anchorfile>a03356.html</anchorfile>
      <anchor>a7e69a343835c52aee6ada8a48a2e9680</anchor>
      <arglist>(const Rot3 &amp;R, const Point3 &amp;t, double s)</arglist>
    </member>
    <member kind="function">
      <type>GTSAM_EXPORT</type>
      <name>Similarity3</name>
      <anchorfile>a03356.html</anchorfile>
      <anchor>a62d827f2276a6c98b47d9b5724f01a45</anchor>
      <arglist>(const Matrix3 &amp;R, const Vector3 &amp;t, double s)</arglist>
    </member>
    <member kind="function">
      <type>GTSAM_EXPORT</type>
      <name>Similarity3</name>
      <anchorfile>a03356.html</anchorfile>
      <anchor>ad3203c1d4df89ae786dd7dc5263fdcca</anchor>
      <arglist>(const Matrix4 &amp;T)</arglist>
    </member>
    <class kind="struct">gtsam::Similarity3::ChartAtOrigin</class>
  </compound>
  <compound kind="class">
    <name>gtsam::SingleValue</name>
    <filename>a05028.html</filename>
    <base>gtsam::Constraint</base>
    <member kind="function">
      <type></type>
      <name>SingleValue</name>
      <anchorfile>a05028.html</anchorfile>
      <anchor>a2acd3b9fa0cd3477a5798635897faf42</anchor>
      <arglist>(Key key, size_t n, size_t value)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SingleValue</name>
      <anchorfile>a05028.html</anchorfile>
      <anchor>a5ebc0644c4e787c77db513e4d803564b</anchor>
      <arglist>(const DiscreteKey &amp;dkey, size_t value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>a05028.html</anchorfile>
      <anchor>ae615447229d1a63fdbde2e7f37c828c6</anchor>
      <arglist>(const std::string &amp;s=&quot;&quot;, const KeyFormatter &amp;formatter=DefaultKeyFormatter) const override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>equals</name>
      <anchorfile>a05028.html</anchorfile>
      <anchor>a40a26be8605953addfad85d5c44bc19b</anchor>
      <arglist>(const DiscreteFactor &amp;other, double tol) const override</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>operator()</name>
      <anchorfile>a05028.html</anchorfile>
      <anchor>a83d3f242bffb6a516a2e940f782db139</anchor>
      <arglist>(const Values &amp;values) const override</arglist>
    </member>
    <member kind="function">
      <type>DecisionTreeFactor</type>
      <name>toDecisionTreeFactor</name>
      <anchorfile>a05028.html</anchorfile>
      <anchor>a6a7147d3ed073bf6ebbf49dbbc685173</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>DecisionTreeFactor</type>
      <name>operator*</name>
      <anchorfile>a05028.html</anchorfile>
      <anchor>aa86925cf27b4d84c81866ec582aa0e67</anchor>
      <arglist>(const DecisionTreeFactor &amp;f) const override</arglist>
    </member>
    <member kind="function">
      <type>Constraint::shared_ptr</type>
      <name>partiallyApply</name>
      <anchorfile>a05028.html</anchorfile>
      <anchor>a052021f6daca6a62fd1920518c2a5f6c</anchor>
      <arglist>(const Values &amp;values) const override</arglist>
    </member>
    <member kind="function">
      <type>Constraint::shared_ptr</type>
      <name>partiallyApply</name>
      <anchorfile>a05028.html</anchorfile>
      <anchor>a36aa3a8a164dcfd207dc36d73dd711ff</anchor>
      <arglist>(const std::vector&lt; Domain &gt; &amp;domains) const override</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>gtsam::SlotEntry</name>
    <filename>a03976.html</filename>
  </compound>
  <compound kind="class">
    <name>gtsam::SmartFactorBase</name>
    <filename>a04864.html</filename>
    <templarg>class CAMERA</templarg>
    <base>gtsam::NonlinearFactor</base>
    <member kind="function">
      <type></type>
      <name>SmartFactorBase</name>
      <anchorfile>a04864.html</anchorfile>
      <anchor>a9e455b56e44697ae925f0d1e7569e5c6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SmartFactorBase</name>
      <anchorfile>a04864.html</anchorfile>
      <anchor>ab0b82f1117c0a27386839f27366833cb</anchor>
      <arglist>(const SharedNoiseModel &amp;sharedNoiseModel, boost::optional&lt; Pose3 &gt; body_P_sensor=boost::none, size_t expectedNumberCameras=10)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~SmartFactorBase</name>
      <anchorfile>a04864.html</anchorfile>
      <anchor>a04acc3dd1e9032716875024f17c663d8</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add</name>
      <anchorfile>a04864.html</anchorfile>
      <anchor>a01b4cac4135a7778910102d604551135</anchor>
      <arglist>(const Z &amp;measured, const Key &amp;key)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add</name>
      <anchorfile>a04864.html</anchorfile>
      <anchor>a8dcb6dc1906ebc1a35a77c1dd7816791</anchor>
      <arglist>(const ZVector &amp;measurements, const KeyVector &amp;cameraKeys)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add</name>
      <anchorfile>a04864.html</anchorfile>
      <anchor>ab3eccd6bab18b357661119a76e98db0a</anchor>
      <arglist>(const SFM_TRACK &amp;trackToAdd)</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>dim</name>
      <anchorfile>a04864.html</anchorfile>
      <anchor>ac6cdc595bcf844b612a4898bc8ae9508</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>const ZVector &amp;</type>
      <name>measured</name>
      <anchorfile>a04864.html</anchorfile>
      <anchor>ab914ccf9204b0b1fe2573ee0cd976c64</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Cameras</type>
      <name>cameras</name>
      <anchorfile>a04864.html</anchorfile>
      <anchor>a5ffab1f3006c13bdc7efe7ce9a2d7d2f</anchor>
      <arglist>(const Values &amp;values) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>a04864.html</anchorfile>
      <anchor>ace7df6fcffb73b595c809301d523a316</anchor>
      <arglist>(const std::string &amp;s=&quot;&quot;, const KeyFormatter &amp;keyFormatter=DefaultKeyFormatter) const override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>equals</name>
      <anchorfile>a04864.html</anchorfile>
      <anchor>afe695bd34def6345494b30e6a85cb6c6</anchor>
      <arglist>(const NonlinearFactor &amp;p, double tol=1e-9) const override</arglist>
    </member>
    <member kind="function">
      <type>Vector</type>
      <name>unwhitenedError</name>
      <anchorfile>a04864.html</anchorfile>
      <anchor>a9cd9089c763cae145fb0643f406a13b2</anchor>
      <arglist>(const Cameras &amp;cameras, const POINT &amp;point, boost::optional&lt; typename Cameras::FBlocks &amp; &gt; Fs=boost::none, boost::optional&lt; Matrix &amp; &gt; E=boost::none) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>correctForMissingMeasurements</name>
      <anchorfile>a04864.html</anchorfile>
      <anchor>adbf55b456c9d393f5fa8066fd6f5cebe</anchor>
      <arglist>(const Cameras &amp;cameras, Vector &amp;ue, boost::optional&lt; typename Cameras::FBlocks &amp; &gt; Fs=boost::none, boost::optional&lt; Matrix &amp; &gt; E=boost::none) const</arglist>
    </member>
    <member kind="function">
      <type>Vector</type>
      <name>whitenedError</name>
      <anchorfile>a04864.html</anchorfile>
      <anchor>a528b1a2f154f65657c264d9e265dc3f3</anchor>
      <arglist>(const Cameras &amp;cameras, const POINT &amp;point) const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>totalReprojectionError</name>
      <anchorfile>a04864.html</anchorfile>
      <anchor>a882db94ae4f6d76b2ead0d9218676bc5</anchor>
      <arglist>(const Cameras &amp;cameras, const POINT &amp;point) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>computeJacobians</name>
      <anchorfile>a04864.html</anchorfile>
      <anchor>a0191de8c3795fce5a202b8205f842337</anchor>
      <arglist>(FBlocks &amp;Fs, Matrix &amp;E, Vector &amp;b, const Cameras &amp;cameras, const POINT &amp;point) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>computeJacobiansSVD</name>
      <anchorfile>a04864.html</anchorfile>
      <anchor>a9531551659920656c1c2c350b901af9a</anchor>
      <arglist>(FBlocks &amp;Fs, Matrix &amp;Enull, Vector &amp;b, const Cameras &amp;cameras, const POINT &amp;point) const</arglist>
    </member>
    <member kind="function">
      <type>boost::shared_ptr&lt; RegularHessianFactor&lt; Dim &gt; &gt;</type>
      <name>createHessianFactor</name>
      <anchorfile>a04864.html</anchorfile>
      <anchor>a91aa223973ef85e347dbd213d96fff42</anchor>
      <arglist>(const Cameras &amp;cameras, const Point3 &amp;point, const double lambda=0.0, bool diagonalDamping=false) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>updateAugmentedHessian</name>
      <anchorfile>a04864.html</anchorfile>
      <anchor>a2718e23a31d4df8d3bcdc80472a2f64e</anchor>
      <arglist>(const Cameras &amp;cameras, const Point3 &amp;point, const double lambda, bool diagonalDamping, SymmetricBlockMatrix &amp;augmentedHessian, const KeyVector allKeys) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>whitenJacobians</name>
      <anchorfile>a04864.html</anchorfile>
      <anchor>aa7cacb92b9bf0af24c701d11aa6c6255</anchor>
      <arglist>(FBlocks &amp;F, Matrix &amp;E, Vector &amp;b) const</arglist>
    </member>
    <member kind="function">
      <type>boost::shared_ptr&lt; RegularImplicitSchurFactor&lt; CAMERA &gt; &gt;</type>
      <name>createRegularImplicitSchurFactor</name>
      <anchorfile>a04864.html</anchorfile>
      <anchor>a386cafc4275bc1aa5922455a03fbc166</anchor>
      <arglist>(const Cameras &amp;cameras, const Point3 &amp;point, double lambda=0.0, bool diagonalDamping=false) const</arglist>
    </member>
    <member kind="function">
      <type>boost::shared_ptr&lt; JacobianFactorQ&lt; Dim, ZDim &gt; &gt;</type>
      <name>createJacobianQFactor</name>
      <anchorfile>a04864.html</anchorfile>
      <anchor>ac7b40cb9839dda9d000349798beeb012</anchor>
      <arglist>(const Cameras &amp;cameras, const Point3 &amp;point, double lambda=0.0, bool diagonalDamping=false) const</arglist>
    </member>
    <member kind="function">
      <type>boost::shared_ptr&lt; JacobianFactor &gt;</type>
      <name>createJacobianSVDFactor</name>
      <anchorfile>a04864.html</anchorfile>
      <anchor>abbf290199d5b0490646e96dc6c52f390</anchor>
      <arglist>(const Cameras &amp;cameras, const Point3 &amp;point, double lambda=0.0) const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Matrix</type>
      <name>PointCov</name>
      <anchorfile>a04864.html</anchorfile>
      <anchor>ae81f94fb333ec5a875c74e241fbf93bd</anchor>
      <arglist>(const Matrix &amp;E)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>FillDiagonalF</name>
      <anchorfile>a04864.html</anchorfile>
      <anchor>a69e2d616ed38d08c1ce16150e95475c0</anchor>
      <arglist>(const FBlocks &amp;Fs, Matrix &amp;F)</arglist>
    </member>
    <member kind="variable">
      <type>GTSAM_MAKE_ALIGNED_OPERATOR_NEW typedef boost::shared_ptr&lt; This &gt;</type>
      <name>shared_ptr</name>
      <anchorfile>a04864.html</anchorfile>
      <anchor>a9c7c1b1b20e43c2020593873f94c732e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>Dim</name>
      <anchorfile>a04864.html</anchorfile>
      <anchor>a407fa000777864d9142f3e3742f7e9cd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>ZDim</name>
      <anchorfile>a04864.html</anchorfile>
      <anchor>ae3609b3615ce18038ddcbf979f8f13df</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>CameraSet&lt; CAMERA &gt;</type>
      <name>Cameras</name>
      <anchorfile>a04864.html</anchorfile>
      <anchor>af404fbccc4a4d53232f67a98d0e5a61b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>SharedIsotropic</type>
      <name>noiseModel_</name>
      <anchorfile>a04864.html</anchorfile>
      <anchor>a39a7aa087ac63512c5cccf828b90b516</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ZVector</type>
      <name>measured_</name>
      <anchorfile>a04864.html</anchorfile>
      <anchor>a9560247c976b32599247fb7f738a9211</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>boost::optional&lt; Pose3 &gt;</type>
      <name>body_P_sensor_</name>
      <anchorfile>a04864.html</anchorfile>
      <anchor>ad8b373cb10b9a3e4c13a37925821e64a</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>boost::serialization::access</name>
      <anchorfile>a04864.html</anchorfile>
      <anchor>ac98d07dd8f7b70e16ccb9a01abf56b9c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::SmartProjectionFactor</name>
    <filename>a04872.html</filename>
    <templarg>class CAMERA</templarg>
    <base>gtsam::SmartFactorBase</base>
    <member kind="variable" protection="protected">
      <type>TriangulationResult</type>
      <name>result_</name>
      <anchorfile>a04872.html</anchorfile>
      <anchor>a659be9a9d83e420af8637d58c9ea9cf1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; Pose3, Eigen::aligned_allocator&lt; Pose3 &gt; &gt;</type>
      <name>cameraPosesTriangulation_</name>
      <anchorfile>a04872.html</anchorfile>
      <anchor>a9a1250608b5eefaaec2a4e455a68f850</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SmartProjectionFactor</name>
      <anchorfile>a04872.html</anchorfile>
      <anchor>afc54313a5ae848bd36184c969fbda36b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SmartProjectionFactor</name>
      <anchorfile>a04872.html</anchorfile>
      <anchor>ad3cae36bd7cb1b3031dd24509603270a</anchor>
      <arglist>(const SharedNoiseModel &amp;sharedNoiseModel, const SmartProjectionParams &amp;params=SmartProjectionParams())</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~SmartProjectionFactor</name>
      <anchorfile>a04872.html</anchorfile>
      <anchor>a74d26064f65e7712a3252667b1c64e81</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>a04872.html</anchorfile>
      <anchor>a47bd3f901807f2820c9ce8f01882c053</anchor>
      <arglist>(const std::string &amp;s=&quot;&quot;, const KeyFormatter &amp;keyFormatter=DefaultKeyFormatter) const override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>equals</name>
      <anchorfile>a04872.html</anchorfile>
      <anchor>ab889b22f2c0eac49e0430ec9ef086567</anchor>
      <arglist>(const NonlinearFactor &amp;p, double tol=1e-9) const override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>decideIfTriangulate</name>
      <anchorfile>a04872.html</anchorfile>
      <anchor>a13b6cc6b17c4de6ed2a254c18b01931d</anchor>
      <arglist>(const Cameras &amp;cameras) const</arglist>
    </member>
    <member kind="function">
      <type>TriangulationResult</type>
      <name>triangulateSafe</name>
      <anchorfile>a04872.html</anchorfile>
      <anchor>a689089b7db400d88f95ef8cdb6b8a653</anchor>
      <arglist>(const Cameras &amp;cameras) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>triangulateForLinearize</name>
      <anchorfile>a04872.html</anchorfile>
      <anchor>aeb22b08db97a4bdb4e9ce22d37f3565d</anchor>
      <arglist>(const Cameras &amp;cameras) const</arglist>
    </member>
    <member kind="function">
      <type>boost::shared_ptr&lt; RegularHessianFactor&lt; Base::Dim &gt; &gt;</type>
      <name>createHessianFactor</name>
      <anchorfile>a04872.html</anchorfile>
      <anchor>a67092b8e109f1aa471b586f6a5e4fe52</anchor>
      <arglist>(const Cameras &amp;cameras, const double lambda=0.0, bool diagonalDamping=false) const</arglist>
    </member>
    <member kind="function">
      <type>boost::shared_ptr&lt; JacobianFactorQ&lt; Base::Dim, 2 &gt; &gt;</type>
      <name>createJacobianQFactor</name>
      <anchorfile>a04872.html</anchorfile>
      <anchor>ac2d6c62fa6d104c20d3e073353075450</anchor>
      <arglist>(const Cameras &amp;cameras, double lambda) const</arglist>
    </member>
    <member kind="function">
      <type>boost::shared_ptr&lt; JacobianFactorQ&lt; Base::Dim, 2 &gt; &gt;</type>
      <name>createJacobianQFactor</name>
      <anchorfile>a04872.html</anchorfile>
      <anchor>a2a4cd0a100b5a108ca3ced2115ae6908</anchor>
      <arglist>(const Values &amp;values, double lambda) const</arglist>
    </member>
    <member kind="function">
      <type>boost::shared_ptr&lt; JacobianFactor &gt;</type>
      <name>createJacobianSVDFactor</name>
      <anchorfile>a04872.html</anchorfile>
      <anchor>a2e5b6301316bef79afd96c5e94925d18</anchor>
      <arglist>(const Cameras &amp;cameras, double lambda) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual boost::shared_ptr&lt; RegularHessianFactor&lt; Base::Dim &gt; &gt;</type>
      <name>linearizeToHessian</name>
      <anchorfile>a04872.html</anchorfile>
      <anchor>a3930903b8f4845e4c034a7dccfd69f3f</anchor>
      <arglist>(const Values &amp;values, double lambda=0.0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual boost::shared_ptr&lt; RegularImplicitSchurFactor&lt; CAMERA &gt; &gt;</type>
      <name>linearizeToImplicit</name>
      <anchorfile>a04872.html</anchorfile>
      <anchor>a9d82bd73396fcc3891725a9fe4fddb0c</anchor>
      <arglist>(const Values &amp;values, double lambda=0.0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual boost::shared_ptr&lt; JacobianFactorQ&lt; Base::Dim, 2 &gt; &gt;</type>
      <name>linearizeToJacobian</name>
      <anchorfile>a04872.html</anchorfile>
      <anchor>aa7953d6114a85f36d17fdfabe672be93</anchor>
      <arglist>(const Values &amp;values, double lambda=0.0) const</arglist>
    </member>
    <member kind="function">
      <type>boost::shared_ptr&lt; GaussianFactor &gt;</type>
      <name>linearizeDamped</name>
      <anchorfile>a04872.html</anchorfile>
      <anchor>a5f8192636bab8b0df3aea4d5683f79af</anchor>
      <arglist>(const Cameras &amp;cameras, const double lambda=0.0) const</arglist>
    </member>
    <member kind="function">
      <type>boost::shared_ptr&lt; GaussianFactor &gt;</type>
      <name>linearizeDamped</name>
      <anchorfile>a04872.html</anchorfile>
      <anchor>aff253b8e36d04ea1780db0b7f273e9ff</anchor>
      <arglist>(const Values &amp;values, const double lambda=0.0) const</arglist>
    </member>
    <member kind="function">
      <type>boost::shared_ptr&lt; GaussianFactor &gt;</type>
      <name>linearize</name>
      <anchorfile>a04872.html</anchorfile>
      <anchor>ae06709e5552f079acbaa3b12b0e1fa37</anchor>
      <arglist>(const Values &amp;values) const override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>triangulateAndComputeE</name>
      <anchorfile>a04872.html</anchorfile>
      <anchor>a9a36c36080404db5e58cdc487ff68da4</anchor>
      <arglist>(Matrix &amp;E, const Cameras &amp;cameras) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>triangulateAndComputeE</name>
      <anchorfile>a04872.html</anchorfile>
      <anchor>a5688a031e48a5e09e3c09b8bf46606c3</anchor>
      <arglist>(Matrix &amp;E, const Values &amp;values) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>computeJacobiansWithTriangulatedPoint</name>
      <anchorfile>a04872.html</anchorfile>
      <anchor>a2e66ef8f6b5a5ce36a3bc1ded3d91893</anchor>
      <arglist>(typename Base::FBlocks &amp;Fs, Matrix &amp;E, Vector &amp;b, const Cameras &amp;cameras) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>triangulateAndComputeJacobians</name>
      <anchorfile>a04872.html</anchorfile>
      <anchor>ab29870981ddd32b5a1feb35498064372</anchor>
      <arglist>(typename Base::FBlocks &amp;Fs, Matrix &amp;E, Vector &amp;b, const Values &amp;values) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>triangulateAndComputeJacobiansSVD</name>
      <anchorfile>a04872.html</anchorfile>
      <anchor>ae5000a3cc7a2f55a7fa458b7fd7c443a</anchor>
      <arglist>(typename Base::FBlocks &amp;Fs, Matrix &amp;Enull, Vector &amp;b, const Values &amp;values) const</arglist>
    </member>
    <member kind="function">
      <type>Vector</type>
      <name>reprojectionErrorAfterTriangulation</name>
      <anchorfile>a04872.html</anchorfile>
      <anchor>ae6fc7b0bc3ee4173a7980b04fc501c22</anchor>
      <arglist>(const Values &amp;values) const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>totalReprojectionError</name>
      <anchorfile>a04872.html</anchorfile>
      <anchor>aa30166ceca524f30644895be41d56e0e</anchor>
      <arglist>(const Cameras &amp;cameras, boost::optional&lt; Point3 &gt; externalPoint=boost::none) const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>error</name>
      <anchorfile>a04872.html</anchorfile>
      <anchor>a767256af0a162140a6765cfc18f40f4b</anchor>
      <arglist>(const Values &amp;values) const override</arglist>
    </member>
    <member kind="function">
      <type>TriangulationResult</type>
      <name>point</name>
      <anchorfile>a04872.html</anchorfile>
      <anchor>ae8d5d0e25ef5798020097fbc4c2d5102</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>TriangulationResult</type>
      <name>point</name>
      <anchorfile>a04872.html</anchorfile>
      <anchor>ad11aa682fdff0190763ed3c33eec3985</anchor>
      <arglist>(const Values &amp;values) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isValid</name>
      <anchorfile>a04872.html</anchorfile>
      <anchor>a968160b61e38601f91e0dcae88521841</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isDegenerate</name>
      <anchorfile>a04872.html</anchorfile>
      <anchor>aac6d6bde4d1591b7f0bc7051c46a0eb3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isPointBehindCamera</name>
      <anchorfile>a04872.html</anchorfile>
      <anchor>adcc2d224d60f4aec4e0efe150097db2c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isOutlier</name>
      <anchorfile>a04872.html</anchorfile>
      <anchor>a3ef991d19b08d78f25b2bd078e294460</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isFarPoint</name>
      <anchorfile>a04872.html</anchorfile>
      <anchor>a61f5b43bba56b82ab12d1d006e90f19f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; This &gt;</type>
      <name>shared_ptr</name>
      <anchorfile>a04872.html</anchorfile>
      <anchor>af14bb9ba7f4664d710079353501204a1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>CAMERA</type>
      <name>Camera</name>
      <anchorfile>a04872.html</anchorfile>
      <anchor>ac0b4e8c71bfec28df85cb451409697fb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>TriangulationResult</type>
      <name>result_</name>
      <anchorfile>a04872.html</anchorfile>
      <anchor>a659be9a9d83e420af8637d58c9ea9cf1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; Pose3, Eigen::aligned_allocator&lt; Pose3 &gt; &gt;</type>
      <name>cameraPosesTriangulation_</name>
      <anchorfile>a04872.html</anchorfile>
      <anchor>a9a1250608b5eefaaec2a4e455a68f850</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>boost::serialization::access</name>
      <anchorfile>a04872.html</anchorfile>
      <anchor>ac98d07dd8f7b70e16ccb9a01abf56b9c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>gtsam::SmartProjectionParams</name>
    <filename>a04868.html</filename>
    <member kind="variable">
      <type>double</type>
      <name>retriangulationThreshold</name>
      <anchorfile>a04868.html</anchorfile>
      <anchor>a5b1fa239a2827c833e2d6c035392d7d5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>throwCheirality</name>
      <anchorfile>a04868.html</anchorfile>
      <anchor>a11f8b823fcb922edff9bc2847e5fe36c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>verboseCheirality</name>
      <anchorfile>a04868.html</anchorfile>
      <anchor>ab8353996f6c8ea607c213c854b6b0bc1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>LinearizationMode</type>
      <name>linearizationMode</name>
      <anchorfile>a04868.html</anchorfile>
      <anchor>a4afa132d1f394b6256605752b3b8aab0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>DegeneracyMode</type>
      <name>degeneracyMode</name>
      <anchorfile>a04868.html</anchorfile>
      <anchor>a695982b029b814dffdd8a34bae523575</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>retriangulationThreshold</name>
      <anchorfile>a04868.html</anchorfile>
      <anchor>a5b1fa239a2827c833e2d6c035392d7d5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>throwCheirality</name>
      <anchorfile>a04868.html</anchorfile>
      <anchor>a11f8b823fcb922edff9bc2847e5fe36c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>verboseCheirality</name>
      <anchorfile>a04868.html</anchorfile>
      <anchor>ab8353996f6c8ea607c213c854b6b0bc1</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>boost::serialization::access</name>
      <anchorfile>a04868.html</anchorfile>
      <anchor>ac98d07dd8f7b70e16ccb9a01abf56b9c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::SmartProjectionPoseFactor</name>
    <filename>a04880.html</filename>
    <templarg>class CALIBRATION</templarg>
    <base>SmartProjectionFactor&lt; PinholePose&lt; CALIBRATION &gt; &gt;</base>
    <member kind="function">
      <type></type>
      <name>SmartProjectionPoseFactor</name>
      <anchorfile>a04880.html</anchorfile>
      <anchor>aceb2d76933a58312e2ddd0ef64f12cfd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SmartProjectionPoseFactor</name>
      <anchorfile>a04880.html</anchorfile>
      <anchor>a165cf8ab1c71f9d685fc209dd6d672b8</anchor>
      <arglist>(const SharedNoiseModel &amp;sharedNoiseModel, const boost::shared_ptr&lt; CALIBRATION &gt; K, const SmartProjectionParams &amp;params=SmartProjectionParams())</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SmartProjectionPoseFactor</name>
      <anchorfile>a04880.html</anchorfile>
      <anchor>abcb92891b3d5fd2030b2c74a8349e268</anchor>
      <arglist>(const SharedNoiseModel &amp;sharedNoiseModel, const boost::shared_ptr&lt; CALIBRATION &gt; K, const boost::optional&lt; Pose3 &gt; body_P_sensor, const SmartProjectionParams &amp;params=SmartProjectionParams())</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~SmartProjectionPoseFactor</name>
      <anchorfile>a04880.html</anchorfile>
      <anchor>a6977aebb8c9cce62f627646134f94cac</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>a04880.html</anchorfile>
      <anchor>a6c638ae6535bf66d13e70852dd851ff3</anchor>
      <arglist>(const std::string &amp;s=&quot;&quot;, const KeyFormatter &amp;keyFormatter=DefaultKeyFormatter) const override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>equals</name>
      <anchorfile>a04880.html</anchorfile>
      <anchor>a13a2a01f64b4c1c71959d29214aaec07</anchor>
      <arglist>(const NonlinearFactor &amp;p, double tol=1e-9) const override</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>error</name>
      <anchorfile>a04880.html</anchorfile>
      <anchor>a1eed01662aeffd29f96eefcdeefa5c1e</anchor>
      <arglist>(const Values &amp;values) const override</arglist>
    </member>
    <member kind="function">
      <type>const boost::shared_ptr&lt; CALIBRATION &gt;</type>
      <name>calibration</name>
      <anchorfile>a04880.html</anchorfile>
      <anchor>a740ab3a315baf43cbc297410f9bb3df5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Base::Cameras</type>
      <name>cameras</name>
      <anchorfile>a04880.html</anchorfile>
      <anchor>a1c323a14087e35016da506e2b181adc9</anchor>
      <arglist>(const Values &amp;values) const override</arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; This &gt;</type>
      <name>shared_ptr</name>
      <anchorfile>a04880.html</anchorfile>
      <anchor>a28d8d11331b16d38d35f40d63bcb2853</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>boost::shared_ptr&lt; CALIBRATION &gt;</type>
      <name>K_</name>
      <anchorfile>a04880.html</anchorfile>
      <anchor>a38878009ca4060a870b45f46184656dd</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>boost::serialization::access</name>
      <anchorfile>a04880.html</anchorfile>
      <anchor>ac98d07dd8f7b70e16ccb9a01abf56b9c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::SmartProjectionPoseFactorRollingShutter</name>
    <filename>a05348.html</filename>
    <templarg>class CAMERA</templarg>
    <base>gtsam::SmartProjectionFactor</base>
    <member kind="function">
      <type></type>
      <name>SmartProjectionPoseFactorRollingShutter</name>
      <anchorfile>a05348.html</anchorfile>
      <anchor>aee6fc581764e9bc8b4fdda050c5c4391</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SmartProjectionPoseFactorRollingShutter</name>
      <anchorfile>a05348.html</anchorfile>
      <anchor>a66de5c2be2652730d2f16383684cadbb</anchor>
      <arglist>(const SharedNoiseModel &amp;sharedNoiseModel, const boost::shared_ptr&lt; Cameras &gt; &amp;cameraRig, const SmartProjectionParams &amp;params=SmartProjectionParams())</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~SmartProjectionPoseFactorRollingShutter</name>
      <anchorfile>a05348.html</anchorfile>
      <anchor>af3c33788382cdb1cbdfefd5ac0663610</anchor>
      <arglist>() override=default</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add</name>
      <anchorfile>a05348.html</anchorfile>
      <anchor>ab4d5e7ddfe4801011437acd91b1229e7</anchor>
      <arglist>(const Point2 &amp;measured, const Key &amp;world_P_body_key1, const Key &amp;world_P_body_key2, const double &amp;alpha, const size_t &amp;cameraId=0)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add</name>
      <anchorfile>a05348.html</anchorfile>
      <anchor>a30b89f32e4520b8806bee5ab63bcf381</anchor>
      <arglist>(const Point2Vector &amp;measurements, const std::vector&lt; std::pair&lt; Key, Key &gt; &gt; &amp;world_P_body_key_pairs, const std::vector&lt; double &gt; &amp;alphas, const FastVector&lt; size_t &gt; &amp;cameraIds=FastVector&lt; size_t &gt;())</arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; std::pair&lt; Key, Key &gt; &gt; &amp;</type>
      <name>world_P_body_key_pairs</name>
      <anchorfile>a05348.html</anchorfile>
      <anchor>a6d89422a4efff3839087d24ff96c8f7d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; double &gt; &amp;</type>
      <name>alphas</name>
      <anchorfile>a05348.html</anchorfile>
      <anchor>a506e47dc94c7476a6d3ad2ce4fbe0327</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const boost::shared_ptr&lt; Cameras &gt; &amp;</type>
      <name>cameraRig</name>
      <anchorfile>a05348.html</anchorfile>
      <anchor>aad5f1bd8c567dd7522369e2cb921a119</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const FastVector&lt; size_t &gt; &amp;</type>
      <name>cameraIds</name>
      <anchorfile>a05348.html</anchorfile>
      <anchor>a4dcca8e0bc68ce09c1f7052050660859</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>a05348.html</anchorfile>
      <anchor>a52b43121d19506a6f18fc0b86bf1edd8</anchor>
      <arglist>(const std::string &amp;s=&quot;&quot;, const KeyFormatter &amp;keyFormatter=DefaultKeyFormatter) const override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>equals</name>
      <anchorfile>a05348.html</anchorfile>
      <anchor>aba98343c0709aa7c726a03d96b2e9b2c</anchor>
      <arglist>(const NonlinearFactor &amp;p, double tol=1e-9) const override</arglist>
    </member>
    <member kind="function">
      <type>Base::Cameras</type>
      <name>cameras</name>
      <anchorfile>a05348.html</anchorfile>
      <anchor>a33b9836e5b3fd33e4926f98dedf632c5</anchor>
      <arglist>(const Values &amp;values) const override</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>error</name>
      <anchorfile>a05348.html</anchorfile>
      <anchor>a221763e56b1e620c4434deec82840847</anchor>
      <arglist>(const Values &amp;values) const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>computeJacobiansWithTriangulatedPoint</name>
      <anchorfile>a05348.html</anchorfile>
      <anchor>a0b6f33c93e95e06ea237aba119873cbf</anchor>
      <arglist>(FBlocks &amp;Fs, Matrix &amp;E, Vector &amp;b, const Values &amp;values) const</arglist>
    </member>
    <member kind="function">
      <type>boost::shared_ptr&lt; RegularHessianFactor&lt; DimPose &gt; &gt;</type>
      <name>createHessianFactor</name>
      <anchorfile>a05348.html</anchorfile>
      <anchor>a47d2e2313d8a43aef0542de6e32723c1</anchor>
      <arglist>(const Values &amp;values, const double &amp;lambda=0.0, bool diagonalDamping=false) const</arglist>
    </member>
    <member kind="function">
      <type>boost::shared_ptr&lt; GaussianFactor &gt;</type>
      <name>linearizeDamped</name>
      <anchorfile>a05348.html</anchorfile>
      <anchor>a61b870762722dd3342f34ddc991890ed</anchor>
      <arglist>(const Values &amp;values, const double &amp;lambda=0.0) const</arglist>
    </member>
    <member kind="function">
      <type>boost::shared_ptr&lt; GaussianFactor &gt;</type>
      <name>linearize</name>
      <anchorfile>a05348.html</anchorfile>
      <anchor>aee1b93654e930b076d9274928c7e8640</anchor>
      <arglist>(const Values &amp;values) const override</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>DimBlock</name>
      <anchorfile>a05348.html</anchorfile>
      <anchor>a3a6c440e33f46961d89237bc980cb184</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>DimPose</name>
      <anchorfile>a05348.html</anchorfile>
      <anchor>a41f3813d4a1185e4ed5e9e583e634519</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>ZDim</name>
      <anchorfile>a05348.html</anchorfile>
      <anchor>ada4093f24ee1eca355194aa6f1d638d0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; This &gt;</type>
      <name>shared_ptr</name>
      <anchorfile>a05348.html</anchorfile>
      <anchor>aa10909380a9dd3cb27c10461a995f264</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; std::pair&lt; Key, Key &gt; &gt;</type>
      <name>world_P_body_key_pairs_</name>
      <anchorfile>a05348.html</anchorfile>
      <anchor>ad60f17ddf006d797ae03ec9922ee0711</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; double &gt;</type>
      <name>alphas_</name>
      <anchorfile>a05348.html</anchorfile>
      <anchor>a4c8e2a9c555040da5fdb1172db9439d5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>boost::shared_ptr&lt; typename Base::Cameras &gt;</type>
      <name>cameraRig_</name>
      <anchorfile>a05348.html</anchorfile>
      <anchor>a9ec99f35baf33c6509baf148f9178104</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>FastVector&lt; size_t &gt;</type>
      <name>cameraIds_</name>
      <anchorfile>a05348.html</anchorfile>
      <anchor>a702997c398402be609afe3fdc137d3f3</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>boost::serialization::access</name>
      <anchorfile>a05348.html</anchorfile>
      <anchor>ac98d07dd8f7b70e16ccb9a01abf56b9c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::SmartProjectionRigFactor</name>
    <filename>a04888.html</filename>
    <templarg>class CAMERA</templarg>
    <base>gtsam::SmartProjectionFactor</base>
    <member kind="function">
      <type></type>
      <name>SmartProjectionRigFactor</name>
      <anchorfile>a04888.html</anchorfile>
      <anchor>a4717072c5bb0a2b4da0a24194616ca22</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SmartProjectionRigFactor</name>
      <anchorfile>a04888.html</anchorfile>
      <anchor>accba552f7cdd30829a659bf9c05c0319</anchor>
      <arglist>(const SharedNoiseModel &amp;sharedNoiseModel, const boost::shared_ptr&lt; Cameras &gt; &amp;cameraRig, const SmartProjectionParams &amp;params=SmartProjectionParams())</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~SmartProjectionRigFactor</name>
      <anchorfile>a04888.html</anchorfile>
      <anchor>a7018f726021075757f5d5366f6a5de4e</anchor>
      <arglist>() override=default</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add</name>
      <anchorfile>a04888.html</anchorfile>
      <anchor>a823306e9cac5db31ecbbdd61481c34bc</anchor>
      <arglist>(const Point2 &amp;measured, const Key &amp;poseKey, const size_t &amp;cameraId=0)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add</name>
      <anchorfile>a04888.html</anchorfile>
      <anchor>a35276bd8dccf54a068374705e76d593a</anchor>
      <arglist>(const Point2Vector &amp;measurements, const KeyVector &amp;poseKeys, const FastVector&lt; size_t &gt; &amp;cameraIds=FastVector&lt; size_t &gt;())</arglist>
    </member>
    <member kind="function">
      <type>const KeyVector &amp;</type>
      <name>nonUniqueKeys</name>
      <anchorfile>a04888.html</anchorfile>
      <anchor>ac998a65e4c8367394f29ffcd3c57adfb</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const boost::shared_ptr&lt; Cameras &gt; &amp;</type>
      <name>cameraRig</name>
      <anchorfile>a04888.html</anchorfile>
      <anchor>ad04e04ba4c9c99837f574989e256428a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const FastVector&lt; size_t &gt; &amp;</type>
      <name>cameraIds</name>
      <anchorfile>a04888.html</anchorfile>
      <anchor>a1e4f5700720b3243e7fa91cbf444f4ea</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>a04888.html</anchorfile>
      <anchor>a9ec21e62b887a900058b15237f774dfd</anchor>
      <arglist>(const std::string &amp;s=&quot;&quot;, const KeyFormatter &amp;keyFormatter=DefaultKeyFormatter) const override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>equals</name>
      <anchorfile>a04888.html</anchorfile>
      <anchor>afd359716cfd683f16d864abffa33ff04</anchor>
      <arglist>(const NonlinearFactor &amp;p, double tol=1e-9) const override</arglist>
    </member>
    <member kind="function">
      <type>Base::Cameras</type>
      <name>cameras</name>
      <anchorfile>a04888.html</anchorfile>
      <anchor>a6353b092625e5b122d503aebddd0dbdd</anchor>
      <arglist>(const Values &amp;values) const override</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>error</name>
      <anchorfile>a04888.html</anchorfile>
      <anchor>a4fd3ae3ce98545f4e59a1441002e5d00</anchor>
      <arglist>(const Values &amp;values) const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>computeJacobiansWithTriangulatedPoint</name>
      <anchorfile>a04888.html</anchorfile>
      <anchor>a40cae7a2e9f8b6a007d083bc4d832a24</anchor>
      <arglist>(typename Base::FBlocks &amp;Fs, Matrix &amp;E, Vector &amp;b, const Cameras &amp;cameras) const</arglist>
    </member>
    <member kind="function">
      <type>boost::shared_ptr&lt; RegularHessianFactor&lt; DimPose &gt; &gt;</type>
      <name>createHessianFactor</name>
      <anchorfile>a04888.html</anchorfile>
      <anchor>a28d23161ee3aa4ee1820dff28b18da6f</anchor>
      <arglist>(const Values &amp;values, const double &amp;lambda=0.0, bool diagonalDamping=false) const</arglist>
    </member>
    <member kind="function">
      <type>boost::shared_ptr&lt; GaussianFactor &gt;</type>
      <name>linearizeDamped</name>
      <anchorfile>a04888.html</anchorfile>
      <anchor>af70176b8ae29d6ded5041f4b51749265</anchor>
      <arglist>(const Values &amp;values, const double &amp;lambda=0.0) const</arglist>
    </member>
    <member kind="function">
      <type>boost::shared_ptr&lt; GaussianFactor &gt;</type>
      <name>linearize</name>
      <anchorfile>a04888.html</anchorfile>
      <anchor>aa6b52f05152b26415e6d9e5ea44c02bd</anchor>
      <arglist>(const Values &amp;values) const override</arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; This &gt;</type>
      <name>shared_ptr</name>
      <anchorfile>a04888.html</anchorfile>
      <anchor>a33861baa58b6f65cd13365f4fd50811a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>KeyVector</type>
      <name>nonUniqueKeys_</name>
      <anchorfile>a04888.html</anchorfile>
      <anchor>a13e13b96ec157a140ec5af90d35c15f5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>boost::shared_ptr&lt; typename Base::Cameras &gt;</type>
      <name>cameraRig_</name>
      <anchorfile>a04888.html</anchorfile>
      <anchor>acb39180832188cc290980d422b0c3c0f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>FastVector&lt; size_t &gt;</type>
      <name>cameraIds_</name>
      <anchorfile>a04888.html</anchorfile>
      <anchor>a15cd42fb4d4a9571a9fa32b87ee5b81d</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>boost::serialization::access</name>
      <anchorfile>a04888.html</anchorfile>
      <anchor>ac98d07dd8f7b70e16ccb9a01abf56b9c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::SmartRangeFactor</name>
    <filename>a05356.html</filename>
    <base>gtsam::NoiseModelFactor</base>
    <member kind="function">
      <type></type>
      <name>SmartRangeFactor</name>
      <anchorfile>a05356.html</anchorfile>
      <anchor>a967eff304760d96c11bbd0ce3691ef51</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SmartRangeFactor</name>
      <anchorfile>a05356.html</anchorfile>
      <anchor>abdaba35fa6f47cb53becdd488b89613a</anchor>
      <arglist>(double s)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addRange</name>
      <anchorfile>a05356.html</anchorfile>
      <anchor>a060e12501ebbbbf6a0296cff48432b05</anchor>
      <arglist>(Key key, double measuredRange)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>a05356.html</anchorfile>
      <anchor>a2ba9f95fa74dbaa263c1a1fe0ac8d02c</anchor>
      <arglist>(const std::string &amp;s=&quot;&quot;, const KeyFormatter &amp;keyFormatter=DefaultKeyFormatter) const override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>equals</name>
      <anchorfile>a05356.html</anchorfile>
      <anchor>a95187ef9665a4ac95320f7b884f3d68c</anchor>
      <arglist>(const NonlinearFactor &amp;f, double tol=1e-9) const override</arglist>
    </member>
    <member kind="function">
      <type>Point2</type>
      <name>triangulate</name>
      <anchorfile>a05356.html</anchorfile>
      <anchor>af3bb4dd60919948c7f11532f3110e31e</anchor>
      <arglist>(const Values &amp;x) const</arglist>
    </member>
    <member kind="function">
      <type>Vector</type>
      <name>unwhitenedError</name>
      <anchorfile>a05356.html</anchorfile>
      <anchor>a84522a223ddd5561164ff7c8fa2660ec</anchor>
      <arglist>(const Values &amp;x, boost::optional&lt; std::vector&lt; Matrix &gt; &amp; &gt; H=boost::none) const override</arglist>
    </member>
    <member kind="function">
      <type>gtsam::NonlinearFactor::shared_ptr</type>
      <name>clone</name>
      <anchorfile>a05356.html</anchorfile>
      <anchor>afe283094b38c609eec53cc909d352a43</anchor>
      <arglist>() const override</arglist>
    </member>
    <class kind="struct">gtsam::SmartRangeFactor::Circle2</class>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; double &gt;</type>
      <name>measurements_</name>
      <anchorfile>a05356.html</anchorfile>
      <anchor>a213e7ec468287436f6c61365a5f5cbd2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>variance_</name>
      <anchorfile>a05356.html</anchorfile>
      <anchor>a66591ef12015e8f746191295a36edffc</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::SmartStereoProjectionFactor</name>
    <filename>a05364.html</filename>
    <base>SmartFactorBase&lt; StereoCamera &gt;</base>
    <member kind="variable" protection="protected">
      <type>TriangulationResult</type>
      <name>result_</name>
      <anchorfile>a05364.html</anchorfile>
      <anchor>a7723f7ed159174a646771591045e203b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; Pose3 &gt;</type>
      <name>cameraPosesTriangulation_</name>
      <anchorfile>a05364.html</anchorfile>
      <anchor>a50d56a4a7b3528e6e8a1449c71b4acbe</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SmartStereoProjectionFactor</name>
      <anchorfile>a05364.html</anchorfile>
      <anchor>ac4923f2a1d591548968f4c3ec1a6b855</anchor>
      <arglist>(const SharedNoiseModel &amp;sharedNoiseModel, const SmartStereoProjectionParams &amp;params=SmartStereoProjectionParams(), const boost::optional&lt; Pose3 &gt; body_P_sensor=boost::none)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~SmartStereoProjectionFactor</name>
      <anchorfile>a05364.html</anchorfile>
      <anchor>a1e6dec2c156353e8006f73f66621141d</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>a05364.html</anchorfile>
      <anchor>ace9a17ea2b56eaf533b0eae7a26c3d18</anchor>
      <arglist>(const std::string &amp;s=&quot;&quot;, const KeyFormatter &amp;keyFormatter=DefaultKeyFormatter) const override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>equals</name>
      <anchorfile>a05364.html</anchorfile>
      <anchor>a84cb1d9095e19e7d4f8d623b1dbb21ed</anchor>
      <arglist>(const NonlinearFactor &amp;p, double tol=1e-9) const override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>decideIfTriangulate</name>
      <anchorfile>a05364.html</anchorfile>
      <anchor>a1a10cf31d5521959d2a381a7c63df4ae</anchor>
      <arglist>(const Cameras &amp;cameras) const</arglist>
    </member>
    <member kind="function">
      <type>TriangulationResult</type>
      <name>triangulateSafe</name>
      <anchorfile>a05364.html</anchorfile>
      <anchor>a4179790921a2da421d366b9434b71b1c</anchor>
      <arglist>(const Cameras &amp;cameras) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>triangulateForLinearize</name>
      <anchorfile>a05364.html</anchorfile>
      <anchor>ae8b275234f9b1963b3c9c5dfe7ed7efd</anchor>
      <arglist>(const Cameras &amp;cameras) const</arglist>
    </member>
    <member kind="function">
      <type>boost::shared_ptr&lt; RegularHessianFactor&lt; Base::Dim &gt; &gt;</type>
      <name>createHessianFactor</name>
      <anchorfile>a05364.html</anchorfile>
      <anchor>afb28b2cd4bffb8e434c14bcaa9c0aa1c</anchor>
      <arglist>(const Cameras &amp;cameras, const double lambda=0.0, bool diagonalDamping=false) const</arglist>
    </member>
    <member kind="function">
      <type>boost::shared_ptr&lt; JacobianFactor &gt;</type>
      <name>createJacobianSVDFactor</name>
      <anchorfile>a05364.html</anchorfile>
      <anchor>a21d0daca538135bef4427b43bc2c30ac</anchor>
      <arglist>(const Cameras &amp;cameras, double lambda) const</arglist>
    </member>
    <member kind="function">
      <type>boost::shared_ptr&lt; GaussianFactor &gt;</type>
      <name>linearizeDamped</name>
      <anchorfile>a05364.html</anchorfile>
      <anchor>ad28e666b8cc3e6773a0b3c7acfb18076</anchor>
      <arglist>(const Cameras &amp;cameras, const double lambda=0.0) const</arglist>
    </member>
    <member kind="function">
      <type>boost::shared_ptr&lt; GaussianFactor &gt;</type>
      <name>linearizeDamped</name>
      <anchorfile>a05364.html</anchorfile>
      <anchor>a09fe3e4e7db57794788c749f7114cf3a</anchor>
      <arglist>(const Values &amp;values, const double lambda=0.0) const</arglist>
    </member>
    <member kind="function">
      <type>boost::shared_ptr&lt; GaussianFactor &gt;</type>
      <name>linearize</name>
      <anchorfile>a05364.html</anchorfile>
      <anchor>a1cc35213921ac67ba59ec39561cc7745</anchor>
      <arglist>(const Values &amp;values) const override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>triangulateAndComputeE</name>
      <anchorfile>a05364.html</anchorfile>
      <anchor>ae77088d4231271ccbcc79355712fb841</anchor>
      <arglist>(Matrix &amp;E, const Cameras &amp;cameras) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>triangulateAndComputeE</name>
      <anchorfile>a05364.html</anchorfile>
      <anchor>ab42190d9c1934e8b711f52f9da689426</anchor>
      <arglist>(Matrix &amp;E, const Values &amp;values) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>computeJacobiansWithTriangulatedPoint</name>
      <anchorfile>a05364.html</anchorfile>
      <anchor>a10bca2ac8404a94719973766f743a0bb</anchor>
      <arglist>(FBlocks &amp;Fs, Matrix &amp;E, Vector &amp;b, const Cameras &amp;cameras) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>triangulateAndComputeJacobians</name>
      <anchorfile>a05364.html</anchorfile>
      <anchor>ac49a2e7562df37dc875a493bd64b7f50</anchor>
      <arglist>(FBlocks &amp;Fs, Matrix &amp;E, Vector &amp;b, const Values &amp;values) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>triangulateAndComputeJacobiansSVD</name>
      <anchorfile>a05364.html</anchorfile>
      <anchor>ae39124d8d131b6857130ce38a019c470</anchor>
      <arglist>(FBlocks &amp;Fs, Matrix &amp;Enull, Vector &amp;b, const Values &amp;values) const</arglist>
    </member>
    <member kind="function">
      <type>Vector</type>
      <name>reprojectionErrorAfterTriangulation</name>
      <anchorfile>a05364.html</anchorfile>
      <anchor>a41fb2474b9bd42ff88aed0066e90a6d5</anchor>
      <arglist>(const Values &amp;values) const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>totalReprojectionError</name>
      <anchorfile>a05364.html</anchorfile>
      <anchor>a5aa7b40f05b31b382f63ecc5dab1edb3</anchor>
      <arglist>(const Cameras &amp;cameras, boost::optional&lt; Point3 &gt; externalPoint=boost::none) const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>error</name>
      <anchorfile>a05364.html</anchorfile>
      <anchor>aaee3d7a93872c093bd76bca95881883a</anchor>
      <arglist>(const Values &amp;values) const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>correctForMissingMeasurements</name>
      <anchorfile>a05364.html</anchorfile>
      <anchor>a2b9c8b0801514a38b5de6443fc88d90e</anchor>
      <arglist>(const Cameras &amp;cameras, Vector &amp;ue, boost::optional&lt; typename Cameras::FBlocks &amp; &gt; Fs=boost::none, boost::optional&lt; Matrix &amp; &gt; E=boost::none) const override</arglist>
    </member>
    <member kind="function">
      <type>TriangulationResult</type>
      <name>point</name>
      <anchorfile>a05364.html</anchorfile>
      <anchor>ae21cdcf967169fa7238b9927ce50ed81</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>TriangulationResult</type>
      <name>point</name>
      <anchorfile>a05364.html</anchorfile>
      <anchor>af78f923873950be30cab451c7c8904c8</anchor>
      <arglist>(const Values &amp;values) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isValid</name>
      <anchorfile>a05364.html</anchorfile>
      <anchor>af6075b0c49a59c1f7857520dbef0646c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isDegenerate</name>
      <anchorfile>a05364.html</anchorfile>
      <anchor>ad828bbe70d68da368a1ce60ed4b56439</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isPointBehindCamera</name>
      <anchorfile>a05364.html</anchorfile>
      <anchor>ae53f6579078f8a514e97378406c22752</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isOutlier</name>
      <anchorfile>a05364.html</anchorfile>
      <anchor>a7f94285211ae50c8a9cb3483df937c1d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isFarPoint</name>
      <anchorfile>a05364.html</anchorfile>
      <anchor>aef8c19adda92adfb8d83e9391dee3564</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; SmartStereoProjectionFactor &gt;</type>
      <name>shared_ptr</name>
      <anchorfile>a05364.html</anchorfile>
      <anchor>a2e6e04648d38ca2c7bbba974bf44f280</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>CameraSet&lt; StereoCamera &gt;</type>
      <name>Cameras</name>
      <anchorfile>a05364.html</anchorfile>
      <anchor>acac8e2ab6eefe4239f72b3ba3f2a63c5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>PinholeCamera&lt; Cal3_S2 &gt;</type>
      <name>MonoCamera</name>
      <anchorfile>a05364.html</anchorfile>
      <anchor>a7df2041114a622c117971951e6d4f144</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>TriangulationResult</type>
      <name>result_</name>
      <anchorfile>a05364.html</anchorfile>
      <anchor>a7723f7ed159174a646771591045e203b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; Pose3 &gt;</type>
      <name>cameraPosesTriangulation_</name>
      <anchorfile>a05364.html</anchorfile>
      <anchor>a50d56a4a7b3528e6e8a1449c71b4acbe</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>boost::serialization::access</name>
      <anchorfile>a05364.html</anchorfile>
      <anchor>ac98d07dd8f7b70e16ccb9a01abf56b9c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::SmartStereoProjectionFactorPP</name>
    <filename>a05372.html</filename>
    <base>gtsam::SmartStereoProjectionFactor</base>
    <member kind="function">
      <type></type>
      <name>SmartStereoProjectionFactorPP</name>
      <anchorfile>a05372.html</anchorfile>
      <anchor>a47321c365a1353d2c4a3d8227ef760d8</anchor>
      <arglist>(const SharedNoiseModel &amp;sharedNoiseModel, const SmartStereoProjectionParams &amp;params=SmartStereoProjectionParams())</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~SmartStereoProjectionFactorPP</name>
      <anchorfile>a05372.html</anchorfile>
      <anchor>a61045810aedc7eb841397ad41dcc3d94</anchor>
      <arglist>() override=default</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add</name>
      <anchorfile>a05372.html</anchorfile>
      <anchor>a9e4225a8d8f00803adeb6e3c6e10d39d</anchor>
      <arglist>(const StereoPoint2 &amp;measured, const Key &amp;world_P_body_key, const Key &amp;body_P_cam_key, const boost::shared_ptr&lt; Cal3_S2Stereo &gt; &amp;K)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add</name>
      <anchorfile>a05372.html</anchorfile>
      <anchor>ae46fb90fad1a23d7e678bbfaf4b76ecf</anchor>
      <arglist>(const std::vector&lt; StereoPoint2 &gt; &amp;measurements, const KeyVector &amp;w_P_body_keys, const KeyVector &amp;body_P_cam_keys, const std::vector&lt; boost::shared_ptr&lt; Cal3_S2Stereo &gt; &gt; &amp;Ks)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add</name>
      <anchorfile>a05372.html</anchorfile>
      <anchor>a839d7bde9b5ebe6330eede32850d8b92</anchor>
      <arglist>(const std::vector&lt; StereoPoint2 &gt; &amp;measurements, const KeyVector &amp;w_P_body_keys, const KeyVector &amp;body_P_cam_keys, const boost::shared_ptr&lt; Cal3_S2Stereo &gt; &amp;K)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>a05372.html</anchorfile>
      <anchor>aba27a0400f83254547194e5f99160d91</anchor>
      <arglist>(const std::string &amp;s=&quot;&quot;, const KeyFormatter &amp;keyFormatter=DefaultKeyFormatter) const override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>equals</name>
      <anchorfile>a05372.html</anchorfile>
      <anchor>a2da9c7f4784e9f3731c508522eca1694</anchor>
      <arglist>(const NonlinearFactor &amp;p, double tol=1e-9) const override</arglist>
    </member>
    <member kind="function">
      <type>const KeyVector &amp;</type>
      <name>getExtrinsicPoseKeys</name>
      <anchorfile>a05372.html</anchorfile>
      <anchor>a5cf6647df530c36734fd2d738d5010ec</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>error</name>
      <anchorfile>a05372.html</anchorfile>
      <anchor>a434c4cce3cfe3082a2f3d50c9869cdd9</anchor>
      <arglist>(const Values &amp;values) const override</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; boost::shared_ptr&lt; Cal3_S2Stereo &gt; &gt;</type>
      <name>calibration</name>
      <anchorfile>a05372.html</anchorfile>
      <anchor>a733fdb445e38001381cc15ab5e5cd661</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Base::Cameras</type>
      <name>cameras</name>
      <anchorfile>a05372.html</anchorfile>
      <anchor>ab14dec5277a22ff3b0df1d482ffb248c</anchor>
      <arglist>(const Values &amp;values) const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>computeJacobiansAndCorrectForMissingMeasurements</name>
      <anchorfile>a05372.html</anchorfile>
      <anchor>a928f59a29a7571a56810a66e9b3cd6c8</anchor>
      <arglist>(FBlocks &amp;Fs, Matrix &amp;E, Vector &amp;b, const Values &amp;values) const</arglist>
    </member>
    <member kind="function">
      <type>boost::shared_ptr&lt; RegularHessianFactor&lt; DimPose &gt; &gt;</type>
      <name>createHessianFactor</name>
      <anchorfile>a05372.html</anchorfile>
      <anchor>a57dc8a14b8510eeac230dd7c228ce42c</anchor>
      <arglist>(const Values &amp;values, const double lambda=0.0, bool diagonalDamping=false) const</arglist>
    </member>
    <member kind="function">
      <type>boost::shared_ptr&lt; GaussianFactor &gt;</type>
      <name>linearizeDamped</name>
      <anchorfile>a05372.html</anchorfile>
      <anchor>aa7fff1ba22cf312affa975d6a4c2287a</anchor>
      <arglist>(const Values &amp;values, const double lambda=0.0) const</arglist>
    </member>
    <member kind="function">
      <type>boost::shared_ptr&lt; GaussianFactor &gt;</type>
      <name>linearize</name>
      <anchorfile>a05372.html</anchorfile>
      <anchor>aabe85b5ced00aa340fbdd27967aed569</anchor>
      <arglist>(const Values &amp;values) const override</arglist>
    </member>
    <member kind="variable">
      <type>EIGEN_MAKE_ALIGNED_OPERATOR_NEW typedef SmartStereoProjectionFactor</type>
      <name>Base</name>
      <anchorfile>a05372.html</anchorfile>
      <anchor>aa1fc1d797552d9b1053dc71b5db9261f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>DimBlock</name>
      <anchorfile>a05372.html</anchorfile>
      <anchor>a015ff05c73de923e70577d9891c30194</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>DimPose</name>
      <anchorfile>a05372.html</anchorfile>
      <anchor>ad19c803515e2905979bda031a5b0b398</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>ZDim</name>
      <anchorfile>a05372.html</anchorfile>
      <anchor>a0cff82a81552747e1ebe99e936c1e0ce</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SmartStereoProjectionFactorPP</type>
      <name>This</name>
      <anchorfile>a05372.html</anchorfile>
      <anchor>a0447eedfb0fa8703a971809357d5c08d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; This &gt;</type>
      <name>shared_ptr</name>
      <anchorfile>a05372.html</anchorfile>
      <anchor>a2967ca488a6eeb4f74507b3785c237ce</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; boost::shared_ptr&lt; Cal3_S2Stereo &gt; &gt;</type>
      <name>K_all_</name>
      <anchorfile>a05372.html</anchorfile>
      <anchor>ad2d678a709388f29ed11b378e993aa1b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>KeyVector</type>
      <name>world_P_body_keys_</name>
      <anchorfile>a05372.html</anchorfile>
      <anchor>a78ba117ff8598a8143044faf90edff9c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>KeyVector</type>
      <name>body_P_cam_keys_</name>
      <anchorfile>a05372.html</anchorfile>
      <anchor>a955e25c72ea9b12f3c4e389d52b0b099</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>boost::serialization::access</name>
      <anchorfile>a05372.html</anchorfile>
      <anchor>ac98d07dd8f7b70e16ccb9a01abf56b9c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::SmartStereoProjectionPoseFactor</name>
    <filename>a05380.html</filename>
    <base>gtsam::SmartStereoProjectionFactor</base>
    <member kind="function">
      <type></type>
      <name>SmartStereoProjectionPoseFactor</name>
      <anchorfile>a05380.html</anchorfile>
      <anchor>aae9b865c9ec932cf8e00f16b6cb08c68</anchor>
      <arglist>(const SharedNoiseModel &amp;sharedNoiseModel, const SmartStereoProjectionParams &amp;params=SmartStereoProjectionParams(), const boost::optional&lt; Pose3 &gt; &amp;body_P_sensor=boost::none)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~SmartStereoProjectionPoseFactor</name>
      <anchorfile>a05380.html</anchorfile>
      <anchor>a9dea05af3240864fc3c40b8d01a3943d</anchor>
      <arglist>() override=default</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add</name>
      <anchorfile>a05380.html</anchorfile>
      <anchor>a5dd4bbb47c5218276ec0bde35869537e</anchor>
      <arglist>(const StereoPoint2 &amp;measured, const Key &amp;poseKey, const boost::shared_ptr&lt; Cal3_S2Stereo &gt; &amp;K)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add</name>
      <anchorfile>a05380.html</anchorfile>
      <anchor>afe366bd08860245c4c9bdefca9270a43</anchor>
      <arglist>(const std::vector&lt; StereoPoint2 &gt; &amp;measurements, const KeyVector &amp;poseKeys, const std::vector&lt; boost::shared_ptr&lt; Cal3_S2Stereo &gt; &gt; &amp;Ks)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add</name>
      <anchorfile>a05380.html</anchorfile>
      <anchor>a44075fe8683693ee347739ed0d175e13</anchor>
      <arglist>(const std::vector&lt; StereoPoint2 &gt; &amp;measurements, const KeyVector &amp;poseKeys, const boost::shared_ptr&lt; Cal3_S2Stereo &gt; &amp;K)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>a05380.html</anchorfile>
      <anchor>a467c841b3c1618c26760d75605c9c91d</anchor>
      <arglist>(const std::string &amp;s=&quot;&quot;, const KeyFormatter &amp;keyFormatter=DefaultKeyFormatter) const override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>equals</name>
      <anchorfile>a05380.html</anchorfile>
      <anchor>abd037d1628e9d274f114258b66f082d2</anchor>
      <arglist>(const NonlinearFactor &amp;p, double tol=1e-9) const override</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>error</name>
      <anchorfile>a05380.html</anchorfile>
      <anchor>a43f293766f3e2d60c0dfdebc53dd5273</anchor>
      <arglist>(const Values &amp;values) const override</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; boost::shared_ptr&lt; Cal3_S2Stereo &gt; &gt;</type>
      <name>calibration</name>
      <anchorfile>a05380.html</anchorfile>
      <anchor>a73bba517aed20c69f29b8d5f7906f284</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Base::Cameras</type>
      <name>cameras</name>
      <anchorfile>a05380.html</anchorfile>
      <anchor>a9777ae312e4427500384d7d9e164fe91</anchor>
      <arglist>(const Values &amp;values) const override</arglist>
    </member>
    <member kind="variable">
      <type>EIGEN_MAKE_ALIGNED_OPERATOR_NEW typedef SmartStereoProjectionFactor</type>
      <name>Base</name>
      <anchorfile>a05380.html</anchorfile>
      <anchor>aa51d7b642dddb1a83f02f4b6decca7cd</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SmartStereoProjectionPoseFactor</type>
      <name>This</name>
      <anchorfile>a05380.html</anchorfile>
      <anchor>a13a5dea170b9722e83168f5b56c406ac</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; This &gt;</type>
      <name>shared_ptr</name>
      <anchorfile>a05380.html</anchorfile>
      <anchor>aac62c258da3b17c84017f2f09f97c095</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; boost::shared_ptr&lt; Cal3_S2Stereo &gt; &gt;</type>
      <name>K_all_</name>
      <anchorfile>a05380.html</anchorfile>
      <anchor>acf970e63a3a8b2daf9d05ebebc273637</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>boost::serialization::access</name>
      <anchorfile>a05380.html</anchorfile>
      <anchor>ac98d07dd8f7b70e16ccb9a01abf56b9c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::SO</name>
    <filename>a03396.html</filename>
    <templarg>int N</templarg>
    <base>LieGroup&lt; SO&lt; N &gt;, internal::DimensionSO(N)&gt;</base>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>Dim</name>
      <anchorfile>a03396.html</anchorfile>
      <anchor>a7eaffc5611abb39df1952f423318c59b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static MatrixNN</type>
      <name>Hat</name>
      <anchorfile>a03396.html</anchorfile>
      <anchor>a813e60e77bd1e2b7ade8c7076b37579a</anchor>
      <arglist>(const TangentVector &amp;xi)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>Hat</name>
      <anchorfile>a03396.html</anchorfile>
      <anchor>a7aac4d975d1e9762679372d9f1b2cd73</anchor>
      <arglist>(const Vector &amp;xi, Eigen::Ref&lt; MatrixNN &gt; X)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static TangentVector</type>
      <name>Vee</name>
      <anchorfile>a03396.html</anchorfile>
      <anchor>a43f11eb2cba2be51ba3fa6ee8d46f823</anchor>
      <arglist>(const MatrixNN &amp;X)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SO</name>
      <anchorfile>a03396.html</anchorfile>
      <anchor>a948b05d57d6a1cd07fd6d1adbe3837c4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SO</name>
      <anchorfile>a03396.html</anchorfile>
      <anchor>a8d832b038655d584038bda81d277c68e</anchor>
      <arglist>(size_t n=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SO</name>
      <anchorfile>a03396.html</anchorfile>
      <anchor>af8ae2ed48dd298937f4c636f5b72daac</anchor>
      <arglist>(const Eigen::MatrixBase&lt; Derived &gt; &amp;R)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SO</name>
      <anchorfile>a03396.html</anchorfile>
      <anchor>a882950b6b03acbc05939f197d64c0137</anchor>
      <arglist>(const SO&lt; M &gt; &amp;R)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SO</name>
      <anchorfile>a03396.html</anchorfile>
      <anchor>af219a052f42764a57bc13e7116e2a65b</anchor>
      <arglist>(const Eigen::AngleAxisd &amp;angleAxis)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static SO</type>
      <name>FromMatrix</name>
      <anchorfile>a03396.html</anchorfile>
      <anchor>a04f131bd62ba5f7ebd43d477ced3660a</anchor>
      <arglist>(const Eigen::MatrixBase&lt; Derived &gt; &amp;R)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static SO</type>
      <name>Lift</name>
      <anchorfile>a03396.html</anchorfile>
      <anchor>ab44f7055420c8a10ef4549c21347bd74</anchor>
      <arglist>(size_t n, const Eigen::MatrixBase&lt; Derived &gt; &amp;R)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static SO</type>
      <name>AxisAngle</name>
      <anchorfile>a03396.html</anchorfile>
      <anchor>a634b8f685e65a326bbf32615934000ce</anchor>
      <arglist>(const Vector3 &amp;axis, double theta)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static SO</type>
      <name>ClosestTo</name>
      <anchorfile>a03396.html</anchorfile>
      <anchor>aee4daf030f73661fe6e1b361cfe51ea3</anchor>
      <arglist>(const MatrixNN &amp;M)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static SO</type>
      <name>ChordalMean</name>
      <anchorfile>a03396.html</anchorfile>
      <anchor>a3123e38f2e398ac794bb01219d8c2afe</anchor>
      <arglist>(const std::vector&lt; SO &gt; &amp;rotations)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static SO</type>
      <name>Random</name>
      <anchorfile>a03396.html</anchorfile>
      <anchor>ac75dce8518d64fc0e86a71585fdf466d</anchor>
      <arglist>(std::mt19937 &amp;rng, size_t n=0)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static SO</type>
      <name>Random</name>
      <anchorfile>a03396.html</anchorfile>
      <anchor>ada6376a6c09c102825b50fb1b7bf6391</anchor>
      <arglist>(std::mt19937 &amp;rng)</arglist>
    </member>
    <member kind="function">
      <type>const MatrixNN &amp;</type>
      <name>matrix</name>
      <anchorfile>a03396.html</anchorfile>
      <anchor>acdfbb4b1bde5b69752c567a556f1e258</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>SO</type>
      <name>operator*</name>
      <anchorfile>a03396.html</anchorfile>
      <anchor>a3b481cc2addc4249f1438d5ee4d96a71</anchor>
      <arglist>(const SO &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>SO</type>
      <name>inverse</name>
      <anchorfile>a03396.html</anchorfile>
      <anchor>a1c5250f64cea96dcbf0e443744a2f7de</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static SO</type>
      <name>identity</name>
      <anchorfile>a03396.html</anchorfile>
      <anchor>ad88a1b4720e65802cef21d61f6d2084c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static SO</type>
      <name>identity</name>
      <anchorfile>a03396.html</anchorfile>
      <anchor>ab4ac50dd7dae4d1bb4c3e1eec0781ddf</anchor>
      <arglist>(size_t n=0)</arglist>
    </member>
    <member kind="function">
      <type>MatrixDD</type>
      <name>AdjointMap</name>
      <anchorfile>a03396.html</anchorfile>
      <anchor>a658ad6a8dff83c79e252914de423348b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static SO</type>
      <name>Expmap</name>
      <anchorfile>a03396.html</anchorfile>
      <anchor>a092627ec38ae01d168ae308c80bc6ff7</anchor>
      <arglist>(const TangentVector &amp;omega, ChartJacobian H=boost::none)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static MatrixDD</type>
      <name>ExpmapDerivative</name>
      <anchorfile>a03396.html</anchorfile>
      <anchor>a817f097897b7dd72305aded9092359d2</anchor>
      <arglist>(const TangentVector &amp;omega)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static TangentVector</type>
      <name>Logmap</name>
      <anchorfile>a03396.html</anchorfile>
      <anchor>a5f932e7ef1e0c5842397815753bb7f01</anchor>
      <arglist>(const SO &amp;R, ChartJacobian H=boost::none)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static MatrixDD</type>
      <name>LogmapDerivative</name>
      <anchorfile>a03396.html</anchorfile>
      <anchor>a87c100530611732950ccdd2c44cae1c6</anchor>
      <arglist>(const TangentVector &amp;omega)</arglist>
    </member>
    <member kind="function">
      <type>VectorN2</type>
      <name>vec</name>
      <anchorfile>a03396.html</anchorfile>
      <anchor>a273e28ab114f7dd46add665171d2d441</anchor>
      <arglist>(OptionalJacobian&lt; internal::NSquaredSO(N), dimension &gt; H=boost::none) const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Matrix</type>
      <name>VectorizedGenerators</name>
      <anchorfile>a03396.html</anchorfile>
      <anchor>a09bafb4b9f43ef9511596c02f955b4d6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Matrix</type>
      <name>VectorizedGenerators</name>
      <anchorfile>a03396.html</anchorfile>
      <anchor>af3f84a1a6bc7c004ba2ba762792ea8a4</anchor>
      <arglist>(size_t n=0)</arglist>
    </member>
    <member kind="function">
      <type>const MatrixNN &amp;</type>
      <name>matrix</name>
      <anchorfile>a03396.html</anchorfile>
      <anchor>acdfbb4b1bde5b69752c567a556f1e258</anchor>
      <arglist>() const</arglist>
    </member>
    <class kind="struct">gtsam::SO::ChartAtOrigin</class>
    <member kind="variable" protection="protected">
      <type>MatrixNN</type>
      <name>matrix_</name>
      <anchorfile>a03396.html</anchorfile>
      <anchor>a441993008fe80073e5db4e85af81a3ea</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>gtsam::ActiveSetSolver::State</name>
    <filename>a05036.html</filename>
    <member kind="function">
      <type></type>
      <name>State</name>
      <anchorfile>a05036.html</anchorfile>
      <anchor>a6cc42c96140dd03cbba161c241b5bd83</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>State</name>
      <anchorfile>a05036.html</anchorfile>
      <anchor>a4ca89320b907d84a0491e699398d0721</anchor>
      <arglist>(const VectorValues &amp;initialValues, const VectorValues &amp;initialDuals, const InequalityFactorGraph &amp;initialWorkingSet, bool _converged, size_t _iterations)</arglist>
    </member>
    <member kind="variable">
      <type>VectorValues</type>
      <name>values</name>
      <anchorfile>a05036.html</anchorfile>
      <anchor>a68ff516d3772c84f66a3eea941c3c926</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>VectorValues</type>
      <name>duals</name>
      <anchorfile>a05036.html</anchorfile>
      <anchor>af742d04869bbdbe9a5aae75fb9c5efc2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>InequalityFactorGraph</type>
      <name>workingSet</name>
      <anchorfile>a05036.html</anchorfile>
      <anchor>a9585d6011f0a9fd77c82bc4629a55a34</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>converged</name>
      <anchorfile>a05036.html</anchorfile>
      <anchor>a377825e8d2099cf34a0707a24e6fb27c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>size_t</type>
      <name>iterations</name>
      <anchorfile>a05036.html</anchorfile>
      <anchor>a647c39c5186b87355e99f63c33bfa377</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::StereoCamera</name>
    <filename>a03416.html</filename>
    <member kind="function">
      <type></type>
      <name>StereoCamera</name>
      <anchorfile>a03416.html</anchorfile>
      <anchor>a0f564c53fc04f67cd6d801f53fd83050</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>StereoCamera</name>
      <anchorfile>a03416.html</anchorfile>
      <anchor>a8e6d34f7069c0c7e0caa6359d1b8aafe</anchor>
      <arglist>(const Pose3 &amp;leftCamPose, const Cal3_S2Stereo::shared_ptr K)</arglist>
    </member>
    <member kind="function">
      <type>const Cal3_S2Stereo &amp;</type>
      <name>calibration</name>
      <anchorfile>a03416.html</anchorfile>
      <anchor>a3b043ee7ca8db08515800c0aeff8050c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>a03416.html</anchorfile>
      <anchor>a1dbb6420724b6649b871b06fbe8c2696</anchor>
      <arglist>(const std::string &amp;s=&quot;&quot;) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>equals</name>
      <anchorfile>a03416.html</anchorfile>
      <anchor>a2cd29824e3bab5b6468aa4d897629b04</anchor>
      <arglist>(const StereoCamera &amp;camera, double tol=1e-9) const</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>dim</name>
      <anchorfile>a03416.html</anchorfile>
      <anchor>a36d3e0cee1635544adfbf7dc0be188ee</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>StereoCamera</type>
      <name>retract</name>
      <anchorfile>a03416.html</anchorfile>
      <anchor>a37c85bfef85af4eaeeff0a501b2290cb</anchor>
      <arglist>(const Vector &amp;v) const</arglist>
    </member>
    <member kind="function">
      <type>Vector6</type>
      <name>localCoordinates</name>
      <anchorfile>a03416.html</anchorfile>
      <anchor>a24b860fb6a80d4773466a744c21530ac</anchor>
      <arglist>(const StereoCamera &amp;t2) const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static size_t</type>
      <name>Dim</name>
      <anchorfile>a03416.html</anchorfile>
      <anchor>a158dd137f09cfb8f041de46bd4a47851</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const Pose3 &amp;</type>
      <name>pose</name>
      <anchorfile>a03416.html</anchorfile>
      <anchor>ab3804358cf9ac8fd391405b1a0632919</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>baseline</name>
      <anchorfile>a03416.html</anchorfile>
      <anchor>aa3b9da0154ae3757285ce95c92e56b69</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>StereoPoint2</type>
      <name>project</name>
      <anchorfile>a03416.html</anchorfile>
      <anchor>a58351937581d58a9e5308a4fc7cebfba</anchor>
      <arglist>(const Point3 &amp;point) const</arglist>
    </member>
    <member kind="function">
      <type>StereoPoint2</type>
      <name>project2</name>
      <anchorfile>a03416.html</anchorfile>
      <anchor>ac5bf29b33c56dd0ee0e8ba35f5bf7d38</anchor>
      <arglist>(const Point3 &amp;point, OptionalJacobian&lt; 3, 6 &gt; H1=boost::none, OptionalJacobian&lt; 3, 3 &gt; H2=boost::none) const</arglist>
    </member>
    <member kind="function">
      <type>Point3</type>
      <name>backproject</name>
      <anchorfile>a03416.html</anchorfile>
      <anchor>aac8dee12b601fa444680b0d073f1cd6c</anchor>
      <arglist>(const StereoPoint2 &amp;z) const</arglist>
    </member>
    <member kind="function">
      <type>Point3</type>
      <name>backproject2</name>
      <anchorfile>a03416.html</anchorfile>
      <anchor>ae500e74d037214861c667b7b020690a3</anchor>
      <arglist>(const StereoPoint2 &amp;z, OptionalJacobian&lt; 3, 6 &gt; H1=boost::none, OptionalJacobian&lt; 3, 3 &gt; H2=boost::none) const</arglist>
    </member>
    <member kind="function">
      <type>StereoPoint2</type>
      <name>project</name>
      <anchorfile>a03416.html</anchorfile>
      <anchor>a534e5ca4946b76b93c7e278a067ea65a</anchor>
      <arglist>(const Point3 &amp;point, OptionalJacobian&lt; 3, 6 &gt; H1, OptionalJacobian&lt; 3, 3 &gt; H2=boost::none, OptionalJacobian&lt; 3, 0 &gt; H3=boost::none) const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>StereoCamera</name>
      <anchorfile>a03416.html</anchorfile>
      <anchor>a0f564c53fc04f67cd6d801f53fd83050</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>StereoCamera</name>
      <anchorfile>a03416.html</anchorfile>
      <anchor>a8e6d34f7069c0c7e0caa6359d1b8aafe</anchor>
      <arglist>(const Pose3 &amp;leftCamPose, const Cal3_S2Stereo::shared_ptr K)</arglist>
    </member>
    <member kind="function">
      <type>const Cal3_S2Stereo &amp;</type>
      <name>calibration</name>
      <anchorfile>a03416.html</anchorfile>
      <anchor>a3b043ee7ca8db08515800c0aeff8050c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>a03416.html</anchorfile>
      <anchor>a1dbb6420724b6649b871b06fbe8c2696</anchor>
      <arglist>(const std::string &amp;s=&quot;&quot;) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>equals</name>
      <anchorfile>a03416.html</anchorfile>
      <anchor>a2cd29824e3bab5b6468aa4d897629b04</anchor>
      <arglist>(const StereoCamera &amp;camera, double tol=1e-9) const</arglist>
    </member>
    <member kind="function">
      <type>const Pose3 &amp;</type>
      <name>pose</name>
      <anchorfile>a03416.html</anchorfile>
      <anchor>ab3804358cf9ac8fd391405b1a0632919</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>baseline</name>
      <anchorfile>a03416.html</anchorfile>
      <anchor>aa3b9da0154ae3757285ce95c92e56b69</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>StereoPoint2</type>
      <name>project</name>
      <anchorfile>a03416.html</anchorfile>
      <anchor>a58351937581d58a9e5308a4fc7cebfba</anchor>
      <arglist>(const Point3 &amp;point) const</arglist>
    </member>
    <member kind="function">
      <type>StereoPoint2</type>
      <name>project2</name>
      <anchorfile>a03416.html</anchorfile>
      <anchor>ac5bf29b33c56dd0ee0e8ba35f5bf7d38</anchor>
      <arglist>(const Point3 &amp;point, OptionalJacobian&lt; 3, 6 &gt; H1=boost::none, OptionalJacobian&lt; 3, 3 &gt; H2=boost::none) const</arglist>
    </member>
    <member kind="function">
      <type>Point3</type>
      <name>backproject</name>
      <anchorfile>a03416.html</anchorfile>
      <anchor>aac8dee12b601fa444680b0d073f1cd6c</anchor>
      <arglist>(const StereoPoint2 &amp;z) const</arglist>
    </member>
    <member kind="function">
      <type>Point3</type>
      <name>backproject2</name>
      <anchorfile>a03416.html</anchorfile>
      <anchor>ae500e74d037214861c667b7b020690a3</anchor>
      <arglist>(const StereoPoint2 &amp;z, OptionalJacobian&lt; 3, 6 &gt; H1=boost::none, OptionalJacobian&lt; 3, 3 &gt; H2=boost::none) const</arglist>
    </member>
    <member kind="function">
      <type>StereoPoint2</type>
      <name>project</name>
      <anchorfile>a03416.html</anchorfile>
      <anchor>a534e5ca4946b76b93c7e278a067ea65a</anchor>
      <arglist>(const Point3 &amp;point, OptionalJacobian&lt; 3, 6 &gt; H1, OptionalJacobian&lt; 3, 3 &gt; H2=boost::none, OptionalJacobian&lt; 3, 0 &gt; H3=boost::none) const</arglist>
    </member>
    <member kind="typedef">
      <type>StereoPoint2</type>
      <name>Measurement</name>
      <anchorfile>a03416.html</anchorfile>
      <anchor>a39e88f1ffa6e0850820453ef44675b94</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::StereoCheiralityException</name>
    <filename>a03412.html</filename>
  </compound>
  <compound kind="class">
    <name>gtsam::StereoPoint2</name>
    <filename>a03428.html</filename>
    <member kind="friend">
      <type>friend class</type>
      <name>boost::serialization::access</name>
      <anchorfile>a03428.html</anchorfile>
      <anchor>ac98d07dd8f7b70e16ccb9a01abf56b9c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>StereoPoint2</name>
      <anchorfile>a03428.html</anchorfile>
      <anchor>af91933798181ce1bb4759a7f78900ed8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>StereoPoint2</name>
      <anchorfile>a03428.html</anchorfile>
      <anchor>a6e78d04be7be5824277957b807f29a67</anchor>
      <arglist>(double uL, double uR, double v)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>StereoPoint2</name>
      <anchorfile>a03428.html</anchorfile>
      <anchor>a127f5a9bc07d0f81dc30f67d4eb6e3bd</anchor>
      <arglist>(const Vector3 &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>a03428.html</anchorfile>
      <anchor>a7a0cac6ecc475313cd1d250dde4cfcc3</anchor>
      <arglist>(const std::string &amp;s=&quot;&quot;) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>equals</name>
      <anchorfile>a03428.html</anchorfile>
      <anchor>a74e0c6868b8d058dc7d49f12da34e483</anchor>
      <arglist>(const StereoPoint2 &amp;q, double tol=1e-9) const</arglist>
    </member>
    <member kind="function">
      <type>StereoPoint2</type>
      <name>operator-</name>
      <anchorfile>a03428.html</anchorfile>
      <anchor>a8be0cca494701e375ca31db902f66fe1</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>StereoPoint2</type>
      <name>operator+</name>
      <anchorfile>a03428.html</anchorfile>
      <anchor>a6720f98d02fa76cfdd7b70e5f0f0dffd</anchor>
      <arglist>(const Vector3 &amp;v) const</arglist>
    </member>
    <member kind="function">
      <type>StereoPoint2</type>
      <name>operator+</name>
      <anchorfile>a03428.html</anchorfile>
      <anchor>ab0f193e3fbc9fc811051dfcd4c394891</anchor>
      <arglist>(const StereoPoint2 &amp;b) const</arglist>
    </member>
    <member kind="function">
      <type>StereoPoint2</type>
      <name>operator-</name>
      <anchorfile>a03428.html</anchorfile>
      <anchor>a211d5cb9dd5816de465bc6aeb35f8adc</anchor>
      <arglist>(const StereoPoint2 &amp;b) const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static StereoPoint2</type>
      <name>identity</name>
      <anchorfile>a03428.html</anchorfile>
      <anchor>a01e660dedfc05491b619d428b9556824</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>a03428.html</anchorfile>
      <anchor>af0b47bceeb7d432730ef9627e03b085a</anchor>
      <arglist>(const StereoPoint2 &amp;q) const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>uL</name>
      <anchorfile>a03428.html</anchorfile>
      <anchor>a680b14f2e0bd0621c551d33c9b60f1c2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>uR</name>
      <anchorfile>a03428.html</anchorfile>
      <anchor>a0394939c8b77b2e3b594873ca007dc42</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>v</name>
      <anchorfile>a03428.html</anchorfile>
      <anchor>addb15c987185fd446d94f4495d1ecbae</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Vector3</type>
      <name>vector</name>
      <anchorfile>a03428.html</anchorfile>
      <anchor>a576452db11da6ff1c022e7d6ca2f605b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Point2</type>
      <name>point2</name>
      <anchorfile>a03428.html</anchorfile>
      <anchor>aebca28e1dc3f495c873fd01de7ff0778</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Point2</type>
      <name>right</name>
      <anchorfile>a03428.html</anchorfile>
      <anchor>a1a7990b315e51976dce3ab9b9fb54ad2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>StereoPoint2</name>
      <anchorfile>a03428.html</anchorfile>
      <anchor>af91933798181ce1bb4759a7f78900ed8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>StereoPoint2</name>
      <anchorfile>a03428.html</anchorfile>
      <anchor>a6e78d04be7be5824277957b807f29a67</anchor>
      <arglist>(double uL, double uR, double v)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>StereoPoint2</name>
      <anchorfile>a03428.html</anchorfile>
      <anchor>a127f5a9bc07d0f81dc30f67d4eb6e3bd</anchor>
      <arglist>(const Vector3 &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>a03428.html</anchorfile>
      <anchor>a7a0cac6ecc475313cd1d250dde4cfcc3</anchor>
      <arglist>(const std::string &amp;s=&quot;&quot;) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>equals</name>
      <anchorfile>a03428.html</anchorfile>
      <anchor>a74e0c6868b8d058dc7d49f12da34e483</anchor>
      <arglist>(const StereoPoint2 &amp;q, double tol=1e-9) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>a03428.html</anchorfile>
      <anchor>af0b47bceeb7d432730ef9627e03b085a</anchor>
      <arglist>(const StereoPoint2 &amp;q) const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>uL</name>
      <anchorfile>a03428.html</anchorfile>
      <anchor>a680b14f2e0bd0621c551d33c9b60f1c2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>uR</name>
      <anchorfile>a03428.html</anchorfile>
      <anchor>a0394939c8b77b2e3b594873ca007dc42</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>v</name>
      <anchorfile>a03428.html</anchorfile>
      <anchor>addb15c987185fd446d94f4495d1ecbae</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Vector3</type>
      <name>vector</name>
      <anchorfile>a03428.html</anchorfile>
      <anchor>a576452db11da6ff1c022e7d6ca2f605b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Point2</type>
      <name>point2</name>
      <anchorfile>a03428.html</anchorfile>
      <anchor>aebca28e1dc3f495c873fd01de7ff0778</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Point2</type>
      <name>right</name>
      <anchorfile>a03428.html</anchorfile>
      <anchor>a1a7990b315e51976dce3ab9b9fb54ad2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="friend">
      <type>GTSAM_EXPORT friend std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a03428.html</anchorfile>
      <anchor>a0489565f0df0d7bb216651425b56d2ef</anchor>
      <arglist>(std::ostream &amp;os, const StereoPoint2 &amp;p)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>gtsam::StreamedKey</name>
    <filename>a03608.html</filename>
  </compound>
  <compound kind="class">
    <name>gtsam::Subgraph</name>
    <filename>a03984.html</filename>
    <class kind="struct">gtsam::Subgraph::Edge</class>
  </compound>
  <compound kind="class">
    <name>gtsam::SubgraphBuilder</name>
    <filename>a03996.html</filename>
  </compound>
  <compound kind="struct">
    <name>gtsam::SubgraphBuilderParameters</name>
    <filename>a03992.html</filename>
    <member kind="variable">
      <type>double</type>
      <name>augmentationFactor</name>
      <anchorfile>a03992.html</anchorfile>
      <anchor>a927dc3d350c0cf449755cb5f491c0af7</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::SubgraphPreconditioner</name>
    <filename>a04004.html</filename>
    <base>gtsam::Preconditioner</base>
    <member kind="function">
      <type></type>
      <name>SubgraphPreconditioner</name>
      <anchorfile>a04004.html</anchorfile>
      <anchor>af49b5c9b405926fb8f53216d3b6518a3</anchor>
      <arglist>(const sharedFG &amp;Ab2, const sharedBayesNet &amp;Rc1, const sharedValues &amp;xbar, const SubgraphPreconditionerParameters &amp;p=SubgraphPreconditionerParameters())</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>a04004.html</anchorfile>
      <anchor>a5f7352c1f061e18e920aeea14da0af8b</anchor>
      <arglist>(const std::string &amp;s=&quot;SubgraphPreconditioner&quot;) const</arglist>
    </member>
    <member kind="function">
      <type>const sharedFG &amp;</type>
      <name>Ab2</name>
      <anchorfile>a04004.html</anchorfile>
      <anchor>ab3a279cc10daff440c443dad95033f1e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const sharedBayesNet &amp;</type>
      <name>Rc1</name>
      <anchorfile>a04004.html</anchorfile>
      <anchor>a787ce136591ccadcd42eaca9e3bfa433</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const sharedErrors</type>
      <name>b2bar</name>
      <anchorfile>a04004.html</anchorfile>
      <anchor>a7daacd2acb8a289aa3fe9523af4eba39</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>VectorValues</type>
      <name>x</name>
      <anchorfile>a04004.html</anchorfile>
      <anchor>a1042338665fdf670282045691cc22722</anchor>
      <arglist>(const VectorValues &amp;y) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>transposeMultiplyAdd2</name>
      <anchorfile>a04004.html</anchorfile>
      <anchor>a55355948d9ed5c429a840a28d01c55bc</anchor>
      <arglist>(double alpha, Errors::const_iterator begin, Errors::const_iterator end, VectorValues &amp;y) const</arglist>
    </member>
    <member kind="function">
      <type>VectorValues</type>
      <name>gradient</name>
      <anchorfile>a04004.html</anchorfile>
      <anchor>a47d02462ad1133814145111e01559b10</anchor>
      <arglist>(const VectorValues &amp;y) const</arglist>
    </member>
    <member kind="function">
      <type>Errors</type>
      <name>operator*</name>
      <anchorfile>a04004.html</anchorfile>
      <anchor>a187f650777b34521fd0c767fa60e1aee</anchor>
      <arglist>(const VectorValues &amp;y) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>multiplyInPlace</name>
      <anchorfile>a04004.html</anchorfile>
      <anchor>a328000e608567efcf9b46eb40679a4ed</anchor>
      <arglist>(const VectorValues &amp;y, Errors &amp;e) const</arglist>
    </member>
    <member kind="function">
      <type>VectorValues</type>
      <name>operator^</name>
      <anchorfile>a04004.html</anchorfile>
      <anchor>a4b58a532d8fb462c1b51d3d1f9b1fe98</anchor>
      <arglist>(const Errors &amp;e) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>transposeMultiplyAdd</name>
      <anchorfile>a04004.html</anchorfile>
      <anchor>a299ff473b4cf2119e55f03536e9dcef0</anchor>
      <arglist>(double alpha, const Errors &amp;e, VectorValues &amp;y) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>solve</name>
      <anchorfile>a04004.html</anchorfile>
      <anchor>a02992340072f87fb8b52404cef2ac08d</anchor>
      <arglist>(const Vector &amp;y, Vector &amp;x) const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>transposeSolve</name>
      <anchorfile>a04004.html</anchorfile>
      <anchor>a509b2683de1972e47b982a97a5bb4fb1</anchor>
      <arglist>(const Vector &amp;y, Vector &amp;x) const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>build</name>
      <anchorfile>a04004.html</anchorfile>
      <anchor>a7b30d8181eb2f3fc13a325b70e83817f</anchor>
      <arglist>(const GaussianFactorGraph &amp;gfg, const KeyInfo &amp;info, const std::map&lt; Key, Vector &gt; &amp;lambda) override</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>gtsam::SubgraphPreconditionerParameters</name>
    <filename>a04000.html</filename>
    <base>gtsam::PreconditionerParameters</base>
  </compound>
  <compound kind="class">
    <name>gtsam::SubgraphSolver</name>
    <filename>a04012.html</filename>
    <base>gtsam::IterativeSolver</base>
    <member kind="function">
      <type></type>
      <name>SubgraphSolver</name>
      <anchorfile>a04012.html</anchorfile>
      <anchor>aaa164e4b6a6b1c5601f6d2873409bcd7</anchor>
      <arglist>(const GaussianFactorGraph &amp;A, const Parameters &amp;parameters, const Ordering &amp;ordering)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SubgraphSolver</name>
      <anchorfile>a04012.html</anchorfile>
      <anchor>a9e09ff872a092e06e544c878c7f238ae</anchor>
      <arglist>(const GaussianFactorGraph &amp;Ab1, const boost::shared_ptr&lt; GaussianFactorGraph &gt; &amp;Ab2, const Parameters &amp;parameters, const Ordering &amp;ordering)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SubgraphSolver</name>
      <anchorfile>a04012.html</anchorfile>
      <anchor>ae200c73c7194bb41b9c213b18bb5a976</anchor>
      <arglist>(const boost::shared_ptr&lt; GaussianBayesNet &gt; &amp;Rc1, const boost::shared_ptr&lt; GaussianFactorGraph &gt; &amp;Ab2, const Parameters &amp;parameters)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~SubgraphSolver</name>
      <anchorfile>a04012.html</anchorfile>
      <anchor>a746e64930e1800b405433301529d3f29</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>VectorValues</type>
      <name>optimize</name>
      <anchorfile>a04012.html</anchorfile>
      <anchor>a18e4f45f60c3a2e4338ab2776a295b4b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>VectorValues</type>
      <name>optimize</name>
      <anchorfile>a04012.html</anchorfile>
      <anchor>a3bb3fc4c5063a8bac80cdd6d40df745e</anchor>
      <arglist>(const GaussianFactorGraph &amp;gfg, const KeyInfo &amp;keyInfo, const std::map&lt; Key, Vector &gt; &amp;lambda, const VectorValues &amp;initial) override</arglist>
    </member>
    <member kind="function">
      <type>std::pair&lt; boost::shared_ptr&lt; GaussianFactorGraph &gt;, boost::shared_ptr&lt; GaussianFactorGraph &gt; &gt;</type>
      <name>splitGraph</name>
      <anchorfile>a04012.html</anchorfile>
      <anchor>a0f1e381bfda11ab74c9a4f252c63165e</anchor>
      <arglist>(const GaussianFactorGraph &amp;gfg)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>boost::shared_ptr&lt; SubgraphPreconditioner &gt;</type>
      <name>pc_</name>
      <anchorfile>a04012.html</anchorfile>
      <anchor>ade9c0e75a53cc84a283c0b19c6965ceb</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>gtsam::SubgraphSolverParameters</name>
    <filename>a04008.html</filename>
    <base>gtsam::ConjugateGradientParameters</base>
  </compound>
  <compound kind="class">
    <name>gtsam::Symbol</name>
    <filename>a03640.html</filename>
    <member kind="function">
      <type></type>
      <name>Symbol</name>
      <anchorfile>a03640.html</anchorfile>
      <anchor>a70b4c41b784455578c4798dd6b3b3028</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Symbol</name>
      <anchorfile>a03640.html</anchorfile>
      <anchor>a6c9854ad92d889022fb2fc837efc0b36</anchor>
      <arglist>(const Symbol &amp;key)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Symbol</name>
      <anchorfile>a03640.html</anchorfile>
      <anchor>a88bf5e78e1e38834c95c4626b904b991</anchor>
      <arglist>(unsigned char c, std::uint64_t j)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Symbol</name>
      <anchorfile>a03640.html</anchorfile>
      <anchor>a39830bf361caf4ed4d1ef0a613dc8179</anchor>
      <arglist>(Key key)</arglist>
    </member>
    <member kind="function">
      <type>Key</type>
      <name>key</name>
      <anchorfile>a03640.html</anchorfile>
      <anchor>a4a868793721b14d64c1e36e6f3745b1a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator Key</name>
      <anchorfile>a03640.html</anchorfile>
      <anchor>ab1eda4ab6f81742c9cebc465e8ea13c5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>a03640.html</anchorfile>
      <anchor>af7e1d49febc5aa2b7444aad842a8af0f</anchor>
      <arglist>(const std::string &amp;s=&quot;&quot;) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>equals</name>
      <anchorfile>a03640.html</anchorfile>
      <anchor>a51cbe8a465cc4091975a280bca26f7ba</anchor>
      <arglist>(const Symbol &amp;expected, double tol=0.0) const</arglist>
    </member>
    <member kind="function">
      <type>unsigned char</type>
      <name>chr</name>
      <anchorfile>a03640.html</anchorfile>
      <anchor>a0cc103be1e2795373e0d637e5cd11e11</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::uint64_t</type>
      <name>index</name>
      <anchorfile>a03640.html</anchorfile>
      <anchor>adeffd2de250c396fdbebd5d2b92118f3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator std::string</name>
      <anchorfile>a03640.html</anchorfile>
      <anchor>af9feea2863c9992eeb699aaad248a59c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>string</name>
      <anchorfile>a03640.html</anchorfile>
      <anchor>ae1aec5fcd0dcb406974eba027bd7926e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;</name>
      <anchorfile>a03640.html</anchorfile>
      <anchor>ade82814bbddfcd40598f47fcdaf62514</anchor>
      <arglist>(const Symbol &amp;comp) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>a03640.html</anchorfile>
      <anchor>a3076bbe7a5bd7410c6d9474238fdd060</anchor>
      <arglist>(const Symbol &amp;comp) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>a03640.html</anchorfile>
      <anchor>a13611874b7b76972cdda343dc62d139d</anchor>
      <arglist>(Key comp) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>a03640.html</anchorfile>
      <anchor>a25122adbd459b677817974df4c5a566f</anchor>
      <arglist>(const Symbol &amp;comp) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>a03640.html</anchorfile>
      <anchor>afaa7c5da56b53119ce4d9f5a65081515</anchor>
      <arglist>(Key comp) const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::function&lt; bool(Key)&gt;</type>
      <name>ChrTest</name>
      <anchorfile>a03640.html</anchorfile>
      <anchor>acdbae8aab3157b72a55a92e7411e4069</anchor>
      <arglist>(unsigned char c)</arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>boost::serialization::access</name>
      <anchorfile>a03640.html</anchorfile>
      <anchor>ac98d07dd8f7b70e16ccb9a01abf56b9c</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>GTSAM_EXPORT friend std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a03640.html</anchorfile>
      <anchor>aaa54161c38f40fd9c65cc86bdfaba51e</anchor>
      <arglist>(std::ostream &amp;, const Symbol &amp;)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::SymbolGenerator</name>
    <filename>a03644.html</filename>
  </compound>
  <compound kind="class">
    <name>gtsam::SymbolicBayesNet</name>
    <filename>a04908.html</filename>
    <base>FactorGraph&lt; SymbolicConditional &gt;</base>
    <member kind="function">
      <type></type>
      <name>SymbolicBayesNet</name>
      <anchorfile>a04908.html</anchorfile>
      <anchor>a6bbc46aa18458037ff7d50567d19c4f6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SymbolicBayesNet</name>
      <anchorfile>a04908.html</anchorfile>
      <anchor>a2be792589f4fcffb80276d5bdbd12b7b</anchor>
      <arglist>(ITERATOR firstConditional, ITERATOR lastConditional)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SymbolicBayesNet</name>
      <anchorfile>a04908.html</anchorfile>
      <anchor>a34708a62aafcaded4541d3bd4989fc52</anchor>
      <arglist>(const CONTAINER &amp;conditionals)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SymbolicBayesNet</name>
      <anchorfile>a04908.html</anchorfile>
      <anchor>afc548bc1dcc40725de7424c80eebb839</anchor>
      <arglist>(const FactorGraph&lt; DERIVEDCONDITIONAL &gt; &amp;graph)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~SymbolicBayesNet</name>
      <anchorfile>a04908.html</anchorfile>
      <anchor>a02ad8b09f6c581150462edefe7b0b7c1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>GTSAM_EXPORT bool</type>
      <name>equals</name>
      <anchorfile>a04908.html</anchorfile>
      <anchor>a05b35a0cb73d6c1a021a8a8dc613ddd8</anchor>
      <arglist>(const This &amp;bn, double tol=1e-9) const</arglist>
    </member>
    <member kind="function">
      <type>GTSAM_EXPORT void</type>
      <name>print</name>
      <anchorfile>a04908.html</anchorfile>
      <anchor>a16f146d9a2df6a5d6b9b7cead816d88e</anchor>
      <arglist>(const std::string &amp;s=&quot;SymbolicBayesNet&quot;, const KeyFormatter &amp;formatter=DefaultKeyFormatter) const override</arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>boost::serialization::access</name>
      <anchorfile>a04908.html</anchorfile>
      <anchor>ac98d07dd8f7b70e16ccb9a01abf56b9c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::SymbolicBayesTree</name>
    <filename>a04920.html</filename>
    <base>BayesTree&lt; SymbolicBayesTreeClique &gt;</base>
    <member kind="function">
      <type></type>
      <name>SymbolicBayesTree</name>
      <anchorfile>a04920.html</anchorfile>
      <anchor>ac3ed7fda6fb7d46fdfe0d064d8a473bc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>equals</name>
      <anchorfile>a04920.html</anchorfile>
      <anchor>a9cd09c0159c0ed63ebe33f91d7a97abb</anchor>
      <arglist>(const This &amp;other, double tol=1e-9) const</arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>boost::serialization::access</name>
      <anchorfile>a04920.html</anchorfile>
      <anchor>ac98d07dd8f7b70e16ccb9a01abf56b9c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::SymbolicBayesTreeClique</name>
    <filename>a04916.html</filename>
    <base>BayesTreeCliqueBase&lt; SymbolicBayesTreeClique, SymbolicFactorGraph &gt;</base>
  </compound>
  <compound kind="class">
    <name>gtsam::SymbolicConditional</name>
    <filename>a04932.html</filename>
    <base>gtsam::SymbolicFactor</base>
    <base>Conditional&lt; SymbolicFactor, SymbolicConditional &gt;</base>
    <member kind="function">
      <type></type>
      <name>SymbolicConditional</name>
      <anchorfile>a04932.html</anchorfile>
      <anchor>a3d5f37af8e07fc3cb93d9df0f611ab29</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SymbolicConditional</name>
      <anchorfile>a04932.html</anchorfile>
      <anchor>a811ebc4f9eefbcf25fc2f40f66db8e39</anchor>
      <arglist>(Key j)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SymbolicConditional</name>
      <anchorfile>a04932.html</anchorfile>
      <anchor>a77133cf0e119b7e0b0105c49f9677f59</anchor>
      <arglist>(Key j, Key parent)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SymbolicConditional</name>
      <anchorfile>a04932.html</anchorfile>
      <anchor>a8215e2229254269e71210cb4b5d2cd60</anchor>
      <arglist>(Key j, Key parent1, Key parent2)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SymbolicConditional</name>
      <anchorfile>a04932.html</anchorfile>
      <anchor>a0d9e9d5af1a6a10390b923f0cc8efe52</anchor>
      <arglist>(Key j, Key parent1, Key parent2, Key parent3)</arglist>
    </member>
    <member kind="function">
      <type>SymbolicFactor::shared_ptr</type>
      <name>clone</name>
      <anchorfile>a04932.html</anchorfile>
      <anchor>a913447e3cd824e3ceaceaa860c62dc19</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static SymbolicConditional</type>
      <name>FromIterators</name>
      <anchorfile>a04932.html</anchorfile>
      <anchor>a7614a76d9494f2f856ef7829e6ebc3fa</anchor>
      <arglist>(ITERATOR firstKey, ITERATOR lastKey, size_t nrFrontals)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static SymbolicConditional::shared_ptr</type>
      <name>FromIteratorsShared</name>
      <anchorfile>a04932.html</anchorfile>
      <anchor>a677f3741e63b6cd351f292e0016b0b2d</anchor>
      <arglist>(ITERATOR firstKey, ITERATOR lastKey, size_t nrFrontals)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static SymbolicConditional</type>
      <name>FromKeys</name>
      <anchorfile>a04932.html</anchorfile>
      <anchor>a44248a7922ecaf5e4d7421f18aaf22f8</anchor>
      <arglist>(const CONTAINER &amp;keys, size_t nrFrontals)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static SymbolicConditional::shared_ptr</type>
      <name>FromKeysShared</name>
      <anchorfile>a04932.html</anchorfile>
      <anchor>ad58aecba408464f68fbd159bb228d917</anchor>
      <arglist>(const CONTAINER &amp;keys, size_t nrFrontals)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>a04932.html</anchorfile>
      <anchor>a7f89aa59ee3e5f2f12e3f8325a450922</anchor>
      <arglist>(const std::string &amp;str=&quot;&quot;, const KeyFormatter &amp;keyFormatter=DefaultKeyFormatter) const override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>equals</name>
      <anchorfile>a04932.html</anchorfile>
      <anchor>afd2e36c1d56f2dbbf1e42de686f00039</anchor>
      <arglist>(const This &amp;c, double tol=1e-9) const</arglist>
    </member>
    <member kind="typedef">
      <type>SymbolicFactor</type>
      <name>BaseFactor</name>
      <anchorfile>a04932.html</anchorfile>
      <anchor>aa2e0cb404e5a4c2b9739a3ac68eead88</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Conditional&lt; BaseFactor, This &gt;</type>
      <name>BaseConditional</name>
      <anchorfile>a04932.html</anchorfile>
      <anchor>a56432938db9b4a1f9d8d712f4128cd8d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; This &gt;</type>
      <name>shared_ptr</name>
      <anchorfile>a04932.html</anchorfile>
      <anchor>a539228349dc5255cd587044d7106bf44</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>BaseFactor::iterator</type>
      <name>iterator</name>
      <anchorfile>a04932.html</anchorfile>
      <anchor>a9cf431cc004298a77735cf3d51c04629</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>BaseFactor::const_iterator</type>
      <name>const_iterator</name>
      <anchorfile>a04932.html</anchorfile>
      <anchor>a4bbf077adf4021b966f398f551b0ce5e</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>boost::serialization::access</name>
      <anchorfile>a04932.html</anchorfile>
      <anchor>ac98d07dd8f7b70e16ccb9a01abf56b9c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::SymbolicEliminationTree</name>
    <filename>a04940.html</filename>
    <base>EliminationTree&lt; SymbolicBayesNet, SymbolicFactorGraph &gt;</base>
    <member kind="function">
      <type></type>
      <name>SymbolicEliminationTree</name>
      <anchorfile>a04940.html</anchorfile>
      <anchor>ad3172bf79260aa8bafae35b4e052beda</anchor>
      <arglist>(const SymbolicFactorGraph &amp;factorGraph, const VariableIndex &amp;structure, const Ordering &amp;order)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SymbolicEliminationTree</name>
      <anchorfile>a04940.html</anchorfile>
      <anchor>a4b0d5a605d743a626c20b3c77975fb26</anchor>
      <arglist>(const SymbolicFactorGraph &amp;factorGraph, const Ordering &amp;order)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>equals</name>
      <anchorfile>a04940.html</anchorfile>
      <anchor>a7a66b013eace5c432ce72e6b1ed6479f</anchor>
      <arglist>(const This &amp;other, double tol=1e-9) const</arglist>
    </member>
    <member kind="typedef">
      <type>EliminationTree&lt; SymbolicBayesNet, SymbolicFactorGraph &gt;</type>
      <name>Base</name>
      <anchorfile>a04940.html</anchorfile>
      <anchor>a9b39f5aabd1eb8bcee75e9ea6049bc4d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SymbolicEliminationTree</type>
      <name>This</name>
      <anchorfile>a04940.html</anchorfile>
      <anchor>aafb66dd970ffa3b4fb7d6f49f45fd643</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; This &gt;</type>
      <name>shared_ptr</name>
      <anchorfile>a04940.html</anchorfile>
      <anchor>a8f2e544d15c932a58dd830641679c715</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::SymbolicFactor</name>
    <filename>a04948.html</filename>
    <base>gtsam::Factor</base>
    <member kind="function">
      <type></type>
      <name>SymbolicFactor</name>
      <anchorfile>a04948.html</anchorfile>
      <anchor>ad5559a2e10e8ae2552ef91f3d8340849</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SymbolicFactor</name>
      <anchorfile>a04948.html</anchorfile>
      <anchor>a9caf912ac889d5bb06f56e748d9aa71b</anchor>
      <arglist>(Key j)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SymbolicFactor</name>
      <anchorfile>a04948.html</anchorfile>
      <anchor>a629eccda3484b6e69877e0be2cda1c6a</anchor>
      <arglist>(Key j1, Key j2)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SymbolicFactor</name>
      <anchorfile>a04948.html</anchorfile>
      <anchor>a99571a93b54a2e6b9659781777f29e80</anchor>
      <arglist>(Key j1, Key j2, Key j3)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SymbolicFactor</name>
      <anchorfile>a04948.html</anchorfile>
      <anchor>a4dd708fdef64f6d583d8d428c52d1927</anchor>
      <arglist>(Key j1, Key j2, Key j3, Key j4)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SymbolicFactor</name>
      <anchorfile>a04948.html</anchorfile>
      <anchor>a9fe89884fa91b96be1629188d5f14b7e</anchor>
      <arglist>(Key j1, Key j2, Key j3, Key j4, Key j5)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SymbolicFactor</name>
      <anchorfile>a04948.html</anchorfile>
      <anchor>a139996934bf8b51a68bfd9fe2dfca77c</anchor>
      <arglist>(Key j1, Key j2, Key j3, Key j4, Key j5, Key j6)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SymbolicFactor</name>
      <anchorfile>a04948.html</anchorfile>
      <anchor>a3adb78452c43c569e8be957a27b68321</anchor>
      <arglist>(const Factor &amp;factor)</arglist>
    </member>
    <member kind="function">
      <type>SymbolicFactor::shared_ptr</type>
      <name>clone</name>
      <anchorfile>a04948.html</anchorfile>
      <anchor>ae8e93ea84ccce6f98940b40c9cff3d70</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>empty</name>
      <anchorfile>a04948.html</anchorfile>
      <anchor>a08b5e7a84ab4808fbbef0a8e2d9195bd</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::pair&lt; boost::shared_ptr&lt; SymbolicConditional &gt;, boost::shared_ptr&lt; SymbolicFactor &gt; &gt;</type>
      <name>eliminate</name>
      <anchorfile>a04948.html</anchorfile>
      <anchor>a4a1b2d5945e526faedb439595e1842cb</anchor>
      <arglist>(const Ordering &amp;keys) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>a04948.html</anchorfile>
      <anchor>a043f53711f59348aa88e67128da453e5</anchor>
      <arglist>(const std::string &amp;s=&quot;SymbolicFactor&quot;, const KeyFormatter &amp;formatter=DefaultKeyFormatter) const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>printKeys</name>
      <anchorfile>a04948.html</anchorfile>
      <anchor>a89657720124e1ff4cd0fa2bb6e9798a0</anchor>
      <arglist>(const std::string &amp;s=&quot;SymbolicFactor&quot;, const KeyFormatter &amp;formatter=DefaultKeyFormatter) const override</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static SymbolicFactor</type>
      <name>FromIterators</name>
      <anchorfile>a04948.html</anchorfile>
      <anchor>a6ab153faa7dd5337407731c0c4ec9678</anchor>
      <arglist>(KEYITERATOR beginKey, KEYITERATOR endKey)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static SymbolicFactor::shared_ptr</type>
      <name>FromIteratorsShared</name>
      <anchorfile>a04948.html</anchorfile>
      <anchor>aa7f3add34e99945f8f92632dd54afc6e</anchor>
      <arglist>(KEYITERATOR beginKey, KEYITERATOR endKey)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static SymbolicFactor</type>
      <name>FromKeys</name>
      <anchorfile>a04948.html</anchorfile>
      <anchor>a39bac348e7f6f44dc16b83bfb82acf19</anchor>
      <arglist>(const CONTAINER &amp;keys)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static SymbolicFactor::shared_ptr</type>
      <name>FromKeysShared</name>
      <anchorfile>a04948.html</anchorfile>
      <anchor>a9833052a7f34dc6a35eb7c840492847d</anchor>
      <arglist>(const CONTAINER &amp;keys)</arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; This &gt;</type>
      <name>shared_ptr</name>
      <anchorfile>a04948.html</anchorfile>
      <anchor>a1a13ba25abc2aaf00cec2fe24449ef4b</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>boost::serialization::access</name>
      <anchorfile>a04948.html</anchorfile>
      <anchor>ac98d07dd8f7b70e16ccb9a01abf56b9c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::SymbolicFactorGraph</name>
    <filename>a04960.html</filename>
    <base>FactorGraph&lt; SymbolicFactor &gt;</base>
    <base>EliminateableFactorGraph&lt; SymbolicFactorGraph &gt;</base>
    <member kind="function">
      <type></type>
      <name>SymbolicFactorGraph</name>
      <anchorfile>a04960.html</anchorfile>
      <anchor>a338bedd4fba5574653271c1c8ced52b7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SymbolicFactorGraph</name>
      <anchorfile>a04960.html</anchorfile>
      <anchor>acf44afb4ee8e78716fa02e9a3e678722</anchor>
      <arglist>(ITERATOR firstFactor, ITERATOR lastFactor)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SymbolicFactorGraph</name>
      <anchorfile>a04960.html</anchorfile>
      <anchor>af5e0ba26014cb8429f771c065e7959eb</anchor>
      <arglist>(const CONTAINER &amp;factors)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SymbolicFactorGraph</name>
      <anchorfile>a04960.html</anchorfile>
      <anchor>a5ab82f082c3be929fcf44796de70b4f0</anchor>
      <arglist>(const FactorGraph&lt; DERIVEDFACTOR &gt; &amp;graph)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~SymbolicFactorGraph</name>
      <anchorfile>a04960.html</anchorfile>
      <anchor>adbe05e177bc4677794a4d2e75574e913</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>a04960.html</anchorfile>
      <anchor>a7243830c9ba5728008a2bfe4f37b8d61</anchor>
      <arglist>(const std::string &amp;s=&quot;SymbolicFactorGraph&quot;, const KeyFormatter &amp;formatter=DefaultKeyFormatter) const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>push_factor</name>
      <anchorfile>a04960.html</anchorfile>
      <anchor>adceaa0fcfafa04f644f3b1c50ff32f7b</anchor>
      <arglist>(Key key)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>push_factor</name>
      <anchorfile>a04960.html</anchorfile>
      <anchor>a9a1df5c7471d9621c11dfdd6f587942c</anchor>
      <arglist>(Key key1, Key key2)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>push_factor</name>
      <anchorfile>a04960.html</anchorfile>
      <anchor>a21d9a49522d685b26ffa2cbe4499ebf5</anchor>
      <arglist>(Key key1, Key key2, Key key3)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>push_factor</name>
      <anchorfile>a04960.html</anchorfile>
      <anchor>a36ec7717261908c9c9963b1879761f92</anchor>
      <arglist>(Key key1, Key key2, Key key3, Key key4)</arglist>
    </member>
    <member kind="typedef">
      <type>SymbolicFactorGraph</type>
      <name>This</name>
      <anchorfile>a04960.html</anchorfile>
      <anchor>aac2ebef55b8787de5d790061b22974e8</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>FactorGraph&lt; SymbolicFactor &gt;</type>
      <name>Base</name>
      <anchorfile>a04960.html</anchorfile>
      <anchor>ae1aa66b5d45343c5fc6dd98716fc07b5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>EliminateableFactorGraph&lt; This &gt;</type>
      <name>BaseEliminateable</name>
      <anchorfile>a04960.html</anchorfile>
      <anchor>a85538ad365ab6e9d2495bac092dc78a1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; This &gt;</type>
      <name>shared_ptr</name>
      <anchorfile>a04960.html</anchorfile>
      <anchor>a976e9e8a8ad7f51096a4e616468cc3ec</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>boost::serialization::access</name>
      <anchorfile>a04960.html</anchorfile>
      <anchor>ac98d07dd8f7b70e16ccb9a01abf56b9c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::ConstructorTraversalData::SymbolicFactors</name>
    <filename>a03600.html</filename>
    <base>FactorGraph&lt; Factor &gt;</base>
  </compound>
  <compound kind="class">
    <name>gtsam::SymbolicISAM</name>
    <filename>a04968.html</filename>
    <base>ISAM&lt; SymbolicBayesTree &gt;</base>
    <member kind="function">
      <type></type>
      <name>SymbolicISAM</name>
      <anchorfile>a04968.html</anchorfile>
      <anchor>a3a6dc13df150778e90b5182d85633d95</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SymbolicISAM</name>
      <anchorfile>a04968.html</anchorfile>
      <anchor>a0c67633b7ba09d0fcf146e0c8bcfaf1e</anchor>
      <arglist>(const SymbolicBayesTree &amp;bayesTree)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SymbolicISAM</name>
      <anchorfile>a04968.html</anchorfile>
      <anchor>a3a6dc13df150778e90b5182d85633d95</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SymbolicISAM</name>
      <anchorfile>a04968.html</anchorfile>
      <anchor>a0c67633b7ba09d0fcf146e0c8bcfaf1e</anchor>
      <arglist>(const SymbolicBayesTree &amp;bayesTree)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::SymbolicJunctionTree</name>
    <filename>a04972.html</filename>
    <base>JunctionTree&lt; SymbolicBayesTree, SymbolicFactorGraph &gt;</base>
    <member kind="function">
      <type></type>
      <name>SymbolicJunctionTree</name>
      <anchorfile>a04972.html</anchorfile>
      <anchor>a61ae085cb8f50804dbb387b7136f3cff</anchor>
      <arglist>(const SymbolicEliminationTree &amp;eliminationTree)</arglist>
    </member>
    <member kind="typedef">
      <type>JunctionTree&lt; SymbolicBayesTree, SymbolicFactorGraph &gt;</type>
      <name>Base</name>
      <anchorfile>a04972.html</anchorfile>
      <anchor>a8d788f9f667575595528c4dfb3425ca8</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SymbolicJunctionTree</type>
      <name>This</name>
      <anchorfile>a04972.html</anchorfile>
      <anchor>ae16a13eef6463ec7c973e40d5874e864</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; This &gt;</type>
      <name>shared_ptr</name>
      <anchorfile>a04972.html</anchorfile>
      <anchor>a61ff4d9b29ccdbec88e999136287759c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::SymmetricBlockMatrix</name>
    <filename>a02640.html</filename>
    <member kind="function">
      <type>Matrix</type>
      <name>block</name>
      <anchorfile>a02640.html</anchorfile>
      <anchor>a977ea5f8ace56cdfd9f1afd6f0ecbf30</anchor>
      <arglist>(DenseIndex I, DenseIndex J) const</arglist>
    </member>
    <member kind="function">
      <type>Eigen::SelfAdjointView&lt; Block, Eigen::Upper &gt;</type>
      <name>diagonalBlock</name>
      <anchorfile>a02640.html</anchorfile>
      <anchor>abb8f0a01919cc6afa0056f0c827d164c</anchor>
      <arglist>(DenseIndex J)</arglist>
    </member>
    <member kind="function">
      <type>Eigen::SelfAdjointView&lt; constBlock, Eigen::Upper &gt;</type>
      <name>diagonalBlock</name>
      <anchorfile>a02640.html</anchorfile>
      <anchor>a8ee402f2a01b4756b406ca7051f7b762</anchor>
      <arglist>(DenseIndex J) const</arglist>
    </member>
    <member kind="function">
      <type>Vector</type>
      <name>diagonal</name>
      <anchorfile>a02640.html</anchorfile>
      <anchor>a18248dd8856d89f5182e759f3020c0b5</anchor>
      <arglist>(DenseIndex J) const</arglist>
    </member>
    <member kind="function">
      <type>constBlock</type>
      <name>aboveDiagonalBlock</name>
      <anchorfile>a02640.html</anchorfile>
      <anchor>a607f1a581086c66fea14bdb2baaa1b94</anchor>
      <arglist>(DenseIndex I, DenseIndex J) const</arglist>
    </member>
    <member kind="function">
      <type>Eigen::SelfAdjointView&lt; constBlock, Eigen::Upper &gt;</type>
      <name>selfadjointView</name>
      <anchorfile>a02640.html</anchorfile>
      <anchor>af6ce4a6e33658a116add49806944966c</anchor>
      <arglist>(DenseIndex I, DenseIndex J) const</arglist>
    </member>
    <member kind="function">
      <type>Eigen::TriangularView&lt; constBlock, Eigen::Upper &gt;</type>
      <name>triangularView</name>
      <anchorfile>a02640.html</anchorfile>
      <anchor>a8d0fbfb562bef7892a8adebee2b70bb8</anchor>
      <arglist>(DenseIndex I, DenseIndex J) const</arglist>
    </member>
    <member kind="function">
      <type>constBlock</type>
      <name>aboveDiagonalRange</name>
      <anchorfile>a02640.html</anchorfile>
      <anchor>aba226a3e544fdfb9b1d3af53f7989bc2</anchor>
      <arglist>(DenseIndex i_startBlock, DenseIndex i_endBlock, DenseIndex j_startBlock, DenseIndex j_endBlock) const</arglist>
    </member>
    <member kind="function">
      <type>Block</type>
      <name>aboveDiagonalRange</name>
      <anchorfile>a02640.html</anchorfile>
      <anchor>a8bc04ad6ae19a7bc25f428f68f7e6e0d</anchor>
      <arglist>(DenseIndex i_startBlock, DenseIndex i_endBlock, DenseIndex j_startBlock, DenseIndex j_endBlock)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setDiagonalBlock</name>
      <anchorfile>a02640.html</anchorfile>
      <anchor>a0f151c8fd3e24ebdc42cb301d79e9bd6</anchor>
      <arglist>(DenseIndex I, const XprType &amp;xpr)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setOffDiagonalBlock</name>
      <anchorfile>a02640.html</anchorfile>
      <anchor>a3888b53242390163a4601182a85d1028</anchor>
      <arglist>(DenseIndex I, DenseIndex J, const XprType &amp;xpr)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>updateDiagonalBlock</name>
      <anchorfile>a02640.html</anchorfile>
      <anchor>ac238889d9c141c538f6381619d0c39a4</anchor>
      <arglist>(DenseIndex I, const XprType &amp;xpr)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>updateOffDiagonalBlock</name>
      <anchorfile>a02640.html</anchorfile>
      <anchor>aa199f2600852b106241c1084291d79b5</anchor>
      <arglist>(DenseIndex I, DenseIndex J, const XprType &amp;xpr)</arglist>
    </member>
    <member kind="function">
      <type>Eigen::SelfAdjointView&lt; Block, Eigen::Upper &gt;</type>
      <name>selfadjointView</name>
      <anchorfile>a02640.html</anchorfile>
      <anchor>a5b7442c837e95976e8f3858c41c19c51</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Eigen::SelfAdjointView&lt; constBlock, Eigen::Upper &gt;</type>
      <name>selfadjointView</name>
      <anchorfile>a02640.html</anchorfile>
      <anchor>aa0bb9b91bf5503af96a982ea0462b51d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setFullMatrix</name>
      <anchorfile>a02640.html</anchorfile>
      <anchor>a55ef264a249ecc2f041b53557990ec02</anchor>
      <arglist>(const XprType &amp;xpr)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setZero</name>
      <anchorfile>a02640.html</anchorfile>
      <anchor>a35e66b194fff325549ff61c615381706</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>negate</name>
      <anchorfile>a02640.html</anchorfile>
      <anchor>a3c0ac82b5094f15eb6627ef1f64906fd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>invertInPlace</name>
      <anchorfile>a02640.html</anchorfile>
      <anchor>a709ab14aa6dc7ca078b3765aac4f2843</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SymmetricBlockMatrix</name>
      <anchorfile>a02640.html</anchorfile>
      <anchor>aba9a0daa86b53c16e36653a816328672</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SymmetricBlockMatrix</name>
      <anchorfile>a02640.html</anchorfile>
      <anchor>aa4cfb90a88b42bfab8c7f2c1a73d6f32</anchor>
      <arglist>(const CONTAINER &amp;dimensions, bool appendOneDimension=false)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SymmetricBlockMatrix</name>
      <anchorfile>a02640.html</anchorfile>
      <anchor>ab8db4e43a8c4ab7a16a7131b2546ea3f</anchor>
      <arglist>(ITERATOR firstBlockDim, ITERATOR lastBlockDim, bool appendOneDimension=false)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SymmetricBlockMatrix</name>
      <anchorfile>a02640.html</anchorfile>
      <anchor>a90f73296bb635ad9bc431949446a33f2</anchor>
      <arglist>(const CONTAINER &amp;dimensions, const Matrix &amp;matrix, bool appendOneDimension=false)</arglist>
    </member>
    <member kind="function">
      <type>DenseIndex</type>
      <name>rows</name>
      <anchorfile>a02640.html</anchorfile>
      <anchor>a810c55648086ce18223948ee68200207</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>DenseIndex</type>
      <name>cols</name>
      <anchorfile>a02640.html</anchorfile>
      <anchor>a26470060971a35498640235f56f235c2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>DenseIndex</type>
      <name>nBlocks</name>
      <anchorfile>a02640.html</anchorfile>
      <anchor>acbbb5bd424e0427ef4672b40e31ffa85</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>DenseIndex</type>
      <name>getDim</name>
      <anchorfile>a02640.html</anchorfile>
      <anchor>a2a410e1316e131f5d3e095ef20a6fb29</anchor>
      <arglist>(DenseIndex block) const</arglist>
    </member>
    <member kind="function">
      <type>DenseIndex &amp;</type>
      <name>blockStart</name>
      <anchorfile>a02640.html</anchorfile>
      <anchor>ab9dd43085f81fa3bba8cd56123c532c7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>DenseIndex</type>
      <name>blockStart</name>
      <anchorfile>a02640.html</anchorfile>
      <anchor>a93b97cad7a1e7ec1db9b209b786e2bdb</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>choleskyPartial</name>
      <anchorfile>a02640.html</anchorfile>
      <anchor>aaf6e0c34bcb0bfc6af21b58ad9f66e79</anchor>
      <arglist>(DenseIndex nFrontals)</arglist>
    </member>
    <member kind="function">
      <type>VerticalBlockMatrix</type>
      <name>split</name>
      <anchorfile>a02640.html</anchorfile>
      <anchor>ae32a049470045f6dad02b91de2648e2d</anchor>
      <arglist>(DenseIndex nFrontals)</arglist>
    </member>
    <member kind="function">
      <type>Matrix</type>
      <name>block</name>
      <anchorfile>a02640.html</anchorfile>
      <anchor>a977ea5f8ace56cdfd9f1afd6f0ecbf30</anchor>
      <arglist>(DenseIndex I, DenseIndex J) const</arglist>
    </member>
    <member kind="function">
      <type>Eigen::SelfAdjointView&lt; Block, Eigen::Upper &gt;</type>
      <name>diagonalBlock</name>
      <anchorfile>a02640.html</anchorfile>
      <anchor>abb8f0a01919cc6afa0056f0c827d164c</anchor>
      <arglist>(DenseIndex J)</arglist>
    </member>
    <member kind="function">
      <type>Eigen::SelfAdjointView&lt; constBlock, Eigen::Upper &gt;</type>
      <name>diagonalBlock</name>
      <anchorfile>a02640.html</anchorfile>
      <anchor>a8ee402f2a01b4756b406ca7051f7b762</anchor>
      <arglist>(DenseIndex J) const</arglist>
    </member>
    <member kind="function">
      <type>Vector</type>
      <name>diagonal</name>
      <anchorfile>a02640.html</anchorfile>
      <anchor>a18248dd8856d89f5182e759f3020c0b5</anchor>
      <arglist>(DenseIndex J) const</arglist>
    </member>
    <member kind="function">
      <type>constBlock</type>
      <name>aboveDiagonalBlock</name>
      <anchorfile>a02640.html</anchorfile>
      <anchor>a607f1a581086c66fea14bdb2baaa1b94</anchor>
      <arglist>(DenseIndex I, DenseIndex J) const</arglist>
    </member>
    <member kind="function">
      <type>Eigen::SelfAdjointView&lt; constBlock, Eigen::Upper &gt;</type>
      <name>selfadjointView</name>
      <anchorfile>a02640.html</anchorfile>
      <anchor>af6ce4a6e33658a116add49806944966c</anchor>
      <arglist>(DenseIndex I, DenseIndex J) const</arglist>
    </member>
    <member kind="function">
      <type>Eigen::TriangularView&lt; constBlock, Eigen::Upper &gt;</type>
      <name>triangularView</name>
      <anchorfile>a02640.html</anchorfile>
      <anchor>a8d0fbfb562bef7892a8adebee2b70bb8</anchor>
      <arglist>(DenseIndex I, DenseIndex J) const</arglist>
    </member>
    <member kind="function">
      <type>constBlock</type>
      <name>aboveDiagonalRange</name>
      <anchorfile>a02640.html</anchorfile>
      <anchor>aba226a3e544fdfb9b1d3af53f7989bc2</anchor>
      <arglist>(DenseIndex i_startBlock, DenseIndex i_endBlock, DenseIndex j_startBlock, DenseIndex j_endBlock) const</arglist>
    </member>
    <member kind="function">
      <type>Block</type>
      <name>aboveDiagonalRange</name>
      <anchorfile>a02640.html</anchorfile>
      <anchor>a8bc04ad6ae19a7bc25f428f68f7e6e0d</anchor>
      <arglist>(DenseIndex i_startBlock, DenseIndex i_endBlock, DenseIndex j_startBlock, DenseIndex j_endBlock)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setDiagonalBlock</name>
      <anchorfile>a02640.html</anchorfile>
      <anchor>a0f151c8fd3e24ebdc42cb301d79e9bd6</anchor>
      <arglist>(DenseIndex I, const XprType &amp;xpr)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setOffDiagonalBlock</name>
      <anchorfile>a02640.html</anchorfile>
      <anchor>a3888b53242390163a4601182a85d1028</anchor>
      <arglist>(DenseIndex I, DenseIndex J, const XprType &amp;xpr)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>updateDiagonalBlock</name>
      <anchorfile>a02640.html</anchorfile>
      <anchor>ac238889d9c141c538f6381619d0c39a4</anchor>
      <arglist>(DenseIndex I, const XprType &amp;xpr)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>updateOffDiagonalBlock</name>
      <anchorfile>a02640.html</anchorfile>
      <anchor>aa199f2600852b106241c1084291d79b5</anchor>
      <arglist>(DenseIndex I, DenseIndex J, const XprType &amp;xpr)</arglist>
    </member>
    <member kind="function">
      <type>Eigen::SelfAdjointView&lt; Block, Eigen::Upper &gt;</type>
      <name>selfadjointView</name>
      <anchorfile>a02640.html</anchorfile>
      <anchor>a5b7442c837e95976e8f3858c41c19c51</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Eigen::SelfAdjointView&lt; constBlock, Eigen::Upper &gt;</type>
      <name>selfadjointView</name>
      <anchorfile>a02640.html</anchorfile>
      <anchor>aa0bb9b91bf5503af96a982ea0462b51d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setFullMatrix</name>
      <anchorfile>a02640.html</anchorfile>
      <anchor>a55ef264a249ecc2f041b53557990ec02</anchor>
      <arglist>(const XprType &amp;xpr)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setZero</name>
      <anchorfile>a02640.html</anchorfile>
      <anchor>a35e66b194fff325549ff61c615381706</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>negate</name>
      <anchorfile>a02640.html</anchorfile>
      <anchor>a3c0ac82b5094f15eb6627ef1f64906fd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>invertInPlace</name>
      <anchorfile>a02640.html</anchorfile>
      <anchor>a709ab14aa6dc7ca078b3765aac4f2843</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static SymmetricBlockMatrix</type>
      <name>LikeActiveViewOf</name>
      <anchorfile>a02640.html</anchorfile>
      <anchor>ad28c4699e481a4b6db09067f420b925a</anchor>
      <arglist>(const SymmetricBlockMatrix &amp;other)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static SymmetricBlockMatrix</type>
      <name>LikeActiveViewOf</name>
      <anchorfile>a02640.html</anchorfile>
      <anchor>a6d9d6334c117ed8800872198172986ec</anchor>
      <arglist>(const VerticalBlockMatrix &amp;other)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>DenseIndex</type>
      <name>nOffsets</name>
      <anchorfile>a02640.html</anchorfile>
      <anchor>ac574291800a39eddcc1aceaa61ca7377</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>DenseIndex</type>
      <name>nActualBlocks</name>
      <anchorfile>a02640.html</anchorfile>
      <anchor>a122c641db73c5a2545effba62a5d0cfe</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>DenseIndex</type>
      <name>offset</name>
      <anchorfile>a02640.html</anchorfile>
      <anchor>afb0a6a4bade21e114b2358ce63b45dcc</anchor>
      <arglist>(DenseIndex block) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>constBlock</type>
      <name>block_</name>
      <anchorfile>a02640.html</anchorfile>
      <anchor>a61a4529858319aa96e0bf093f11e9b14</anchor>
      <arglist>(DenseIndex iBlock, DenseIndex jBlock, DenseIndex blockRows=1, DenseIndex blockCols=1) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>Block</type>
      <name>block_</name>
      <anchorfile>a02640.html</anchorfile>
      <anchor>ac1633a70e3e2491ab5ac8186074e4eca</anchor>
      <arglist>(DenseIndex iBlock, DenseIndex jBlock, DenseIndex blockRows=1, DenseIndex blockCols=1)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>constBlock</type>
      <name>full</name>
      <anchorfile>a02640.html</anchorfile>
      <anchor>a740bb45f04368963ee4f870259bb0196</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>Block</type>
      <name>full</name>
      <anchorfile>a02640.html</anchorfile>
      <anchor>a03e5eba7102a7206182589369819a52c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>std::array&lt; DenseIndex, 4 &gt;</type>
      <name>calcIndices</name>
      <anchorfile>a02640.html</anchorfile>
      <anchor>ac57dc0378696535ed3c0b8674991c5c4</anchor>
      <arglist>(DenseIndex iBlock, DenseIndex jBlock, DenseIndex blockRows, DenseIndex blockCols) const</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Matrix</type>
      <name>matrix_</name>
      <anchorfile>a02640.html</anchorfile>
      <anchor>a1df0e505b1794511838609da2d5ea712</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>FastVector&lt; DenseIndex &gt;</type>
      <name>variableColOffsets_</name>
      <anchorfile>a02640.html</anchorfile>
      <anchor>ae2d97054785689660b75c3a1f6d5a552</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>DenseIndex</type>
      <name>blockStart_</name>
      <anchorfile>a02640.html</anchorfile>
      <anchor>a060d00933c1f670fa1d4ac50592b79a4</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>boost::serialization::access</name>
      <anchorfile>a02640.html</anchorfile>
      <anchor>ac98d07dd8f7b70e16ccb9a01abf56b9c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::System</name>
    <filename>a03776.html</filename>
    <member kind="function">
      <type>const Matrix &amp;</type>
      <name>A</name>
      <anchorfile>a03776.html</anchorfile>
      <anchor>a3941a6711f3fe29c7880f349bf23f61c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Vector &amp;</type>
      <name>b</name>
      <anchorfile>a03776.html</anchorfile>
      <anchor>a47bfe00d3b15d9a270173e4da239873f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Vector</type>
      <name>operator^</name>
      <anchorfile>a03776.html</anchorfile>
      <anchor>ae9b8a03088b3e2177470bb22482d769f</anchor>
      <arglist>(const Vector &amp;e) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>a03776.html</anchorfile>
      <anchor>aad648316d2580be67e6031a9673d8bb1</anchor>
      <arglist>(const std::string &amp;s=&quot;System&quot;) const</arglist>
    </member>
    <member kind="function">
      <type>Vector</type>
      <name>gradient</name>
      <anchorfile>a03776.html</anchorfile>
      <anchor>a8f944ee551d3aa5fbc31319ef1bc2617</anchor>
      <arglist>(const Vector &amp;x) const</arglist>
    </member>
    <member kind="function">
      <type>Vector</type>
      <name>operator*</name>
      <anchorfile>a03776.html</anchorfile>
      <anchor>a2d9cdad1b0fe8837a466567e8fa889c3</anchor>
      <arglist>(const Vector &amp;x) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>multiplyInPlace</name>
      <anchorfile>a03776.html</anchorfile>
      <anchor>a3bd868666bc6f9fe0336132e2217f45a</anchor>
      <arglist>(const Vector &amp;x, Vector &amp;e) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>transposeMultiplyAdd</name>
      <anchorfile>a03776.html</anchorfile>
      <anchor>a9defe89aaaa6cd3695dfebbb0cbf9781</anchor>
      <arglist>(double alpha, const Vector &amp;e, Vector &amp;x) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::TangentPreintegration</name>
    <filename>a04188.html</filename>
    <base>gtsam::PreintegrationBase</base>
    <member kind="function">
      <type></type>
      <name>TangentPreintegration</name>
      <anchorfile>a04188.html</anchorfile>
      <anchor>a89bb513c2d0998f424d9ff41afbd69ea</anchor>
      <arglist>(const boost::shared_ptr&lt; Params &gt; &amp;p, const imuBias::ConstantBias &amp;biasHat=imuBias::ConstantBias())</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~TangentPreintegration</name>
      <anchorfile>a04188.html</anchorfile>
      <anchor>a87e4e0455266ed19974f576d141648ef</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>update</name>
      <anchorfile>a04188.html</anchorfile>
      <anchor>a29246e35a8351b6e9f66039401f445e8</anchor>
      <arglist>(const Vector3 &amp;measuredAcc, const Vector3 &amp;measuredOmega, const double dt, Matrix9 *A, Matrix93 *B, Matrix93 *C) override</arglist>
    </member>
    <member kind="function">
      <type>Vector9</type>
      <name>biasCorrectedDelta</name>
      <anchorfile>a04188.html</anchorfile>
      <anchor>af3a153da456c86a9de922cb7ce142c32</anchor>
      <arglist>(const imuBias::ConstantBias &amp;bias_i, OptionalJacobian&lt; 9, 6 &gt; H=boost::none) const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>mergeWith</name>
      <anchorfile>a04188.html</anchorfile>
      <anchor>a47d5b5a9a0695d464b70a1674db3d5f8</anchor>
      <arglist>(const TangentPreintegration &amp;pim, Matrix9 *H1, Matrix9 *H2)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual boost::shared_ptr&lt; TangentPreintegration &gt;</type>
      <name>clone</name>
      <anchorfile>a04188.html</anchorfile>
      <anchor>ae9c63818f0231729b197302177b7b4e2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TangentPreintegration</name>
      <anchorfile>a04188.html</anchorfile>
      <anchor>a89bb513c2d0998f424d9ff41afbd69ea</anchor>
      <arglist>(const boost::shared_ptr&lt; Params &gt; &amp;p, const imuBias::ConstantBias &amp;biasHat=imuBias::ConstantBias())</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~TangentPreintegration</name>
      <anchorfile>a04188.html</anchorfile>
      <anchor>a87e4e0455266ed19974f576d141648ef</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>TangentPreintegration</name>
      <anchorfile>a04188.html</anchorfile>
      <anchor>ab0683675722a4b8774b08f4f23538a33</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Vector9</type>
      <name>preintegrated_</name>
      <anchorfile>a04188.html</anchorfile>
      <anchor>aa35dd8359cdcc5adf12b79602f6f1f11</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Matrix93</type>
      <name>preintegrated_H_biasAcc_</name>
      <anchorfile>a04188.html</anchorfile>
      <anchor>ace8fc0be6d82355b59de1376708185af</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Matrix93</type>
      <name>preintegrated_H_biasOmega_</name>
      <anchorfile>a04188.html</anchorfile>
      <anchor>a610e8d7b5615146efd0ae18fe984f1a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>boost::serialization::access</name>
      <anchorfile>a04188.html</anchorfile>
      <anchor>ac98d07dd8f7b70e16ccb9a01abf56b9c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::TbbOpenMPMixedScope</name>
    <filename>a02724.html</filename>
  </compound>
  <compound kind="struct">
    <name>gtsam::Expression::TernaryFunction</name>
    <filename>a04252.html</filename>
    <templarg>class A1</templarg>
    <templarg>class A2</templarg>
    <templarg>class A3</templarg>
  </compound>
  <compound kind="struct">
    <name>gtsam::Testable</name>
    <filename>a02660.html</filename>
    <templarg>typename T</templarg>
  </compound>
  <compound kind="class">
    <name>gtsam::ThreadsafeException</name>
    <filename>a02664.html</filename>
    <templarg>class DERIVED</templarg>
    <member kind="function" protection="protected">
      <type></type>
      <name>ThreadsafeException</name>
      <anchorfile>a02664.html</anchorfile>
      <anchor>a5e422f39c89802be3c5aaaf65dbfd862</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>ThreadsafeException</name>
      <anchorfile>a02664.html</anchorfile>
      <anchor>a71fe75b345e277c800fb6b5ddba217de</anchor>
      <arglist>(const ThreadsafeException &amp;other)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>ThreadsafeException</name>
      <anchorfile>a02664.html</anchorfile>
      <anchor>a730172f56582e5a56d1fcb93d230d1de</anchor>
      <arglist>(const std::string &amp;description)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>~ThreadsafeException</name>
      <anchorfile>a02664.html</anchorfile>
      <anchor>a3a16f8c7e9e195c03a65dd03c65e77c5</anchor>
      <arglist>() noexcept override</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>dynamic_</name>
      <anchorfile>a02664.html</anchorfile>
      <anchor>a4efc6de8e5ea1810c3d32f29a00714c0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>boost::optional&lt; String &gt;</type>
      <name>description_</name>
      <anchorfile>a02664.html</anchorfile>
      <anchor>a8f7ec9cccffe7d666e3a025546377c32</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::internal::TimingOutline</name>
    <filename>a02684.html</filename>
    <member kind="function">
      <type>GTSAM_EXPORT</type>
      <name>TimingOutline</name>
      <anchorfile>a02684.html</anchorfile>
      <anchor>aaf71bcd586bc33bd38e9db2a8f59614a</anchor>
      <arglist>(const std::string &amp;label, size_t myId)</arglist>
    </member>
    <member kind="function">
      <type>GTSAM_EXPORT size_t</type>
      <name>time</name>
      <anchorfile>a02684.html</anchorfile>
      <anchor>ae6e021b0b7b9d4e4e95aa65ac5b95637</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>secs</name>
      <anchorfile>a02684.html</anchorfile>
      <anchor>a5f6bd0d92720bb07ead3c590b7483fb9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>self</name>
      <anchorfile>a02684.html</anchorfile>
      <anchor>a8c699a69c7d0708ffa2047f78c3c5ba4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>wall</name>
      <anchorfile>a02684.html</anchorfile>
      <anchor>a49254714ef87b36c03442065c9ca557c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>min</name>
      <anchorfile>a02684.html</anchorfile>
      <anchor>acdeff50555c404cfaed4d9e49722e673</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>max</name>
      <anchorfile>a02684.html</anchorfile>
      <anchor>a259f57a09ca2012a5987cabe35514604</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>mean</name>
      <anchorfile>a02684.html</anchorfile>
      <anchor>adfd8ce6ab7a1b7b8f844ef9fc1337d41</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>t2_</name>
      <anchorfile>a02684.html</anchorfile>
      <anchor>a10bc532260daa8d7372c289c1c2ecb17</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>boost::weak_ptr&lt; TimingOutline &gt;</type>
      <name>parent_</name>
      <anchorfile>a02684.html</anchorfile>
      <anchor>abec6041cac884177b3345c59c4b875b3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ChildMap</type>
      <name>children_</name>
      <anchorfile>a02684.html</anchorfile>
      <anchor>a1cbcbaea2438a8c1f36f19c46c7ca69b</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::TOAFactor</name>
    <filename>a05388.html</filename>
    <base>ExpressionFactor&lt; double &gt;</base>
    <member kind="function">
      <type></type>
      <name>TOAFactor</name>
      <anchorfile>a05388.html</anchorfile>
      <anchor>a19e96d04ed0d3e15d55aceff58bb1a24</anchor>
      <arglist>(const Expression&lt; Event &gt; &amp;eventExpression, const Expression&lt; Point3 &gt; &amp;sensorExpression, double toaMeasurement, const SharedNoiseModel &amp;model, double speed=330)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TOAFactor</name>
      <anchorfile>a05388.html</anchorfile>
      <anchor>a3cc9ff0141f12f1945467fc5f95648a2</anchor>
      <arglist>(const Expression&lt; Event &gt; &amp;eventExpression, const Point3 &amp;sensor, double toaMeasurement, const SharedNoiseModel &amp;model, double speed=330)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>gtsam::traits</name>
    <filename>a02444.html</filename>
    <templarg>typename T</templarg>
  </compound>
  <compound kind="struct">
    <name>gtsam::traits&lt; BearingFactor&lt; A1, A2, T &gt; &gt;</name>
    <filename>a04604.html</filename>
    <templarg>typename A1</templarg>
    <templarg>typename A2</templarg>
    <templarg>typename T</templarg>
    <base>Testable&lt; BearingFactor&lt; A1, A2, T &gt; &gt;</base>
  </compound>
  <compound kind="struct">
    <name>gtsam::traits&lt; BearingRange&lt; A1, A2 &gt; &gt;</name>
    <filename>a03036.html</filename>
    <templarg>typename A1</templarg>
    <templarg>typename A2</templarg>
    <base>Testable&lt; BearingRange&lt; A1, A2 &gt; &gt;</base>
    <base>ManifoldTraits&lt; BearingRange&lt; A1, A2 &gt; &gt;</base>
  </compound>
  <compound kind="struct">
    <name>gtsam::traits&lt; BearingRangeFactor&lt; A1, A2, B, R &gt; &gt;</name>
    <filename>a04612.html</filename>
    <templarg>typename A1</templarg>
    <templarg>typename A2</templarg>
    <templarg>typename B</templarg>
    <templarg>typename R</templarg>
    <base>Testable&lt; BearingRangeFactor&lt; A1, A2, B, R &gt; &gt;</base>
  </compound>
  <compound kind="struct">
    <name>gtsam::traits&lt; BetweenConstraint&lt; VALUE &gt; &gt;</name>
    <filename>a04696.html</filename>
    <templarg>class VALUE</templarg>
    <base>Testable&lt; BetweenConstraint&lt; VALUE &gt; &gt;</base>
  </compound>
  <compound kind="struct">
    <name>gtsam::traits&lt; BetweenFactor&lt; VALUE &gt; &gt;</name>
    <filename>a04688.html</filename>
    <templarg>class VALUE</templarg>
    <base>Testable&lt; BetweenFactor&lt; VALUE &gt; &gt;</base>
  </compound>
  <compound kind="struct">
    <name>gtsam::traits&lt; BinaryJacobianFactor&lt; M, N1, N2 &gt; &gt;</name>
    <filename>a03676.html</filename>
    <templarg>int M</templarg>
    <templarg>int N1</templarg>
    <templarg>int N2</templarg>
    <base>Testable&lt; BinaryJacobianFactor&lt; M, N1, N2 &gt; &gt;</base>
  </compound>
  <compound kind="struct">
    <name>gtsam::traits&lt; Cal3_S2 &gt;</name>
    <filename>a03056.html</filename>
    <base>Manifold&lt; Cal3_S2 &gt;</base>
  </compound>
  <compound kind="struct">
    <name>gtsam::traits&lt; Cal3_S2Stereo &gt;</name>
    <filename>a03068.html</filename>
    <base>Manifold&lt; Cal3_S2Stereo &gt;</base>
  </compound>
  <compound kind="struct">
    <name>gtsam::traits&lt; Cal3Bundler &gt;</name>
    <filename>a03080.html</filename>
    <base>Manifold&lt; Cal3Bundler &gt;</base>
  </compound>
  <compound kind="struct">
    <name>gtsam::traits&lt; Cal3DS2 &gt;</name>
    <filename>a03092.html</filename>
    <base>Manifold&lt; Cal3DS2 &gt;</base>
  </compound>
  <compound kind="struct">
    <name>gtsam::traits&lt; Cal3Fisheye &gt;</name>
    <filename>a03108.html</filename>
    <base>Manifold&lt; Cal3Fisheye &gt;</base>
  </compound>
  <compound kind="struct">
    <name>gtsam::traits&lt; Cal3Unified &gt;</name>
    <filename>a03120.html</filename>
    <base>Manifold&lt; Cal3Unified &gt;</base>
  </compound>
  <compound kind="struct">
    <name>gtsam::traits&lt; CalibratedCamera &gt;</name>
    <filename>a03140.html</filename>
    <base>Manifold&lt; CalibratedCamera &gt;</base>
  </compound>
  <compound kind="struct">
    <name>gtsam::traits&lt; CameraSet&lt; CAMERA &gt; &gt;</name>
    <filename>a03156.html</filename>
    <templarg>class CAMERA</templarg>
    <base>Testable&lt; CameraSet&lt; CAMERA &gt; &gt;</base>
  </compound>
  <compound kind="struct">
    <name>gtsam::traits&lt; CombinedImuFactor &gt;</name>
    <filename>a04072.html</filename>
    <base>Testable&lt; CombinedImuFactor &gt;</base>
  </compound>
  <compound kind="struct">
    <name>gtsam::traits&lt; ConcurrentBatchFilter &gt;</name>
    <filename>a05144.html</filename>
    <base>Testable&lt; ConcurrentBatchFilter &gt;</base>
  </compound>
  <compound kind="struct">
    <name>gtsam::traits&lt; ConcurrentBatchSmoother &gt;</name>
    <filename>a05156.html</filename>
    <base>Testable&lt; ConcurrentBatchSmoother &gt;</base>
  </compound>
  <compound kind="struct">
    <name>gtsam::traits&lt; ConcurrentIncrementalFilter &gt;</name>
    <filename>a05176.html</filename>
    <base>Testable&lt; ConcurrentIncrementalFilter &gt;</base>
  </compound>
  <compound kind="struct">
    <name>gtsam::traits&lt; ConcurrentIncrementalSmoother &gt;</name>
    <filename>a05188.html</filename>
    <base>Testable&lt; ConcurrentIncrementalSmoother &gt;</base>
  </compound>
  <compound kind="struct">
    <name>gtsam::traits&lt; const Cal3_S2 &gt;</name>
    <filename>a03060.html</filename>
    <base>Manifold&lt; Cal3_S2 &gt;</base>
  </compound>
  <compound kind="struct">
    <name>gtsam::traits&lt; const Cal3_S2Stereo &gt;</name>
    <filename>a03072.html</filename>
    <base>Manifold&lt; Cal3_S2Stereo &gt;</base>
  </compound>
  <compound kind="struct">
    <name>gtsam::traits&lt; const Cal3Bundler &gt;</name>
    <filename>a03084.html</filename>
    <base>Manifold&lt; Cal3Bundler &gt;</base>
  </compound>
  <compound kind="struct">
    <name>gtsam::traits&lt; const Cal3DS2 &gt;</name>
    <filename>a03096.html</filename>
    <base>Manifold&lt; Cal3DS2 &gt;</base>
  </compound>
  <compound kind="struct">
    <name>gtsam::traits&lt; const Cal3Fisheye &gt;</name>
    <filename>a03112.html</filename>
    <base>Manifold&lt; Cal3Fisheye &gt;</base>
  </compound>
  <compound kind="struct">
    <name>gtsam::traits&lt; const Cal3Unified &gt;</name>
    <filename>a03124.html</filename>
    <base>Manifold&lt; Cal3Unified &gt;</base>
  </compound>
  <compound kind="struct">
    <name>gtsam::traits&lt; const CalibratedCamera &gt;</name>
    <filename>a03144.html</filename>
    <base>Manifold&lt; CalibratedCamera &gt;</base>
  </compound>
  <compound kind="struct">
    <name>gtsam::traits&lt; const CameraSet&lt; CAMERA &gt; &gt;</name>
    <filename>a03160.html</filename>
    <templarg>class CAMERA</templarg>
    <base>Testable&lt; CameraSet&lt; CAMERA &gt; &gt;</base>
  </compound>
  <compound kind="struct">
    <name>gtsam::traits&lt; const EssentialMatrix &gt;</name>
    <filename>a03184.html</filename>
    <base>Manifold&lt; EssentialMatrix &gt;</base>
  </compound>
  <compound kind="struct">
    <name>gtsam::traits&lt; const Line3 &gt;</name>
    <filename>a03196.html</filename>
    <base>Manifold&lt; Line3 &gt;</base>
  </compound>
  <compound kind="struct">
    <name>gtsam::traits&lt; const OrientedPlane3 &gt;</name>
    <filename>a03208.html</filename>
    <base>Manifold&lt; OrientedPlane3 &gt;</base>
  </compound>
  <compound kind="struct">
    <name>gtsam::traits&lt; const PinholeCamera&lt; Calibration &gt; &gt;</name>
    <filename>a03220.html</filename>
    <templarg>typename Calibration</templarg>
    <base>Manifold&lt; PinholeCamera&lt; Calibration &gt; &gt;</base>
  </compound>
  <compound kind="struct">
    <name>gtsam::traits&lt; const PinholePose&lt; CALIBRATION &gt; &gt;</name>
    <filename>a03240.html</filename>
    <templarg>typename CALIBRATION</templarg>
    <base>Manifold&lt; PinholePose&lt; CALIBRATION &gt; &gt;</base>
  </compound>
  <compound kind="struct">
    <name>gtsam::traits&lt; const PinholeSet&lt; CAMERA &gt; &gt;</name>
    <filename>a03252.html</filename>
    <templarg>class CAMERA</templarg>
    <base>Testable&lt; PinholeSet&lt; CAMERA &gt; &gt;</base>
  </compound>
  <compound kind="struct">
    <name>gtsam::traits&lt; const Pose2 &gt;</name>
    <filename>a03276.html</filename>
    <base>LieGroup&lt; Pose2 &gt;</base>
  </compound>
  <compound kind="struct">
    <name>gtsam::traits&lt; const Pose3 &gt;</name>
    <filename>a03300.html</filename>
    <base>LieGroup&lt; Pose3 &gt;</base>
  </compound>
  <compound kind="struct">
    <name>gtsam::traits&lt; const Rot2 &gt;</name>
    <filename>a03332.html</filename>
    <base>LieGroup&lt; Rot2 &gt;</base>
  </compound>
  <compound kind="struct">
    <name>gtsam::traits&lt; const Rot3 &gt;</name>
    <filename>a03352.html</filename>
    <base>LieGroup&lt; Rot3 &gt;</base>
  </compound>
  <compound kind="struct">
    <name>gtsam::traits&lt; const Similarity3 &gt;</name>
    <filename>a03368.html</filename>
    <base>LieGroup&lt; Similarity3 &gt;</base>
  </compound>
  <compound kind="struct">
    <name>gtsam::traits&lt; const SO3 &gt;</name>
    <filename>a03384.html</filename>
    <base>LieGroup&lt; SO3 &gt;</base>
  </compound>
  <compound kind="struct">
    <name>gtsam::traits&lt; const SO4 &gt;</name>
    <filename>a03392.html</filename>
    <base>LieGroup&lt; SO4 &gt;</base>
  </compound>
  <compound kind="struct">
    <name>gtsam::traits&lt; const SO&lt; N &gt; &gt;</name>
    <filename>a03408.html</filename>
    <templarg>int N</templarg>
    <base>LieGroup&lt; SO&lt; N &gt; &gt;</base>
  </compound>
  <compound kind="struct">
    <name>gtsam::traits&lt; const StereoCamera &gt;</name>
    <filename>a03424.html</filename>
    <base>Manifold&lt; StereoCamera &gt;</base>
  </compound>
  <compound kind="struct">
    <name>gtsam::traits&lt; const StereoPoint2 &gt;</name>
    <filename>a03436.html</filename>
    <base>VectorSpace&lt; StereoPoint2 &gt;</base>
  </compound>
  <compound kind="struct">
    <name>gtsam::traits&lt; const Unit3 &gt;</name>
    <filename>a03468.html</filename>
    <base>Manifold&lt; Unit3 &gt;</base>
  </compound>
  <compound kind="struct">
    <name>gtsam::traits&lt; Cyclic&lt; N &gt; &gt;</name>
    <filename>a03172.html</filename>
    <templarg>size_t N</templarg>
    <base>Testable&lt; Cyclic&lt; N &gt; &gt;</base>
  </compound>
  <compound kind="struct">
    <name>gtsam::traits&lt; DecisionTreeFactor &gt;</name>
    <filename>a02936.html</filename>
    <base>Testable&lt; DecisionTreeFactor &gt;</base>
  </compound>
  <compound kind="struct">
    <name>gtsam::traits&lt; DirectProduct&lt; G, H &gt; &gt;</name>
    <filename>a02520.html</filename>
    <templarg>typename G</templarg>
    <templarg>typename H</templarg>
  </compound>
  <compound kind="struct">
    <name>gtsam::traits&lt; DirectSum&lt; G, H &gt; &gt;</name>
    <filename>a02528.html</filename>
    <templarg>typename G</templarg>
    <templarg>typename H</templarg>
  </compound>
  <compound kind="struct">
    <name>gtsam::traits&lt; DiscreteBayesNet &gt;</name>
    <filename>a02944.html</filename>
    <base>Testable&lt; DiscreteBayesNet &gt;</base>
  </compound>
  <compound kind="struct">
    <name>gtsam::traits&lt; DiscreteConditional &gt;</name>
    <filename>a02960.html</filename>
    <base>Testable&lt; DiscreteConditional &gt;</base>
  </compound>
  <compound kind="struct">
    <name>gtsam::traits&lt; DiscreteFactor &gt;</name>
    <filename>a02972.html</filename>
    <base>Testable&lt; DiscreteFactor &gt;</base>
  </compound>
  <compound kind="struct">
    <name>gtsam::traits&lt; DiscreteFactor::Values &gt;</name>
    <filename>a02976.html</filename>
    <base>Testable&lt; DiscreteFactor::Values &gt;</base>
  </compound>
  <compound kind="struct">
    <name>gtsam::traits&lt; DiscreteFactorGraph &gt;</name>
    <filename>a02988.html</filename>
    <base>Testable&lt; DiscreteFactorGraph &gt;</base>
  </compound>
  <compound kind="struct">
    <name>gtsam::traits&lt; double &gt;</name>
    <filename>a02772.html</filename>
    <base>ScalarTraits&lt; double &gt;</base>
  </compound>
  <compound kind="struct">
    <name>gtsam::traits&lt; Eigen::Matrix&lt; double, -1, -1, Options, MaxRows, MaxCols &gt; &gt;</name>
    <filename>a02788.html</filename>
    <templarg>int Options</templarg>
    <templarg>int MaxRows</templarg>
    <templarg>int MaxCols</templarg>
    <base>DynamicTraits&lt;-1, -1, Options, MaxRows, MaxCols &gt;</base>
  </compound>
  <compound kind="struct">
    <name>gtsam::traits&lt; Eigen::Matrix&lt; double, -1, 1, Options, MaxRows, MaxCols &gt; &gt;</name>
    <filename>a02792.html</filename>
    <templarg>int Options</templarg>
    <templarg>int MaxRows</templarg>
    <templarg>int MaxCols</templarg>
    <base>DynamicTraits&lt;-1, 1, Options, MaxRows, MaxCols &gt;</base>
  </compound>
  <compound kind="struct">
    <name>gtsam::traits&lt; Eigen::Matrix&lt; double, 1, -1, Options, MaxRows, MaxCols &gt; &gt;</name>
    <filename>a02796.html</filename>
    <templarg>int Options</templarg>
    <templarg>int MaxRows</templarg>
    <templarg>int MaxCols</templarg>
    <base>DynamicTraits&lt; 1, -1, Options, MaxRows, MaxCols &gt;</base>
  </compound>
  <compound kind="struct">
    <name>gtsam::traits&lt; Eigen::Matrix&lt; double, M, N, Options, MaxRows, MaxCols &gt; &gt;</name>
    <filename>a02780.html</filename>
    <templarg>int M</templarg>
    <templarg>int N</templarg>
    <templarg>int Options</templarg>
    <templarg>int MaxRows</templarg>
    <templarg>int MaxCols</templarg>
    <base>VectorSpaceImpl&lt; Eigen::Matrix&lt; double, M, N, Options, MaxRows, MaxCols &gt;, M *N &gt;</base>
  </compound>
  <compound kind="struct">
    <name>gtsam::traits&lt; EqualityFactorGraph &gt;</name>
    <filename>a05044.html</filename>
    <base>Testable&lt; EqualityFactorGraph &gt;</base>
  </compound>
  <compound kind="struct">
    <name>gtsam::traits&lt; Errors &gt;</name>
    <filename>a03692.html</filename>
    <base>Testable&lt; Errors &gt;</base>
  </compound>
  <compound kind="struct">
    <name>gtsam::traits&lt; EssentialMatrix &gt;</name>
    <filename>a03180.html</filename>
    <base>Manifold&lt; EssentialMatrix &gt;</base>
  </compound>
  <compound kind="struct">
    <name>gtsam::traits&lt; ExpressionFactor&lt; T &gt; &gt;</name>
    <filename>a04264.html</filename>
    <templarg>typename T</templarg>
    <base>Testable&lt; ExpressionFactor&lt; T &gt; &gt;</base>
  </compound>
  <compound kind="struct">
    <name>gtsam::traits&lt; ExpressionFactorN&lt; T, Args... &gt; &gt;</name>
    <filename>a04272.html</filename>
    <templarg>typename T</templarg>
    <templarg>typename... Args</templarg>
    <base>Testable&lt; ExpressionFactorN&lt; T, Args... &gt; &gt;</base>
  </compound>
  <compound kind="struct">
    <name>gtsam::traits&lt; float &gt;</name>
    <filename>a02776.html</filename>
    <base>ScalarTraits&lt; float &gt;</base>
  </compound>
  <compound kind="struct">
    <name>gtsam::traits&lt; FunctorizedFactor2&lt; R, T1, T2 &gt; &gt;</name>
    <filename>a04296.html</filename>
    <templarg>typename R</templarg>
    <templarg>typename T1</templarg>
    <templarg>typename T2</templarg>
    <base>Testable&lt; FunctorizedFactor2&lt; R, T1, T2 &gt; &gt;</base>
  </compound>
  <compound kind="struct">
    <name>gtsam::traits&lt; FunctorizedFactor&lt; R, T &gt; &gt;</name>
    <filename>a04288.html</filename>
    <templarg>typename R</templarg>
    <templarg>typename T</templarg>
    <base>Testable&lt; FunctorizedFactor&lt; R, T &gt; &gt;</base>
  </compound>
  <compound kind="struct">
    <name>gtsam::traits&lt; GaussianBayesNet &gt;</name>
    <filename>a03700.html</filename>
    <base>Testable&lt; GaussianBayesNet &gt;</base>
  </compound>
  <compound kind="struct">
    <name>gtsam::traits&lt; GaussianBayesTree &gt;</name>
    <filename>a03712.html</filename>
    <base>Testable&lt; GaussianBayesTree &gt;</base>
  </compound>
  <compound kind="struct">
    <name>gtsam::traits&lt; GaussianConditional &gt;</name>
    <filename>a03720.html</filename>
    <base>Testable&lt; GaussianConditional &gt;</base>
  </compound>
  <compound kind="struct">
    <name>gtsam::traits&lt; GaussianFactor &gt;</name>
    <filename>a03736.html</filename>
    <base>Testable&lt; GaussianFactor &gt;</base>
  </compound>
  <compound kind="struct">
    <name>gtsam::traits&lt; GaussianFactorGraph &gt;</name>
    <filename>a03748.html</filename>
    <base>Testable&lt; GaussianFactorGraph &gt;</base>
  </compound>
  <compound kind="struct">
    <name>gtsam::traits&lt; GaussianISAM &gt;</name>
    <filename>a03756.html</filename>
    <base>Testable&lt; GaussianISAM &gt;</base>
  </compound>
  <compound kind="struct">
    <name>gtsam::traits&lt; GaussMarkov1stOrderFactor&lt; VALUE &gt; &gt;</name>
    <filename>a05260.html</filename>
    <templarg>class VALUE</templarg>
    <base>Testable&lt; GaussMarkov1stOrderFactor&lt; VALUE &gt; &gt;</base>
  </compound>
  <compound kind="struct">
    <name>gtsam::traits&lt; GeneralSFMFactor2&lt; CALIBRATION &gt; &gt;</name>
    <filename>a04788.html</filename>
    <templarg>class CALIBRATION</templarg>
    <base>Testable&lt; GeneralSFMFactor2&lt; CALIBRATION &gt; &gt;</base>
  </compound>
  <compound kind="struct">
    <name>gtsam::traits&lt; GeneralSFMFactor&lt; CAMERA, LANDMARK &gt; &gt;</name>
    <filename>a04780.html</filename>
    <templarg>class CAMERA</templarg>
    <templarg>class LANDMARK</templarg>
    <base>Testable&lt; GeneralSFMFactor&lt; CAMERA, LANDMARK &gt; &gt;</base>
  </compound>
  <compound kind="struct">
    <name>gtsam::traits&lt; GenericProjectionFactor&lt; POSE, LANDMARK, CALIBRATION &gt; &gt;</name>
    <filename>a04836.html</filename>
    <templarg>class POSE</templarg>
    <templarg>class LANDMARK</templarg>
    <templarg>class CALIBRATION</templarg>
    <base>Testable&lt; GenericProjectionFactor&lt; POSE, LANDMARK, CALIBRATION &gt; &gt;</base>
  </compound>
  <compound kind="struct">
    <name>gtsam::traits&lt; GenericStereoFactor&lt; T1, T2 &gt; &gt;</name>
    <filename>a04900.html</filename>
    <templarg>class T1</templarg>
    <templarg>class T2</templarg>
    <base>Testable&lt; GenericStereoFactor&lt; T1, T2 &gt; &gt;</base>
  </compound>
  <compound kind="struct">
    <name>gtsam::traits&lt; GenericValue&lt; ValueType &gt; &gt;</name>
    <filename>a02496.html</filename>
    <templarg>typename ValueType</templarg>
    <base>Testable&lt; GenericValue&lt; ValueType &gt; &gt;</base>
  </compound>
  <compound kind="struct">
    <name>gtsam::traits&lt; HessianFactor &gt;</name>
    <filename>a03768.html</filename>
    <base>Testable&lt; HessianFactor &gt;</base>
  </compound>
  <compound kind="struct">
    <name>gtsam::traits&lt; imuBias::ConstantBias &gt;</name>
    <filename>a04092.html</filename>
    <base>VectorSpace&lt; imuBias::ConstantBias &gt;</base>
  </compound>
  <compound kind="struct">
    <name>gtsam::traits&lt; ImuFactor &gt;</name>
    <filename>a04112.html</filename>
    <base>Testable&lt; ImuFactor &gt;</base>
  </compound>
  <compound kind="struct">
    <name>gtsam::traits&lt; ImuFactor2 &gt;</name>
    <filename>a04116.html</filename>
    <base>Testable&lt; ImuFactor2 &gt;</base>
  </compound>
  <compound kind="struct">
    <name>gtsam::traits&lt; InequalityFactorGraph &gt;</name>
    <filename>a05052.html</filename>
    <base>Testable&lt; InequalityFactorGraph &gt;</base>
  </compound>
  <compound kind="struct">
    <name>gtsam::traits&lt; InertialNavFactor_GlobalVelocity&lt; POSE, VELOCITY, IMUBIAS &gt; &gt;</name>
    <filename>a05268.html</filename>
    <templarg>class POSE</templarg>
    <templarg>class VELOCITY</templarg>
    <templarg>class IMUBIAS</templarg>
    <base>Testable&lt; InertialNavFactor_GlobalVelocity&lt; POSE, VELOCITY, IMUBIAS &gt; &gt;</base>
  </compound>
  <compound kind="struct">
    <name>gtsam::traits&lt; ISAM2 &gt;</name>
    <filename>a04344.html</filename>
    <base>Testable&lt; ISAM2 &gt;</base>
  </compound>
  <compound kind="struct">
    <name>gtsam::traits&lt; JacobianFactor &gt;</name>
    <filename>a03800.html</filename>
    <base>Testable&lt; JacobianFactor &gt;</base>
  </compound>
  <compound kind="struct">
    <name>gtsam::traits&lt; JacobianFactorQ&lt; D, ZDim &gt; &gt;</name>
    <filename>a04800.html</filename>
    <templarg>size_t D</templarg>
    <templarg>size_t ZDim</templarg>
    <base>Testable&lt; JacobianFactorQ&lt; D, ZDim &gt; &gt;</base>
  </compound>
  <compound kind="struct">
    <name>gtsam::traits&lt; Key &gt;</name>
    <filename>a03616.html</filename>
  </compound>
  <compound kind="struct">
    <name>gtsam::traits&lt; LabeledSymbol &gt;</name>
    <filename>a03624.html</filename>
    <base>Testable&lt; LabeledSymbol &gt;</base>
  </compound>
  <compound kind="struct">
    <name>gtsam::traits&lt; Line3 &gt;</name>
    <filename>a03192.html</filename>
    <base>Manifold&lt; Line3 &gt;</base>
  </compound>
  <compound kind="struct">
    <name>gtsam::traits&lt; LinearContainerFactor &gt;</name>
    <filename>a04392.html</filename>
    <base>Testable&lt; LinearContainerFactor &gt;</base>
  </compound>
  <compound kind="struct">
    <name>gtsam::traits&lt; LinearCost &gt;</name>
    <filename>a05068.html</filename>
    <base>Testable&lt; LinearCost &gt;</base>
  </compound>
  <compound kind="struct">
    <name>gtsam::traits&lt; LinearEquality &gt;</name>
    <filename>a05076.html</filename>
    <base>Testable&lt; LinearEquality &gt;</base>
  </compound>
  <compound kind="struct">
    <name>gtsam::traits&lt; LinearInequality &gt;</name>
    <filename>a05084.html</filename>
    <base>Testable&lt; LinearInequality &gt;</base>
  </compound>
  <compound kind="struct">
    <name>gtsam::traits&lt; LinearizedHessianFactor &gt;</name>
    <filename>a05220.html</filename>
    <base>Testable&lt; LinearizedHessianFactor &gt;</base>
  </compound>
  <compound kind="struct">
    <name>gtsam::traits&lt; LinearizedJacobianFactor &gt;</name>
    <filename>a05212.html</filename>
    <base>Testable&lt; LinearizedJacobianFactor &gt;</base>
  </compound>
  <compound kind="struct">
    <name>gtsam::traits&lt; LP &gt;</name>
    <filename>a05092.html</filename>
    <base>Testable&lt; LP &gt;</base>
  </compound>
  <compound kind="struct">
    <name>gtsam::traits&lt; NavState &gt;</name>
    <filename>a04148.html</filename>
    <base>Manifold&lt; NavState &gt;</base>
  </compound>
  <compound kind="struct">
    <name>gtsam::traits&lt; noiseModel::Constrained &gt;</name>
    <filename>a03908.html</filename>
    <base>Testable&lt; noiseModel::Constrained &gt;</base>
  </compound>
  <compound kind="struct">
    <name>gtsam::traits&lt; noiseModel::Diagonal &gt;</name>
    <filename>a03904.html</filename>
    <base>Testable&lt; noiseModel::Diagonal &gt;</base>
  </compound>
  <compound kind="struct">
    <name>gtsam::traits&lt; noiseModel::Gaussian &gt;</name>
    <filename>a03900.html</filename>
    <base>Testable&lt; noiseModel::Gaussian &gt;</base>
  </compound>
  <compound kind="struct">
    <name>gtsam::traits&lt; noiseModel::Isotropic &gt;</name>
    <filename>a03912.html</filename>
    <base>Testable&lt; noiseModel::Isotropic &gt;</base>
  </compound>
  <compound kind="struct">
    <name>gtsam::traits&lt; noiseModel::Unit &gt;</name>
    <filename>a03916.html</filename>
    <base>Testable&lt; noiseModel::Unit &gt;</base>
  </compound>
  <compound kind="struct">
    <name>gtsam::traits&lt; NonlinearEquality1&lt; VALUE &gt; &gt;</name>
    <filename>a04424.html</filename>
    <templarg>typename VALUE</templarg>
    <base>Testable&lt; NonlinearEquality1&lt; VALUE &gt; &gt;</base>
  </compound>
  <compound kind="struct">
    <name>gtsam::traits&lt; NonlinearEquality2&lt; VALUE &gt; &gt;</name>
    <filename>a04432.html</filename>
    <templarg>typename VALUE</templarg>
    <base>Testable&lt; NonlinearEquality2&lt; VALUE &gt; &gt;</base>
  </compound>
  <compound kind="struct">
    <name>gtsam::traits&lt; NonlinearEquality&lt; VALUE &gt; &gt;</name>
    <filename>a04416.html</filename>
    <templarg>typename VALUE</templarg>
    <base>Testable&lt; NonlinearEquality&lt; VALUE &gt; &gt;</base>
  </compound>
  <compound kind="struct">
    <name>gtsam::traits&lt; NonlinearFactor &gt;</name>
    <filename>a04444.html</filename>
    <base>Testable&lt; NonlinearFactor &gt;</base>
  </compound>
  <compound kind="struct">
    <name>gtsam::traits&lt; NonlinearFactorGraph &gt;</name>
    <filename>a04484.html</filename>
    <base>Testable&lt; NonlinearFactorGraph &gt;</base>
  </compound>
  <compound kind="struct">
    <name>gtsam::traits&lt; Ordering &gt;</name>
    <filename>a03636.html</filename>
    <base>Testable&lt; Ordering &gt;</base>
  </compound>
  <compound kind="struct">
    <name>gtsam::traits&lt; OrientedPlane3 &gt;</name>
    <filename>a03204.html</filename>
    <base>Manifold&lt; OrientedPlane3 &gt;</base>
  </compound>
  <compound kind="struct">
    <name>gtsam::traits&lt; ParameterMatrix&lt; M &gt; &gt;</name>
    <filename>a02900.html</filename>
    <templarg>int M</templarg>
    <base>VectorSpace&lt; ParameterMatrix&lt; M &gt; &gt;</base>
  </compound>
  <compound kind="struct">
    <name>gtsam::traits&lt; PinholeCamera&lt; Calibration &gt; &gt;</name>
    <filename>a03216.html</filename>
    <templarg>typename Calibration</templarg>
    <base>Manifold&lt; PinholeCamera&lt; Calibration &gt; &gt;</base>
  </compound>
  <compound kind="struct">
    <name>gtsam::traits&lt; PinholePose&lt; CALIBRATION &gt; &gt;</name>
    <filename>a03236.html</filename>
    <templarg>typename CALIBRATION</templarg>
    <base>Manifold&lt; PinholePose&lt; CALIBRATION &gt; &gt;</base>
  </compound>
  <compound kind="struct">
    <name>gtsam::traits&lt; PinholeSet&lt; CAMERA &gt; &gt;</name>
    <filename>a03248.html</filename>
    <templarg>class CAMERA</templarg>
    <base>Testable&lt; PinholeSet&lt; CAMERA &gt; &gt;</base>
  </compound>
  <compound kind="struct">
    <name>gtsam::traits&lt; Pose2 &gt;</name>
    <filename>a03272.html</filename>
    <base>LieGroup&lt; Pose2 &gt;</base>
  </compound>
  <compound kind="struct">
    <name>gtsam::traits&lt; Pose3 &gt;</name>
    <filename>a03296.html</filename>
    <base>LieGroup&lt; Pose3 &gt;</base>
  </compound>
  <compound kind="struct">
    <name>gtsam::traits&lt; Pose3AttitudeFactor &gt;</name>
    <filename>a04048.html</filename>
    <base>Testable&lt; Pose3AttitudeFactor &gt;</base>
  </compound>
  <compound kind="struct">
    <name>gtsam::traits&lt; PoseRTV &gt;</name>
    <filename>a05464.html</filename>
    <base>LieGroup&lt; PoseRTV &gt;</base>
  </compound>
  <compound kind="struct">
    <name>gtsam::traits&lt; Potentials &gt;</name>
    <filename>a03008.html</filename>
    <base>Testable&lt; Potentials &gt;</base>
  </compound>
  <compound kind="struct">
    <name>gtsam::traits&lt; Potentials::ADT &gt;</name>
    <filename>a03012.html</filename>
    <base>Testable&lt; Potentials::ADT &gt;</base>
  </compound>
  <compound kind="struct">
    <name>gtsam::traits&lt; PreintegratedCombinedMeasurements &gt;</name>
    <filename>a04068.html</filename>
    <base>Testable&lt; PreintegratedCombinedMeasurements &gt;</base>
  </compound>
  <compound kind="struct">
    <name>gtsam::traits&lt; PreintegratedImuMeasurements &gt;</name>
    <filename>a04108.html</filename>
    <base>Testable&lt; PreintegratedImuMeasurements &gt;</base>
  </compound>
  <compound kind="struct">
    <name>gtsam::traits&lt; PreintegratedRotation &gt;</name>
    <filename>a04160.html</filename>
    <base>Testable&lt; PreintegratedRotation &gt;</base>
  </compound>
  <compound kind="struct">
    <name>gtsam::traits&lt; PreintegrationCombinedParams &gt;</name>
    <filename>a04064.html</filename>
    <base>Testable&lt; PreintegrationCombinedParams &gt;</base>
  </compound>
  <compound kind="struct">
    <name>gtsam::traits&lt; PriorFactor&lt; VALUE &gt; &gt;</name>
    <filename>a04504.html</filename>
    <templarg>class VALUE</templarg>
    <base>Testable&lt; PriorFactor&lt; VALUE &gt; &gt;</base>
  </compound>
  <compound kind="struct">
    <name>gtsam::traits&lt; ProductLieGroup&lt; G, H &gt; &gt;</name>
    <filename>a02636.html</filename>
    <templarg>typename G</templarg>
    <templarg>typename H</templarg>
    <base>LieGroupTraits&lt; ProductLieGroup&lt; G, H &gt; &gt;</base>
  </compound>
  <compound kind="struct">
    <name>gtsam::traits&lt; ProjectionFactorPPP&lt; POSE, LANDMARK, CALIBRATION &gt; &gt;</name>
    <filename>a05324.html</filename>
    <templarg>class POSE</templarg>
    <templarg>class LANDMARK</templarg>
    <templarg>class CALIBRATION</templarg>
    <base>Testable&lt; ProjectionFactorPPP&lt; POSE, LANDMARK, CALIBRATION &gt; &gt;</base>
  </compound>
  <compound kind="struct">
    <name>gtsam::traits&lt; ProjectionFactorPPPC&lt; POSE, LANDMARK, CALIBRATION &gt; &gt;</name>
    <filename>a05332.html</filename>
    <templarg>class POSE</templarg>
    <templarg>class LANDMARK</templarg>
    <templarg>class CALIBRATION</templarg>
    <base>Testable&lt; ProjectionFactorPPPC&lt; POSE, LANDMARK, CALIBRATION &gt; &gt;</base>
  </compound>
  <compound kind="struct">
    <name>gtsam::traits&lt; ProjectionFactorRollingShutter &gt;</name>
    <filename>a05340.html</filename>
    <base>Testable&lt; ProjectionFactorRollingShutter &gt;</base>
  </compound>
  <compound kind="struct">
    <name>gtsam::traits&lt; QUATERNION_TYPE &gt;</name>
    <filename>a03316.html</filename>
    <templarg>typename _Scalar</templarg>
    <templarg>int _Options</templarg>
    <member kind="function" static="yes">
      <type>static Q</type>
      <name>Expmap</name>
      <anchorfile>a03316.html</anchorfile>
      <anchor>a12c076407b71b70e1a23523fcbc3047d</anchor>
      <arglist>(const Eigen::Ref&lt; const TangentVector &gt; &amp;omega, ChartJacobian H=boost::none)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static TangentVector</type>
      <name>Logmap</name>
      <anchorfile>a03316.html</anchorfile>
      <anchor>a7a9af0389c59ee4a516b2ce0bbc31d46</anchor>
      <arglist>(const Q &amp;q, ChartJacobian H=boost::none)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Q</type>
      <name>Expmap</name>
      <anchorfile>a03316.html</anchorfile>
      <anchor>a12c076407b71b70e1a23523fcbc3047d</anchor>
      <arglist>(const Eigen::Ref&lt; const TangentVector &gt; &amp;omega, ChartJacobian H=boost::none)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static TangentVector</type>
      <name>Logmap</name>
      <anchorfile>a03316.html</anchorfile>
      <anchor>a7a9af0389c59ee4a516b2ce0bbc31d46</anchor>
      <arglist>(const Q &amp;q, ChartJacobian H=boost::none)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>gtsam::traits&lt; RangeFactor&lt; A1, A2, T &gt; &gt;</name>
    <filename>a04620.html</filename>
    <templarg>typename A1</templarg>
    <templarg>typename A2</templarg>
    <templarg>typename T</templarg>
    <base>Testable&lt; RangeFactor&lt; A1, A2, T &gt; &gt;</base>
  </compound>
  <compound kind="struct">
    <name>gtsam::traits&lt; RangeFactorWithTransform&lt; A1, A2, T &gt; &gt;</name>
    <filename>a04628.html</filename>
    <templarg>typename A1</templarg>
    <templarg>typename A2</templarg>
    <templarg>typename T</templarg>
    <base>Testable&lt; RangeFactorWithTransform&lt; A1, A2, T &gt; &gt;</base>
  </compound>
  <compound kind="struct">
    <name>gtsam::traits&lt; ReferenceFrameFactor&lt; T1, T2 &gt; &gt;</name>
    <filename>a04844.html</filename>
    <templarg>class T1</templarg>
    <templarg>class T2</templarg>
    <base>Testable&lt; ReferenceFrameFactor&lt; T1, T2 &gt; &gt;</base>
  </compound>
  <compound kind="struct">
    <name>gtsam::traits&lt; RegularHessianFactor&lt; D &gt; &gt;</name>
    <filename>a03964.html</filename>
    <templarg>size_t D</templarg>
    <base>Testable&lt; RegularHessianFactor&lt; D &gt; &gt;</base>
  </compound>
  <compound kind="struct">
    <name>gtsam::traits&lt; RegularImplicitSchurFactor&lt; CAMERA &gt; &gt;</name>
    <filename>a04852.html</filename>
    <templarg>class CAMERA</templarg>
    <base>Testable&lt; RegularImplicitSchurFactor&lt; CAMERA &gt; &gt;</base>
  </compound>
  <compound kind="struct">
    <name>gtsam::traits&lt; Rot2 &gt;</name>
    <filename>a03328.html</filename>
    <base>LieGroup&lt; Rot2 &gt;</base>
  </compound>
  <compound kind="struct">
    <name>gtsam::traits&lt; Rot3 &gt;</name>
    <filename>a03348.html</filename>
    <base>LieGroup&lt; Rot3 &gt;</base>
  </compound>
  <compound kind="struct">
    <name>gtsam::traits&lt; Rot3AttitudeFactor &gt;</name>
    <filename>a04040.html</filename>
    <base>Testable&lt; Rot3AttitudeFactor &gt;</base>
  </compound>
  <compound kind="struct">
    <name>gtsam::traits&lt; SfmData &gt;</name>
    <filename>a04740.html</filename>
    <base>Testable&lt; SfmData &gt;</base>
  </compound>
  <compound kind="struct">
    <name>gtsam::traits&lt; SfmTrack &gt;</name>
    <filename>a04732.html</filename>
    <base>Testable&lt; SfmTrack &gt;</base>
  </compound>
  <compound kind="struct">
    <name>gtsam::traits&lt; Similarity3 &gt;</name>
    <filename>a03364.html</filename>
    <base>LieGroup&lt; Similarity3 &gt;</base>
  </compound>
  <compound kind="struct">
    <name>gtsam::traits&lt; SmartProjectionFactor&lt; CAMERA &gt; &gt;</name>
    <filename>a04876.html</filename>
    <templarg>class CAMERA</templarg>
    <base>Testable&lt; SmartProjectionFactor&lt; CAMERA &gt; &gt;</base>
  </compound>
  <compound kind="struct">
    <name>gtsam::traits&lt; SmartProjectionPoseFactor&lt; CALIBRATION &gt; &gt;</name>
    <filename>a04884.html</filename>
    <templarg>class CALIBRATION</templarg>
    <base>Testable&lt; SmartProjectionPoseFactor&lt; CALIBRATION &gt; &gt;</base>
  </compound>
  <compound kind="struct">
    <name>gtsam::traits&lt; SmartProjectionPoseFactorRollingShutter&lt; CAMERA &gt; &gt;</name>
    <filename>a05352.html</filename>
    <templarg>class CAMERA</templarg>
    <base>Testable&lt; SmartProjectionPoseFactorRollingShutter&lt; CAMERA &gt; &gt;</base>
  </compound>
  <compound kind="struct">
    <name>gtsam::traits&lt; SmartProjectionRigFactor&lt; CAMERA &gt; &gt;</name>
    <filename>a04892.html</filename>
    <templarg>class CAMERA</templarg>
    <base>Testable&lt; SmartProjectionRigFactor&lt; CAMERA &gt; &gt;</base>
  </compound>
  <compound kind="struct">
    <name>gtsam::traits&lt; SmartStereoProjectionFactor &gt;</name>
    <filename>a05368.html</filename>
    <base>Testable&lt; SmartStereoProjectionFactor &gt;</base>
  </compound>
  <compound kind="struct">
    <name>gtsam::traits&lt; SmartStereoProjectionFactorPP &gt;</name>
    <filename>a05376.html</filename>
    <base>Testable&lt; SmartStereoProjectionFactorPP &gt;</base>
  </compound>
  <compound kind="struct">
    <name>gtsam::traits&lt; SmartStereoProjectionPoseFactor &gt;</name>
    <filename>a05384.html</filename>
    <base>Testable&lt; SmartStereoProjectionPoseFactor &gt;</base>
  </compound>
  <compound kind="struct">
    <name>gtsam::traits&lt; SO3 &gt;</name>
    <filename>a03380.html</filename>
    <base>LieGroup&lt; SO3 &gt;</base>
  </compound>
  <compound kind="struct">
    <name>gtsam::traits&lt; SO4 &gt;</name>
    <filename>a03388.html</filename>
    <base>LieGroup&lt; SO4 &gt;</base>
  </compound>
  <compound kind="struct">
    <name>gtsam::traits&lt; SO&lt; N &gt; &gt;</name>
    <filename>a03404.html</filename>
    <templarg>int N</templarg>
    <base>LieGroup&lt; SO&lt; N &gt; &gt;</base>
  </compound>
  <compound kind="struct">
    <name>gtsam::traits&lt; StereoCamera &gt;</name>
    <filename>a03420.html</filename>
    <base>Manifold&lt; StereoCamera &gt;</base>
  </compound>
  <compound kind="struct">
    <name>gtsam::traits&lt; StereoPoint2 &gt;</name>
    <filename>a03432.html</filename>
    <base>VectorSpace&lt; StereoPoint2 &gt;</base>
  </compound>
  <compound kind="struct">
    <name>gtsam::traits&lt; Symbol &gt;</name>
    <filename>a03648.html</filename>
    <base>Testable&lt; Symbol &gt;</base>
  </compound>
  <compound kind="struct">
    <name>gtsam::traits&lt; SymbolicBayesNet &gt;</name>
    <filename>a04912.html</filename>
    <base>Testable&lt; SymbolicBayesNet &gt;</base>
  </compound>
  <compound kind="struct">
    <name>gtsam::traits&lt; SymbolicBayesTree &gt;</name>
    <filename>a04928.html</filename>
    <base>Testable&lt; SymbolicBayesTree &gt;</base>
  </compound>
  <compound kind="struct">
    <name>gtsam::traits&lt; SymbolicBayesTreeClique &gt;</name>
    <filename>a04924.html</filename>
    <base>Testable&lt; SymbolicBayesTreeClique &gt;</base>
  </compound>
  <compound kind="struct">
    <name>gtsam::traits&lt; SymbolicConditional &gt;</name>
    <filename>a04936.html</filename>
    <base>Testable&lt; SymbolicConditional &gt;</base>
  </compound>
  <compound kind="struct">
    <name>gtsam::traits&lt; SymbolicEliminationTree &gt;</name>
    <filename>a04944.html</filename>
    <base>Testable&lt; SymbolicEliminationTree &gt;</base>
  </compound>
  <compound kind="struct">
    <name>gtsam::traits&lt; SymbolicFactor &gt;</name>
    <filename>a04952.html</filename>
    <base>Testable&lt; SymbolicFactor &gt;</base>
  </compound>
  <compound kind="struct">
    <name>gtsam::traits&lt; SymbolicFactorGraph &gt;</name>
    <filename>a04964.html</filename>
    <base>Testable&lt; SymbolicFactorGraph &gt;</base>
  </compound>
  <compound kind="struct">
    <name>gtsam::traits&lt; TransformBtwRobotsUnaryFactor&lt; VALUE &gt; &gt;</name>
    <filename>a05396.html</filename>
    <templarg>class VALUE</templarg>
    <base>Testable&lt; TransformBtwRobotsUnaryFactor&lt; VALUE &gt; &gt;</base>
  </compound>
  <compound kind="struct">
    <name>gtsam::traits&lt; TransformBtwRobotsUnaryFactorEM&lt; VALUE &gt; &gt;</name>
    <filename>a05404.html</filename>
    <templarg>class VALUE</templarg>
    <base>Testable&lt; TransformBtwRobotsUnaryFactorEM&lt; VALUE &gt; &gt;</base>
  </compound>
  <compound kind="struct">
    <name>gtsam::traits&lt; Unit3 &gt;</name>
    <filename>a03464.html</filename>
    <base>Manifold&lt; Unit3 &gt;</base>
  </compound>
  <compound kind="struct">
    <name>gtsam::traits&lt; Values &gt;</name>
    <filename>a04592.html</filename>
    <base>Testable&lt; Values &gt;</base>
  </compound>
  <compound kind="struct">
    <name>gtsam::traits&lt; VariableIndex &gt;</name>
    <filename>a03656.html</filename>
    <base>Testable&lt; VariableIndex &gt;</base>
  </compound>
  <compound kind="struct">
    <name>gtsam::traits&lt; VariableSlots &gt;</name>
    <filename>a03664.html</filename>
    <base>Testable&lt; VariableSlots &gt;</base>
  </compound>
  <compound kind="struct">
    <name>gtsam::traits&lt; VectorValues &gt;</name>
    <filename>a04020.html</filename>
    <base>Testable&lt; VectorValues &gt;</base>
  </compound>
  <compound kind="class">
    <name>gtsam::TransformBtwRobotsUnaryFactor</name>
    <filename>a05392.html</filename>
    <templarg>class VALUE</templarg>
    <base>gtsam::NonlinearFactor</base>
    <member kind="function">
      <type></type>
      <name>TransformBtwRobotsUnaryFactor</name>
      <anchorfile>a05392.html</anchorfile>
      <anchor>adfe06c3392749cef2332f9fbfd0c8ee4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TransformBtwRobotsUnaryFactor</name>
      <anchorfile>a05392.html</anchorfile>
      <anchor>a6d5f39dec452b04a8be333c516517190</anchor>
      <arglist>(Key key, const VALUE &amp;measured, Key keyA, Key keyB, const gtsam::Values &amp;valA, const gtsam::Values &amp;valB, const SharedGaussian &amp;model)</arglist>
    </member>
    <member kind="function">
      <type>gtsam::NonlinearFactor::shared_ptr</type>
      <name>clone</name>
      <anchorfile>a05392.html</anchorfile>
      <anchor>af63c17eade2335decf977b316204b0b2</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>a05392.html</anchorfile>
      <anchor>a4464a212ee77d406a425551f4b4bb4e7</anchor>
      <arglist>(const std::string &amp;s, const KeyFormatter &amp;keyFormatter=DefaultKeyFormatter) const override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>equals</name>
      <anchorfile>a05392.html</anchorfile>
      <anchor>a3c792ceb114187f1aa813acf2d44937c</anchor>
      <arglist>(const NonlinearFactor &amp;f, double tol=1e-9) const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setValAValB</name>
      <anchorfile>a05392.html</anchorfile>
      <anchor>a05ce6f5c293ea4e55466bc49c73d7938</anchor>
      <arglist>(const gtsam::Values &amp;valA, const gtsam::Values &amp;valB)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>error</name>
      <anchorfile>a05392.html</anchorfile>
      <anchor>a5a7ed167bda3fb9b02657b2bfe4b4ad4</anchor>
      <arglist>(const gtsam::Values &amp;x) const override</arglist>
    </member>
    <member kind="function">
      <type>boost::shared_ptr&lt; gtsam::GaussianFactor &gt;</type>
      <name>linearize</name>
      <anchorfile>a05392.html</anchorfile>
      <anchor>aa55d0a50de842ed59a4657fdfbddeb55</anchor>
      <arglist>(const gtsam::Values &amp;x) const override</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>dim</name>
      <anchorfile>a05392.html</anchorfile>
      <anchor>a4fce2cab7fff552e53ffe0926d477680</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; TransformBtwRobotsUnaryFactor &gt;</type>
      <name>shared_ptr</name>
      <anchorfile>a05392.html</anchorfile>
      <anchor>ad1f0dea6990a8c7aed904e6737a36f61</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>boost::serialization::access</name>
      <anchorfile>a05392.html</anchorfile>
      <anchor>ac98d07dd8f7b70e16ccb9a01abf56b9c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::TransformBtwRobotsUnaryFactorEM</name>
    <filename>a05400.html</filename>
    <templarg>class VALUE</templarg>
    <base>gtsam::NonlinearFactor</base>
    <member kind="function">
      <type></type>
      <name>TransformBtwRobotsUnaryFactorEM</name>
      <anchorfile>a05400.html</anchorfile>
      <anchor>a43b328f5e7a765b9c5a99c8f3ef600d4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TransformBtwRobotsUnaryFactorEM</name>
      <anchorfile>a05400.html</anchorfile>
      <anchor>ae9d499e95f35c6b6b5d36d8686358896</anchor>
      <arglist>(Key key, const VALUE &amp;measured, Key keyA, Key keyB, const Values &amp;valA, const Values &amp;valB, const SharedGaussian &amp;model_inlier, const SharedGaussian &amp;model_outlier, const double prior_inlier, const double prior_outlier, const bool flag_bump_up_near_zero_probs=false, const bool start_with_M_step=false)</arglist>
    </member>
    <member kind="function">
      <type>NonlinearFactor::shared_ptr</type>
      <name>clone</name>
      <anchorfile>a05400.html</anchorfile>
      <anchor>ac128724a80259fbfe4150a521797c6b1</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>a05400.html</anchorfile>
      <anchor>a3b45787522a27a6c0a9d85f832dd0b2c</anchor>
      <arglist>(const std::string &amp;s, const KeyFormatter &amp;keyFormatter=DefaultKeyFormatter) const override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>equals</name>
      <anchorfile>a05400.html</anchorfile>
      <anchor>a5ad6cc97bb04a51e01612a24becf8994</anchor>
      <arglist>(const NonlinearFactor &amp;f, double tol=1e-9) const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setValAValB</name>
      <anchorfile>a05400.html</anchorfile>
      <anchor>a46a9fdf2eba4da7d181db8bd004317a2</anchor>
      <arglist>(const Values &amp;valA, const Values &amp;valB)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>error</name>
      <anchorfile>a05400.html</anchorfile>
      <anchor>a0290a154d32e52916021fe569afaa60b</anchor>
      <arglist>(const Values &amp;x) const override</arglist>
    </member>
    <member kind="function">
      <type>boost::shared_ptr&lt; GaussianFactor &gt;</type>
      <name>linearize</name>
      <anchorfile>a05400.html</anchorfile>
      <anchor>a9b57849fafcc7af691ea2b373bd546c4</anchor>
      <arglist>(const Values &amp;x) const override</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>dim</name>
      <anchorfile>a05400.html</anchorfile>
      <anchor>a0bbe07468ac31f255579db50a43d3d8b</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; TransformBtwRobotsUnaryFactorEM &gt;</type>
      <name>shared_ptr</name>
      <anchorfile>a05400.html</anchorfile>
      <anchor>a8f939545c901d3ed8d1b7b3960e79af8</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>boost::serialization::access</name>
      <anchorfile>a05400.html</anchorfile>
      <anchor>ac98d07dd8f7b70e16ccb9a01abf56b9c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::TransformCovariance</name>
    <filename>a02552.html</filename>
    <templarg>class T</templarg>
  </compound>
  <compound kind="class">
    <name>gtsam::TranslationFactor</name>
    <filename>a04672.html</filename>
    <base>NoiseModelFactor2&lt; Point3, Point3 &gt;</base>
    <member kind="function">
      <type></type>
      <name>TranslationFactor</name>
      <anchorfile>a04672.html</anchorfile>
      <anchor>a7c01dfa0ae1540c90d4439671b5a74d4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Vector</type>
      <name>evaluateError</name>
      <anchorfile>a04672.html</anchorfile>
      <anchor>a863b3218f0ab46be65181c66c5e182d5</anchor>
      <arglist>(const Point3 &amp;Ta, const Point3 &amp;Tb, boost::optional&lt; Matrix &amp; &gt; H1=boost::none, boost::optional&lt; Matrix &amp; &gt; H2=boost::none) const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::TranslationRecovery</name>
    <filename>a04676.html</filename>
    <member kind="function">
      <type></type>
      <name>TranslationRecovery</name>
      <anchorfile>a04676.html</anchorfile>
      <anchor>acbdee6abe03510d7122fa3758fe411d6</anchor>
      <arglist>(const TranslationEdges &amp;relativeTranslations, const LevenbergMarquardtParams &amp;lmParams=LevenbergMarquardtParams())</arglist>
    </member>
    <member kind="function">
      <type>NonlinearFactorGraph</type>
      <name>buildGraph</name>
      <anchorfile>a04676.html</anchorfile>
      <anchor>a3ebfd50d112b2e3b531b5a40a754afa3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addPrior</name>
      <anchorfile>a04676.html</anchorfile>
      <anchor>a8d04c80d4cc367d1d733261271176e78</anchor>
      <arglist>(const double scale, NonlinearFactorGraph *graph, const SharedNoiseModel &amp;priorNoiseModel=noiseModel::Isotropic::Sigma(3, 0.01)) const</arglist>
    </member>
    <member kind="function">
      <type>Values</type>
      <name>initalizeRandomly</name>
      <anchorfile>a04676.html</anchorfile>
      <anchor>a791dee3adfbf16f2ccbf441ab66f710b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Values</type>
      <name>run</name>
      <anchorfile>a04676.html</anchorfile>
      <anchor>a7aa82dd5e23b405422285a26fe458a6f</anchor>
      <arglist>(const double scale=1.0) const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static TranslationEdges</type>
      <name>SimulateMeasurements</name>
      <anchorfile>a04676.html</anchorfile>
      <anchor>a40209e65971ae772ef42a3f3c294c18d</anchor>
      <arglist>(const Values &amp;poses, const std::vector&lt; KeyPair &gt; &amp;edges)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::TriangulationCheiralityException</name>
    <filename>a03444.html</filename>
  </compound>
  <compound kind="class">
    <name>gtsam::TriangulationFactor</name>
    <filename>a04904.html</filename>
    <templarg>class CAMERA</templarg>
    <base>NoiseModelFactor1&lt; Point3 &gt;</base>
    <member kind="function">
      <type></type>
      <name>TriangulationFactor</name>
      <anchorfile>a04904.html</anchorfile>
      <anchor>ae02b051f95339acc3e410d5352b985d2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TriangulationFactor</name>
      <anchorfile>a04904.html</anchorfile>
      <anchor>a73cd66af4faf4400cffe370d803ee223</anchor>
      <arglist>(const CAMERA &amp;camera, const Measurement &amp;measured, const SharedNoiseModel &amp;model, Key pointKey, bool throwCheirality=false, bool verboseCheirality=false)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~TriangulationFactor</name>
      <anchorfile>a04904.html</anchorfile>
      <anchor>abfe7a9acf4b4b3711e19e394dd37cd56</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>gtsam::NonlinearFactor::shared_ptr</type>
      <name>clone</name>
      <anchorfile>a04904.html</anchorfile>
      <anchor>a5d722591b82eef7f3f08e59328345a55</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>a04904.html</anchorfile>
      <anchor>a32e4234e9b6f059abe269a06f5937a2b</anchor>
      <arglist>(const std::string &amp;s=&quot;&quot;, const KeyFormatter &amp;keyFormatter=DefaultKeyFormatter) const override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>equals</name>
      <anchorfile>a04904.html</anchorfile>
      <anchor>abd2d62eb3c6851d188411259ad86b3f5</anchor>
      <arglist>(const NonlinearFactor &amp;p, double tol=1e-9) const override</arglist>
    </member>
    <member kind="function">
      <type>Vector</type>
      <name>evaluateError</name>
      <anchorfile>a04904.html</anchorfile>
      <anchor>a3817ce715496969c7cfb5331b15d4ac1</anchor>
      <arglist>(const Point3 &amp;point, boost::optional&lt; Matrix &amp; &gt; H2=boost::none) const override</arglist>
    </member>
    <member kind="function">
      <type>boost::shared_ptr&lt; GaussianFactor &gt;</type>
      <name>linearize</name>
      <anchorfile>a04904.html</anchorfile>
      <anchor>a5f37200c2ec8602113f45357954559a1</anchor>
      <arglist>(const Values &amp;x) const override</arglist>
    </member>
    <member kind="function">
      <type>const Measurement &amp;</type>
      <name>measured</name>
      <anchorfile>a04904.html</anchorfile>
      <anchor>a90c53cabdb77d29f7f60b1cd0cefa0ab</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>verboseCheirality</name>
      <anchorfile>a04904.html</anchorfile>
      <anchor>aaa3d5c65f9d098bf8e5fa1292c54e159</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>throwCheirality</name>
      <anchorfile>a04904.html</anchorfile>
      <anchor>a229cf2e42a61da1974a3d2f2ed9aa426</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable">
      <type>VerticalBlockMatrix</type>
      <name>Ab</name>
      <anchorfile>a04904.html</anchorfile>
      <anchor>a01fd8804ee553d17953facec54253c35</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>CAMERA</type>
      <name>Camera</name>
      <anchorfile>a04904.html</anchorfile>
      <anchor>a71f0aa57a44325f458f4d8694a40cde7</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; This &gt;</type>
      <name>shared_ptr</name>
      <anchorfile>a04904.html</anchorfile>
      <anchor>a8359a5fece7cfa2cf307d5f31401bbb4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>NoiseModelFactor1&lt; Point3 &gt;</type>
      <name>Base</name>
      <anchorfile>a04904.html</anchorfile>
      <anchor>ad70ed3b6038ed926740cb9858dfb49cf</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>TriangulationFactor&lt; CAMERA &gt;</type>
      <name>This</name>
      <anchorfile>a04904.html</anchorfile>
      <anchor>a2d19ceeb6615d2ae5b649792fb0ee93b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>CAMERA::Measurement</type>
      <name>Measurement</name>
      <anchorfile>a04904.html</anchorfile>
      <anchor>a0c26a357ed0a2e7e967cd3a6f9dffcb5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const CAMERA</type>
      <name>camera_</name>
      <anchorfile>a04904.html</anchorfile>
      <anchor>afe3ec00477435bf000943670d27a15b2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const Measurement</type>
      <name>measured_</name>
      <anchorfile>a04904.html</anchorfile>
      <anchor>af5260f93ab73cc09b483c08b318f7889</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const bool</type>
      <name>throwCheirality_</name>
      <anchorfile>a04904.html</anchorfile>
      <anchor>a0fe8550e6416afd3405bd9cfaea87a5c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const bool</type>
      <name>verboseCheirality_</name>
      <anchorfile>a04904.html</anchorfile>
      <anchor>ac7e1e1c9da6242b95c6da60d59953600</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>boost::serialization::access</name>
      <anchorfile>a04904.html</anchorfile>
      <anchor>ac98d07dd8f7b70e16ccb9a01abf56b9c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>gtsam::TriangulationParameters</name>
    <filename>a03452.html</filename>
    <member kind="function">
      <type></type>
      <name>TriangulationParameters</name>
      <anchorfile>a03452.html</anchorfile>
      <anchor>a67fe8647cd4b82144e61e1b03f0c1a5c</anchor>
      <arglist>(const double _rankTolerance=1.0, const bool _enableEPI=false, double _landmarkDistanceThreshold=-1, double _dynamicOutlierRejectionThreshold=-1)</arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>rankTolerance</name>
      <anchorfile>a03452.html</anchorfile>
      <anchor>a6bc48052dd695ad190eeb3de24abbdca</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>enableEPI</name>
      <anchorfile>a03452.html</anchorfile>
      <anchor>a84cf135d41ab91ce9957a77ef43284e6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>landmarkDistanceThreshold</name>
      <anchorfile>a03452.html</anchorfile>
      <anchor>a80c1a1257cd5603cfc8710be0a2dbde0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>dynamicOutlierRejectionThreshold</name>
      <anchorfile>a03452.html</anchorfile>
      <anchor>a64046ca36c4e21f7a805b31728317deb</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>boost::serialization::access</name>
      <anchorfile>a03452.html</anchorfile>
      <anchor>ac98d07dd8f7b70e16ccb9a01abf56b9c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::TriangulationResult</name>
    <filename>a03456.html</filename>
    <member kind="function">
      <type></type>
      <name>TriangulationResult</name>
      <anchorfile>a03456.html</anchorfile>
      <anchor>a8a88d57aeb7792059c275066d5368026</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TriangulationResult</name>
      <anchorfile>a03456.html</anchorfile>
      <anchor>ab6ca79f81f2cb6d1e0ebde66577304b6</anchor>
      <arglist>(const Point3 &amp;p)</arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>boost::serialization::access</name>
      <anchorfile>a03456.html</anchorfile>
      <anchor>ac98d07dd8f7b70e16ccb9a01abf56b9c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::TriangulationUnderconstrainedException</name>
    <filename>a03440.html</filename>
  </compound>
  <compound kind="class">
    <name>gtsam::noiseModel::mEstimator::Tukey</name>
    <filename>a03852.html</filename>
    <base>gtsam::noiseModel::mEstimator::Base</base>
    <member kind="friend">
      <type>friend class</type>
      <name>boost::serialization::access</name>
      <anchorfile>a03852.html</anchorfile>
      <anchor>ac98d07dd8f7b70e16ccb9a01abf56b9c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>gtsam::Expression::UnaryFunction</name>
    <filename>a04244.html</filename>
    <templarg>class A1</templarg>
  </compound>
  <compound kind="class">
    <name>gtsam::noiseModel::Unit</name>
    <filename>a03892.html</filename>
    <base>gtsam::noiseModel::Isotropic</base>
    <member kind="function">
      <type></type>
      <name>Unit</name>
      <anchorfile>a03892.html</anchorfile>
      <anchor>a33df813274f299f2d6d6e67c7e95c60f</anchor>
      <arglist>(size_t dim=1)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isUnit</name>
      <anchorfile>a03892.html</anchorfile>
      <anchor>a1a04f700c2ad336be61c7047af6c2b93</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>squaredMahalanobisDistance</name>
      <anchorfile>a03892.html</anchorfile>
      <anchor>a14b6ac02b28d64ab78ae4d61e0866fe8</anchor>
      <arglist>(const Vector &amp;v) const override</arglist>
    </member>
    <member kind="function">
      <type>Vector</type>
      <name>whiten</name>
      <anchorfile>a03892.html</anchorfile>
      <anchor>a43c9d87437089c661a3a6298ece53287</anchor>
      <arglist>(const Vector &amp;v) const override</arglist>
    </member>
    <member kind="function">
      <type>Vector</type>
      <name>unwhiten</name>
      <anchorfile>a03892.html</anchorfile>
      <anchor>a075b5e743ed96eb7b532e83f5130bcf5</anchor>
      <arglist>(const Vector &amp;v) const override</arglist>
    </member>
    <member kind="function">
      <type>Matrix</type>
      <name>Whiten</name>
      <anchorfile>a03892.html</anchorfile>
      <anchor>af9783a7fdc214131ae012073c4650b68</anchor>
      <arglist>(const Matrix &amp;H) const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>WhitenInPlace</name>
      <anchorfile>a03892.html</anchorfile>
      <anchor>ab1451b36f4796f85c4ee776e67df319d</anchor>
      <arglist>(Matrix &amp;) const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>WhitenInPlace</name>
      <anchorfile>a03892.html</anchorfile>
      <anchor>a05d775a7840d0c9b4f926b796b2c46fd</anchor>
      <arglist>(Eigen::Block&lt; Matrix &gt;) const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>whitenInPlace</name>
      <anchorfile>a03892.html</anchorfile>
      <anchor>a8da3bd9bc0519a2a0b821f97ee08955f</anchor>
      <arglist>(Vector &amp;) const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>unwhitenInPlace</name>
      <anchorfile>a03892.html</anchorfile>
      <anchor>a77033130942900ba4234af1f5b5bd5bc</anchor>
      <arglist>(Vector &amp;) const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>whitenInPlace</name>
      <anchorfile>a03892.html</anchorfile>
      <anchor>a18e4a5bffb47ef392182e9c0a3249123</anchor>
      <arglist>(Eigen::Block&lt; Vector &gt; &amp;) const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>unwhitenInPlace</name>
      <anchorfile>a03892.html</anchorfile>
      <anchor>a89ecc09002bee060b61cb74531dbee8b</anchor>
      <arglist>(Eigen::Block&lt; Vector &gt; &amp;) const override</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static shared_ptr</type>
      <name>Create</name>
      <anchorfile>a03892.html</anchorfile>
      <anchor>a61fda7a7390d3fc40f5618185e801bfe</anchor>
      <arglist>(size_t dim)</arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>boost::serialization::access</name>
      <anchorfile>a03892.html</anchorfile>
      <anchor>ac98d07dd8f7b70e16ccb9a01abf56b9c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::Unit3</name>
    <filename>a03460.html</filename>
    <member kind="enumeration">
      <type></type>
      <name>CoordinatesMode</name>
      <anchorfile>a03460.html</anchorfile>
      <anchor>a7df7fcee1896717df85a470b130859de</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>EXPMAP</name>
      <anchorfile>a03460.html</anchorfile>
      <anchor>a7df7fcee1896717df85a470b130859dea4ca2211bee749e662b2bf8556dc849d0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>RENORM</name>
      <anchorfile>a03460.html</anchorfile>
      <anchor>a7df7fcee1896717df85a470b130859dea66a862c12af15a2dde78cd16a3a4ba4f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>dim</name>
      <anchorfile>a03460.html</anchorfile>
      <anchor>a5cf9ee18166bb59b9ce142ce39e5bb7f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>GTSAM_EXPORT Unit3</type>
      <name>retract</name>
      <anchorfile>a03460.html</anchorfile>
      <anchor>a12f1fc402dbebf9a1f6f3efda2c59360</anchor>
      <arglist>(const Vector2 &amp;v, OptionalJacobian&lt; 2, 2 &gt; H=boost::none) const</arglist>
    </member>
    <member kind="function">
      <type>GTSAM_EXPORT Vector2</type>
      <name>localCoordinates</name>
      <anchorfile>a03460.html</anchorfile>
      <anchor>aebea602cfa8afcd3ac8066da17f63c1c</anchor>
      <arglist>(const Unit3 &amp;s) const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static size_t</type>
      <name>Dim</name>
      <anchorfile>a03460.html</anchorfile>
      <anchor>a3c282b5d93814bebc62000ea50629ed5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>boost::serialization::access</name>
      <anchorfile>a03460.html</anchorfile>
      <anchor>ac98d07dd8f7b70e16ccb9a01abf56b9c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>GTSAM_EXPORT void</type>
      <name>print</name>
      <anchorfile>a03460.html</anchorfile>
      <anchor>a5a1656717bce00025a07dd1ec8377f15</anchor>
      <arglist>(const std::string &amp;s=std::string()) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>equals</name>
      <anchorfile>a03460.html</anchorfile>
      <anchor>a773ac8762708dcbe2afc665ddcce765c</anchor>
      <arglist>(const Unit3 &amp;s, double tol=1e-9) const</arglist>
    </member>
    <member kind="friend">
      <type>friend Point3</type>
      <name>operator*</name>
      <anchorfile>a03460.html</anchorfile>
      <anchor>a365ae7737121f932c95515d0c6309c35</anchor>
      <arglist>(double s, const Unit3 &amp;d)</arglist>
    </member>
    <member kind="function">
      <type>GTSAM_EXPORT const Matrix32 &amp;</type>
      <name>basis</name>
      <anchorfile>a03460.html</anchorfile>
      <anchor>a25c12531e20ee69bc7b87bd632c38381</anchor>
      <arglist>(OptionalJacobian&lt; 6, 2 &gt; H=boost::none) const</arglist>
    </member>
    <member kind="function">
      <type>GTSAM_EXPORT Matrix3</type>
      <name>skew</name>
      <anchorfile>a03460.html</anchorfile>
      <anchor>af57523f54c23f1e9fb3130a58a2ca68b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>GTSAM_EXPORT Point3</type>
      <name>point3</name>
      <anchorfile>a03460.html</anchorfile>
      <anchor>a4564930d54700b7cb2cabf83112c8e33</anchor>
      <arglist>(OptionalJacobian&lt; 3, 2 &gt; H=boost::none) const</arglist>
    </member>
    <member kind="function">
      <type>GTSAM_EXPORT Vector3</type>
      <name>unitVector</name>
      <anchorfile>a03460.html</anchorfile>
      <anchor>a0b97a5763f74c939ba1fa941af9fff14</anchor>
      <arglist>(OptionalJacobian&lt; 3, 2 &gt; H=boost::none) const</arglist>
    </member>
    <member kind="function">
      <type>GTSAM_EXPORT double</type>
      <name>dot</name>
      <anchorfile>a03460.html</anchorfile>
      <anchor>a17dc4597e8ce33bc9eff7f138f884885</anchor>
      <arglist>(const Unit3 &amp;q, OptionalJacobian&lt; 1, 2 &gt; H1=boost::none, OptionalJacobian&lt; 1, 2 &gt; H2=boost::none) const</arglist>
    </member>
    <member kind="function">
      <type>GTSAM_EXPORT Vector2</type>
      <name>error</name>
      <anchorfile>a03460.html</anchorfile>
      <anchor>a60cac5c8f8dd0bb716f0f73088164f82</anchor>
      <arglist>(const Unit3 &amp;q, OptionalJacobian&lt; 2, 2 &gt; H_q=boost::none) const</arglist>
    </member>
    <member kind="function">
      <type>GTSAM_EXPORT Vector2</type>
      <name>errorVector</name>
      <anchorfile>a03460.html</anchorfile>
      <anchor>a8ae32a1c6ae64cf51bcfa8257df1088c</anchor>
      <arglist>(const Unit3 &amp;q, OptionalJacobian&lt; 2, 2 &gt; H_p=boost::none, OptionalJacobian&lt; 2, 2 &gt; H_q=boost::none) const</arglist>
    </member>
    <member kind="function">
      <type>GTSAM_EXPORT double</type>
      <name>distance</name>
      <anchorfile>a03460.html</anchorfile>
      <anchor>a8f7e20bc7681d983449c8ab8e8d7760a</anchor>
      <arglist>(const Unit3 &amp;q, OptionalJacobian&lt; 1, 2 &gt; H=boost::none) const</arglist>
    </member>
    <member kind="function">
      <type>Unit3</type>
      <name>cross</name>
      <anchorfile>a03460.html</anchorfile>
      <anchor>a99fd6adaa54d5d6af774291142af4c2c</anchor>
      <arglist>(const Unit3 &amp;q) const</arglist>
    </member>
    <member kind="function">
      <type>Point3</type>
      <name>cross</name>
      <anchorfile>a03460.html</anchorfile>
      <anchor>ae4e5b6623b9e7b39640f97be26f8d918</anchor>
      <arglist>(const Point3 &amp;q) const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Unit3</name>
      <anchorfile>a03460.html</anchorfile>
      <anchor>a358877500acd48b9a26b1f0cba6843ee</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Unit3</name>
      <anchorfile>a03460.html</anchorfile>
      <anchor>a69d3130f7387ce063b50aa38eca4f1d8</anchor>
      <arglist>(const Vector3 &amp;p)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Unit3</name>
      <anchorfile>a03460.html</anchorfile>
      <anchor>a21e2638a4e3257976366623da0a06d52</anchor>
      <arglist>(double x, double y, double z)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Unit3</name>
      <anchorfile>a03460.html</anchorfile>
      <anchor>a2fc016f2abf93b5a37cf063959638e52</anchor>
      <arglist>(const Point2 &amp;p, double f)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Unit3</name>
      <anchorfile>a03460.html</anchorfile>
      <anchor>a300388d8221e0642c687b24a9b9585d5</anchor>
      <arglist>(const Unit3 &amp;u)</arglist>
    </member>
    <member kind="function">
      <type>Unit3 &amp;</type>
      <name>operator=</name>
      <anchorfile>a03460.html</anchorfile>
      <anchor>af4fa4034476db33caf623065887594b3</anchor>
      <arglist>(const Unit3 &amp;u)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static GTSAM_EXPORT Unit3</type>
      <name>FromPoint3</name>
      <anchorfile>a03460.html</anchorfile>
      <anchor>a5f4578a0612c6bcc9b5dc9e5d94e2802</anchor>
      <arglist>(const Point3 &amp;point, OptionalJacobian&lt; 2, 3 &gt; H=boost::none)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static GTSAM_EXPORT Unit3</type>
      <name>Random</name>
      <anchorfile>a03460.html</anchorfile>
      <anchor>ac789022b3cbad1e166725915f8fcbe2c</anchor>
      <arglist>(std::mt19937 &amp;rng)</arglist>
    </member>
    <member kind="enumvalue">
      <name>EXPMAP</name>
      <anchorfile>a03460.html</anchorfile>
      <anchor>a7df7fcee1896717df85a470b130859dea4ca2211bee749e662b2bf8556dc849d0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>RENORM</name>
      <anchorfile>a03460.html</anchorfile>
      <anchor>a7df7fcee1896717df85a470b130859dea66a862c12af15a2dde78cd16a3a4ba4f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>gtsam::UpdateImpl</name>
    <filename>a04336.html</filename>
    <member kind="function" static="yes">
      <type>static KeySet</type>
      <name>CheckRelinearizationPartial</name>
      <anchorfile>a04336.html</anchorfile>
      <anchor>ac5d5ae4b4359f5fb59cd3b4fc5337d7d</anchor>
      <arglist>(const ISAM2::Roots &amp;roots, const VectorValues &amp;delta, const ISAM2Params::RelinearizationThreshold &amp;relinearizeThreshold)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static KeySet</type>
      <name>CheckRelinearizationFull</name>
      <anchorfile>a04336.html</anchorfile>
      <anchor>aac46b23e66c48cd126ba510749a06268</anchor>
      <arglist>(const VectorValues &amp;delta, const ISAM2Params::RelinearizationThreshold &amp;relinearizeThreshold)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>ExpmapMasked</name>
      <anchorfile>a04336.html</anchorfile>
      <anchor>a0fa938bf687caeb84a0e09a0182d968f</anchor>
      <arglist>(const VectorValues &amp;delta, const KeySet &amp;mask, Values *theta)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::Value</name>
    <filename>a02740.html</filename>
    <member kind="function" virtualness="pure">
      <type>virtual Value *</type>
      <name>clone_</name>
      <anchorfile>a02740.html</anchorfile>
      <anchor>ac6245c02ce05c4a87072ebc6bd27a7d5</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>deallocate_</name>
      <anchorfile>a02740.html</anchorfile>
      <anchor>a5a0554b9e0758f370073ea3cc5cf1c9f</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual boost::shared_ptr&lt; Value &gt;</type>
      <name>clone</name>
      <anchorfile>a02740.html</anchorfile>
      <anchor>af8ca22b41d251396c03ffb96f914748d</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>equals_</name>
      <anchorfile>a02740.html</anchorfile>
      <anchor>a74edb2709fe745b6d09087f6aacf507f</anchor>
      <arglist>(const Value &amp;other, double tol=1e-9) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>print</name>
      <anchorfile>a02740.html</anchorfile>
      <anchor>ac338307bb9f00cd29a70a48058069458</anchor>
      <arglist>(const std::string &amp;str=&quot;&quot;) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual size_t</type>
      <name>dim</name>
      <anchorfile>a02740.html</anchorfile>
      <anchor>a21e0a839ddaabd4c56559684ff887efe</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual Value *</type>
      <name>retract_</name>
      <anchorfile>a02740.html</anchorfile>
      <anchor>a2b95d3ec328cbad775490fa15dae27d5</anchor>
      <arglist>(const Vector &amp;delta) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual Vector</type>
      <name>localCoordinates_</name>
      <anchorfile>a02740.html</anchorfile>
      <anchor>a83429f15b4f68ed92e976649ea52da97</anchor>
      <arglist>(const Value &amp;value) const =0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Value &amp;</type>
      <name>operator=</name>
      <anchorfile>a02740.html</anchorfile>
      <anchor>abefd5e7e205863119c1f88075070f5df</anchor>
      <arglist>(const Value &amp;)</arglist>
    </member>
    <member kind="function">
      <type>const ValueType &amp;</type>
      <name>cast</name>
      <anchorfile>a02740.html</anchorfile>
      <anchor>a3572aa15e1db4d995796f4354d926d49</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Value</name>
      <anchorfile>a02740.html</anchorfile>
      <anchor>a616a94e2ce8e99e732d5ceb9af00632c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>boost::serialization::access</name>
      <anchorfile>a02740.html</anchorfile>
      <anchor>ac98d07dd8f7b70e16ccb9a01abf56b9c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::ValueCloneAllocator</name>
    <filename>a04556.html</filename>
  </compound>
  <compound kind="class">
    <name>gtsam::Values</name>
    <filename>a04560.html</filename>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>a04560.html</anchorfile>
      <anchor>a046f4df94f53d9db536b2e0e57ffe6f3</anchor>
      <arglist>(const std::string &amp;str=&quot;&quot;, const KeyFormatter &amp;keyFormatter=DefaultKeyFormatter) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>equals</name>
      <anchorfile>a04560.html</anchorfile>
      <anchor>a920e8f63ea4bd5fc9f0818842e508556</anchor>
      <arglist>(const Values &amp;other, double tol=1e-9) const</arglist>
    </member>
    <member kind="function">
      <type>Values</type>
      <name>retract</name>
      <anchorfile>a04560.html</anchorfile>
      <anchor>a9b256edadb21fd362c185781e734a9f9</anchor>
      <arglist>(const VectorValues &amp;delta) const</arglist>
    </member>
    <member kind="function">
      <type>VectorValues</type>
      <name>localCoordinates</name>
      <anchorfile>a04560.html</anchorfile>
      <anchor>a32fc6f408d625df658f4b14124b73d1b</anchor>
      <arglist>(const Values &amp;cp) const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Values</name>
      <anchorfile>a04560.html</anchorfile>
      <anchor>ac89ea920394cd12d23ef576745351ee5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Values</name>
      <anchorfile>a04560.html</anchorfile>
      <anchor>a42d680607104698e3ec00c50bdb2021e</anchor>
      <arglist>(const Values &amp;other)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Values</name>
      <anchorfile>a04560.html</anchorfile>
      <anchor>ac5c8b8dc8da9bef437922f3bbe183dc4</anchor>
      <arglist>(Values &amp;&amp;other)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Values</name>
      <anchorfile>a04560.html</anchorfile>
      <anchor>a469ab341a20b38c82b9d5170b63c1a08</anchor>
      <arglist>(std::initializer_list&lt; ConstKeyValuePair &gt; init)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Values</name>
      <anchorfile>a04560.html</anchorfile>
      <anchor>afe14ed7307bdca1c4fe410e44f0edda2</anchor>
      <arglist>(const Values &amp;other, const VectorValues &amp;delta)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Values</name>
      <anchorfile>a04560.html</anchorfile>
      <anchor>adb659e595951677d69b6f2f4f88b6b57</anchor>
      <arglist>(const Filtered&lt; ValueType &gt; &amp;view)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Values</name>
      <anchorfile>a04560.html</anchorfile>
      <anchor>ac698795ad2e3bd3d5acfd92bfea20ae7</anchor>
      <arglist>(const ConstFiltered&lt; ValueType &gt; &amp;view)</arglist>
    </member>
    <member kind="function">
      <type>const ValueType</type>
      <name>at</name>
      <anchorfile>a04560.html</anchorfile>
      <anchor>a5a5e9e0a8fd8b556bf74a54c31b90432</anchor>
      <arglist>(Key j) const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>atDouble</name>
      <anchorfile>a04560.html</anchorfile>
      <anchor>aee1cbebdc16aff872a1827762ebd80be</anchor>
      <arglist>(size_t key) const</arglist>
    </member>
    <member kind="function">
      <type>const Value &amp;</type>
      <name>at</name>
      <anchorfile>a04560.html</anchorfile>
      <anchor>a119d98d50afe1031c823c14945623bd6</anchor>
      <arglist>(Key j) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>exists</name>
      <anchorfile>a04560.html</anchorfile>
      <anchor>aa98aa2ca89fcc97792a9f8e9257abf5a</anchor>
      <arglist>(Key j) const</arglist>
    </member>
    <member kind="function">
      <type>boost::optional&lt; const ValueType &amp; &gt;</type>
      <name>exists</name>
      <anchorfile>a04560.html</anchorfile>
      <anchor>ad02437de30deb4608d6f6bb2fbc7ae77</anchor>
      <arglist>(Key j) const</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>find</name>
      <anchorfile>a04560.html</anchorfile>
      <anchor>a981545f725c25709db8f2cb394b190a6</anchor>
      <arglist>(Key j)</arglist>
    </member>
    <member kind="function">
      <type>const_iterator</type>
      <name>find</name>
      <anchorfile>a04560.html</anchorfile>
      <anchor>a66cd05ac88320e2c229b1307c9466936</anchor>
      <arglist>(Key j) const</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>lower_bound</name>
      <anchorfile>a04560.html</anchorfile>
      <anchor>adc3ab6193944103355a4e71b6b2a9a63</anchor>
      <arglist>(Key j)</arglist>
    </member>
    <member kind="function">
      <type>const_iterator</type>
      <name>lower_bound</name>
      <anchorfile>a04560.html</anchorfile>
      <anchor>a6c0e1e9f7fe8abfe3470cb11b2436bbe</anchor>
      <arglist>(Key j) const</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>upper_bound</name>
      <anchorfile>a04560.html</anchorfile>
      <anchor>a106a1809a5e32684aaf1ea7b6cdfe6d3</anchor>
      <arglist>(Key j)</arglist>
    </member>
    <member kind="function">
      <type>const_iterator</type>
      <name>upper_bound</name>
      <anchorfile>a04560.html</anchorfile>
      <anchor>a2622ce485b061210d91a1e6ac81de99c</anchor>
      <arglist>(Key j) const</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>size</name>
      <anchorfile>a04560.html</anchorfile>
      <anchor>a7a174b26fa9c7fa5ad7fbfadae99390a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>empty</name>
      <anchorfile>a04560.html</anchorfile>
      <anchor>a0a6b67fe6491eb4a14d3470b0869eb76</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>insert</name>
      <anchorfile>a04560.html</anchorfile>
      <anchor>a79059464a7c6ed07fc862acc9e7b57ce</anchor>
      <arglist>(Key j, const Value &amp;val)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>insert</name>
      <anchorfile>a04560.html</anchorfile>
      <anchor>ac9e64bbe570c986d3d31c43813f78df1</anchor>
      <arglist>(const Values &amp;values)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>insert</name>
      <anchorfile>a04560.html</anchorfile>
      <anchor>acea3a5fcb82973569717724de756ed4c</anchor>
      <arglist>(Key j, const ValueType &amp;val)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>insertDouble</name>
      <anchorfile>a04560.html</anchorfile>
      <anchor>a75203d418b4b3ab001d600e96654aceb</anchor>
      <arglist>(Key j, double c)</arglist>
    </member>
    <member kind="function">
      <type>std::pair&lt; iterator, bool &gt;</type>
      <name>tryInsert</name>
      <anchorfile>a04560.html</anchorfile>
      <anchor>a47bf2a64ee131889b02049b242640226</anchor>
      <arglist>(Key j, const Value &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>update</name>
      <anchorfile>a04560.html</anchorfile>
      <anchor>ae6ebf1135353767eb2e2d93b14103a73</anchor>
      <arglist>(Key j, const Value &amp;val)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>update</name>
      <anchorfile>a04560.html</anchorfile>
      <anchor>a0200bffce697c286e3b25423cd6d2dc6</anchor>
      <arglist>(Key j, const T &amp;val)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>update</name>
      <anchorfile>a04560.html</anchorfile>
      <anchor>a72c58892f5f8f79ee8c7e117266be625</anchor>
      <arglist>(const Values &amp;values)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>erase</name>
      <anchorfile>a04560.html</anchorfile>
      <anchor>ad75147b6a76d80763b02150eeb6b3c67</anchor>
      <arglist>(Key j)</arglist>
    </member>
    <member kind="function">
      <type>KeyVector</type>
      <name>keys</name>
      <anchorfile>a04560.html</anchorfile>
      <anchor>a6e14bd05d2fd3b923d6f3197f4b04f7e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Values &amp;</type>
      <name>operator=</name>
      <anchorfile>a04560.html</anchorfile>
      <anchor>a58cb43149f15172352bf89f05405609e</anchor>
      <arglist>(const Values &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>swap</name>
      <anchorfile>a04560.html</anchorfile>
      <anchor>a70892957dca2e0587692b6a9de5086c3</anchor>
      <arglist>(Values &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>a04560.html</anchorfile>
      <anchor>a5e547bfb256c5df17398d3ef9eed183e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>dim</name>
      <anchorfile>a04560.html</anchorfile>
      <anchor>a73275fc0c6593ddb0eac05d665976ed0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>VectorValues</type>
      <name>zeroVectors</name>
      <anchorfile>a04560.html</anchorfile>
      <anchor>a352f0be2f8a3e1386ee5c9254d347019</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Filtered&lt; Value &gt;</type>
      <name>filter</name>
      <anchorfile>a04560.html</anchorfile>
      <anchor>ae99411eaa77877b936005284f4b0b2b3</anchor>
      <arglist>(const std::function&lt; bool(Key)&gt; &amp;filterFcn)</arglist>
    </member>
    <member kind="function">
      <type>Filtered&lt; ValueType &gt;</type>
      <name>filter</name>
      <anchorfile>a04560.html</anchorfile>
      <anchor>a40a7aa4955714b9a36d83cbf3ef8a4d8</anchor>
      <arglist>(const std::function&lt; bool(Key)&gt; &amp;filterFcn=&amp;_truePredicate&lt; Key &gt;)</arglist>
    </member>
    <member kind="function">
      <type>ConstFiltered&lt; Value &gt;</type>
      <name>filter</name>
      <anchorfile>a04560.html</anchorfile>
      <anchor>a77d4d5a0fe8fa063fb7c3038321f74cb</anchor>
      <arglist>(const std::function&lt; bool(Key)&gt; &amp;filterFcn) const</arglist>
    </member>
    <member kind="function">
      <type>ConstFiltered&lt; ValueType &gt;</type>
      <name>filter</name>
      <anchorfile>a04560.html</anchorfile>
      <anchor>a34310accd69f8ee41bdb0abf68d9c081</anchor>
      <arglist>(const std::function&lt; bool(Key)&gt; &amp;filterFcn=&amp;_truePredicate&lt; Key &gt;) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>a04560.html</anchorfile>
      <anchor>a046f4df94f53d9db536b2e0e57ffe6f3</anchor>
      <arglist>(const std::string &amp;str=&quot;&quot;, const KeyFormatter &amp;keyFormatter=DefaultKeyFormatter) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>equals</name>
      <anchorfile>a04560.html</anchorfile>
      <anchor>a920e8f63ea4bd5fc9f0818842e508556</anchor>
      <arglist>(const Values &amp;other, double tol=1e-9) const</arglist>
    </member>
    <member kind="function">
      <type>Values</type>
      <name>retract</name>
      <anchorfile>a04560.html</anchorfile>
      <anchor>a9b256edadb21fd362c185781e734a9f9</anchor>
      <arglist>(const VectorValues &amp;delta) const</arglist>
    </member>
    <member kind="function">
      <type>VectorValues</type>
      <name>localCoordinates</name>
      <anchorfile>a04560.html</anchorfile>
      <anchor>a32fc6f408d625df658f4b14124b73d1b</anchor>
      <arglist>(const Values &amp;cp) const</arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; Values &gt;</type>
      <name>shared_ptr</name>
      <anchorfile>a04560.html</anchorfile>
      <anchor>a5b2f07b6054d9ea06b28876a057938d1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; const Values &gt;</type>
      <name>const_shared_ptr</name>
      <anchorfile>a04560.html</anchorfile>
      <anchor>ab252aa072e35ebbbb614ebc51167f7d5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::transform_iterator&lt; std::function&lt; KeyValuePair(const KeyValuePtrPair &amp;)&gt;, KeyValueMap::iterator &gt;</type>
      <name>iterator</name>
      <anchorfile>a04560.html</anchorfile>
      <anchor>ae7c87572603e783cc17bd695ddf8ff29</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::transform_iterator&lt; std::function&lt; ConstKeyValuePair(const ConstKeyValuePtrPair &amp;)&gt;, KeyValueMap::const_iterator &gt;</type>
      <name>const_iterator</name>
      <anchorfile>a04560.html</anchorfile>
      <anchor>a5013518a292151e53aad94a1a113a6de</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::transform_iterator&lt; std::function&lt; KeyValuePair(const KeyValuePtrPair &amp;)&gt;, KeyValueMap::reverse_iterator &gt;</type>
      <name>reverse_iterator</name>
      <anchorfile>a04560.html</anchorfile>
      <anchor>a43fd9c4271a97a84468e362335cc75d0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::transform_iterator&lt; std::function&lt; ConstKeyValuePair(const ConstKeyValuePtrPair &amp;)&gt;, KeyValueMap::const_reverse_iterator &gt;</type>
      <name>const_reverse_iterator</name>
      <anchorfile>a04560.html</anchorfile>
      <anchor>a6ddc9f0d590b63f08f26830cb139b4ac</anchor>
      <arglist></arglist>
    </member>
    <class kind="class">gtsam::Values::ConstFiltered</class>
    <class kind="struct">gtsam::Values::ConstKeyValuePair</class>
    <class kind="class">gtsam::Values::Filtered</class>
    <class kind="struct">gtsam::Values::KeyValuePair</class>
    <member kind="friend">
      <type>friend class</type>
      <name>boost::serialization::access</name>
      <anchorfile>a04560.html</anchorfile>
      <anchor>ac98d07dd8f7b70e16ccb9a01abf56b9c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>gtsam::ValuesCastHelper</name>
    <filename>a04516.html</filename>
    <templarg>class ValueType</templarg>
    <templarg>class CastedKeyValuePairType</templarg>
    <templarg>class KeyValuePairType</templarg>
  </compound>
  <compound kind="struct">
    <name>gtsam::ValuesCastHelper&lt; const Value, CastedKeyValuePairType, KeyValuePairType &gt;</name>
    <filename>a04524.html</filename>
    <templarg>class CastedKeyValuePairType</templarg>
    <templarg>class KeyValuePairType</templarg>
  </compound>
  <compound kind="struct">
    <name>gtsam::ValuesCastHelper&lt; Value, CastedKeyValuePairType, KeyValuePairType &gt;</name>
    <filename>a04520.html</filename>
    <templarg>class CastedKeyValuePairType</templarg>
    <templarg>class KeyValuePairType</templarg>
  </compound>
  <compound kind="class">
    <name>gtsam::ValuesIncorrectType</name>
    <filename>a04580.html</filename>
    <member kind="function">
      <type></type>
      <name>ValuesIncorrectType</name>
      <anchorfile>a04580.html</anchorfile>
      <anchor>a880882802e51b570132ac2eceee3ac1a</anchor>
      <arglist>(Key key, const std::type_info &amp;storedTypeId, const std::type_info &amp;requestedTypeId) noexcept</arglist>
    </member>
    <member kind="function">
      <type>Key</type>
      <name>key</name>
      <anchorfile>a04580.html</anchorfile>
      <anchor>a44a4c94d77ad8ffb01cd0689efa3ddfe</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>const std::type_info &amp;</type>
      <name>storedTypeId</name>
      <anchorfile>a04580.html</anchorfile>
      <anchor>a20a8da2172f95796a00469b9fc6e29ff</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const std::type_info &amp;</type>
      <name>requestedTypeId</name>
      <anchorfile>a04580.html</anchorfile>
      <anchor>af5d47c3bd130f6e6ba2ed9ef12787938</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>GTSAM_EXPORT const char *</type>
      <name>what</name>
      <anchorfile>a04580.html</anchorfile>
      <anchor>a147349a2428365bcc4f9dea6b14355d4</anchor>
      <arglist>() const noexcept override</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const Key</type>
      <name>key_</name>
      <anchorfile>a04580.html</anchorfile>
      <anchor>a6303f8c7ce66e97c3107fd4f6cf24d28</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::ValuesKeyAlreadyExists</name>
    <filename>a04572.html</filename>
    <member kind="function">
      <type></type>
      <name>ValuesKeyAlreadyExists</name>
      <anchorfile>a04572.html</anchorfile>
      <anchor>a7b946c299f28d6507fe9f3408383c4dd</anchor>
      <arglist>(Key key) noexcept</arglist>
    </member>
    <member kind="function">
      <type>Key</type>
      <name>key</name>
      <anchorfile>a04572.html</anchorfile>
      <anchor>ad4f148e77a4c94f36ab8e190acf93b73</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>GTSAM_EXPORT const char *</type>
      <name>what</name>
      <anchorfile>a04572.html</anchorfile>
      <anchor>a78a51f5c178833f7e0e9cb856a439a98</anchor>
      <arglist>() const noexcept override</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const Key</type>
      <name>key_</name>
      <anchorfile>a04572.html</anchorfile>
      <anchor>a5c2ccda4c15caefd91d0308d8b76eb53</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::ValuesKeyDoesNotExist</name>
    <filename>a04576.html</filename>
    <member kind="function">
      <type></type>
      <name>ValuesKeyDoesNotExist</name>
      <anchorfile>a04576.html</anchorfile>
      <anchor>a2427e01ada0f95643125d2231afbdfb8</anchor>
      <arglist>(const char *operation, Key key) noexcept</arglist>
    </member>
    <member kind="function">
      <type>Key</type>
      <name>key</name>
      <anchorfile>a04576.html</anchorfile>
      <anchor>a58b1edd7ddc0c65ff6af070ef79ccc88</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>GTSAM_EXPORT const char *</type>
      <name>what</name>
      <anchorfile>a04576.html</anchorfile>
      <anchor>a51b856714ddd14a0b8110834273b8c41</anchor>
      <arglist>() const noexcept override</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const char *</type>
      <name>operation_</name>
      <anchorfile>a04576.html</anchorfile>
      <anchor>afe3dbeaa3cc012754d8359a1e517a5a2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const Key</type>
      <name>key_</name>
      <anchorfile>a04576.html</anchorfile>
      <anchor>a433f387db342dfb0b25c7438fa42f58c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>gtsam::ValueWithDefault</name>
    <filename>a02716.html</filename>
    <templarg>typename T</templarg>
    <templarg>T defaultValue</templarg>
    <member kind="function">
      <type></type>
      <name>ValueWithDefault</name>
      <anchorfile>a02716.html</anchorfile>
      <anchor>a530bf5ddc21562989ee4427ef44e520b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ValueWithDefault</name>
      <anchorfile>a02716.html</anchorfile>
      <anchor>a54bbbf7380c6a54aa696a8a7fe803f0e</anchor>
      <arglist>(const T &amp;_value)</arglist>
    </member>
    <member kind="function">
      <type>T &amp;</type>
      <name>operator*</name>
      <anchorfile>a02716.html</anchorfile>
      <anchor>a0b891b92eae0f946f0dce5892f6b74d3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const T &amp;</type>
      <name>operator*</name>
      <anchorfile>a02716.html</anchorfile>
      <anchor>a422ed00f49aca034422716e3e8e345bf</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator T</name>
      <anchorfile>a02716.html</anchorfile>
      <anchor>a1d5b519ce1a722e763407563a39dfdd3</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::VariableIndex</name>
    <filename>a03652.html</filename>
    <member kind="friend">
      <type>friend class</type>
      <name>boost::serialization::access</name>
      <anchorfile>a03652.html</anchorfile>
      <anchor>ac98d07dd8f7b70e16ccb9a01abf56b9c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>augment</name>
      <anchorfile>a03652.html</anchorfile>
      <anchor>aedf0942d75479fc6ce0ed9166c9a3f82</anchor>
      <arglist>(const FG &amp;factors, boost::optional&lt; const FactorIndices &amp; &gt; newFactorIndices=boost::none)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>augmentExistingFactor</name>
      <anchorfile>a03652.html</anchorfile>
      <anchor>abc7db49d64ddfd7a946bd4d349cb785f</anchor>
      <arglist>(const FactorIndex factorIndex, const KeySet &amp;newKeys)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>remove</name>
      <anchorfile>a03652.html</anchorfile>
      <anchor>a4094920c9d0ce534ff3d8a953730f09b</anchor>
      <arglist>(ITERATOR firstFactor, ITERATOR lastFactor, const FG &amp;factors)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeUnusedVariables</name>
      <anchorfile>a03652.html</anchorfile>
      <anchor>adba150211d074457621ace80632a0267</anchor>
      <arglist>(ITERATOR firstKey, ITERATOR lastKey)</arglist>
    </member>
    <member kind="function">
      <type>const_iterator</type>
      <name>begin</name>
      <anchorfile>a03652.html</anchorfile>
      <anchor>a50a87dee69788ba684075cdee8d09719</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const_iterator</type>
      <name>end</name>
      <anchorfile>a03652.html</anchorfile>
      <anchor>ad09ff18e34330ec023386a8d46dc6caf</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const_iterator</type>
      <name>find</name>
      <anchorfile>a03652.html</anchorfile>
      <anchor>a56ed25e46e57f984ff70554371bc6bf9</anchor>
      <arglist>(Key key) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>const FactorIndices &amp;</type>
      <name>internalAt</name>
      <anchorfile>a03652.html</anchorfile>
      <anchor>a11479e896e15a83a49e9888c8a9f8ae3</anchor>
      <arglist>(Key variable) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>FactorIndices &amp;</type>
      <name>internalAt</name>
      <anchorfile>a03652.html</anchorfile>
      <anchor>a820c6f5b0f83a1303d35dac9fd33a0a9</anchor>
      <arglist>(Key variable)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>VariableIndex</name>
      <anchorfile>a03652.html</anchorfile>
      <anchor>af85147163ce24cb4db4505471440402c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>VariableIndex</name>
      <anchorfile>a03652.html</anchorfile>
      <anchor>a79bebdf9292c00135d5605fe38319142</anchor>
      <arglist>(const FG &amp;factorGraph)</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>size</name>
      <anchorfile>a03652.html</anchorfile>
      <anchor>a7e83a7dee6daaa33da9d69b34e5426f4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>nFactors</name>
      <anchorfile>a03652.html</anchorfile>
      <anchor>aff88eee65d8bcf51062cd99a1ae90977</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>nEntries</name>
      <anchorfile>a03652.html</anchorfile>
      <anchor>a2af38862502064df2169a7d5b623a8c3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const FactorIndices &amp;</type>
      <name>operator[]</name>
      <anchorfile>a03652.html</anchorfile>
      <anchor>a62c0610e8960b3d7c077a90e2acf8a00</anchor>
      <arglist>(Key variable) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>empty</name>
      <anchorfile>a03652.html</anchorfile>
      <anchor>a7dba7c396a250716ed9ede2b1ac7e384</anchor>
      <arglist>(Key variable) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>equals</name>
      <anchorfile>a03652.html</anchorfile>
      <anchor>a792ee68c3840fb9cc8019841c7e9e677</anchor>
      <arglist>(const VariableIndex &amp;other, double tol=0.0) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>a03652.html</anchorfile>
      <anchor>a5a0b5d62298677a730c179c8837f0834</anchor>
      <arglist>(const std::string &amp;str=&quot;VariableIndex: &quot;, const KeyFormatter &amp;keyFormatter=DefaultKeyFormatter) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>outputMetisFormat</name>
      <anchorfile>a03652.html</anchorfile>
      <anchor>a191a7a81a1bb41196315a5889cb7e820</anchor>
      <arglist>(std::ostream &amp;os) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::VariableSlots</name>
    <filename>a03660.html</filename>
    <base>FastMap&lt; Key, FastVector&lt; size_t &gt; &gt;</base>
    <member kind="function">
      <type></type>
      <name>VariableSlots</name>
      <anchorfile>a03660.html</anchorfile>
      <anchor>acd98bd86878e8c5c9596c929439c0a4c</anchor>
      <arglist>(const FG &amp;factorGraph)</arglist>
    </member>
    <member kind="function">
      <type>GTSAM_EXPORT void</type>
      <name>print</name>
      <anchorfile>a03660.html</anchorfile>
      <anchor>a6dff67f5fe6b5d92e2a8f57f71afaee0</anchor>
      <arglist>(const std::string &amp;str=&quot;VariableSlots: &quot;) const</arglist>
    </member>
    <member kind="function">
      <type>GTSAM_EXPORT bool</type>
      <name>equals</name>
      <anchorfile>a03660.html</anchorfile>
      <anchor>a814f82c979a1b5f3b93339d17e86d145</anchor>
      <arglist>(const VariableSlots &amp;rhs, double tol=0.0) const</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>gtsam::ISAM2Result::DetailedResults::VariableStatus</name>
    <filename>a04372.html</filename>
    <member kind="variable">
      <type>bool</type>
      <name>isReeliminated</name>
      <anchorfile>a04372.html</anchorfile>
      <anchor>a67d788b600237f67b188f30e8f4fd124</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>isAboveRelinThreshold</name>
      <anchorfile>a04372.html</anchorfile>
      <anchor>a56611177d7b321070f779f35cb63cd16</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>isRelinearizeInvolved</name>
      <anchorfile>a04372.html</anchorfile>
      <anchor>a32f8f901efa181cc9afd45e6b3739f05</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>isObserved</name>
      <anchorfile>a04372.html</anchorfile>
      <anchor>a3bc9383714196de8f55921f11114f0ee</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>isNew</name>
      <anchorfile>a04372.html</anchorfile>
      <anchor>a4b92b1d5ff516b37acfbc42d619579bb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>inRootClique</name>
      <anchorfile>a04372.html</anchorfile>
      <anchor>a7318063c0257369484ba51e21c90b86f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>gtsam::vector_space_tag</name>
    <filename>a02744.html</filename>
    <base>gtsam::lie_group_tag</base>
  </compound>
  <compound kind="class">
    <name>gtsam::VectorComponentFactor</name>
    <filename>a02856.html</filename>
    <templarg>class BASIS</templarg>
    <templarg>size_t P</templarg>
    <base>FunctorizedFactor&lt; double, ParameterMatrix&lt; P &gt; &gt;</base>
    <member kind="function">
      <type></type>
      <name>VectorComponentFactor</name>
      <anchorfile>a02856.html</anchorfile>
      <anchor>ae91c593c61da33df6ecc5a714ecafbe4</anchor>
      <arglist>(Key key, const double &amp;z, const SharedNoiseModel &amp;model, const size_t N, size_t i, double x)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>VectorComponentFactor</name>
      <anchorfile>a02856.html</anchorfile>
      <anchor>a3340a699b1a3239fe86568d0ce14277e</anchor>
      <arglist>(Key key, const double &amp;z, const SharedNoiseModel &amp;model, const size_t N, size_t i, double x, double a, double b)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::Basis::VectorComponentFunctor</name>
    <filename>a02824.html</filename>
    <templarg>int M</templarg>
    <base>gtsam::Basis::EvaluationFunctor</base>
    <member kind="function">
      <type></type>
      <name>VectorComponentFunctor</name>
      <anchorfile>a02824.html</anchorfile>
      <anchor>a439378326368f095c983293468efde0f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>VectorComponentFunctor</name>
      <anchorfile>a02824.html</anchorfile>
      <anchor>a47f859778c2ff726a36a77f30c54245a</anchor>
      <arglist>(size_t N, size_t i, double x)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>VectorComponentFunctor</name>
      <anchorfile>a02824.html</anchorfile>
      <anchor>a76106c612c5f6c1d804b0aed293c2257</anchor>
      <arglist>(size_t N, size_t i, double x, double a, double b)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>apply</name>
      <anchorfile>a02824.html</anchorfile>
      <anchor>ad0395366d4d841815e1fafdb1b7edfcc</anchor>
      <arglist>(const ParameterMatrix&lt; M &gt; &amp;P, OptionalJacobian&lt; -1, -1 &gt; H=boost::none) const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>operator()</name>
      <anchorfile>a02824.html</anchorfile>
      <anchor>a3ca004921a6b017c1ef202393d50a550</anchor>
      <arglist>(const ParameterMatrix&lt; M &gt; &amp;P, OptionalJacobian&lt; -1, -1 &gt; H=boost::none) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::VectorDerivativeFactor</name>
    <filename>a02868.html</filename>
    <templarg>class BASIS</templarg>
    <templarg>int M</templarg>
    <base>FunctorizedFactor&lt; Vector, ParameterMatrix&lt; M &gt; &gt;</base>
    <member kind="function">
      <type></type>
      <name>VectorDerivativeFactor</name>
      <anchorfile>a02868.html</anchorfile>
      <anchor>a070fbf65f69e5910a48d0e1f32454e96</anchor>
      <arglist>(Key key, const Vector &amp;z, const SharedNoiseModel &amp;model, const size_t N, double x)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>VectorDerivativeFactor</name>
      <anchorfile>a02868.html</anchorfile>
      <anchor>a5ecb602f1367e1b4d10b3ea0fbd2ce30</anchor>
      <arglist>(Key key, const Vector &amp;z, const SharedNoiseModel &amp;model, const size_t N, double x, double a, double b)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::Basis::VectorDerivativeFunctor</name>
    <filename>a02840.html</filename>
    <templarg>int M</templarg>
    <base protection="protected">gtsam::Basis::DerivativeFunctorBase</base>
    <member kind="function">
      <type>EIGEN_MAKE_ALIGNED_OPERATOR_NEW</type>
      <name>VectorDerivativeFunctor</name>
      <anchorfile>a02840.html</anchorfile>
      <anchor>a67ff7dbc627c6538d0e84b01171b77cf</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>VectorDerivativeFunctor</name>
      <anchorfile>a02840.html</anchorfile>
      <anchor>a837a3739b7031f687ed6e8108a15f278</anchor>
      <arglist>(size_t N, double x)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>VectorDerivativeFunctor</name>
      <anchorfile>a02840.html</anchorfile>
      <anchor>a2885b9d219b7e69f404818ed83052e76</anchor>
      <arglist>(size_t N, double x, double a, double b)</arglist>
    </member>
    <member kind="function">
      <type>VectorM</type>
      <name>operator()</name>
      <anchorfile>a02840.html</anchorfile>
      <anchor>a54430281dd793c9e1b6bdb78cd5b7f46</anchor>
      <arglist>(const ParameterMatrix&lt; M &gt; &amp;P, OptionalJacobian&lt; -1, -1 &gt; H=boost::none) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>calculateJacobian</name>
      <anchorfile>a02840.html</anchorfile>
      <anchor>a046369081a561bc6bbe0f2b4523eb1d1</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::VectorEvaluationFactor</name>
    <filename>a02852.html</filename>
    <templarg>class BASIS</templarg>
    <templarg>int M</templarg>
    <base>FunctorizedFactor&lt; Vector, ParameterMatrix&lt; M &gt; &gt;</base>
    <member kind="function">
      <type></type>
      <name>VectorEvaluationFactor</name>
      <anchorfile>a02852.html</anchorfile>
      <anchor>a6a30b0cb53f4eee3e825daf786f2599f</anchor>
      <arglist>(Key key, const Vector &amp;z, const SharedNoiseModel &amp;model, const size_t N, double x)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>VectorEvaluationFactor</name>
      <anchorfile>a02852.html</anchorfile>
      <anchor>a0240ccf60e4f9cb6989babfa6754de57</anchor>
      <arglist>(Key key, const Vector &amp;z, const SharedNoiseModel &amp;model, const size_t N, double x, double a, double b)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::Basis::VectorEvaluationFunctor</name>
    <filename>a02820.html</filename>
    <templarg>int M</templarg>
    <base protection="protected">gtsam::Basis::EvaluationFunctor</base>
    <member kind="function">
      <type>EIGEN_MAKE_ALIGNED_OPERATOR_NEW</type>
      <name>VectorEvaluationFunctor</name>
      <anchorfile>a02820.html</anchorfile>
      <anchor>a4eee610c6d82dea4966c101bd952a9f9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>VectorEvaluationFunctor</name>
      <anchorfile>a02820.html</anchorfile>
      <anchor>a6c73f0d957f5774db2f68bacc8824739</anchor>
      <arglist>(size_t N, double x)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>VectorEvaluationFunctor</name>
      <anchorfile>a02820.html</anchorfile>
      <anchor>a3003b704f06bf01bcc4e4b22732ed3e9</anchor>
      <arglist>(size_t N, double x, double a, double b)</arglist>
    </member>
    <member kind="function">
      <type>VectorM</type>
      <name>apply</name>
      <anchorfile>a02820.html</anchorfile>
      <anchor>ae4689ccad89912972c47c0cedfc80cac</anchor>
      <arglist>(const ParameterMatrix&lt; M &gt; &amp;P, OptionalJacobian&lt; -1, -1 &gt; H=boost::none) const</arglist>
    </member>
    <member kind="function">
      <type>VectorM</type>
      <name>operator()</name>
      <anchorfile>a02820.html</anchorfile>
      <anchor>ae21f06f37fb715aacad7d33ae85fcf80</anchor>
      <arglist>(const ParameterMatrix&lt; M &gt; &amp;P, OptionalJacobian&lt; -1, -1 &gt; H=boost::none) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>calculateJacobian</name>
      <anchorfile>a02820.html</anchorfile>
      <anchor>a81e42ab8abecdc4b0f9d1bb78d55a735</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>gtsam::internal::VectorSpace</name>
    <filename>a02764.html</filename>
    <templarg>class Class</templarg>
    <base>Testable&lt; Class &gt;</base>
    <base>gtsam::internal::VectorSpaceTraits</base>
  </compound>
  <compound kind="struct">
    <name>gtsam::internal::VectorSpaceImpl</name>
    <filename>a02748.html</filename>
    <templarg>class Class</templarg>
    <templarg>int N</templarg>
  </compound>
  <compound kind="struct">
    <name>gtsam::internal::VectorSpaceImpl&lt; Class, Eigen::Dynamic &gt;</name>
    <filename>a02752.html</filename>
    <templarg>class Class</templarg>
  </compound>
  <compound kind="struct">
    <name>gtsam::internal::VectorSpaceTraits</name>
    <filename>a02760.html</filename>
    <templarg>class Class</templarg>
    <base>VectorSpaceImpl&lt; Class, Class::dimension &gt;</base>
  </compound>
  <compound kind="class">
    <name>gtsam::VectorValues</name>
    <filename>a04016.html</filename>
    <member kind="friend">
      <type>GTSAM_EXPORT friend std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a04016.html</anchorfile>
      <anchor>a054052975a64c37060c1af56385edd17</anchor>
      <arglist>(std::ostream &amp;, const VectorValues &amp;)</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>size</name>
      <anchorfile>a04016.html</anchorfile>
      <anchor>a6c3f7a36fa68c97d2917864dff20b1c6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>dim</name>
      <anchorfile>a04016.html</anchorfile>
      <anchor>a677694d125aaa594bfb6f6140937eb9a</anchor>
      <arglist>(Key j) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>exists</name>
      <anchorfile>a04016.html</anchorfile>
      <anchor>a8e544106b444d50692f71b9af5e2fc0b</anchor>
      <arglist>(Key j) const</arglist>
    </member>
    <member kind="function">
      <type>Vector &amp;</type>
      <name>at</name>
      <anchorfile>a04016.html</anchorfile>
      <anchor>ae6001983487246c450a50f2e50817c50</anchor>
      <arglist>(Key j)</arglist>
    </member>
    <member kind="function">
      <type>const Vector &amp;</type>
      <name>at</name>
      <anchorfile>a04016.html</anchorfile>
      <anchor>ab90e73cc6dfde2fae156a45de891dcc4</anchor>
      <arglist>(Key j) const</arglist>
    </member>
    <member kind="function">
      <type>Vector &amp;</type>
      <name>operator[]</name>
      <anchorfile>a04016.html</anchorfile>
      <anchor>a546a88b4eaddfd11f4952d29c5219a1f</anchor>
      <arglist>(Key j)</arglist>
    </member>
    <member kind="function">
      <type>const Vector &amp;</type>
      <name>operator[]</name>
      <anchorfile>a04016.html</anchorfile>
      <anchor>a6c6e5de9f8a2d5c465ca1d11e78d5411</anchor>
      <arglist>(Key j) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>update</name>
      <anchorfile>a04016.html</anchorfile>
      <anchor>ae4c1243d76f1afd38159ef1a2a83efac</anchor>
      <arglist>(const VectorValues &amp;values)</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>insert</name>
      <anchorfile>a04016.html</anchorfile>
      <anchor>ab61f86ba410bf0e56154f8e05a07150e</anchor>
      <arglist>(const std::pair&lt; Key, Vector &gt; &amp;key_value)</arglist>
    </member>
    <member kind="function">
      <type>std::pair&lt; VectorValues::iterator, bool &gt;</type>
      <name>emplace</name>
      <anchorfile>a04016.html</anchorfile>
      <anchor>a6109ac0252bed2254fffc76ebf7e32ca</anchor>
      <arglist>(Key j, Args &amp;&amp;... args)</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>insert</name>
      <anchorfile>a04016.html</anchorfile>
      <anchor>a20f660c72a5a9102103f4063034f6ed8</anchor>
      <arglist>(Key j, const Vector &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>insert</name>
      <anchorfile>a04016.html</anchorfile>
      <anchor>af6c435542f491fd89b51b7ac561a5d6b</anchor>
      <arglist>(const VectorValues &amp;values)</arglist>
    </member>
    <member kind="function">
      <type>std::pair&lt; iterator, bool &gt;</type>
      <name>tryInsert</name>
      <anchorfile>a04016.html</anchorfile>
      <anchor>af8ae72f3a885ed1d1db573dc82adae2a</anchor>
      <arglist>(Key j, const Vector &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>erase</name>
      <anchorfile>a04016.html</anchorfile>
      <anchor>af1014395c6fc9e2e20bc75032a9060d2</anchor>
      <arglist>(Key var)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setZero</name>
      <anchorfile>a04016.html</anchorfile>
      <anchor>a7a6c7c7af4d7459d2927ab0e137bd1cc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>begin</name>
      <anchorfile>a04016.html</anchorfile>
      <anchor>afe41ec06f1b4f6d7cb2a6236f9d872f8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const_iterator</type>
      <name>begin</name>
      <anchorfile>a04016.html</anchorfile>
      <anchor>ae15b59729aa65d6466c512dcd157c7f1</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>end</name>
      <anchorfile>a04016.html</anchorfile>
      <anchor>a168c3a8ee35c956ccb3b46103393919d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const_iterator</type>
      <name>end</name>
      <anchorfile>a04016.html</anchorfile>
      <anchor>a0dc9a42438eb7076061e08121ce6e9b0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>find</name>
      <anchorfile>a04016.html</anchorfile>
      <anchor>a6128bde222279e86c8848887d7f75ee5</anchor>
      <arglist>(Key j)</arglist>
    </member>
    <member kind="function">
      <type>const_iterator</type>
      <name>find</name>
      <anchorfile>a04016.html</anchorfile>
      <anchor>a9a8baa0999f2318af8b481ddc1d784f2</anchor>
      <arglist>(Key j) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>a04016.html</anchorfile>
      <anchor>a8fdbdd87e59bd497799b205699fee237</anchor>
      <arglist>(const std::string &amp;str=&quot;VectorValues&quot;, const KeyFormatter &amp;formatter=DefaultKeyFormatter) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>equals</name>
      <anchorfile>a04016.html</anchorfile>
      <anchor>a038e0afd59e854664d41017fe631110d</anchor>
      <arglist>(const VectorValues &amp;x, double tol=1e-9) const</arglist>
    </member>
    <member kind="friend">
      <type>friend GTSAM_EXPORT VectorValues</type>
      <name>operator*</name>
      <anchorfile>a04016.html</anchorfile>
      <anchor>a35e8a1e6975a4a35751e8ba0541d7ec8</anchor>
      <arglist>(const double a, const VectorValues &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>dot</name>
      <anchorfile>a04016.html</anchorfile>
      <anchor>aec8866877ad4757a3392f0159ba9da24</anchor>
      <arglist>(const VectorValues &amp;v) const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>norm</name>
      <anchorfile>a04016.html</anchorfile>
      <anchor>a89ed96f26a7d2db25c0a0e072650f913</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>squaredNorm</name>
      <anchorfile>a04016.html</anchorfile>
      <anchor>a9b92791d5a3e2ef255193268166157fc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>VectorValues</type>
      <name>operator+</name>
      <anchorfile>a04016.html</anchorfile>
      <anchor>a03529640c47352fe4849d04cb1134f97</anchor>
      <arglist>(const VectorValues &amp;c) const</arglist>
    </member>
    <member kind="function">
      <type>VectorValues</type>
      <name>add</name>
      <anchorfile>a04016.html</anchorfile>
      <anchor>ae6c9f9dd27e186342fbadbb1216948fb</anchor>
      <arglist>(const VectorValues &amp;c) const</arglist>
    </member>
    <member kind="function">
      <type>VectorValues &amp;</type>
      <name>operator+=</name>
      <anchorfile>a04016.html</anchorfile>
      <anchor>a35cd083b28f1ac519b4d8560cd1c7c01</anchor>
      <arglist>(const VectorValues &amp;c)</arglist>
    </member>
    <member kind="function">
      <type>VectorValues &amp;</type>
      <name>addInPlace</name>
      <anchorfile>a04016.html</anchorfile>
      <anchor>a5b7e8caf95ecc54f401bb15b44b31163</anchor>
      <arglist>(const VectorValues &amp;c)</arglist>
    </member>
    <member kind="function">
      <type>VectorValues &amp;</type>
      <name>addInPlace_</name>
      <anchorfile>a04016.html</anchorfile>
      <anchor>a113286dd175a65f67732cd46c0badf66</anchor>
      <arglist>(const VectorValues &amp;c)</arglist>
    </member>
    <member kind="function">
      <type>VectorValues</type>
      <name>operator-</name>
      <anchorfile>a04016.html</anchorfile>
      <anchor>a8c20fbe7e79f6979d490ad6c7c02e66b</anchor>
      <arglist>(const VectorValues &amp;c) const</arglist>
    </member>
    <member kind="function">
      <type>VectorValues</type>
      <name>subtract</name>
      <anchorfile>a04016.html</anchorfile>
      <anchor>ace23a89b9dc189f3c80da2f84bcaf7df</anchor>
      <arglist>(const VectorValues &amp;c) const</arglist>
    </member>
    <member kind="function">
      <type>VectorValues</type>
      <name>scale</name>
      <anchorfile>a04016.html</anchorfile>
      <anchor>a104e20177494bc33628479d6b86f2c0e</anchor>
      <arglist>(const double a) const</arglist>
    </member>
    <member kind="function">
      <type>VectorValues &amp;</type>
      <name>operator*=</name>
      <anchorfile>a04016.html</anchorfile>
      <anchor>a04b9217857c65d86c9e988d99cea5904</anchor>
      <arglist>(double alpha)</arglist>
    </member>
    <member kind="function">
      <type>VectorValues &amp;</type>
      <name>scaleInPlace</name>
      <anchorfile>a04016.html</anchorfile>
      <anchor>a946bfadd17cef38dc4dc02361276ead0</anchor>
      <arglist>(double alpha)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>VectorValues</name>
      <anchorfile>a04016.html</anchorfile>
      <anchor>a988c508cc8d20e1939860c8aaaaa3a0a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>VectorValues</name>
      <anchorfile>a04016.html</anchorfile>
      <anchor>a0330aaf355483e6a33fdaa94e12c0e10</anchor>
      <arglist>(const VectorValues &amp;first, const VectorValues &amp;second)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>VectorValues</name>
      <anchorfile>a04016.html</anchorfile>
      <anchor>a40f31513b621026fec7510392c26e724</anchor>
      <arglist>(const CONTAINER &amp;c)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>VectorValues</name>
      <anchorfile>a04016.html</anchorfile>
      <anchor>af8e3b85870636b1d50e7c08d1dbbbf8e</anchor>
      <arglist>(const VectorValues &amp;c)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>VectorValues</name>
      <anchorfile>a04016.html</anchorfile>
      <anchor>aa3b5d6aef3889375037a3d5ef62810ba</anchor>
      <arglist>(ITERATOR first, ITERATOR last)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>VectorValues</name>
      <anchorfile>a04016.html</anchorfile>
      <anchor>ab1c34a94fe8c328d8457cef3f89f0aab</anchor>
      <arglist>(const Vector &amp;c, const Dims &amp;dims)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>VectorValues</name>
      <anchorfile>a04016.html</anchorfile>
      <anchor>a7a6089cb667920a7362a9d6e9163e692</anchor>
      <arglist>(const Vector &amp;c, const Scatter &amp;scatter)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static VectorValues</type>
      <name>Zero</name>
      <anchorfile>a04016.html</anchorfile>
      <anchor>a885faf91eb7f07439e5451f04a4e5a06</anchor>
      <arglist>(const VectorValues &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>Vector</type>
      <name>vector</name>
      <anchorfile>a04016.html</anchorfile>
      <anchor>aa1dfa554f1807e8e8fb2cf9d2ed0eeb3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Vector</type>
      <name>vector</name>
      <anchorfile>a04016.html</anchorfile>
      <anchor>aca8ead127e0c9017b4b8861339e5998f</anchor>
      <arglist>(const CONTAINER &amp;keys) const</arglist>
    </member>
    <member kind="function">
      <type>Vector</type>
      <name>vector</name>
      <anchorfile>a04016.html</anchorfile>
      <anchor>a45ae5421566c9ce89e2d576f4e1e8fee</anchor>
      <arglist>(const Dims &amp;dims) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>swap</name>
      <anchorfile>a04016.html</anchorfile>
      <anchor>a9d8e415b1824a37b2af45806f82a64a8</anchor>
      <arglist>(VectorValues &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasSameStructure</name>
      <anchorfile>a04016.html</anchorfile>
      <anchor>a564d4890a902db6c3b87236926a40395</anchor>
      <arglist>(const VectorValues other) const</arglist>
    </member>
    <member kind="typedef">
      <type>Values::iterator</type>
      <name>iterator</name>
      <anchorfile>a04016.html</anchorfile>
      <anchor>a1fb5672c19dff9542baa9375393fb3d8</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Values::const_iterator</type>
      <name>const_iterator</name>
      <anchorfile>a04016.html</anchorfile>
      <anchor>a0e8f05ac17c5ae99687b52f2e79a5ac8</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; This &gt;</type>
      <name>shared_ptr</name>
      <anchorfile>a04016.html</anchorfile>
      <anchor>afb2faec1f48011bb0b6c6a3d1d8c900c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Values::value_type</type>
      <name>value_type</name>
      <anchorfile>a04016.html</anchorfile>
      <anchor>a0e85b51f4c41dfd5226ec68bd7dac767</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>value_type</type>
      <name>KeyValuePair</name>
      <anchorfile>a04016.html</anchorfile>
      <anchor>a0b66147bf3245ff1d0ad75acddc3e116</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::map&lt; Key, size_t &gt;</type>
      <name>Dims</name>
      <anchorfile>a04016.html</anchorfile>
      <anchor>a4d220e303b7ac4c26c602ff7075c336c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>ConcurrentMap&lt; Key, Vector &gt;</type>
      <name>Values</name>
      <anchorfile>a04016.html</anchorfile>
      <anchor>a51de7f0e81eeb8f1bf2fc59a3cc6d8d3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Values</type>
      <name>values_</name>
      <anchorfile>a04016.html</anchorfile>
      <anchor>a4d03169b0c16543a56924123f33850c4</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>boost::serialization::access</name>
      <anchorfile>a04016.html</anchorfile>
      <anchor>ac98d07dd8f7b70e16ccb9a01abf56b9c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::VelocityConstraint</name>
    <filename>a05480.html</filename>
    <base>NoiseModelFactor2&lt; PoseRTV, PoseRTV &gt;</base>
    <member kind="function">
      <type></type>
      <name>VelocityConstraint</name>
      <anchorfile>a05480.html</anchorfile>
      <anchor>a972888ded7ddd8fb6edd843fb753d59e</anchor>
      <arglist>(Key key1, Key key2, const dynamics::IntegrationMode &amp;mode, double dt, double mu=1000)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>VelocityConstraint</name>
      <anchorfile>a05480.html</anchorfile>
      <anchor>a77dc9a7d44e75a71b4501990e8678c1a</anchor>
      <arglist>(Key key1, Key key2, double dt, double mu=1000)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>VelocityConstraint</name>
      <anchorfile>a05480.html</anchorfile>
      <anchor>aa448f3d558aea42f8576020ce48b425e</anchor>
      <arglist>(Key key1, Key key2, const dynamics::IntegrationMode &amp;mode, double dt, const gtsam::SharedNoiseModel &amp;model)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>VelocityConstraint</name>
      <anchorfile>a05480.html</anchorfile>
      <anchor>a720d96b79dbe5f0f6f39a3ab12a3b7de</anchor>
      <arglist>(Key key1, Key key2, double dt, const gtsam::SharedNoiseModel &amp;model)</arglist>
    </member>
    <member kind="function">
      <type>gtsam::NonlinearFactor::shared_ptr</type>
      <name>clone</name>
      <anchorfile>a05480.html</anchorfile>
      <anchor>a4c1da2c5bee711a5406bc3ed6c287e1d</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>gtsam::Vector</type>
      <name>evaluateError</name>
      <anchorfile>a05480.html</anchorfile>
      <anchor>a6ffd9c781263b4be5ea68cbbc4dd39b9</anchor>
      <arglist>(const PoseRTV &amp;x1, const PoseRTV &amp;x2, boost::optional&lt; gtsam::Matrix &amp; &gt; H1=boost::none, boost::optional&lt; gtsam::Matrix &amp; &gt; H2=boost::none) const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>a05480.html</anchorfile>
      <anchor>aba08662cee5ba3f9683ce079eb378784</anchor>
      <arglist>(const std::string &amp;s=&quot;&quot;, const gtsam::KeyFormatter &amp;formatter=gtsam::DefaultKeyFormatter) const override</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>dynamics::IntegrationMode</type>
      <name>integration_mode_</name>
      <anchorfile>a05480.html</anchorfile>
      <anchor>a706dce535ba5c9e247a35c18b0b5d7c4</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::VelocityConstraint3</name>
    <filename>a05484.html</filename>
    <base>NoiseModelFactor3&lt; double, double, double &gt;</base>
    <member kind="function">
      <type></type>
      <name>VelocityConstraint3</name>
      <anchorfile>a05484.html</anchorfile>
      <anchor>a0643f6139df77f50cf4087693c447b69</anchor>
      <arglist>(Key key1, Key key2, Key velKey, double dt, double mu=1000.0)</arglist>
    </member>
    <member kind="function">
      <type>gtsam::NonlinearFactor::shared_ptr</type>
      <name>clone</name>
      <anchorfile>a05484.html</anchorfile>
      <anchor>afe9df313551e605e7eeeb78cc2b36696</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>Vector</type>
      <name>evaluateError</name>
      <anchorfile>a05484.html</anchorfile>
      <anchor>a7db84181fd609de91bab69f48bb2c2d8</anchor>
      <arglist>(const double &amp;x1, const double &amp;x2, const double &amp;v, boost::optional&lt; Matrix &amp; &gt; H1=boost::none, boost::optional&lt; Matrix &amp; &gt; H2=boost::none, boost::optional&lt; Matrix &amp; &gt; H3=boost::none) const override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>VelocityConstraint3</name>
      <anchorfile>a05484.html</anchorfile>
      <anchor>a011a70fff5aef9779e4bdd8b3aafd4b1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>boost::serialization::access</name>
      <anchorfile>a05484.html</anchorfile>
      <anchor>ac98d07dd8f7b70e16ccb9a01abf56b9c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>gtsam::VelocityPrior</name>
    <filename>a05428.html</filename>
    <base>PartialPriorFactor&lt; PoseRTV &gt;</base>
  </compound>
  <compound kind="class">
    <name>gtsam::VerticalBlockMatrix</name>
    <filename>a02804.html</filename>
    <member kind="function">
      <type></type>
      <name>VerticalBlockMatrix</name>
      <anchorfile>a02804.html</anchorfile>
      <anchor>a04d12c23c8c6a3179416ca49da794c86</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>VerticalBlockMatrix</name>
      <anchorfile>a02804.html</anchorfile>
      <anchor>a20f3454d88ad93367250ea900c84c53d</anchor>
      <arglist>(const CONTAINER &amp;dimensions, DenseIndex height, bool appendOneDimension=false)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>VerticalBlockMatrix</name>
      <anchorfile>a02804.html</anchorfile>
      <anchor>ac3d367af21c05dca883a91cf5c24a243</anchor>
      <arglist>(const CONTAINER &amp;dimensions, const Eigen::MatrixBase&lt; DERIVED &gt; &amp;matrix, bool appendOneDimension=false)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>VerticalBlockMatrix</name>
      <anchorfile>a02804.html</anchorfile>
      <anchor>a78d48e3b5eb2fc89705be918eb25652e</anchor>
      <arglist>(ITERATOR firstBlockDim, ITERATOR lastBlockDim, DenseIndex height, bool appendOneDimension=false)</arglist>
    </member>
    <member kind="function">
      <type>DenseIndex</type>
      <name>rows</name>
      <anchorfile>a02804.html</anchorfile>
      <anchor>a503a682bd3ec153c92d274b7b60db5c8</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>DenseIndex</type>
      <name>cols</name>
      <anchorfile>a02804.html</anchorfile>
      <anchor>a643d937b08596158d61440c5d8407ddf</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>DenseIndex</type>
      <name>nBlocks</name>
      <anchorfile>a02804.html</anchorfile>
      <anchor>aae2077898052464a33b9af7244c82f87</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Block</type>
      <name>operator()</name>
      <anchorfile>a02804.html</anchorfile>
      <anchor>a57657389622cd5e1b6e377dfecf7cbfa</anchor>
      <arglist>(DenseIndex block)</arglist>
    </member>
    <member kind="function">
      <type>const constBlock</type>
      <name>operator()</name>
      <anchorfile>a02804.html</anchorfile>
      <anchor>a90f238c763567b8f6f7c24372857de75</anchor>
      <arglist>(DenseIndex block) const</arglist>
    </member>
    <member kind="function">
      <type>Block</type>
      <name>range</name>
      <anchorfile>a02804.html</anchorfile>
      <anchor>a0a7317cdb1c8e0fc2d2dcb3e02dd651b</anchor>
      <arglist>(DenseIndex startBlock, DenseIndex endBlock)</arglist>
    </member>
    <member kind="function">
      <type>Block</type>
      <name>full</name>
      <anchorfile>a02804.html</anchorfile>
      <anchor>a09283eb4c95f331eae17164dd632d089</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const constBlock</type>
      <name>full</name>
      <anchorfile>a02804.html</anchorfile>
      <anchor>abcb19e8883d335b21113d50eb5f37e95</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const DenseIndex &amp;</type>
      <name>rowStart</name>
      <anchorfile>a02804.html</anchorfile>
      <anchor>a9de26d1798ea7ea7037b6d504b080769</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>DenseIndex &amp;</type>
      <name>rowStart</name>
      <anchorfile>a02804.html</anchorfile>
      <anchor>ac02ad7cfc0baf80c7a6e0d62524a4cd7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const DenseIndex &amp;</type>
      <name>rowEnd</name>
      <anchorfile>a02804.html</anchorfile>
      <anchor>a400c75c332c65956b332dac29efb34f9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>DenseIndex &amp;</type>
      <name>rowEnd</name>
      <anchorfile>a02804.html</anchorfile>
      <anchor>ac0a5e55f32e42639601b7755d1fdadb5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const DenseIndex &amp;</type>
      <name>firstBlock</name>
      <anchorfile>a02804.html</anchorfile>
      <anchor>a1498857894c5020069e1443f4a84373c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>DenseIndex &amp;</type>
      <name>firstBlock</name>
      <anchorfile>a02804.html</anchorfile>
      <anchor>a627c29bede193c9c3750e4249f336381</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const Matrix &amp;</type>
      <name>matrix</name>
      <anchorfile>a02804.html</anchorfile>
      <anchor>a1637c4ff95b691fce6b0419996d87061</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Matrix &amp;</type>
      <name>matrix</name>
      <anchorfile>a02804.html</anchorfile>
      <anchor>ac03597c8a0e5bac77719d73745d902ee</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static VerticalBlockMatrix</type>
      <name>LikeActiveViewOf</name>
      <anchorfile>a02804.html</anchorfile>
      <anchor>ae5ca2474a54f3212d7e73b3e904b8692</anchor>
      <arglist>(const VerticalBlockMatrix &amp;rhs)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static VerticalBlockMatrix</type>
      <name>LikeActiveViewOf</name>
      <anchorfile>a02804.html</anchorfile>
      <anchor>ad36f9b381dc3876995eb06c03e8667fd</anchor>
      <arglist>(const SymmetricBlockMatrix &amp;rhs, DenseIndex height)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Matrix</type>
      <name>matrix_</name>
      <anchorfile>a02804.html</anchorfile>
      <anchor>aaac69a1919d004647db02fab5b0cb0eb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>FastVector&lt; DenseIndex &gt;</type>
      <name>variableColOffsets_</name>
      <anchorfile>a02804.html</anchorfile>
      <anchor>ae7ec144e787509009c3fb0f284b94a22</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>DenseIndex</type>
      <name>rowStart_</name>
      <anchorfile>a02804.html</anchorfile>
      <anchor>ac17eb9545a5eb49245a4ed598c3cfbd1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>DenseIndex</type>
      <name>rowEnd_</name>
      <anchorfile>a02804.html</anchorfile>
      <anchor>a30f8297f16323a7471154f7eb9f2828a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>DenseIndex</type>
      <name>blockStart_</name>
      <anchorfile>a02804.html</anchorfile>
      <anchor>ac6d96c30337e9378bcc7ac223b9d0d5c</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>boost::serialization::access</name>
      <anchorfile>a02804.html</anchorfile>
      <anchor>ac98d07dd8f7b70e16ccb9a01abf56b9c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::WeightedSampler</name>
    <filename>a02808.html</filename>
    <templarg>class Engine</templarg>
    <member kind="function">
      <type></type>
      <name>WeightedSampler</name>
      <anchorfile>a02808.html</anchorfile>
      <anchor>aa938b7f88f6efd2be5ee3b1cf12c85f7</anchor>
      <arglist>(Engine *engine)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::noiseModel::mEstimator::Welsch</name>
    <filename>a03856.html</filename>
    <base>gtsam::noiseModel::mEstimator::Base</base>
    <member kind="friend">
      <type>friend class</type>
      <name>boost::serialization::access</name>
      <anchorfile>a03856.html</anchorfile>
      <anchor>ac98d07dd8f7b70e16ccb9a01abf56b9c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::WhiteNoiseFactor</name>
    <filename>a04596.html</filename>
    <base>gtsam::NonlinearFactor</base>
    <member kind="function">
      <type></type>
      <name>WhiteNoiseFactor</name>
      <anchorfile>a04596.html</anchorfile>
      <anchor>a92b88afb4ef2a76302f9ad7694636bce</anchor>
      <arglist>(double z, Key meanKey, Key precisionKey)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~WhiteNoiseFactor</name>
      <anchorfile>a04596.html</anchorfile>
      <anchor>a2addf6cc0614cf07451593677475690e</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>a04596.html</anchorfile>
      <anchor>a9157e5f97e1aa3f7b116f7e233f29715</anchor>
      <arglist>(const std::string &amp;p=&quot;WhiteNoiseFactor&quot;, const KeyFormatter &amp;keyFormatter=DefaultKeyFormatter) const override</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>dim</name>
      <anchorfile>a04596.html</anchorfile>
      <anchor>ad8e7defea60574520a1f43733212242c</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>error</name>
      <anchorfile>a04596.html</anchorfile>
      <anchor>ac1eb391a5cd7dc0f0d9b966540380971</anchor>
      <arglist>(const Values &amp;x) const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Vector</type>
      <name>unwhitenedError</name>
      <anchorfile>a04596.html</anchorfile>
      <anchor>a9ac20b0036f3d1823e121979409e7535</anchor>
      <arglist>(const Values &amp;x) const</arglist>
    </member>
    <member kind="function">
      <type>boost::shared_ptr&lt; GaussianFactor &gt;</type>
      <name>linearize</name>
      <anchorfile>a04596.html</anchorfile>
      <anchor>a176223c25b5a1d1268aeb114ee75b96f</anchor>
      <arglist>(const Values &amp;x) const override</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static double</type>
      <name>f</name>
      <anchorfile>a04596.html</anchorfile>
      <anchor>aaeee41e0aa000bcf053826fec43f2086</anchor>
      <arglist>(double z, double u, double p)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static HessianFactor::shared_ptr</type>
      <name>linearize</name>
      <anchorfile>a04596.html</anchorfile>
      <anchor>a66ac8a770883fec0b220cdd4c2b1446b</anchor>
      <arglist>(double z, double u, double p, Key j1, Key j2)</arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>gtsam</name>
    <filename>a01596.html</filename>
    <namespace>gtsam::imuBias</namespace>
    <namespace>gtsam::noiseModel</namespace>
    <namespace>gtsam::treeTraversal</namespace>
    <class kind="struct">gtsam::_ValuesConstKeyValuePair</class>
    <class kind="struct">gtsam::_ValuesKeyValuePair</class>
    <class kind="class">gtsam::AcceleratedPowerMethod</class>
    <class kind="class">gtsam::AcceleratingScenario</class>
    <class kind="class">gtsam::ActiveSetSolver</class>
    <class kind="class">gtsam::AdaptAutoDiff</class>
    <class kind="struct">gtsam::additive_group_tag</class>
    <class kind="class">gtsam::AHRS</class>
    <class kind="class">gtsam::AHRSFactor</class>
    <class kind="class">gtsam::AlgebraicDecisionTree</class>
    <class kind="class">gtsam::AllDiff</class>
    <class kind="class">gtsam::AntiFactor</class>
    <class kind="class">gtsam::Assignment</class>
    <class kind="class">gtsam::AttitudeFactor</class>
    <class kind="class">gtsam::Basis</class>
    <class kind="class">gtsam::BatchFixedLagSmoother</class>
    <class kind="class">gtsam::BayesNet</class>
    <class kind="class">gtsam::BayesTree</class>
    <class kind="class">gtsam::BayesTreeCliqueBase</class>
    <class kind="struct">gtsam::BayesTreeCliqueData</class>
    <class kind="struct">gtsam::BayesTreeCliqueStats</class>
    <class kind="class">gtsam::BayesTreeOrphanWrapper</class>
    <class kind="struct">gtsam::Bearing</class>
    <class kind="struct">gtsam::Bearing&lt; Pose2, T &gt;</class>
    <class kind="struct">gtsam::Bearing&lt; Pose3, Point3 &gt;</class>
    <class kind="struct">gtsam::Bearing&lt; Pose3, Pose3 &gt;</class>
    <class kind="struct">gtsam::BearingFactor</class>
    <class kind="struct">gtsam::BearingRange</class>
    <class kind="class">gtsam::BearingRangeFactor</class>
    <class kind="class">gtsam::BetweenConstraint</class>
    <class kind="class">gtsam::BetweenFactor</class>
    <class kind="class">gtsam::BetweenFactorEM</class>
    <class kind="class">gtsam::BiasedGPSFactor</class>
    <class kind="class">gtsam::BinaryAllDiff</class>
    <class kind="struct">gtsam::BinaryJacobianFactor</class>
    <class kind="class">gtsam::BinaryMeasurement</class>
    <class kind="class">gtsam::BinarySumExpression</class>
    <class kind="class">gtsam::BlockJacobiPreconditioner</class>
    <class kind="struct">gtsam::BlockJacobiPreconditionerParameters</class>
    <class kind="struct">gtsam::BoundingConstraint1</class>
    <class kind="struct">gtsam::BoundingConstraint2</class>
    <class kind="class">gtsam::BTree</class>
    <class kind="class">gtsam::Cal3</class>
    <class kind="class">gtsam::Cal3_S2</class>
    <class kind="class">gtsam::Cal3_S2Stereo</class>
    <class kind="class">gtsam::Cal3Bundler</class>
    <class kind="class">gtsam::Cal3DS2</class>
    <class kind="class">gtsam::Cal3DS2_Base</class>
    <class kind="class">gtsam::Cal3Fisheye</class>
    <class kind="class">gtsam::Cal3Unified</class>
    <class kind="class">gtsam::CalibratedCamera</class>
    <class kind="struct">gtsam::CameraProjectionMatrix</class>
    <class kind="class">gtsam::CameraSet</class>
    <class kind="struct">gtsam::CGState</class>
    <class kind="struct">gtsam::Chebyshev1Basis</class>
    <class kind="class">gtsam::Chebyshev2</class>
    <class kind="struct">gtsam::Chebyshev2Basis</class>
    <class kind="class">gtsam::CheiralityException</class>
    <class kind="class">gtsam::CholeskyFailed</class>
    <class kind="class">gtsam::ClusterTree</class>
    <class kind="class">gtsam::CombinedImuFactor</class>
    <class kind="class">gtsam::ComponentDerivativeFactor</class>
    <class kind="class">gtsam::compose_key_visitor</class>
    <class kind="class">gtsam::ConcurrentBatchFilter</class>
    <class kind="class">gtsam::ConcurrentBatchSmoother</class>
    <class kind="class">gtsam::ConcurrentFilter</class>
    <class kind="class">gtsam::ConcurrentIncrementalFilter</class>
    <class kind="class">gtsam::ConcurrentIncrementalSmoother</class>
    <class kind="class">gtsam::ConcurrentMap</class>
    <class kind="class">gtsam::ConcurrentSmoother</class>
    <class kind="class">gtsam::Conditional</class>
    <class kind="class">gtsam::ConjugateGradientParameters</class>
    <class kind="struct">gtsam::const_selector</class>
    <class kind="struct">gtsam::const_selector&lt; BASIC_TYPE, BASIC_TYPE, AS_NON_CONST, AS_CONST &gt;</class>
    <class kind="struct">gtsam::const_selector&lt; const BASIC_TYPE, BASIC_TYPE, AS_NON_CONST, AS_CONST &gt;</class>
    <class kind="class">gtsam::ConstantTwistScenario</class>
    <class kind="class">gtsam::ConstantVelocityFactor</class>
    <class kind="class">gtsam::Constraint</class>
    <class kind="struct">gtsam::ConstructorTraversalData</class>
    <class kind="class">gtsam::CRefCallAddCopy</class>
    <class kind="class">gtsam::CRefCallPushBack</class>
    <class kind="class">gtsam::CSP</class>
    <class kind="class">gtsam::CustomFactor</class>
    <class kind="class">gtsam::Cyclic</class>
    <class kind="class">gtsam::DecisionTree</class>
    <class kind="class">gtsam::DecisionTreeFactor</class>
    <class kind="class">gtsam::DeltaFactor</class>
    <class kind="class">gtsam::DeltaFactorBase</class>
    <class kind="struct">gtsam::DeltaImpl</class>
    <class kind="class">gtsam::DerivativeFactor</class>
    <class kind="struct">gtsam::DGroundConstraint</class>
    <class kind="struct">gtsam::DHeightPrior</class>
    <class kind="class">gtsam::DirectProduct</class>
    <class kind="class">gtsam::DirectSum</class>
    <class kind="class">gtsam::DiscreteBayesNet</class>
    <class kind="class">gtsam::DiscreteBayesTree</class>
    <class kind="class">gtsam::DiscreteBayesTreeClique</class>
    <class kind="class">gtsam::DiscreteConditional</class>
    <class kind="class">gtsam::DiscreteEliminationTree</class>
    <class kind="class">gtsam::DiscreteEulerPoincareHelicopter</class>
    <class kind="class">gtsam::DiscreteFactor</class>
    <class kind="class">gtsam::DiscreteFactorGraph</class>
    <class kind="class">gtsam::DiscreteJunctionTree</class>
    <class kind="struct">gtsam::DiscreteKeys</class>
    <class kind="class">gtsam::DiscreteMarginals</class>
    <class kind="class">gtsam::DoglegOptimizer</class>
    <class kind="struct">gtsam::DoglegOptimizerImpl</class>
    <class kind="class">gtsam::DoglegParams</class>
    <class kind="class">gtsam::Domain</class>
    <class kind="struct">gtsam::DRollPrior</class>
    <class kind="class">gtsam::DSF</class>
    <class kind="class">gtsam::DSFBase</class>
    <class kind="class">gtsam::DSFMap</class>
    <class kind="class">gtsam::DSFVector</class>
    <class kind="struct">gtsam::Dummy</class>
    <class kind="class">gtsam::DummyFactor</class>
    <class kind="class">gtsam::DummyPreconditioner</class>
    <class kind="struct">gtsam::DummyPreconditionerParameters</class>
    <class kind="class">gtsam::DynamicValuesMismatched</class>
    <class kind="class">gtsam::EliminatableClusterTree</class>
    <class kind="class">gtsam::EliminateableFactorGraph</class>
    <class kind="struct">gtsam::EliminationData</class>
    <class kind="struct">gtsam::EliminationTraits</class>
    <class kind="struct">gtsam::EliminationTraits&lt; DiscreteFactorGraph &gt;</class>
    <class kind="struct">gtsam::EliminationTraits&lt; GaussianFactorGraph &gt;</class>
    <class kind="struct">gtsam::EliminationTraits&lt; SymbolicFactorGraph &gt;</class>
    <class kind="class">gtsam::EliminationTree</class>
    <class kind="class">gtsam::EqualityFactorGraph</class>
    <class kind="struct">gtsam::equals</class>
    <class kind="struct">gtsam::equals_star</class>
    <class kind="class">gtsam::EquivInertialNavFactor_GlobalVel</class>
    <class kind="class">gtsam::EquivInertialNavFactor_GlobalVel_NoBias</class>
    <class kind="class">gtsam::Errors</class>
    <class kind="class">gtsam::EssentialMatrix</class>
    <class kind="class">gtsam::EssentialMatrixConstraint</class>
    <class kind="class">gtsam::EssentialMatrixFactor</class>
    <class kind="class">gtsam::EssentialMatrixFactor2</class>
    <class kind="class">gtsam::EssentialMatrixFactor3</class>
    <class kind="class">gtsam::EssentialMatrixFactor4</class>
    <class kind="class">gtsam::EvaluationFactor</class>
    <class kind="class">gtsam::Expression</class>
    <class kind="class">gtsam::ExpressionFactor</class>
    <class kind="class">gtsam::ExpressionFactorGraph</class>
    <class kind="class">gtsam::ExpressionFactorN</class>
    <class kind="class">gtsam::ExtendedKalmanFilter</class>
    <class kind="class">gtsam::Factor</class>
    <class kind="class">gtsam::FactorGraph</class>
    <class kind="class">gtsam::FastList</class>
    <class kind="class">gtsam::FastMap</class>
    <class kind="class">gtsam::FastSet</class>
    <class kind="class">gtsam::FitBasis</class>
    <class kind="struct">gtsam::FixedDimension</class>
    <class kind="class">gtsam::FixedLagSmoother</class>
    <class kind="class">gtsam::FixedVector</class>
    <class kind="class">gtsam::FourierBasis</class>
    <class kind="class">gtsam::FrobeniusBetweenFactor</class>
    <class kind="class">gtsam::FrobeniusFactor</class>
    <class kind="class">gtsam::FrobeniusPrior</class>
    <class kind="class">gtsam::FullIMUFactor</class>
    <class kind="class">gtsam::FunctorizedFactor</class>
    <class kind="class">gtsam::FunctorizedFactor2</class>
    <class kind="class">gtsam::G_x1</class>
    <class kind="class">gtsam::GaussianBayesNet</class>
    <class kind="class">gtsam::GaussianBayesTree</class>
    <class kind="class">gtsam::GaussianBayesTreeClique</class>
    <class kind="class">gtsam::GaussianConditional</class>
    <class kind="class">gtsam::GaussianDensity</class>
    <class kind="class">gtsam::GaussianEliminationTree</class>
    <class kind="class">gtsam::GaussianFactor</class>
    <class kind="class">gtsam::GaussianFactorGraph</class>
    <class kind="class">gtsam::GaussianFactorGraphSystem</class>
    <class kind="class">gtsam::GaussianISAM</class>
    <class kind="class">gtsam::GaussianJunctionTree</class>
    <class kind="class">gtsam::GaussMarkov1stOrderFactor</class>
    <class kind="class">gtsam::GaussNewtonOptimizer</class>
    <class kind="class">gtsam::GaussNewtonParams</class>
    <class kind="class">gtsam::GeneralSFMFactor</class>
    <class kind="class">gtsam::GeneralSFMFactor2</class>
    <class kind="class">gtsam::GenericProjectionFactor</class>
    <class kind="class">gtsam::GenericStereoFactor</class>
    <class kind="class">gtsam::GenericValue</class>
    <class kind="class">gtsam::GncOptimizer</class>
    <class kind="class">gtsam::GncParams</class>
    <class kind="class">gtsam::GPSFactor</class>
    <class kind="class">gtsam::GPSFactor2</class>
    <class kind="struct">gtsam::GraphvizFormatting</class>
    <class kind="struct">gtsam::group_tag</class>
    <class kind="struct">gtsam::HasBearing</class>
    <class kind="struct">gtsam::HasRange</class>
    <class kind="struct">gtsam::HasTestablePrereqs</class>
    <class kind="class">gtsam::HessianFactor</class>
    <class kind="class">gtsam::IMUFactor</class>
    <class kind="class">gtsam::ImuFactor</class>
    <class kind="class">gtsam::ImuFactor2</class>
    <class kind="class">gtsam::InconsistentEliminationRequested</class>
    <class kind="class">gtsam::IncrementalFixedLagSmoother</class>
    <class kind="class">gtsam::IndeterminantLinearSystemException</class>
    <class kind="class">gtsam::IndexPair</class>
    <class kind="class">gtsam::InequalityFactorGraph</class>
    <class kind="class">gtsam::InertialNavFactor_GlobalVelocity</class>
    <class kind="class">gtsam::InfeasibleInitialValues</class>
    <class kind="class">gtsam::InfeasibleOrUnboundedProblem</class>
    <class kind="struct">gtsam::InitializePose3</class>
    <class kind="class">gtsam::InvalidArgumentThreadsafe</class>
    <class kind="class">gtsam::InvalidDenseElimination</class>
    <class kind="class">gtsam::InvalidMatrixBlock</class>
    <class kind="class">gtsam::InvalidNoiseModel</class>
    <class kind="class">gtsam::InvDepthFactor3</class>
    <class kind="class">gtsam::InvDepthFactorVariant1</class>
    <class kind="class">gtsam::InvDepthFactorVariant2</class>
    <class kind="class">gtsam::InvDepthFactorVariant3a</class>
    <class kind="class">gtsam::InvDepthFactorVariant3b</class>
    <class kind="class">gtsam::ISAM</class>
    <class kind="class">gtsam::ISAM2</class>
    <class kind="class">gtsam::ISAM2BayesTree</class>
    <class kind="class">gtsam::ISAM2Clique</class>
    <class kind="struct">gtsam::ISAM2DoglegParams</class>
    <class kind="struct">gtsam::ISAM2GaussNewtonParams</class>
    <class kind="class">gtsam::ISAM2JunctionTree</class>
    <class kind="struct">gtsam::ISAM2Params</class>
    <class kind="struct">gtsam::ISAM2Result</class>
    <class kind="struct">gtsam::ISAM2UpdateParams</class>
    <class kind="class">gtsam::IsGroup</class>
    <class kind="class">gtsam::IsLieGroup</class>
    <class kind="class">gtsam::IsTestable</class>
    <class kind="class">gtsam::IsVectorSpace</class>
    <class kind="class">gtsam::IterativeOptimizationParameters</class>
    <class kind="class">gtsam::IterativeSolver</class>
    <class kind="class">gtsam::JacobianFactor</class>
    <class kind="class">gtsam::JacobianFactorQ</class>
    <class kind="class">gtsam::JacobianFactorQR</class>
    <class kind="class">gtsam::JacobianFactorSVD</class>
    <class kind="class">gtsam::JointMarginal</class>
    <class kind="class">gtsam::JunctionTree</class>
    <class kind="class">gtsam::KalmanFilter</class>
    <class kind="class">gtsam::KarcherMeanFactor</class>
    <class kind="class">gtsam::key_formatter</class>
    <class kind="class">gtsam::KeyInfo</class>
    <class kind="struct">gtsam::KeyInfoEntry</class>
    <class kind="class">gtsam::LabeledSymbol</class>
    <class kind="class">gtsam::LevenbergMarquardtOptimizer</class>
    <class kind="class">gtsam::LevenbergMarquardtParams</class>
    <class kind="struct">gtsam::lie_group_tag</class>
    <class kind="struct">gtsam::LieGroup</class>
    <class kind="class">gtsam::Line3</class>
    <class kind="class">gtsam::LinearContainerFactor</class>
    <class kind="class">gtsam::LinearCost</class>
    <class kind="class">gtsam::LinearEquality</class>
    <class kind="class">gtsam::LinearInequality</class>
    <class kind="class">gtsam::LinearizedGaussianFactor</class>
    <class kind="class">gtsam::LinearizedHessianFactor</class>
    <class kind="class">gtsam::LinearizedJacobianFactor</class>
    <class kind="class">gtsam::ListOfOneContainer</class>
    <class kind="class">gtsam::LocalOrientedPlane3Factor</class>
    <class kind="struct">gtsam::LP</class>
    <class kind="class">gtsam::LPInitSolver</class>
    <class kind="struct">gtsam::LPPolicy</class>
    <class kind="class">gtsam::MagFactor</class>
    <class kind="class">gtsam::MagFactor1</class>
    <class kind="class">gtsam::MagFactor2</class>
    <class kind="class">gtsam::MagFactor3</class>
    <class kind="class">gtsam::MagPoseFactor</class>
    <class kind="struct">gtsam::MakeJacobian</class>
    <class kind="struct">gtsam::MakeOptionalJacobian</class>
    <class kind="struct">gtsam::manifold_tag</class>
    <class kind="class">gtsam::ManifoldEvaluationFactor</class>
    <class kind="class">gtsam::ManifoldPreintegration</class>
    <class kind="class">gtsam::MarginalizeNonleafException</class>
    <class kind="class">gtsam::Marginals</class>
    <class kind="class">gtsam::Mechanization_bRn2</class>
    <class kind="class">gtsam::MetisIndex</class>
    <class kind="class">gtsam::MFAS</class>
    <class kind="struct">gtsam::multiplicative_group_tag</class>
    <class kind="struct">gtsam::MultiplyWithInverse</class>
    <class kind="struct">gtsam::MultiplyWithInverseFunction</class>
    <class kind="class">gtsam::MultiProjectionFactor</class>
    <class kind="class">gtsam::NavState</class>
    <class kind="struct">gtsam::needs_eigen_aligned_allocator</class>
    <class kind="struct">gtsam::needs_eigen_aligned_allocator&lt; T, void_t&lt; typename T::_eigen_aligned_allocator_trait &gt; &gt;</class>
    <class kind="class">gtsam::NoiseModelFactor</class>
    <class kind="class">gtsam::NoiseModelFactor1</class>
    <class kind="class">gtsam::NoiseModelFactor2</class>
    <class kind="class">gtsam::NoiseModelFactor3</class>
    <class kind="class">gtsam::NoiseModelFactor4</class>
    <class kind="class">gtsam::NoiseModelFactor5</class>
    <class kind="class">gtsam::NoiseModelFactor6</class>
    <class kind="class">gtsam::NoMatchFoundForFixed</class>
    <class kind="class">gtsam::NonlinearClusterTree</class>
    <class kind="class">gtsam::NonlinearConjugateGradientOptimizer</class>
    <class kind="class">gtsam::NonlinearEquality</class>
    <class kind="class">gtsam::NonlinearEquality1</class>
    <class kind="class">gtsam::NonlinearEquality2</class>
    <class kind="class">gtsam::NonlinearFactor</class>
    <class kind="class">gtsam::NonlinearFactorGraph</class>
    <class kind="class">gtsam::NonlinearISAM</class>
    <class kind="class">gtsam::NonlinearOptimizer</class>
    <class kind="class">gtsam::NonlinearOptimizerParams</class>
    <class kind="class">gtsam::OdometryFactorBase</class>
    <class kind="class">gtsam::OptionalJacobian</class>
    <class kind="class">gtsam::OptionalJacobian&lt; Eigen::Dynamic, Eigen::Dynamic &gt;</class>
    <class kind="class">gtsam::Ordering</class>
    <class kind="class">gtsam::ordering_key_visitor</class>
    <class kind="class">gtsam::OrientedPlane3</class>
    <class kind="class">gtsam::OrientedPlane3DirectionPrior</class>
    <class kind="class">gtsam::OrientedPlane3Factor</class>
    <class kind="class">gtsam::OutOfRangeThreadsafe</class>
    <class kind="class">gtsam::ParameterMatrix</class>
    <class kind="class">gtsam::PartialPriorFactor</class>
    <class kind="class">gtsam::PCGSolver</class>
    <class kind="struct">gtsam::PCGSolverParameters</class>
    <class kind="class">gtsam::PendulumFactor1</class>
    <class kind="class">gtsam::PendulumFactor2</class>
    <class kind="class">gtsam::PendulumFactorPk</class>
    <class kind="class">gtsam::PendulumFactorPk1</class>
    <class kind="class">gtsam::PinholeBase</class>
    <class kind="class">gtsam::PinholeBaseK</class>
    <class kind="class">gtsam::PinholeCamera</class>
    <class kind="class">gtsam::PinholePose</class>
    <class kind="class">gtsam::PinholeSet</class>
    <class kind="class">gtsam::Pose2</class>
    <class kind="class">gtsam::Pose3</class>
    <class kind="class">gtsam::Pose3AttitudeFactor</class>
    <class kind="class">gtsam::PoseBetweenFactor</class>
    <class kind="class">gtsam::PoseConcept</class>
    <class kind="class">gtsam::PosePriorFactor</class>
    <class kind="class">gtsam::PoseRotationPrior</class>
    <class kind="class">gtsam::PoseRTV</class>
    <class kind="class">gtsam::PoseToPointFactor</class>
    <class kind="class">gtsam::PoseTranslationPrior</class>
    <class kind="class">gtsam::Potentials</class>
    <class kind="class">gtsam::PowerMethod</class>
    <class kind="class">gtsam::Preconditioner</class>
    <class kind="struct">gtsam::PreconditionerParameters</class>
    <class kind="class">gtsam::PredecessorMap</class>
    <class kind="class">gtsam::PreintegratedAhrsMeasurements</class>
    <class kind="class">gtsam::PreintegratedCombinedMeasurements</class>
    <class kind="class">gtsam::PreintegratedImuMeasurements</class>
    <class kind="class">gtsam::PreintegratedRotation</class>
    <class kind="struct">gtsam::PreintegratedRotationParams</class>
    <class kind="class">gtsam::PreintegrationBase</class>
    <class kind="struct">gtsam::PreintegrationCombinedParams</class>
    <class kind="struct">gtsam::PreintegrationParams</class>
    <class kind="class">gtsam::PriorFactor</class>
    <class kind="class">gtsam::ProductLieGroup</class>
    <class kind="class">gtsam::ProjectionFactorPPP</class>
    <class kind="class">gtsam::ProjectionFactorPPPC</class>
    <class kind="class">gtsam::ProjectionFactorRollingShutter</class>
    <class kind="struct">gtsam::QP</class>
    <class kind="class">gtsam::QPInitSolver</class>
    <class kind="struct">gtsam::QPPolicy</class>
    <class kind="class">gtsam::QPSParser</class>
    <class kind="class">gtsam::QPSParserException</class>
    <class kind="struct">gtsam::Range</class>
    <class kind="struct">gtsam::Range&lt; CalibratedCamera, T &gt;</class>
    <class kind="struct">gtsam::Range&lt; PinholeCamera&lt; Calibration &gt;, T &gt;</class>
    <class kind="struct">gtsam::Range&lt; Point2, Point2 &gt;</class>
    <class kind="struct">gtsam::Range&lt; Point3, Point3 &gt;</class>
    <class kind="struct">gtsam::Range&lt; Pose2, T &gt;</class>
    <class kind="struct">gtsam::Range&lt; Pose3, T &gt;</class>
    <class kind="struct">gtsam::Range&lt; PoseRTV, PoseRTV &gt;</class>
    <class kind="class">gtsam::RangeFactor</class>
    <class kind="class">gtsam::RangeFactorWithTransform</class>
    <class kind="class">gtsam::Reconstruction</class>
    <class kind="struct">gtsam::RedirectCout</class>
    <class kind="class">gtsam::RefCallPushBack</class>
    <class kind="class">gtsam::ReferenceFrameFactor</class>
    <class kind="class">gtsam::RegularHessianFactor</class>
    <class kind="class">gtsam::RegularImplicitSchurFactor</class>
    <class kind="class">gtsam::RegularJacobianFactor</class>
    <class kind="class">gtsam::RelativeElevationFactor</class>
    <class kind="struct">gtsam::Reshape</class>
    <class kind="struct">gtsam::Reshape&lt; M, M, InOptions, M, M, InOptions &gt;</class>
    <class kind="struct">gtsam::Reshape&lt; M, N, InOptions, M, N, InOptions &gt;</class>
    <class kind="struct">gtsam::Reshape&lt; N, M, InOptions, M, N, InOptions &gt;</class>
    <class kind="class">gtsam::Rot2</class>
    <class kind="class">gtsam::Rot3</class>
    <class kind="class">gtsam::Rot3AttitudeFactor</class>
    <class kind="class">gtsam::RotateDirectionsFactor</class>
    <class kind="class">gtsam::RotateFactor</class>
    <class kind="class">gtsam::RuntimeErrorThreadsafe</class>
    <class kind="class">gtsam::Sampler</class>
    <class kind="class">gtsam::ScalarMultiplyExpression</class>
    <class kind="class">gtsam::Scatter</class>
    <class kind="class">gtsam::Scenario</class>
    <class kind="class">gtsam::ScenarioRunner</class>
    <class kind="class">gtsam::Scheduler</class>
    <class kind="class">gtsam::SDGraph</class>
    <class kind="struct">gtsam::SfmData</class>
    <class kind="struct">gtsam::SfmTrack</class>
    <class kind="class">gtsam::SGraph</class>
    <class kind="class">gtsam::ShonanAveraging</class>
    <class kind="class">gtsam::ShonanAveraging2</class>
    <class kind="class">gtsam::ShonanAveraging3</class>
    <class kind="struct">gtsam::ShonanAveragingParameters</class>
    <class kind="class">gtsam::ShonanFactor</class>
    <class kind="class">gtsam::ShonanGaugeFactor</class>
    <class kind="class">gtsam::Signature</class>
    <class kind="class">gtsam::Similarity3</class>
    <class kind="class">gtsam::SingleValue</class>
    <class kind="struct">gtsam::SlotEntry</class>
    <class kind="class">gtsam::SmartFactorBase</class>
    <class kind="class">gtsam::SmartProjectionFactor</class>
    <class kind="struct">gtsam::SmartProjectionParams</class>
    <class kind="class">gtsam::SmartProjectionPoseFactor</class>
    <class kind="class">gtsam::SmartProjectionPoseFactorRollingShutter</class>
    <class kind="class">gtsam::SmartProjectionRigFactor</class>
    <class kind="class">gtsam::SmartRangeFactor</class>
    <class kind="class">gtsam::SmartStereoProjectionFactor</class>
    <class kind="class">gtsam::SmartStereoProjectionFactorPP</class>
    <class kind="class">gtsam::SmartStereoProjectionPoseFactor</class>
    <class kind="class">gtsam::SO</class>
    <class kind="class">gtsam::StereoCamera</class>
    <class kind="class">gtsam::StereoCheiralityException</class>
    <class kind="class">gtsam::StereoPoint2</class>
    <class kind="struct">gtsam::StreamedKey</class>
    <class kind="class">gtsam::Subgraph</class>
    <class kind="class">gtsam::SubgraphBuilder</class>
    <class kind="struct">gtsam::SubgraphBuilderParameters</class>
    <class kind="class">gtsam::SubgraphPreconditioner</class>
    <class kind="struct">gtsam::SubgraphPreconditionerParameters</class>
    <class kind="class">gtsam::SubgraphSolver</class>
    <class kind="struct">gtsam::SubgraphSolverParameters</class>
    <class kind="class">gtsam::Symbol</class>
    <class kind="class">gtsam::SymbolGenerator</class>
    <class kind="class">gtsam::SymbolicBayesNet</class>
    <class kind="class">gtsam::SymbolicBayesTree</class>
    <class kind="class">gtsam::SymbolicBayesTreeClique</class>
    <class kind="class">gtsam::SymbolicConditional</class>
    <class kind="class">gtsam::SymbolicEliminationTree</class>
    <class kind="class">gtsam::SymbolicFactor</class>
    <class kind="class">gtsam::SymbolicFactorGraph</class>
    <class kind="class">gtsam::SymbolicISAM</class>
    <class kind="class">gtsam::SymbolicJunctionTree</class>
    <class kind="class">gtsam::SymmetricBlockMatrix</class>
    <class kind="class">gtsam::System</class>
    <class kind="class">gtsam::TangentPreintegration</class>
    <class kind="class">gtsam::TbbOpenMPMixedScope</class>
    <class kind="struct">gtsam::Testable</class>
    <class kind="class">gtsam::ThreadsafeException</class>
    <class kind="class">gtsam::TOAFactor</class>
    <class kind="struct">gtsam::traits</class>
    <class kind="struct">gtsam::traits&lt; BearingFactor&lt; A1, A2, T &gt; &gt;</class>
    <class kind="struct">gtsam::traits&lt; BearingRange&lt; A1, A2 &gt; &gt;</class>
    <class kind="struct">gtsam::traits&lt; BearingRangeFactor&lt; A1, A2, B, R &gt; &gt;</class>
    <class kind="struct">gtsam::traits&lt; BetweenConstraint&lt; VALUE &gt; &gt;</class>
    <class kind="struct">gtsam::traits&lt; BetweenFactor&lt; VALUE &gt; &gt;</class>
    <class kind="struct">gtsam::traits&lt; BinaryJacobianFactor&lt; M, N1, N2 &gt; &gt;</class>
    <class kind="struct">gtsam::traits&lt; Cal3_S2 &gt;</class>
    <class kind="struct">gtsam::traits&lt; Cal3_S2Stereo &gt;</class>
    <class kind="struct">gtsam::traits&lt; Cal3Bundler &gt;</class>
    <class kind="struct">gtsam::traits&lt; Cal3DS2 &gt;</class>
    <class kind="struct">gtsam::traits&lt; Cal3Fisheye &gt;</class>
    <class kind="struct">gtsam::traits&lt; Cal3Unified &gt;</class>
    <class kind="struct">gtsam::traits&lt; CalibratedCamera &gt;</class>
    <class kind="struct">gtsam::traits&lt; CameraSet&lt; CAMERA &gt; &gt;</class>
    <class kind="struct">gtsam::traits&lt; CombinedImuFactor &gt;</class>
    <class kind="struct">gtsam::traits&lt; ConcurrentBatchFilter &gt;</class>
    <class kind="struct">gtsam::traits&lt; ConcurrentBatchSmoother &gt;</class>
    <class kind="struct">gtsam::traits&lt; ConcurrentIncrementalFilter &gt;</class>
    <class kind="struct">gtsam::traits&lt; ConcurrentIncrementalSmoother &gt;</class>
    <class kind="struct">gtsam::traits&lt; const Cal3_S2 &gt;</class>
    <class kind="struct">gtsam::traits&lt; const Cal3_S2Stereo &gt;</class>
    <class kind="struct">gtsam::traits&lt; const Cal3Bundler &gt;</class>
    <class kind="struct">gtsam::traits&lt; const Cal3DS2 &gt;</class>
    <class kind="struct">gtsam::traits&lt; const Cal3Fisheye &gt;</class>
    <class kind="struct">gtsam::traits&lt; const Cal3Unified &gt;</class>
    <class kind="struct">gtsam::traits&lt; const CalibratedCamera &gt;</class>
    <class kind="struct">gtsam::traits&lt; const CameraSet&lt; CAMERA &gt; &gt;</class>
    <class kind="struct">gtsam::traits&lt; const EssentialMatrix &gt;</class>
    <class kind="struct">gtsam::traits&lt; const Line3 &gt;</class>
    <class kind="struct">gtsam::traits&lt; const OrientedPlane3 &gt;</class>
    <class kind="struct">gtsam::traits&lt; const PinholeCamera&lt; Calibration &gt; &gt;</class>
    <class kind="struct">gtsam::traits&lt; const PinholePose&lt; CALIBRATION &gt; &gt;</class>
    <class kind="struct">gtsam::traits&lt; const PinholeSet&lt; CAMERA &gt; &gt;</class>
    <class kind="struct">gtsam::traits&lt; const Pose2 &gt;</class>
    <class kind="struct">gtsam::traits&lt; const Pose3 &gt;</class>
    <class kind="struct">gtsam::traits&lt; const Rot2 &gt;</class>
    <class kind="struct">gtsam::traits&lt; const Rot3 &gt;</class>
    <class kind="struct">gtsam::traits&lt; const Similarity3 &gt;</class>
    <class kind="struct">gtsam::traits&lt; const SO3 &gt;</class>
    <class kind="struct">gtsam::traits&lt; const SO4 &gt;</class>
    <class kind="struct">gtsam::traits&lt; const SO&lt; N &gt; &gt;</class>
    <class kind="struct">gtsam::traits&lt; const StereoCamera &gt;</class>
    <class kind="struct">gtsam::traits&lt; const StereoPoint2 &gt;</class>
    <class kind="struct">gtsam::traits&lt; const Unit3 &gt;</class>
    <class kind="struct">gtsam::traits&lt; Cyclic&lt; N &gt; &gt;</class>
    <class kind="struct">gtsam::traits&lt; DecisionTreeFactor &gt;</class>
    <class kind="struct">gtsam::traits&lt; DirectProduct&lt; G, H &gt; &gt;</class>
    <class kind="struct">gtsam::traits&lt; DirectSum&lt; G, H &gt; &gt;</class>
    <class kind="struct">gtsam::traits&lt; DiscreteBayesNet &gt;</class>
    <class kind="struct">gtsam::traits&lt; DiscreteConditional &gt;</class>
    <class kind="struct">gtsam::traits&lt; DiscreteFactor &gt;</class>
    <class kind="struct">gtsam::traits&lt; DiscreteFactor::Values &gt;</class>
    <class kind="struct">gtsam::traits&lt; DiscreteFactorGraph &gt;</class>
    <class kind="struct">gtsam::traits&lt; double &gt;</class>
    <class kind="struct">gtsam::traits&lt; Eigen::Matrix&lt; double, -1, -1, Options, MaxRows, MaxCols &gt; &gt;</class>
    <class kind="struct">gtsam::traits&lt; Eigen::Matrix&lt; double, -1, 1, Options, MaxRows, MaxCols &gt; &gt;</class>
    <class kind="struct">gtsam::traits&lt; Eigen::Matrix&lt; double, 1, -1, Options, MaxRows, MaxCols &gt; &gt;</class>
    <class kind="struct">gtsam::traits&lt; Eigen::Matrix&lt; double, M, N, Options, MaxRows, MaxCols &gt; &gt;</class>
    <class kind="struct">gtsam::traits&lt; EqualityFactorGraph &gt;</class>
    <class kind="struct">gtsam::traits&lt; Errors &gt;</class>
    <class kind="struct">gtsam::traits&lt; EssentialMatrix &gt;</class>
    <class kind="struct">gtsam::traits&lt; ExpressionFactor&lt; T &gt; &gt;</class>
    <class kind="struct">gtsam::traits&lt; ExpressionFactorN&lt; T, Args... &gt; &gt;</class>
    <class kind="struct">gtsam::traits&lt; float &gt;</class>
    <class kind="struct">gtsam::traits&lt; FunctorizedFactor2&lt; R, T1, T2 &gt; &gt;</class>
    <class kind="struct">gtsam::traits&lt; FunctorizedFactor&lt; R, T &gt; &gt;</class>
    <class kind="struct">gtsam::traits&lt; GaussianBayesNet &gt;</class>
    <class kind="struct">gtsam::traits&lt; GaussianBayesTree &gt;</class>
    <class kind="struct">gtsam::traits&lt; GaussianConditional &gt;</class>
    <class kind="struct">gtsam::traits&lt; GaussianFactor &gt;</class>
    <class kind="struct">gtsam::traits&lt; GaussianFactorGraph &gt;</class>
    <class kind="struct">gtsam::traits&lt; GaussianISAM &gt;</class>
    <class kind="struct">gtsam::traits&lt; GaussMarkov1stOrderFactor&lt; VALUE &gt; &gt;</class>
    <class kind="struct">gtsam::traits&lt; GeneralSFMFactor2&lt; CALIBRATION &gt; &gt;</class>
    <class kind="struct">gtsam::traits&lt; GeneralSFMFactor&lt; CAMERA, LANDMARK &gt; &gt;</class>
    <class kind="struct">gtsam::traits&lt; GenericProjectionFactor&lt; POSE, LANDMARK, CALIBRATION &gt; &gt;</class>
    <class kind="struct">gtsam::traits&lt; GenericStereoFactor&lt; T1, T2 &gt; &gt;</class>
    <class kind="struct">gtsam::traits&lt; GenericValue&lt; ValueType &gt; &gt;</class>
    <class kind="struct">gtsam::traits&lt; HessianFactor &gt;</class>
    <class kind="struct">gtsam::traits&lt; imuBias::ConstantBias &gt;</class>
    <class kind="struct">gtsam::traits&lt; ImuFactor &gt;</class>
    <class kind="struct">gtsam::traits&lt; ImuFactor2 &gt;</class>
    <class kind="struct">gtsam::traits&lt; InequalityFactorGraph &gt;</class>
    <class kind="struct">gtsam::traits&lt; InertialNavFactor_GlobalVelocity&lt; POSE, VELOCITY, IMUBIAS &gt; &gt;</class>
    <class kind="struct">gtsam::traits&lt; ISAM2 &gt;</class>
    <class kind="struct">gtsam::traits&lt; JacobianFactor &gt;</class>
    <class kind="struct">gtsam::traits&lt; JacobianFactorQ&lt; D, ZDim &gt; &gt;</class>
    <class kind="struct">gtsam::traits&lt; Key &gt;</class>
    <class kind="struct">gtsam::traits&lt; LabeledSymbol &gt;</class>
    <class kind="struct">gtsam::traits&lt; Line3 &gt;</class>
    <class kind="struct">gtsam::traits&lt; LinearContainerFactor &gt;</class>
    <class kind="struct">gtsam::traits&lt; LinearCost &gt;</class>
    <class kind="struct">gtsam::traits&lt; LinearEquality &gt;</class>
    <class kind="struct">gtsam::traits&lt; LinearInequality &gt;</class>
    <class kind="struct">gtsam::traits&lt; LinearizedHessianFactor &gt;</class>
    <class kind="struct">gtsam::traits&lt; LinearizedJacobianFactor &gt;</class>
    <class kind="struct">gtsam::traits&lt; LP &gt;</class>
    <class kind="struct">gtsam::traits&lt; NavState &gt;</class>
    <class kind="struct">gtsam::traits&lt; noiseModel::Constrained &gt;</class>
    <class kind="struct">gtsam::traits&lt; noiseModel::Diagonal &gt;</class>
    <class kind="struct">gtsam::traits&lt; noiseModel::Gaussian &gt;</class>
    <class kind="struct">gtsam::traits&lt; noiseModel::Isotropic &gt;</class>
    <class kind="struct">gtsam::traits&lt; noiseModel::Unit &gt;</class>
    <class kind="struct">gtsam::traits&lt; NonlinearEquality1&lt; VALUE &gt; &gt;</class>
    <class kind="struct">gtsam::traits&lt; NonlinearEquality2&lt; VALUE &gt; &gt;</class>
    <class kind="struct">gtsam::traits&lt; NonlinearEquality&lt; VALUE &gt; &gt;</class>
    <class kind="struct">gtsam::traits&lt; NonlinearFactor &gt;</class>
    <class kind="struct">gtsam::traits&lt; NonlinearFactorGraph &gt;</class>
    <class kind="struct">gtsam::traits&lt; Ordering &gt;</class>
    <class kind="struct">gtsam::traits&lt; OrientedPlane3 &gt;</class>
    <class kind="struct">gtsam::traits&lt; ParameterMatrix&lt; M &gt; &gt;</class>
    <class kind="struct">gtsam::traits&lt; PinholeCamera&lt; Calibration &gt; &gt;</class>
    <class kind="struct">gtsam::traits&lt; PinholePose&lt; CALIBRATION &gt; &gt;</class>
    <class kind="struct">gtsam::traits&lt; PinholeSet&lt; CAMERA &gt; &gt;</class>
    <class kind="struct">gtsam::traits&lt; Pose2 &gt;</class>
    <class kind="struct">gtsam::traits&lt; Pose3 &gt;</class>
    <class kind="struct">gtsam::traits&lt; Pose3AttitudeFactor &gt;</class>
    <class kind="struct">gtsam::traits&lt; PoseRTV &gt;</class>
    <class kind="struct">gtsam::traits&lt; Potentials &gt;</class>
    <class kind="struct">gtsam::traits&lt; Potentials::ADT &gt;</class>
    <class kind="struct">gtsam::traits&lt; PreintegratedCombinedMeasurements &gt;</class>
    <class kind="struct">gtsam::traits&lt; PreintegratedImuMeasurements &gt;</class>
    <class kind="struct">gtsam::traits&lt; PreintegratedRotation &gt;</class>
    <class kind="struct">gtsam::traits&lt; PreintegrationCombinedParams &gt;</class>
    <class kind="struct">gtsam::traits&lt; PriorFactor&lt; VALUE &gt; &gt;</class>
    <class kind="struct">gtsam::traits&lt; ProductLieGroup&lt; G, H &gt; &gt;</class>
    <class kind="struct">gtsam::traits&lt; ProjectionFactorPPP&lt; POSE, LANDMARK, CALIBRATION &gt; &gt;</class>
    <class kind="struct">gtsam::traits&lt; ProjectionFactorPPPC&lt; POSE, LANDMARK, CALIBRATION &gt; &gt;</class>
    <class kind="struct">gtsam::traits&lt; ProjectionFactorRollingShutter &gt;</class>
    <class kind="struct">gtsam::traits&lt; QUATERNION_TYPE &gt;</class>
    <class kind="struct">gtsam::traits&lt; RangeFactor&lt; A1, A2, T &gt; &gt;</class>
    <class kind="struct">gtsam::traits&lt; RangeFactorWithTransform&lt; A1, A2, T &gt; &gt;</class>
    <class kind="struct">gtsam::traits&lt; ReferenceFrameFactor&lt; T1, T2 &gt; &gt;</class>
    <class kind="struct">gtsam::traits&lt; RegularHessianFactor&lt; D &gt; &gt;</class>
    <class kind="struct">gtsam::traits&lt; RegularImplicitSchurFactor&lt; CAMERA &gt; &gt;</class>
    <class kind="struct">gtsam::traits&lt; Rot2 &gt;</class>
    <class kind="struct">gtsam::traits&lt; Rot3 &gt;</class>
    <class kind="struct">gtsam::traits&lt; Rot3AttitudeFactor &gt;</class>
    <class kind="struct">gtsam::traits&lt; SfmData &gt;</class>
    <class kind="struct">gtsam::traits&lt; SfmTrack &gt;</class>
    <class kind="struct">gtsam::traits&lt; Similarity3 &gt;</class>
    <class kind="struct">gtsam::traits&lt; SmartProjectionFactor&lt; CAMERA &gt; &gt;</class>
    <class kind="struct">gtsam::traits&lt; SmartProjectionPoseFactor&lt; CALIBRATION &gt; &gt;</class>
    <class kind="struct">gtsam::traits&lt; SmartProjectionPoseFactorRollingShutter&lt; CAMERA &gt; &gt;</class>
    <class kind="struct">gtsam::traits&lt; SmartProjectionRigFactor&lt; CAMERA &gt; &gt;</class>
    <class kind="struct">gtsam::traits&lt; SmartStereoProjectionFactor &gt;</class>
    <class kind="struct">gtsam::traits&lt; SmartStereoProjectionFactorPP &gt;</class>
    <class kind="struct">gtsam::traits&lt; SmartStereoProjectionPoseFactor &gt;</class>
    <class kind="struct">gtsam::traits&lt; SO3 &gt;</class>
    <class kind="struct">gtsam::traits&lt; SO4 &gt;</class>
    <class kind="struct">gtsam::traits&lt; SO&lt; N &gt; &gt;</class>
    <class kind="struct">gtsam::traits&lt; StereoCamera &gt;</class>
    <class kind="struct">gtsam::traits&lt; StereoPoint2 &gt;</class>
    <class kind="struct">gtsam::traits&lt; Symbol &gt;</class>
    <class kind="struct">gtsam::traits&lt; SymbolicBayesNet &gt;</class>
    <class kind="struct">gtsam::traits&lt; SymbolicBayesTree &gt;</class>
    <class kind="struct">gtsam::traits&lt; SymbolicBayesTreeClique &gt;</class>
    <class kind="struct">gtsam::traits&lt; SymbolicConditional &gt;</class>
    <class kind="struct">gtsam::traits&lt; SymbolicEliminationTree &gt;</class>
    <class kind="struct">gtsam::traits&lt; SymbolicFactor &gt;</class>
    <class kind="struct">gtsam::traits&lt; SymbolicFactorGraph &gt;</class>
    <class kind="struct">gtsam::traits&lt; TransformBtwRobotsUnaryFactor&lt; VALUE &gt; &gt;</class>
    <class kind="struct">gtsam::traits&lt; TransformBtwRobotsUnaryFactorEM&lt; VALUE &gt; &gt;</class>
    <class kind="struct">gtsam::traits&lt; Unit3 &gt;</class>
    <class kind="struct">gtsam::traits&lt; Values &gt;</class>
    <class kind="struct">gtsam::traits&lt; VariableIndex &gt;</class>
    <class kind="struct">gtsam::traits&lt; VariableSlots &gt;</class>
    <class kind="struct">gtsam::traits&lt; VectorValues &gt;</class>
    <class kind="class">gtsam::TransformBtwRobotsUnaryFactor</class>
    <class kind="class">gtsam::TransformBtwRobotsUnaryFactorEM</class>
    <class kind="class">gtsam::TransformCovariance</class>
    <class kind="class">gtsam::TranslationFactor</class>
    <class kind="class">gtsam::TranslationRecovery</class>
    <class kind="class">gtsam::TriangulationCheiralityException</class>
    <class kind="class">gtsam::TriangulationFactor</class>
    <class kind="struct">gtsam::TriangulationParameters</class>
    <class kind="class">gtsam::TriangulationResult</class>
    <class kind="class">gtsam::TriangulationUnderconstrainedException</class>
    <class kind="class">gtsam::Unit3</class>
    <class kind="struct">gtsam::UpdateImpl</class>
    <class kind="class">gtsam::Value</class>
    <class kind="class">gtsam::ValueCloneAllocator</class>
    <class kind="class">gtsam::Values</class>
    <class kind="struct">gtsam::ValuesCastHelper</class>
    <class kind="struct">gtsam::ValuesCastHelper&lt; const Value, CastedKeyValuePairType, KeyValuePairType &gt;</class>
    <class kind="struct">gtsam::ValuesCastHelper&lt; Value, CastedKeyValuePairType, KeyValuePairType &gt;</class>
    <class kind="class">gtsam::ValuesIncorrectType</class>
    <class kind="class">gtsam::ValuesKeyAlreadyExists</class>
    <class kind="class">gtsam::ValuesKeyDoesNotExist</class>
    <class kind="struct">gtsam::ValueWithDefault</class>
    <class kind="class">gtsam::VariableIndex</class>
    <class kind="class">gtsam::VariableSlots</class>
    <class kind="struct">gtsam::vector_space_tag</class>
    <class kind="class">gtsam::VectorComponentFactor</class>
    <class kind="class">gtsam::VectorDerivativeFactor</class>
    <class kind="class">gtsam::VectorEvaluationFactor</class>
    <class kind="class">gtsam::VectorValues</class>
    <class kind="class">gtsam::VelocityConstraint</class>
    <class kind="class">gtsam::VelocityConstraint3</class>
    <class kind="struct">gtsam::VelocityPrior</class>
    <class kind="class">gtsam::VerticalBlockMatrix</class>
    <class kind="class">gtsam::WeightedSampler</class>
    <class kind="class">gtsam::WhiteNoiseFactor</class>
    <member kind="typedef">
      <type>typename std::enable_if&lt; B, T &gt;::type</type>
      <name>enable_if_t</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>a47e06cd29f4e8a20a8a7842e4045845f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::uint64_t</type>
      <name>Key</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>adad029f5f6ffce610428b5fe768b0df2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::uint64_t</type>
      <name>FactorIndex</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>a19c53f2faabb0f4b4b78ce2f7168cc14</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ptrdiff_t</type>
      <name>DenseIndex</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>a21006f326f57cdf7d3f35fec40f43e40</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>void</type>
      <name>void_t</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>a6525d741529c7a2cd91fa913431f5fb7</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::map&lt; double, double &gt;</type>
      <name>Sequence</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>a24ec5d6ec6b211d0cbaf645c11c198de</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::pair&lt; double, double &gt;</type>
      <name>Sample</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>a9920fe883a2f506440aca7c1a2bd1a00</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::pair&lt; Key, size_t &gt;</type>
      <name>DiscreteKey</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>acd19e5d1e5d06c37246d4c15af38ee67</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Vector2</type>
      <name>Point2</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>a6ede8384dee0353a0ce5fb54ea50c21d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::pair&lt; Point2, Point2 &gt;</type>
      <name>Point2Pair</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>aea758f150791443afe1191868963b4e1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Vector3</type>
      <name>Point3</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>aaa8ed89fd60ea4601d9de63c4811525b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>gtsam::PinholeCamera&lt; gtsam::Cal3_S2 &gt;</type>
      <name>PinholeCameraCal3_S2</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>a3a2e8c622e65623a6853c84073bdb4f2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>FastVector&lt; FactorIndex &gt;</type>
      <name>FactorIndices</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>a99e63c90a8ac740d99716e73fe97e054</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::function&lt; std::string(Key)&gt;</type>
      <name>KeyFormatter</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>ae4b4e8e7f0d745882c6a02b507d5bffe</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>FastVector&lt; Key &gt;</type>
      <name>KeyVector</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>a1c320e42b033352fbbd8266e3bd5faad</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>noiseModel::Base::shared_ptr</type>
      <name>SharedNoiseModel</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>ab6e5a4884342656e0837ef07008ec03f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Eigen::SparseMatrix&lt; double, Eigen::ColMajor, int &gt;</type>
      <name>SparseEigen</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>a52b9b28b076a8ae17d6d3d72ee1229c3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Vector3</type>
      <name>Velocity3</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>ad6ba0a40d5dd8936f4ca53f7bb3ef53b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::pair&lt; size_t, Pose2 &gt;</type>
      <name>IndexedPose</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>a6ab764d13f9aaeafc2dc60763b05ec0e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::pair&lt; NonlinearFactorGraph::shared_ptr, Values::shared_ptr &gt;</type>
      <name>GraphAndValues</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>abcc5d1ec05ddc954d5de28929acabbdf</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::pair&lt; size_t, Point2 &gt;</type>
      <name>SfmMeasurement</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>a9ad7940245bbbf4bf25d1dc4690b0108</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::pair&lt; size_t, size_t &gt;</type>
      <name>SiftIndex</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>a21a02e01a9608ce6cade24c1366b208c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>PinholeCamera&lt; Cal3Bundler &gt;</type>
      <name>SfmCamera</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>acab0207730cf78822bdf274b50739d31</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::map&lt; Key, size_t &gt;</type>
      <name>KeyDimMap</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>a56e7423b122a2ac2a9ba1a07546516a5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ConcurrentBatchFilter::Result</type>
      <name>ConcurrentBatchFilterResult</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>a48e3e10fd7b2e4e28d57370b8ee63c75</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ConcurrentBatchSmoother::Result</type>
      <name>ConcurrentBatchSmootherResult</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>a630a70c8307aedd4cca4556d751581ff</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ConcurrentIncrementalFilter::Result</type>
      <name>ConcurrentIncrementalFilterResult</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>a86ade83ffa0c2e87948350a487bc986a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ConcurrentIncrementalSmoother::Result</type>
      <name>ConcurrentIncrementalSmootherResult</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>ab1c68e081eba4a337a9e97a11cfb1bdc</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>FixedLagSmoother::KeyTimestampMap</type>
      <name>FixedLagSmootherKeyTimestampMap</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>aa2a302ee683dae9b50409588c07669d7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>GncLossType</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>a7527de605f5b7c0224c97b5312d816e8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>NoiseFormat</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>a90552b70a2da9c74595cae4b05c2ce18</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NoiseFormatG2O</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>a90552b70a2da9c74595cae4b05c2ce18ad0aaa5c51a45cb7c9151aae60a603209</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NoiseFormatTORO</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>a90552b70a2da9c74595cae4b05c2ce18a3790bc2c6f11cd7da84730b33173de5a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NoiseFormatGRAPH</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>a90552b70a2da9c74595cae4b05c2ce18a1f8edeb25c58a249789556c686265a4c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NoiseFormatCOV</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>a90552b70a2da9c74595cae4b05c2ce18a5450a16f3522214ccdfa23c461e7d05a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NoiseFormatAUTO</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>a90552b70a2da9c74595cae4b05c2ce18a2f9067b8f5bd2d0dd38c49326a4c070e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>KernelFunctionType</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>a8be373f34edc0a9d28b1bfab5dd62ba0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>LinearizationMode</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>adf2020f3f6087064dde501c99794aac3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>DegeneracyMode</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>ac3d021280c8a8b84903a8ce81f73ea0f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>pair&lt; size_t, bool &gt;</type>
      <name>choleskyCareful</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>a747683f736c50bca16b3aab0e95b1b76</anchor>
      <arglist>(Matrix &amp;ATA, int order=-1)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>choleskyPartial</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>abe82fa6aceccfa2360cf314ab44f39ad</anchor>
      <arglist>(Matrix &amp;ABC, size_t nFrontal, size_t topleft=0)</arglist>
    </member>
    <member kind="function">
      <type>GenericValue&lt; T &gt;</type>
      <name>genericValue</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>ae7aea35c31bdd409313b52d451b18649</anchor>
      <arglist>(const T &amp;v)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BOOST_CONCEPT_REQUIRES</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>a2e95b5b5508cf3284107e979401bd1a4</anchor>
      <arglist>(((IsGroup&lt; G &gt;)),(bool)) check_group_invariants(const G &amp;a</arglist>
    </member>
    <member kind="function">
      <type>Class</type>
      <name>between_default</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>abd92914d0822d42584d46f31fb500048</anchor>
      <arglist>(const Class &amp;l1, const Class &amp;l2)</arglist>
    </member>
    <member kind="function">
      <type>Vector</type>
      <name>logmap_default</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>a5c6ccec4a3ea452361c0956766bccef5</anchor>
      <arglist>(const Class &amp;l0, const Class &amp;lp)</arglist>
    </member>
    <member kind="function">
      <type>Class</type>
      <name>expmap_default</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>af5a7c0a7422c38a0baa131c073e233ac</anchor>
      <arglist>(const Class &amp;t, const Vector &amp;d)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>BCH</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>adbd55c711e6ceee791b595558eb3ec8a</anchor>
      <arglist>(const T &amp;X, const T &amp;Y)</arglist>
    </member>
    <member kind="function">
      <type>Matrix</type>
      <name>wedge</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>afe28b7f8e3592fb9f5cf9ebae09497ba</anchor>
      <arglist>(const Vector &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>expm</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>a3041816208c79ef76d3ef2e0991d90b2</anchor>
      <arglist>(const Vector &amp;x, int K=7)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>interpolate</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>adaf06b04fa93b050e99bc3d571d85d53</anchor>
      <arglist>(const T &amp;X, const T &amp;Y, double t, typename MakeOptionalJacobian&lt; T, T &gt;::type Hx=boost::none, typename MakeOptionalJacobian&lt; T, T &gt;::type Hy=boost::none)</arglist>
    </member>
    <member kind="function">
      <type>gtsam::enable_if_t&lt; needs_eigen_aligned_allocator&lt; T &gt;::value, boost::shared_ptr&lt; T &gt; &gt;</type>
      <name>make_shared</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>abcb9ece2bd206193ac40f118f1815c0e</anchor>
      <arglist>(Args &amp;&amp;... args)</arglist>
    </member>
    <member kind="function">
      <type>gtsam::enable_if_t&lt;!needs_eigen_aligned_allocator&lt; T &gt;::value, boost::shared_ptr&lt; T &gt; &gt;</type>
      <name>make_shared</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>a6f805b32c5544e5552d702d5e2b4e801</anchor>
      <arglist>(Args &amp;&amp;... args)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BOOST_CONCEPT_REQUIRES</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>ae03a6aedf0a82f67c2f3e987fb3aacba</anchor>
      <arglist>(((IsTestable&lt; T &gt;)),(bool)) check_manifold_invariants(const T &amp;a</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>assert_equal</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>a3f9622226dfe06908f11b42bf0bdd22d</anchor>
      <arglist>(const Matrix &amp;A, const Matrix &amp;B, double tol=1e-9)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>assert_inequal</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>a7a116d0643f123ef3b15d91056506492</anchor>
      <arglist>(const Matrix &amp;A, const Matrix &amp;B, double tol=1e-9)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>assert_equal</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>abb0e19bbbeaca95843e8161b89a12fda</anchor>
      <arglist>(const std::list&lt; Matrix &gt; &amp;As, const std::list&lt; Matrix &gt; &amp;Bs, double tol=1e-9)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>linear_independent</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>ad8f0349471464c1fb515819d9503849a</anchor>
      <arglist>(const Matrix &amp;A, const Matrix &amp;B, double tol=1e-9)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>linear_dependent</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>a4b81794af72954abafbb726fc712f5db</anchor>
      <arglist>(const Matrix &amp;A, const Matrix &amp;B, double tol=1e-9)</arglist>
    </member>
    <member kind="function">
      <type>Vector</type>
      <name>operator^</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>a2218e53a2b99c449e70aa5b7805895fc</anchor>
      <arglist>(const Matrix &amp;A, const Vector &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>a54fa43c89c5334314c8c75939dd5c2d7</anchor>
      <arglist>(const Matrix &amp;A, const std::string &amp;s, std::ostream &amp;stream)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>a44ead03912d5dcf094d8421e1702ee71</anchor>
      <arglist>(const Matrix &amp;A, const std::string &amp;s=&quot;&quot;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>save</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>a3eb7eed9019d3fda8fcf74fbf85b85c9</anchor>
      <arglist>(const Matrix &amp;A, const std::string &amp;s, const std::string &amp;filename)</arglist>
    </member>
    <member kind="function">
      <type>istream &amp;</type>
      <name>operator&gt;&gt;</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>a7d85957bab2d18cf56ab9aaf95a106de</anchor>
      <arglist>(std::istream &amp;inputStream, Matrix &amp;destinationMatrix)</arglist>
    </member>
    <member kind="function">
      <type>Matrix</type>
      <name>diag</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>af1c32907adce74cf9edd6ee5bba5a085</anchor>
      <arglist>(const std::vector&lt; Matrix &gt; &amp;Hs)</arglist>
    </member>
    <member kind="function">
      <type>pair&lt; Matrix, Matrix &gt;</type>
      <name>qr</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>ae32c295e2c40c1e85f146a8a6266eaa8</anchor>
      <arglist>(const Matrix &amp;A)</arglist>
    </member>
    <member kind="function">
      <type>list&lt; boost::tuple&lt; Vector, double, double &gt; &gt;</type>
      <name>weighted_eliminate</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>a60019a03f26b92c6b2a08e43d153d4c0</anchor>
      <arglist>(Matrix &amp;A, Vector &amp;b, const Vector &amp;sigmas)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>householder_</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>abdd1ab05e8ac90b340fbd8f3b322dc6d</anchor>
      <arglist>(Matrix &amp;A, size_t k, bool copy_vectors)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>householder</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>a7baa2f3184a444adce108633c0265e0c</anchor>
      <arglist>(Matrix &amp;A, size_t k)</arglist>
    </member>
    <member kind="function">
      <type>Vector</type>
      <name>backSubstituteLower</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>a0d998e1b770c9864946ddb031b1c4522</anchor>
      <arglist>(const Matrix &amp;L, const Vector &amp;b, bool unit=false)</arglist>
    </member>
    <member kind="function">
      <type>Vector</type>
      <name>backSubstituteUpper</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>a6c4876cbe85d5651a52eda0e97c60f2f</anchor>
      <arglist>(const Matrix &amp;U, const Vector &amp;b, bool unit=false)</arglist>
    </member>
    <member kind="function">
      <type>Vector</type>
      <name>backSubstituteUpper</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>a8b0bf332d52b333dab2b20d763c8925b</anchor>
      <arglist>(const Vector &amp;b, const Matrix &amp;U, bool unit=false)</arglist>
    </member>
    <member kind="function">
      <type>Matrix</type>
      <name>stack</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>a5c82884a356ddd09229a5283aed04df9</anchor>
      <arglist>(size_t nrMatrices,...)</arglist>
    </member>
    <member kind="function">
      <type>Matrix</type>
      <name>collect</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>ad8b524ba6c9aed0d21a020999c9b5d88</anchor>
      <arglist>(const std::vector&lt; const Matrix * &gt; &amp;matrices, size_t m=0, size_t n=0)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>vector_scale_inplace</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>a24d3ad0252f91f0ec301593c45cf5af7</anchor>
      <arglist>(const Vector &amp;v, Matrix &amp;A, bool inf_mask=false)</arglist>
    </member>
    <member kind="function">
      <type>Matrix</type>
      <name>cholesky_inverse</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>aba542e2cd85f08b76f80a0871a4ea713</anchor>
      <arglist>(const Matrix &amp;A)</arglist>
    </member>
    <member kind="function">
      <type>Matrix</type>
      <name>inverse_square_root</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>aff78dee59ac0250432081f39deb5f6d1</anchor>
      <arglist>(const Matrix &amp;A)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>svd</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>a8d7e46204d953f64a39445599dbd7eee</anchor>
      <arglist>(const Matrix &amp;A, Matrix &amp;U, Vector &amp;S, Matrix &amp;V)</arglist>
    </member>
    <member kind="function">
      <type>boost::tuple&lt; int, double, Vector &gt;</type>
      <name>DLT</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>ab2c65f1a69009a306b6a5f9ef31dcee2</anchor>
      <arglist>(const Matrix &amp;A, double rank_tol=1e-9)</arglist>
    </member>
    <member kind="function">
      <type>Matrix</type>
      <name>expm</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>ab15462d8c16813d0a7a5b1f76a2f64b7</anchor>
      <arglist>(const Matrix &amp;A, size_t K=7)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>inplace_QR</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>a7eec9339ab5a008a28ddfaa6b2c94611</anchor>
      <arglist>(Matrix &amp;A)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>equal_with_abs_tol</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>af31e657258505b2e5148846ebbaa3195</anchor>
      <arglist>(const Eigen::DenseBase&lt; MATRIX &gt; &amp;A, const Eigen::DenseBase&lt; MATRIX &gt; &amp;B, double tol=1e-9)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>afd5b3cf3f54adcbdd6d9e7403f1a792f</anchor>
      <arglist>(const Matrix &amp;A, const Matrix &amp;B)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>ab235abf7505b634be2165e0db58239dd</anchor>
      <arglist>(const Matrix &amp;A, const Matrix &amp;B)</arglist>
    </member>
    <member kind="function">
      <type>MATRIX</type>
      <name>prod</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>abc29e3164ed30e785a3c48dfd1aa6ca5</anchor>
      <arglist>(const MATRIX &amp;A, const MATRIX &amp;B)</arglist>
    </member>
    <member kind="function">
      <type>Eigen::Block&lt; const MATRIX &gt;</type>
      <name>sub</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>a9ae1d9fe2ccad044fbb88b5c1d9e035a</anchor>
      <arglist>(const MATRIX &amp;A, size_t i1, size_t i2, size_t j1, size_t j2)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>insertSub</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>ad1088fa2d1494e6a4123a6bc3f5c2d7e</anchor>
      <arglist>(Eigen::MatrixBase&lt; Derived1 &gt; &amp;fullMatrix, const Eigen::MatrixBase&lt; Derived2 &gt; &amp;subMatrix, size_t i, size_t j)</arglist>
    </member>
    <member kind="function">
      <type>const MATRIX::ConstColXpr</type>
      <name>column</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>a559dba69e2854eb66e34222f60f55722</anchor>
      <arglist>(const MATRIX &amp;A, size_t j)</arglist>
    </member>
    <member kind="function">
      <type>const MATRIX::ConstRowXpr</type>
      <name>row</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>a2754f325c8600303d627d9e8cf1f9949</anchor>
      <arglist>(const MATRIX &amp;A, size_t j)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>zeroBelowDiagonal</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>a57edf6ed7312f63d35f73233665c334d</anchor>
      <arglist>(MATRIX &amp;A, size_t cols=0)</arglist>
    </member>
    <member kind="function">
      <type>Matrix</type>
      <name>trans</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>aa2e36d7ab63000feddaeb61bbfcf2db1</anchor>
      <arglist>(const Matrix &amp;A)</arglist>
    </member>
    <member kind="function">
      <type>Matrix3</type>
      <name>skewSymmetric</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>a97f108d19e52c83c331c55d35b23796e</anchor>
      <arglist>(double wx, double wy, double wz)</arglist>
    </member>
    <member kind="function">
      <type>Eigen::Matrix&lt; double, N, 1 &gt;</type>
      <name>numericalGradient</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>afd8862271510196ec4e2d894f623942d</anchor>
      <arglist>(std::function&lt; double(const X &amp;)&gt; h, const X &amp;x, double delta=1e-5)</arglist>
    </member>
    <member kind="function">
      <type>internal::FixedSizeMatrix&lt; Y, X &gt;::type</type>
      <name>numericalDerivative11</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>a581a9f8db043590096fbac682b8f6a93</anchor>
      <arglist>(std::function&lt; Y(const X &amp;)&gt; h, const X &amp;x, double delta=1e-5)</arglist>
    </member>
    <member kind="function">
      <type>internal::FixedSizeMatrix&lt; Y, X &gt;::type</type>
      <name>numericalDerivative11</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>a4c4c5744f0b348d4ec6c047f796e7924</anchor>
      <arglist>(Y(*h)(const X &amp;), const X &amp;x, double delta=1e-5)</arglist>
    </member>
    <member kind="function">
      <type>internal::FixedSizeMatrix&lt; Y, X1 &gt;::type</type>
      <name>numericalDerivative21</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>a157eb3b44dd4e38bbd66f3cc68a20e43</anchor>
      <arglist>(const std::function&lt; Y(const X1 &amp;, const X2 &amp;)&gt; &amp;h, const X1 &amp;x1, const X2 &amp;x2, double delta=1e-5)</arglist>
    </member>
    <member kind="function">
      <type>internal::FixedSizeMatrix&lt; Y, X1 &gt;::type</type>
      <name>numericalDerivative21</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>afcc94e3b49906e824c01a3d56df62d33</anchor>
      <arglist>(Y(*h)(const X1 &amp;, const X2 &amp;), const X1 &amp;x1, const X2 &amp;x2, double delta=1e-5)</arglist>
    </member>
    <member kind="function">
      <type>internal::FixedSizeMatrix&lt; Y, X2 &gt;::type</type>
      <name>numericalDerivative22</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>a5b0db4ac5f279b12fc91fab4cb40b1bf</anchor>
      <arglist>(std::function&lt; Y(const X1 &amp;, const X2 &amp;)&gt; h, const X1 &amp;x1, const X2 &amp;x2, double delta=1e-5)</arglist>
    </member>
    <member kind="function">
      <type>internal::FixedSizeMatrix&lt; Y, X2 &gt;::type</type>
      <name>numericalDerivative22</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>a46d002a0529f1172aebb7e1d85d5c08c</anchor>
      <arglist>(Y(*h)(const X1 &amp;, const X2 &amp;), const X1 &amp;x1, const X2 &amp;x2, double delta=1e-5)</arglist>
    </member>
    <member kind="function">
      <type>internal::FixedSizeMatrix&lt; Y, X1 &gt;::type</type>
      <name>numericalDerivative31</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>aa8f0264edaf78d503809c1e3152340ee</anchor>
      <arglist>(std::function&lt; Y(const X1 &amp;, const X2 &amp;, const X3 &amp;)&gt; h, const X1 &amp;x1, const X2 &amp;x2, const X3 &amp;x3, double delta=1e-5)</arglist>
    </member>
    <member kind="function">
      <type>internal::FixedSizeMatrix&lt; Y, X2 &gt;::type</type>
      <name>numericalDerivative32</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>acfbadc0ab0cd9386205b2737c5d0b727</anchor>
      <arglist>(std::function&lt; Y(const X1 &amp;, const X2 &amp;, const X3 &amp;)&gt; h, const X1 &amp;x1, const X2 &amp;x2, const X3 &amp;x3, double delta=1e-5)</arglist>
    </member>
    <member kind="function">
      <type>internal::FixedSizeMatrix&lt; Y, X3 &gt;::type</type>
      <name>numericalDerivative33</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>a526a422ea611724345affed8b71d9bac</anchor>
      <arglist>(std::function&lt; Y(const X1 &amp;, const X2 &amp;, const X3 &amp;)&gt; h, const X1 &amp;x1, const X2 &amp;x2, const X3 &amp;x3, double delta=1e-5)</arglist>
    </member>
    <member kind="function">
      <type>internal::FixedSizeMatrix&lt; Y, X1 &gt;::type</type>
      <name>numericalDerivative41</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>a3b0937e08e79604ee6ab10fca6ffe65e</anchor>
      <arglist>(std::function&lt; Y(const X1 &amp;, const X2 &amp;, const X3 &amp;, const X4 &amp;)&gt; h, const X1 &amp;x1, const X2 &amp;x2, const X3 &amp;x3, const X4 &amp;x4, double delta=1e-5)</arglist>
    </member>
    <member kind="function">
      <type>internal::FixedSizeMatrix&lt; Y, X2 &gt;::type</type>
      <name>numericalDerivative42</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>af40f61e8eff01acdb028ad33b8f3529b</anchor>
      <arglist>(std::function&lt; Y(const X1 &amp;, const X2 &amp;, const X3 &amp;, const X4 &amp;)&gt; h, const X1 &amp;x1, const X2 &amp;x2, const X3 &amp;x3, const X4 &amp;x4, double delta=1e-5)</arglist>
    </member>
    <member kind="function">
      <type>internal::FixedSizeMatrix&lt; Y, X3 &gt;::type</type>
      <name>numericalDerivative43</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>a6846b5cc84c1d5a54a436121b27057e0</anchor>
      <arglist>(std::function&lt; Y(const X1 &amp;, const X2 &amp;, const X3 &amp;, const X4 &amp;)&gt; h, const X1 &amp;x1, const X2 &amp;x2, const X3 &amp;x3, const X4 &amp;x4, double delta=1e-5)</arglist>
    </member>
    <member kind="function">
      <type>internal::FixedSizeMatrix&lt; Y, X4 &gt;::type</type>
      <name>numericalDerivative44</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>a8061b20199f839b115512d95d058fcbf</anchor>
      <arglist>(std::function&lt; Y(const X1 &amp;, const X2 &amp;, const X3 &amp;, const X4 &amp;)&gt; h, const X1 &amp;x1, const X2 &amp;x2, const X3 &amp;x3, const X4 &amp;x4, double delta=1e-5)</arglist>
    </member>
    <member kind="function">
      <type>internal::FixedSizeMatrix&lt; Y, X1 &gt;::type</type>
      <name>numericalDerivative51</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>a272af6f7139b76d085279060646e32d1</anchor>
      <arglist>(std::function&lt; Y(const X1 &amp;, const X2 &amp;, const X3 &amp;, const X4 &amp;, const X5 &amp;)&gt; h, const X1 &amp;x1, const X2 &amp;x2, const X3 &amp;x3, const X4 &amp;x4, const X5 &amp;x5, double delta=1e-5)</arglist>
    </member>
    <member kind="function">
      <type>internal::FixedSizeMatrix&lt; Y, X2 &gt;::type</type>
      <name>numericalDerivative52</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>a722e98babba795ce480f89527b572251</anchor>
      <arglist>(std::function&lt; Y(const X1 &amp;, const X2 &amp;, const X3 &amp;, const X4 &amp;, const X5 &amp;)&gt; h, const X1 &amp;x1, const X2 &amp;x2, const X3 &amp;x3, const X4 &amp;x4, const X5 &amp;x5, double delta=1e-5)</arglist>
    </member>
    <member kind="function">
      <type>internal::FixedSizeMatrix&lt; Y, X3 &gt;::type</type>
      <name>numericalDerivative53</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>acc2f741132522a6ce57d544a27a95855</anchor>
      <arglist>(std::function&lt; Y(const X1 &amp;, const X2 &amp;, const X3 &amp;, const X4 &amp;, const X5 &amp;)&gt; h, const X1 &amp;x1, const X2 &amp;x2, const X3 &amp;x3, const X4 &amp;x4, const X5 &amp;x5, double delta=1e-5)</arglist>
    </member>
    <member kind="function">
      <type>internal::FixedSizeMatrix&lt; Y, X4 &gt;::type</type>
      <name>numericalDerivative54</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>a2cf5181fc7bca1ef6a1070959de7b975</anchor>
      <arglist>(std::function&lt; Y(const X1 &amp;, const X2 &amp;, const X3 &amp;, const X4 &amp;, const X5 &amp;)&gt; h, const X1 &amp;x1, const X2 &amp;x2, const X3 &amp;x3, const X4 &amp;x4, const X5 &amp;x5, double delta=1e-5)</arglist>
    </member>
    <member kind="function">
      <type>internal::FixedSizeMatrix&lt; Y, X5 &gt;::type</type>
      <name>numericalDerivative55</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>a5ca42a2fc87373c005299f3087995a97</anchor>
      <arglist>(std::function&lt; Y(const X1 &amp;, const X2 &amp;, const X3 &amp;, const X4 &amp;, const X5 &amp;)&gt; h, const X1 &amp;x1, const X2 &amp;x2, const X3 &amp;x3, const X4 &amp;x4, const X5 &amp;x5, double delta=1e-5)</arglist>
    </member>
    <member kind="function">
      <type>internal::FixedSizeMatrix&lt; Y, X1 &gt;::type</type>
      <name>numericalDerivative61</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>a0ca8a22de666bc39015da34f150df748</anchor>
      <arglist>(std::function&lt; Y(const X1 &amp;, const X2 &amp;, const X3 &amp;, const X4 &amp;, const X5 &amp;, const X6 &amp;)&gt; h, const X1 &amp;x1, const X2 &amp;x2, const X3 &amp;x3, const X4 &amp;x4, const X5 &amp;x5, const X6 &amp;x6, double delta=1e-5)</arglist>
    </member>
    <member kind="function">
      <type>internal::FixedSizeMatrix&lt; Y, X2 &gt;::type</type>
      <name>numericalDerivative62</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>ac224e2384e41171181b2dbc0f700cdc1</anchor>
      <arglist>(std::function&lt; Y(const X1 &amp;, const X2 &amp;, const X3 &amp;, const X4 &amp;, const X5 &amp;, const X6 &amp;)&gt; h, const X1 &amp;x1, const X2 &amp;x2, const X3 &amp;x3, const X4 &amp;x4, const X5 &amp;x5, const X6 &amp;x6, double delta=1e-5)</arglist>
    </member>
    <member kind="function">
      <type>internal::FixedSizeMatrix&lt; Y, X3 &gt;::type</type>
      <name>numericalDerivative63</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>a15c46aa999886d4ccd06ab73fc02db31</anchor>
      <arglist>(std::function&lt; Y(const X1 &amp;, const X2 &amp;, const X3 &amp;, const X4 &amp;, const X5 &amp;, const X6 &amp;)&gt; h, const X1 &amp;x1, const X2 &amp;x2, const X3 &amp;x3, const X4 &amp;x4, const X5 &amp;x5, const X6 &amp;x6, double delta=1e-5)</arglist>
    </member>
    <member kind="function">
      <type>internal::FixedSizeMatrix&lt; Y, X4 &gt;::type</type>
      <name>numericalDerivative64</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>a3eb3fef9c77920dfd9496e71a0bcf669</anchor>
      <arglist>(std::function&lt; Y(const X1 &amp;, const X2 &amp;, const X3 &amp;, const X4 &amp;, const X5 &amp;, const X6 &amp;)&gt; h, const X1 &amp;x1, const X2 &amp;x2, const X3 &amp;x3, const X4 &amp;x4, const X5 &amp;x5, const X6 &amp;x6, double delta=1e-5)</arglist>
    </member>
    <member kind="function">
      <type>internal::FixedSizeMatrix&lt; Y, X5 &gt;::type</type>
      <name>numericalDerivative65</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>a799c83517a20a8e0b0b014f26b50f660</anchor>
      <arglist>(std::function&lt; Y(const X1 &amp;, const X2 &amp;, const X3 &amp;, const X4 &amp;, const X5 &amp;, const X6 &amp;)&gt; h, const X1 &amp;x1, const X2 &amp;x2, const X3 &amp;x3, const X4 &amp;x4, const X5 &amp;x5, const X6 &amp;x6, double delta=1e-5)</arglist>
    </member>
    <member kind="function">
      <type>internal::FixedSizeMatrix&lt; Y, X6 &gt;::type</type>
      <name>numericalDerivative66</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>a4e010b7f436124b9b421ba7dc438d987</anchor>
      <arglist>(std::function&lt; Y(const X1 &amp;, const X2 &amp;, const X3 &amp;, const X4 &amp;, const X5 &amp;, const X6 &amp;)&gt; h, const X1 &amp;x1, const X2 &amp;x2, const X3 &amp;x3, const X4 &amp;x4, const X5 &amp;x5, const X6 &amp;x6, double delta=1e-5)</arglist>
    </member>
    <member kind="function">
      <type>internal::FixedSizeMatrix&lt; X, X &gt;::type</type>
      <name>numericalHessian</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>a11011d8e9bd69e486c9752875f710c18</anchor>
      <arglist>(std::function&lt; double(const X &amp;)&gt; f, const X &amp;x, double delta=1e-5)</arglist>
    </member>
    <member kind="function">
      <type>internal::FixedSizeMatrix&lt; X1, X1 &gt;::type</type>
      <name>numericalHessian311</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>a10295660c0177e08d45812fbb7e4c554</anchor>
      <arglist>(std::function&lt; double(const X1 &amp;, const X2 &amp;, const X3 &amp;)&gt; f, const X1 &amp;x1, const X2 &amp;x2, const X3 &amp;x3, double delta=1e-5)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>equal</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>ad2dbee4a72127938c79162cc8b6d5152</anchor>
      <arglist>(const T &amp;obj1, const T &amp;obj2, double tol)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>equal</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>a1f3dc67ad88b799c469088e428c583b1</anchor>
      <arglist>(const T &amp;obj1, const T &amp;obj2)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>assert_equal</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>a659619cca082d1c10b07c033d48c54da</anchor>
      <arglist>(const V &amp;expected, const V &amp;actual, double tol=1e-9)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>assert_equal</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>a982034802415eb6e9bd02355257ed96a</anchor>
      <arglist>(const Key &amp;expected, const Key &amp;actual, double tol=0.0)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>assert_equal</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>add6d6575582314cc9b5dbdbe2a86374d</anchor>
      <arglist>(const boost::optional&lt; V &gt; &amp;expected, const boost::optional&lt; V &gt; &amp;actual, double tol=1e-9)</arglist>
    </member>
    <member kind="function">
      <type>bool GTSAM_DEPRECATED</type>
      <name>assert_equal</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>a6bbdbded37ed58ebbabe6c16d66a61d9</anchor>
      <arglist>(const std::vector&lt; V &gt; &amp;expected, const std::vector&lt; V &gt; &amp;actual, double tol=1e-9)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>assert_container_equal</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>a254be27d6d4b416fa2b546c77ae783fc</anchor>
      <arglist>(const std::map&lt; V1, V2 &gt; &amp;expected, const std::map&lt; V1, V2 &gt; &amp;actual, double tol=1e-9)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>assert_container_equal</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>a2f509195ea2180d0f7dbd3a99a088ff4</anchor>
      <arglist>(const std::map&lt; size_t, V2 &gt; &amp;expected, const std::map&lt; size_t, V2 &gt; &amp;actual, double tol=1e-9)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>assert_container_equal</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>a0eec17f894b358dd9f30d7af28082ba5</anchor>
      <arglist>(const std::vector&lt; std::pair&lt; V1, V2 &gt; &gt; &amp;expected, const std::vector&lt; std::pair&lt; V1, V2 &gt; &gt; &amp;actual, double tol=1e-9)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>assert_container_equal</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>a6d6b2964354593f69848f6bf5d3e0ca1</anchor>
      <arglist>(const V &amp;expected, const V &amp;actual, double tol=1e-9)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>assert_container_equality</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>a59ba6a7db27344c5cb021f1421905020</anchor>
      <arglist>(const std::map&lt; size_t, V2 &gt; &amp;expected, const std::map&lt; size_t, V2 &gt; &amp;actual)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>assert_container_equality</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>aa0926a5d779171bd8e1d30fb5982b5c0</anchor>
      <arglist>(const V &amp;expected, const V &amp;actual)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>assert_equal</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>a21e760bc75888053afd86a27d56b6148</anchor>
      <arglist>(const std::string &amp;expected, const std::string &amp;actual)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>assert_inequal</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>a2f19ba6625a264457805513fefcb5c32</anchor>
      <arglist>(const V &amp;expected, const V &amp;actual, double tol=1e-9)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>assert_stdout_equal</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>a08641f0f7145716bba9159dd95099a44</anchor>
      <arglist>(const std::string &amp;expected, const V &amp;actual)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>assert_print_equal</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>a830c8c65902d7d0e763562e6c9357346</anchor>
      <arglist>(const std::string &amp;expected, const V &amp;actual, const std::string &amp;s=&quot;&quot;)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>demangle</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>a0b97fc96e5f69236e81489c66d5b92ba</anchor>
      <arglist>(const char *name)</arglist>
    </member>
    <member kind="function">
      <type>ListOfOneContainer&lt; T &gt;</type>
      <name>ListOfOne</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>a045b43784acac77531813c4ab6c4d281</anchor>
      <arglist>(const T &amp;element)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>fpEqual</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>ae19c359190a379cba44bf818a2293f7c</anchor>
      <arglist>(double a, double b, double tol, bool check_relative_also=true)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>a760cc36e9009b23cf564c436294b3504</anchor>
      <arglist>(const Vector &amp;v, const std::string &amp;s, std::ostream &amp;stream)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>a5e5d8018a0f44a6a299406aeda27d44b</anchor>
      <arglist>(const Vector &amp;v, const std::string &amp;s=&quot;&quot;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>save</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>a09f2bbdb9f9d633542362dbe8d79f9ab</anchor>
      <arglist>(const Vector &amp;A, const std::string &amp;s, const std::string &amp;filename)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>a64988014ab746343803620dc42513646</anchor>
      <arglist>(const Vector &amp;vec1, const Vector &amp;vec2)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>greaterThanOrEqual</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>a368ee40bd9c0124d572d2e49bcb077bf</anchor>
      <arglist>(const Vector &amp;v1, const Vector &amp;v2)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>equal_with_abs_tol</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>a8bdced1844ffd6a53af0396d82eaa6da</anchor>
      <arglist>(const Vector &amp;vec1, const Vector &amp;vec2, double tol=1e-9)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>assert_equal</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>a9f3ee662d25ffb8c04b4e35c4b02e90b</anchor>
      <arglist>(const Vector &amp;vec1, const Vector &amp;vec2, double tol=1e-9)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>assert_inequal</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>a2ca3db47b15350977c1f03c5560ab332</anchor>
      <arglist>(const Vector &amp;vec1, const Vector &amp;vec2, double tol=1e-9)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>assert_equal</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>ac3cf8e8e70cd696d9c789c31bc1e89a7</anchor>
      <arglist>(const SubVector &amp;vec1, const SubVector &amp;vec2, double tol=1e-9)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>linear_dependent</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>a2a0cfd7908b06491df49b6a9c9186775</anchor>
      <arglist>(const Vector &amp;vec1, const Vector &amp;vec2, double tol=1e-9)</arglist>
    </member>
    <member kind="function">
      <type>Vector</type>
      <name>ediv_</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>a14844c96706dc362917e0d5e76d65fbe</anchor>
      <arglist>(const Vector &amp;a, const Vector &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>houseInPlace</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>ac9c0c05b0198ec0fb6e4115edb755910</anchor>
      <arglist>(Vector &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>pair&lt; double, Vector &gt;</type>
      <name>house</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>afb77eefc25dea0fb3e0fcc8f246b617a</anchor>
      <arglist>(const Vector &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>pair&lt; Vector, double &gt;</type>
      <name>weightedPseudoinverse</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>aca1c56d11a05464a7a5458dc32ccc777</anchor>
      <arglist>(const Vector &amp;v, const Vector &amp;weights)</arglist>
    </member>
    <member kind="function">
      <type>Vector</type>
      <name>concatVectors</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>ae1c88acfa9575bcea3f2e738cb637a85</anchor>
      <arglist>(const std::list&lt; Vector &gt; &amp;vs)</arglist>
    </member>
    <member kind="function">
      <type>Vector</type>
      <name>concatVectors</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>a09610ec69a8b3f3a00399bb378eda9cf</anchor>
      <arglist>(size_t nrVectors,...)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>equal</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>aa7ed1d4fe2dd6828cfeb2d8f488b818d</anchor>
      <arglist>(const Vector &amp;vec1, const Vector &amp;vec2, double tol)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>equal</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>a3d1cad2313f69f9fa5008fdc348d1526</anchor>
      <arglist>(const Vector &amp;vec1, const Vector &amp;vec2)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>dot</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>ad80249acf12bbea741e755cd8fc73042</anchor>
      <arglist>(const V1 &amp;a, const V2 &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>inner_prod</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>a4ca41ba9ec9d6d21a2b9f5e00f9f25ed</anchor>
      <arglist>(const V1 &amp;a, const V2 &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>void GTSAM_DEPRECATED</type>
      <name>scal</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>a9bf40203c6d7820aa6ddf23cdbbd770f</anchor>
      <arglist>(double alpha, Vector &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>void GTSAM_DEPRECATED</type>
      <name>axpy</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>af55c9458246c733317a7dfad7f9f813a</anchor>
      <arglist>(double alpha, const V1 &amp;x, V2 &amp;y)</arglist>
    </member>
    <member kind="function">
      <type>Matrix</type>
      <name>kroneckerProductIdentity</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>a2ce44d31cae1eda44c2a86d32d92b935</anchor>
      <arglist>(const Weights &amp;w)</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; Assignment&lt; L &gt; &gt;</type>
      <name>cartesianProduct</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>aec77610fa3e4905d142a72b2199158db</anchor>
      <arglist>(const std::vector&lt; std::pair&lt; L, size_t &gt; &gt; &amp;keys)</arglist>
    </member>
    <member kind="function">
      <type>DecisionTree&lt; L, Y &gt;</type>
      <name>apply</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>ad19a5c8f7d997b0b16cf646659834b0f</anchor>
      <arglist>(const DecisionTree&lt; L, Y &gt; &amp;f, const typename DecisionTree&lt; L, Y &gt;::Unary &amp;op)</arglist>
    </member>
    <member kind="function">
      <type>std::pair&lt; DiscreteConditional::shared_ptr, DecisionTreeFactor::shared_ptr &gt;</type>
      <name>EliminateDiscrete</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>a0767417e558bbac14f3b27bc54d033e9</anchor>
      <arglist>(const DiscreteFactorGraph &amp;factors, const Ordering &amp;keys)</arglist>
    </member>
    <member kind="function">
      <type>DiscreteKeys</type>
      <name>operator&amp;</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>a0be4f243161c2fd937df60aee511eb16</anchor>
      <arglist>(const DiscreteKey &amp;key1, const DiscreteKey &amp;key2)</arglist>
    </member>
    <member kind="function">
      <type>Signature</type>
      <name>operator|</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>aa6c58dfb2fc9398a026e3268ba2edfad</anchor>
      <arglist>(const DiscreteKey &amp;key, const DiscreteKey &amp;parent)</arglist>
    </member>
    <member kind="function">
      <type>Signature</type>
      <name>operator%</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>ab98cf2a4777006c28d6983db5d8ec574</anchor>
      <arglist>(const DiscreteKey &amp;key, const std::string &amp;parent)</arglist>
    </member>
    <member kind="function">
      <type>Signature</type>
      <name>operator%</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>ae4856250df52ce4b9b4b16c7a833408c</anchor>
      <arglist>(const DiscreteKey &amp;key, const Signature::Table &amp;parent)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>calibrateJacobians</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>a9ac814fcc4484bce32e4616d69afb225</anchor>
      <arglist>(const Cal &amp;calibration, const Point2 &amp;pn, OptionalJacobian&lt; 2, Dim &gt; Dcal=boost::none, OptionalJacobian&lt; 2, 2 &gt; Dp=boost::none)</arglist>
    </member>
    <member kind="function">
      <type>Line3</type>
      <name>transformTo</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>a3eb48c80bef807e34d7189efdc8875cd</anchor>
      <arglist>(const Pose3 &amp;wTc, const Line3 &amp;wL, OptionalJacobian&lt; 4, 6 &gt; Dpose=boost::none, OptionalJacobian&lt; 4, 4 &gt; Dline=boost::none)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>norm2</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>afee4e6aa4aba9b6a6b421ddd75b52dfc</anchor>
      <arglist>(const Point2 &amp;p, OptionalJacobian&lt; 1, 2 &gt; H=boost::none)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>distance2</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>afd1282dfb080cb393ae60188b4582cb2</anchor>
      <arglist>(const Point2 &amp;p1, const Point2 &amp;q, OptionalJacobian&lt; 1, 2 &gt; H1=boost::none, OptionalJacobian&lt; 1, 2 &gt; H2=boost::none)</arglist>
    </member>
    <member kind="function">
      <type>list&lt; Point2 &gt;</type>
      <name>circleCircleIntersection</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>a93d4e38a582b6f32fc4f301df10721d5</anchor>
      <arglist>(Point2 c1, double r1, Point2 c2, double r2, double tol=1e-9)</arglist>
    </member>
    <member kind="function">
      <type>Point2</type>
      <name>operator*</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>a63d86e99c211c6daeac2b7b4dd9d928e</anchor>
      <arglist>(double s, const Point2 &amp;p)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>distance3</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>aa42f7ec660b7353de39f9c86a26711cc</anchor>
      <arglist>(const Point3 &amp;p1, const Point3 &amp;q, OptionalJacobian&lt; 1, 3 &gt; H1=boost::none, OptionalJacobian&lt; 1, 3 &gt; H2=boost::none)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>norm3</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>ac37b6f807985ffd25217e33f6136fe58</anchor>
      <arglist>(const Point3 &amp;p, OptionalJacobian&lt; 1, 3 &gt; H=boost::none)</arglist>
    </member>
    <member kind="function">
      <type>Point3</type>
      <name>normalize</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>abb52bb00c68909fc1147e5d112e8c2ae</anchor>
      <arglist>(const Point3 &amp;p, OptionalJacobian&lt; 3, 3 &gt; H=boost::none)</arglist>
    </member>
    <member kind="function">
      <type>Point3</type>
      <name>cross</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>a86bf6ed2ffb0ecc42a7deb8922f4ca4f</anchor>
      <arglist>(const Point3 &amp;p, const Point3 &amp;q, OptionalJacobian&lt; 3, 3 &gt; H_p=boost::none, OptionalJacobian&lt; 3, 3 &gt; H_q=boost::none)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>dot</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>a7dc820e4e47218768f104b43a184a1bd</anchor>
      <arglist>(const Point3 &amp;p, const Point3 &amp;q, OptionalJacobian&lt; 1, 3 &gt; H_p=boost::none, OptionalJacobian&lt; 1, 3 &gt; H_q=boost::none)</arglist>
    </member>
    <member kind="function">
      <type>Point3Pair</type>
      <name>means</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>a57f778b84bc6106471006421d289b832</anchor>
      <arglist>(const std::vector&lt; Point3Pair &gt; &amp;abPointPairs)</arglist>
    </member>
    <member kind="function">
      <type>Point3</type>
      <name>mean</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>a300205092710091b8745c0a145da20a1</anchor>
      <arglist>(const CONTAINER &amp;points)</arglist>
    </member>
    <member kind="function">
      <type>Matrix</type>
      <name>wedge&lt; Pose2 &gt;</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>a4b78f4db0e05f3ca838ee4da6187710e</anchor>
      <arglist>(const Vector &amp;xi)</arglist>
    </member>
    <member kind="function">
      <type>Matrix</type>
      <name>wedge&lt; Pose3 &gt;</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>aefb606eb24889c0f418acf1515a2c723</anchor>
      <arglist>(const Vector &amp;xi)</arglist>
    </member>
    <member kind="function">
      <type>pair&lt; Matrix3, Vector3 &gt;</type>
      <name>RQ</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>a5172b5b6d51bd5348c7e551e1376f60a</anchor>
      <arglist>(const Matrix3 &amp;A, OptionalJacobian&lt; 3, 9 &gt; H=boost::none)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>serialize</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>a2e0b14126ed42ee95ca5f5f092c5bc84</anchor>
      <arglist>(Archive &amp;ar, SO3 &amp;R, const unsigned int)</arglist>
    </member>
    <member kind="function">
      <type>GTSAM_EXPORT Matrix3</type>
      <name>topLeft</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>a8d21728e3da4cf1a96e1b6f87a97da47</anchor>
      <arglist>(const SO4 &amp;Q, OptionalJacobian&lt; 9, 6 &gt; H=boost::none)</arglist>
    </member>
    <member kind="function">
      <type>GTSAM_EXPORT Matrix43</type>
      <name>stiefel</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>a3e57e4771f13855a495ec2c6454c9121</anchor>
      <arglist>(const SO4 &amp;Q, OptionalJacobian&lt; 12, 6 &gt; H=boost::none)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>serialize</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>a76855a1214bf05a8704ee3deaece6339</anchor>
      <arglist>(Archive &amp;ar, SO4 &amp;Q, const unsigned int)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>serialize</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>ac1829b506847127f406c0d6182fc0cdd</anchor>
      <arglist>(Archive &amp;ar, SOn &amp;Q, const unsigned int file_version)</arglist>
    </member>
    <member kind="function">
      <type>Vector4</type>
      <name>triangulateHomogeneousDLT</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>af378e231b519e8bb1f09f4aa13a38dca</anchor>
      <arglist>(const std::vector&lt; Matrix34, Eigen::aligned_allocator&lt; Matrix34 &gt; &gt; &amp;projection_matrices, const Point2Vector &amp;measurements, double rank_tol=1e-9)</arglist>
    </member>
    <member kind="function">
      <type>Point3</type>
      <name>triangulateDLT</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>aed2918ac0049316bf09f96879efca3b6</anchor>
      <arglist>(const std::vector&lt; Matrix34, Eigen::aligned_allocator&lt; Matrix34 &gt; &gt; &amp;projection_matrices, const Point2Vector &amp;measurements, double rank_tol=1e-9)</arglist>
    </member>
    <member kind="function">
      <type>Point3</type>
      <name>optimize</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>a4b0057879b0c5f323185452b0d1a4232</anchor>
      <arglist>(const NonlinearFactorGraph &amp;graph, const Values &amp;values, Key landmarkKey)</arglist>
    </member>
    <member kind="function">
      <type>std::pair&lt; NonlinearFactorGraph, Values &gt;</type>
      <name>triangulationGraph</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>a3fb854935c3a0b73ba63adfb86a5c141</anchor>
      <arglist>(const std::vector&lt; Pose3 &gt; &amp;poses, boost::shared_ptr&lt; CALIBRATION &gt; sharedCal, const Point2Vector &amp;measurements, Key landmarkKey, const Point3 &amp;initialEstimate)</arglist>
    </member>
    <member kind="function">
      <type>std::pair&lt; NonlinearFactorGraph, Values &gt;</type>
      <name>triangulationGraph</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>afefb1a863211aa15c603fbac3541fc4b</anchor>
      <arglist>(const CameraSet&lt; CAMERA &gt; &amp;cameras, const typename CAMERA::MeasurementVector &amp;measurements, Key landmarkKey, const Point3 &amp;initialEstimate)</arglist>
    </member>
    <member kind="function">
      <type>Point3</type>
      <name>triangulateNonlinear</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>afd76f4999d5ac79b85c4271943e9251f</anchor>
      <arglist>(const std::vector&lt; Pose3 &gt; &amp;poses, boost::shared_ptr&lt; CALIBRATION &gt; sharedCal, const Point2Vector &amp;measurements, const Point3 &amp;initialEstimate)</arglist>
    </member>
    <member kind="function">
      <type>Point3</type>
      <name>triangulateNonlinear</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>a2fa35400ef37861ce74067b6a38884ba</anchor>
      <arglist>(const CameraSet&lt; CAMERA &gt; &amp;cameras, const typename CAMERA::MeasurementVector &amp;measurements, const Point3 &amp;initialEstimate)</arglist>
    </member>
    <member kind="function">
      <type>Point3</type>
      <name>triangulatePoint3</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>ae7b725c367246edb1beea32060fd50f7</anchor>
      <arglist>(const std::vector&lt; Pose3 &gt; &amp;poses, boost::shared_ptr&lt; CALIBRATION &gt; sharedCal, const Point2Vector &amp;measurements, double rank_tol=1e-9, bool optimize=false)</arglist>
    </member>
    <member kind="function">
      <type>Point3</type>
      <name>triangulatePoint3</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>a0493526601a58e173f8c0646ed302739</anchor>
      <arglist>(const CameraSet&lt; CAMERA &gt; &amp;cameras, const typename CAMERA::MeasurementVector &amp;measurements, double rank_tol=1e-9, bool optimize=false)</arglist>
    </member>
    <member kind="function">
      <type>Point3</type>
      <name>triangulatePoint3</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>a22a9a20bbbd347f4cf2a7153a5d43ec4</anchor>
      <arglist>(const CameraSet&lt; PinholeCamera&lt; CALIBRATION &gt; &gt; &amp;cameras, const Point2Vector &amp;measurements, double rank_tol=1e-9, bool optimize=false)</arglist>
    </member>
    <member kind="function">
      <type>TriangulationResult</type>
      <name>triangulateSafe</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>a8d52d7d8a5e5c8d7318ce95ee57e9cfa</anchor>
      <arglist>(const CameraSet&lt; CAMERA &gt; &amp;cameras, const typename CAMERA::MeasurementVector &amp;measured, const TriangulationParameters &amp;params)</arglist>
    </member>
    <member kind="function">
      <type>std::list&lt; KEY &gt;</type>
      <name>predecessorMap2Keys</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>a18a265afdea057ea54be10262396be12</anchor>
      <arglist>(const PredecessorMap&lt; KEY &gt; &amp;p_map)</arglist>
    </member>
    <member kind="function">
      <type>SDGraph&lt; KEY &gt;</type>
      <name>toBoostGraph</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>a6c0319a6ebcc83d4a5cf9ff51729bb80</anchor>
      <arglist>(const G &amp;graph)</arglist>
    </member>
    <member kind="function">
      <type>boost::tuple&lt; G, V, std::map&lt; KEY, V &gt; &gt;</type>
      <name>predecessorMap2Graph</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>ae67d0d86c4e55b175859967a70b36983</anchor>
      <arglist>(const PredecessorMap&lt; KEY &gt; &amp;p_map)</arglist>
    </member>
    <member kind="function">
      <type>boost::shared_ptr&lt; Values &gt;</type>
      <name>composePoses</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>a62b34d6038ccdfa84d8a5bb0c15328b1</anchor>
      <arglist>(const G &amp;graph, const PredecessorMap&lt; KEY &gt; &amp;tree, const POSE &amp;rootPose)</arglist>
    </member>
    <member kind="function">
      <type>PredecessorMap&lt; KEY &gt;</type>
      <name>findMinimumSpanningTree</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>a7771a103b41708e88763ff67059ff01d</anchor>
      <arglist>(const G &amp;g)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>split</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>a3453247aec1d8b4642947ffd4bca426b</anchor>
      <arglist>(const G &amp;g, const PredecessorMap&lt; KEY &gt; &amp;tree, G &amp;Ab1, G &amp;Ab2)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>PrintKey</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>a4f9e295c4f7086ce05cbe37aeeca47fe</anchor>
      <arglist>(Key key, const std::string &amp;s=&quot;&quot;, const KeyFormatter &amp;keyFormatter=DefaultKeyFormatter)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>PrintKeyList</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>aab7ddea9b0bc36f296327e0ec08c4ef0</anchor>
      <arglist>(const KeyList &amp;keys, const std::string &amp;s=&quot;&quot;, const KeyFormatter &amp;keyFormatter=DefaultKeyFormatter)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>PrintKeyVector</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>a4c14be406d50f65bd404429a7b1d3af0</anchor>
      <arglist>(const KeyVector &amp;keys, const std::string &amp;s=&quot;&quot;, const KeyFormatter &amp;keyFormatter=DefaultKeyFormatter)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>PrintKeySet</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>aac25d6c8afb07054416ba6727685bf55</anchor>
      <arglist>(const KeySet &amp;keys, const std::string &amp;s=&quot;&quot;, const KeyFormatter &amp;keyFormatter=DefaultKeyFormatter)</arglist>
    </member>
    <member kind="function">
      <type>Key</type>
      <name>mrsymbol</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>ae9a7dceb0a85c356062b55f6939b1419</anchor>
      <arglist>(unsigned char c, unsigned char label, size_t j)</arglist>
    </member>
    <member kind="function">
      <type>unsigned char</type>
      <name>mrsymbolChr</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>a37995b0d0610e5fb29c6bd0715151d67</anchor>
      <arglist>(Key key)</arglist>
    </member>
    <member kind="function">
      <type>unsigned char</type>
      <name>mrsymbolLabel</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>a4e4c133c4fd0d9d73593f601be2248a6</anchor>
      <arglist>(Key key)</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>mrsymbolIndex</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>a4adc1bb606fa4a14d5dbd246f95cecd3</anchor>
      <arglist>(Key key)</arglist>
    </member>
    <member kind="function">
      <type>Key</type>
      <name>symbol</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>a3bfdb8456463015b2dda092a5805a745</anchor>
      <arglist>(unsigned char c, std::uint64_t j)</arglist>
    </member>
    <member kind="function">
      <type>unsigned char</type>
      <name>symbolChr</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>a9ca9499e881d22361b4833c2854d941f</anchor>
      <arglist>(Key key)</arglist>
    </member>
    <member kind="function">
      <type>std::uint64_t</type>
      <name>symbolIndex</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>a2f4d98c5186046db873a6c05aebbdf9c</anchor>
      <arglist>(Key key)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>dot</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>a106ec458ddb425604809da93346af55d</anchor>
      <arglist>(const Errors &amp;a, const Errors &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>axpy</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>a1740d42a2e3b2b6b5ab772b10df484e5</anchor>
      <arglist>(double alpha, const Errors &amp;x, Errors &amp;y)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>a9528f84279a6f9c18d7d5a444735e57a</anchor>
      <arglist>(const Errors &amp;a, const std::string &amp;s=&quot;Error&quot;)</arglist>
    </member>
    <member kind="function">
      <type>GTSAM_EXPORT void</type>
      <name>axpy</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>ac339f9bf9dfb0f1eef6b9494a9c0317f</anchor>
      <arglist>(double alpha, const Errors &amp;x, Errors &amp;y)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasConstraints</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>a35c269c3243cab16a7475239a9c91021</anchor>
      <arglist>(const GaussianFactorGraph &amp;factors)</arglist>
    </member>
    <member kind="function">
      <type>V</type>
      <name>conjugateGradients</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>a6516ea957c3a22ddf429cefef1fe9486</anchor>
      <arglist>(const S &amp;Ab, V x, const ConjugateGradientParameters &amp;parameters, bool steepest=false)</arglist>
    </member>
    <member kind="function">
      <type>Vector</type>
      <name>conjugateGradientDescent</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>ad2b587fde5d35a27d6c88feb4432e785</anchor>
      <arglist>(const System &amp;Ab, const Vector &amp;x, const ConjugateGradientParameters &amp;parameters)</arglist>
    </member>
    <member kind="function">
      <type>Vector</type>
      <name>steepestDescent</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>aed4b2ca704ddd6530ea70122f883ac88</anchor>
      <arglist>(const Matrix &amp;A, const Vector &amp;b, const Vector &amp;x, const ConjugateGradientParameters &amp;parameters)</arglist>
    </member>
    <member kind="function">
      <type>Vector</type>
      <name>conjugateGradientDescent</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>af55440f741d8b2f706101f7a79ba7111</anchor>
      <arglist>(const Matrix &amp;A, const Vector &amp;b, const Vector &amp;x, const ConjugateGradientParameters &amp;parameters)</arglist>
    </member>
    <member kind="function">
      <type>VectorValues</type>
      <name>steepestDescent</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>a81b7af7638d28555c3f404318cc67b22</anchor>
      <arglist>(const GaussianFactorGraph &amp;fg, const VectorValues &amp;x, const ConjugateGradientParameters &amp;parameters)</arglist>
    </member>
    <member kind="function">
      <type>VectorValues</type>
      <name>conjugateGradientDescent</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>aa84114ad1593684ad739088a2898afdb</anchor>
      <arglist>(const GaussianFactorGraph &amp;fg, const VectorValues &amp;x, const ConjugateGradientParameters &amp;parameters)</arglist>
    </member>
    <member kind="function">
      <type>GTSAM_EXPORT Vector</type>
      <name>steepestDescent</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>a37ca85391e3bc671c71b68bc324296f0</anchor>
      <arglist>(const System &amp;Ab, const Vector &amp;x, const IterativeOptimizationParameters &amp;parameters)</arglist>
    </member>
    <member kind="function">
      <type>std::pair&lt; GaussianConditional::shared_ptr, JacobianFactor::shared_ptr &gt;</type>
      <name>EliminateQR</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>ab56c4bfa363f8c23c48eb078e9c84a9c</anchor>
      <arglist>(const GaussianFactorGraph &amp;factors, const Ordering &amp;keys)</arglist>
    </member>
    <member kind="function">
      <type>SparseEigen</type>
      <name>sparseJacobianEigen</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>aa9013a9053629f0c00b97726d9d8e19e</anchor>
      <arglist>(const GaussianFactorGraph &amp;gfg, const Ordering &amp;ordering)</arglist>
    </member>
    <member kind="function">
      <type>GaussianFactorGraph::shared_ptr</type>
      <name>buildFactorSubgraph</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>ac06ac82e22341b1b9fdcd4c67280f619</anchor>
      <arglist>(const GaussianFactorGraph &amp;gfg, const Subgraph &amp;subgraph, const bool clone)</arglist>
    </member>
    <member kind="function">
      <type>std::pair&lt; GaussianFactorGraph::shared_ptr, GaussianFactorGraph::shared_ptr &gt;</type>
      <name>splitFactorGraph</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>ab3749ce0f63e205e55daa615aa1fd74a</anchor>
      <arglist>(const GaussianFactorGraph &amp;factorGraph, const Subgraph &amp;subgraph)</arglist>
    </member>
    <member kind="function">
      <type>Expression&lt; T &gt;</type>
      <name>operator*</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>a3db519caa1b7e43412c9a7e13acf8329</anchor>
      <arglist>(const Expression&lt; T &gt; &amp;expression1, const Expression&lt; T &gt; &amp;expression2)</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; Expression&lt; T &gt; &gt;</type>
      <name>createUnknowns</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>a51881c20dd5ecdd129cb993ea8374846</anchor>
      <arglist>(size_t n, char c, size_t start)</arglist>
    </member>
    <member kind="function">
      <type>Expression&lt; T &gt;</type>
      <name>linearExpression</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>a794029fe8dfc03f67a8cb64ad05d47c9</anchor>
      <arglist>(const std::function&lt; T(A)&gt; &amp;f, const Expression&lt; A &gt; &amp;expression, const Eigen::Matrix&lt; double, traits&lt; T &gt;::dimension, traits&lt; A &gt;::dimension &gt; &amp;dTdA)</arglist>
    </member>
    <member kind="function">
      <type>ScalarMultiplyExpression&lt; T &gt;</type>
      <name>operator*</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>a405f3793afc2cc3173c3fbdecadb162a</anchor>
      <arglist>(double s, const Expression&lt; T &gt; &amp;e)</arglist>
    </member>
    <member kind="function">
      <type>BinarySumExpression&lt; T &gt;</type>
      <name>operator+</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>a589e3ff8cd71e5a17ee1dcfae8b2df26</anchor>
      <arglist>(const Expression&lt; T &gt; &amp;e1, const Expression&lt; T &gt; &amp;e2)</arglist>
    </member>
    <member kind="function">
      <type>BinarySumExpression&lt; T &gt;</type>
      <name>operator-</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>a9512eb02324210895442f2bf8268902d</anchor>
      <arglist>(const Expression&lt; T &gt; &amp;e1, const Expression&lt; T &gt; &amp;e2)</arglist>
    </member>
    <member kind="function">
      <type>JacobianFactor</type>
      <name>linearizeNumerically</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>a9753b4e62378151d30bf8af5e2fc1602</anchor>
      <arglist>(const NoiseModelFactor &amp;factor, const Values &amp;values, double delta=1e-5)</arglist>
    </member>
    <member kind="function">
      <type>FunctorizedFactor&lt; R, T &gt;</type>
      <name>MakeFunctorizedFactor</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>a9d2a0b16c9f78f20fc78fa39c7426242</anchor>
      <arglist>(Key key, const R &amp;z, const SharedNoiseModel &amp;model, const FUNC func)</arglist>
    </member>
    <member kind="function">
      <type>FunctorizedFactor2&lt; R, T1, T2 &gt;</type>
      <name>MakeFunctorizedFactor2</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>a313f0e290f370cff0b7e25024d1b8c6d</anchor>
      <arglist>(Key key1, Key key2, const R &amp;z, const SharedNoiseModel &amp;model, const FUNC func)</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>optimizeWildfire</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>a2b0857edd76f8d63eeee0ce9944e28d4</anchor>
      <arglist>(const ISAM2Clique::shared_ptr &amp;root, double threshold, const KeySet &amp;replaced, VectorValues *delta)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>lineSearch</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>a0ceb9e5a5e864b96c529db67f55a873b</anchor>
      <arglist>(const S &amp;system, const V currentValues, const W &amp;gradient)</arglist>
    </member>
    <member kind="function">
      <type>boost::tuple&lt; V, int &gt;</type>
      <name>nonlinearConjugateGradient</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>afc19854e0bfc1acadb00ff00a043cc17</anchor>
      <arglist>(const S &amp;system, const V &amp;initial, const NonlinearOptimizerParams &amp;params, const bool singleIteration, const bool gradientDescent=false)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>checkConvergence</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>a3382482454c164c6f5817dcbe6f932b3</anchor>
      <arglist>(double relativeErrorTreshold, double absoluteErrorTreshold, double errorThreshold, double currentError, double newError, NonlinearOptimizerParams::Verbosity verbosity=NonlinearOptimizerParams::SILENT)</arglist>
    </member>
    <member kind="function">
      <type>string</type>
      <name>findExampleDataFile</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>aef971b2c69845e4fcce707306703c7b8</anchor>
      <arglist>(const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>string</type>
      <name>createRewrittenFileName</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>adbe09e573771fd72b08069353d537725</anchor>
      <arglist>(const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>boost::optional&lt; IndexedPose &gt;</type>
      <name>parseVertexPose</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>abfc0157e4790e3b03dc601d3e86c684d</anchor>
      <arglist>(std::istream &amp;is, const std::string &amp;tag)</arglist>
    </member>
    <member kind="function">
      <type>boost::optional&lt; IndexedLandmark &gt;</type>
      <name>parseVertexLandmark</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>a961e0398bbfc2504c62fdaad70472418</anchor>
      <arglist>(std::istream &amp;is, const std::string &amp;tag)</arglist>
    </member>
    <member kind="function">
      <type>boost::optional&lt; IndexedEdge &gt;</type>
      <name>parseEdge</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>abc8bb9db0893652e8b5e7b47782ec990</anchor>
      <arglist>(std::istream &amp;is, const std::string &amp;tag)</arglist>
    </member>
    <member kind="function">
      <type>GraphAndValues</type>
      <name>load2D</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>a635ec096b94adc2b05f081cd07eb2c0f</anchor>
      <arglist>(const std::string &amp;filename, SharedNoiseModel model=SharedNoiseModel(), size_t maxIndex=0, bool addNoise=false, bool smart=true, NoiseFormat noiseFormat=NoiseFormatAUTO, KernelFunctionType kernelFunctionType=KernelFunctionTypeNONE)</arglist>
    </member>
    <member kind="function">
      <type>GraphAndValues</type>
      <name>load2D</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>a79f6cde1c018ea0f4ca3c7fc83123a14</anchor>
      <arglist>(pair&lt; string, SharedNoiseModel &gt; dataset, size_t maxIndex, bool addNoise, bool smart, NoiseFormat noiseFormat, KernelFunctionType kernelFunctionType)</arglist>
    </member>
    <member kind="function">
      <type>GraphAndValues</type>
      <name>load2D_robust</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>abc118b53bf98ad0d0a33bdc107fbefc8</anchor>
      <arglist>(const string &amp;filename, const noiseModel::Base::shared_ptr &amp;model, size_t maxIndex)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>save2D</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>acfe516bc2d9ca4cc4530dd3b8460ce3d</anchor>
      <arglist>(const NonlinearFactorGraph &amp;graph, const Values &amp;config, const noiseModel::Diagonal::shared_ptr model, const std::string &amp;filename)</arglist>
    </member>
    <member kind="function">
      <type>GraphAndValues</type>
      <name>readG2o</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>a71d086efc70f4af31d3c3b00dde4f7c0</anchor>
      <arglist>(const std::string &amp;g2oFile, const bool is3D=false, KernelFunctionType kernelFunctionType=KernelFunctionTypeNONE)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>writeG2o</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>a68bc584d72da3747666ac134a9490f92</anchor>
      <arglist>(const NonlinearFactorGraph &amp;graph, const Values &amp;estimate, const std::string &amp;filename)</arglist>
    </member>
    <member kind="function">
      <type>GraphAndValues</type>
      <name>load3D</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>ac96511703a91071d7b2033976f9739c3</anchor>
      <arglist>(const std::string &amp;filename)</arglist>
    </member>
    <member kind="function">
      <type>Pose3</type>
      <name>openGL2gtsam</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>ade6eca65dc0168a65f641961ca97924c</anchor>
      <arglist>(const Rot3 &amp;R, double tx, double ty, double tz)</arglist>
    </member>
    <member kind="function">
      <type>Pose3</type>
      <name>gtsam2openGL</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>aaff07ef70e6161c4d1d2bd7546ff91e6</anchor>
      <arglist>(const Rot3 &amp;R, double tx, double ty, double tz)</arglist>
    </member>
    <member kind="function">
      <type>Pose3</type>
      <name>gtsam2openGL</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>ad632ed56581bf174eef379bbe272a06a</anchor>
      <arglist>(const Pose3 &amp;PoseGTSAM)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>readBundler</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>a37c2d071b98678ae281d0b48bee98b30</anchor>
      <arglist>(const std::string &amp;filename, SfmData &amp;data)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>readBAL</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>af170fa38edc21cf9c26c2c6937388ec0</anchor>
      <arglist>(const std::string &amp;filename, SfmData &amp;data)</arglist>
    </member>
    <member kind="function">
      <type>SfmData</type>
      <name>readBal</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>a710ec0322f4a2c0883841b58516b7a6a</anchor>
      <arglist>(const std::string &amp;filename)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>writeBAL</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>aea6d4511beb8fd046f0d9f430d17d396</anchor>
      <arglist>(const std::string &amp;filename, SfmData &amp;data)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>writeBALfromValues</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>a71a14a1609cd7dd26106cca1345ec958</anchor>
      <arglist>(const std::string &amp;filename, const SfmData &amp;data, Values &amp;values)</arglist>
    </member>
    <member kind="function">
      <type>Values</type>
      <name>initialCamerasEstimate</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>ad8b55993353cbab0fde06b872783fe92</anchor>
      <arglist>(const SfmData &amp;db)</arglist>
    </member>
    <member kind="function">
      <type>Values</type>
      <name>initialCamerasAndPointsEstimate</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>aba34ed4a103d9057536ee5cac27cfdef</anchor>
      <arglist>(const SfmData &amp;db)</arglist>
    </member>
    <member kind="function">
      <type>GTSAM_EXPORT std::map&lt; size_t, T &gt;</type>
      <name>parseVariables</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>a683ab6a83b5b3e508e734a7089986838</anchor>
      <arglist>(const std::string &amp;filename, size_t maxIndex=0)</arglist>
    </member>
    <member kind="function">
      <type>GTSAM_EXPORT std::vector&lt; BinaryMeasurement&lt; T &gt; &gt;</type>
      <name>parseMeasurements</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>a6eb4817b97658f00e426b753c52361ed</anchor>
      <arglist>(const std::string &amp;filename, const noiseModel::Diagonal::shared_ptr &amp;model=nullptr, size_t maxIndex=0)</arglist>
    </member>
    <member kind="function">
      <type>GTSAM_EXPORT std::vector&lt; typename BetweenFactor&lt; T &gt;::shared_ptr &gt;</type>
      <name>parseFactors</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>a8a2136a163e31faaefe2db498a9b9b43</anchor>
      <arglist>(const std::string &amp;filename, const noiseModel::Diagonal::shared_ptr &amp;model=nullptr, size_t maxIndex=0)</arglist>
    </member>
    <member kind="function">
      <type>GTSAM_EXPORT GraphAndValues</type>
      <name>load2D</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>a6f8d49b13ccc0e007a5e7572286d5854</anchor>
      <arglist>(std::pair&lt; std::string, SharedNoiseModel &gt; dataset, size_t maxIndex=0, bool addNoise=false, bool smart=true, NoiseFormat noiseFormat=NoiseFormatAUTO, KernelFunctionType kernelFunctionType=KernelFunctionTypeNONE)</arglist>
    </member>
    <member kind="function">
      <type>Point2_</type>
      <name>project</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>ad0024081af88e1b3cc0820c65ad6afd4</anchor>
      <arglist>(const Point3_ &amp;p_cam)</arglist>
    </member>
    <member kind="function">
      <type>gtsam::Expression&lt; typename gtsam::traits&lt; T &gt;::TangentVector &gt;</type>
      <name>logmap</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>a1af6e019faaedfddc234925b2e50ad2b</anchor>
      <arglist>(const gtsam::Expression&lt; T &gt; &amp;x1, const gtsam::Expression&lt; T &gt; &amp;x2)</arglist>
    </member>
    <member kind="function">
      <type>SharedNoiseModel</type>
      <name>ConvertNoiseModel</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>aa43e7fd7c2b86873458a91ddafc506e4</anchor>
      <arglist>(const SharedNoiseModel &amp;model, size_t n, bool defaultToUnit=true)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>FindKarcherMean</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>ad7fa43a05d8b4a5504e79d7fae639b9b</anchor>
      <arglist>(const std::vector&lt; T, Eigen::aligned_allocator&lt; T &gt; &gt; &amp;rotations)</arglist>
    </member>
    <member kind="function">
      <type>P</type>
      <name>transform_point</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>a80d640f59e5d39a1165069a3841cc5d1</anchor>
      <arglist>(const T &amp;trans, const P &amp;global, boost::optional&lt; Matrix &amp; &gt; Dtrans, boost::optional&lt; Matrix &amp; &gt; Dglobal)</arglist>
    </member>
    <member kind="function">
      <type>std::pair&lt; boost::shared_ptr&lt; SymbolicConditional &gt;, boost::shared_ptr&lt; SymbolicFactor &gt; &gt;</type>
      <name>EliminateSymbolic</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>a659f20993995258b1405737e375efd10</anchor>
      <arglist>(const SymbolicFactorGraph &amp;factors, const Ordering &amp;keys)</arglist>
    </member>
    <member kind="function">
      <type>Key</type>
      <name>maxKey</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>a9be309f741b77e5406429e41f666aa5a</anchor>
      <arglist>(const PROBLEM &amp;problem)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>serializeToStream</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>a007080ca4741cc3d3d6a209b0ae3fe61</anchor>
      <arglist>(const T &amp;input, std::ostream &amp;out_archive_stream)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>deserializeFromStream</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>ab181d2a3de466fc0c87bd29501bbc7ab</anchor>
      <arglist>(std::istream &amp;in_archive_stream, T &amp;output)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>serializeToString</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>aa12c78301a9d2968afe5a1a14baa7e90</anchor>
      <arglist>(const T &amp;input)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>deserializeFromString</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>a262487af458d1f48dd7d3bc549caae00</anchor>
      <arglist>(const std::string &amp;serialized, T &amp;output)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>serializeToFile</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>aa3261c2d455f892dae1921f8c3a39267</anchor>
      <arglist>(const T &amp;input, const std::string &amp;filename)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>deserializeFromFile</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>adbb4a71187706918faca3a11519b62f6</anchor>
      <arglist>(const std::string &amp;filename, T &amp;output)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>serialize</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>a332bad7d1e70d3c04ceca35adce7a134</anchor>
      <arglist>(const T &amp;input)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>deserialize</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>aa4d516d0d98946341ad2766521011d1b</anchor>
      <arglist>(const std::string &amp;serialized, T &amp;output)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>serializeToXMLStream</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>ae2e939177cf58b42d7ed4c9856d536c5</anchor>
      <arglist>(const T &amp;input, std::ostream &amp;out_archive_stream, const std::string &amp;name=&quot;data&quot;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>deserializeFromXMLStream</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>a8d7ea177ef3e93af15a4a77c2bd7fa8b</anchor>
      <arglist>(std::istream &amp;in_archive_stream, T &amp;output, const std::string &amp;name=&quot;data&quot;)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>serializeToXMLString</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>a16c154fe5e35242e26af8286e77eea11</anchor>
      <arglist>(const T &amp;input, const std::string &amp;name=&quot;data&quot;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>deserializeFromXMLString</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>a5f2fe2bfc17737ff9ae1fb8b210604f0</anchor>
      <arglist>(const std::string &amp;serialized, T &amp;output, const std::string &amp;name=&quot;data&quot;)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>serializeToXMLFile</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>a89449123a746480a1d668cecb5576708</anchor>
      <arglist>(const T &amp;input, const std::string &amp;filename, const std::string &amp;name=&quot;data&quot;)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>deserializeFromXMLFile</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>a0d8faf2bb0a908ff484677bb2fcf707c</anchor>
      <arglist>(const std::string &amp;filename, T &amp;output, const std::string &amp;name=&quot;data&quot;)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>serializeXML</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>a976ff7999fcc13ef602b6ece1b078bca</anchor>
      <arglist>(const T &amp;input, const std::string &amp;name=&quot;data&quot;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>deserializeXML</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>a85ab51b2e8f4cea69f72e06a5c136e85</anchor>
      <arglist>(const std::string &amp;serialized, T &amp;output, const std::string &amp;name=&quot;data&quot;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>serializeToBinaryStream</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>aa5d177a3bf16f9f5acf45ee62c816479</anchor>
      <arglist>(const T &amp;input, std::ostream &amp;out_archive_stream, const std::string &amp;name=&quot;data&quot;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>deserializeFromBinaryStream</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>a8eb16192d8ebe2532d8a69c9f2bf15b2</anchor>
      <arglist>(std::istream &amp;in_archive_stream, T &amp;output, const std::string &amp;name=&quot;data&quot;)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>serializeToBinaryString</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>a7fad959f63f2eac1478c5ede7b9ae4db</anchor>
      <arglist>(const T &amp;input, const std::string &amp;name=&quot;data&quot;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>deserializeFromBinaryString</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>a349b7ed4a67a8c3d80737e5383507bc4</anchor>
      <arglist>(const std::string &amp;serialized, T &amp;output, const std::string &amp;name=&quot;data&quot;)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>serializeToBinaryFile</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>abdff0a4b4fdf0e609aa62fb8d8b1dbba</anchor>
      <arglist>(const T &amp;input, const std::string &amp;filename, const std::string &amp;name=&quot;data&quot;)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>deserializeFromBinaryFile</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>aefeb77f2324e4bbfca2c8152c49a4565</anchor>
      <arglist>(const std::string &amp;filename, T &amp;output, const std::string &amp;name=&quot;data&quot;)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>serializeBinary</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>abb476c3e77878f7e0f70dd51871f48e7</anchor>
      <arglist>(const T &amp;input, const std::string &amp;name=&quot;data&quot;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>deserializeBinary</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>a56c41958e57a4bc7361ab593011462fd</anchor>
      <arglist>(const std::string &amp;serialized, T &amp;output, const std::string &amp;name=&quot;data&quot;)</arglist>
    </member>
    <member kind="function">
      <type>VectorValues</type>
      <name>buildVectorValues</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>a0b1822ab82a2183082fd329798bd9a25</anchor>
      <arglist>(const Vector &amp;v, const Ordering &amp;ordering, const std::map&lt; Key, size_t &gt; &amp;dimensions)</arglist>
    </member>
    <member kind="function">
      <type>VectorValues</type>
      <name>buildVectorValues</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>a428bc7bf810a3606f1523ddaf041a32d</anchor>
      <arglist>(const Vector &amp;v, const KeyInfo &amp;keyInfo)</arglist>
    </member>
    <member kind="variable">
      <type>const double</type>
      <name>logSqrt2PI</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>ad5602eb85d05df6cba60e47eebbd3636</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>serializeToStream</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>a007080ca4741cc3d3d6a209b0ae3fe61</anchor>
      <arglist>(const T &amp;input, std::ostream &amp;out_archive_stream)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>deserializeFromStream</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>ab181d2a3de466fc0c87bd29501bbc7ab</anchor>
      <arglist>(std::istream &amp;in_archive_stream, T &amp;output)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>serializeToString</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>aa12c78301a9d2968afe5a1a14baa7e90</anchor>
      <arglist>(const T &amp;input)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>deserializeFromString</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>a262487af458d1f48dd7d3bc549caae00</anchor>
      <arglist>(const std::string &amp;serialized, T &amp;output)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>serializeToFile</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>aa3261c2d455f892dae1921f8c3a39267</anchor>
      <arglist>(const T &amp;input, const std::string &amp;filename)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>deserializeFromFile</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>adbb4a71187706918faca3a11519b62f6</anchor>
      <arglist>(const std::string &amp;filename, T &amp;output)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>serialize</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>a332bad7d1e70d3c04ceca35adce7a134</anchor>
      <arglist>(const T &amp;input)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>deserialize</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>aa4d516d0d98946341ad2766521011d1b</anchor>
      <arglist>(const std::string &amp;serialized, T &amp;output)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>serializeToXMLStream</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>ae2e939177cf58b42d7ed4c9856d536c5</anchor>
      <arglist>(const T &amp;input, std::ostream &amp;out_archive_stream, const std::string &amp;name=&quot;data&quot;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>deserializeFromXMLStream</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>a8d7ea177ef3e93af15a4a77c2bd7fa8b</anchor>
      <arglist>(std::istream &amp;in_archive_stream, T &amp;output, const std::string &amp;name=&quot;data&quot;)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>serializeToXMLString</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>a16c154fe5e35242e26af8286e77eea11</anchor>
      <arglist>(const T &amp;input, const std::string &amp;name=&quot;data&quot;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>deserializeFromXMLString</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>a5f2fe2bfc17737ff9ae1fb8b210604f0</anchor>
      <arglist>(const std::string &amp;serialized, T &amp;output, const std::string &amp;name=&quot;data&quot;)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>serializeToXMLFile</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>a89449123a746480a1d668cecb5576708</anchor>
      <arglist>(const T &amp;input, const std::string &amp;filename, const std::string &amp;name=&quot;data&quot;)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>deserializeFromXMLFile</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>a0d8faf2bb0a908ff484677bb2fcf707c</anchor>
      <arglist>(const std::string &amp;filename, T &amp;output, const std::string &amp;name=&quot;data&quot;)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>serializeXML</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>a976ff7999fcc13ef602b6ece1b078bca</anchor>
      <arglist>(const T &amp;input, const std::string &amp;name=&quot;data&quot;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>deserializeXML</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>a85ab51b2e8f4cea69f72e06a5c136e85</anchor>
      <arglist>(const std::string &amp;serialized, T &amp;output, const std::string &amp;name=&quot;data&quot;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>serializeToBinaryStream</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>aa5d177a3bf16f9f5acf45ee62c816479</anchor>
      <arglist>(const T &amp;input, std::ostream &amp;out_archive_stream, const std::string &amp;name=&quot;data&quot;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>deserializeFromBinaryStream</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>a8eb16192d8ebe2532d8a69c9f2bf15b2</anchor>
      <arglist>(std::istream &amp;in_archive_stream, T &amp;output, const std::string &amp;name=&quot;data&quot;)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>serializeToBinaryString</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>a7fad959f63f2eac1478c5ede7b9ae4db</anchor>
      <arglist>(const T &amp;input, const std::string &amp;name=&quot;data&quot;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>deserializeFromBinaryString</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>a349b7ed4a67a8c3d80737e5383507bc4</anchor>
      <arglist>(const std::string &amp;serialized, T &amp;output, const std::string &amp;name=&quot;data&quot;)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>serializeToBinaryFile</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>abdff0a4b4fdf0e609aa62fb8d8b1dbba</anchor>
      <arglist>(const T &amp;input, const std::string &amp;filename, const std::string &amp;name=&quot;data&quot;)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>deserializeFromBinaryFile</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>aefeb77f2324e4bbfca2c8152c49a4565</anchor>
      <arglist>(const std::string &amp;filename, T &amp;output, const std::string &amp;name=&quot;data&quot;)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>serializeBinary</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>abb476c3e77878f7e0f70dd51871f48e7</anchor>
      <arglist>(const T &amp;input, const std::string &amp;name=&quot;data&quot;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>deserializeBinary</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>a56c41958e57a4bc7361ab593011462fd</anchor>
      <arglist>(const std::string &amp;serialized, T &amp;output, const std::string &amp;name=&quot;data&quot;)</arglist>
    </member>
    <member kind="function">
      <type>VectorValues</type>
      <name>buildVectorValues</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>a0b1822ab82a2183082fd329798bd9a25</anchor>
      <arglist>(const Vector &amp;v, const Ordering &amp;ordering, const std::map&lt; Key, size_t &gt; &amp;dimensions)</arglist>
    </member>
    <member kind="function">
      <type>VectorValues</type>
      <name>buildVectorValues</name>
      <anchorfile>a01596.html</anchorfile>
      <anchor>a428bc7bf810a3606f1523ddaf041a32d</anchor>
      <arglist>(const Vector &amp;v, const KeyInfo &amp;keyInfo)</arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>gtsam::imuBias</name>
    <filename>a01619.html</filename>
    <class kind="class">gtsam::imuBias::ConstantBias</class>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a01619.html</anchorfile>
      <anchor>ae7a6582902c6daf9f20f2f7e466c60d8</anchor>
      <arglist>(std::ostream &amp;os, const ConstantBias &amp;bias)</arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>gtsam::noiseModel</name>
    <filename>a01616.html</filename>
    <namespace>gtsam::noiseModel::mEstimator</namespace>
    <class kind="class">gtsam::noiseModel::Base</class>
    <class kind="class">gtsam::noiseModel::Constrained</class>
    <class kind="class">gtsam::noiseModel::Diagonal</class>
    <class kind="class">gtsam::noiseModel::Gaussian</class>
    <class kind="class">gtsam::noiseModel::Isotropic</class>
    <class kind="class">gtsam::noiseModel::Robust</class>
    <class kind="class">gtsam::noiseModel::Unit</class>
  </compound>
  <compound kind="namespace">
    <name>gtsam::noiseModel::mEstimator</name>
    <filename>a01617.html</filename>
    <class kind="class">gtsam::noiseModel::mEstimator::Base</class>
    <class kind="class">gtsam::noiseModel::mEstimator::Cauchy</class>
    <class kind="class">gtsam::noiseModel::mEstimator::DCS</class>
    <class kind="class">gtsam::noiseModel::mEstimator::Fair</class>
    <class kind="class">gtsam::noiseModel::mEstimator::GemanMcClure</class>
    <class kind="class">gtsam::noiseModel::mEstimator::Huber</class>
    <class kind="class">gtsam::noiseModel::mEstimator::L2WithDeadZone</class>
    <class kind="class">gtsam::noiseModel::mEstimator::Null</class>
    <class kind="class">gtsam::noiseModel::mEstimator::Tukey</class>
    <class kind="class">gtsam::noiseModel::mEstimator::Welsch</class>
  </compound>
  <compound kind="namespace">
    <name>gtsam::treeTraversal</name>
    <filename>a01602.html</filename>
    <member kind="function">
      <type>void</type>
      <name>DepthFirstForest</name>
      <anchorfile>a01602.html</anchorfile>
      <anchor>a50e24f0a9085721425089cdce18f2475</anchor>
      <arglist>(FOREST &amp;forest, DATA &amp;rootData, VISITOR_PRE &amp;visitorPre, VISITOR_POST &amp;visitorPost)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>DepthFirstForest</name>
      <anchorfile>a01602.html</anchorfile>
      <anchor>a3735d0cee6f4d530e75479f7b1ebaf07</anchor>
      <arglist>(FOREST &amp;forest, DATA &amp;rootData, VISITOR_PRE &amp;visitorPre)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>DepthFirstForestParallel</name>
      <anchorfile>a01602.html</anchorfile>
      <anchor>afd7410807789da9ad91d6630063be36f</anchor>
      <arglist>(FOREST &amp;forest, DATA &amp;rootData, VISITOR_PRE &amp;visitorPre, VISITOR_POST &amp;visitorPost, int problemSizeThreshold=10)</arglist>
    </member>
    <member kind="function">
      <type>FastVector&lt; boost::shared_ptr&lt; typename FOREST::Node &gt; &gt;</type>
      <name>CloneForest</name>
      <anchorfile>a01602.html</anchorfile>
      <anchor>a67e7c6f5c4916c4a58a783e6b566d55a</anchor>
      <arglist>(const FOREST &amp;forest)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>PrintForest</name>
      <anchorfile>a01602.html</anchorfile>
      <anchor>a7228bbaf6ad62b65be7a2084c01aae5c</anchor>
      <arglist>(const FOREST &amp;forest, std::string str, const KeyFormatter &amp;keyFormatter)</arglist>
    </member>
  </compound>
  <compound kind="group">
    <name>LinearSolving</name>
    <title>Solving of sparse linear systems with least-squares</title>
    <filename>a01584.html</filename>
    <subgroup>Multifrontal</subgroup>
    <subgroup>Sequential</subgroup>
  </compound>
  <compound kind="group">
    <name>Multifrontal</name>
    <title>Solving by multifrontal variable elimination (QR and Cholesky)</title>
    <filename>a01585.html</filename>
  </compound>
  <compound kind="group">
    <name>Sequential</name>
    <title>Solving by sequential variable elimination (QR and Cholesky)</title>
    <filename>a01586.html</filename>
  </compound>
  <compound kind="group">
    <name>base</name>
    <title>Base</title>
    <filename>a01587.html</filename>
  </compound>
  <compound kind="group">
    <name>geometry</name>
    <title>Geometry</title>
    <filename>a01588.html</filename>
  </compound>
  <compound kind="group">
    <name>Navigation</name>
    <title>Navigation</title>
    <filename>a01589.html</filename>
  </compound>
  <compound kind="group">
    <name>SLAM</name>
    <title>SLAM</title>
    <filename>a01590.html</filename>
  </compound>
  <compound kind="group">
    <name>nonlinear</name>
    <title>Nonlinear</title>
    <filename>a01591.html</filename>
  </compound>
  <compound kind="group">
    <name>ISAM2</name>
    <title>ISAM2</title>
    <filename>a01592.html</filename>
  </compound>
  <compound kind="group">
    <name>SAM</name>
    <title>SAM</title>
    <filename>a01593.html</filename>
  </compound>
  <compound kind="group">
    <name>SFM</name>
    <title>SFM</title>
    <filename>a01594.html</filename>
  </compound>
  <compound kind="page">
    <name>index</name>
    <title>GTSAM</title>
    <filename>index.html</filename>
    <docanchor file="index.html" title="Creating new factor and variable types">new_factor_variable_types</docanchor>
  </compound>
</tagfile>
