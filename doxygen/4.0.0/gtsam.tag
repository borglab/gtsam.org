<?xml version='1.0' encoding='UTF-8' standalone='yes' ?>
<tagfile>
  <compound kind="file">
    <name>cholesky.cpp</name>
    <path>/Users/dellaert/git/gtsam/gtsam/base/</path>
    <filename>a00005</filename>
    <includes id="a00008" name="cholesky.h" local="no" imported="no">gtsam/base/cholesky.h</includes>
    <includes id="a00113" name="timing.h" local="no" imported="no">gtsam/base/timing.h</includes>
    <namespace>gtsam</namespace>
    <member kind="function">
      <type>pair&lt; size_t, bool &gt;</type>
      <name>choleskyCareful</name>
      <anchorfile>a01405.html</anchorfile>
      <anchor>a747683f736c50bca16b3aab0e95b1b76</anchor>
      <arglist>(Matrix &amp;ATA, int order=-1)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>choleskyPartial</name>
      <anchorfile>a01405.html</anchorfile>
      <anchor>abe82fa6aceccfa2360cf314ab44f39ad</anchor>
      <arglist>(Matrix &amp;ABC, size_t nFrontal, size_t topleft=0)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>cholesky.h</name>
    <path>/Users/dellaert/git/gtsam/gtsam/base/</path>
    <filename>a00008</filename>
    <includes id="a00074" name="Matrix.h" local="no" imported="no">gtsam/base/Matrix.h</includes>
    <namespace>gtsam</namespace>
    <member kind="function">
      <type>pair&lt; size_t, bool &gt;</type>
      <name>choleskyCareful</name>
      <anchorfile>a01405.html</anchorfile>
      <anchor>a747683f736c50bca16b3aab0e95b1b76</anchor>
      <arglist>(Matrix &amp;ATA, int order=-1)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>choleskyPartial</name>
      <anchorfile>a01405.html</anchorfile>
      <anchor>abe82fa6aceccfa2360cf314ab44f39ad</anchor>
      <arglist>(Matrix &amp;ABC, size_t nFrontal, size_t topleft=0)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>debug.cpp</name>
    <path>/Users/dellaert/git/gtsam/gtsam/base/</path>
    <filename>a00017</filename>
    <includes id="a00020" name="debug.h" local="no" imported="no">gtsam/base/debug.h</includes>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>debug.h</name>
    <path>/Users/dellaert/git/gtsam/gtsam/base/</path>
    <filename>a00020</filename>
    <includes id="a00038" name="FastMap.h" local="no" imported="no">gtsam/base/FastMap.h</includes>
    <includes id="a01076" name="global_includes.h" local="no" imported="no">gtsam/global_includes.h</includes>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>DSFMap.h</name>
    <path>/Users/dellaert/git/gtsam/gtsam/base/</path>
    <filename>a00023</filename>
    <class kind="class">gtsam::DSFMap</class>
    <class kind="struct">gtsam::DSFMap::Entry</class>
    <class kind="class">gtsam::IndexPair</class>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>DSFVector.cpp</name>
    <path>/Users/dellaert/git/gtsam/gtsam/base/</path>
    <filename>a00026</filename>
    <includes id="a00029" name="DSFVector.h" local="no" imported="no">gtsam/base/DSFVector.h</includes>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>DSFVector.h</name>
    <path>/Users/dellaert/git/gtsam/gtsam/base/</path>
    <filename>a00029</filename>
    <includes id="a01076" name="global_includes.h" local="no" imported="no">gtsam/global_includes.h</includes>
    <class kind="class">gtsam::DSFBase</class>
    <class kind="class">gtsam::DSFVector</class>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>FastDefaultAllocator.h</name>
    <path>/Users/dellaert/git/gtsam/gtsam/base/</path>
    <filename>a00032</filename>
    <class kind="struct">gtsam::internal::FastDefaultAllocator</class>
    <class kind="struct">gtsam::internal::FastDefaultVectorAllocator</class>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>FastList.h</name>
    <path>/Users/dellaert/git/gtsam/gtsam/base/</path>
    <filename>a00035</filename>
    <includes id="a00032" name="FastDefaultAllocator.h" local="no" imported="no">gtsam/base/FastDefaultAllocator.h</includes>
    <class kind="class">gtsam::FastList</class>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>FastMap.h</name>
    <path>/Users/dellaert/git/gtsam/gtsam/base/</path>
    <filename>a00038</filename>
    <includes id="a00032" name="FastDefaultAllocator.h" local="no" imported="no">gtsam/base/FastDefaultAllocator.h</includes>
    <class kind="class">gtsam::FastMap</class>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>FastSet.h</name>
    <path>/Users/dellaert/git/gtsam/gtsam/base/</path>
    <filename>a00041</filename>
    <includes id="a00032" name="FastDefaultAllocator.h" local="no" imported="no">gtsam/base/FastDefaultAllocator.h</includes>
    <includes id="a00098" name="Testable.h" local="no" imported="no">gtsam/base/Testable.h</includes>
    <class kind="class">gtsam::FastSet</class>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>FastVector.h</name>
    <path>/Users/dellaert/git/gtsam/gtsam/base/</path>
    <filename>a00044</filename>
    <includes id="a00032" name="FastDefaultAllocator.h" local="no" imported="no">gtsam/base/FastDefaultAllocator.h</includes>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>Group.h</name>
    <path>/Users/dellaert/git/gtsam/gtsam/base/</path>
    <filename>a00050</filename>
    <includes id="a00098" name="Testable.h" local="no" imported="no">gtsam/base/Testable.h</includes>
    <class kind="struct">gtsam::group_tag</class>
    <class kind="struct">gtsam::multiplicative_group_tag</class>
    <class kind="struct">gtsam::additive_group_tag</class>
    <class kind="struct">gtsam::traits</class>
    <class kind="class">gtsam::IsGroup</class>
    <class kind="class">gtsam::DirectProduct</class>
    <class kind="struct">gtsam::traits&lt; DirectProduct&lt; G, H &gt; &gt;</class>
    <class kind="class">gtsam::DirectSum</class>
    <class kind="struct">gtsam::traits&lt; DirectSum&lt; G, H &gt; &gt;</class>
    <namespace>gtsam</namespace>
    <member kind="define">
      <type>#define</type>
      <name>GTSAM_CONCEPT_GROUP_INST</name>
      <anchorfile>a00050.html</anchorfile>
      <anchor>aac1ea136475ea605715c809f4b3f0156</anchor>
      <arglist>(T)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BOOST_CONCEPT_REQUIRES</name>
      <anchorfile>a01405.html</anchorfile>
      <anchor>a2e95b5b5508cf3284107e979401bd1a4</anchor>
      <arglist>(((IsGroup&lt; G &gt;)),(bool)) check_group_invariants(const G &amp;a</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Lie.h</name>
    <path>/Users/dellaert/git/gtsam/gtsam/base/</path>
    <filename>a00053</filename>
    <includes id="a00068" name="Manifold.h" local="no" imported="no">gtsam/base/Manifold.h</includes>
    <includes id="a00050" name="Group.h" local="no" imported="no">gtsam/base/Group.h</includes>
    <class kind="struct">gtsam::LieGroup</class>
    <class kind="struct">gtsam::lie_group_tag</class>
    <class kind="struct">gtsam::internal::LieGroupTraits</class>
    <class kind="struct">gtsam::internal::LieGroup</class>
    <class kind="class">gtsam::IsLieGroup</class>
    <namespace>gtsam</namespace>
    <member kind="define">
      <type>#define</type>
      <name>GTSAM_CONCEPT_LIE_INST</name>
      <anchorfile>a00053.html</anchorfile>
      <anchor>aeef5af7d583d275fbc0e6e5af8bf2afc</anchor>
      <arglist>(T)</arglist>
    </member>
    <member kind="function">
      <type>Class</type>
      <name>between_default</name>
      <anchorfile>a01405.html</anchorfile>
      <anchor>abd92914d0822d42584d46f31fb500048</anchor>
      <arglist>(const Class &amp;l1, const Class &amp;l2)</arglist>
    </member>
    <member kind="function">
      <type>Vector</type>
      <name>logmap_default</name>
      <anchorfile>a01405.html</anchorfile>
      <anchor>a5c6ccec4a3ea452361c0956766bccef5</anchor>
      <arglist>(const Class &amp;l0, const Class &amp;lp)</arglist>
    </member>
    <member kind="function">
      <type>Class</type>
      <name>expmap_default</name>
      <anchorfile>a01405.html</anchorfile>
      <anchor>af5a7c0a7422c38a0baa131c073e233ac</anchor>
      <arglist>(const Class &amp;t, const Vector &amp;d)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>BCH</name>
      <anchorfile>a01405.html</anchorfile>
      <anchor>adbd55c711e6ceee791b595558eb3ec8a</anchor>
      <arglist>(const T &amp;X, const T &amp;Y)</arglist>
    </member>
    <member kind="function">
      <type>Matrix</type>
      <name>wedge</name>
      <anchorfile>a01405.html</anchorfile>
      <anchor>afe28b7f8e3592fb9f5cf9ebae09497ba</anchor>
      <arglist>(const Vector &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>expm</name>
      <anchorfile>a01405.html</anchorfile>
      <anchor>a3041816208c79ef76d3ef2e0991d90b2</anchor>
      <arglist>(const Vector &amp;x, int K=7)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>interpolate</name>
      <anchorfile>a01405.html</anchorfile>
      <anchor>a38c24f15506355b416f2d680dd6b61e1</anchor>
      <arglist>(const T &amp;X, const T &amp;Y, double t)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>LieMatrix.h</name>
    <path>/Users/dellaert/git/gtsam/gtsam/base/</path>
    <filename>a00056</filename>
  </compound>
  <compound kind="file">
    <name>lieProxies.h</name>
    <path>/Users/dellaert/git/gtsam/gtsam/base/</path>
    <filename>a00059</filename>
    <includes id="a01076" name="global_includes.h" local="no" imported="no">gtsam/global_includes.h</includes>
    <namespace>gtsam</namespace>
    <member kind="function">
      <type>T</type>
      <name>between</name>
      <anchorfile>a00059.html</anchorfile>
      <anchor>a72a7c561cc91f437a22023297fb7f658</anchor>
      <arglist>(const T &amp;t1, const T &amp;t2)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>inverse</name>
      <anchorfile>a00059.html</anchorfile>
      <anchor>aaa623dd059a67523b029af6ec20a38da</anchor>
      <arglist>(const T &amp;t)</arglist>
    </member>
    <member kind="function">
      <type>P</type>
      <name>rotate</name>
      <anchorfile>a00059.html</anchorfile>
      <anchor>a644bbe6719d8dd756e11e8b3d2fd229a</anchor>
      <arglist>(const T &amp;r, const P &amp;pt)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>LieScalar.h</name>
    <path>/Users/dellaert/git/gtsam/gtsam/base/</path>
    <filename>a00062</filename>
  </compound>
  <compound kind="file">
    <name>LieVector.h</name>
    <path>/Users/dellaert/git/gtsam/gtsam/base/</path>
    <filename>a00065</filename>
  </compound>
  <compound kind="file">
    <name>Manifold.h</name>
    <path>/Users/dellaert/git/gtsam/gtsam/base/</path>
    <filename>a00068</filename>
    <includes id="a00074" name="Matrix.h" local="no" imported="no">gtsam/base/Matrix.h</includes>
    <includes id="a00098" name="Testable.h" local="no" imported="no">gtsam/base/Testable.h</includes>
    <includes id="a00080" name="OptionalJacobian.h" local="no" imported="no">gtsam/base/OptionalJacobian.h</includes>
    <class kind="struct">gtsam::manifold_tag</class>
    <class kind="struct">gtsam::traits</class>
    <class kind="struct">gtsam::internal::HasManifoldPrereqs</class>
    <class kind="struct">gtsam::internal::ManifoldImpl</class>
    <class kind="struct">gtsam::internal::ManifoldImpl&lt; Class, Eigen::Dynamic &gt;</class>
    <class kind="struct">gtsam::internal::ManifoldTraits</class>
    <class kind="struct">gtsam::internal::Manifold</class>
    <class kind="struct">gtsam::FixedDimension</class>
    <namespace>gtsam</namespace>
    <member kind="define">
      <type>#define</type>
      <name>GTSAM_CONCEPT_MANIFOLD_INST</name>
      <anchorfile>a00068.html</anchorfile>
      <anchor>a64b5e2e3c812d2cdea5ee294100f825f</anchor>
      <arglist>(T)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BOOST_CONCEPT_REQUIRES</name>
      <anchorfile>a01405.html</anchorfile>
      <anchor>ae03a6aedf0a82f67c2f3e987fb3aacba</anchor>
      <arglist>(((IsTestable&lt; T &gt;)),(bool)) check_manifold_invariants(const T &amp;a</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Matrix.cpp</name>
    <path>/Users/dellaert/git/gtsam/gtsam/base/</path>
    <filename>a00071</filename>
    <includes id="a01076" name="global_includes.h" local="no" imported="no">gtsam/global_includes.h</includes>
    <includes id="a00074" name="Matrix.h" local="no" imported="no">gtsam/base/Matrix.h</includes>
    <includes id="a00113" name="timing.h" local="no" imported="no">gtsam/base/timing.h</includes>
    <includes id="a00128" name="Vector.h" local="no" imported="no">gtsam/base/Vector.h</includes>
    <includes id="a00035" name="FastList.h" local="no" imported="no">gtsam/base/FastList.h</includes>
    <namespace>gtsam</namespace>
    <member kind="function">
      <type>bool</type>
      <name>assert_equal</name>
      <anchorfile>a01405.html</anchorfile>
      <anchor>a3f9622226dfe06908f11b42bf0bdd22d</anchor>
      <arglist>(const Matrix &amp;A, const Matrix &amp;B, double tol=1e-9)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>assert_inequal</name>
      <anchorfile>a01405.html</anchorfile>
      <anchor>a7a116d0643f123ef3b15d91056506492</anchor>
      <arglist>(const Matrix &amp;A, const Matrix &amp;B, double tol=1e-9)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>assert_equal</name>
      <anchorfile>a01405.html</anchorfile>
      <anchor>abb0e19bbbeaca95843e8161b89a12fda</anchor>
      <arglist>(const std::list&lt; Matrix &gt; &amp;As, const std::list&lt; Matrix &gt; &amp;Bs, double tol=1e-9)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>linear_independent</name>
      <anchorfile>a01405.html</anchorfile>
      <anchor>ad8f0349471464c1fb515819d9503849a</anchor>
      <arglist>(const Matrix &amp;A, const Matrix &amp;B, double tol=1e-9)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>linear_dependent</name>
      <anchorfile>a01405.html</anchorfile>
      <anchor>a4b81794af72954abafbb726fc712f5db</anchor>
      <arglist>(const Matrix &amp;A, const Matrix &amp;B, double tol=1e-9)</arglist>
    </member>
    <member kind="function">
      <type>Vector</type>
      <name>operator^</name>
      <anchorfile>a01405.html</anchorfile>
      <anchor>a2218e53a2b99c449e70aa5b7805895fc</anchor>
      <arglist>(const Matrix &amp;A, const Vector &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>a01405.html</anchorfile>
      <anchor>a54fa43c89c5334314c8c75939dd5c2d7</anchor>
      <arglist>(const Matrix &amp;A, const std::string &amp;s, std::ostream &amp;stream)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>a01405.html</anchorfile>
      <anchor>a44ead03912d5dcf094d8421e1702ee71</anchor>
      <arglist>(const Matrix &amp;A, const std::string &amp;s=&quot;&quot;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>save</name>
      <anchorfile>a01405.html</anchorfile>
      <anchor>a3eb7eed9019d3fda8fcf74fbf85b85c9</anchor>
      <arglist>(const Matrix &amp;A, const std::string &amp;s, const std::string &amp;filename)</arglist>
    </member>
    <member kind="function">
      <type>istream &amp;</type>
      <name>operator&gt;&gt;</name>
      <anchorfile>a01405.html</anchorfile>
      <anchor>a7d85957bab2d18cf56ab9aaf95a106de</anchor>
      <arglist>(std::istream &amp;inputStream, Matrix &amp;destinationMatrix)</arglist>
    </member>
    <member kind="function">
      <type>Matrix</type>
      <name>diag</name>
      <anchorfile>a01405.html</anchorfile>
      <anchor>af1c32907adce74cf9edd6ee5bba5a085</anchor>
      <arglist>(const std::vector&lt; Matrix &gt; &amp;Hs)</arglist>
    </member>
    <member kind="function">
      <type>pair&lt; Matrix, Matrix &gt;</type>
      <name>qr</name>
      <anchorfile>a01405.html</anchorfile>
      <anchor>ae32c295e2c40c1e85f146a8a6266eaa8</anchor>
      <arglist>(const Matrix &amp;A)</arglist>
    </member>
    <member kind="function">
      <type>list&lt; boost::tuple&lt; Vector, double, double &gt; &gt;</type>
      <name>weighted_eliminate</name>
      <anchorfile>a01405.html</anchorfile>
      <anchor>a60019a03f26b92c6b2a08e43d153d4c0</anchor>
      <arglist>(Matrix &amp;A, Vector &amp;b, const Vector &amp;sigmas)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>householder_</name>
      <anchorfile>a01405.html</anchorfile>
      <anchor>abdd1ab05e8ac90b340fbd8f3b322dc6d</anchor>
      <arglist>(Matrix &amp;A, size_t k, bool copy_vectors)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>householder</name>
      <anchorfile>a01405.html</anchorfile>
      <anchor>a7baa2f3184a444adce108633c0265e0c</anchor>
      <arglist>(Matrix &amp;A, size_t k)</arglist>
    </member>
    <member kind="function">
      <type>Vector</type>
      <name>backSubstituteLower</name>
      <anchorfile>a01405.html</anchorfile>
      <anchor>a0d998e1b770c9864946ddb031b1c4522</anchor>
      <arglist>(const Matrix &amp;L, const Vector &amp;b, bool unit=false)</arglist>
    </member>
    <member kind="function">
      <type>Vector</type>
      <name>backSubstituteUpper</name>
      <anchorfile>a01405.html</anchorfile>
      <anchor>a6c4876cbe85d5651a52eda0e97c60f2f</anchor>
      <arglist>(const Matrix &amp;U, const Vector &amp;b, bool unit=false)</arglist>
    </member>
    <member kind="function">
      <type>Vector</type>
      <name>backSubstituteUpper</name>
      <anchorfile>a01405.html</anchorfile>
      <anchor>a8b0bf332d52b333dab2b20d763c8925b</anchor>
      <arglist>(const Vector &amp;b, const Matrix &amp;U, bool unit=false)</arglist>
    </member>
    <member kind="function">
      <type>Matrix</type>
      <name>stack</name>
      <anchorfile>a01405.html</anchorfile>
      <anchor>a5c82884a356ddd09229a5283aed04df9</anchor>
      <arglist>(size_t nrMatrices,...)</arglist>
    </member>
    <member kind="function">
      <type>Matrix</type>
      <name>collect</name>
      <anchorfile>a01405.html</anchorfile>
      <anchor>ad8b524ba6c9aed0d21a020999c9b5d88</anchor>
      <arglist>(const std::vector&lt; const Matrix * &gt; &amp;matrices, size_t m=0, size_t n=0)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>vector_scale_inplace</name>
      <anchorfile>a01405.html</anchorfile>
      <anchor>a24d3ad0252f91f0ec301593c45cf5af7</anchor>
      <arglist>(const Vector &amp;v, Matrix &amp;A, bool inf_mask=false)</arglist>
    </member>
    <member kind="function">
      <type>Matrix</type>
      <name>cholesky_inverse</name>
      <anchorfile>a01405.html</anchorfile>
      <anchor>aba542e2cd85f08b76f80a0871a4ea713</anchor>
      <arglist>(const Matrix &amp;A)</arglist>
    </member>
    <member kind="function">
      <type>Matrix</type>
      <name>inverse_square_root</name>
      <anchorfile>a01405.html</anchorfile>
      <anchor>aff78dee59ac0250432081f39deb5f6d1</anchor>
      <arglist>(const Matrix &amp;A)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>svd</name>
      <anchorfile>a01405.html</anchorfile>
      <anchor>a8d7e46204d953f64a39445599dbd7eee</anchor>
      <arglist>(const Matrix &amp;A, Matrix &amp;U, Vector &amp;S, Matrix &amp;V)</arglist>
    </member>
    <member kind="function">
      <type>boost::tuple&lt; int, double, Vector &gt;</type>
      <name>DLT</name>
      <anchorfile>a01405.html</anchorfile>
      <anchor>ab2c65f1a69009a306b6a5f9ef31dcee2</anchor>
      <arglist>(const Matrix &amp;A, double rank_tol=1e-9)</arglist>
    </member>
    <member kind="function">
      <type>Matrix</type>
      <name>expm</name>
      <anchorfile>a01405.html</anchorfile>
      <anchor>ab15462d8c16813d0a7a5b1f76a2f64b7</anchor>
      <arglist>(const Matrix &amp;A, size_t K=7)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>inplace_QR</name>
      <anchorfile>a01405.html</anchorfile>
      <anchor>a5554cb2735894b901f4dc72b9f61041d</anchor>
      <arglist>(Matrix &amp;A)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Matrix.h</name>
    <path>/Users/dellaert/git/gtsam/gtsam/base/</path>
    <filename>a00074</filename>
    <includes id="a00080" name="OptionalJacobian.h" local="no" imported="no">gtsam/base/OptionalJacobian.h</includes>
    <includes id="a00128" name="Vector.h" local="no" imported="no">gtsam/base/Vector.h</includes>
    <class kind="struct">gtsam::Reshape</class>
    <class kind="struct">gtsam::Reshape&lt; M, M, InOptions, M, M, InOptions &gt;</class>
    <class kind="struct">gtsam::Reshape&lt; M, N, InOptions, M, N, InOptions &gt;</class>
    <class kind="struct">gtsam::Reshape&lt; N, M, InOptions, M, N, InOptions &gt;</class>
    <class kind="struct">gtsam::MultiplyWithInverse</class>
    <class kind="struct">gtsam::MultiplyWithInverseFunction</class>
    <namespace>gtsam</namespace>
    <member kind="function">
      <type>bool</type>
      <name>equal_with_abs_tol</name>
      <anchorfile>a01405.html</anchorfile>
      <anchor>af31e657258505b2e5148846ebbaa3195</anchor>
      <arglist>(const Eigen::DenseBase&lt; MATRIX &gt; &amp;A, const Eigen::DenseBase&lt; MATRIX &gt; &amp;B, double tol=1e-9)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>a01405.html</anchorfile>
      <anchor>afd5b3cf3f54adcbdd6d9e7403f1a792f</anchor>
      <arglist>(const Matrix &amp;A, const Matrix &amp;B)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>a01405.html</anchorfile>
      <anchor>ab235abf7505b634be2165e0db58239dd</anchor>
      <arglist>(const Matrix &amp;A, const Matrix &amp;B)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>assert_equal</name>
      <anchorfile>a01405.html</anchorfile>
      <anchor>a3f9622226dfe06908f11b42bf0bdd22d</anchor>
      <arglist>(const Matrix &amp;A, const Matrix &amp;B, double tol=1e-9)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>assert_inequal</name>
      <anchorfile>a01405.html</anchorfile>
      <anchor>a7a116d0643f123ef3b15d91056506492</anchor>
      <arglist>(const Matrix &amp;A, const Matrix &amp;B, double tol=1e-9)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>assert_equal</name>
      <anchorfile>a01405.html</anchorfile>
      <anchor>abb0e19bbbeaca95843e8161b89a12fda</anchor>
      <arglist>(const std::list&lt; Matrix &gt; &amp;As, const std::list&lt; Matrix &gt; &amp;Bs, double tol=1e-9)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>linear_independent</name>
      <anchorfile>a01405.html</anchorfile>
      <anchor>ad8f0349471464c1fb515819d9503849a</anchor>
      <arglist>(const Matrix &amp;A, const Matrix &amp;B, double tol=1e-9)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>linear_dependent</name>
      <anchorfile>a01405.html</anchorfile>
      <anchor>a4b81794af72954abafbb726fc712f5db</anchor>
      <arglist>(const Matrix &amp;A, const Matrix &amp;B, double tol=1e-9)</arglist>
    </member>
    <member kind="function">
      <type>Vector</type>
      <name>operator^</name>
      <anchorfile>a01405.html</anchorfile>
      <anchor>a2218e53a2b99c449e70aa5b7805895fc</anchor>
      <arglist>(const Matrix &amp;A, const Vector &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>MATRIX</type>
      <name>prod</name>
      <anchorfile>a01405.html</anchorfile>
      <anchor>abc29e3164ed30e785a3c48dfd1aa6ca5</anchor>
      <arglist>(const MATRIX &amp;A, const MATRIX &amp;B)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>a01405.html</anchorfile>
      <anchor>a54fa43c89c5334314c8c75939dd5c2d7</anchor>
      <arglist>(const Matrix &amp;A, const std::string &amp;s, std::ostream &amp;stream)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>a01405.html</anchorfile>
      <anchor>a44ead03912d5dcf094d8421e1702ee71</anchor>
      <arglist>(const Matrix &amp;A, const std::string &amp;s=&quot;&quot;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>save</name>
      <anchorfile>a01405.html</anchorfile>
      <anchor>a3eb7eed9019d3fda8fcf74fbf85b85c9</anchor>
      <arglist>(const Matrix &amp;A, const std::string &amp;s, const std::string &amp;filename)</arglist>
    </member>
    <member kind="function">
      <type>istream &amp;</type>
      <name>operator&gt;&gt;</name>
      <anchorfile>a01405.html</anchorfile>
      <anchor>a7d85957bab2d18cf56ab9aaf95a106de</anchor>
      <arglist>(std::istream &amp;inputStream, Matrix &amp;destinationMatrix)</arglist>
    </member>
    <member kind="function">
      <type>Eigen::Block&lt; const MATRIX &gt;</type>
      <name>sub</name>
      <anchorfile>a01405.html</anchorfile>
      <anchor>aed6673ca73bb7ab59f46f08e3a5cc284</anchor>
      <arglist>(const MATRIX &amp;A, size_t i1, size_t i2, size_t j1, size_t j2)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>insertSub</name>
      <anchorfile>a01405.html</anchorfile>
      <anchor>ad1088fa2d1494e6a4123a6bc3f5c2d7e</anchor>
      <arglist>(Eigen::MatrixBase&lt; Derived1 &gt; &amp;fullMatrix, const Eigen::MatrixBase&lt; Derived2 &gt; &amp;subMatrix, size_t i, size_t j)</arglist>
    </member>
    <member kind="function">
      <type>Matrix</type>
      <name>diag</name>
      <anchorfile>a01405.html</anchorfile>
      <anchor>af1c32907adce74cf9edd6ee5bba5a085</anchor>
      <arglist>(const std::vector&lt; Matrix &gt; &amp;Hs)</arglist>
    </member>
    <member kind="function">
      <type>const MATRIX::ConstColXpr</type>
      <name>column</name>
      <anchorfile>a01405.html</anchorfile>
      <anchor>a559dba69e2854eb66e34222f60f55722</anchor>
      <arglist>(const MATRIX &amp;A, size_t j)</arglist>
    </member>
    <member kind="function">
      <type>const MATRIX::ConstRowXpr</type>
      <name>row</name>
      <anchorfile>a01405.html</anchorfile>
      <anchor>a2754f325c8600303d627d9e8cf1f9949</anchor>
      <arglist>(const MATRIX &amp;A, size_t j)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>zeroBelowDiagonal</name>
      <anchorfile>a01405.html</anchorfile>
      <anchor>a57edf6ed7312f63d35f73233665c334d</anchor>
      <arglist>(MATRIX &amp;A, size_t cols=0)</arglist>
    </member>
    <member kind="function">
      <type>Matrix</type>
      <name>trans</name>
      <anchorfile>a01405.html</anchorfile>
      <anchor>aa2e36d7ab63000feddaeb61bbfcf2db1</anchor>
      <arglist>(const Matrix &amp;A)</arglist>
    </member>
    <member kind="function">
      <type>pair&lt; Matrix, Matrix &gt;</type>
      <name>qr</name>
      <anchorfile>a01405.html</anchorfile>
      <anchor>ae32c295e2c40c1e85f146a8a6266eaa8</anchor>
      <arglist>(const Matrix &amp;A)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>inplace_QR</name>
      <anchorfile>a01405.html</anchorfile>
      <anchor>a5554cb2735894b901f4dc72b9f61041d</anchor>
      <arglist>(Matrix &amp;A)</arglist>
    </member>
    <member kind="function">
      <type>list&lt; boost::tuple&lt; Vector, double, double &gt; &gt;</type>
      <name>weighted_eliminate</name>
      <anchorfile>a01405.html</anchorfile>
      <anchor>a60019a03f26b92c6b2a08e43d153d4c0</anchor>
      <arglist>(Matrix &amp;A, Vector &amp;b, const Vector &amp;sigmas)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>householder_</name>
      <anchorfile>a01405.html</anchorfile>
      <anchor>abdd1ab05e8ac90b340fbd8f3b322dc6d</anchor>
      <arglist>(Matrix &amp;A, size_t k, bool copy_vectors)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>householder</name>
      <anchorfile>a01405.html</anchorfile>
      <anchor>a7baa2f3184a444adce108633c0265e0c</anchor>
      <arglist>(Matrix &amp;A, size_t k)</arglist>
    </member>
    <member kind="function">
      <type>Vector</type>
      <name>backSubstituteUpper</name>
      <anchorfile>a01405.html</anchorfile>
      <anchor>a6c4876cbe85d5651a52eda0e97c60f2f</anchor>
      <arglist>(const Matrix &amp;U, const Vector &amp;b, bool unit=false)</arglist>
    </member>
    <member kind="function">
      <type>Vector</type>
      <name>backSubstituteUpper</name>
      <anchorfile>a01405.html</anchorfile>
      <anchor>a8b0bf332d52b333dab2b20d763c8925b</anchor>
      <arglist>(const Vector &amp;b, const Matrix &amp;U, bool unit=false)</arglist>
    </member>
    <member kind="function">
      <type>Vector</type>
      <name>backSubstituteLower</name>
      <anchorfile>a01405.html</anchorfile>
      <anchor>a0d998e1b770c9864946ddb031b1c4522</anchor>
      <arglist>(const Matrix &amp;L, const Vector &amp;b, bool unit=false)</arglist>
    </member>
    <member kind="function">
      <type>Matrix</type>
      <name>stack</name>
      <anchorfile>a01405.html</anchorfile>
      <anchor>a5c82884a356ddd09229a5283aed04df9</anchor>
      <arglist>(size_t nrMatrices,...)</arglist>
    </member>
    <member kind="function">
      <type>Matrix</type>
      <name>collect</name>
      <anchorfile>a01405.html</anchorfile>
      <anchor>ad8b524ba6c9aed0d21a020999c9b5d88</anchor>
      <arglist>(const std::vector&lt; const Matrix * &gt; &amp;matrices, size_t m=0, size_t n=0)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>vector_scale_inplace</name>
      <anchorfile>a01405.html</anchorfile>
      <anchor>a24d3ad0252f91f0ec301593c45cf5af7</anchor>
      <arglist>(const Vector &amp;v, Matrix &amp;A, bool inf_mask=false)</arglist>
    </member>
    <member kind="function">
      <type>Matrix3</type>
      <name>skewSymmetric</name>
      <anchorfile>a01405.html</anchorfile>
      <anchor>a97f108d19e52c83c331c55d35b23796e</anchor>
      <arglist>(double wx, double wy, double wz)</arglist>
    </member>
    <member kind="function">
      <type>Matrix</type>
      <name>inverse_square_root</name>
      <anchorfile>a01405.html</anchorfile>
      <anchor>aff78dee59ac0250432081f39deb5f6d1</anchor>
      <arglist>(const Matrix &amp;A)</arglist>
    </member>
    <member kind="function">
      <type>Matrix</type>
      <name>cholesky_inverse</name>
      <anchorfile>a01405.html</anchorfile>
      <anchor>aba542e2cd85f08b76f80a0871a4ea713</anchor>
      <arglist>(const Matrix &amp;A)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>svd</name>
      <anchorfile>a01405.html</anchorfile>
      <anchor>a8d7e46204d953f64a39445599dbd7eee</anchor>
      <arglist>(const Matrix &amp;A, Matrix &amp;U, Vector &amp;S, Matrix &amp;V)</arglist>
    </member>
    <member kind="function">
      <type>boost::tuple&lt; int, double, Vector &gt;</type>
      <name>DLT</name>
      <anchorfile>a01405.html</anchorfile>
      <anchor>ab2c65f1a69009a306b6a5f9ef31dcee2</anchor>
      <arglist>(const Matrix &amp;A, double rank_tol=1e-9)</arglist>
    </member>
    <member kind="function">
      <type>Matrix</type>
      <name>expm</name>
      <anchorfile>a01405.html</anchorfile>
      <anchor>ab15462d8c16813d0a7a5b1f76a2f64b7</anchor>
      <arglist>(const Matrix &amp;A, size_t K=7)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>numericalDerivative.h</name>
    <path>/Users/dellaert/git/gtsam/gtsam/base/</path>
    <filename>a00077</filename>
    <includes id="a00680" name="VectorValues.h" local="no" imported="no">gtsam/linear/VectorValues.h</includes>
    <includes id="a00605" name="JacobianFactor.h" local="no" imported="no">gtsam/linear/JacobianFactor.h</includes>
    <includes id="a00917" name="Values.h" local="no" imported="no">gtsam/nonlinear/Values.h</includes>
    <includes id="a00053" name="Lie.h" local="no" imported="no">gtsam/base/Lie.h</includes>
    <class kind="struct">gtsam::internal::FixedSizeMatrix</class>
    <class kind="class">gtsam::G_x1</class>
    <namespace>gtsam</namespace>
    <member kind="function">
      <type>Eigen::Matrix&lt; double, N, 1 &gt;</type>
      <name>numericalGradient</name>
      <anchorfile>a01405.html</anchorfile>
      <anchor>a7104a97b496796bb2adedf9adcb7d613</anchor>
      <arglist>(boost::function&lt; double(const X &amp;)&gt; h, const X &amp;x, double delta=1e-5)</arglist>
    </member>
    <member kind="function">
      <type>internal::FixedSizeMatrix&lt; Y, X &gt;::type</type>
      <name>numericalDerivative11</name>
      <anchorfile>a01405.html</anchorfile>
      <anchor>a51e2ca23db34b647b6928ce23bb04e8a</anchor>
      <arglist>(boost::function&lt; Y(const X &amp;)&gt; h, const X &amp;x, double delta=1e-5)</arglist>
    </member>
    <member kind="function">
      <type>internal::FixedSizeMatrix&lt; Y, X &gt;::type</type>
      <name>numericalDerivative11</name>
      <anchorfile>a01405.html</anchorfile>
      <anchor>ad45cc8dad99ef6a1eefd0e15887dc9ec</anchor>
      <arglist>(Y(*h)(const X &amp;), const X &amp;x, double delta=1e-5)</arglist>
    </member>
    <member kind="function">
      <type>internal::FixedSizeMatrix&lt; Y, X1 &gt;::type</type>
      <name>numericalDerivative21</name>
      <anchorfile>a01405.html</anchorfile>
      <anchor>a1b86019fe968fdc636edf34bbf504cd5</anchor>
      <arglist>(const boost::function&lt; Y(const X1 &amp;, const X2 &amp;)&gt; &amp;h, const X1 &amp;x1, const X2 &amp;x2, double delta=1e-5)</arglist>
    </member>
    <member kind="function">
      <type>internal::FixedSizeMatrix&lt; Y, X1 &gt;::type</type>
      <name>numericalDerivative21</name>
      <anchorfile>a01405.html</anchorfile>
      <anchor>ab38d9689510396b82d59e503dd9cbe7a</anchor>
      <arglist>(Y(*h)(const X1 &amp;, const X2 &amp;), const X1 &amp;x1, const X2 &amp;x2, double delta=1e-5)</arglist>
    </member>
    <member kind="function">
      <type>internal::FixedSizeMatrix&lt; Y, X2 &gt;::type</type>
      <name>numericalDerivative22</name>
      <anchorfile>a01405.html</anchorfile>
      <anchor>a811e5bea9feb408267509d3d4d150923</anchor>
      <arglist>(boost::function&lt; Y(const X1 &amp;, const X2 &amp;)&gt; h, const X1 &amp;x1, const X2 &amp;x2, double delta=1e-5)</arglist>
    </member>
    <member kind="function">
      <type>internal::FixedSizeMatrix&lt; Y, X2 &gt;::type</type>
      <name>numericalDerivative22</name>
      <anchorfile>a01405.html</anchorfile>
      <anchor>a00d2845cb1dbc7484215c01e5c3d0261</anchor>
      <arglist>(Y(*h)(const X1 &amp;, const X2 &amp;), const X1 &amp;x1, const X2 &amp;x2, double delta=1e-5)</arglist>
    </member>
    <member kind="function">
      <type>internal::FixedSizeMatrix&lt; Y, X1 &gt;::type</type>
      <name>numericalDerivative31</name>
      <anchorfile>a01405.html</anchorfile>
      <anchor>a5c5d1cf9863c31ab10accbceda591a29</anchor>
      <arglist>(boost::function&lt; Y(const X1 &amp;, const X2 &amp;, const X3 &amp;)&gt; h, const X1 &amp;x1, const X2 &amp;x2, const X3 &amp;x3, double delta=1e-5)</arglist>
    </member>
    <member kind="function">
      <type>internal::FixedSizeMatrix&lt; Y, X2 &gt;::type</type>
      <name>numericalDerivative32</name>
      <anchorfile>a01405.html</anchorfile>
      <anchor>ae3a165abf55b39a1146dbb0c64f38df7</anchor>
      <arglist>(boost::function&lt; Y(const X1 &amp;, const X2 &amp;, const X3 &amp;)&gt; h, const X1 &amp;x1, const X2 &amp;x2, const X3 &amp;x3, double delta=1e-5)</arglist>
    </member>
    <member kind="function">
      <type>internal::FixedSizeMatrix&lt; Y, X3 &gt;::type</type>
      <name>numericalDerivative33</name>
      <anchorfile>a01405.html</anchorfile>
      <anchor>af025c148363317c715495a275c7326e5</anchor>
      <arglist>(boost::function&lt; Y(const X1 &amp;, const X2 &amp;, const X3 &amp;)&gt; h, const X1 &amp;x1, const X2 &amp;x2, const X3 &amp;x3, double delta=1e-5)</arglist>
    </member>
    <member kind="function">
      <type>internal::FixedSizeMatrix&lt; Y, X1 &gt;::type</type>
      <name>numericalDerivative41</name>
      <anchorfile>a01405.html</anchorfile>
      <anchor>a3b3a148c9c82b1b916fad1a5e0e4148b</anchor>
      <arglist>(boost::function&lt; Y(const X1 &amp;, const X2 &amp;, const X3 &amp;, const X4 &amp;)&gt; h, const X1 &amp;x1, const X2 &amp;x2, const X3 &amp;x3, const X4 &amp;x4, double delta=1e-5)</arglist>
    </member>
    <member kind="function">
      <type>internal::FixedSizeMatrix&lt; Y, X2 &gt;::type</type>
      <name>numericalDerivative42</name>
      <anchorfile>a01405.html</anchorfile>
      <anchor>acc4da7057faa7da0ff58658293590f5d</anchor>
      <arglist>(boost::function&lt; Y(const X1 &amp;, const X2 &amp;, const X3 &amp;, const X4 &amp;)&gt; h, const X1 &amp;x1, const X2 &amp;x2, const X3 &amp;x3, const X4 &amp;x4, double delta=1e-5)</arglist>
    </member>
    <member kind="function">
      <type>internal::FixedSizeMatrix&lt; Y, X3 &gt;::type</type>
      <name>numericalDerivative43</name>
      <anchorfile>a01405.html</anchorfile>
      <anchor>a2b61c2de49bec057000cb622b3ceeee4</anchor>
      <arglist>(boost::function&lt; Y(const X1 &amp;, const X2 &amp;, const X3 &amp;, const X4 &amp;)&gt; h, const X1 &amp;x1, const X2 &amp;x2, const X3 &amp;x3, const X4 &amp;x4, double delta=1e-5)</arglist>
    </member>
    <member kind="function">
      <type>internal::FixedSizeMatrix&lt; Y, X4 &gt;::type</type>
      <name>numericalDerivative44</name>
      <anchorfile>a01405.html</anchorfile>
      <anchor>ae52c82e38fb34ee0e6cd674cefc6e0a4</anchor>
      <arglist>(boost::function&lt; Y(const X1 &amp;, const X2 &amp;, const X3 &amp;, const X4 &amp;)&gt; h, const X1 &amp;x1, const X2 &amp;x2, const X3 &amp;x3, const X4 &amp;x4, double delta=1e-5)</arglist>
    </member>
    <member kind="function">
      <type>internal::FixedSizeMatrix&lt; Y, X1 &gt;::type</type>
      <name>numericalDerivative51</name>
      <anchorfile>a01405.html</anchorfile>
      <anchor>a2419f7b13289a8d7d794ef18bc97242f</anchor>
      <arglist>(boost::function&lt; Y(const X1 &amp;, const X2 &amp;, const X3 &amp;, const X4 &amp;, const X5 &amp;)&gt; h, const X1 &amp;x1, const X2 &amp;x2, const X3 &amp;x3, const X4 &amp;x4, const X5 &amp;x5, double delta=1e-5)</arglist>
    </member>
    <member kind="function">
      <type>internal::FixedSizeMatrix&lt; Y, X2 &gt;::type</type>
      <name>numericalDerivative52</name>
      <anchorfile>a01405.html</anchorfile>
      <anchor>ac6e12cef913504662b259cc716ffa556</anchor>
      <arglist>(boost::function&lt; Y(const X1 &amp;, const X2 &amp;, const X3 &amp;, const X4 &amp;, const X5 &amp;)&gt; h, const X1 &amp;x1, const X2 &amp;x2, const X3 &amp;x3, const X4 &amp;x4, const X5 &amp;x5, double delta=1e-5)</arglist>
    </member>
    <member kind="function">
      <type>internal::FixedSizeMatrix&lt; Y, X3 &gt;::type</type>
      <name>numericalDerivative53</name>
      <anchorfile>a01405.html</anchorfile>
      <anchor>a9a02672e1a81537fd5d0d634573b96df</anchor>
      <arglist>(boost::function&lt; Y(const X1 &amp;, const X2 &amp;, const X3 &amp;, const X4 &amp;, const X5 &amp;)&gt; h, const X1 &amp;x1, const X2 &amp;x2, const X3 &amp;x3, const X4 &amp;x4, const X5 &amp;x5, double delta=1e-5)</arglist>
    </member>
    <member kind="function">
      <type>internal::FixedSizeMatrix&lt; Y, X4 &gt;::type</type>
      <name>numericalDerivative54</name>
      <anchorfile>a01405.html</anchorfile>
      <anchor>a7665497905bb485e9273ada3b506ade2</anchor>
      <arglist>(boost::function&lt; Y(const X1 &amp;, const X2 &amp;, const X3 &amp;, const X4 &amp;, const X5 &amp;)&gt; h, const X1 &amp;x1, const X2 &amp;x2, const X3 &amp;x3, const X4 &amp;x4, const X5 &amp;x5, double delta=1e-5)</arglist>
    </member>
    <member kind="function">
      <type>internal::FixedSizeMatrix&lt; Y, X5 &gt;::type</type>
      <name>numericalDerivative55</name>
      <anchorfile>a01405.html</anchorfile>
      <anchor>acfa0fdee5759b195b4672e5079f2aaa5</anchor>
      <arglist>(boost::function&lt; Y(const X1 &amp;, const X2 &amp;, const X3 &amp;, const X4 &amp;, const X5 &amp;)&gt; h, const X1 &amp;x1, const X2 &amp;x2, const X3 &amp;x3, const X4 &amp;x4, const X5 &amp;x5, double delta=1e-5)</arglist>
    </member>
    <member kind="function">
      <type>internal::FixedSizeMatrix&lt; X, X &gt;::type</type>
      <name>numericalHessian</name>
      <anchorfile>a01405.html</anchorfile>
      <anchor>acd55c782bdf2c7288eb07142e4c5372d</anchor>
      <arglist>(boost::function&lt; double(const X &amp;)&gt; f, const X &amp;x, double delta=1e-5)</arglist>
    </member>
    <member kind="function">
      <type>internal::FixedSizeMatrix&lt; X1, X1 &gt;::type</type>
      <name>numericalHessian311</name>
      <anchorfile>a01405.html</anchorfile>
      <anchor>ad15b3f8cdf758871fb12e79824561de8</anchor>
      <arglist>(boost::function&lt; double(const X1 &amp;, const X2 &amp;, const X3 &amp;)&gt; f, const X1 &amp;x1, const X2 &amp;x2, const X3 &amp;x3, double delta=1e-5)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>OptionalJacobian.h</name>
    <path>/Users/dellaert/git/gtsam/gtsam/base/</path>
    <filename>a00080</filename>
    <class kind="class">gtsam::OptionalJacobian</class>
    <class kind="class">gtsam::OptionalJacobian&lt; Eigen::Dynamic, Eigen::Dynamic &gt;</class>
    <class kind="struct">gtsam::traits</class>
    <class kind="struct">gtsam::MakeJacobian</class>
    <class kind="struct">gtsam::MakeOptionalJacobian</class>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>ProductLieGroup.h</name>
    <path>/Users/dellaert/git/gtsam/gtsam/base/</path>
    <filename>a00083</filename>
    <includes id="a00053" name="Lie.h" local="no" imported="no">gtsam/base/Lie.h</includes>
    <class kind="class">gtsam::ProductLieGroup</class>
    <class kind="struct">gtsam::traits&lt; ProductLieGroup&lt; G, H &gt; &gt;</class>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>serializationTestHelpers.h</name>
    <path>/Users/dellaert/git/gtsam/gtsam/base/</path>
    <filename>a00089</filename>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>SymmetricBlockMatrix.cpp</name>
    <path>/Users/dellaert/git/gtsam/gtsam/base/</path>
    <filename>a00092</filename>
    <includes id="a00095" name="SymmetricBlockMatrix.h" local="no" imported="no">gtsam/base/SymmetricBlockMatrix.h</includes>
    <includes id="a00137" name="VerticalBlockMatrix.h" local="no" imported="no">gtsam/base/VerticalBlockMatrix.h</includes>
    <includes id="a00008" name="cholesky.h" local="no" imported="no">gtsam/base/cholesky.h</includes>
    <includes id="a00113" name="timing.h" local="no" imported="no">gtsam/base/timing.h</includes>
    <includes id="a00107" name="ThreadsafeException.h" local="no" imported="no">gtsam/base/ThreadsafeException.h</includes>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>SymmetricBlockMatrix.h</name>
    <path>/Users/dellaert/git/gtsam/gtsam/base/</path>
    <filename>a00095</filename>
    <includes id="a00044" name="FastVector.h" local="no" imported="no">gtsam/base/FastVector.h</includes>
    <includes id="a00074" name="Matrix.h" local="no" imported="no">gtsam/base/Matrix.h</includes>
    <includes id="a00119" name="types.h" local="no" imported="no">gtsam/base/types.h</includes>
    <class kind="class">gtsam::SymmetricBlockMatrix</class>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>Testable.h</name>
    <path>/Users/dellaert/git/gtsam/gtsam/base/</path>
    <filename>a00098</filename>
    <class kind="struct">gtsam::traits</class>
    <class kind="class">gtsam::IsTestable</class>
    <class kind="struct">gtsam::equals</class>
    <class kind="struct">gtsam::equals_star</class>
    <class kind="struct">gtsam::HasTestablePrereqs</class>
    <class kind="struct">gtsam::Testable</class>
    <namespace>gtsam</namespace>
    <member kind="define">
      <type>#define</type>
      <name>GTSAM_CONCEPT_TESTABLE_INST</name>
      <anchorfile>a00098.html</anchorfile>
      <anchor>abe0a238cdd07d484ff0be56ae945b182</anchor>
      <arglist>(T)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>equal</name>
      <anchorfile>a01405.html</anchorfile>
      <anchor>ad2dbee4a72127938c79162cc8b6d5152</anchor>
      <arglist>(const T &amp;obj1, const T &amp;obj2, double tol)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>equal</name>
      <anchorfile>a01405.html</anchorfile>
      <anchor>a1f3dc67ad88b799c469088e428c583b1</anchor>
      <arglist>(const T &amp;obj1, const T &amp;obj2)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>assert_equal</name>
      <anchorfile>a01405.html</anchorfile>
      <anchor>a659619cca082d1c10b07c033d48c54da</anchor>
      <arglist>(const V &amp;expected, const V &amp;actual, double tol=1e-9)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>TestableAssertions.h</name>
    <path>/Users/dellaert/git/gtsam/gtsam/base/</path>
    <filename>a00101</filename>
    <includes id="a00098" name="Testable.h" local="no" imported="no">gtsam/base/Testable.h</includes>
    <includes id="a01076" name="global_includes.h" local="no" imported="no">gtsam/global_includes.h</includes>
    <namespace>gtsam</namespace>
    <member kind="function">
      <type>bool</type>
      <name>assert_equal</name>
      <anchorfile>a01405.html</anchorfile>
      <anchor>a982034802415eb6e9bd02355257ed96a</anchor>
      <arglist>(const Key &amp;expected, const Key &amp;actual, double tol=0.0)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>assert_equal</name>
      <anchorfile>a01405.html</anchorfile>
      <anchor>add6d6575582314cc9b5dbdbe2a86374d</anchor>
      <arglist>(const boost::optional&lt; V &gt; &amp;expected, const boost::optional&lt; V &gt; &amp;actual, double tol=1e-9)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>assert_equal</name>
      <anchorfile>a01405.html</anchorfile>
      <anchor>a0931276a9406dfc1bcff6d265704ee39</anchor>
      <arglist>(const std::vector&lt; V &gt; &amp;expected, const std::vector&lt; V &gt; &amp;actual, double tol=1e-9)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>assert_container_equal</name>
      <anchorfile>a01405.html</anchorfile>
      <anchor>a254be27d6d4b416fa2b546c77ae783fc</anchor>
      <arglist>(const std::map&lt; V1, V2 &gt; &amp;expected, const std::map&lt; V1, V2 &gt; &amp;actual, double tol=1e-9)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>assert_container_equal</name>
      <anchorfile>a01405.html</anchorfile>
      <anchor>a2f509195ea2180d0f7dbd3a99a088ff4</anchor>
      <arglist>(const std::map&lt; size_t, V2 &gt; &amp;expected, const std::map&lt; size_t, V2 &gt; &amp;actual, double tol=1e-9)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>assert_container_equal</name>
      <anchorfile>a01405.html</anchorfile>
      <anchor>a0eec17f894b358dd9f30d7af28082ba5</anchor>
      <arglist>(const std::vector&lt; std::pair&lt; V1, V2 &gt; &gt; &amp;expected, const std::vector&lt; std::pair&lt; V1, V2 &gt; &gt; &amp;actual, double tol=1e-9)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>assert_container_equal</name>
      <anchorfile>a01405.html</anchorfile>
      <anchor>a6d6b2964354593f69848f6bf5d3e0ca1</anchor>
      <arglist>(const V &amp;expected, const V &amp;actual, double tol=1e-9)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>assert_container_equality</name>
      <anchorfile>a01405.html</anchorfile>
      <anchor>a59ba6a7db27344c5cb021f1421905020</anchor>
      <arglist>(const std::map&lt; size_t, V2 &gt; &amp;expected, const std::map&lt; size_t, V2 &gt; &amp;actual)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>assert_container_equality</name>
      <anchorfile>a01405.html</anchorfile>
      <anchor>aa0926a5d779171bd8e1d30fb5982b5c0</anchor>
      <arglist>(const V &amp;expected, const V &amp;actual)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>assert_equal</name>
      <anchorfile>a01405.html</anchorfile>
      <anchor>a21e760bc75888053afd86a27d56b6148</anchor>
      <arglist>(const std::string &amp;expected, const std::string &amp;actual)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>assert_inequal</name>
      <anchorfile>a01405.html</anchorfile>
      <anchor>a2f19ba6625a264457805513fefcb5c32</anchor>
      <arglist>(const V &amp;expected, const V &amp;actual, double tol=1e-9)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>ThreadsafeException.h</name>
    <path>/Users/dellaert/git/gtsam/gtsam/base/</path>
    <filename>a00107</filename>
    <class kind="class">gtsam::ThreadsafeException</class>
    <class kind="class">gtsam::RuntimeErrorThreadsafe</class>
    <class kind="class">gtsam::OutOfRangeThreadsafe</class>
    <class kind="class">gtsam::InvalidArgumentThreadsafe</class>
    <class kind="class">gtsam::CholeskyFailed</class>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>timing.cpp</name>
    <path>/Users/dellaert/git/gtsam/gtsam/base/</path>
    <filename>a00110</filename>
    <includes id="a00020" name="debug.h" local="no" imported="no">gtsam/base/debug.h</includes>
    <includes id="a00113" name="timing.h" local="no" imported="no">gtsam/base/timing.h</includes>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>timing.h</name>
    <path>/Users/dellaert/git/gtsam/gtsam/base/</path>
    <filename>a00113</filename>
    <includes id="a00038" name="FastMap.h" local="no" imported="no">gtsam/base/FastMap.h</includes>
    <includes id="a00119" name="types.h" local="no" imported="no">gtsam/base/types.h</includes>
    <class kind="class">gtsam::internal::TimingOutline</class>
    <class kind="class">gtsam::internal::AutoTicToc</class>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>treeTraversal-inst.h</name>
    <path>/Users/dellaert/git/gtsam/gtsam/base/</path>
    <filename>a00116</filename>
    <includes id="a00035" name="FastList.h" local="no" imported="no">gtsam/base/FastList.h</includes>
    <includes id="a00044" name="FastVector.h" local="no" imported="no">gtsam/base/FastVector.h</includes>
    <includes id="a00461" name="Key.h" local="no" imported="no">gtsam/inference/Key.h</includes>
    <namespace>gtsam</namespace>
    <namespace>gtsam::treeTraversal</namespace>
    <member kind="function">
      <type>void</type>
      <name>DepthFirstForest</name>
      <anchorfile>a01411.html</anchorfile>
      <anchor>a50e24f0a9085721425089cdce18f2475</anchor>
      <arglist>(FOREST &amp;forest, DATA &amp;rootData, VISITOR_PRE &amp;visitorPre, VISITOR_POST &amp;visitorPost)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>DepthFirstForest</name>
      <anchorfile>a01411.html</anchorfile>
      <anchor>a3735d0cee6f4d530e75479f7b1ebaf07</anchor>
      <arglist>(FOREST &amp;forest, DATA &amp;rootData, VISITOR_PRE &amp;visitorPre)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>DepthFirstForestParallel</name>
      <anchorfile>a01411.html</anchorfile>
      <anchor>afd7410807789da9ad91d6630063be36f</anchor>
      <arglist>(FOREST &amp;forest, DATA &amp;rootData, VISITOR_PRE &amp;visitorPre, VISITOR_POST &amp;visitorPost, int problemSizeThreshold=10)</arglist>
    </member>
    <member kind="function">
      <type>FastVector&lt; boost::shared_ptr&lt; typename FOREST::Node &gt; &gt;</type>
      <name>CloneForest</name>
      <anchorfile>a01411.html</anchorfile>
      <anchor>a032aacc77495f48bd885f79d3fe16427</anchor>
      <arglist>(const FOREST &amp;forest)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>PrintForest</name>
      <anchorfile>a01411.html</anchorfile>
      <anchor>a7228bbaf6ad62b65be7a2084c01aae5c</anchor>
      <arglist>(const FOREST &amp;forest, std::string str, const KeyFormatter &amp;keyFormatter)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>types.h</name>
    <path>/Users/dellaert/git/gtsam/gtsam/base/</path>
    <filename>a00119</filename>
    <class kind="struct">gtsam::const_selector</class>
    <class kind="struct">gtsam::const_selector&lt; BASIC_TYPE, BASIC_TYPE, AS_NON_CONST, AS_CONST &gt;</class>
    <class kind="struct">gtsam::const_selector&lt; const BASIC_TYPE, BASIC_TYPE, AS_NON_CONST, AS_CONST &gt;</class>
    <class kind="struct">gtsam::ValueWithDefault</class>
    <class kind="class">gtsam::ListOfOneContainer</class>
    <class kind="class">gtsam::TbbOpenMPMixedScope</class>
    <namespace>gtsam</namespace>
    <member kind="define">
      <type>#define</type>
      <name>assert_throw</name>
      <anchorfile>a00119.html</anchorfile>
      <anchor>a30d3af2da1ea940197addce4f3c223c8</anchor>
      <arglist>(CONDITION, EXCEPTION)</arglist>
    </member>
    <member kind="typedef">
      <type>std::uint64_t</type>
      <name>Key</name>
      <anchorfile>a01405.html</anchorfile>
      <anchor>adad029f5f6ffce610428b5fe768b0df2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::uint64_t</type>
      <name>FactorIndex</name>
      <anchorfile>a01405.html</anchorfile>
      <anchor>a19c53f2faabb0f4b4b78ce2f7168cc14</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ptrdiff_t</type>
      <name>DenseIndex</name>
      <anchorfile>a01405.html</anchorfile>
      <anchor>a21006f326f57cdf7d3f35fec40f43e40</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>ListOfOneContainer&lt; T &gt;</type>
      <name>ListOfOne</name>
      <anchorfile>a01405.html</anchorfile>
      <anchor>ac3ed0dcde6a0084d7f1792c396e5dbaf</anchor>
      <arglist>(const T &amp;element)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Value.h</name>
    <path>/Users/dellaert/git/gtsam/gtsam/base/</path>
    <filename>a00122</filename>
    <includes id="a00128" name="Vector.h" local="no" imported="no">gtsam/base/Vector.h</includes>
    <class kind="class">gtsam::Value</class>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>Vector.cpp</name>
    <path>/Users/dellaert/git/gtsam/gtsam/base/</path>
    <filename>a00125</filename>
    <includes id="a00128" name="Vector.h" local="no" imported="no">gtsam/base/Vector.h</includes>
    <namespace>gtsam</namespace>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>a01405.html</anchorfile>
      <anchor>a760cc36e9009b23cf564c436294b3504</anchor>
      <arglist>(const Vector &amp;v, const std::string &amp;s, std::ostream &amp;stream)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>a01405.html</anchorfile>
      <anchor>a5e5d8018a0f44a6a299406aeda27d44b</anchor>
      <arglist>(const Vector &amp;v, const std::string &amp;s=&quot;&quot;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>save</name>
      <anchorfile>a01405.html</anchorfile>
      <anchor>a09f2bbdb9f9d633542362dbe8d79f9ab</anchor>
      <arglist>(const Vector &amp;A, const std::string &amp;s, const std::string &amp;filename)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>a01405.html</anchorfile>
      <anchor>a64988014ab746343803620dc42513646</anchor>
      <arglist>(const Vector &amp;vec1, const Vector &amp;vec2)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>greaterThanOrEqual</name>
      <anchorfile>a01405.html</anchorfile>
      <anchor>a368ee40bd9c0124d572d2e49bcb077bf</anchor>
      <arglist>(const Vector &amp;v1, const Vector &amp;v2)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>equal_with_abs_tol</name>
      <anchorfile>a01405.html</anchorfile>
      <anchor>a8bdced1844ffd6a53af0396d82eaa6da</anchor>
      <arglist>(const Vector &amp;vec1, const Vector &amp;vec2, double tol=1e-9)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>assert_equal</name>
      <anchorfile>a01405.html</anchorfile>
      <anchor>a9f3ee662d25ffb8c04b4e35c4b02e90b</anchor>
      <arglist>(const Vector &amp;vec1, const Vector &amp;vec2, double tol=1e-9)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>assert_inequal</name>
      <anchorfile>a01405.html</anchorfile>
      <anchor>a2ca3db47b15350977c1f03c5560ab332</anchor>
      <arglist>(const Vector &amp;vec1, const Vector &amp;vec2, double tol=1e-9)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>assert_equal</name>
      <anchorfile>a01405.html</anchorfile>
      <anchor>ac3cf8e8e70cd696d9c789c31bc1e89a7</anchor>
      <arglist>(const SubVector &amp;vec1, const SubVector &amp;vec2, double tol=1e-9)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>linear_dependent</name>
      <anchorfile>a01405.html</anchorfile>
      <anchor>a2a0cfd7908b06491df49b6a9c9186775</anchor>
      <arglist>(const Vector &amp;vec1, const Vector &amp;vec2, double tol=1e-9)</arglist>
    </member>
    <member kind="function">
      <type>Vector</type>
      <name>ediv_</name>
      <anchorfile>a01405.html</anchorfile>
      <anchor>a14844c96706dc362917e0d5e76d65fbe</anchor>
      <arglist>(const Vector &amp;a, const Vector &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>houseInPlace</name>
      <anchorfile>a01405.html</anchorfile>
      <anchor>ac9c0c05b0198ec0fb6e4115edb755910</anchor>
      <arglist>(Vector &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>pair&lt; double, Vector &gt;</type>
      <name>house</name>
      <anchorfile>a01405.html</anchorfile>
      <anchor>afb77eefc25dea0fb3e0fcc8f246b617a</anchor>
      <arglist>(const Vector &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>pair&lt; Vector, double &gt;</type>
      <name>weightedPseudoinverse</name>
      <anchorfile>a01405.html</anchorfile>
      <anchor>aca1c56d11a05464a7a5458dc32ccc777</anchor>
      <arglist>(const Vector &amp;v, const Vector &amp;weights)</arglist>
    </member>
    <member kind="function">
      <type>Vector</type>
      <name>concatVectors</name>
      <anchorfile>a01405.html</anchorfile>
      <anchor>ae1c88acfa9575bcea3f2e738cb637a85</anchor>
      <arglist>(const std::list&lt; Vector &gt; &amp;vs)</arglist>
    </member>
    <member kind="function">
      <type>Vector</type>
      <name>concatVectors</name>
      <anchorfile>a01405.html</anchorfile>
      <anchor>a09610ec69a8b3f3a00399bb378eda9cf</anchor>
      <arglist>(size_t nrVectors,...)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Vector.h</name>
    <path>/Users/dellaert/git/gtsam/gtsam/base/</path>
    <filename>a00128</filename>
    <includes id="a01076" name="global_includes.h" local="no" imported="no">gtsam/global_includes.h</includes>
    <namespace>gtsam</namespace>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>a01405.html</anchorfile>
      <anchor>a760cc36e9009b23cf564c436294b3504</anchor>
      <arglist>(const Vector &amp;v, const std::string &amp;s, std::ostream &amp;stream)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>a01405.html</anchorfile>
      <anchor>a5e5d8018a0f44a6a299406aeda27d44b</anchor>
      <arglist>(const Vector &amp;v, const std::string &amp;s=&quot;&quot;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>save</name>
      <anchorfile>a01405.html</anchorfile>
      <anchor>a09f2bbdb9f9d633542362dbe8d79f9ab</anchor>
      <arglist>(const Vector &amp;A, const std::string &amp;s, const std::string &amp;filename)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>a01405.html</anchorfile>
      <anchor>a64988014ab746343803620dc42513646</anchor>
      <arglist>(const Vector &amp;vec1, const Vector &amp;vec2)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>greaterThanOrEqual</name>
      <anchorfile>a01405.html</anchorfile>
      <anchor>a368ee40bd9c0124d572d2e49bcb077bf</anchor>
      <arglist>(const Vector &amp;v1, const Vector &amp;v2)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>equal_with_abs_tol</name>
      <anchorfile>a01405.html</anchorfile>
      <anchor>a8bdced1844ffd6a53af0396d82eaa6da</anchor>
      <arglist>(const Vector &amp;vec1, const Vector &amp;vec2, double tol=1e-9)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>equal</name>
      <anchorfile>a01405.html</anchorfile>
      <anchor>aa7ed1d4fe2dd6828cfeb2d8f488b818d</anchor>
      <arglist>(const Vector &amp;vec1, const Vector &amp;vec2, double tol)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>equal</name>
      <anchorfile>a01405.html</anchorfile>
      <anchor>a3d1cad2313f69f9fa5008fdc348d1526</anchor>
      <arglist>(const Vector &amp;vec1, const Vector &amp;vec2)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>assert_equal</name>
      <anchorfile>a01405.html</anchorfile>
      <anchor>a9f3ee662d25ffb8c04b4e35c4b02e90b</anchor>
      <arglist>(const Vector &amp;vec1, const Vector &amp;vec2, double tol=1e-9)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>assert_inequal</name>
      <anchorfile>a01405.html</anchorfile>
      <anchor>a2ca3db47b15350977c1f03c5560ab332</anchor>
      <arglist>(const Vector &amp;vec1, const Vector &amp;vec2, double tol=1e-9)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>assert_equal</name>
      <anchorfile>a01405.html</anchorfile>
      <anchor>ac3cf8e8e70cd696d9c789c31bc1e89a7</anchor>
      <arglist>(const SubVector &amp;vec1, const SubVector &amp;vec2, double tol=1e-9)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>linear_dependent</name>
      <anchorfile>a01405.html</anchorfile>
      <anchor>a2a0cfd7908b06491df49b6a9c9186775</anchor>
      <arglist>(const Vector &amp;vec1, const Vector &amp;vec2, double tol=1e-9)</arglist>
    </member>
    <member kind="function">
      <type>Vector</type>
      <name>ediv_</name>
      <anchorfile>a01405.html</anchorfile>
      <anchor>a14844c96706dc362917e0d5e76d65fbe</anchor>
      <arglist>(const Vector &amp;a, const Vector &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>dot</name>
      <anchorfile>a01405.html</anchorfile>
      <anchor>ad80249acf12bbea741e755cd8fc73042</anchor>
      <arglist>(const V1 &amp;a, const V2 &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>inner_prod</name>
      <anchorfile>a01405.html</anchorfile>
      <anchor>a4ca41ba9ec9d6d21a2b9f5e00f9f25ed</anchor>
      <arglist>(const V1 &amp;a, const V2 &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>scal</name>
      <anchorfile>a01405.html</anchorfile>
      <anchor>ad371582718b5e685ace31c176f2a9abc</anchor>
      <arglist>(double alpha, Vector &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>axpy</name>
      <anchorfile>a01405.html</anchorfile>
      <anchor>a30a89a0147943428129e2cb3683988be</anchor>
      <arglist>(double alpha, const V1 &amp;x, V2 &amp;y)</arglist>
    </member>
    <member kind="function">
      <type>pair&lt; double, Vector &gt;</type>
      <name>house</name>
      <anchorfile>a01405.html</anchorfile>
      <anchor>afb77eefc25dea0fb3e0fcc8f246b617a</anchor>
      <arglist>(const Vector &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>houseInPlace</name>
      <anchorfile>a01405.html</anchorfile>
      <anchor>ac9c0c05b0198ec0fb6e4115edb755910</anchor>
      <arglist>(Vector &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>pair&lt; Vector, double &gt;</type>
      <name>weightedPseudoinverse</name>
      <anchorfile>a01405.html</anchorfile>
      <anchor>aca1c56d11a05464a7a5458dc32ccc777</anchor>
      <arglist>(const Vector &amp;v, const Vector &amp;weights)</arglist>
    </member>
    <member kind="function">
      <type>Vector</type>
      <name>concatVectors</name>
      <anchorfile>a01405.html</anchorfile>
      <anchor>ae1c88acfa9575bcea3f2e738cb637a85</anchor>
      <arglist>(const std::list&lt; Vector &gt; &amp;vs)</arglist>
    </member>
    <member kind="function">
      <type>Vector</type>
      <name>concatVectors</name>
      <anchorfile>a01405.html</anchorfile>
      <anchor>a09610ec69a8b3f3a00399bb378eda9cf</anchor>
      <arglist>(size_t nrVectors,...)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>VerticalBlockMatrix.cpp</name>
    <path>/Users/dellaert/git/gtsam/gtsam/base/</path>
    <filename>a00134</filename>
    <includes id="a00137" name="VerticalBlockMatrix.h" local="no" imported="no">gtsam/base/VerticalBlockMatrix.h</includes>
    <includes id="a00095" name="SymmetricBlockMatrix.h" local="no" imported="no">gtsam/base/SymmetricBlockMatrix.h</includes>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>VerticalBlockMatrix.h</name>
    <path>/Users/dellaert/git/gtsam/gtsam/base/</path>
    <filename>a00137</filename>
    <includes id="a00074" name="Matrix.h" local="no" imported="no">gtsam/base/Matrix.h</includes>
    <includes id="a00044" name="FastVector.h" local="no" imported="no">gtsam/base/FastVector.h</includes>
    <class kind="class">gtsam::VerticalBlockMatrix</class>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>AlgebraicDecisionTree.h</name>
    <path>/Users/dellaert/git/gtsam/gtsam/discrete/</path>
    <filename>a00140</filename>
    <class kind="class">gtsam::AlgebraicDecisionTree</class>
    <class kind="struct">gtsam::AlgebraicDecisionTree::Ring</class>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>Assignment.h</name>
    <path>/Users/dellaert/git/gtsam/gtsam/discrete/</path>
    <filename>a00143</filename>
    <class kind="class">gtsam::Assignment</class>
    <namespace>gtsam</namespace>
    <member kind="function">
      <type>std::vector&lt; Assignment&lt; L &gt; &gt;</type>
      <name>cartesianProduct</name>
      <anchorfile>a01405.html</anchorfile>
      <anchor>a35831074a7aab15d463acddc7767bfe8</anchor>
      <arglist>(const std::vector&lt; std::pair&lt; L, size_t &gt; &gt; &amp;keys)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>DecisionTree.h</name>
    <path>/Users/dellaert/git/gtsam/gtsam/discrete/</path>
    <filename>a00149</filename>
    <includes id="a00143" name="Assignment.h" local="no" imported="no">gtsam/discrete/Assignment.h</includes>
    <class kind="class">gtsam::DecisionTree</class>
    <class kind="class">gtsam::DecisionTree::Node</class>
    <namespace>gtsam</namespace>
    <member kind="function">
      <type>DecisionTree&lt; L, Y &gt;</type>
      <name>apply</name>
      <anchorfile>a01405.html</anchorfile>
      <anchor>abf36c31dcf9f45f5bbdfd2b80f07cd1f</anchor>
      <arglist>(const DecisionTree&lt; L, Y &gt; &amp;f, const typename DecisionTree&lt; L, Y &gt;::Unary &amp;op)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>DecisionTreeFactor.cpp</name>
    <path>/Users/dellaert/git/gtsam/gtsam/discrete/</path>
    <filename>a00152</filename>
    <includes id="a00155" name="DecisionTreeFactor.h" local="no" imported="no">gtsam/discrete/DecisionTreeFactor.h</includes>
    <includes id="a00173" name="DiscreteConditional.h" local="no" imported="no">gtsam/discrete/DiscreteConditional.h</includes>
    <includes id="a00041" name="FastSet.h" local="no" imported="no">gtsam/base/FastSet.h</includes>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>DecisionTreeFactor.h</name>
    <path>/Users/dellaert/git/gtsam/gtsam/discrete/</path>
    <filename>a00155</filename>
    <includes id="a00185" name="DiscreteFactor.h" local="no" imported="no">gtsam/discrete/DiscreteFactor.h</includes>
    <includes id="a00212" name="Potentials.h" local="no" imported="no">gtsam/discrete/Potentials.h</includes>
    <includes id="a00479" name="Ordering.h" local="no" imported="no">gtsam/inference/Ordering.h</includes>
    <class kind="class">gtsam::DecisionTreeFactor</class>
    <class kind="struct">gtsam::traits&lt; DecisionTreeFactor &gt;</class>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>DiscreteBayesNet.cpp</name>
    <path>/Users/dellaert/git/gtsam/gtsam/discrete/</path>
    <filename>a00158</filename>
    <includes id="a00161" name="DiscreteBayesNet.h" local="no" imported="no">gtsam/discrete/DiscreteBayesNet.h</includes>
    <includes id="a00173" name="DiscreteConditional.h" local="no" imported="no">gtsam/discrete/DiscreteConditional.h</includes>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>DiscreteBayesNet.h</name>
    <path>/Users/dellaert/git/gtsam/gtsam/discrete/</path>
    <filename>a00161</filename>
    <includes id="a00431" name="FactorGraph.h" local="no" imported="no">gtsam/inference/FactorGraph.h</includes>
    <includes id="a00173" name="DiscreteConditional.h" local="no" imported="no">gtsam/discrete/DiscreteConditional.h</includes>
    <class kind="class">gtsam::DiscreteBayesNet</class>
    <class kind="struct">gtsam::traits&lt; DiscreteBayesNet &gt;</class>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>DiscreteBayesTree.cpp</name>
    <path>/Users/dellaert/git/gtsam/gtsam/discrete/</path>
    <filename>a00164</filename>
    <includes id="a00116" name="treeTraversal-inst.h" local="no" imported="no">gtsam/base/treeTraversal-inst.h</includes>
    <includes id="a00392" name="BayesTreeCliqueBase-inst.h" local="no" imported="no">gtsam/inference/BayesTreeCliqueBase-inst.h</includes>
    <includes id="a00167" name="DiscreteBayesTree.h" local="no" imported="no">gtsam/discrete/DiscreteBayesTree.h</includes>
    <includes id="a00161" name="DiscreteBayesNet.h" local="no" imported="no">gtsam/discrete/DiscreteBayesNet.h</includes>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>DiscreteBayesTree.h</name>
    <path>/Users/dellaert/git/gtsam/gtsam/discrete/</path>
    <filename>a00167</filename>
    <includes id="a00161" name="DiscreteBayesNet.h" local="no" imported="no">gtsam/discrete/DiscreteBayesNet.h</includes>
    <includes id="a00191" name="DiscreteFactorGraph.h" local="no" imported="no">gtsam/discrete/DiscreteFactorGraph.h</includes>
    <includes id="a00389" name="BayesTree.h" local="no" imported="no">gtsam/inference/BayesTree.h</includes>
    <includes id="a00395" name="BayesTreeCliqueBase.h" local="no" imported="no">gtsam/inference/BayesTreeCliqueBase.h</includes>
    <class kind="class">gtsam::DiscreteBayesTreeClique</class>
    <class kind="class">gtsam::DiscreteBayesTree</class>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>DiscreteConditional.cpp</name>
    <path>/Users/dellaert/git/gtsam/gtsam/discrete/</path>
    <filename>a00170</filename>
    <includes id="a00173" name="DiscreteConditional.h" local="no" imported="no">gtsam/discrete/DiscreteConditional.h</includes>
    <includes id="a00218" name="Signature.h" local="no" imported="no">gtsam/discrete/Signature.h</includes>
    <includes id="a00098" name="Testable.h" local="no" imported="no">gtsam/base/Testable.h</includes>
    <includes id="a00020" name="debug.h" local="no" imported="no">gtsam/base/debug.h</includes>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>DiscreteConditional.h</name>
    <path>/Users/dellaert/git/gtsam/gtsam/discrete/</path>
    <filename>a00173</filename>
    <includes id="a00155" name="DecisionTreeFactor.h" local="no" imported="no">gtsam/discrete/DecisionTreeFactor.h</includes>
    <includes id="a00218" name="Signature.h" local="no" imported="no">gtsam/discrete/Signature.h</includes>
    <includes id="a00407" name="Conditional.h" local="no" imported="no">gtsam/inference/Conditional.h</includes>
    <class kind="class">gtsam::DiscreteConditional</class>
    <class kind="struct">gtsam::traits&lt; DiscreteConditional &gt;</class>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>DiscreteEliminationTree.cpp</name>
    <path>/Users/dellaert/git/gtsam/gtsam/discrete/</path>
    <filename>a00176</filename>
    <includes id="a00179" name="DiscreteEliminationTree.h" local="no" imported="no">gtsam/discrete/DiscreteEliminationTree.h</includes>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>DiscreteEliminationTree.h</name>
    <path>/Users/dellaert/git/gtsam/gtsam/discrete/</path>
    <filename>a00179</filename>
    <includes id="a00161" name="DiscreteBayesNet.h" local="no" imported="no">gtsam/discrete/DiscreteBayesNet.h</includes>
    <includes id="a00191" name="DiscreteFactorGraph.h" local="no" imported="no">gtsam/discrete/DiscreteFactorGraph.h</includes>
    <includes id="a00419" name="EliminationTree.h" local="no" imported="no">gtsam/inference/EliminationTree.h</includes>
    <class kind="class">gtsam::DiscreteEliminationTree</class>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>DiscreteFactor.cpp</name>
    <path>/Users/dellaert/git/gtsam/gtsam/discrete/</path>
    <filename>a00182</filename>
    <includes id="a00185" name="DiscreteFactor.h" local="no" imported="no">gtsam/discrete/DiscreteFactor.h</includes>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>DiscreteFactor.h</name>
    <path>/Users/dellaert/git/gtsam/gtsam/discrete/</path>
    <filename>a00185</filename>
    <includes id="a00143" name="Assignment.h" local="no" imported="no">gtsam/discrete/Assignment.h</includes>
    <includes id="a00425" name="Factor.h" local="no" imported="no">gtsam/inference/Factor.h</includes>
    <includes id="a00098" name="Testable.h" local="no" imported="no">gtsam/base/Testable.h</includes>
    <class kind="class">gtsam::DiscreteFactor</class>
    <class kind="struct">gtsam::traits&lt; DiscreteFactor &gt;</class>
    <class kind="struct">gtsam::traits&lt; DiscreteFactor::Values &gt;</class>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>DiscreteFactorGraph.cpp</name>
    <path>/Users/dellaert/git/gtsam/gtsam/discrete/</path>
    <filename>a00188</filename>
    <includes id="a00191" name="DiscreteFactorGraph.h" local="no" imported="no">gtsam/discrete/DiscreteFactorGraph.h</includes>
    <includes id="a00173" name="DiscreteConditional.h" local="no" imported="no">gtsam/discrete/DiscreteConditional.h</includes>
    <includes id="a00167" name="DiscreteBayesTree.h" local="no" imported="no">gtsam/discrete/DiscreteBayesTree.h</includes>
    <includes id="a00179" name="DiscreteEliminationTree.h" local="no" imported="no">gtsam/discrete/DiscreteEliminationTree.h</includes>
    <includes id="a00197" name="DiscreteJunctionTree.h" local="no" imported="no">gtsam/discrete/DiscreteJunctionTree.h</includes>
    <namespace>gtsam</namespace>
    <member kind="function">
      <type>std::pair&lt; DiscreteConditional::shared_ptr, DecisionTreeFactor::shared_ptr &gt;</type>
      <name>EliminateDiscrete</name>
      <anchorfile>a01405.html</anchorfile>
      <anchor>a0767417e558bbac14f3b27bc54d033e9</anchor>
      <arglist>(const DiscreteFactorGraph &amp;factors, const Ordering &amp;keys)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>DiscreteFactorGraph.h</name>
    <path>/Users/dellaert/git/gtsam/gtsam/discrete/</path>
    <filename>a00191</filename>
    <includes id="a00431" name="FactorGraph.h" local="no" imported="no">gtsam/inference/FactorGraph.h</includes>
    <includes id="a00413" name="EliminateableFactorGraph.h" local="no" imported="no">gtsam/inference/EliminateableFactorGraph.h</includes>
    <includes id="a00479" name="Ordering.h" local="no" imported="no">gtsam/inference/Ordering.h</includes>
    <includes id="a00155" name="DecisionTreeFactor.h" local="no" imported="no">gtsam/discrete/DecisionTreeFactor.h</includes>
    <includes id="a00161" name="DiscreteBayesNet.h" local="no" imported="no">gtsam/discrete/DiscreteBayesNet.h</includes>
    <includes id="a00041" name="FastSet.h" local="no" imported="no">gtsam/base/FastSet.h</includes>
    <class kind="struct">gtsam::EliminationTraits&lt; DiscreteFactorGraph &gt;</class>
    <class kind="class">gtsam::DiscreteFactorGraph</class>
    <class kind="struct">gtsam::traits&lt; DiscreteFactorGraph &gt;</class>
    <namespace>gtsam</namespace>
    <member kind="function">
      <type>std::pair&lt; DiscreteConditional::shared_ptr, DecisionTreeFactor::shared_ptr &gt;</type>
      <name>EliminateDiscrete</name>
      <anchorfile>a01405.html</anchorfile>
      <anchor>a0767417e558bbac14f3b27bc54d033e9</anchor>
      <arglist>(const DiscreteFactorGraph &amp;factors, const Ordering &amp;keys)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>DiscreteJunctionTree.cpp</name>
    <path>/Users/dellaert/git/gtsam/gtsam/discrete/</path>
    <filename>a00194</filename>
    <includes id="a00452" name="JunctionTree-inst.h" local="no" imported="no">gtsam/inference/JunctionTree-inst.h</includes>
    <includes id="a00197" name="DiscreteJunctionTree.h" local="no" imported="no">gtsam/discrete/DiscreteJunctionTree.h</includes>
    <includes id="a00179" name="DiscreteEliminationTree.h" local="no" imported="no">gtsam/discrete/DiscreteEliminationTree.h</includes>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>DiscreteJunctionTree.h</name>
    <path>/Users/dellaert/git/gtsam/gtsam/discrete/</path>
    <filename>a00197</filename>
    <includes id="a00191" name="DiscreteFactorGraph.h" local="no" imported="no">gtsam/discrete/DiscreteFactorGraph.h</includes>
    <includes id="a00167" name="DiscreteBayesTree.h" local="no" imported="no">gtsam/discrete/DiscreteBayesTree.h</includes>
    <includes id="a00455" name="JunctionTree.h" local="no" imported="no">gtsam/inference/JunctionTree.h</includes>
    <class kind="class">gtsam::DiscreteJunctionTree</class>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>DiscreteKey.h</name>
    <path>/Users/dellaert/git/gtsam/gtsam/discrete/</path>
    <filename>a00203</filename>
    <includes id="a01076" name="global_includes.h" local="no" imported="no">gtsam/global_includes.h</includes>
    <includes id="a00461" name="Key.h" local="no" imported="no">gtsam/inference/Key.h</includes>
    <class kind="struct">gtsam::DiscreteKeys</class>
    <namespace>gtsam</namespace>
    <member kind="typedef">
      <type>std::pair&lt; Key, size_t &gt;</type>
      <name>DiscreteKey</name>
      <anchorfile>a01405.html</anchorfile>
      <anchor>acd19e5d1e5d06c37246d4c15af38ee67</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>DiscreteKeys</type>
      <name>operator &amp;</name>
      <anchorfile>a01405.html</anchorfile>
      <anchor>a4a2fe0b6ea0287622d3126cea91c6ebd</anchor>
      <arglist>(const DiscreteKey &amp;key1, const DiscreteKey &amp;key2)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>DiscreteMarginals.h</name>
    <path>/Users/dellaert/git/gtsam/gtsam/discrete/</path>
    <filename>a00206</filename>
    <includes id="a00191" name="DiscreteFactorGraph.h" local="no" imported="no">gtsam/discrete/DiscreteFactorGraph.h</includes>
    <includes id="a00167" name="DiscreteBayesTree.h" local="no" imported="no">gtsam/discrete/DiscreteBayesTree.h</includes>
    <includes id="a00128" name="Vector.h" local="no" imported="no">gtsam/base/Vector.h</includes>
    <class kind="class">gtsam::DiscreteMarginals</class>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>Potentials.cpp</name>
    <path>/Users/dellaert/git/gtsam/gtsam/discrete/</path>
    <filename>a00209</filename>
    <includes id="a00212" name="Potentials.h" local="no" imported="no">gtsam/discrete/Potentials.h</includes>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>Potentials.h</name>
    <path>/Users/dellaert/git/gtsam/gtsam/discrete/</path>
    <filename>a00212</filename>
    <includes id="a00140" name="AlgebraicDecisionTree.h" local="no" imported="no">gtsam/discrete/AlgebraicDecisionTree.h</includes>
    <includes id="a00203" name="DiscreteKey.h" local="no" imported="no">gtsam/discrete/DiscreteKey.h</includes>
    <includes id="a00461" name="Key.h" local="no" imported="no">gtsam/inference/Key.h</includes>
    <class kind="class">gtsam::Potentials</class>
    <class kind="struct">gtsam::traits&lt; Potentials &gt;</class>
    <class kind="struct">gtsam::traits&lt; Potentials::ADT &gt;</class>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>Signature.cpp</name>
    <path>/Users/dellaert/git/gtsam/gtsam/discrete/</path>
    <filename>a00215</filename>
    <includes id="a00218" name="Signature.h" local="yes" imported="no">Signature.h</includes>
    <namespace>gtsam</namespace>
    <member kind="function">
      <type>Signature</type>
      <name>operator|</name>
      <anchorfile>a01405.html</anchorfile>
      <anchor>aa6c58dfb2fc9398a026e3268ba2edfad</anchor>
      <arglist>(const DiscreteKey &amp;key, const DiscreteKey &amp;parent)</arglist>
    </member>
    <member kind="function">
      <type>Signature</type>
      <name>operator%</name>
      <anchorfile>a01405.html</anchorfile>
      <anchor>ab98cf2a4777006c28d6983db5d8ec574</anchor>
      <arglist>(const DiscreteKey &amp;key, const std::string &amp;parent)</arglist>
    </member>
    <member kind="function">
      <type>Signature</type>
      <name>operator%</name>
      <anchorfile>a01405.html</anchorfile>
      <anchor>ae4856250df52ce4b9b4b16c7a833408c</anchor>
      <arglist>(const DiscreteKey &amp;key, const Signature::Table &amp;parent)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Signature.h</name>
    <path>/Users/dellaert/git/gtsam/gtsam/discrete/</path>
    <filename>a00218</filename>
    <includes id="a00203" name="DiscreteKey.h" local="no" imported="no">gtsam/discrete/DiscreteKey.h</includes>
    <class kind="class">gtsam::Signature</class>
    <namespace>gtsam</namespace>
    <member kind="function">
      <type>Signature</type>
      <name>operator|</name>
      <anchorfile>a01405.html</anchorfile>
      <anchor>aa6c58dfb2fc9398a026e3268ba2edfad</anchor>
      <arglist>(const DiscreteKey &amp;key, const DiscreteKey &amp;parent)</arglist>
    </member>
    <member kind="function">
      <type>Signature</type>
      <name>operator%</name>
      <anchorfile>a01405.html</anchorfile>
      <anchor>ab98cf2a4777006c28d6983db5d8ec574</anchor>
      <arglist>(const DiscreteKey &amp;key, const std::string &amp;parent)</arglist>
    </member>
    <member kind="function">
      <type>Signature</type>
      <name>operator%</name>
      <anchorfile>a01405.html</anchorfile>
      <anchor>ae4856250df52ce4b9b4b16c7a833408c</anchor>
      <arglist>(const DiscreteKey &amp;key, const Signature::Table &amp;parent)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>BearingRange.h</name>
    <path>/Users/dellaert/git/gtsam/gtsam/geometry/</path>
    <filename>a00221</filename>
    <includes id="a00068" name="Manifold.h" local="no" imported="no">gtsam/base/Manifold.h</includes>
    <includes id="a00098" name="Testable.h" local="no" imported="no">gtsam/base/Testable.h</includes>
    <includes id="a00080" name="OptionalJacobian.h" local="no" imported="no">gtsam/base/OptionalJacobian.h</includes>
    <class kind="struct">gtsam::Bearing</class>
    <class kind="struct">gtsam::Range</class>
    <class kind="struct">gtsam::BearingRange</class>
    <class kind="struct">gtsam::traits&lt; BearingRange&lt; A1, A2 &gt; &gt;</class>
    <class kind="struct">gtsam::HasBearing</class>
    <class kind="struct">gtsam::HasRange</class>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>Cal3_S2.cpp</name>
    <path>/Users/dellaert/git/gtsam/gtsam/geometry/</path>
    <filename>a00224</filename>
    <includes id="a00227" name="Cal3_S2.h" local="no" imported="no">gtsam/geometry/Cal3_S2.h</includes>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>Cal3_S2.h</name>
    <path>/Users/dellaert/git/gtsam/gtsam/geometry/</path>
    <filename>a00227</filename>
    <includes id="a00299" name="Point2.h" local="no" imported="no">gtsam/geometry/Point2.h</includes>
    <class kind="class">gtsam::Cal3_S2</class>
    <class kind="struct">gtsam::traits&lt; Cal3_S2 &gt;</class>
    <class kind="struct">gtsam::traits&lt; const Cal3_S2 &gt;</class>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>Cal3_S2Stereo.cpp</name>
    <path>/Users/dellaert/git/gtsam/gtsam/geometry/</path>
    <filename>a00230</filename>
    <includes id="a00233" name="Cal3_S2Stereo.h" local="no" imported="no">gtsam/geometry/Cal3_S2Stereo.h</includes>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>Cal3_S2Stereo.h</name>
    <path>/Users/dellaert/git/gtsam/gtsam/geometry/</path>
    <filename>a00233</filename>
    <includes id="a00227" name="Cal3_S2.h" local="no" imported="no">gtsam/geometry/Cal3_S2.h</includes>
    <class kind="class">gtsam::Cal3_S2Stereo</class>
    <class kind="struct">gtsam::traits&lt; Cal3_S2Stereo &gt;</class>
    <class kind="struct">gtsam::traits&lt; const Cal3_S2Stereo &gt;</class>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>Cal3Bundler.cpp</name>
    <path>/Users/dellaert/git/gtsam/gtsam/geometry/</path>
    <filename>a00236</filename>
    <includes id="a00128" name="Vector.h" local="no" imported="no">gtsam/base/Vector.h</includes>
    <includes id="a00074" name="Matrix.h" local="no" imported="no">gtsam/base/Matrix.h</includes>
    <includes id="a00299" name="Point2.h" local="no" imported="no">gtsam/geometry/Point2.h</includes>
    <includes id="a00305" name="Point3.h" local="no" imported="no">gtsam/geometry/Point3.h</includes>
    <includes id="a00239" name="Cal3Bundler.h" local="no" imported="no">gtsam/geometry/Cal3Bundler.h</includes>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>Cal3Bundler.h</name>
    <path>/Users/dellaert/git/gtsam/gtsam/geometry/</path>
    <filename>a00239</filename>
    <includes id="a00299" name="Point2.h" local="no" imported="no">gtsam/geometry/Point2.h</includes>
    <class kind="class">gtsam::Cal3Bundler</class>
    <class kind="struct">gtsam::traits&lt; Cal3Bundler &gt;</class>
    <class kind="struct">gtsam::traits&lt; const Cal3Bundler &gt;</class>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>Cal3DS2.cpp</name>
    <path>/Users/dellaert/git/gtsam/gtsam/geometry/</path>
    <filename>a00242</filename>
    <includes id="a00128" name="Vector.h" local="no" imported="no">gtsam/base/Vector.h</includes>
    <includes id="a00074" name="Matrix.h" local="no" imported="no">gtsam/base/Matrix.h</includes>
    <includes id="a00299" name="Point2.h" local="no" imported="no">gtsam/geometry/Point2.h</includes>
    <includes id="a00305" name="Point3.h" local="no" imported="no">gtsam/geometry/Point3.h</includes>
    <includes id="a00245" name="Cal3DS2.h" local="no" imported="no">gtsam/geometry/Cal3DS2.h</includes>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>Cal3DS2.h</name>
    <path>/Users/dellaert/git/gtsam/gtsam/geometry/</path>
    <filename>a00245</filename>
    <class kind="class">gtsam::Cal3DS2</class>
    <class kind="struct">gtsam::traits&lt; Cal3DS2 &gt;</class>
    <class kind="struct">gtsam::traits&lt; const Cal3DS2 &gt;</class>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>Cal3DS2_Base.cpp</name>
    <path>/Users/dellaert/git/gtsam/gtsam/geometry/</path>
    <filename>a00248</filename>
    <includes id="a00128" name="Vector.h" local="no" imported="no">gtsam/base/Vector.h</includes>
    <includes id="a00074" name="Matrix.h" local="no" imported="no">gtsam/base/Matrix.h</includes>
    <includes id="a00299" name="Point2.h" local="no" imported="no">gtsam/geometry/Point2.h</includes>
    <includes id="a00305" name="Point3.h" local="no" imported="no">gtsam/geometry/Point3.h</includes>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>Cal3Unified.cpp</name>
    <path>/Users/dellaert/git/gtsam/gtsam/geometry/</path>
    <filename>a00254</filename>
    <includes id="a00128" name="Vector.h" local="no" imported="no">gtsam/base/Vector.h</includes>
    <includes id="a00074" name="Matrix.h" local="no" imported="no">gtsam/base/Matrix.h</includes>
    <includes id="a00299" name="Point2.h" local="no" imported="no">gtsam/geometry/Point2.h</includes>
    <includes id="a00257" name="Cal3Unified.h" local="no" imported="no">gtsam/geometry/Cal3Unified.h</includes>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>Cal3Unified.h</name>
    <path>/Users/dellaert/git/gtsam/gtsam/geometry/</path>
    <filename>a00257</filename>
    <class kind="class">gtsam::Cal3Unified</class>
    <class kind="struct">gtsam::traits&lt; Cal3Unified &gt;</class>
    <class kind="struct">gtsam::traits&lt; const Cal3Unified &gt;</class>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>CalibratedCamera.cpp</name>
    <path>/Users/dellaert/git/gtsam/gtsam/geometry/</path>
    <filename>a00260</filename>
    <includes id="a00311" name="Pose2.h" local="no" imported="no">gtsam/geometry/Pose2.h</includes>
    <includes id="a00263" name="CalibratedCamera.h" local="no" imported="no">gtsam/geometry/CalibratedCamera.h</includes>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>CalibratedCamera.h</name>
    <path>/Users/dellaert/git/gtsam/gtsam/geometry/</path>
    <filename>a00263</filename>
    <includes id="a00221" name="BearingRange.h" local="no" imported="no">gtsam/geometry/BearingRange.h</includes>
    <includes id="a00299" name="Point2.h" local="no" imported="no">gtsam/geometry/Point2.h</includes>
    <includes id="a00317" name="Pose3.h" local="no" imported="no">gtsam/geometry/Pose3.h</includes>
    <includes id="a00068" name="Manifold.h" local="no" imported="no">gtsam/base/Manifold.h</includes>
    <includes id="a00107" name="ThreadsafeException.h" local="no" imported="no">gtsam/base/ThreadsafeException.h</includes>
    <class kind="class">gtsam::CheiralityException</class>
    <class kind="class">gtsam::PinholeBase</class>
    <class kind="class">gtsam::CalibratedCamera</class>
    <class kind="struct">gtsam::traits&lt; CalibratedCamera &gt;</class>
    <class kind="struct">gtsam::traits&lt; const CalibratedCamera &gt;</class>
    <class kind="struct">gtsam::Range&lt; CalibratedCamera, T &gt;</class>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>CameraSet.h</name>
    <path>/Users/dellaert/git/gtsam/gtsam/geometry/</path>
    <filename>a00266</filename>
    <includes id="a00305" name="Point3.h" local="no" imported="no">gtsam/geometry/Point3.h</includes>
    <includes id="a00263" name="CalibratedCamera.h" local="no" imported="no">gtsam/geometry/CalibratedCamera.h</includes>
    <includes id="a00098" name="Testable.h" local="no" imported="no">gtsam/base/Testable.h</includes>
    <includes id="a00095" name="SymmetricBlockMatrix.h" local="no" imported="no">gtsam/base/SymmetricBlockMatrix.h</includes>
    <includes id="a00038" name="FastMap.h" local="no" imported="no">gtsam/base/FastMap.h</includes>
    <includes id="a00461" name="Key.h" local="no" imported="no">gtsam/inference/Key.h</includes>
    <class kind="class">gtsam::CameraSet</class>
    <class kind="struct">gtsam::traits&lt; CameraSet&lt; CAMERA &gt; &gt;</class>
    <class kind="struct">gtsam::traits&lt; const CameraSet&lt; CAMERA &gt; &gt;</class>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>Cyclic.cpp</name>
    <path>/Users/dellaert/git/gtsam/gtsam/geometry/</path>
    <filename>a00269</filename>
    <includes id="a00272" name="Cyclic.h" local="no" imported="no">gtsam/geometry/Cyclic.h</includes>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>Cyclic.h</name>
    <path>/Users/dellaert/git/gtsam/gtsam/geometry/</path>
    <filename>a00272</filename>
    <includes id="a00050" name="Group.h" local="no" imported="no">gtsam/base/Group.h</includes>
    <includes id="a00098" name="Testable.h" local="no" imported="no">gtsam/base/Testable.h</includes>
    <class kind="class">gtsam::Cyclic</class>
    <class kind="struct">gtsam::traits&lt; Cyclic&lt; N &gt; &gt;</class>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>PinholeCamera.h</name>
    <path>/Users/dellaert/git/gtsam/gtsam/geometry/</path>
    <filename>a00287</filename>
    <includes id="a00290" name="PinholePose.h" local="no" imported="no">gtsam/geometry/PinholePose.h</includes>
    <includes id="a00221" name="BearingRange.h" local="no" imported="no">gtsam/geometry/BearingRange.h</includes>
    <class kind="class">gtsam::PinholeCamera</class>
    <class kind="struct">gtsam::traits&lt; PinholeCamera&lt; Calibration &gt; &gt;</class>
    <class kind="struct">gtsam::traits&lt; const PinholeCamera&lt; Calibration &gt; &gt;</class>
    <class kind="struct">gtsam::Range&lt; PinholeCamera&lt; Calibration &gt;, T &gt;</class>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>PinholePose.h</name>
    <path>/Users/dellaert/git/gtsam/gtsam/geometry/</path>
    <filename>a00290</filename>
    <includes id="a00263" name="CalibratedCamera.h" local="no" imported="no">gtsam/geometry/CalibratedCamera.h</includes>
    <includes id="a00299" name="Point2.h" local="no" imported="no">gtsam/geometry/Point2.h</includes>
    <class kind="class">gtsam::PinholeBaseK</class>
    <class kind="class">gtsam::PinholePose</class>
    <class kind="struct">gtsam::traits&lt; PinholePose&lt; CALIBRATION &gt; &gt;</class>
    <class kind="struct">gtsam::traits&lt; const PinholePose&lt; CALIBRATION &gt; &gt;</class>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>PinholeSet.h</name>
    <path>/Users/dellaert/git/gtsam/gtsam/geometry/</path>
    <filename>a00293</filename>
    <includes id="a00266" name="CameraSet.h" local="no" imported="no">gtsam/geometry/CameraSet.h</includes>
    <includes id="a00368" name="triangulation.h" local="no" imported="no">gtsam/geometry/triangulation.h</includes>
    <class kind="class">gtsam::PinholeSet</class>
    <class kind="struct">gtsam::traits&lt; PinholeSet&lt; CAMERA &gt; &gt;</class>
    <class kind="struct">gtsam::traits&lt; const PinholeSet&lt; CAMERA &gt; &gt;</class>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>Point2.cpp</name>
    <path>/Users/dellaert/git/gtsam/gtsam/geometry/</path>
    <filename>a00296</filename>
    <includes id="a00299" name="Point2.h" local="no" imported="no">gtsam/geometry/Point2.h</includes>
    <namespace>gtsam</namespace>
    <member kind="function">
      <type>double</type>
      <name>norm2</name>
      <anchorfile>a01405.html</anchorfile>
      <anchor>afee4e6aa4aba9b6a6b421ddd75b52dfc</anchor>
      <arglist>(const Point2 &amp;p, OptionalJacobian&lt; 1, 2 &gt; H=boost::none)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>distance2</name>
      <anchorfile>a01405.html</anchorfile>
      <anchor>afd1282dfb080cb393ae60188b4582cb2</anchor>
      <arglist>(const Point2 &amp;p1, const Point2 &amp;q, OptionalJacobian&lt; 1, 2 &gt; H1=boost::none, OptionalJacobian&lt; 1, 2 &gt; H2=boost::none)</arglist>
    </member>
    <member kind="function">
      <type>list&lt; Point2 &gt;</type>
      <name>circleCircleIntersection</name>
      <anchorfile>a01405.html</anchorfile>
      <anchor>a93d4e38a582b6f32fc4f301df10721d5</anchor>
      <arglist>(Point2 c1, double r1, Point2 c2, double r2, double tol=1e-9)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Point2.h</name>
    <path>/Users/dellaert/git/gtsam/gtsam/geometry/</path>
    <filename>a00299</filename>
    <class kind="class">gtsam::Point2</class>
    <class kind="struct">gtsam::traits&lt; Point2 &gt;</class>
    <namespace>gtsam</namespace>
    <member kind="typedef">
      <type>std::pair&lt; Point2, Point2 &gt;</type>
      <name>Point2Pair</name>
      <anchorfile>a01405.html</anchorfile>
      <anchor>aea758f150791443afe1191868963b4e1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>norm2</name>
      <anchorfile>a01405.html</anchorfile>
      <anchor>afee4e6aa4aba9b6a6b421ddd75b52dfc</anchor>
      <arglist>(const Point2 &amp;p, OptionalJacobian&lt; 1, 2 &gt; H=boost::none)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>distance2</name>
      <anchorfile>a01405.html</anchorfile>
      <anchor>afd1282dfb080cb393ae60188b4582cb2</anchor>
      <arglist>(const Point2 &amp;p1, const Point2 &amp;q, OptionalJacobian&lt; 1, 2 &gt; H1=boost::none, OptionalJacobian&lt; 1, 2 &gt; H2=boost::none)</arglist>
    </member>
    <member kind="function">
      <type>Point2</type>
      <name>operator *</name>
      <anchorfile>a01405.html</anchorfile>
      <anchor>aad0ea5ed2ef42b81b4320e1edce387b0</anchor>
      <arglist>(double s, const Point2 &amp;p)</arglist>
    </member>
    <member kind="function">
      <type>list&lt; Point2 &gt;</type>
      <name>circleCircleIntersection</name>
      <anchorfile>a01405.html</anchorfile>
      <anchor>a93d4e38a582b6f32fc4f301df10721d5</anchor>
      <arglist>(Point2 c1, double r1, Point2 c2, double r2, double tol=1e-9)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Point3.cpp</name>
    <path>/Users/dellaert/git/gtsam/gtsam/geometry/</path>
    <filename>a00302</filename>
    <includes id="a00305" name="Point3.h" local="no" imported="no">gtsam/geometry/Point3.h</includes>
    <namespace>gtsam</namespace>
    <member kind="function">
      <type>double</type>
      <name>distance3</name>
      <anchorfile>a01405.html</anchorfile>
      <anchor>aa42f7ec660b7353de39f9c86a26711cc</anchor>
      <arglist>(const Point3 &amp;p1, const Point3 &amp;q, OptionalJacobian&lt; 1, 3 &gt; H1=boost::none, OptionalJacobian&lt; 1, 3 &gt; H2=boost::none)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>norm3</name>
      <anchorfile>a01405.html</anchorfile>
      <anchor>ac37b6f807985ffd25217e33f6136fe58</anchor>
      <arglist>(const Point3 &amp;p, OptionalJacobian&lt; 1, 3 &gt; H=boost::none)</arglist>
    </member>
    <member kind="function">
      <type>Point3</type>
      <name>normalize</name>
      <anchorfile>a01405.html</anchorfile>
      <anchor>abb52bb00c68909fc1147e5d112e8c2ae</anchor>
      <arglist>(const Point3 &amp;p, OptionalJacobian&lt; 3, 3 &gt; H=boost::none)</arglist>
    </member>
    <member kind="function">
      <type>Point3</type>
      <name>cross</name>
      <anchorfile>a01405.html</anchorfile>
      <anchor>a86bf6ed2ffb0ecc42a7deb8922f4ca4f</anchor>
      <arglist>(const Point3 &amp;p, const Point3 &amp;q, OptionalJacobian&lt; 3, 3 &gt; H_p=boost::none, OptionalJacobian&lt; 3, 3 &gt; H_q=boost::none)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>dot</name>
      <anchorfile>a01405.html</anchorfile>
      <anchor>a7dc820e4e47218768f104b43a184a1bd</anchor>
      <arglist>(const Point3 &amp;p, const Point3 &amp;q, OptionalJacobian&lt; 1, 3 &gt; H_p=boost::none, OptionalJacobian&lt; 1, 3 &gt; H_q=boost::none)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Point3.h</name>
    <path>/Users/dellaert/git/gtsam/gtsam/geometry/</path>
    <filename>a00305</filename>
    <includes id="a00128" name="Vector.h" local="no" imported="no">gtsam/base/Vector.h</includes>
    <class kind="class">gtsam::Point3</class>
    <class kind="struct">gtsam::traits&lt; Point3 &gt;</class>
    <class kind="struct">gtsam::traits&lt; const Point3 &gt;</class>
    <class kind="struct">gtsam::Range</class>
    <class kind="struct">gtsam::Range&lt; Point3, Point3 &gt;</class>
    <namespace>gtsam</namespace>
    <member kind="function">
      <type>double</type>
      <name>distance3</name>
      <anchorfile>a01405.html</anchorfile>
      <anchor>aa42f7ec660b7353de39f9c86a26711cc</anchor>
      <arglist>(const Point3 &amp;p1, const Point3 &amp;q, OptionalJacobian&lt; 1, 3 &gt; H1=boost::none, OptionalJacobian&lt; 1, 3 &gt; H2=boost::none)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>norm3</name>
      <anchorfile>a01405.html</anchorfile>
      <anchor>ac37b6f807985ffd25217e33f6136fe58</anchor>
      <arglist>(const Point3 &amp;p, OptionalJacobian&lt; 1, 3 &gt; H=boost::none)</arglist>
    </member>
    <member kind="function">
      <type>Point3</type>
      <name>normalize</name>
      <anchorfile>a01405.html</anchorfile>
      <anchor>abb52bb00c68909fc1147e5d112e8c2ae</anchor>
      <arglist>(const Point3 &amp;p, OptionalJacobian&lt; 3, 3 &gt; H=boost::none)</arglist>
    </member>
    <member kind="function">
      <type>Point3</type>
      <name>cross</name>
      <anchorfile>a01405.html</anchorfile>
      <anchor>a86bf6ed2ffb0ecc42a7deb8922f4ca4f</anchor>
      <arglist>(const Point3 &amp;p, const Point3 &amp;q, OptionalJacobian&lt; 3, 3 &gt; H_p=boost::none, OptionalJacobian&lt; 3, 3 &gt; H_q=boost::none)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>dot</name>
      <anchorfile>a01405.html</anchorfile>
      <anchor>a7dc820e4e47218768f104b43a184a1bd</anchor>
      <arglist>(const Point3 &amp;p, const Point3 &amp;q, OptionalJacobian&lt; 1, 3 &gt; H_p=boost::none, OptionalJacobian&lt; 1, 3 &gt; H_q=boost::none)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Pose2.cpp</name>
    <path>/Users/dellaert/git/gtsam/gtsam/geometry/</path>
    <filename>a00308</filename>
    <includes id="a00311" name="Pose2.h" local="no" imported="no">gtsam/geometry/Pose2.h</includes>
    <includes id="a00098" name="Testable.h" local="no" imported="no">gtsam/base/Testable.h</includes>
    <namespace>gtsam</namespace>
    <member kind="function">
      <type></type>
      <name>GTSAM_CONCEPT_POSE_INST</name>
      <anchorfile>a01405.html</anchorfile>
      <anchor>ad6efe09721c5221b12b7a3437f0a2bee</anchor>
      <arglist>(Pose2)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Pose2.h</name>
    <path>/Users/dellaert/git/gtsam/gtsam/geometry/</path>
    <filename>a00311</filename>
    <includes id="a00221" name="BearingRange.h" local="no" imported="no">gtsam/geometry/BearingRange.h</includes>
    <includes id="a00299" name="Point2.h" local="no" imported="no">gtsam/geometry/Point2.h</includes>
    <includes id="a00326" name="Rot2.h" local="no" imported="no">gtsam/geometry/Rot2.h</includes>
    <includes id="a00053" name="Lie.h" local="no" imported="no">gtsam/base/Lie.h</includes>
    <class kind="class">gtsam::Pose2</class>
    <class kind="struct">gtsam::Pose2::ChartAtOrigin</class>
    <class kind="struct">gtsam::traits&lt; Pose2 &gt;</class>
    <class kind="struct">gtsam::traits&lt; const Pose2 &gt;</class>
    <class kind="struct">gtsam::Bearing&lt; Pose2, T &gt;</class>
    <class kind="struct">gtsam::Range&lt; Pose2, T &gt;</class>
    <namespace>gtsam</namespace>
    <member kind="function">
      <type>Matrix</type>
      <name>wedge&lt; Pose2 &gt;</name>
      <anchorfile>a01405.html</anchorfile>
      <anchor>a4b78f4db0e05f3ca838ee4da6187710e</anchor>
      <arglist>(const Vector &amp;xi)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Pose3.cpp</name>
    <path>/Users/dellaert/git/gtsam/gtsam/geometry/</path>
    <filename>a00314</filename>
    <includes id="a00317" name="Pose3.h" local="no" imported="no">gtsam/geometry/Pose3.h</includes>
    <includes id="a00311" name="Pose2.h" local="no" imported="no">gtsam/geometry/Pose2.h</includes>
    <namespace>gtsam</namespace>
    <member kind="function">
      <type></type>
      <name>GTSAM_CONCEPT_POSE_INST</name>
      <anchorfile>a01405.html</anchorfile>
      <anchor>a10a8e9793b8e0d234fb0c83b17a2f5bc</anchor>
      <arglist>(Pose3)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Pose3.h</name>
    <path>/Users/dellaert/git/gtsam/gtsam/geometry/</path>
    <filename>a00317</filename>
    <includes id="a00221" name="BearingRange.h" local="no" imported="no">gtsam/geometry/BearingRange.h</includes>
    <includes id="a00305" name="Point3.h" local="no" imported="no">gtsam/geometry/Point3.h</includes>
    <includes id="a00332" name="Rot3.h" local="no" imported="no">gtsam/geometry/Rot3.h</includes>
    <includes id="a00053" name="Lie.h" local="no" imported="no">gtsam/base/Lie.h</includes>
    <class kind="class">gtsam::Pose3</class>
    <class kind="struct">gtsam::Pose3::ChartAtOrigin</class>
    <class kind="struct">gtsam::traits&lt; Pose3 &gt;</class>
    <class kind="struct">gtsam::traits&lt; const Pose3 &gt;</class>
    <class kind="struct">gtsam::Bearing&lt; Pose3, Point3 &gt;</class>
    <class kind="struct">gtsam::Bearing&lt; Pose3, Pose3 &gt;</class>
    <class kind="struct">gtsam::Range&lt; Pose3, T &gt;</class>
    <namespace>gtsam</namespace>
    <member kind="function">
      <type>Matrix</type>
      <name>wedge&lt; Pose3 &gt;</name>
      <anchorfile>a01405.html</anchorfile>
      <anchor>aefb606eb24889c0f418acf1515a2c723</anchor>
      <arglist>(const Vector &amp;xi)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Quaternion.h</name>
    <path>/Users/dellaert/git/gtsam/gtsam/geometry/</path>
    <filename>a00320</filename>
    <includes id="a00053" name="Lie.h" local="no" imported="no">gtsam/base/Lie.h</includes>
    <includes id="a00350" name="SO3.h" local="no" imported="no">gtsam/geometry/SO3.h</includes>
    <class kind="struct">gtsam::traits&lt; QUATERNION_TYPE &gt;</class>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>Rot2.cpp</name>
    <path>/Users/dellaert/git/gtsam/gtsam/geometry/</path>
    <filename>a00323</filename>
    <includes id="a00326" name="Rot2.h" local="no" imported="no">gtsam/geometry/Rot2.h</includes>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>Rot2.h</name>
    <path>/Users/dellaert/git/gtsam/gtsam/geometry/</path>
    <filename>a00326</filename>
    <includes id="a00299" name="Point2.h" local="no" imported="no">gtsam/geometry/Point2.h</includes>
    <includes id="a00053" name="Lie.h" local="no" imported="no">gtsam/base/Lie.h</includes>
    <class kind="class">gtsam::Rot2</class>
    <class kind="struct">gtsam::Rot2::ChartAtOrigin</class>
    <class kind="struct">gtsam::traits&lt; Rot2 &gt;</class>
    <class kind="struct">gtsam::traits&lt; const Rot2 &gt;</class>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>Rot3.cpp</name>
    <path>/Users/dellaert/git/gtsam/gtsam/geometry/</path>
    <filename>a00329</filename>
    <includes id="a00332" name="Rot3.h" local="no" imported="no">gtsam/geometry/Rot3.h</includes>
    <includes id="a00350" name="SO3.h" local="no" imported="no">gtsam/geometry/SO3.h</includes>
    <namespace>gtsam</namespace>
    <member kind="function">
      <type>pair&lt; Matrix3, Vector3 &gt;</type>
      <name>RQ</name>
      <anchorfile>a01405.html</anchorfile>
      <anchor>a59e7b1c395b14af00409d9ca3ee4a687</anchor>
      <arglist>(const Matrix3 &amp;A)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Rot3.h</name>
    <path>/Users/dellaert/git/gtsam/gtsam/geometry/</path>
    <filename>a00332</filename>
    <includes id="a00320" name="Quaternion.h" local="no" imported="no">gtsam/geometry/Quaternion.h</includes>
    <includes id="a00350" name="SO3.h" local="no" imported="no">gtsam/geometry/SO3.h</includes>
    <class kind="class">gtsam::Rot3</class>
    <class kind="struct">gtsam::Rot3::CayleyChart</class>
    <class kind="struct">gtsam::Rot3::ChartAtOrigin</class>
    <class kind="struct">gtsam::traits&lt; Rot3 &gt;</class>
    <class kind="struct">gtsam::traits&lt; const Rot3 &gt;</class>
    <namespace>gtsam</namespace>
    <member kind="function">
      <type>pair&lt; Matrix3, Vector3 &gt;</type>
      <name>RQ</name>
      <anchorfile>a01405.html</anchorfile>
      <anchor>a59e7b1c395b14af00409d9ca3ee4a687</anchor>
      <arglist>(const Matrix3 &amp;A)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Rot3M.cpp</name>
    <path>/Users/dellaert/git/gtsam/gtsam/geometry/</path>
    <filename>a00335</filename>
    <includes id="a00332" name="Rot3.h" local="no" imported="no">gtsam/geometry/Rot3.h</includes>
    <includes id="a00350" name="SO3.h" local="no" imported="no">gtsam/geometry/SO3.h</includes>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>Rot3Q.cpp</name>
    <path>/Users/dellaert/git/gtsam/gtsam/geometry/</path>
    <filename>a00338</filename>
  </compound>
  <compound kind="file">
    <name>SimpleCamera.cpp</name>
    <path>/Users/dellaert/git/gtsam/gtsam/geometry/</path>
    <filename>a00341</filename>
    <includes id="a00344" name="SimpleCamera.h" local="no" imported="no">gtsam/geometry/SimpleCamera.h</includes>
    <includes id="a00227" name="Cal3_S2.h" local="no" imported="no">gtsam/geometry/Cal3_S2.h</includes>
    <namespace>gtsam</namespace>
    <member kind="function">
      <type>SimpleCamera</type>
      <name>simpleCamera</name>
      <anchorfile>a01405.html</anchorfile>
      <anchor>a436ecbd806af9fb8665657f1b4b01ed6</anchor>
      <arglist>(const Matrix34 &amp;P)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>SimpleCamera.h</name>
    <path>/Users/dellaert/git/gtsam/gtsam/geometry/</path>
    <filename>a00344</filename>
    <includes id="a00221" name="BearingRange.h" local="no" imported="no">gtsam/geometry/BearingRange.h</includes>
    <includes id="a00287" name="PinholeCamera.h" local="no" imported="no">gtsam/geometry/PinholeCamera.h</includes>
    <includes id="a00227" name="Cal3_S2.h" local="no" imported="no">gtsam/geometry/Cal3_S2.h</includes>
    <class kind="class">gtsam::SimpleCamera</class>
    <class kind="struct">gtsam::traits&lt; SimpleCamera &gt;</class>
    <class kind="struct">gtsam::traits&lt; const SimpleCamera &gt;</class>
    <class kind="struct">gtsam::Range&lt; SimpleCamera, T &gt;</class>
    <namespace>gtsam</namespace>
    <member kind="typedef">
      <type>gtsam::PinholeCamera&lt; gtsam::Cal3_S2 &gt;</type>
      <name>PinholeCameraCal3_S2</name>
      <anchorfile>a01405.html</anchorfile>
      <anchor>ab314b48e64ff3d3be5f45aa214370438</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>SimpleCamera</type>
      <name>simpleCamera</name>
      <anchorfile>a01405.html</anchorfile>
      <anchor>a436ecbd806af9fb8665657f1b4b01ed6</anchor>
      <arglist>(const Matrix34 &amp;P)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>SO3.cpp</name>
    <path>/Users/dellaert/git/gtsam/gtsam/geometry/</path>
    <filename>a00347</filename>
    <includes id="a00350" name="SO3.h" local="no" imported="no">gtsam/geometry/SO3.h</includes>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>SO3.h</name>
    <path>/Users/dellaert/git/gtsam/gtsam/geometry/</path>
    <filename>a00350</filename>
    <includes id="a00074" name="Matrix.h" local="no" imported="no">gtsam/base/Matrix.h</includes>
    <includes id="a00053" name="Lie.h" local="no" imported="no">gtsam/base/Lie.h</includes>
    <class kind="class">gtsam::SO3</class>
    <class kind="struct">gtsam::SO3::ChartAtOrigin</class>
    <class kind="class">gtsam::so3::ExpmapFunctor</class>
    <class kind="class">gtsam::so3::DexpFunctor</class>
    <class kind="struct">gtsam::traits&lt; SO3 &gt;</class>
    <class kind="struct">gtsam::traits&lt; const SO3 &gt;</class>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>StereoCamera.h</name>
    <path>/Users/dellaert/git/gtsam/gtsam/geometry/</path>
    <filename>a00356</filename>
    <includes id="a00233" name="Cal3_S2Stereo.h" local="no" imported="no">gtsam/geometry/Cal3_S2Stereo.h</includes>
    <includes id="a00317" name="Pose3.h" local="no" imported="no">gtsam/geometry/Pose3.h</includes>
    <includes id="a00362" name="StereoPoint2.h" local="no" imported="no">gtsam/geometry/StereoPoint2.h</includes>
    <class kind="class">gtsam::StereoCheiralityException</class>
    <class kind="class">gtsam::StereoCamera</class>
    <class kind="struct">gtsam::traits&lt; StereoCamera &gt;</class>
    <class kind="struct">gtsam::traits&lt; const StereoCamera &gt;</class>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>StereoPoint2.cpp</name>
    <path>/Users/dellaert/git/gtsam/gtsam/geometry/</path>
    <filename>a00359</filename>
    <includes id="a00362" name="StereoPoint2.h" local="no" imported="no">gtsam/geometry/StereoPoint2.h</includes>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>StereoPoint2.h</name>
    <path>/Users/dellaert/git/gtsam/gtsam/geometry/</path>
    <filename>a00362</filename>
    <includes id="a00299" name="Point2.h" local="no" imported="no">gtsam/geometry/Point2.h</includes>
    <class kind="class">gtsam::StereoPoint2</class>
    <class kind="struct">gtsam::traits&lt; StereoPoint2 &gt;</class>
    <class kind="struct">gtsam::traits&lt; const StereoPoint2 &gt;</class>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>triangulation.h</name>
    <path>/Users/dellaert/git/gtsam/gtsam/geometry/</path>
    <filename>a00368</filename>
    <includes id="a00287" name="PinholeCamera.h" local="no" imported="no">gtsam/geometry/PinholeCamera.h</includes>
    <includes id="a00266" name="CameraSet.h" local="no" imported="no">gtsam/geometry/CameraSet.h</includes>
    <includes id="a00311" name="Pose2.h" local="no" imported="no">gtsam/geometry/Pose2.h</includes>
    <includes id="a00992" name="PriorFactor.h" local="no" imported="no">gtsam/slam/PriorFactor.h</includes>
    <includes id="a00887" name="NonlinearFactorGraph.h" local="no" imported="no">gtsam/nonlinear/NonlinearFactorGraph.h</includes>
    <class kind="class">gtsam::TriangulationUnderconstrainedException</class>
    <class kind="class">gtsam::TriangulationCheiralityException</class>
    <class kind="struct">gtsam::CameraProjectionMatrix</class>
    <class kind="struct">gtsam::TriangulationParameters</class>
    <class kind="class">gtsam::TriangulationResult</class>
    <namespace>gtsam</namespace>
    <member kind="function">
      <type>Vector4</type>
      <name>triangulateHomogeneousDLT</name>
      <anchorfile>a01405.html</anchorfile>
      <anchor>a9a1b9142d14816177bd75ae73b3f51af</anchor>
      <arglist>(const std::vector&lt; Matrix34, Eigen::aligned_allocator&lt; Matrix34 &gt;&gt; &amp;projection_matrices, const Point2Vector &amp;measurements, double rank_tol=1e-9)</arglist>
    </member>
    <member kind="function">
      <type>Point3</type>
      <name>triangulateDLT</name>
      <anchorfile>a01405.html</anchorfile>
      <anchor>a693d050510d4b6eb17c2026871f388cf</anchor>
      <arglist>(const std::vector&lt; Matrix34, Eigen::aligned_allocator&lt; Matrix34 &gt;&gt; &amp;projection_matrices, const Point2Vector &amp;measurements, double rank_tol=1e-9)</arglist>
    </member>
    <member kind="function">
      <type>std::pair&lt; NonlinearFactorGraph, Values &gt;</type>
      <name>triangulationGraph</name>
      <anchorfile>a01405.html</anchorfile>
      <anchor>a668fff4982774156e2377961e6c88076</anchor>
      <arglist>(const std::vector&lt; Pose3 &gt; &amp;poses, boost::shared_ptr&lt; CALIBRATION &gt; sharedCal, const Point2Vector &amp;measurements, Key landmarkKey, const Point3 &amp;initialEstimate)</arglist>
    </member>
    <member kind="function">
      <type>std::pair&lt; NonlinearFactorGraph, Values &gt;</type>
      <name>triangulationGraph</name>
      <anchorfile>a01405.html</anchorfile>
      <anchor>ac899a47d8956881aea8b3fe594839d60</anchor>
      <arglist>(const CameraSet&lt; CAMERA &gt; &amp;cameras, const typename CAMERA::MeasurementVector &amp;measurements, Key landmarkKey, const Point3 &amp;initialEstimate)</arglist>
    </member>
    <member kind="function">
      <type>std::pair&lt; NonlinearFactorGraph, Values &gt;</type>
      <name>triangulationGraph</name>
      <anchorfile>a01405.html</anchorfile>
      <anchor>a411dabe6c9ac15c22af2a31f313c8476</anchor>
      <arglist>(const CameraSet&lt; PinholeCamera&lt; CALIBRATION &gt; &gt; &amp;cameras, const Point2Vector &amp;measurements, Key landmarkKey, const Point3 &amp;initialEstimate)</arglist>
    </member>
    <member kind="function">
      <type>Point3</type>
      <name>optimize</name>
      <anchorfile>a01405.html</anchorfile>
      <anchor>a4b0057879b0c5f323185452b0d1a4232</anchor>
      <arglist>(const NonlinearFactorGraph &amp;graph, const Values &amp;values, Key landmarkKey)</arglist>
    </member>
    <member kind="function">
      <type>Point3</type>
      <name>triangulateNonlinear</name>
      <anchorfile>a01405.html</anchorfile>
      <anchor>afd76f4999d5ac79b85c4271943e9251f</anchor>
      <arglist>(const std::vector&lt; Pose3 &gt; &amp;poses, boost::shared_ptr&lt; CALIBRATION &gt; sharedCal, const Point2Vector &amp;measurements, const Point3 &amp;initialEstimate)</arglist>
    </member>
    <member kind="function">
      <type>Point3</type>
      <name>triangulateNonlinear</name>
      <anchorfile>a01405.html</anchorfile>
      <anchor>a2fa35400ef37861ce74067b6a38884ba</anchor>
      <arglist>(const CameraSet&lt; CAMERA &gt; &amp;cameras, const typename CAMERA::MeasurementVector &amp;measurements, const Point3 &amp;initialEstimate)</arglist>
    </member>
    <member kind="function">
      <type>Point3</type>
      <name>triangulateNonlinear</name>
      <anchorfile>a01405.html</anchorfile>
      <anchor>aaa4438c0bf582abf1b5d7aab882eb55f</anchor>
      <arglist>(const CameraSet&lt; PinholeCamera&lt; CALIBRATION &gt; &gt; &amp;cameras, const Point2Vector &amp;measurements, const Point3 &amp;initialEstimate)</arglist>
    </member>
    <member kind="function">
      <type>Point3</type>
      <name>triangulatePoint3</name>
      <anchorfile>a01405.html</anchorfile>
      <anchor>ae7b725c367246edb1beea32060fd50f7</anchor>
      <arglist>(const std::vector&lt; Pose3 &gt; &amp;poses, boost::shared_ptr&lt; CALIBRATION &gt; sharedCal, const Point2Vector &amp;measurements, double rank_tol=1e-9, bool optimize=false)</arglist>
    </member>
    <member kind="function">
      <type>Point3</type>
      <name>triangulatePoint3</name>
      <anchorfile>a01405.html</anchorfile>
      <anchor>a0493526601a58e173f8c0646ed302739</anchor>
      <arglist>(const CameraSet&lt; CAMERA &gt; &amp;cameras, const typename CAMERA::MeasurementVector &amp;measurements, double rank_tol=1e-9, bool optimize=false)</arglist>
    </member>
    <member kind="function">
      <type>Point3</type>
      <name>triangulatePoint3</name>
      <anchorfile>a01405.html</anchorfile>
      <anchor>a22a9a20bbbd347f4cf2a7153a5d43ec4</anchor>
      <arglist>(const CameraSet&lt; PinholeCamera&lt; CALIBRATION &gt; &gt; &amp;cameras, const Point2Vector &amp;measurements, double rank_tol=1e-9, bool optimize=false)</arglist>
    </member>
    <member kind="function">
      <type>TriangulationResult</type>
      <name>triangulateSafe</name>
      <anchorfile>a01405.html</anchorfile>
      <anchor>a8d52d7d8a5e5c8d7318ce95ee57e9cfa</anchor>
      <arglist>(const CameraSet&lt; CAMERA &gt; &amp;cameras, const typename CAMERA::MeasurementVector &amp;measured, const TriangulationParameters &amp;params)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>global_includes.h</name>
    <path>/Users/dellaert/git/gtsam/gtsam/</path>
    <filename>a01076</filename>
    <includes id="a00119" name="types.h" local="no" imported="no">gtsam/base/types.h</includes>
  </compound>
  <compound kind="file">
    <name>BayesNet.h</name>
    <path>/Users/dellaert/git/gtsam/gtsam/inference/</path>
    <filename>a00380</filename>
    <includes id="a00431" name="FactorGraph.h" local="no" imported="no">gtsam/inference/FactorGraph.h</includes>
    <class kind="class">gtsam::BayesNet</class>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>BayesTree.cpp</name>
    <path>/Users/dellaert/git/gtsam/gtsam/inference/</path>
    <filename>a00386</filename>
    <includes id="a00389" name="BayesTree.h" local="no" imported="no">gtsam/inference/BayesTree.h</includes>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>BayesTree.h</name>
    <path>/Users/dellaert/git/gtsam/gtsam/inference/</path>
    <filename>a00389</filename>
    <includes id="a00461" name="Key.h" local="no" imported="no">gtsam/inference/Key.h</includes>
    <includes id="a00035" name="FastList.h" local="no" imported="no">gtsam/base/FastList.h</includes>
    <includes id="a00044" name="FastVector.h" local="no" imported="no">gtsam/base/FastVector.h</includes>
    <class kind="class">gtsam::FactorGraph</class>
    <class kind="class">gtsam::EliminatableClusterTree</class>
    <class kind="struct">gtsam::BayesTreeCliqueStats</class>
    <class kind="struct">gtsam::BayesTreeCliqueData</class>
    <class kind="class">gtsam::BayesTree</class>
    <class kind="class">gtsam::BayesTreeOrphanWrapper</class>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>BayesTreeCliqueBase-inst.h</name>
    <path>/Users/dellaert/git/gtsam/gtsam/inference/</path>
    <filename>a00392</filename>
    <includes id="a00395" name="BayesTreeCliqueBase.h" local="no" imported="no">gtsam/inference/BayesTreeCliqueBase.h</includes>
    <includes id="a00113" name="timing.h" local="no" imported="no">gtsam/base/timing.h</includes>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>BayesTreeCliqueBase.h</name>
    <path>/Users/dellaert/git/gtsam/gtsam/inference/</path>
    <filename>a00395</filename>
    <includes id="a00461" name="Key.h" local="no" imported="no">gtsam/inference/Key.h</includes>
    <includes id="a00479" name="Ordering.h" local="no" imported="no">gtsam/inference/Ordering.h</includes>
    <includes id="a00119" name="types.h" local="no" imported="no">gtsam/base/types.h</includes>
    <includes id="a00044" name="FastVector.h" local="no" imported="no">gtsam/base/FastVector.h</includes>
    <class kind="class">gtsam::BayesTree</class>
    <class kind="struct">gtsam::EliminationTraits</class>
    <class kind="class">gtsam::BayesTreeCliqueBase</class>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>Conditional.h</name>
    <path>/Users/dellaert/git/gtsam/gtsam/inference/</path>
    <filename>a00407</filename>
    <includes id="a00461" name="Key.h" local="no" imported="no">gtsam/inference/Key.h</includes>
    <class kind="class">gtsam::Conditional</class>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>EliminateableFactorGraph.h</name>
    <path>/Users/dellaert/git/gtsam/gtsam/inference/</path>
    <filename>a00413</filename>
    <includes id="a00479" name="Ordering.h" local="no" imported="no">gtsam/inference/Ordering.h</includes>
    <includes id="a00494" name="VariableIndex.h" local="no" imported="no">gtsam/inference/VariableIndex.h</includes>
    <class kind="struct">gtsam::EliminationTraits</class>
    <class kind="class">gtsam::EliminateableFactorGraph</class>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>EliminationTree.h</name>
    <path>/Users/dellaert/git/gtsam/gtsam/inference/</path>
    <filename>a00419</filename>
    <includes id="a00098" name="Testable.h" local="no" imported="no">gtsam/base/Testable.h</includes>
    <includes id="a00044" name="FastVector.h" local="no" imported="no">gtsam/base/FastVector.h</includes>
    <class kind="class">gtsam::EliminationTree</class>
    <class kind="struct">gtsam::EliminationTree::Node</class>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>Factor.cpp</name>
    <path>/Users/dellaert/git/gtsam/gtsam/inference/</path>
    <filename>a00422</filename>
    <includes id="a00425" name="Factor.h" local="no" imported="no">gtsam/inference/Factor.h</includes>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>Factor.h</name>
    <path>/Users/dellaert/git/gtsam/gtsam/inference/</path>
    <filename>a00425</filename>
    <includes id="a00119" name="types.h" local="no" imported="no">gtsam/base/types.h</includes>
    <includes id="a00044" name="FastVector.h" local="no" imported="no">gtsam/base/FastVector.h</includes>
    <includes id="a00461" name="Key.h" local="no" imported="no">gtsam/inference/Key.h</includes>
    <class kind="class">gtsam::Factor</class>
    <namespace>gtsam</namespace>
    <member kind="typedef">
      <type>FastVector&lt; FactorIndex &gt;</type>
      <name>FactorIndices</name>
      <anchorfile>a01405.html</anchorfile>
      <anchor>a3691936bb30a93d5dfe6b7119e9f6a9b</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>FactorGraph.h</name>
    <path>/Users/dellaert/git/gtsam/gtsam/inference/</path>
    <filename>a00431</filename>
    <includes id="a00098" name="Testable.h" local="no" imported="no">gtsam/base/Testable.h</includes>
    <includes id="a00044" name="FastVector.h" local="no" imported="no">gtsam/base/FastVector.h</includes>
    <includes id="a00461" name="Key.h" local="no" imported="no">gtsam/inference/Key.h</includes>
    <class kind="class">gtsam::BayesTree</class>
    <class kind="class">gtsam::CRefCallPushBack</class>
    <class kind="class">gtsam::RefCallPushBack</class>
    <class kind="class">gtsam::CRefCallAddCopy</class>
    <class kind="class">gtsam::FactorGraph</class>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>graph.h</name>
    <path>/Users/dellaert/git/gtsam/gtsam/inference/</path>
    <filename>a00437</filename>
    <includes id="a00917" name="Values.h" local="no" imported="no">gtsam/nonlinear/Values.h</includes>
    <class kind="class">gtsam::SDGraph</class>
    <class kind="class">gtsam::SGraph</class>
    <class kind="class">gtsam::PredecessorMap</class>
    <namespace>gtsam</namespace>
    <member kind="function">
      <type>std::list&lt; KEY &gt;</type>
      <name>predecessorMap2Keys</name>
      <anchorfile>a01405.html</anchorfile>
      <anchor>a18a265afdea057ea54be10262396be12</anchor>
      <arglist>(const PredecessorMap&lt; KEY &gt; &amp;p_map)</arglist>
    </member>
    <member kind="function">
      <type>SDGraph&lt; KEY &gt;</type>
      <name>toBoostGraph</name>
      <anchorfile>a01405.html</anchorfile>
      <anchor>a6c0319a6ebcc83d4a5cf9ff51729bb80</anchor>
      <arglist>(const G &amp;graph)</arglist>
    </member>
    <member kind="function">
      <type>boost::tuple&lt; G, V, std::map&lt; KEY, V &gt; &gt;</type>
      <name>predecessorMap2Graph</name>
      <anchorfile>a01405.html</anchorfile>
      <anchor>ae67d0d86c4e55b175859967a70b36983</anchor>
      <arglist>(const PredecessorMap&lt; KEY &gt; &amp;p_map)</arglist>
    </member>
    <member kind="function">
      <type>boost::shared_ptr&lt; Values &gt;</type>
      <name>composePoses</name>
      <anchorfile>a01405.html</anchorfile>
      <anchor>a62b34d6038ccdfa84d8a5bb0c15328b1</anchor>
      <arglist>(const G &amp;graph, const PredecessorMap&lt; KEY &gt; &amp;tree, const POSE &amp;rootPose)</arglist>
    </member>
    <member kind="function">
      <type>PredecessorMap&lt; KEY &gt;</type>
      <name>findMinimumSpanningTree</name>
      <anchorfile>a01405.html</anchorfile>
      <anchor>a7771a103b41708e88763ff67059ff01d</anchor>
      <arglist>(const G &amp;g)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>split</name>
      <anchorfile>a01405.html</anchorfile>
      <anchor>a3453247aec1d8b4642947ffd4bca426b</anchor>
      <arglist>(const G &amp;g, const PredecessorMap&lt; KEY &gt; &amp;tree, G &amp;Ab1, G &amp;Ab2)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>inference-inst.h</name>
    <path>/Users/dellaert/git/gtsam/gtsam/inference/</path>
    <filename>a00440</filename>
    <includes id="a00116" name="treeTraversal-inst.h" local="no" imported="no">gtsam/base/treeTraversal-inst.h</includes>
    <includes id="a00044" name="FastVector.h" local="no" imported="no">gtsam/base/FastVector.h</includes>
    <namespace>gtsam</namespace>
    <member kind="function">
      <type>FastVector&lt; typename TREE::sharedFactor &gt;</type>
      <name>EliminateTree</name>
      <anchorfile>a00440.html</anchorfile>
      <anchor>a1770dca8befbc46bdcb7b065764f4ef1</anchor>
      <arglist>(RESULT &amp;result, const TREE &amp;tree, const typename TREE::Eliminate &amp;function)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>inferenceExceptions.h</name>
    <path>/Users/dellaert/git/gtsam/gtsam/inference/</path>
    <filename>a00443</filename>
    <includes id="a01076" name="global_includes.h" local="no" imported="no">gtsam/global_includes.h</includes>
    <class kind="class">gtsam::InconsistentEliminationRequested</class>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>ISAM.h</name>
    <path>/Users/dellaert/git/gtsam/gtsam/inference/</path>
    <filename>a00449</filename>
    <includes id="a01076" name="global_includes.h" local="no" imported="no">gtsam/global_includes.h</includes>
    <class kind="class">gtsam::ISAM</class>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>JunctionTree-inst.h</name>
    <path>/Users/dellaert/git/gtsam/gtsam/inference/</path>
    <filename>a00452</filename>
    <includes id="a00455" name="JunctionTree.h" local="no" imported="no">gtsam/inference/JunctionTree.h</includes>
    <includes id="a01040" name="SymbolicConditional.h" local="no" imported="no">gtsam/symbolic/SymbolicConditional.h</includes>
    <includes id="a01049" name="SymbolicFactor-inst.h" local="no" imported="no">gtsam/symbolic/SymbolicFactor-inst.h</includes>
    <class kind="struct">gtsam::ConstructorTraversalData</class>
    <class kind="class">gtsam::ConstructorTraversalData::SymbolicFactors</class>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>JunctionTree.h</name>
    <path>/Users/dellaert/git/gtsam/gtsam/inference/</path>
    <filename>a00455</filename>
    <class kind="class">gtsam::EliminationTree</class>
    <class kind="class">gtsam::JunctionTree</class>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>Key.h</name>
    <path>/Users/dellaert/git/gtsam/gtsam/inference/</path>
    <filename>a00461</filename>
    <includes id="a00035" name="FastList.h" local="no" imported="no">gtsam/base/FastList.h</includes>
    <includes id="a00038" name="FastMap.h" local="no" imported="no">gtsam/base/FastMap.h</includes>
    <includes id="a00041" name="FastSet.h" local="no" imported="no">gtsam/base/FastSet.h</includes>
    <includes id="a00044" name="FastVector.h" local="no" imported="no">gtsam/base/FastVector.h</includes>
    <includes id="a00098" name="Testable.h" local="no" imported="no">gtsam/base/Testable.h</includes>
    <includes id="a00119" name="types.h" local="no" imported="no">gtsam/base/types.h</includes>
    <class kind="struct">gtsam::traits</class>
    <class kind="struct">gtsam::traits&lt; Key &gt;</class>
    <namespace>gtsam</namespace>
    <member kind="typedef">
      <type>boost::function&lt; std::string(Key)&gt;</type>
      <name>KeyFormatter</name>
      <anchorfile>a01405.html</anchorfile>
      <anchor>a29dee574fe60f586d71b2c0d957dc8bb</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>FastVector&lt; Key &gt;</type>
      <name>KeyVector</name>
      <anchorfile>a01405.html</anchorfile>
      <anchor>a18932dfd5dba41c0574e6db16cdb5932</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>PrintKey</name>
      <anchorfile>a01405.html</anchorfile>
      <anchor>a4f9e295c4f7086ce05cbe37aeeca47fe</anchor>
      <arglist>(Key key, const std::string &amp;s=&quot;&quot;, const KeyFormatter &amp;keyFormatter=DefaultKeyFormatter)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>PrintKeyList</name>
      <anchorfile>a01405.html</anchorfile>
      <anchor>aab7ddea9b0bc36f296327e0ec08c4ef0</anchor>
      <arglist>(const KeyList &amp;keys, const std::string &amp;s=&quot;&quot;, const KeyFormatter &amp;keyFormatter=DefaultKeyFormatter)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>PrintKeyVector</name>
      <anchorfile>a01405.html</anchorfile>
      <anchor>a4c14be406d50f65bd404429a7b1d3af0</anchor>
      <arglist>(const KeyVector &amp;keys, const std::string &amp;s=&quot;&quot;, const KeyFormatter &amp;keyFormatter=DefaultKeyFormatter)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>PrintKeySet</name>
      <anchorfile>a01405.html</anchorfile>
      <anchor>aac25d6c8afb07054416ba6727685bf55</anchor>
      <arglist>(const KeySet &amp;keys, const std::string &amp;s=&quot;&quot;, const KeyFormatter &amp;keyFormatter=DefaultKeyFormatter)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>LabeledSymbol.h</name>
    <path>/Users/dellaert/git/gtsam/gtsam/inference/</path>
    <filename>a00467</filename>
    <class kind="class">gtsam::LabeledSymbol</class>
    <class kind="struct">gtsam::traits&lt; LabeledSymbol &gt;</class>
    <namespace>gtsam</namespace>
    <member kind="function">
      <type>Key</type>
      <name>mrsymbol</name>
      <anchorfile>a01405.html</anchorfile>
      <anchor>ae9a7dceb0a85c356062b55f6939b1419</anchor>
      <arglist>(unsigned char c, unsigned char label, size_t j)</arglist>
    </member>
    <member kind="function">
      <type>unsigned char</type>
      <name>mrsymbolChr</name>
      <anchorfile>a01405.html</anchorfile>
      <anchor>a37995b0d0610e5fb29c6bd0715151d67</anchor>
      <arglist>(Key key)</arglist>
    </member>
    <member kind="function">
      <type>unsigned char</type>
      <name>mrsymbolLabel</name>
      <anchorfile>a01405.html</anchorfile>
      <anchor>a4e4c133c4fd0d9d73593f601be2248a6</anchor>
      <arglist>(Key key)</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>mrsymbolIndex</name>
      <anchorfile>a01405.html</anchorfile>
      <anchor>a4adc1bb606fa4a14d5dbd246f95cecd3</anchor>
      <arglist>(Key key)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>MetisIndex-inl.h</name>
    <path>/Users/dellaert/git/gtsam/gtsam/inference/</path>
    <filename>a00470</filename>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>MetisIndex.h</name>
    <path>/Users/dellaert/git/gtsam/gtsam/inference/</path>
    <filename>a00473</filename>
    <includes id="a00461" name="Key.h" local="no" imported="no">gtsam/inference/Key.h</includes>
    <includes id="a00431" name="FactorGraph.h" local="no" imported="no">gtsam/inference/FactorGraph.h</includes>
    <includes id="a00119" name="types.h" local="no" imported="no">gtsam/base/types.h</includes>
    <includes id="a00113" name="timing.h" local="no" imported="no">gtsam/base/timing.h</includes>
    <includes id="a00470" name="MetisIndex-inl.h" local="no" imported="no">gtsam/inference/MetisIndex-inl.h</includes>
    <class kind="class">gtsam::MetisIndex</class>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>Ordering.cpp</name>
    <path>/Users/dellaert/git/gtsam/gtsam/inference/</path>
    <filename>a00476</filename>
    <includes id="a00479" name="Ordering.h" local="no" imported="no">gtsam/inference/Ordering.h</includes>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>Ordering.h</name>
    <path>/Users/dellaert/git/gtsam/gtsam/inference/</path>
    <filename>a00479</filename>
    <includes id="a00461" name="Key.h" local="no" imported="no">gtsam/inference/Key.h</includes>
    <includes id="a00494" name="VariableIndex.h" local="no" imported="no">gtsam/inference/VariableIndex.h</includes>
    <includes id="a00473" name="MetisIndex.h" local="no" imported="no">gtsam/inference/MetisIndex.h</includes>
    <includes id="a00041" name="FastSet.h" local="no" imported="no">gtsam/base/FastSet.h</includes>
    <class kind="class">gtsam::Ordering</class>
    <class kind="struct">gtsam::traits&lt; Ordering &gt;</class>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>Symbol.cpp</name>
    <path>/Users/dellaert/git/gtsam/gtsam/inference/</path>
    <filename>a00482</filename>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>VariableIndex-inl.h</name>
    <path>/Users/dellaert/git/gtsam/gtsam/inference/</path>
    <filename>a00488</filename>
    <includes id="a00494" name="VariableIndex.h" local="no" imported="no">gtsam/inference/VariableIndex.h</includes>
    <includes id="a00113" name="timing.h" local="no" imported="no">gtsam/base/timing.h</includes>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>VariableIndex.cpp</name>
    <path>/Users/dellaert/git/gtsam/gtsam/inference/</path>
    <filename>a00491</filename>
    <includes id="a00494" name="VariableIndex.h" local="no" imported="no">gtsam/inference/VariableIndex.h</includes>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>VariableIndex.h</name>
    <path>/Users/dellaert/git/gtsam/gtsam/inference/</path>
    <filename>a00494</filename>
    <includes id="a00425" name="Factor.h" local="no" imported="no">gtsam/inference/Factor.h</includes>
    <includes id="a00461" name="Key.h" local="no" imported="no">gtsam/inference/Key.h</includes>
    <includes id="a00038" name="FastMap.h" local="no" imported="no">gtsam/base/FastMap.h</includes>
    <includes id="a00044" name="FastVector.h" local="no" imported="no">gtsam/base/FastVector.h</includes>
    <includes id="a00488" name="VariableIndex-inl.h" local="no" imported="no">gtsam/inference/VariableIndex-inl.h</includes>
    <class kind="class">gtsam::VariableIndex</class>
    <class kind="struct">gtsam::traits&lt; VariableIndex &gt;</class>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>VariableSlots.cpp</name>
    <path>/Users/dellaert/git/gtsam/gtsam/inference/</path>
    <filename>a00497</filename>
    <includes id="a00500" name="VariableSlots.h" local="no" imported="no">gtsam/inference/VariableSlots.h</includes>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>VariableSlots.h</name>
    <path>/Users/dellaert/git/gtsam/gtsam/inference/</path>
    <filename>a00500</filename>
    <includes id="a01076" name="global_includes.h" local="no" imported="no">gtsam/global_includes.h</includes>
    <includes id="a00038" name="FastMap.h" local="no" imported="no">gtsam/base/FastMap.h</includes>
    <includes id="a00044" name="FastVector.h" local="no" imported="no">gtsam/base/FastVector.h</includes>
    <includes id="a00113" name="timing.h" local="no" imported="no">gtsam/base/timing.h</includes>
    <includes id="a00098" name="Testable.h" local="no" imported="no">gtsam/base/Testable.h</includes>
    <class kind="class">gtsam::VariableSlots</class>
    <class kind="struct">gtsam::traits&lt; VariableSlots &gt;</class>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>BinaryJacobianFactor.h</name>
    <path>/Users/dellaert/git/gtsam/gtsam/linear/</path>
    <filename>a00503</filename>
    <includes id="a00605" name="JacobianFactor.h" local="no" imported="no">gtsam/linear/JacobianFactor.h</includes>
    <includes id="a00095" name="SymmetricBlockMatrix.h" local="no" imported="no">gtsam/base/SymmetricBlockMatrix.h</includes>
    <includes id="a00113" name="timing.h" local="no" imported="no">gtsam/base/timing.h</includes>
    <class kind="struct">gtsam::BinaryJacobianFactor</class>
    <class kind="struct">gtsam::traits&lt; BinaryJacobianFactor&lt; M, N1, N2 &gt; &gt;</class>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>ConjugateGradientSolver.h</name>
    <path>/Users/dellaert/git/gtsam/gtsam/linear/</path>
    <filename>a00509</filename>
    <includes id="a00596" name="IterativeSolver.h" local="no" imported="no">gtsam/linear/IterativeSolver.h</includes>
    <class kind="class">gtsam::ConjugateGradientParameters</class>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>Errors.cpp</name>
    <path>/Users/dellaert/git/gtsam/gtsam/linear/</path>
    <filename>a00512</filename>
    <includes id="a00515" name="Errors.h" local="no" imported="no">gtsam/linear/Errors.h</includes>
    <includes id="a00680" name="VectorValues.h" local="no" imported="no">gtsam/linear/VectorValues.h</includes>
    <namespace>gtsam</namespace>
    <member kind="function">
      <type>double</type>
      <name>dot</name>
      <anchorfile>a01405.html</anchorfile>
      <anchor>a106ec458ddb425604809da93346af55d</anchor>
      <arglist>(const Errors &amp;a, const Errors &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>axpy&lt; Errors, Errors &gt;</name>
      <anchorfile>a01405.html</anchorfile>
      <anchor>af191b77091843947b9ae5c413d8caf27</anchor>
      <arglist>(double alpha, const Errors &amp;x, Errors &amp;y)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>a01405.html</anchorfile>
      <anchor>a9528f84279a6f9c18d7d5a444735e57a</anchor>
      <arglist>(const Errors &amp;a, const std::string &amp;s=&quot;Error&quot;)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Errors.h</name>
    <path>/Users/dellaert/git/gtsam/gtsam/linear/</path>
    <filename>a00515</filename>
    <includes id="a00035" name="FastList.h" local="no" imported="no">gtsam/base/FastList.h</includes>
    <includes id="a00128" name="Vector.h" local="no" imported="no">gtsam/base/Vector.h</includes>
    <includes id="a00098" name="Testable.h" local="no" imported="no">gtsam/base/Testable.h</includes>
    <class kind="class">gtsam::Errors</class>
    <class kind="struct">gtsam::traits&lt; Errors &gt;</class>
    <namespace>gtsam</namespace>
    <member kind="function">
      <type>double</type>
      <name>dot</name>
      <anchorfile>a01405.html</anchorfile>
      <anchor>a106ec458ddb425604809da93346af55d</anchor>
      <arglist>(const Errors &amp;a, const Errors &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>GTSAM_EXPORT void</type>
      <name>axpy&lt; Errors, Errors &gt;</name>
      <anchorfile>a01405.html</anchorfile>
      <anchor>a939e1342568a5072310bc7995d3cf383</anchor>
      <arglist>(double alpha, const Errors &amp;x, Errors &amp;y)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>a01405.html</anchorfile>
      <anchor>a9528f84279a6f9c18d7d5a444735e57a</anchor>
      <arglist>(const Errors &amp;a, const std::string &amp;s=&quot;Error&quot;)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>GaussianBayesNet.cpp</name>
    <path>/Users/dellaert/git/gtsam/gtsam/linear/</path>
    <filename>a00518</filename>
    <includes id="a00521" name="GaussianBayesNet.h" local="no" imported="no">gtsam/linear/GaussianBayesNet.h</includes>
    <includes id="a00560" name="GaussianFactorGraph.h" local="no" imported="no">gtsam/linear/GaussianFactorGraph.h</includes>
    <includes id="a00113" name="timing.h" local="no" imported="no">gtsam/base/timing.h</includes>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>GaussianBayesNet.h</name>
    <path>/Users/dellaert/git/gtsam/gtsam/linear/</path>
    <filename>a00521</filename>
    <includes id="a00539" name="GaussianConditional.h" local="no" imported="no">gtsam/linear/GaussianConditional.h</includes>
    <includes id="a00431" name="FactorGraph.h" local="no" imported="no">gtsam/inference/FactorGraph.h</includes>
    <includes id="a01076" name="global_includes.h" local="no" imported="no">gtsam/global_includes.h</includes>
    <class kind="class">gtsam::GaussianBayesNet</class>
    <class kind="struct">gtsam::traits&lt; GaussianBayesNet &gt;</class>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>GaussianBayesTree-inl.h</name>
    <path>/Users/dellaert/git/gtsam/gtsam/linear/</path>
    <filename>a00524</filename>
    <includes id="a00530" name="GaussianBayesTree.h" local="no" imported="no">gtsam/linear/GaussianBayesTree.h</includes>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>GaussianBayesTree.cpp</name>
    <path>/Users/dellaert/git/gtsam/gtsam/linear/</path>
    <filename>a00527</filename>
    <includes id="a00116" name="treeTraversal-inst.h" local="no" imported="no">gtsam/base/treeTraversal-inst.h</includes>
    <includes id="a00392" name="BayesTreeCliqueBase-inst.h" local="no" imported="no">gtsam/inference/BayesTreeCliqueBase-inst.h</includes>
    <includes id="a00614" name="linearAlgorithms-inst.h" local="no" imported="no">gtsam/linear/linearAlgorithms-inst.h</includes>
    <includes id="a00530" name="GaussianBayesTree.h" local="no" imported="no">gtsam/linear/GaussianBayesTree.h</includes>
    <includes id="a00521" name="GaussianBayesNet.h" local="no" imported="no">gtsam/linear/GaussianBayesNet.h</includes>
    <includes id="a00680" name="VectorValues.h" local="no" imported="no">gtsam/linear/VectorValues.h</includes>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>GaussianBayesTree.h</name>
    <path>/Users/dellaert/git/gtsam/gtsam/linear/</path>
    <filename>a00530</filename>
    <includes id="a00521" name="GaussianBayesNet.h" local="no" imported="no">gtsam/linear/GaussianBayesNet.h</includes>
    <includes id="a00560" name="GaussianFactorGraph.h" local="no" imported="no">gtsam/linear/GaussianFactorGraph.h</includes>
    <includes id="a00389" name="BayesTree.h" local="no" imported="no">gtsam/inference/BayesTree.h</includes>
    <includes id="a00395" name="BayesTreeCliqueBase.h" local="no" imported="no">gtsam/inference/BayesTreeCliqueBase.h</includes>
    <class kind="class">gtsam::GaussianBayesTreeClique</class>
    <class kind="class">gtsam::GaussianBayesTree</class>
    <class kind="struct">gtsam::traits&lt; GaussianBayesTree &gt;</class>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>GaussianConditional-inl.h</name>
    <path>/Users/dellaert/git/gtsam/gtsam/linear/</path>
    <filename>a00533</filename>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>GaussianConditional.cpp</name>
    <path>/Users/dellaert/git/gtsam/gtsam/linear/</path>
    <filename>a00536</filename>
    <includes id="a00620" name="linearExceptions.h" local="no" imported="no">gtsam/linear/linearExceptions.h</includes>
    <includes id="a00539" name="GaussianConditional.h" local="no" imported="no">gtsam/linear/GaussianConditional.h</includes>
    <includes id="a00680" name="VectorValues.h" local="no" imported="no">gtsam/linear/VectorValues.h</includes>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>GaussianConditional.h</name>
    <path>/Users/dellaert/git/gtsam/gtsam/linear/</path>
    <filename>a00539</filename>
    <includes id="a01076" name="global_includes.h" local="no" imported="no">gtsam/global_includes.h</includes>
    <includes id="a00605" name="JacobianFactor.h" local="no" imported="no">gtsam/linear/JacobianFactor.h</includes>
    <includes id="a00407" name="Conditional.h" local="no" imported="no">gtsam/inference/Conditional.h</includes>
    <includes id="a00680" name="VectorValues.h" local="no" imported="no">gtsam/linear/VectorValues.h</includes>
    <includes id="a00533" name="GaussianConditional-inl.h" local="no" imported="no">gtsam/linear/GaussianConditional-inl.h</includes>
    <class kind="class">gtsam::GaussianConditional</class>
    <class kind="struct">gtsam::traits&lt; GaussianConditional &gt;</class>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>GaussianDensity.cpp</name>
    <path>/Users/dellaert/git/gtsam/gtsam/linear/</path>
    <filename>a00542</filename>
    <includes id="a00545" name="GaussianDensity.h" local="no" imported="no">gtsam/linear/GaussianDensity.h</includes>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>GaussianDensity.h</name>
    <path>/Users/dellaert/git/gtsam/gtsam/linear/</path>
    <filename>a00545</filename>
    <includes id="a00539" name="GaussianConditional.h" local="no" imported="no">gtsam/linear/GaussianConditional.h</includes>
    <class kind="class">gtsam::GaussianDensity</class>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>GaussianEliminationTree.cpp</name>
    <path>/Users/dellaert/git/gtsam/gtsam/linear/</path>
    <filename>a00548</filename>
    <includes id="a00551" name="GaussianEliminationTree.h" local="no" imported="no">gtsam/linear/GaussianEliminationTree.h</includes>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>GaussianEliminationTree.h</name>
    <path>/Users/dellaert/git/gtsam/gtsam/linear/</path>
    <filename>a00551</filename>
    <includes id="a00521" name="GaussianBayesNet.h" local="no" imported="no">gtsam/linear/GaussianBayesNet.h</includes>
    <includes id="a00560" name="GaussianFactorGraph.h" local="no" imported="no">gtsam/linear/GaussianFactorGraph.h</includes>
    <includes id="a00419" name="EliminationTree.h" local="no" imported="no">gtsam/inference/EliminationTree.h</includes>
    <class kind="class">gtsam::GaussianEliminationTree</class>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>GaussianFactor.h</name>
    <path>/Users/dellaert/git/gtsam/gtsam/linear/</path>
    <filename>a00554</filename>
    <includes id="a00425" name="Factor.h" local="no" imported="no">gtsam/inference/Factor.h</includes>
    <includes id="a00074" name="Matrix.h" local="no" imported="no">gtsam/base/Matrix.h</includes>
    <includes id="a00098" name="Testable.h" local="no" imported="no">gtsam/base/Testable.h</includes>
    <class kind="class">gtsam::GaussianFactor</class>
    <class kind="struct">gtsam::traits&lt; GaussianFactor &gt;</class>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>GaussianFactorGraph.cpp</name>
    <path>/Users/dellaert/git/gtsam/gtsam/linear/</path>
    <filename>a00557</filename>
    <includes id="a00560" name="GaussianFactorGraph.h" local="no" imported="no">gtsam/linear/GaussianFactorGraph.h</includes>
    <includes id="a00680" name="VectorValues.h" local="no" imported="no">gtsam/linear/VectorValues.h</includes>
    <includes id="a00530" name="GaussianBayesTree.h" local="no" imported="no">gtsam/linear/GaussianBayesTree.h</includes>
    <includes id="a00551" name="GaussianEliminationTree.h" local="no" imported="no">gtsam/linear/GaussianEliminationTree.h</includes>
    <includes id="a00572" name="GaussianJunctionTree.h" local="no" imported="no">gtsam/linear/GaussianJunctionTree.h</includes>
    <includes id="a00581" name="HessianFactor.h" local="no" imported="no">gtsam/linear/HessianFactor.h</includes>
    <includes id="a00020" name="debug.h" local="no" imported="no">gtsam/base/debug.h</includes>
    <includes id="a00113" name="timing.h" local="no" imported="no">gtsam/base/timing.h</includes>
    <includes id="a00008" name="cholesky.h" local="no" imported="no">gtsam/base/cholesky.h</includes>
    <namespace>gtsam</namespace>
    <member kind="function">
      <type>bool</type>
      <name>hasConstraints</name>
      <anchorfile>a01405.html</anchorfile>
      <anchor>a35c269c3243cab16a7475239a9c91021</anchor>
      <arglist>(const GaussianFactorGraph &amp;factors)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>GaussianFactorGraph.h</name>
    <path>/Users/dellaert/git/gtsam/gtsam/linear/</path>
    <filename>a00560</filename>
    <includes id="a00431" name="FactorGraph.h" local="no" imported="no">gtsam/inference/FactorGraph.h</includes>
    <includes id="a00413" name="EliminateableFactorGraph.h" local="no" imported="no">gtsam/inference/EliminateableFactorGraph.h</includes>
    <includes id="a00554" name="GaussianFactor.h" local="no" imported="no">gtsam/linear/GaussianFactor.h</includes>
    <includes id="a00605" name="JacobianFactor.h" local="no" imported="no">gtsam/linear/JacobianFactor.h</includes>
    <includes id="a00581" name="HessianFactor.h" local="no" imported="no">gtsam/linear/HessianFactor.h</includes>
    <includes id="a00515" name="Errors.h" local="no" imported="no">gtsam/linear/Errors.h</includes>
    <class kind="struct">gtsam::EliminationTraits&lt; GaussianFactorGraph &gt;</class>
    <class kind="class">gtsam::GaussianFactorGraph</class>
    <class kind="struct">gtsam::traits&lt; GaussianFactorGraph &gt;</class>
    <namespace>gtsam</namespace>
    <member kind="function">
      <type>bool</type>
      <name>hasConstraints</name>
      <anchorfile>a01405.html</anchorfile>
      <anchor>a35c269c3243cab16a7475239a9c91021</anchor>
      <arglist>(const GaussianFactorGraph &amp;factors)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>GaussianJunctionTree.cpp</name>
    <path>/Users/dellaert/git/gtsam/gtsam/linear/</path>
    <filename>a00569</filename>
    <includes id="a00452" name="JunctionTree-inst.h" local="no" imported="no">gtsam/inference/JunctionTree-inst.h</includes>
    <includes id="a00572" name="GaussianJunctionTree.h" local="no" imported="no">gtsam/linear/GaussianJunctionTree.h</includes>
    <includes id="a00551" name="GaussianEliminationTree.h" local="no" imported="no">gtsam/linear/GaussianEliminationTree.h</includes>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>GaussianJunctionTree.h</name>
    <path>/Users/dellaert/git/gtsam/gtsam/linear/</path>
    <filename>a00572</filename>
    <includes id="a00560" name="GaussianFactorGraph.h" local="no" imported="no">gtsam/linear/GaussianFactorGraph.h</includes>
    <includes id="a00530" name="GaussianBayesTree.h" local="no" imported="no">gtsam/linear/GaussianBayesTree.h</includes>
    <includes id="a00455" name="JunctionTree.h" local="no" imported="no">gtsam/inference/JunctionTree.h</includes>
    <class kind="class">gtsam::GaussianJunctionTree</class>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>HessianFactor-inl.h</name>
    <path>/Users/dellaert/git/gtsam/gtsam/linear/</path>
    <filename>a00575</filename>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>HessianFactor.cpp</name>
    <path>/Users/dellaert/git/gtsam/gtsam/linear/</path>
    <filename>a00578</filename>
    <includes id="a00581" name="HessianFactor.h" local="no" imported="no">gtsam/linear/HessianFactor.h</includes>
    <includes id="a00539" name="GaussianConditional.h" local="no" imported="no">gtsam/linear/GaussianConditional.h</includes>
    <includes id="a00554" name="GaussianFactor.h" local="no" imported="no">gtsam/linear/GaussianFactor.h</includes>
    <includes id="a00560" name="GaussianFactorGraph.h" local="no" imported="no">gtsam/linear/GaussianFactorGraph.h</includes>
    <includes id="a00605" name="JacobianFactor.h" local="no" imported="no">gtsam/linear/JacobianFactor.h</includes>
    <includes id="a00620" name="linearExceptions.h" local="no" imported="no">gtsam/linear/linearExceptions.h</includes>
    <includes id="a00008" name="cholesky.h" local="no" imported="no">gtsam/base/cholesky.h</includes>
    <includes id="a00020" name="debug.h" local="no" imported="no">gtsam/base/debug.h</includes>
    <includes id="a00038" name="FastMap.h" local="no" imported="no">gtsam/base/FastMap.h</includes>
    <includes id="a00074" name="Matrix.h" local="no" imported="no">gtsam/base/Matrix.h</includes>
    <includes id="a00107" name="ThreadsafeException.h" local="no" imported="no">gtsam/base/ThreadsafeException.h</includes>
    <includes id="a00113" name="timing.h" local="no" imported="no">gtsam/base/timing.h</includes>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>HessianFactor.h</name>
    <path>/Users/dellaert/git/gtsam/gtsam/linear/</path>
    <filename>a00581</filename>
    <includes id="a00554" name="GaussianFactor.h" local="no" imported="no">gtsam/linear/GaussianFactor.h</includes>
    <includes id="a00656" name="Scatter.h" local="no" imported="no">gtsam/linear/Scatter.h</includes>
    <includes id="a00095" name="SymmetricBlockMatrix.h" local="no" imported="no">gtsam/base/SymmetricBlockMatrix.h</includes>
    <includes id="a00044" name="FastVector.h" local="no" imported="no">gtsam/base/FastVector.h</includes>
    <includes id="a00575" name="HessianFactor-inl.h" local="no" imported="no">gtsam/linear/HessianFactor-inl.h</includes>
    <class kind="class">gtsam::HessianFactor</class>
    <class kind="struct">gtsam::traits&lt; HessianFactor &gt;</class>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>iterative-inl.h</name>
    <path>/Users/dellaert/git/gtsam/gtsam/linear/</path>
    <filename>a00584</filename>
    <includes id="a00590" name="iterative.h" local="no" imported="no">gtsam/linear/iterative.h</includes>
    <includes id="a00509" name="ConjugateGradientSolver.h" local="no" imported="no">gtsam/linear/ConjugateGradientSolver.h</includes>
    <class kind="struct">gtsam::CGState</class>
    <namespace>gtsam</namespace>
    <member kind="function">
      <type>V</type>
      <name>conjugateGradients</name>
      <anchorfile>a01405.html</anchorfile>
      <anchor>a6516ea957c3a22ddf429cefef1fe9486</anchor>
      <arglist>(const S &amp;Ab, V x, const ConjugateGradientParameters &amp;parameters, bool steepest=false)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>iterative.cpp</name>
    <path>/Users/dellaert/git/gtsam/gtsam/linear/</path>
    <filename>a00587</filename>
    <includes id="a00584" name="iterative-inl.h" local="no" imported="no">gtsam/linear/iterative-inl.h</includes>
    <includes id="a00128" name="Vector.h" local="no" imported="no">gtsam/base/Vector.h</includes>
    <includes id="a00074" name="Matrix.h" local="no" imported="no">gtsam/base/Matrix.h</includes>
    <includes id="a00560" name="GaussianFactorGraph.h" local="no" imported="no">gtsam/linear/GaussianFactorGraph.h</includes>
    <includes id="a00596" name="IterativeSolver.h" local="no" imported="no">gtsam/linear/IterativeSolver.h</includes>
    <namespace>gtsam</namespace>
    <member kind="function">
      <type>Vector</type>
      <name>conjugateGradientDescent</name>
      <anchorfile>a01405.html</anchorfile>
      <anchor>ad2b587fde5d35a27d6c88feb4432e785</anchor>
      <arglist>(const System &amp;Ab, const Vector &amp;x, const ConjugateGradientParameters &amp;parameters)</arglist>
    </member>
    <member kind="function">
      <type>Vector</type>
      <name>steepestDescent</name>
      <anchorfile>a01405.html</anchorfile>
      <anchor>aed4b2ca704ddd6530ea70122f883ac88</anchor>
      <arglist>(const Matrix &amp;A, const Vector &amp;b, const Vector &amp;x, const ConjugateGradientParameters &amp;parameters)</arglist>
    </member>
    <member kind="function">
      <type>Vector</type>
      <name>conjugateGradientDescent</name>
      <anchorfile>a01405.html</anchorfile>
      <anchor>af55440f741d8b2f706101f7a79ba7111</anchor>
      <arglist>(const Matrix &amp;A, const Vector &amp;b, const Vector &amp;x, const ConjugateGradientParameters &amp;parameters)</arglist>
    </member>
    <member kind="function">
      <type>VectorValues</type>
      <name>steepestDescent</name>
      <anchorfile>a01405.html</anchorfile>
      <anchor>a81b7af7638d28555c3f404318cc67b22</anchor>
      <arglist>(const GaussianFactorGraph &amp;fg, const VectorValues &amp;x, const ConjugateGradientParameters &amp;parameters)</arglist>
    </member>
    <member kind="function">
      <type>VectorValues</type>
      <name>conjugateGradientDescent</name>
      <anchorfile>a01405.html</anchorfile>
      <anchor>aa84114ad1593684ad739088a2898afdb</anchor>
      <arglist>(const GaussianFactorGraph &amp;fg, const VectorValues &amp;x, const ConjugateGradientParameters &amp;parameters)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>iterative.h</name>
    <path>/Users/dellaert/git/gtsam/gtsam/linear/</path>
    <filename>a00590</filename>
    <includes id="a00074" name="Matrix.h" local="no" imported="no">gtsam/base/Matrix.h</includes>
    <includes id="a00680" name="VectorValues.h" local="no" imported="no">gtsam/linear/VectorValues.h</includes>
    <includes id="a00509" name="ConjugateGradientSolver.h" local="no" imported="no">gtsam/linear/ConjugateGradientSolver.h</includes>
    <includes id="a00584" name="iterative-inl.h" local="no" imported="no">gtsam/linear/iterative-inl.h</includes>
    <class kind="class">gtsam::System</class>
    <namespace>gtsam</namespace>
    <member kind="function">
      <type>V</type>
      <name>conjugateGradients</name>
      <anchorfile>a01405.html</anchorfile>
      <anchor>a6516ea957c3a22ddf429cefef1fe9486</anchor>
      <arglist>(const S &amp;Ab, V x, const ConjugateGradientParameters &amp;parameters, bool steepest=false)</arglist>
    </member>
    <member kind="function">
      <type>GTSAM_EXPORT Vector</type>
      <name>steepestDescent</name>
      <anchorfile>a01405.html</anchorfile>
      <anchor>a37ca85391e3bc671c71b68bc324296f0</anchor>
      <arglist>(const System &amp;Ab, const Vector &amp;x, const IterativeOptimizationParameters &amp;parameters)</arglist>
    </member>
    <member kind="function">
      <type>Vector</type>
      <name>conjugateGradientDescent</name>
      <anchorfile>a01405.html</anchorfile>
      <anchor>ad2b587fde5d35a27d6c88feb4432e785</anchor>
      <arglist>(const System &amp;Ab, const Vector &amp;x, const ConjugateGradientParameters &amp;parameters)</arglist>
    </member>
    <member kind="function">
      <type>Vector</type>
      <name>steepestDescent</name>
      <anchorfile>a01405.html</anchorfile>
      <anchor>aed4b2ca704ddd6530ea70122f883ac88</anchor>
      <arglist>(const Matrix &amp;A, const Vector &amp;b, const Vector &amp;x, const ConjugateGradientParameters &amp;parameters)</arglist>
    </member>
    <member kind="function">
      <type>Vector</type>
      <name>conjugateGradientDescent</name>
      <anchorfile>a01405.html</anchorfile>
      <anchor>af55440f741d8b2f706101f7a79ba7111</anchor>
      <arglist>(const Matrix &amp;A, const Vector &amp;b, const Vector &amp;x, const ConjugateGradientParameters &amp;parameters)</arglist>
    </member>
    <member kind="function">
      <type>VectorValues</type>
      <name>steepestDescent</name>
      <anchorfile>a01405.html</anchorfile>
      <anchor>a81b7af7638d28555c3f404318cc67b22</anchor>
      <arglist>(const GaussianFactorGraph &amp;fg, const VectorValues &amp;x, const ConjugateGradientParameters &amp;parameters)</arglist>
    </member>
    <member kind="function">
      <type>VectorValues</type>
      <name>conjugateGradientDescent</name>
      <anchorfile>a01405.html</anchorfile>
      <anchor>aa84114ad1593684ad739088a2898afdb</anchor>
      <arglist>(const GaussianFactorGraph &amp;fg, const VectorValues &amp;x, const ConjugateGradientParameters &amp;parameters)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>IterativeSolver.cpp</name>
    <path>/Users/dellaert/git/gtsam/gtsam/linear/</path>
    <filename>a00593</filename>
    <includes id="a00596" name="IterativeSolver.h" local="no" imported="no">gtsam/linear/IterativeSolver.h</includes>
    <includes id="a00560" name="GaussianFactorGraph.h" local="no" imported="no">gtsam/linear/GaussianFactorGraph.h</includes>
    <includes id="a00680" name="VectorValues.h" local="no" imported="no">gtsam/linear/VectorValues.h</includes>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>IterativeSolver.h</name>
    <path>/Users/dellaert/git/gtsam/gtsam/linear/</path>
    <filename>a00596</filename>
    <includes id="a00479" name="Ordering.h" local="no" imported="no">gtsam/inference/Ordering.h</includes>
    <includes id="a00128" name="Vector.h" local="no" imported="no">gtsam/base/Vector.h</includes>
    <class kind="class">gtsam::IterativeOptimizationParameters</class>
    <class kind="class">gtsam::IterativeSolver</class>
    <class kind="struct">gtsam::KeyInfoEntry</class>
    <class kind="class">gtsam::KeyInfo</class>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>JacobianFactor.cpp</name>
    <path>/Users/dellaert/git/gtsam/gtsam/linear/</path>
    <filename>a00602</filename>
    <includes id="a00620" name="linearExceptions.h" local="no" imported="no">gtsam/linear/linearExceptions.h</includes>
    <includes id="a00539" name="GaussianConditional.h" local="no" imported="no">gtsam/linear/GaussianConditional.h</includes>
    <includes id="a00605" name="JacobianFactor.h" local="no" imported="no">gtsam/linear/JacobianFactor.h</includes>
    <includes id="a00656" name="Scatter.h" local="no" imported="no">gtsam/linear/Scatter.h</includes>
    <includes id="a00560" name="GaussianFactorGraph.h" local="no" imported="no">gtsam/linear/GaussianFactorGraph.h</includes>
    <includes id="a00680" name="VectorValues.h" local="no" imported="no">gtsam/linear/VectorValues.h</includes>
    <includes id="a00500" name="VariableSlots.h" local="no" imported="no">gtsam/inference/VariableSlots.h</includes>
    <includes id="a00479" name="Ordering.h" local="no" imported="no">gtsam/inference/Ordering.h</includes>
    <includes id="a00020" name="debug.h" local="no" imported="no">gtsam/base/debug.h</includes>
    <includes id="a00113" name="timing.h" local="no" imported="no">gtsam/base/timing.h</includes>
    <includes id="a00074" name="Matrix.h" local="no" imported="no">gtsam/base/Matrix.h</includes>
    <includes id="a00038" name="FastMap.h" local="no" imported="no">gtsam/base/FastMap.h</includes>
    <includes id="a00008" name="cholesky.h" local="no" imported="no">gtsam/base/cholesky.h</includes>
    <namespace>gtsam</namespace>
    <member kind="function">
      <type>std::pair&lt; GaussianConditional::shared_ptr, JacobianFactor::shared_ptr &gt;</type>
      <name>EliminateQR</name>
      <anchorfile>a01405.html</anchorfile>
      <anchor>ab56c4bfa363f8c23c48eb078e9c84a9c</anchor>
      <arglist>(const GaussianFactorGraph &amp;factors, const Ordering &amp;keys)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>JacobianFactor.h</name>
    <path>/Users/dellaert/git/gtsam/gtsam/linear/</path>
    <filename>a00605</filename>
    <includes id="a00554" name="GaussianFactor.h" local="no" imported="no">gtsam/linear/GaussianFactor.h</includes>
    <includes id="a00626" name="NoiseModel.h" local="no" imported="no">gtsam/linear/NoiseModel.h</includes>
    <includes id="a00137" name="VerticalBlockMatrix.h" local="no" imported="no">gtsam/base/VerticalBlockMatrix.h</includes>
    <includes id="a01076" name="global_includes.h" local="no" imported="no">gtsam/global_includes.h</includes>
    <class kind="class">gtsam::JacobianFactor</class>
    <class kind="struct">gtsam::traits&lt; JacobianFactor &gt;</class>
    <namespace>gtsam</namespace>
    <member kind="function">
      <type>std::pair&lt; GaussianConditional::shared_ptr, JacobianFactor::shared_ptr &gt;</type>
      <name>EliminateQR</name>
      <anchorfile>a01405.html</anchorfile>
      <anchor>ab56c4bfa363f8c23c48eb078e9c84a9c</anchor>
      <arglist>(const GaussianFactorGraph &amp;factors, const Ordering &amp;keys)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>KalmanFilter.cpp</name>
    <path>/Users/dellaert/git/gtsam/gtsam/linear/</path>
    <filename>a00608</filename>
    <includes id="a00611" name="KalmanFilter.h" local="no" imported="no">gtsam/linear/KalmanFilter.h</includes>
    <includes id="a00521" name="GaussianBayesNet.h" local="no" imported="no">gtsam/linear/GaussianBayesNet.h</includes>
    <includes id="a00605" name="JacobianFactor.h" local="no" imported="no">gtsam/linear/JacobianFactor.h</includes>
    <includes id="a00581" name="HessianFactor.h" local="no" imported="no">gtsam/linear/HessianFactor.h</includes>
    <includes id="a00098" name="Testable.h" local="no" imported="no">gtsam/base/Testable.h</includes>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>KalmanFilter.h</name>
    <path>/Users/dellaert/git/gtsam/gtsam/linear/</path>
    <filename>a00611</filename>
    <includes id="a00545" name="GaussianDensity.h" local="no" imported="no">gtsam/linear/GaussianDensity.h</includes>
    <includes id="a00560" name="GaussianFactorGraph.h" local="no" imported="no">gtsam/linear/GaussianFactorGraph.h</includes>
    <includes id="a00626" name="NoiseModel.h" local="no" imported="no">gtsam/linear/NoiseModel.h</includes>
    <class kind="class">gtsam::KalmanFilter</class>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>linearAlgorithms-inst.h</name>
    <path>/Users/dellaert/git/gtsam/gtsam/linear/</path>
    <filename>a00614</filename>
    <includes id="a00680" name="VectorValues.h" local="no" imported="no">gtsam/linear/VectorValues.h</includes>
    <includes id="a00539" name="GaussianConditional.h" local="no" imported="no">gtsam/linear/GaussianConditional.h</includes>
    <includes id="a00116" name="treeTraversal-inst.h" local="no" imported="no">gtsam/base/treeTraversal-inst.h</includes>
    <class kind="struct">gtsam::internal::linearAlgorithms::OptimizeData</class>
    <class kind="struct">gtsam::internal::linearAlgorithms::OptimizeClique</class>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>linearExceptions.cpp</name>
    <path>/Users/dellaert/git/gtsam/gtsam/linear/</path>
    <filename>a00617</filename>
    <includes id="a00620" name="linearExceptions.h" local="no" imported="no">gtsam/linear/linearExceptions.h</includes>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>linearExceptions.h</name>
    <path>/Users/dellaert/git/gtsam/gtsam/linear/</path>
    <filename>a00620</filename>
    <includes id="a00107" name="ThreadsafeException.h" local="no" imported="no">gtsam/base/ThreadsafeException.h</includes>
    <includes id="a00119" name="types.h" local="no" imported="no">gtsam/base/types.h</includes>
    <class kind="class">gtsam::IndeterminantLinearSystemException</class>
    <class kind="class">gtsam::InvalidNoiseModel</class>
    <class kind="class">gtsam::InvalidMatrixBlock</class>
    <class kind="class">gtsam::InvalidDenseElimination</class>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>NoiseModel.cpp</name>
    <path>/Users/dellaert/git/gtsam/gtsam/linear/</path>
    <filename>a00623</filename>
    <includes id="a00626" name="NoiseModel.h" local="no" imported="no">gtsam/linear/NoiseModel.h</includes>
    <includes id="a00113" name="timing.h" local="no" imported="no">gtsam/base/timing.h</includes>
    <namespace>gtsam</namespace>
    <namespace>gtsam::noiseModel</namespace>
    <namespace>gtsam::noiseModel::mEstimator</namespace>
  </compound>
  <compound kind="file">
    <name>NoiseModel.h</name>
    <path>/Users/dellaert/git/gtsam/gtsam/linear/</path>
    <filename>a00626</filename>
    <includes id="a00098" name="Testable.h" local="no" imported="no">gtsam/base/Testable.h</includes>
    <includes id="a00074" name="Matrix.h" local="no" imported="no">gtsam/base/Matrix.h</includes>
    <class kind="class">gtsam::noiseModel::Base</class>
    <class kind="class">gtsam::noiseModel::Gaussian</class>
    <class kind="class">gtsam::noiseModel::Diagonal</class>
    <class kind="class">gtsam::noiseModel::Constrained</class>
    <class kind="class">gtsam::noiseModel::Isotropic</class>
    <class kind="class">gtsam::noiseModel::Unit</class>
    <class kind="class">gtsam::noiseModel::mEstimator::Base</class>
    <class kind="class">gtsam::noiseModel::mEstimator::Null</class>
    <class kind="class">gtsam::noiseModel::mEstimator::Fair</class>
    <class kind="class">gtsam::noiseModel::mEstimator::Huber</class>
    <class kind="class">gtsam::noiseModel::mEstimator::Cauchy</class>
    <class kind="class">gtsam::noiseModel::mEstimator::Tukey</class>
    <class kind="class">gtsam::noiseModel::mEstimator::Welsh</class>
    <class kind="class">gtsam::noiseModel::mEstimator::GemanMcClure</class>
    <class kind="class">gtsam::noiseModel::mEstimator::DCS</class>
    <class kind="class">gtsam::noiseModel::mEstimator::L2WithDeadZone</class>
    <class kind="class">gtsam::noiseModel::Robust</class>
    <class kind="struct">gtsam::traits&lt; noiseModel::Gaussian &gt;</class>
    <class kind="struct">gtsam::traits&lt; noiseModel::Diagonal &gt;</class>
    <class kind="struct">gtsam::traits&lt; noiseModel::Constrained &gt;</class>
    <class kind="struct">gtsam::traits&lt; noiseModel::Isotropic &gt;</class>
    <class kind="struct">gtsam::traits&lt; noiseModel::Unit &gt;</class>
    <namespace>gtsam</namespace>
    <namespace>gtsam::noiseModel</namespace>
    <namespace>gtsam::noiseModel::mEstimator</namespace>
    <member kind="typedef">
      <type>noiseModel::Base::shared_ptr</type>
      <name>SharedNoiseModel</name>
      <anchorfile>a01405.html</anchorfile>
      <anchor>ab6e5a4884342656e0837ef07008ec03f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>RegularHessianFactor.h</name>
    <path>/Users/dellaert/git/gtsam/gtsam/linear/</path>
    <filename>a00641</filename>
    <includes id="a00581" name="HessianFactor.h" local="no" imported="no">gtsam/linear/HessianFactor.h</includes>
    <includes id="a00644" name="RegularJacobianFactor.h" local="no" imported="no">gtsam/linear/RegularJacobianFactor.h</includes>
    <class kind="class">gtsam::RegularHessianFactor</class>
    <class kind="struct">gtsam::traits&lt; RegularHessianFactor&lt; D &gt; &gt;</class>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>RegularJacobianFactor.h</name>
    <path>/Users/dellaert/git/gtsam/gtsam/linear/</path>
    <filename>a00644</filename>
    <includes id="a00605" name="JacobianFactor.h" local="no" imported="no">gtsam/linear/JacobianFactor.h</includes>
    <includes id="a00680" name="VectorValues.h" local="no" imported="no">gtsam/linear/VectorValues.h</includes>
    <class kind="class">gtsam::RegularJacobianFactor</class>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>Sampler.cpp</name>
    <path>/Users/dellaert/git/gtsam/gtsam/linear/</path>
    <filename>a00647</filename>
    <includes id="a00650" name="Sampler.h" local="no" imported="no">gtsam/linear/Sampler.h</includes>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>Sampler.h</name>
    <path>/Users/dellaert/git/gtsam/gtsam/linear/</path>
    <filename>a00650</filename>
    <includes id="a00626" name="NoiseModel.h" local="no" imported="no">gtsam/linear/NoiseModel.h</includes>
    <class kind="class">gtsam::Sampler</class>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>Scatter.cpp</name>
    <path>/Users/dellaert/git/gtsam/gtsam/linear/</path>
    <filename>a00653</filename>
    <includes id="a00560" name="GaussianFactorGraph.h" local="no" imported="no">gtsam/linear/GaussianFactorGraph.h</includes>
    <includes id="a00656" name="Scatter.h" local="no" imported="no">gtsam/linear/Scatter.h</includes>
    <includes id="a00479" name="Ordering.h" local="no" imported="no">gtsam/inference/Ordering.h</includes>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>Scatter.h</name>
    <path>/Users/dellaert/git/gtsam/gtsam/linear/</path>
    <filename>a00656</filename>
    <includes id="a00461" name="Key.h" local="no" imported="no">gtsam/inference/Key.h</includes>
    <includes id="a00038" name="FastMap.h" local="no" imported="no">gtsam/base/FastMap.h</includes>
    <class kind="struct">gtsam::SlotEntry</class>
    <class kind="class">gtsam::Scatter</class>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>SubgraphBuilder.cpp</name>
    <path>/Users/dellaert/git/gtsam/gtsam/linear/</path>
    <filename>a00659</filename>
    <includes id="a00029" name="DSFVector.h" local="no" imported="no">gtsam/base/DSFVector.h</includes>
    <includes id="a00038" name="FastMap.h" local="no" imported="no">gtsam/base/FastMap.h</includes>
    <includes id="a00479" name="Ordering.h" local="no" imported="no">gtsam/inference/Ordering.h</includes>
    <includes id="a00494" name="VariableIndex.h" local="no" imported="no">gtsam/inference/VariableIndex.h</includes>
    <includes id="a00515" name="Errors.h" local="no" imported="no">gtsam/linear/Errors.h</includes>
    <includes id="a00560" name="GaussianFactorGraph.h" local="no" imported="no">gtsam/linear/GaussianFactorGraph.h</includes>
    <includes id="a00662" name="SubgraphBuilder.h" local="no" imported="no">gtsam/linear/SubgraphBuilder.h</includes>
    <namespace>gtsam</namespace>
    <member kind="function">
      <type>GaussianFactorGraph::shared_ptr</type>
      <name>buildFactorSubgraph</name>
      <anchorfile>a01405.html</anchorfile>
      <anchor>ac06ac82e22341b1b9fdcd4c67280f619</anchor>
      <arglist>(const GaussianFactorGraph &amp;gfg, const Subgraph &amp;subgraph, const bool clone)</arglist>
    </member>
    <member kind="function">
      <type>std::pair&lt; GaussianFactorGraph::shared_ptr, GaussianFactorGraph::shared_ptr &gt;</type>
      <name>splitFactorGraph</name>
      <anchorfile>a01405.html</anchorfile>
      <anchor>ab3749ce0f63e205e55daa615aa1fd74a</anchor>
      <arglist>(const GaussianFactorGraph &amp;factorGraph, const Subgraph &amp;subgraph)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>SubgraphBuilder.h</name>
    <path>/Users/dellaert/git/gtsam/gtsam/linear/</path>
    <filename>a00662</filename>
    <includes id="a00038" name="FastMap.h" local="no" imported="no">gtsam/base/FastMap.h</includes>
    <includes id="a00119" name="types.h" local="no" imported="no">gtsam/base/types.h</includes>
    <class kind="class">gtsam::Subgraph</class>
    <class kind="struct">gtsam::Subgraph::Edge</class>
    <class kind="struct">gtsam::SubgraphBuilderParameters</class>
    <class kind="class">gtsam::SubgraphBuilder</class>
    <namespace>gtsam</namespace>
    <member kind="function">
      <type>GaussianFactorGraph::shared_ptr</type>
      <name>buildFactorSubgraph</name>
      <anchorfile>a01405.html</anchorfile>
      <anchor>ac06ac82e22341b1b9fdcd4c67280f619</anchor>
      <arglist>(const GaussianFactorGraph &amp;gfg, const Subgraph &amp;subgraph, const bool clone)</arglist>
    </member>
    <member kind="function">
      <type>std::pair&lt; GaussianFactorGraph::shared_ptr, GaussianFactorGraph::shared_ptr &gt;</type>
      <name>splitFactorGraph</name>
      <anchorfile>a01405.html</anchorfile>
      <anchor>ab3749ce0f63e205e55daa615aa1fd74a</anchor>
      <arglist>(const GaussianFactorGraph &amp;factorGraph, const Subgraph &amp;subgraph)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>SubgraphPreconditioner.cpp</name>
    <path>/Users/dellaert/git/gtsam/gtsam/linear/</path>
    <filename>a00665</filename>
    <includes id="a00668" name="SubgraphPreconditioner.h" local="no" imported="no">gtsam/linear/SubgraphPreconditioner.h</includes>
    <includes id="a00662" name="SubgraphBuilder.h" local="no" imported="no">gtsam/linear/SubgraphBuilder.h</includes>
    <includes id="a00560" name="GaussianFactorGraph.h" local="no" imported="no">gtsam/linear/GaussianFactorGraph.h</includes>
    <includes id="a00521" name="GaussianBayesNet.h" local="no" imported="no">gtsam/linear/GaussianBayesNet.h</includes>
    <includes id="a00605" name="JacobianFactor.h" local="no" imported="no">gtsam/linear/JacobianFactor.h</includes>
    <includes id="a00119" name="types.h" local="no" imported="no">gtsam/base/types.h</includes>
    <includes id="a00128" name="Vector.h" local="no" imported="no">gtsam/base/Vector.h</includes>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>SubgraphPreconditioner.h</name>
    <path>/Users/dellaert/git/gtsam/gtsam/linear/</path>
    <filename>a00668</filename>
    <includes id="a00662" name="SubgraphBuilder.h" local="no" imported="no">gtsam/linear/SubgraphBuilder.h</includes>
    <includes id="a00515" name="Errors.h" local="no" imported="no">gtsam/linear/Errors.h</includes>
    <includes id="a00596" name="IterativeSolver.h" local="no" imported="no">gtsam/linear/IterativeSolver.h</includes>
    <includes id="a00680" name="VectorValues.h" local="no" imported="no">gtsam/linear/VectorValues.h</includes>
    <class kind="struct">gtsam::SubgraphPreconditionerParameters</class>
    <class kind="class">gtsam::SubgraphPreconditioner</class>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>SubgraphSolver.cpp</name>
    <path>/Users/dellaert/git/gtsam/gtsam/linear/</path>
    <filename>a00671</filename>
    <includes id="a00674" name="SubgraphSolver.h" local="no" imported="no">gtsam/linear/SubgraphSolver.h</includes>
    <includes id="a00662" name="SubgraphBuilder.h" local="no" imported="no">gtsam/linear/SubgraphBuilder.h</includes>
    <includes id="a00521" name="GaussianBayesNet.h" local="no" imported="no">gtsam/linear/GaussianBayesNet.h</includes>
    <includes id="a00584" name="iterative-inl.h" local="no" imported="no">gtsam/linear/iterative-inl.h</includes>
    <includes id="a00560" name="GaussianFactorGraph.h" local="no" imported="no">gtsam/linear/GaussianFactorGraph.h</includes>
    <includes id="a00668" name="SubgraphPreconditioner.h" local="no" imported="no">gtsam/linear/SubgraphPreconditioner.h</includes>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>SubgraphSolver.h</name>
    <path>/Users/dellaert/git/gtsam/gtsam/linear/</path>
    <filename>a00674</filename>
    <includes id="a00509" name="ConjugateGradientSolver.h" local="no" imported="no">gtsam/linear/ConjugateGradientSolver.h</includes>
    <includes id="a00662" name="SubgraphBuilder.h" local="no" imported="no">gtsam/linear/SubgraphBuilder.h</includes>
    <class kind="struct">gtsam::SubgraphSolverParameters</class>
    <class kind="class">gtsam::SubgraphSolver</class>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>VectorValues.cpp</name>
    <path>/Users/dellaert/git/gtsam/gtsam/linear/</path>
    <filename>a00677</filename>
    <includes id="a00680" name="VectorValues.h" local="no" imported="no">gtsam/linear/VectorValues.h</includes>
    <namespace>gtsam</namespace>
    <member kind="function">
      <type>VectorValues</type>
      <name>operator *</name>
      <anchorfile>a01405.html</anchorfile>
      <anchor>a8642fff45e2183c3ef9c89dad06d73e7</anchor>
      <arglist>(const double a, const VectorValues &amp;v)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>VectorValues.h</name>
    <path>/Users/dellaert/git/gtsam/gtsam/linear/</path>
    <filename>a00680</filename>
    <includes id="a00656" name="Scatter.h" local="no" imported="no">gtsam/linear/Scatter.h</includes>
    <includes id="a00479" name="Ordering.h" local="no" imported="no">gtsam/inference/Ordering.h</includes>
    <includes id="a00128" name="Vector.h" local="no" imported="no">gtsam/base/Vector.h</includes>
    <includes id="a00044" name="FastVector.h" local="no" imported="no">gtsam/base/FastVector.h</includes>
    <includes id="a01076" name="global_includes.h" local="no" imported="no">gtsam/global_includes.h</includes>
    <class kind="class">gtsam::VectorValues</class>
    <class kind="struct">gtsam::traits&lt; VectorValues &gt;</class>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>AHRSFactor.cpp</name>
    <path>/Users/dellaert/git/gtsam/gtsam/navigation/</path>
    <filename>a00683</filename>
    <includes id="a00686" name="AHRSFactor.h" local="no" imported="no">gtsam/navigation/AHRSFactor.h</includes>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>AHRSFactor.h</name>
    <path>/Users/dellaert/git/gtsam/gtsam/navigation/</path>
    <filename>a00686</filename>
    <includes id="a00737" name="PreintegratedRotation.h" local="no" imported="no">gtsam/navigation/PreintegratedRotation.h</includes>
    <includes id="a00881" name="NonlinearFactor.h" local="no" imported="no">gtsam/nonlinear/NonlinearFactor.h</includes>
    <includes id="a00317" name="Pose3.h" local="no" imported="no">gtsam/geometry/Pose3.h</includes>
    <class kind="class">gtsam::PreintegratedAhrsMeasurements</class>
    <class kind="class">gtsam::AHRSFactor</class>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>AttitudeFactor.cpp</name>
    <path>/Users/dellaert/git/gtsam/gtsam/navigation/</path>
    <filename>a00689</filename>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>CombinedImuFactor.cpp</name>
    <path>/Users/dellaert/git/gtsam/gtsam/navigation/</path>
    <filename>a00695</filename>
    <includes id="a00698" name="CombinedImuFactor.h" local="no" imported="no">gtsam/navigation/CombinedImuFactor.h</includes>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>CombinedImuFactor.h</name>
    <path>/Users/dellaert/git/gtsam/gtsam/navigation/</path>
    <filename>a00698</filename>
    <includes id="a00725" name="ManifoldPreintegration.h" local="no" imported="no">gtsam/navigation/ManifoldPreintegration.h</includes>
    <includes id="a00764" name="TangentPreintegration.h" local="no" imported="no">gtsam/navigation/TangentPreintegration.h</includes>
    <includes id="a00881" name="NonlinearFactor.h" local="no" imported="no">gtsam/nonlinear/NonlinearFactor.h</includes>
    <includes id="a00074" name="Matrix.h" local="no" imported="no">gtsam/base/Matrix.h</includes>
    <class kind="class">gtsam::PreintegratedCombinedMeasurements</class>
    <class kind="struct">gtsam::PreintegratedCombinedMeasurements::Params</class>
    <class kind="class">gtsam::CombinedImuFactor</class>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>GPSFactor.cpp</name>
    <path>/Users/dellaert/git/gtsam/gtsam/navigation/</path>
    <filename>a00701</filename>
    <includes id="a00704" name="GPSFactor.h" local="yes" imported="no">GPSFactor.h</includes>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>GPSFactor.h</name>
    <path>/Users/dellaert/git/gtsam/gtsam/navigation/</path>
    <filename>a00704</filename>
    <includes id="a00881" name="NonlinearFactor.h" local="no" imported="no">gtsam/nonlinear/NonlinearFactor.h</includes>
    <includes id="a00731" name="NavState.h" local="no" imported="no">gtsam/navigation/NavState.h</includes>
    <includes id="a00317" name="Pose3.h" local="no" imported="no">gtsam/geometry/Pose3.h</includes>
    <class kind="class">gtsam::GPSFactor</class>
    <class kind="class">gtsam::GPSFactor2</class>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>ImuBias.cpp</name>
    <path>/Users/dellaert/git/gtsam/gtsam/navigation/</path>
    <filename>a00707</filename>
    <includes id="a00710" name="ImuBias.h" local="yes" imported="no">ImuBias.h</includes>
    <includes id="a00305" name="Point3.h" local="no" imported="no">gtsam/geometry/Point3.h</includes>
    <namespace>gtsam</namespace>
    <namespace>gtsam::imuBias</namespace>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a01428.html</anchorfile>
      <anchor>a731f2f9b1d672556d577d9ba42d0231c</anchor>
      <arglist>(std::ostream &amp;os, const ConstantBias &amp;bias)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>ImuBias.h</name>
    <path>/Users/dellaert/git/gtsam/gtsam/navigation/</path>
    <filename>a00710</filename>
    <includes id="a00080" name="OptionalJacobian.h" local="no" imported="no">gtsam/base/OptionalJacobian.h</includes>
    <class kind="class">gtsam::imuBias::ConstantBias</class>
    <class kind="struct">gtsam::traits&lt; imuBias::ConstantBias &gt;</class>
    <namespace>gtsam</namespace>
    <namespace>gtsam::imuBias</namespace>
  </compound>
  <compound kind="file">
    <name>ImuFactor.cpp</name>
    <path>/Users/dellaert/git/gtsam/gtsam/navigation/</path>
    <filename>a00713</filename>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>MagFactor.h</name>
    <path>/Users/dellaert/git/gtsam/gtsam/navigation/</path>
    <filename>a00719</filename>
    <includes id="a00881" name="NonlinearFactor.h" local="no" imported="no">gtsam/nonlinear/NonlinearFactor.h</includes>
    <includes id="a00326" name="Rot2.h" local="no" imported="no">gtsam/geometry/Rot2.h</includes>
    <includes id="a00332" name="Rot3.h" local="no" imported="no">gtsam/geometry/Rot3.h</includes>
    <class kind="class">gtsam::MagFactor</class>
    <class kind="class">gtsam::MagFactor1</class>
    <class kind="class">gtsam::MagFactor2</class>
    <class kind="class">gtsam::MagFactor3</class>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>ManifoldPreintegration.cpp</name>
    <path>/Users/dellaert/git/gtsam/gtsam/navigation/</path>
    <filename>a00722</filename>
    <includes id="a00725" name="ManifoldPreintegration.h" local="yes" imported="no">ManifoldPreintegration.h</includes>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>ManifoldPreintegration.h</name>
    <path>/Users/dellaert/git/gtsam/gtsam/navigation/</path>
    <filename>a00725</filename>
    <includes id="a00731" name="NavState.h" local="no" imported="no">gtsam/navigation/NavState.h</includes>
    <includes id="a00743" name="PreintegrationBase.h" local="no" imported="no">gtsam/navigation/PreintegrationBase.h</includes>
    <class kind="class">gtsam::ManifoldPreintegration</class>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>NavState.h</name>
    <path>/Users/dellaert/git/gtsam/gtsam/navigation/</path>
    <filename>a00731</filename>
    <includes id="a00317" name="Pose3.h" local="no" imported="no">gtsam/geometry/Pose3.h</includes>
    <includes id="a00128" name="Vector.h" local="no" imported="no">gtsam/base/Vector.h</includes>
    <includes id="a00068" name="Manifold.h" local="no" imported="no">gtsam/base/Manifold.h</includes>
    <class kind="class">gtsam::NavState</class>
    <class kind="struct">gtsam::traits&lt; NavState &gt;</class>
    <namespace>gtsam</namespace>
    <member kind="typedef">
      <type>Vector3</type>
      <name>Velocity3</name>
      <anchorfile>a01405.html</anchorfile>
      <anchor>ad6ba0a40d5dd8936f4ca53f7bb3ef53b</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>PreintegratedRotation.cpp</name>
    <path>/Users/dellaert/git/gtsam/gtsam/navigation/</path>
    <filename>a00734</filename>
    <includes id="a00737" name="PreintegratedRotation.h" local="yes" imported="no">PreintegratedRotation.h</includes>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>PreintegratedRotation.h</name>
    <path>/Users/dellaert/git/gtsam/gtsam/navigation/</path>
    <filename>a00737</filename>
    <includes id="a00317" name="Pose3.h" local="no" imported="no">gtsam/geometry/Pose3.h</includes>
    <includes id="a00074" name="Matrix.h" local="no" imported="no">gtsam/base/Matrix.h</includes>
    <class kind="struct">gtsam::PreintegratedRotationParams</class>
    <class kind="class">gtsam::PreintegratedRotation</class>
    <class kind="struct">gtsam::traits&lt; PreintegratedRotation &gt;</class>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>PreintegrationBase.h</name>
    <path>/Users/dellaert/git/gtsam/gtsam/navigation/</path>
    <filename>a00743</filename>
    <includes id="a00749" name="PreintegrationParams.h" local="no" imported="no">gtsam/navigation/PreintegrationParams.h</includes>
    <includes id="a00731" name="NavState.h" local="no" imported="no">gtsam/navigation/NavState.h</includes>
    <includes id="a00710" name="ImuBias.h" local="no" imported="no">gtsam/navigation/ImuBias.h</includes>
    <includes id="a00626" name="NoiseModel.h" local="no" imported="no">gtsam/linear/NoiseModel.h</includes>
    <class kind="class">gtsam::PreintegrationBase</class>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>PreintegrationParams.h</name>
    <path>/Users/dellaert/git/gtsam/gtsam/navigation/</path>
    <filename>a00749</filename>
    <includes id="a00737" name="PreintegratedRotation.h" local="no" imported="no">gtsam/navigation/PreintegratedRotation.h</includes>
    <class kind="struct">gtsam::PreintegrationParams</class>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>Scenario.h</name>
    <path>/Users/dellaert/git/gtsam/gtsam/navigation/</path>
    <filename>a00752</filename>
    <includes id="a00626" name="NoiseModel.h" local="no" imported="no">gtsam/linear/NoiseModel.h</includes>
    <includes id="a00731" name="NavState.h" local="no" imported="no">gtsam/navigation/NavState.h</includes>
    <class kind="class">gtsam::Scenario</class>
    <class kind="class">gtsam::ConstantTwistScenario</class>
    <class kind="class">gtsam::AcceleratingScenario</class>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>ScenarioRunner.h</name>
    <path>/Users/dellaert/git/gtsam/gtsam/navigation/</path>
    <filename>a00758</filename>
    <includes id="a00752" name="Scenario.h" local="no" imported="no">gtsam/navigation/Scenario.h</includes>
    <includes id="a00650" name="Sampler.h" local="no" imported="no">gtsam/linear/Sampler.h</includes>
    <class kind="class">gtsam::ScenarioRunner</class>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>TangentPreintegration.cpp</name>
    <path>/Users/dellaert/git/gtsam/gtsam/navigation/</path>
    <filename>a00761</filename>
    <includes id="a00764" name="TangentPreintegration.h" local="yes" imported="no">TangentPreintegration.h</includes>
    <includes id="a00077" name="numericalDerivative.h" local="no" imported="no">gtsam/base/numericalDerivative.h</includes>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>TangentPreintegration.h</name>
    <path>/Users/dellaert/git/gtsam/gtsam/navigation/</path>
    <filename>a00764</filename>
    <includes id="a00743" name="PreintegrationBase.h" local="no" imported="no">gtsam/navigation/PreintegrationBase.h</includes>
    <class kind="class">gtsam::TangentPreintegration</class>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>AdaptAutoDiff.h</name>
    <path>/Users/dellaert/git/gtsam/gtsam/nonlinear/</path>
    <filename>a00767</filename>
    <includes id="a00080" name="OptionalJacobian.h" local="no" imported="no">gtsam/base/OptionalJacobian.h</includes>
    <class kind="class">gtsam::AdaptAutoDiff</class>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>DoglegOptimizer.cpp</name>
    <path>/Users/dellaert/git/gtsam/gtsam/nonlinear/</path>
    <filename>a00770</filename>
    <includes id="a00773" name="DoglegOptimizer.h" local="no" imported="no">gtsam/nonlinear/DoglegOptimizer.h</includes>
    <includes id="a00779" name="DoglegOptimizerImpl.h" local="no" imported="no">gtsam/nonlinear/DoglegOptimizerImpl.h</includes>
    <includes id="a00530" name="GaussianBayesTree.h" local="no" imported="no">gtsam/linear/GaussianBayesTree.h</includes>
    <includes id="a00521" name="GaussianBayesNet.h" local="no" imported="no">gtsam/linear/GaussianBayesNet.h</includes>
    <includes id="a00560" name="GaussianFactorGraph.h" local="no" imported="no">gtsam/linear/GaussianFactorGraph.h</includes>
    <includes id="a00680" name="VectorValues.h" local="no" imported="no">gtsam/linear/VectorValues.h</includes>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>DoglegOptimizer.h</name>
    <path>/Users/dellaert/git/gtsam/gtsam/nonlinear/</path>
    <filename>a00773</filename>
    <includes id="a00899" name="NonlinearOptimizer.h" local="no" imported="no">gtsam/nonlinear/NonlinearOptimizer.h</includes>
    <class kind="class">gtsam::DoglegParams</class>
    <class kind="class">gtsam::DoglegOptimizer</class>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>DoglegOptimizerImpl.h</name>
    <path>/Users/dellaert/git/gtsam/gtsam/nonlinear/</path>
    <filename>a00779</filename>
    <includes id="a00680" name="VectorValues.h" local="no" imported="no">gtsam/linear/VectorValues.h</includes>
    <includes id="a00479" name="Ordering.h" local="no" imported="no">gtsam/inference/Ordering.h</includes>
    <class kind="struct">gtsam::DoglegOptimizerImpl</class>
    <class kind="struct">gtsam::DoglegOptimizerImpl::IterationResult</class>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>Expression-inl.h</name>
    <path>/Users/dellaert/git/gtsam/gtsam/nonlinear/</path>
    <filename>a00782</filename>
    <class kind="struct">gtsam::internal::apply_compose</class>
    <namespace>gtsam</namespace>
    <member kind="function">
      <type>Expression&lt; T &gt;</type>
      <name>operator *</name>
      <anchorfile>a01405.html</anchorfile>
      <anchor>aadcda1e5ed09d0ccc00a183c433cf276</anchor>
      <arglist>(const Expression&lt; T &gt; &amp;expression1, const Expression&lt; T &gt; &amp;expression2)</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; Expression&lt; T &gt; &gt;</type>
      <name>createUnknowns</name>
      <anchorfile>a01405.html</anchorfile>
      <anchor>a51881c20dd5ecdd129cb993ea8374846</anchor>
      <arglist>(size_t n, char c, size_t start)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Expression.h</name>
    <path>/Users/dellaert/git/gtsam/gtsam/nonlinear/</path>
    <filename>a00785</filename>
    <includes id="a00080" name="OptionalJacobian.h" local="no" imported="no">gtsam/base/OptionalJacobian.h</includes>
    <includes id="a00782" name="Expression-inl.h" local="no" imported="no">gtsam/nonlinear/Expression-inl.h</includes>
    <class kind="class">gtsam::ExpressionFactor</class>
    <class kind="class">gtsam::internal::ExecutionTrace</class>
    <class kind="class">gtsam::internal::ExpressionNode</class>
    <class kind="class">gtsam::Expression</class>
    <class kind="struct">gtsam::Expression::UnaryFunction</class>
    <class kind="struct">gtsam::Expression::BinaryFunction</class>
    <class kind="struct">gtsam::Expression::TernaryFunction</class>
    <class kind="class">gtsam::ScalarMultiplyExpression</class>
    <class kind="class">gtsam::BinarySumExpression</class>
    <namespace>gtsam</namespace>
    <member kind="function">
      <type>Expression&lt; T &gt;</type>
      <name>linearExpression</name>
      <anchorfile>a01405.html</anchorfile>
      <anchor>a1c5b3189d1acf0a9d5430da3d38f7d22</anchor>
      <arglist>(const boost::function&lt; T(A)&gt; &amp;f, const Expression&lt; A &gt; &amp;expression, const Eigen::Matrix&lt; double, traits&lt; T &gt;::dimension, traits&lt; A &gt;::dimension &gt; &amp;dTdA)</arglist>
    </member>
    <member kind="function">
      <type>ScalarMultiplyExpression&lt; T &gt;</type>
      <name>operator *</name>
      <anchorfile>a01405.html</anchorfile>
      <anchor>a4774c1a3e44d16397eed13e858e1dda0</anchor>
      <arglist>(double s, const Expression&lt; T &gt; &amp;e)</arglist>
    </member>
    <member kind="function">
      <type>BinarySumExpression&lt; T &gt;</type>
      <name>operator+</name>
      <anchorfile>a01405.html</anchorfile>
      <anchor>aa87d0a607d22cf7617f62f4c5ade2dd7</anchor>
      <arglist>(const Expression&lt; T &gt; &amp;e1, const Expression&lt; T &gt; &amp;e2)</arglist>
    </member>
    <member kind="function">
      <type>BinarySumExpression&lt; T &gt;</type>
      <name>operator-</name>
      <anchorfile>a01405.html</anchorfile>
      <anchor>a494dda5886b1842625162e587f92f4c6</anchor>
      <arglist>(const Expression&lt; T &gt; &amp;e1, const Expression&lt; T &gt; &amp;e2)</arglist>
    </member>
    <member kind="function">
      <type>Expression&lt; T &gt;</type>
      <name>operator *</name>
      <anchorfile>a01405.html</anchorfile>
      <anchor>aadcda1e5ed09d0ccc00a183c433cf276</anchor>
      <arglist>(const Expression&lt; T &gt; &amp;expression1, const Expression&lt; T &gt; &amp;expression2)</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; Expression&lt; T &gt; &gt;</type>
      <name>createUnknowns</name>
      <anchorfile>a01405.html</anchorfile>
      <anchor>a51881c20dd5ecdd129cb993ea8374846</anchor>
      <arglist>(size_t n, char c, size_t start)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>ExpressionFactorGraph.h</name>
    <path>/Users/dellaert/git/gtsam/gtsam/nonlinear/</path>
    <filename>a00791</filename>
    <includes id="a00887" name="NonlinearFactorGraph.h" local="no" imported="no">gtsam/nonlinear/NonlinearFactorGraph.h</includes>
    <class kind="class">gtsam::ExpressionFactorGraph</class>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>expressionTesting.h</name>
    <path>/Users/dellaert/git/gtsam/gtsam/nonlinear/</path>
    <filename>a00797</filename>
    <includes id="a00806" name="factorTesting.h" local="no" imported="no">gtsam/nonlinear/factorTesting.h</includes>
    <includes id="a00098" name="Testable.h" local="no" imported="no">gtsam/base/Testable.h</includes>
    <namespace>gtsam</namespace>
    <member kind="define">
      <type>#define</type>
      <name>EXPECT_CORRECT_EXPRESSION_JACOBIANS</name>
      <anchorfile>a00797.html</anchorfile>
      <anchor>a701d0cd12b81a725f7f9cd2432fe9e2a</anchor>
      <arglist>(expression, values, numerical_derivative_step, tolerance)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>ExtendedKalmanFilter-inl.h</name>
    <path>/Users/dellaert/git/gtsam/gtsam/nonlinear/</path>
    <filename>a00800</filename>
    <includes id="a00803" name="ExtendedKalmanFilter.h" local="no" imported="no">gtsam/nonlinear/ExtendedKalmanFilter.h</includes>
    <includes id="a00881" name="NonlinearFactor.h" local="no" imported="no">gtsam/nonlinear/NonlinearFactor.h</includes>
    <includes id="a00521" name="GaussianBayesNet.h" local="no" imported="no">gtsam/linear/GaussianBayesNet.h</includes>
    <includes id="a00560" name="GaussianFactorGraph.h" local="no" imported="no">gtsam/linear/GaussianFactorGraph.h</includes>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>ExtendedKalmanFilter.h</name>
    <path>/Users/dellaert/git/gtsam/gtsam/nonlinear/</path>
    <filename>a00803</filename>
    <includes id="a00887" name="NonlinearFactorGraph.h" local="no" imported="no">gtsam/nonlinear/NonlinearFactorGraph.h</includes>
    <includes id="a00881" name="NonlinearFactor.h" local="no" imported="no">gtsam/nonlinear/NonlinearFactor.h</includes>
    <includes id="a00800" name="ExtendedKalmanFilter-inl.h" local="no" imported="no">gtsam/nonlinear/ExtendedKalmanFilter-inl.h</includes>
    <class kind="class">gtsam::ExtendedKalmanFilter</class>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>factorTesting.h</name>
    <path>/Users/dellaert/git/gtsam/gtsam/nonlinear/</path>
    <filename>a00806</filename>
    <includes id="a00881" name="NonlinearFactor.h" local="no" imported="no">gtsam/nonlinear/NonlinearFactor.h</includes>
    <includes id="a00077" name="numericalDerivative.h" local="no" imported="no">gtsam/base/numericalDerivative.h</includes>
    <namespace>gtsam</namespace>
    <member kind="define">
      <type>#define</type>
      <name>EXPECT_CORRECT_FACTOR_JACOBIANS</name>
      <anchorfile>a00806.html</anchorfile>
      <anchor>a8ec37fe83eda47404b8588e1f012df21</anchor>
      <arglist>(factor, values, numerical_derivative_step, tolerance)</arglist>
    </member>
    <member kind="function">
      <type>JacobianFactor</type>
      <name>linearizeNumerically</name>
      <anchorfile>a01405.html</anchorfile>
      <anchor>a9753b4e62378151d30bf8af5e2fc1602</anchor>
      <arglist>(const NoiseModelFactor &amp;factor, const Values &amp;values, double delta=1e-5)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>GaussNewtonOptimizer.cpp</name>
    <path>/Users/dellaert/git/gtsam/gtsam/nonlinear/</path>
    <filename>a00809</filename>
    <includes id="a00812" name="GaussNewtonOptimizer.h" local="no" imported="no">gtsam/nonlinear/GaussNewtonOptimizer.h</includes>
    <includes id="a00560" name="GaussianFactorGraph.h" local="no" imported="no">gtsam/linear/GaussianFactorGraph.h</includes>
    <includes id="a00680" name="VectorValues.h" local="no" imported="no">gtsam/linear/VectorValues.h</includes>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>GaussNewtonOptimizer.h</name>
    <path>/Users/dellaert/git/gtsam/gtsam/nonlinear/</path>
    <filename>a00812</filename>
    <includes id="a00899" name="NonlinearOptimizer.h" local="no" imported="no">gtsam/nonlinear/NonlinearOptimizer.h</includes>
    <class kind="class">gtsam::GaussNewtonParams</class>
    <class kind="class">gtsam::GaussNewtonOptimizer</class>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>ISAM2-impl.cpp</name>
    <path>/Users/dellaert/git/gtsam/gtsam/nonlinear/</path>
    <filename>a00815</filename>
    <includes id="a00020" name="debug.h" local="no" imported="no">gtsam/base/debug.h</includes>
    <includes id="a00818" name="ISAM2-impl.h" local="no" imported="no">gtsam/nonlinear/ISAM2-impl.h</includes>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>ISAM2-impl.h</name>
    <path>/Users/dellaert/git/gtsam/gtsam/nonlinear/</path>
    <filename>a00818</filename>
    <includes id="a00530" name="GaussianBayesTree.h" local="no" imported="no">gtsam/linear/GaussianBayesTree.h</includes>
    <includes id="a00824" name="ISAM2.h" local="no" imported="no">gtsam/nonlinear/ISAM2.h</includes>
    <class kind="class">gtsam::ISAM2</class>
    <class kind="struct">gtsam::ISAM2::PartialSolveResult</class>
    <class kind="struct">gtsam::ISAM2::ReorderingMode</class>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>ISAM2.cpp</name>
    <path>/Users/dellaert/git/gtsam/gtsam/nonlinear/</path>
    <filename>a00821</filename>
    <includes id="a00824" name="ISAM2.h" local="no" imported="no">gtsam/nonlinear/ISAM2.h</includes>
    <includes id="a00020" name="debug.h" local="no" imported="no">gtsam/base/debug.h</includes>
    <includes id="a00113" name="timing.h" local="no" imported="no">gtsam/base/timing.h</includes>
    <includes id="a00452" name="JunctionTree-inst.h" local="no" imported="no">gtsam/inference/JunctionTree-inst.h</includes>
    <includes id="a00551" name="GaussianEliminationTree.h" local="no" imported="no">gtsam/linear/GaussianEliminationTree.h</includes>
    <includes id="a00857" name="LinearContainerFactor.h" local="no" imported="no">gtsam/nonlinear/LinearContainerFactor.h</includes>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>ISAM2.h</name>
    <path>/Users/dellaert/git/gtsam/gtsam/nonlinear/</path>
    <filename>a00824</filename>
    <includes id="a00836" name="ISAM2Params.h" local="no" imported="no">gtsam/nonlinear/ISAM2Params.h</includes>
    <includes id="a00839" name="ISAM2Result.h" local="no" imported="no">gtsam/nonlinear/ISAM2Result.h</includes>
    <includes id="a00830" name="ISAM2Clique.h" local="no" imported="no">gtsam/nonlinear/ISAM2Clique.h</includes>
    <includes id="a00887" name="NonlinearFactorGraph.h" local="no" imported="no">gtsam/nonlinear/NonlinearFactorGraph.h</includes>
    <includes id="a00530" name="GaussianBayesTree.h" local="no" imported="no">gtsam/linear/GaussianBayesTree.h</includes>
    <includes id="a00818" name="ISAM2-impl.h" local="no" imported="no">gtsam/nonlinear/ISAM2-impl.h</includes>
    <class kind="class">gtsam::ISAM2</class>
    <class kind="struct">gtsam::traits&lt; ISAM2 &gt;</class>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>ISAM2Clique.cpp</name>
    <path>/Users/dellaert/git/gtsam/gtsam/nonlinear/</path>
    <filename>a00827</filename>
    <includes id="a00392" name="BayesTreeCliqueBase-inst.h" local="no" imported="no">gtsam/inference/BayesTreeCliqueBase-inst.h</includes>
    <includes id="a00680" name="VectorValues.h" local="no" imported="no">gtsam/linear/VectorValues.h</includes>
    <includes id="a00614" name="linearAlgorithms-inst.h" local="no" imported="no">gtsam/linear/linearAlgorithms-inst.h</includes>
    <includes id="a00830" name="ISAM2Clique.h" local="no" imported="no">gtsam/nonlinear/ISAM2Clique.h</includes>
    <namespace>gtsam</namespace>
    <member kind="function">
      <type>size_t</type>
      <name>optimizeWildfire</name>
      <anchorfile>a01405.html</anchorfile>
      <anchor>a2b0857edd76f8d63eeee0ce9944e28d4</anchor>
      <arglist>(const ISAM2Clique::shared_ptr &amp;root, double threshold, const KeySet &amp;replaced, VectorValues *delta)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>ISAM2Clique.h</name>
    <path>/Users/dellaert/git/gtsam/gtsam/nonlinear/</path>
    <filename>a00830</filename>
    <includes id="a00395" name="BayesTreeCliqueBase.h" local="no" imported="no">gtsam/inference/BayesTreeCliqueBase.h</includes>
    <includes id="a00461" name="Key.h" local="no" imported="no">gtsam/inference/Key.h</includes>
    <includes id="a00521" name="GaussianBayesNet.h" local="no" imported="no">gtsam/linear/GaussianBayesNet.h</includes>
    <includes id="a00539" name="GaussianConditional.h" local="no" imported="no">gtsam/linear/GaussianConditional.h</includes>
    <includes id="a00560" name="GaussianFactorGraph.h" local="no" imported="no">gtsam/linear/GaussianFactorGraph.h</includes>
    <class kind="class">gtsam::ISAM2Clique</class>
    <namespace>gtsam</namespace>
    <member kind="function">
      <type>size_t</type>
      <name>optimizeWildfire</name>
      <anchorfile>a01405.html</anchorfile>
      <anchor>a2b0857edd76f8d63eeee0ce9944e28d4</anchor>
      <arglist>(const ISAM2Clique::shared_ptr &amp;root, double threshold, const KeySet &amp;replaced, VectorValues *delta)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>ISAM2Params.cpp</name>
    <path>/Users/dellaert/git/gtsam/gtsam/nonlinear/</path>
    <filename>a00833</filename>
    <includes id="a00836" name="ISAM2Params.h" local="no" imported="no">gtsam/nonlinear/ISAM2Params.h</includes>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>ISAM2Params.h</name>
    <path>/Users/dellaert/git/gtsam/gtsam/nonlinear/</path>
    <filename>a00836</filename>
    <includes id="a00560" name="GaussianFactorGraph.h" local="no" imported="no">gtsam/linear/GaussianFactorGraph.h</includes>
    <includes id="a00779" name="DoglegOptimizerImpl.h" local="no" imported="no">gtsam/nonlinear/DoglegOptimizerImpl.h</includes>
    <class kind="struct">gtsam::ISAM2GaussNewtonParams</class>
    <class kind="struct">gtsam::ISAM2DoglegParams</class>
    <class kind="struct">gtsam::ISAM2Params</class>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>ISAM2Result.h</name>
    <path>/Users/dellaert/git/gtsam/gtsam/nonlinear/</path>
    <filename>a00839</filename>
    <includes id="a00530" name="GaussianBayesTree.h" local="no" imported="no">gtsam/linear/GaussianBayesTree.h</includes>
    <includes id="a00779" name="DoglegOptimizerImpl.h" local="no" imported="no">gtsam/nonlinear/DoglegOptimizerImpl.h</includes>
    <includes id="a00887" name="NonlinearFactorGraph.h" local="no" imported="no">gtsam/nonlinear/NonlinearFactorGraph.h</includes>
    <includes id="a00836" name="ISAM2Params.h" local="no" imported="no">gtsam/nonlinear/ISAM2Params.h</includes>
    <class kind="struct">gtsam::ISAM2Result</class>
    <class kind="struct">gtsam::ISAM2Result::DetailedResults</class>
    <class kind="struct">gtsam::ISAM2Result::DetailedResults::VariableStatus</class>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>LevenbergMarquardtOptimizer.cpp</name>
    <path>/Users/dellaert/git/gtsam/gtsam/nonlinear/</path>
    <filename>a00842</filename>
    <includes id="a00845" name="LevenbergMarquardtOptimizer.h" local="no" imported="no">gtsam/nonlinear/LevenbergMarquardtOptimizer.h</includes>
    <includes id="a00887" name="NonlinearFactorGraph.h" local="no" imported="no">gtsam/nonlinear/NonlinearFactorGraph.h</includes>
    <includes id="a00917" name="Values.h" local="no" imported="no">gtsam/nonlinear/Values.h</includes>
    <includes id="a00560" name="GaussianFactorGraph.h" local="no" imported="no">gtsam/linear/GaussianFactorGraph.h</includes>
    <includes id="a00620" name="linearExceptions.h" local="no" imported="no">gtsam/linear/linearExceptions.h</includes>
    <includes id="a00479" name="Ordering.h" local="no" imported="no">gtsam/inference/Ordering.h</includes>
    <includes id="a00128" name="Vector.h" local="no" imported="no">gtsam/base/Vector.h</includes>
    <includes id="a00113" name="timing.h" local="no" imported="no">gtsam/base/timing.h</includes>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>LevenbergMarquardtOptimizer.h</name>
    <path>/Users/dellaert/git/gtsam/gtsam/nonlinear/</path>
    <filename>a00845</filename>
    <includes id="a00899" name="NonlinearOptimizer.h" local="no" imported="no">gtsam/nonlinear/NonlinearOptimizer.h</includes>
    <includes id="a00851" name="LevenbergMarquardtParams.h" local="no" imported="no">gtsam/nonlinear/LevenbergMarquardtParams.h</includes>
    <includes id="a00680" name="VectorValues.h" local="no" imported="no">gtsam/linear/VectorValues.h</includes>
    <class kind="class">gtsam::LevenbergMarquardtOptimizer</class>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>LevenbergMarquardtParams.cpp</name>
    <path>/Users/dellaert/git/gtsam/gtsam/nonlinear/</path>
    <filename>a00848</filename>
    <includes id="a00851" name="LevenbergMarquardtParams.h" local="no" imported="no">gtsam/nonlinear/LevenbergMarquardtParams.h</includes>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>LevenbergMarquardtParams.h</name>
    <path>/Users/dellaert/git/gtsam/gtsam/nonlinear/</path>
    <filename>a00851</filename>
    <includes id="a00905" name="NonlinearOptimizerParams.h" local="no" imported="no">gtsam/nonlinear/NonlinearOptimizerParams.h</includes>
    <includes id="a00887" name="NonlinearFactorGraph.h" local="no" imported="no">gtsam/nonlinear/NonlinearFactorGraph.h</includes>
    <class kind="class">gtsam::LevenbergMarquardtParams</class>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>LinearContainerFactor.cpp</name>
    <path>/Users/dellaert/git/gtsam/gtsam/nonlinear/</path>
    <filename>a00854</filename>
    <includes id="a00857" name="LinearContainerFactor.h" local="no" imported="no">gtsam/nonlinear/LinearContainerFactor.h</includes>
    <includes id="a00581" name="HessianFactor.h" local="no" imported="no">gtsam/linear/HessianFactor.h</includes>
    <includes id="a00605" name="JacobianFactor.h" local="no" imported="no">gtsam/linear/JacobianFactor.h</includes>
    <includes id="a00680" name="VectorValues.h" local="no" imported="no">gtsam/linear/VectorValues.h</includes>
    <includes id="a00560" name="GaussianFactorGraph.h" local="no" imported="no">gtsam/linear/GaussianFactorGraph.h</includes>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>LinearContainerFactor.h</name>
    <path>/Users/dellaert/git/gtsam/gtsam/nonlinear/</path>
    <filename>a00857</filename>
    <includes id="a00887" name="NonlinearFactorGraph.h" local="no" imported="no">gtsam/nonlinear/NonlinearFactorGraph.h</includes>
    <class kind="class">gtsam::LinearContainerFactor</class>
    <class kind="struct">gtsam::traits&lt; LinearContainerFactor &gt;</class>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>Marginals.cpp</name>
    <path>/Users/dellaert/git/gtsam/gtsam/nonlinear/</path>
    <filename>a00860</filename>
    <includes id="a00113" name="timing.h" local="no" imported="no">gtsam/base/timing.h</includes>
    <includes id="a00605" name="JacobianFactor.h" local="no" imported="no">gtsam/linear/JacobianFactor.h</includes>
    <includes id="a00581" name="HessianFactor.h" local="no" imported="no">gtsam/linear/HessianFactor.h</includes>
    <includes id="a00863" name="Marginals.h" local="no" imported="no">gtsam/nonlinear/Marginals.h</includes>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>Marginals.h</name>
    <path>/Users/dellaert/git/gtsam/gtsam/nonlinear/</path>
    <filename>a00863</filename>
    <includes id="a00530" name="GaussianBayesTree.h" local="no" imported="no">gtsam/linear/GaussianBayesTree.h</includes>
    <includes id="a00887" name="NonlinearFactorGraph.h" local="no" imported="no">gtsam/nonlinear/NonlinearFactorGraph.h</includes>
    <includes id="a00917" name="Values.h" local="no" imported="no">gtsam/nonlinear/Values.h</includes>
    <class kind="class">gtsam::Marginals</class>
    <class kind="class">gtsam::JointMarginal</class>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>NonlinearConjugateGradientOptimizer.cpp</name>
    <path>/Users/dellaert/git/gtsam/gtsam/nonlinear/</path>
    <filename>a00866</filename>
    <includes id="a00869" name="NonlinearConjugateGradientOptimizer.h" local="no" imported="no">gtsam/nonlinear/NonlinearConjugateGradientOptimizer.h</includes>
    <includes id="a00917" name="Values.h" local="no" imported="no">gtsam/nonlinear/Values.h</includes>
    <includes id="a00560" name="GaussianFactorGraph.h" local="no" imported="no">gtsam/linear/GaussianFactorGraph.h</includes>
    <includes id="a00680" name="VectorValues.h" local="no" imported="no">gtsam/linear/VectorValues.h</includes>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>NonlinearConjugateGradientOptimizer.h</name>
    <path>/Users/dellaert/git/gtsam/gtsam/nonlinear/</path>
    <filename>a00869</filename>
    <includes id="a00068" name="Manifold.h" local="no" imported="no">gtsam/base/Manifold.h</includes>
    <includes id="a00899" name="NonlinearOptimizer.h" local="no" imported="no">gtsam/nonlinear/NonlinearOptimizer.h</includes>
    <class kind="class">gtsam::NonlinearConjugateGradientOptimizer</class>
    <namespace>gtsam</namespace>
    <member kind="function">
      <type>double</type>
      <name>lineSearch</name>
      <anchorfile>a01405.html</anchorfile>
      <anchor>a0ceb9e5a5e864b96c529db67f55a873b</anchor>
      <arglist>(const S &amp;system, const V currentValues, const W &amp;gradient)</arglist>
    </member>
    <member kind="function">
      <type>boost::tuple&lt; V, int &gt;</type>
      <name>nonlinearConjugateGradient</name>
      <anchorfile>a01405.html</anchorfile>
      <anchor>aab113d562c7adc22b450c056b8155f3c</anchor>
      <arglist>(const S &amp;system, const V &amp;initial, const NonlinearOptimizerParams &amp;params, const bool singleIteration, const bool gradientDescent=false)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>nonlinearExceptions.h</name>
    <path>/Users/dellaert/git/gtsam/gtsam/nonlinear/</path>
    <filename>a00875</filename>
    <includes id="a00461" name="Key.h" local="no" imported="no">gtsam/inference/Key.h</includes>
    <class kind="class">gtsam::MarginalizeNonleafException</class>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>NonlinearFactor.cpp</name>
    <path>/Users/dellaert/git/gtsam/gtsam/nonlinear/</path>
    <filename>a00878</filename>
    <includes id="a00881" name="NonlinearFactor.h" local="no" imported="no">gtsam/nonlinear/NonlinearFactor.h</includes>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>NonlinearFactor.h</name>
    <path>/Users/dellaert/git/gtsam/gtsam/nonlinear/</path>
    <filename>a00881</filename>
    <includes id="a00917" name="Values.h" local="no" imported="no">gtsam/nonlinear/Values.h</includes>
    <includes id="a00626" name="NoiseModel.h" local="no" imported="no">gtsam/linear/NoiseModel.h</includes>
    <includes id="a00605" name="JacobianFactor.h" local="no" imported="no">gtsam/linear/JacobianFactor.h</includes>
    <includes id="a00425" name="Factor.h" local="no" imported="no">gtsam/inference/Factor.h</includes>
    <includes id="a00080" name="OptionalJacobian.h" local="no" imported="no">gtsam/base/OptionalJacobian.h</includes>
    <class kind="class">gtsam::NonlinearFactor</class>
    <class kind="struct">gtsam::traits&lt; NonlinearFactor &gt;</class>
    <class kind="class">gtsam::NoiseModelFactor</class>
    <class kind="class">gtsam::NoiseModelFactor1</class>
    <class kind="class">gtsam::NoiseModelFactor2</class>
    <class kind="class">gtsam::NoiseModelFactor3</class>
    <class kind="class">gtsam::NoiseModelFactor4</class>
    <class kind="class">gtsam::NoiseModelFactor5</class>
    <class kind="class">gtsam::NoiseModelFactor6</class>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>NonlinearFactorGraph.cpp</name>
    <path>/Users/dellaert/git/gtsam/gtsam/nonlinear/</path>
    <filename>a00884</filename>
    <includes id="a00311" name="Pose2.h" local="no" imported="no">gtsam/geometry/Pose2.h</includes>
    <includes id="a00317" name="Pose3.h" local="no" imported="no">gtsam/geometry/Pose3.h</includes>
    <includes id="a01061" name="SymbolicFactorGraph.h" local="no" imported="no">gtsam/symbolic/SymbolicFactorGraph.h</includes>
    <includes id="a00917" name="Values.h" local="no" imported="no">gtsam/nonlinear/Values.h</includes>
    <includes id="a00887" name="NonlinearFactorGraph.h" local="no" imported="no">gtsam/nonlinear/NonlinearFactorGraph.h</includes>
    <includes id="a00560" name="GaussianFactorGraph.h" local="no" imported="no">gtsam/linear/GaussianFactorGraph.h</includes>
    <includes id="a00620" name="linearExceptions.h" local="no" imported="no">gtsam/linear/linearExceptions.h</includes>
    <includes id="a00680" name="VectorValues.h" local="no" imported="no">gtsam/linear/VectorValues.h</includes>
    <includes id="a00479" name="Ordering.h" local="no" imported="no">gtsam/inference/Ordering.h</includes>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>NonlinearFactorGraph.h</name>
    <path>/Users/dellaert/git/gtsam/gtsam/nonlinear/</path>
    <filename>a00887</filename>
    <includes id="a00299" name="Point2.h" local="no" imported="no">gtsam/geometry/Point2.h</includes>
    <includes id="a00881" name="NonlinearFactor.h" local="no" imported="no">gtsam/nonlinear/NonlinearFactor.h</includes>
    <includes id="a00431" name="FactorGraph.h" local="no" imported="no">gtsam/inference/FactorGraph.h</includes>
    <class kind="class">gtsam::Expression</class>
    <class kind="class">gtsam::ExpressionFactor</class>
    <class kind="struct">gtsam::GraphvizFormatting</class>
    <class kind="class">gtsam::NonlinearFactorGraph</class>
    <class kind="struct">gtsam::traits&lt; NonlinearFactorGraph &gt;</class>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>NonlinearISAM.h</name>
    <path>/Users/dellaert/git/gtsam/gtsam/nonlinear/</path>
    <filename>a00893</filename>
    <includes id="a00887" name="NonlinearFactorGraph.h" local="no" imported="no">gtsam/nonlinear/NonlinearFactorGraph.h</includes>
    <class kind="class">gtsam::NonlinearISAM</class>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>NonlinearOptimizer.cpp</name>
    <path>/Users/dellaert/git/gtsam/gtsam/nonlinear/</path>
    <filename>a00896</filename>
    <includes id="a00899" name="NonlinearOptimizer.h" local="no" imported="no">gtsam/nonlinear/NonlinearOptimizer.h</includes>
    <includes id="a00551" name="GaussianEliminationTree.h" local="no" imported="no">gtsam/linear/GaussianEliminationTree.h</includes>
    <includes id="a00680" name="VectorValues.h" local="no" imported="no">gtsam/linear/VectorValues.h</includes>
    <includes id="a00674" name="SubgraphSolver.h" local="no" imported="no">gtsam/linear/SubgraphSolver.h</includes>
    <includes id="a00560" name="GaussianFactorGraph.h" local="no" imported="no">gtsam/linear/GaussianFactorGraph.h</includes>
    <includes id="a00479" name="Ordering.h" local="no" imported="no">gtsam/inference/Ordering.h</includes>
    <namespace>gtsam</namespace>
    <member kind="function">
      <type>bool</type>
      <name>checkConvergence</name>
      <anchorfile>a01405.html</anchorfile>
      <anchor>a3382482454c164c6f5817dcbe6f932b3</anchor>
      <arglist>(double relativeErrorTreshold, double absoluteErrorTreshold, double errorThreshold, double currentError, double newError, NonlinearOptimizerParams::Verbosity verbosity=NonlinearOptimizerParams::SILENT)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>NonlinearOptimizer.h</name>
    <path>/Users/dellaert/git/gtsam/gtsam/nonlinear/</path>
    <filename>a00899</filename>
    <includes id="a00887" name="NonlinearFactorGraph.h" local="no" imported="no">gtsam/nonlinear/NonlinearFactorGraph.h</includes>
    <includes id="a00905" name="NonlinearOptimizerParams.h" local="no" imported="no">gtsam/nonlinear/NonlinearOptimizerParams.h</includes>
    <class kind="class">gtsam::NonlinearOptimizer</class>
    <namespace>gtsam</namespace>
    <member kind="function">
      <type>bool</type>
      <name>checkConvergence</name>
      <anchorfile>a01405.html</anchorfile>
      <anchor>a3382482454c164c6f5817dcbe6f932b3</anchor>
      <arglist>(double relativeErrorTreshold, double absoluteErrorTreshold, double errorThreshold, double currentError, double newError, NonlinearOptimizerParams::Verbosity verbosity=NonlinearOptimizerParams::SILENT)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>NonlinearOptimizerParams.cpp</name>
    <path>/Users/dellaert/git/gtsam/gtsam/nonlinear/</path>
    <filename>a00902</filename>
    <includes id="a00905" name="NonlinearOptimizerParams.h" local="no" imported="no">gtsam/nonlinear/NonlinearOptimizerParams.h</includes>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>NonlinearOptimizerParams.h</name>
    <path>/Users/dellaert/git/gtsam/gtsam/nonlinear/</path>
    <filename>a00905</filename>
    <includes id="a00560" name="GaussianFactorGraph.h" local="no" imported="no">gtsam/linear/GaussianFactorGraph.h</includes>
    <includes id="a00674" name="SubgraphSolver.h" local="no" imported="no">gtsam/linear/SubgraphSolver.h</includes>
    <class kind="class">gtsam::NonlinearOptimizerParams</class>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>Values.h</name>
    <path>/Users/dellaert/git/gtsam/gtsam/nonlinear/</path>
    <filename>a00917</filename>
    <includes id="a00461" name="Key.h" local="no" imported="no">gtsam/inference/Key.h</includes>
    <class kind="class">gtsam::ValueCloneAllocator</class>
    <class kind="class">gtsam::Values</class>
    <class kind="struct">gtsam::Values::KeyValuePair</class>
    <class kind="struct">gtsam::Values::ConstKeyValuePair</class>
    <class kind="class">gtsam::Values::Filtered</class>
    <class kind="class">gtsam::Values::ConstFiltered</class>
    <class kind="class">gtsam::ValuesKeyAlreadyExists</class>
    <class kind="class">gtsam::ValuesKeyDoesNotExist</class>
    <class kind="class">gtsam::ValuesIncorrectType</class>
    <class kind="class">gtsam::DynamicValuesMismatched</class>
    <class kind="class">gtsam::NoMatchFoundForFixed</class>
    <class kind="struct">gtsam::traits&lt; Values &gt;</class>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>WhiteNoiseFactor.h</name>
    <path>/Users/dellaert/git/gtsam/gtsam/nonlinear/</path>
    <filename>a00920</filename>
    <includes id="a00881" name="NonlinearFactor.h" local="no" imported="no">gtsam/nonlinear/NonlinearFactor.h</includes>
    <includes id="a00581" name="HessianFactor.h" local="no" imported="no">gtsam/linear/HessianFactor.h</includes>
    <class kind="class">gtsam::WhiteNoiseFactor</class>
    <namespace>gtsam</namespace>
    <member kind="variable">
      <type>const double</type>
      <name>logSqrt2PI</name>
      <anchorfile>a01405.html</anchorfile>
      <anchor>ad5602eb85d05df6cba60e47eebbd3636</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>precompiled_header.cpp</name>
    <path>/Users/dellaert/git/gtsam/gtsam/</path>
    <filename>a01085</filename>
    <includes id="a01088" name="precompiled_header.h" local="yes" imported="no">precompiled_header.h</includes>
  </compound>
  <compound kind="file">
    <name>precompiled_header.h</name>
    <path>/Users/dellaert/git/gtsam/gtsam/</path>
    <filename>a01088</filename>
    <includes id="a00053" name="Lie.h" local="no" imported="no">gtsam/base/Lie.h</includes>
    <includes id="a00008" name="cholesky.h" local="no" imported="no">gtsam/base/cholesky.h</includes>
    <includes id="a00020" name="debug.h" local="no" imported="no">gtsam/base/debug.h</includes>
    <includes id="a00029" name="DSFVector.h" local="no" imported="no">gtsam/base/DSFVector.h</includes>
    <includes id="a00032" name="FastDefaultAllocator.h" local="no" imported="no">gtsam/base/FastDefaultAllocator.h</includes>
    <includes id="a00035" name="FastList.h" local="no" imported="no">gtsam/base/FastList.h</includes>
    <includes id="a00038" name="FastMap.h" local="no" imported="no">gtsam/base/FastMap.h</includes>
    <includes id="a00041" name="FastSet.h" local="no" imported="no">gtsam/base/FastSet.h</includes>
    <includes id="a00044" name="FastVector.h" local="no" imported="no">gtsam/base/FastVector.h</includes>
    <includes id="a00050" name="Group.h" local="no" imported="no">gtsam/base/Group.h</includes>
    <includes id="a00059" name="lieProxies.h" local="no" imported="no">gtsam/base/lieProxies.h</includes>
    <includes id="a00068" name="Manifold.h" local="no" imported="no">gtsam/base/Manifold.h</includes>
    <includes id="a00074" name="Matrix.h" local="no" imported="no">gtsam/base/Matrix.h</includes>
    <includes id="a00080" name="OptionalJacobian.h" local="no" imported="no">gtsam/base/OptionalJacobian.h</includes>
    <includes id="a00083" name="ProductLieGroup.h" local="no" imported="no">gtsam/base/ProductLieGroup.h</includes>
    <includes id="a00089" name="serializationTestHelpers.h" local="no" imported="no">gtsam/base/serializationTestHelpers.h</includes>
    <includes id="a00095" name="SymmetricBlockMatrix.h" local="no" imported="no">gtsam/base/SymmetricBlockMatrix.h</includes>
    <includes id="a00098" name="Testable.h" local="no" imported="no">gtsam/base/Testable.h</includes>
    <includes id="a00101" name="TestableAssertions.h" local="no" imported="no">gtsam/base/TestableAssertions.h</includes>
    <includes id="a00107" name="ThreadsafeException.h" local="no" imported="no">gtsam/base/ThreadsafeException.h</includes>
    <includes id="a00113" name="timing.h" local="no" imported="no">gtsam/base/timing.h</includes>
    <includes id="a00119" name="types.h" local="no" imported="no">gtsam/base/types.h</includes>
    <includes id="a00122" name="Value.h" local="no" imported="no">gtsam/base/Value.h</includes>
    <includes id="a00128" name="Vector.h" local="no" imported="no">gtsam/base/Vector.h</includes>
    <includes id="a00137" name="VerticalBlockMatrix.h" local="no" imported="no">gtsam/base/VerticalBlockMatrix.h</includes>
  </compound>
  <compound kind="file">
    <name>AntiFactor.h</name>
    <path>/Users/dellaert/git/gtsam/gtsam/slam/</path>
    <filename>a00932</filename>
    <includes id="a00881" name="NonlinearFactor.h" local="no" imported="no">gtsam/nonlinear/NonlinearFactor.h</includes>
    <includes id="a00554" name="GaussianFactor.h" local="no" imported="no">gtsam/linear/GaussianFactor.h</includes>
    <class kind="class">gtsam::AntiFactor</class>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>BetweenFactor.h</name>
    <path>/Users/dellaert/git/gtsam/gtsam/slam/</path>
    <filename>a00935</filename>
    <includes id="a00098" name="Testable.h" local="no" imported="no">gtsam/base/Testable.h</includes>
    <includes id="a00053" name="Lie.h" local="no" imported="no">gtsam/base/Lie.h</includes>
    <includes id="a00881" name="NonlinearFactor.h" local="no" imported="no">gtsam/nonlinear/NonlinearFactor.h</includes>
    <class kind="class">gtsam::BetweenFactor</class>
    <class kind="struct">gtsam::traits&lt; BetweenFactor&lt; VALUE &gt; &gt;</class>
    <class kind="class">gtsam::BetweenConstraint</class>
    <class kind="struct">gtsam::traits&lt; BetweenConstraint&lt; VALUE &gt; &gt;</class>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>BoundingConstraint.h</name>
    <path>/Users/dellaert/git/gtsam/gtsam/slam/</path>
    <filename>a00938</filename>
    <includes id="a00053" name="Lie.h" local="no" imported="no">gtsam/base/Lie.h</includes>
    <includes id="a00881" name="NonlinearFactor.h" local="no" imported="no">gtsam/nonlinear/NonlinearFactor.h</includes>
    <class kind="struct">gtsam::BoundingConstraint1</class>
    <class kind="struct">gtsam::BoundingConstraint2</class>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>dataset.cpp</name>
    <path>/Users/dellaert/git/gtsam/gtsam/slam/</path>
    <filename>a00941</filename>
    <includes id="a00935" name="BetweenFactor.h" local="no" imported="no">gtsam/slam/BetweenFactor.h</includes>
    <includes id="a00944" name="dataset.h" local="no" imported="no">gtsam/slam/dataset.h</includes>
    <includes id="a00305" name="Point3.h" local="no" imported="no">gtsam/geometry/Point3.h</includes>
    <includes id="a00311" name="Pose2.h" local="no" imported="no">gtsam/geometry/Pose2.h</includes>
    <includes id="a00332" name="Rot3.h" local="no" imported="no">gtsam/geometry/Rot3.h</includes>
    <includes id="a00431" name="FactorGraph.h" local="no" imported="no">gtsam/inference/FactorGraph.h</includes>
    <includes id="a00881" name="NonlinearFactor.h" local="no" imported="no">gtsam/nonlinear/NonlinearFactor.h</includes>
    <includes id="a00917" name="Values.h" local="no" imported="no">gtsam/nonlinear/Values.h</includes>
    <includes id="a00650" name="Sampler.h" local="no" imported="no">gtsam/linear/Sampler.h</includes>
    <includes id="a00053" name="Lie.h" local="no" imported="no">gtsam/base/Lie.h</includes>
    <includes id="a00074" name="Matrix.h" local="no" imported="no">gtsam/base/Matrix.h</includes>
    <includes id="a00119" name="types.h" local="no" imported="no">gtsam/base/types.h</includes>
    <includes id="a00122" name="Value.h" local="no" imported="no">gtsam/base/Value.h</includes>
    <includes id="a00128" name="Vector.h" local="no" imported="no">gtsam/base/Vector.h</includes>
    <namespace>gtsam</namespace>
    <member kind="function">
      <type>string</type>
      <name>findExampleDataFile</name>
      <anchorfile>a01405.html</anchorfile>
      <anchor>aef971b2c69845e4fcce707306703c7b8</anchor>
      <arglist>(const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>string</type>
      <name>createRewrittenFileName</name>
      <anchorfile>a01405.html</anchorfile>
      <anchor>adbe09e573771fd72b08069353d537725</anchor>
      <arglist>(const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>GraphAndValues</type>
      <name>load2D</name>
      <anchorfile>a01405.html</anchorfile>
      <anchor>a03b8e238c614213004cf9edb7f95730f</anchor>
      <arglist>(pair&lt; string, SharedNoiseModel &gt; dataset, int maxID, bool addNoise, bool smart, NoiseFormat noiseFormat, KernelFunctionType kernelFunctionType)</arglist>
    </member>
    <member kind="function">
      <type>boost::optional&lt; IndexedPose &gt;</type>
      <name>parseVertex</name>
      <anchorfile>a01405.html</anchorfile>
      <anchor>a7e43a0cc8b9a3efb4cc15da35315da38</anchor>
      <arglist>(std::istream &amp;is, const std::string &amp;tag)</arglist>
    </member>
    <member kind="function">
      <type>boost::optional&lt; IndexedEdge &gt;</type>
      <name>parseEdge</name>
      <anchorfile>a01405.html</anchorfile>
      <anchor>abc8bb9db0893652e8b5e7b47782ec990</anchor>
      <arglist>(std::istream &amp;is, const std::string &amp;tag)</arglist>
    </member>
    <member kind="function">
      <type>GraphAndValues</type>
      <name>load2D</name>
      <anchorfile>a01405.html</anchorfile>
      <anchor>a418f03c4eab89c5b9571280f9daa50ae</anchor>
      <arglist>(const std::string &amp;filename, SharedNoiseModel model=SharedNoiseModel(), Key maxID=0, bool addNoise=false, bool smart=true, NoiseFormat noiseFormat=NoiseFormatAUTO, KernelFunctionType kernelFunctionType=KernelFunctionTypeNONE)</arglist>
    </member>
    <member kind="function">
      <type>GraphAndValues</type>
      <name>load2D_robust</name>
      <anchorfile>a01405.html</anchorfile>
      <anchor>aaddc8a142b6518bb66870e893dfe8f20</anchor>
      <arglist>(const string &amp;filename, noiseModel::Base::shared_ptr &amp;model, int maxID)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>save2D</name>
      <anchorfile>a01405.html</anchorfile>
      <anchor>acfe516bc2d9ca4cc4530dd3b8460ce3d</anchor>
      <arglist>(const NonlinearFactorGraph &amp;graph, const Values &amp;config, const noiseModel::Diagonal::shared_ptr model, const std::string &amp;filename)</arglist>
    </member>
    <member kind="function">
      <type>GraphAndValues</type>
      <name>readG2o</name>
      <anchorfile>a01405.html</anchorfile>
      <anchor>a71d086efc70f4af31d3c3b00dde4f7c0</anchor>
      <arglist>(const std::string &amp;g2oFile, const bool is3D=false, KernelFunctionType kernelFunctionType=KernelFunctionTypeNONE)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>writeG2o</name>
      <anchorfile>a01405.html</anchorfile>
      <anchor>a68bc584d72da3747666ac134a9490f92</anchor>
      <arglist>(const NonlinearFactorGraph &amp;graph, const Values &amp;estimate, const std::string &amp;filename)</arglist>
    </member>
    <member kind="function">
      <type>std::map&lt; Key, Pose3 &gt;</type>
      <name>parse3DPoses</name>
      <anchorfile>a01405.html</anchorfile>
      <anchor>a7e8ca844a5eefc0ec0beece49f6a3230</anchor>
      <arglist>(const std::string &amp;filename)</arglist>
    </member>
    <member kind="function">
      <type>GraphAndValues</type>
      <name>load3D</name>
      <anchorfile>a01405.html</anchorfile>
      <anchor>ac96511703a91071d7b2033976f9739c3</anchor>
      <arglist>(const std::string &amp;filename)</arglist>
    </member>
    <member kind="function">
      <type>Pose3</type>
      <name>openGL2gtsam</name>
      <anchorfile>a01405.html</anchorfile>
      <anchor>ade6eca65dc0168a65f641961ca97924c</anchor>
      <arglist>(const Rot3 &amp;R, double tx, double ty, double tz)</arglist>
    </member>
    <member kind="function">
      <type>Pose3</type>
      <name>gtsam2openGL</name>
      <anchorfile>a01405.html</anchorfile>
      <anchor>aaff07ef70e6161c4d1d2bd7546ff91e6</anchor>
      <arglist>(const Rot3 &amp;R, double tx, double ty, double tz)</arglist>
    </member>
    <member kind="function">
      <type>Pose3</type>
      <name>gtsam2openGL</name>
      <anchorfile>a01405.html</anchorfile>
      <anchor>ad632ed56581bf174eef379bbe272a06a</anchor>
      <arglist>(const Pose3 &amp;PoseGTSAM)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>readBundler</name>
      <anchorfile>a01405.html</anchorfile>
      <anchor>aef96840653460872d4e7a74349f77c42</anchor>
      <arglist>(const std::string &amp;filename, SfM_data &amp;data)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>readBAL</name>
      <anchorfile>a01405.html</anchorfile>
      <anchor>a07b97b60419b8535ccdaa385ce6d7cc6</anchor>
      <arglist>(const std::string &amp;filename, SfM_data &amp;data)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>writeBAL</name>
      <anchorfile>a01405.html</anchorfile>
      <anchor>acbdf1d3cfef0058a15eca02d31037e9b</anchor>
      <arglist>(const std::string &amp;filename, SfM_data &amp;data)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>writeBALfromValues</name>
      <anchorfile>a01405.html</anchorfile>
      <anchor>a28d34be139e927fde97f85d83144c02a</anchor>
      <arglist>(const std::string &amp;filename, const SfM_data &amp;data, Values &amp;values)</arglist>
    </member>
    <member kind="function">
      <type>Values</type>
      <name>initialCamerasEstimate</name>
      <anchorfile>a01405.html</anchorfile>
      <anchor>a07fada7b5119506b7f30d5ddbd1b53f7</anchor>
      <arglist>(const SfM_data &amp;db)</arglist>
    </member>
    <member kind="function">
      <type>Values</type>
      <name>initialCamerasAndPointsEstimate</name>
      <anchorfile>a01405.html</anchorfile>
      <anchor>abdef8c3f883714f9937097e500f3eb1d</anchor>
      <arglist>(const SfM_data &amp;db)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>dataset.h</name>
    <path>/Users/dellaert/git/gtsam/gtsam/slam/</path>
    <filename>a00944</filename>
    <includes id="a00935" name="BetweenFactor.h" local="no" imported="no">gtsam/slam/BetweenFactor.h</includes>
    <includes id="a00239" name="Cal3Bundler.h" local="no" imported="no">gtsam/geometry/Cal3Bundler.h</includes>
    <includes id="a00287" name="PinholeCamera.h" local="no" imported="no">gtsam/geometry/PinholeCamera.h</includes>
    <includes id="a00299" name="Point2.h" local="no" imported="no">gtsam/geometry/Point2.h</includes>
    <includes id="a00305" name="Point3.h" local="no" imported="no">gtsam/geometry/Point3.h</includes>
    <includes id="a00317" name="Pose3.h" local="no" imported="no">gtsam/geometry/Pose3.h</includes>
    <includes id="a00332" name="Rot3.h" local="no" imported="no">gtsam/geometry/Rot3.h</includes>
    <includes id="a00887" name="NonlinearFactorGraph.h" local="no" imported="no">gtsam/nonlinear/NonlinearFactorGraph.h</includes>
    <includes id="a00917" name="Values.h" local="no" imported="no">gtsam/nonlinear/Values.h</includes>
    <includes id="a00626" name="NoiseModel.h" local="no" imported="no">gtsam/linear/NoiseModel.h</includes>
    <includes id="a00119" name="types.h" local="no" imported="no">gtsam/base/types.h</includes>
    <class kind="struct">gtsam::SfM_Track</class>
    <class kind="struct">gtsam::SfM_data</class>
    <namespace>gtsam</namespace>
    <member kind="typedef">
      <type>std::pair&lt; Key, Pose2 &gt;</type>
      <name>IndexedPose</name>
      <anchorfile>a01405.html</anchorfile>
      <anchor>ab6ca51d10a8bb267d45bb4198946abca</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::pair&lt; NonlinearFactorGraph::shared_ptr, Values::shared_ptr &gt;</type>
      <name>GraphAndValues</name>
      <anchorfile>a01405.html</anchorfile>
      <anchor>a62b6d8d9df4bb6e0add77af1ffd41c04</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::vector&lt; gtsam::BetweenFactor&lt; Pose3 &gt;::shared_ptr &gt;</type>
      <name>BetweenFactorPose3s</name>
      <anchorfile>a01405.html</anchorfile>
      <anchor>a5e0039fe3dd9ae90ff7bc7b92e5027d4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::pair&lt; size_t, Point2 &gt;</type>
      <name>SfM_Measurement</name>
      <anchorfile>a01405.html</anchorfile>
      <anchor>a424cd75273f459332d71dcf59d8e6157</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::pair&lt; size_t, size_t &gt;</type>
      <name>SIFT_Index</name>
      <anchorfile>a01405.html</anchorfile>
      <anchor>ac12eee83ad5171a32831a44ceb216d7c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>PinholeCamera&lt; Cal3Bundler &gt;</type>
      <name>SfM_Camera</name>
      <anchorfile>a01405.html</anchorfile>
      <anchor>a57df85ec453d878a568bc619734af335</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>NoiseFormat</name>
      <anchorfile>a01405.html</anchorfile>
      <anchor>a90552b70a2da9c74595cae4b05c2ce18</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NoiseFormatG2O</name>
      <anchorfile>a01405.html</anchorfile>
      <anchor>a90552b70a2da9c74595cae4b05c2ce18ad0aaa5c51a45cb7c9151aae60a603209</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NoiseFormatTORO</name>
      <anchorfile>a01405.html</anchorfile>
      <anchor>a90552b70a2da9c74595cae4b05c2ce18a3790bc2c6f11cd7da84730b33173de5a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NoiseFormatGRAPH</name>
      <anchorfile>a01405.html</anchorfile>
      <anchor>a90552b70a2da9c74595cae4b05c2ce18a1f8edeb25c58a249789556c686265a4c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NoiseFormatCOV</name>
      <anchorfile>a01405.html</anchorfile>
      <anchor>a90552b70a2da9c74595cae4b05c2ce18a5450a16f3522214ccdfa23c461e7d05a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NoiseFormatAUTO</name>
      <anchorfile>a01405.html</anchorfile>
      <anchor>a90552b70a2da9c74595cae4b05c2ce18a2f9067b8f5bd2d0dd38c49326a4c070e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>KernelFunctionType</name>
      <anchorfile>a01405.html</anchorfile>
      <anchor>a8be373f34edc0a9d28b1bfab5dd62ba0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>string</type>
      <name>findExampleDataFile</name>
      <anchorfile>a01405.html</anchorfile>
      <anchor>aef971b2c69845e4fcce707306703c7b8</anchor>
      <arglist>(const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>string</type>
      <name>createRewrittenFileName</name>
      <anchorfile>a01405.html</anchorfile>
      <anchor>adbe09e573771fd72b08069353d537725</anchor>
      <arglist>(const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>boost::optional&lt; IndexedPose &gt;</type>
      <name>parseVertex</name>
      <anchorfile>a01405.html</anchorfile>
      <anchor>a7e43a0cc8b9a3efb4cc15da35315da38</anchor>
      <arglist>(std::istream &amp;is, const std::string &amp;tag)</arglist>
    </member>
    <member kind="function">
      <type>boost::optional&lt; IndexedEdge &gt;</type>
      <name>parseEdge</name>
      <anchorfile>a01405.html</anchorfile>
      <anchor>abc8bb9db0893652e8b5e7b47782ec990</anchor>
      <arglist>(std::istream &amp;is, const std::string &amp;tag)</arglist>
    </member>
    <member kind="function">
      <type>GTSAM_EXPORT GraphAndValues</type>
      <name>load2D</name>
      <anchorfile>a01405.html</anchorfile>
      <anchor>a39741f728e3b36b9eb5e6c7042fa6a59</anchor>
      <arglist>(std::pair&lt; std::string, SharedNoiseModel &gt; dataset, int maxID=0, bool addNoise=false, bool smart=true, NoiseFormat noiseFormat=NoiseFormatAUTO, KernelFunctionType kernelFunctionType=KernelFunctionTypeNONE)</arglist>
    </member>
    <member kind="function">
      <type>GraphAndValues</type>
      <name>load2D</name>
      <anchorfile>a01405.html</anchorfile>
      <anchor>a418f03c4eab89c5b9571280f9daa50ae</anchor>
      <arglist>(const std::string &amp;filename, SharedNoiseModel model=SharedNoiseModel(), Key maxID=0, bool addNoise=false, bool smart=true, NoiseFormat noiseFormat=NoiseFormatAUTO, KernelFunctionType kernelFunctionType=KernelFunctionTypeNONE)</arglist>
    </member>
    <member kind="function">
      <type>GraphAndValues</type>
      <name>load2D_robust</name>
      <anchorfile>a01405.html</anchorfile>
      <anchor>aaddc8a142b6518bb66870e893dfe8f20</anchor>
      <arglist>(const string &amp;filename, noiseModel::Base::shared_ptr &amp;model, int maxID)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>save2D</name>
      <anchorfile>a01405.html</anchorfile>
      <anchor>acfe516bc2d9ca4cc4530dd3b8460ce3d</anchor>
      <arglist>(const NonlinearFactorGraph &amp;graph, const Values &amp;config, const noiseModel::Diagonal::shared_ptr model, const std::string &amp;filename)</arglist>
    </member>
    <member kind="function">
      <type>GraphAndValues</type>
      <name>readG2o</name>
      <anchorfile>a01405.html</anchorfile>
      <anchor>a71d086efc70f4af31d3c3b00dde4f7c0</anchor>
      <arglist>(const std::string &amp;g2oFile, const bool is3D=false, KernelFunctionType kernelFunctionType=KernelFunctionTypeNONE)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>writeG2o</name>
      <anchorfile>a01405.html</anchorfile>
      <anchor>a68bc584d72da3747666ac134a9490f92</anchor>
      <arglist>(const NonlinearFactorGraph &amp;graph, const Values &amp;estimate, const std::string &amp;filename)</arglist>
    </member>
    <member kind="function">
      <type>std::map&lt; Key, Pose3 &gt;</type>
      <name>parse3DPoses</name>
      <anchorfile>a01405.html</anchorfile>
      <anchor>a7e8ca844a5eefc0ec0beece49f6a3230</anchor>
      <arglist>(const std::string &amp;filename)</arglist>
    </member>
    <member kind="function">
      <type>GraphAndValues</type>
      <name>load3D</name>
      <anchorfile>a01405.html</anchorfile>
      <anchor>ac96511703a91071d7b2033976f9739c3</anchor>
      <arglist>(const std::string &amp;filename)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>readBundler</name>
      <anchorfile>a01405.html</anchorfile>
      <anchor>aef96840653460872d4e7a74349f77c42</anchor>
      <arglist>(const std::string &amp;filename, SfM_data &amp;data)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>readBAL</name>
      <anchorfile>a01405.html</anchorfile>
      <anchor>a07b97b60419b8535ccdaa385ce6d7cc6</anchor>
      <arglist>(const std::string &amp;filename, SfM_data &amp;data)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>writeBAL</name>
      <anchorfile>a01405.html</anchorfile>
      <anchor>acbdf1d3cfef0058a15eca02d31037e9b</anchor>
      <arglist>(const std::string &amp;filename, SfM_data &amp;data)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>writeBALfromValues</name>
      <anchorfile>a01405.html</anchorfile>
      <anchor>a28d34be139e927fde97f85d83144c02a</anchor>
      <arglist>(const std::string &amp;filename, const SfM_data &amp;data, Values &amp;values)</arglist>
    </member>
    <member kind="function">
      <type>Pose3</type>
      <name>openGL2gtsam</name>
      <anchorfile>a01405.html</anchorfile>
      <anchor>ade6eca65dc0168a65f641961ca97924c</anchor>
      <arglist>(const Rot3 &amp;R, double tx, double ty, double tz)</arglist>
    </member>
    <member kind="function">
      <type>Pose3</type>
      <name>gtsam2openGL</name>
      <anchorfile>a01405.html</anchorfile>
      <anchor>aaff07ef70e6161c4d1d2bd7546ff91e6</anchor>
      <arglist>(const Rot3 &amp;R, double tx, double ty, double tz)</arglist>
    </member>
    <member kind="function">
      <type>Pose3</type>
      <name>gtsam2openGL</name>
      <anchorfile>a01405.html</anchorfile>
      <anchor>ad632ed56581bf174eef379bbe272a06a</anchor>
      <arglist>(const Pose3 &amp;PoseGTSAM)</arglist>
    </member>
    <member kind="function">
      <type>Values</type>
      <name>initialCamerasEstimate</name>
      <anchorfile>a01405.html</anchorfile>
      <anchor>a07fada7b5119506b7f30d5ddbd1b53f7</anchor>
      <arglist>(const SfM_data &amp;db)</arglist>
    </member>
    <member kind="function">
      <type>Values</type>
      <name>initialCamerasAndPointsEstimate</name>
      <anchorfile>a01405.html</anchorfile>
      <anchor>abdef8c3f883714f9937097e500f3eb1d</anchor>
      <arglist>(const SfM_data &amp;db)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>EssentialMatrixConstraint.cpp</name>
    <path>/Users/dellaert/git/gtsam/gtsam/slam/</path>
    <filename>a00947</filename>
    <includes id="a00950" name="EssentialMatrixConstraint.h" local="no" imported="no">gtsam/slam/EssentialMatrixConstraint.h</includes>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>EssentialMatrixConstraint.h</name>
    <path>/Users/dellaert/git/gtsam/gtsam/slam/</path>
    <filename>a00950</filename>
    <includes id="a00881" name="NonlinearFactor.h" local="no" imported="no">gtsam/nonlinear/NonlinearFactor.h</includes>
    <class kind="class">gtsam::EssentialMatrixConstraint</class>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>GeneralSFMFactor.h</name>
    <path>/Users/dellaert/git/gtsam/gtsam/slam/</path>
    <filename>a00956</filename>
    <includes id="a00287" name="PinholeCamera.h" local="no" imported="no">gtsam/geometry/PinholeCamera.h</includes>
    <includes id="a00299" name="Point2.h" local="no" imported="no">gtsam/geometry/Point2.h</includes>
    <includes id="a00305" name="Point3.h" local="no" imported="no">gtsam/geometry/Point3.h</includes>
    <includes id="a00317" name="Pose3.h" local="no" imported="no">gtsam/geometry/Pose3.h</includes>
    <includes id="a00881" name="NonlinearFactor.h" local="no" imported="no">gtsam/nonlinear/NonlinearFactor.h</includes>
    <includes id="a00503" name="BinaryJacobianFactor.h" local="no" imported="no">gtsam/linear/BinaryJacobianFactor.h</includes>
    <includes id="a00626" name="NoiseModel.h" local="no" imported="no">gtsam/linear/NoiseModel.h</includes>
    <includes id="a00068" name="Manifold.h" local="no" imported="no">gtsam/base/Manifold.h</includes>
    <includes id="a00074" name="Matrix.h" local="no" imported="no">gtsam/base/Matrix.h</includes>
    <includes id="a00095" name="SymmetricBlockMatrix.h" local="no" imported="no">gtsam/base/SymmetricBlockMatrix.h</includes>
    <includes id="a00119" name="types.h" local="no" imported="no">gtsam/base/types.h</includes>
    <includes id="a00098" name="Testable.h" local="no" imported="no">gtsam/base/Testable.h</includes>
    <includes id="a00128" name="Vector.h" local="no" imported="no">gtsam/base/Vector.h</includes>
    <includes id="a00113" name="timing.h" local="no" imported="no">gtsam/base/timing.h</includes>
    <class kind="class">gtsam::GeneralSFMFactor</class>
    <class kind="struct">gtsam::traits&lt; GeneralSFMFactor&lt; CAMERA, LANDMARK &gt; &gt;</class>
    <class kind="class">gtsam::GeneralSFMFactor2</class>
    <class kind="struct">gtsam::traits&lt; GeneralSFMFactor2&lt; CALIBRATION &gt; &gt;</class>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>InitializePose3.h</name>
    <path>/Users/dellaert/git/gtsam/gtsam/slam/</path>
    <filename>a00962</filename>
    <includes id="a00332" name="Rot3.h" local="no" imported="no">gtsam/geometry/Rot3.h</includes>
    <includes id="a00437" name="graph.h" local="no" imported="no">gtsam/inference/graph.h</includes>
    <includes id="a00560" name="GaussianFactorGraph.h" local="no" imported="no">gtsam/linear/GaussianFactorGraph.h</includes>
    <includes id="a00680" name="VectorValues.h" local="no" imported="no">gtsam/linear/VectorValues.h</includes>
    <includes id="a00887" name="NonlinearFactorGraph.h" local="no" imported="no">gtsam/nonlinear/NonlinearFactorGraph.h</includes>
    <class kind="struct">gtsam::InitializePose3</class>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>lago.h</name>
    <path>/Users/dellaert/git/gtsam/gtsam/slam/</path>
    <filename>a00977</filename>
    <includes id="a00887" name="NonlinearFactorGraph.h" local="no" imported="no">gtsam/nonlinear/NonlinearFactorGraph.h</includes>
    <includes id="a00560" name="GaussianFactorGraph.h" local="no" imported="no">gtsam/linear/GaussianFactorGraph.h</includes>
    <includes id="a00680" name="VectorValues.h" local="no" imported="no">gtsam/linear/VectorValues.h</includes>
    <includes id="a00437" name="graph.h" local="no" imported="no">gtsam/inference/graph.h</includes>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>PoseRotationPrior.h</name>
    <path>/Users/dellaert/git/gtsam/gtsam/slam/</path>
    <filename>a00986</filename>
    <includes id="a00881" name="NonlinearFactor.h" local="no" imported="no">gtsam/nonlinear/NonlinearFactor.h</includes>
    <class kind="class">gtsam::PoseRotationPrior</class>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>PoseTranslationPrior.h</name>
    <path>/Users/dellaert/git/gtsam/gtsam/slam/</path>
    <filename>a00989</filename>
    <includes id="a00881" name="NonlinearFactor.h" local="no" imported="no">gtsam/nonlinear/NonlinearFactor.h</includes>
    <class kind="class">gtsam::PoseTranslationPrior</class>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>PriorFactor.h</name>
    <path>/Users/dellaert/git/gtsam/gtsam/slam/</path>
    <filename>a00992</filename>
    <includes id="a00881" name="NonlinearFactor.h" local="no" imported="no">gtsam/nonlinear/NonlinearFactor.h</includes>
    <includes id="a00098" name="Testable.h" local="no" imported="no">gtsam/base/Testable.h</includes>
    <class kind="class">gtsam::PriorFactor</class>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>ProjectionFactor.h</name>
    <path>/Users/dellaert/git/gtsam/gtsam/slam/</path>
    <filename>a00995</filename>
    <includes id="a00881" name="NonlinearFactor.h" local="no" imported="no">gtsam/nonlinear/NonlinearFactor.h</includes>
    <includes id="a00344" name="SimpleCamera.h" local="no" imported="no">gtsam/geometry/SimpleCamera.h</includes>
    <class kind="class">gtsam::GenericProjectionFactor</class>
    <class kind="struct">gtsam::traits&lt; GenericProjectionFactor&lt; POSE, LANDMARK, CALIBRATION &gt; &gt;</class>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>RegularImplicitSchurFactor.h</name>
    <path>/Users/dellaert/git/gtsam/gtsam/slam/</path>
    <filename>a01001</filename>
    <includes id="a00266" name="CameraSet.h" local="no" imported="no">gtsam/geometry/CameraSet.h</includes>
    <includes id="a00605" name="JacobianFactor.h" local="no" imported="no">gtsam/linear/JacobianFactor.h</includes>
    <includes id="a00680" name="VectorValues.h" local="no" imported="no">gtsam/linear/VectorValues.h</includes>
    <class kind="class">gtsam::RegularImplicitSchurFactor</class>
    <class kind="struct">gtsam::traits&lt; RegularImplicitSchurFactor&lt; CAMERA &gt; &gt;</class>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>SmartFactorBase.h</name>
    <path>/Users/dellaert/git/gtsam/gtsam/slam/</path>
    <filename>a01007</filename>
    <includes id="a01001" name="RegularImplicitSchurFactor.h" local="no" imported="no">gtsam/slam/RegularImplicitSchurFactor.h</includes>
    <includes id="a00881" name="NonlinearFactor.h" local="no" imported="no">gtsam/nonlinear/NonlinearFactor.h</includes>
    <includes id="a00641" name="RegularHessianFactor.h" local="no" imported="no">gtsam/linear/RegularHessianFactor.h</includes>
    <includes id="a00266" name="CameraSet.h" local="no" imported="no">gtsam/geometry/CameraSet.h</includes>
    <class kind="class">gtsam::SmartFactorBase</class>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>SmartProjectionFactor.h</name>
    <path>/Users/dellaert/git/gtsam/gtsam/slam/</path>
    <filename>a01013</filename>
    <includes id="a01007" name="SmartFactorBase.h" local="no" imported="no">gtsam/slam/SmartFactorBase.h</includes>
    <includes id="a00368" name="triangulation.h" local="no" imported="no">gtsam/geometry/triangulation.h</includes>
    <includes id="a00944" name="dataset.h" local="no" imported="no">gtsam/slam/dataset.h</includes>
    <class kind="class">gtsam::SmartProjectionFactor</class>
    <class kind="struct">gtsam::traits&lt; SmartProjectionFactor&lt; CAMERA &gt; &gt;</class>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>SmartProjectionPoseFactor.h</name>
    <path>/Users/dellaert/git/gtsam/gtsam/slam/</path>
    <filename>a01016</filename>
    <includes id="a01013" name="SmartProjectionFactor.h" local="no" imported="no">gtsam/slam/SmartProjectionFactor.h</includes>
    <class kind="class">gtsam::SmartProjectionPoseFactor</class>
    <class kind="struct">gtsam::traits&lt; SmartProjectionPoseFactor&lt; CALIBRATION &gt; &gt;</class>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>SymbolicBayesNet.cpp</name>
    <path>/Users/dellaert/git/gtsam/gtsam/symbolic/</path>
    <filename>a01025</filename>
    <includes id="a01028" name="SymbolicBayesNet.h" local="no" imported="no">gtsam/symbolic/SymbolicBayesNet.h</includes>
    <includes id="a01040" name="SymbolicConditional.h" local="no" imported="no">gtsam/symbolic/SymbolicConditional.h</includes>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>SymbolicBayesNet.h</name>
    <path>/Users/dellaert/git/gtsam/gtsam/symbolic/</path>
    <filename>a01028</filename>
    <includes id="a01040" name="SymbolicConditional.h" local="no" imported="no">gtsam/symbolic/SymbolicConditional.h</includes>
    <includes id="a00431" name="FactorGraph.h" local="no" imported="no">gtsam/inference/FactorGraph.h</includes>
    <includes id="a00119" name="types.h" local="no" imported="no">gtsam/base/types.h</includes>
    <class kind="class">gtsam::SymbolicBayesNet</class>
    <class kind="struct">gtsam::traits&lt; SymbolicBayesNet &gt;</class>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>SymbolicBayesTree.h</name>
    <path>/Users/dellaert/git/gtsam/gtsam/symbolic/</path>
    <filename>a01034</filename>
    <includes id="a01028" name="SymbolicBayesNet.h" local="no" imported="no">gtsam/symbolic/SymbolicBayesNet.h</includes>
    <includes id="a01061" name="SymbolicFactorGraph.h" local="no" imported="no">gtsam/symbolic/SymbolicFactorGraph.h</includes>
    <includes id="a00389" name="BayesTree.h" local="no" imported="no">gtsam/inference/BayesTree.h</includes>
    <includes id="a00395" name="BayesTreeCliqueBase.h" local="no" imported="no">gtsam/inference/BayesTreeCliqueBase.h</includes>
    <class kind="class">gtsam::SymbolicBayesTreeClique</class>
    <class kind="class">gtsam::SymbolicBayesTree</class>
    <class kind="struct">gtsam::traits&lt; SymbolicBayesTreeClique &gt;</class>
    <class kind="struct">gtsam::traits&lt; SymbolicBayesTree &gt;</class>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>SymbolicConditional.cpp</name>
    <path>/Users/dellaert/git/gtsam/gtsam/symbolic/</path>
    <filename>a01037</filename>
    <includes id="a01040" name="SymbolicConditional.h" local="no" imported="no">gtsam/symbolic/SymbolicConditional.h</includes>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>SymbolicConditional.h</name>
    <path>/Users/dellaert/git/gtsam/gtsam/symbolic/</path>
    <filename>a01040</filename>
    <includes id="a01055" name="SymbolicFactor.h" local="no" imported="no">gtsam/symbolic/SymbolicFactor.h</includes>
    <includes id="a00407" name="Conditional.h" local="no" imported="no">gtsam/inference/Conditional.h</includes>
    <includes id="a00098" name="Testable.h" local="no" imported="no">gtsam/base/Testable.h</includes>
    <includes id="a00119" name="types.h" local="no" imported="no">gtsam/base/types.h</includes>
    <class kind="class">gtsam::SymbolicConditional</class>
    <class kind="struct">gtsam::traits&lt; SymbolicConditional &gt;</class>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>SymbolicEliminationTree.cpp</name>
    <path>/Users/dellaert/git/gtsam/gtsam/symbolic/</path>
    <filename>a01043</filename>
    <includes id="a01046" name="SymbolicEliminationTree.h" local="no" imported="no">gtsam/symbolic/SymbolicEliminationTree.h</includes>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>SymbolicEliminationTree.h</name>
    <path>/Users/dellaert/git/gtsam/gtsam/symbolic/</path>
    <filename>a01046</filename>
    <includes id="a01028" name="SymbolicBayesNet.h" local="no" imported="no">gtsam/symbolic/SymbolicBayesNet.h</includes>
    <includes id="a01061" name="SymbolicFactorGraph.h" local="no" imported="no">gtsam/symbolic/SymbolicFactorGraph.h</includes>
    <includes id="a00419" name="EliminationTree.h" local="no" imported="no">gtsam/inference/EliminationTree.h</includes>
    <class kind="class">gtsam::SymbolicEliminationTree</class>
    <class kind="struct">gtsam::traits&lt; SymbolicEliminationTree &gt;</class>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>SymbolicFactor-inst.h</name>
    <path>/Users/dellaert/git/gtsam/gtsam/symbolic/</path>
    <filename>a01049</filename>
    <includes id="a01055" name="SymbolicFactor.h" local="no" imported="no">gtsam/symbolic/SymbolicFactor.h</includes>
    <includes id="a01040" name="SymbolicConditional.h" local="no" imported="no">gtsam/symbolic/SymbolicConditional.h</includes>
    <includes id="a00425" name="Factor.h" local="no" imported="no">gtsam/inference/Factor.h</includes>
    <includes id="a00461" name="Key.h" local="no" imported="no">gtsam/inference/Key.h</includes>
    <includes id="a00113" name="timing.h" local="no" imported="no">gtsam/base/timing.h</includes>
    <namespace>gtsam</namespace>
    <member kind="function">
      <type>std::pair&lt; boost::shared_ptr&lt; SymbolicConditional &gt;, boost::shared_ptr&lt; SymbolicFactor &gt; &gt;</type>
      <name>EliminateSymbolic</name>
      <anchorfile>a01049.html</anchorfile>
      <anchor>a720590b344420f823118dfa632beccf6</anchor>
      <arglist>(const FactorGraph&lt; FACTOR &gt; &amp;factors, const Ordering &amp;keys)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>SymbolicFactor.cpp</name>
    <path>/Users/dellaert/git/gtsam/gtsam/symbolic/</path>
    <filename>a01052</filename>
    <includes id="a00044" name="FastVector.h" local="no" imported="no">gtsam/base/FastVector.h</includes>
    <includes id="a00479" name="Ordering.h" local="no" imported="no">gtsam/inference/Ordering.h</includes>
    <includes id="a01055" name="SymbolicFactor.h" local="no" imported="no">gtsam/symbolic/SymbolicFactor.h</includes>
    <includes id="a01040" name="SymbolicConditional.h" local="no" imported="no">gtsam/symbolic/SymbolicConditional.h</includes>
    <includes id="a01061" name="SymbolicFactorGraph.h" local="no" imported="no">gtsam/symbolic/SymbolicFactorGraph.h</includes>
    <includes id="a01049" name="SymbolicFactor-inst.h" local="no" imported="no">gtsam/symbolic/SymbolicFactor-inst.h</includes>
    <namespace>gtsam</namespace>
    <member kind="function">
      <type>std::pair&lt; boost::shared_ptr&lt; SymbolicConditional &gt;, boost::shared_ptr&lt; SymbolicFactor &gt; &gt;</type>
      <name>EliminateSymbolic</name>
      <anchorfile>a01405.html</anchorfile>
      <anchor>a659f20993995258b1405737e375efd10</anchor>
      <arglist>(const SymbolicFactorGraph &amp;factors, const Ordering &amp;keys)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>SymbolicFactor.h</name>
    <path>/Users/dellaert/git/gtsam/gtsam/symbolic/</path>
    <filename>a01055</filename>
    <includes id="a00425" name="Factor.h" local="no" imported="no">gtsam/inference/Factor.h</includes>
    <includes id="a00461" name="Key.h" local="no" imported="no">gtsam/inference/Key.h</includes>
    <includes id="a00098" name="Testable.h" local="no" imported="no">gtsam/base/Testable.h</includes>
    <class kind="class">gtsam::SymbolicFactor</class>
    <class kind="struct">gtsam::traits&lt; SymbolicFactor &gt;</class>
    <namespace>gtsam</namespace>
    <member kind="function">
      <type>std::pair&lt; boost::shared_ptr&lt; SymbolicConditional &gt;, boost::shared_ptr&lt; SymbolicFactor &gt; &gt;</type>
      <name>EliminateSymbolic</name>
      <anchorfile>a01405.html</anchorfile>
      <anchor>a659f20993995258b1405737e375efd10</anchor>
      <arglist>(const SymbolicFactorGraph &amp;factors, const Ordering &amp;keys)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>SymbolicFactorGraph.cpp</name>
    <path>/Users/dellaert/git/gtsam/gtsam/symbolic/</path>
    <filename>a01058</filename>
    <includes id="a01061" name="SymbolicFactorGraph.h" local="no" imported="no">gtsam/symbolic/SymbolicFactorGraph.h</includes>
    <includes id="a01046" name="SymbolicEliminationTree.h" local="no" imported="no">gtsam/symbolic/SymbolicEliminationTree.h</includes>
    <includes id="a01073" name="SymbolicJunctionTree.h" local="no" imported="no">gtsam/symbolic/SymbolicJunctionTree.h</includes>
    <includes id="a01034" name="SymbolicBayesTree.h" local="no" imported="no">gtsam/symbolic/SymbolicBayesTree.h</includes>
    <includes id="a01040" name="SymbolicConditional.h" local="no" imported="no">gtsam/symbolic/SymbolicConditional.h</includes>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>SymbolicFactorGraph.h</name>
    <path>/Users/dellaert/git/gtsam/gtsam/symbolic/</path>
    <filename>a01061</filename>
    <includes id="a01055" name="SymbolicFactor.h" local="no" imported="no">gtsam/symbolic/SymbolicFactor.h</includes>
    <includes id="a00431" name="FactorGraph.h" local="no" imported="no">gtsam/inference/FactorGraph.h</includes>
    <includes id="a00413" name="EliminateableFactorGraph.h" local="no" imported="no">gtsam/inference/EliminateableFactorGraph.h</includes>
    <includes id="a00119" name="types.h" local="no" imported="no">gtsam/base/types.h</includes>
    <class kind="struct">gtsam::EliminationTraits&lt; SymbolicFactorGraph &gt;</class>
    <class kind="class">gtsam::SymbolicFactorGraph</class>
    <class kind="struct">gtsam::traits&lt; SymbolicFactorGraph &gt;</class>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>SymbolicISAM.cpp</name>
    <path>/Users/dellaert/git/gtsam/gtsam/symbolic/</path>
    <filename>a01064</filename>
    <includes id="a01067" name="SymbolicISAM.h" local="no" imported="no">gtsam/symbolic/SymbolicISAM.h</includes>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>SymbolicISAM.h</name>
    <path>/Users/dellaert/git/gtsam/gtsam/symbolic/</path>
    <filename>a01067</filename>
    <includes id="a01034" name="SymbolicBayesTree.h" local="no" imported="no">gtsam/symbolic/SymbolicBayesTree.h</includes>
    <includes id="a00449" name="ISAM.h" local="no" imported="no">gtsam/inference/ISAM.h</includes>
    <class kind="class">gtsam::SymbolicISAM</class>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>SymbolicJunctionTree.cpp</name>
    <path>/Users/dellaert/git/gtsam/gtsam/symbolic/</path>
    <filename>a01070</filename>
    <includes id="a00452" name="JunctionTree-inst.h" local="no" imported="no">gtsam/inference/JunctionTree-inst.h</includes>
    <includes id="a01073" name="SymbolicJunctionTree.h" local="no" imported="no">gtsam/symbolic/SymbolicJunctionTree.h</includes>
    <includes id="a01046" name="SymbolicEliminationTree.h" local="no" imported="no">gtsam/symbolic/SymbolicEliminationTree.h</includes>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>SymbolicJunctionTree.h</name>
    <path>/Users/dellaert/git/gtsam/gtsam/symbolic/</path>
    <filename>a01073</filename>
    <includes id="a01061" name="SymbolicFactorGraph.h" local="no" imported="no">gtsam/symbolic/SymbolicFactorGraph.h</includes>
    <includes id="a01034" name="SymbolicBayesTree.h" local="no" imported="no">gtsam/symbolic/SymbolicBayesTree.h</includes>
    <includes id="a00455" name="JunctionTree.h" local="no" imported="no">gtsam/inference/JunctionTree.h</includes>
    <class kind="class">gtsam::SymbolicJunctionTree</class>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>BTree.h</name>
    <path>/Users/dellaert/git/gtsam/gtsam_unstable/base/</path>
    <filename>a01091</filename>
    <class kind="class">gtsam::BTree</class>
    <class kind="class">gtsam::BTree::const_iterator</class>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>dllexport.h</name>
    <path>/Users/dellaert/git/gtsam/gtsam_unstable/base/</path>
    <filename>a01094</filename>
  </compound>
  <compound kind="file">
    <name>DSF.h</name>
    <path>/Users/dellaert/git/gtsam/gtsam_unstable/base/</path>
    <filename>a01097</filename>
    <includes id="a01091" name="BTree.h" local="no" imported="no">gtsam_unstable/base/BTree.h</includes>
    <class kind="class">gtsam::DSF</class>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>Dummy.h</name>
    <path>/Users/dellaert/git/gtsam/gtsam_unstable/base/</path>
    <filename>a01103</filename>
    <includes id="a01076" name="global_includes.h" local="no" imported="no">gtsam/global_includes.h</includes>
    <includes id="a01094" name="dllexport.h" local="no" imported="no">gtsam_unstable/base/dllexport.h</includes>
    <class kind="class">gtsam::Dummy</class>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>FixedVector.h</name>
    <path>/Users/dellaert/git/gtsam/gtsam_unstable/base/</path>
    <filename>a01106</filename>
    <includes id="a00128" name="Vector.h" local="no" imported="no">gtsam/base/Vector.h</includes>
    <class kind="class">gtsam::FixedVector</class>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>Constraint.h</name>
    <path>/Users/dellaert/git/gtsam/gtsam_unstable/discrete/</path>
    <filename>a01118</filename>
    <includes id="a01094" name="dllexport.h" local="no" imported="no">gtsam_unstable/base/dllexport.h</includes>
    <includes id="a00185" name="DiscreteFactor.h" local="no" imported="no">gtsam/discrete/DiscreteFactor.h</includes>
    <class kind="class">gtsam::Constraint</class>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>DynamicsPriors.h</name>
    <path>/Users/dellaert/git/gtsam/gtsam_unstable/dynamics/</path>
    <filename>a01361</filename>
    <includes id="a01316" name="PartialPriorFactor.h" local="no" imported="no">gtsam_unstable/slam/PartialPriorFactor.h</includes>
    <includes id="a01376" name="PoseRTV.h" local="no" imported="no">gtsam_unstable/dynamics/PoseRTV.h</includes>
    <class kind="class">gtsam::DHeightPrior</class>
    <class kind="class">gtsam::DRollPrior</class>
    <class kind="class">gtsam::VelocityPrior</class>
    <class kind="class">gtsam::DGroundConstraint</class>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>FullIMUFactor.h</name>
    <path>/Users/dellaert/git/gtsam/gtsam_unstable/dynamics/</path>
    <filename>a01364</filename>
    <includes id="a00077" name="numericalDerivative.h" local="no" imported="no">gtsam/base/numericalDerivative.h</includes>
    <includes id="a00881" name="NonlinearFactor.h" local="no" imported="no">gtsam/nonlinear/NonlinearFactor.h</includes>
    <includes id="a01376" name="PoseRTV.h" local="no" imported="no">gtsam_unstable/dynamics/PoseRTV.h</includes>
    <class kind="class">gtsam::FullIMUFactor</class>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>Pendulum.h</name>
    <path>/Users/dellaert/git/gtsam/gtsam_unstable/dynamics/</path>
    <filename>a01370</filename>
    <includes id="a00881" name="NonlinearFactor.h" local="no" imported="no">gtsam/nonlinear/NonlinearFactor.h</includes>
    <class kind="class">gtsam::PendulumFactor1</class>
    <class kind="class">gtsam::PendulumFactor2</class>
    <class kind="class">gtsam::PendulumFactorPk</class>
    <class kind="class">gtsam::PendulumFactorPk1</class>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>PoseRTV.cpp</name>
    <path>/Users/dellaert/git/gtsam/gtsam_unstable/dynamics/</path>
    <filename>a01373</filename>
    <includes id="a01376" name="PoseRTV.h" local="no" imported="no">gtsam_unstable/dynamics/PoseRTV.h</includes>
    <includes id="a00311" name="Pose2.h" local="no" imported="no">gtsam/geometry/Pose2.h</includes>
    <includes id="a00128" name="Vector.h" local="no" imported="no">gtsam/base/Vector.h</includes>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>PoseRTV.h</name>
    <path>/Users/dellaert/git/gtsam/gtsam_unstable/dynamics/</path>
    <filename>a01376</filename>
    <includes id="a01094" name="dllexport.h" local="no" imported="no">gtsam_unstable/base/dllexport.h</includes>
    <includes id="a00317" name="Pose3.h" local="no" imported="no">gtsam/geometry/Pose3.h</includes>
    <includes id="a00083" name="ProductLieGroup.h" local="no" imported="no">gtsam/base/ProductLieGroup.h</includes>
    <class kind="class">gtsam::PoseRTV</class>
    <class kind="struct">gtsam::traits&lt; PoseRTV &gt;</class>
    <class kind="struct">gtsam::Range</class>
    <class kind="struct">gtsam::Range&lt; PoseRTV, PoseRTV &gt;</class>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>VelocityConstraint.h</name>
    <path>/Users/dellaert/git/gtsam/gtsam_unstable/dynamics/</path>
    <filename>a01385</filename>
    <includes id="a00077" name="numericalDerivative.h" local="no" imported="no">gtsam/base/numericalDerivative.h</includes>
    <includes id="a00881" name="NonlinearFactor.h" local="no" imported="no">gtsam/nonlinear/NonlinearFactor.h</includes>
    <includes id="a01376" name="PoseRTV.h" local="no" imported="no">gtsam_unstable/dynamics/PoseRTV.h</includes>
    <class kind="class">gtsam::VelocityConstraint</class>
    <namespace>gtsam</namespace>
    <member kind="enumeration">
      <type></type>
      <name>IntegrationMode</name>
      <anchorfile>a01385.html</anchorfile>
      <anchor>aee7e6f67ebdd7ddfeb5076d39a05077a</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>VelocityConstraint3.h</name>
    <path>/Users/dellaert/git/gtsam/gtsam_unstable/dynamics/</path>
    <filename>a01388</filename>
    <includes id="a00881" name="NonlinearFactor.h" local="no" imported="no">gtsam/nonlinear/NonlinearFactor.h</includes>
    <class kind="class">gtsam::VelocityConstraint3</class>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>ActiveSetSolver-inl.h</name>
    <path>/Users/dellaert/git/gtsam/gtsam_unstable/linear/</path>
    <filename>a01145</filename>
    <includes id="a01157" name="InfeasibleInitialValues.h" local="no" imported="no">gtsam_unstable/linear/InfeasibleInitialValues.h</includes>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>ActiveSetSolver.h</name>
    <path>/Users/dellaert/git/gtsam/gtsam_unstable/linear/</path>
    <filename>a01148</filename>
    <includes id="a00560" name="GaussianFactorGraph.h" local="no" imported="no">gtsam/linear/GaussianFactorGraph.h</includes>
    <includes id="a01154" name="InequalityFactorGraph.h" local="no" imported="no">gtsam_unstable/linear/InequalityFactorGraph.h</includes>
    <includes id="a01145" name="ActiveSetSolver-inl.h" local="no" imported="no">gtsam_unstable/linear/ActiveSetSolver-inl.h</includes>
    <class kind="class">gtsam::ActiveSetSolver</class>
    <class kind="struct">gtsam::ActiveSetSolver::State</class>
    <namespace>gtsam</namespace>
    <member kind="function">
      <type>Key</type>
      <name>maxKey</name>
      <anchorfile>a01405.html</anchorfile>
      <anchor>a9be309f741b77e5406429e41f666aa5a</anchor>
      <arglist>(const PROBLEM &amp;problem)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>EqualityFactorGraph.h</name>
    <path>/Users/dellaert/git/gtsam/gtsam_unstable/linear/</path>
    <filename>a01151</filename>
    <includes id="a00431" name="FactorGraph.h" local="no" imported="no">gtsam/inference/FactorGraph.h</includes>
    <includes id="a01166" name="LinearEquality.h" local="no" imported="no">gtsam_unstable/linear/LinearEquality.h</includes>
    <class kind="class">gtsam::EqualityFactorGraph</class>
    <class kind="struct">gtsam::traits&lt; EqualityFactorGraph &gt;</class>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>InequalityFactorGraph.h</name>
    <path>/Users/dellaert/git/gtsam/gtsam_unstable/linear/</path>
    <filename>a01154</filename>
    <includes id="a01169" name="LinearInequality.h" local="no" imported="no">gtsam_unstable/linear/LinearInequality.h</includes>
    <includes id="a00680" name="VectorValues.h" local="no" imported="no">gtsam/linear/VectorValues.h</includes>
    <includes id="a00431" name="FactorGraph.h" local="no" imported="no">gtsam/inference/FactorGraph.h</includes>
    <class kind="class">gtsam::InequalityFactorGraph</class>
    <class kind="struct">gtsam::traits&lt; InequalityFactorGraph &gt;</class>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>InfeasibleInitialValues.h</name>
    <path>/Users/dellaert/git/gtsam/gtsam_unstable/linear/</path>
    <filename>a01157</filename>
    <class kind="class">gtsam::InfeasibleInitialValues</class>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>InfeasibleOrUnboundedProblem.h</name>
    <path>/Users/dellaert/git/gtsam/gtsam_unstable/linear/</path>
    <filename>a01160</filename>
    <class kind="class">gtsam::InfeasibleOrUnboundedProblem</class>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>LinearCost.h</name>
    <path>/Users/dellaert/git/gtsam/gtsam_unstable/linear/</path>
    <filename>a01163</filename>
    <includes id="a00605" name="JacobianFactor.h" local="no" imported="no">gtsam/linear/JacobianFactor.h</includes>
    <class kind="class">gtsam::LinearCost</class>
    <class kind="struct">gtsam::traits&lt; LinearCost &gt;</class>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>LinearEquality.h</name>
    <path>/Users/dellaert/git/gtsam/gtsam_unstable/linear/</path>
    <filename>a01166</filename>
    <includes id="a00605" name="JacobianFactor.h" local="no" imported="no">gtsam/linear/JacobianFactor.h</includes>
    <class kind="class">gtsam::LinearEquality</class>
    <class kind="struct">gtsam::traits&lt; LinearEquality &gt;</class>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>LinearInequality.h</name>
    <path>/Users/dellaert/git/gtsam/gtsam_unstable/linear/</path>
    <filename>a01169</filename>
    <includes id="a00605" name="JacobianFactor.h" local="no" imported="no">gtsam/linear/JacobianFactor.h</includes>
    <includes id="a00680" name="VectorValues.h" local="no" imported="no">gtsam/linear/VectorValues.h</includes>
    <class kind="class">gtsam::LinearInequality</class>
    <class kind="struct">gtsam::traits&lt; LinearInequality &gt;</class>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>LP.h</name>
    <path>/Users/dellaert/git/gtsam/gtsam_unstable/linear/</path>
    <filename>a01172</filename>
    <includes id="a01163" name="LinearCost.h" local="no" imported="no">gtsam_unstable/linear/LinearCost.h</includes>
    <includes id="a01151" name="EqualityFactorGraph.h" local="no" imported="no">gtsam_unstable/linear/EqualityFactorGraph.h</includes>
    <includes id="a01154" name="InequalityFactorGraph.h" local="no" imported="no">gtsam_unstable/linear/InequalityFactorGraph.h</includes>
    <class kind="struct">gtsam::LP</class>
    <class kind="struct">gtsam::traits&lt; LP &gt;</class>
    <namespace>gtsam</namespace>
    <member kind="typedef">
      <type>std::map&lt; Key, size_t &gt;</type>
      <name>KeyDimMap</name>
      <anchorfile>a01405.html</anchorfile>
      <anchor>a56e7423b122a2ac2a9ba1a07546516a5</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>LPInitSolver.h</name>
    <path>/Users/dellaert/git/gtsam/gtsam_unstable/linear/</path>
    <filename>a01178</filename>
    <includes id="a01172" name="LP.h" local="no" imported="no">gtsam_unstable/linear/LP.h</includes>
    <includes id="a00560" name="GaussianFactorGraph.h" local="no" imported="no">gtsam/linear/GaussianFactorGraph.h</includes>
    <class kind="class">gtsam::LPInitSolver</class>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>LPSolver.cpp</name>
    <path>/Users/dellaert/git/gtsam/gtsam_unstable/linear/</path>
    <filename>a01181</filename>
    <includes id="a01184" name="LPSolver.h" local="no" imported="no">gtsam_unstable/linear/LPSolver.h</includes>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>LPSolver.h</name>
    <path>/Users/dellaert/git/gtsam/gtsam_unstable/linear/</path>
    <filename>a01184</filename>
    <includes id="a01172" name="LP.h" local="no" imported="no">gtsam_unstable/linear/LP.h</includes>
    <includes id="a01148" name="ActiveSetSolver.h" local="no" imported="no">gtsam_unstable/linear/ActiveSetSolver.h</includes>
    <includes id="a01178" name="LPInitSolver.h" local="no" imported="no">gtsam_unstable/linear/LPInitSolver.h</includes>
    <class kind="struct">gtsam::LPPolicy</class>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>QP.h</name>
    <path>/Users/dellaert/git/gtsam/gtsam_unstable/linear/</path>
    <filename>a01187</filename>
    <includes id="a00560" name="GaussianFactorGraph.h" local="no" imported="no">gtsam/linear/GaussianFactorGraph.h</includes>
    <includes id="a01151" name="EqualityFactorGraph.h" local="no" imported="no">gtsam_unstable/linear/EqualityFactorGraph.h</includes>
    <includes id="a01154" name="InequalityFactorGraph.h" local="no" imported="no">gtsam_unstable/linear/InequalityFactorGraph.h</includes>
    <includes id="a00944" name="dataset.h" local="no" imported="no">gtsam/slam/dataset.h</includes>
    <class kind="struct">gtsam::QP</class>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>QPInitSolver.h</name>
    <path>/Users/dellaert/git/gtsam/gtsam_unstable/linear/</path>
    <filename>a01190</filename>
    <includes id="a01178" name="LPInitSolver.h" local="no" imported="no">gtsam_unstable/linear/LPInitSolver.h</includes>
    <class kind="class">gtsam::QPInitSolver</class>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>QPSolver.cpp</name>
    <path>/Users/dellaert/git/gtsam/gtsam_unstable/linear/</path>
    <filename>a01193</filename>
    <includes id="a01196" name="QPSolver.h" local="no" imported="no">gtsam_unstable/linear/QPSolver.h</includes>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>QPSolver.h</name>
    <path>/Users/dellaert/git/gtsam/gtsam_unstable/linear/</path>
    <filename>a01196</filename>
    <includes id="a01187" name="QP.h" local="no" imported="no">gtsam_unstable/linear/QP.h</includes>
    <includes id="a01148" name="ActiveSetSolver.h" local="no" imported="no">gtsam_unstable/linear/ActiveSetSolver.h</includes>
    <includes id="a01190" name="QPInitSolver.h" local="no" imported="no">gtsam_unstable/linear/QPInitSolver.h</includes>
    <class kind="struct">gtsam::QPPolicy</class>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>QPSParserException.h</name>
    <path>/Users/dellaert/git/gtsam/gtsam_unstable/linear/</path>
    <filename>a01205</filename>
    <class kind="class">gtsam::QPSParserException</class>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>BatchFixedLagSmoother.cpp</name>
    <path>/Users/dellaert/git/gtsam/gtsam_unstable/nonlinear/</path>
    <filename>a01208</filename>
    <includes id="a01211" name="BatchFixedLagSmoother.h" local="no" imported="no">gtsam_unstable/nonlinear/BatchFixedLagSmoother.h</includes>
    <includes id="a00857" name="LinearContainerFactor.h" local="no" imported="no">gtsam/nonlinear/LinearContainerFactor.h</includes>
    <includes id="a00572" name="GaussianJunctionTree.h" local="no" imported="no">gtsam/linear/GaussianJunctionTree.h</includes>
    <includes id="a00560" name="GaussianFactorGraph.h" local="no" imported="no">gtsam/linear/GaussianFactorGraph.h</includes>
    <includes id="a00554" name="GaussianFactor.h" local="no" imported="no">gtsam/linear/GaussianFactor.h</includes>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>BatchFixedLagSmoother.h</name>
    <path>/Users/dellaert/git/gtsam/gtsam_unstable/nonlinear/</path>
    <filename>a01211</filename>
    <includes id="a01247" name="FixedLagSmoother.h" local="no" imported="no">gtsam_unstable/nonlinear/FixedLagSmoother.h</includes>
    <includes id="a00845" name="LevenbergMarquardtOptimizer.h" local="no" imported="no">gtsam/nonlinear/LevenbergMarquardtOptimizer.h</includes>
    <class kind="class">gtsam::BatchFixedLagSmoother</class>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>ConcurrentBatchFilter.cpp</name>
    <path>/Users/dellaert/git/gtsam/gtsam_unstable/nonlinear/</path>
    <filename>a01214</filename>
    <includes id="a01217" name="ConcurrentBatchFilter.h" local="no" imported="no">gtsam_unstable/nonlinear/ConcurrentBatchFilter.h</includes>
    <includes id="a00857" name="LinearContainerFactor.h" local="no" imported="no">gtsam/nonlinear/LinearContainerFactor.h</includes>
    <includes id="a00572" name="GaussianJunctionTree.h" local="no" imported="no">gtsam/linear/GaussianJunctionTree.h</includes>
    <includes id="a00113" name="timing.h" local="no" imported="no">gtsam/base/timing.h</includes>
    <includes id="a00020" name="debug.h" local="no" imported="no">gtsam/base/debug.h</includes>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>ConcurrentBatchFilter.h</name>
    <path>/Users/dellaert/git/gtsam/gtsam_unstable/nonlinear/</path>
    <filename>a01217</filename>
    <includes id="a01229" name="ConcurrentFilteringAndSmoothing.h" local="no" imported="no">gtsam_unstable/nonlinear/ConcurrentFilteringAndSmoothing.h</includes>
    <includes id="a00845" name="LevenbergMarquardtOptimizer.h" local="no" imported="no">gtsam/nonlinear/LevenbergMarquardtOptimizer.h</includes>
    <class kind="class">gtsam::ConcurrentBatchFilter</class>
    <class kind="struct">gtsam::ConcurrentBatchFilter::Result</class>
    <class kind="struct">gtsam::traits&lt; ConcurrentBatchFilter &gt;</class>
    <namespace>gtsam</namespace>
    <member kind="typedef">
      <type>ConcurrentBatchFilter::Result</type>
      <name>ConcurrentBatchFilterResult</name>
      <anchorfile>a01405.html</anchorfile>
      <anchor>a48e3e10fd7b2e4e28d57370b8ee63c75</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>ConcurrentBatchSmoother.cpp</name>
    <path>/Users/dellaert/git/gtsam/gtsam_unstable/nonlinear/</path>
    <filename>a01220</filename>
    <includes id="a01223" name="ConcurrentBatchSmoother.h" local="no" imported="no">gtsam_unstable/nonlinear/ConcurrentBatchSmoother.h</includes>
    <includes id="a00857" name="LinearContainerFactor.h" local="no" imported="no">gtsam/nonlinear/LinearContainerFactor.h</includes>
    <includes id="a00572" name="GaussianJunctionTree.h" local="no" imported="no">gtsam/linear/GaussianJunctionTree.h</includes>
    <includes id="a00113" name="timing.h" local="no" imported="no">gtsam/base/timing.h</includes>
    <includes id="a00020" name="debug.h" local="no" imported="no">gtsam/base/debug.h</includes>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>ConcurrentBatchSmoother.h</name>
    <path>/Users/dellaert/git/gtsam/gtsam_unstable/nonlinear/</path>
    <filename>a01223</filename>
    <includes id="a01229" name="ConcurrentFilteringAndSmoothing.h" local="no" imported="no">gtsam_unstable/nonlinear/ConcurrentFilteringAndSmoothing.h</includes>
    <includes id="a00845" name="LevenbergMarquardtOptimizer.h" local="no" imported="no">gtsam/nonlinear/LevenbergMarquardtOptimizer.h</includes>
    <class kind="class">gtsam::ConcurrentBatchSmoother</class>
    <class kind="struct">gtsam::ConcurrentBatchSmoother::Result</class>
    <class kind="struct">gtsam::traits&lt; ConcurrentBatchSmoother &gt;</class>
    <namespace>gtsam</namespace>
    <member kind="typedef">
      <type>ConcurrentBatchSmoother::Result</type>
      <name>ConcurrentBatchSmootherResult</name>
      <anchorfile>a01405.html</anchorfile>
      <anchor>a630a70c8307aedd4cca4556d751581ff</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>ConcurrentFilteringAndSmoothing.cpp</name>
    <path>/Users/dellaert/git/gtsam/gtsam_unstable/nonlinear/</path>
    <filename>a01226</filename>
    <includes id="a01229" name="ConcurrentFilteringAndSmoothing.h" local="no" imported="no">gtsam_unstable/nonlinear/ConcurrentFilteringAndSmoothing.h</includes>
    <includes id="a00857" name="LinearContainerFactor.h" local="no" imported="no">gtsam/nonlinear/LinearContainerFactor.h</includes>
    <namespace>gtsam</namespace>
    <member kind="function">
      <type>NonlinearFactorGraph</type>
      <name>calculateMarginalFactors</name>
      <anchorfile>a01226.html</anchorfile>
      <anchor>acf832591bd903048a42ff3103c78416a</anchor>
      <arglist>(const NonlinearFactorGraph &amp;graph, const Values &amp;theta, const KeySet &amp;remainingKeys, const GaussianFactorGraph::Eliminate &amp;eliminateFunction)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>ConcurrentFilteringAndSmoothing.h</name>
    <path>/Users/dellaert/git/gtsam/gtsam_unstable/nonlinear/</path>
    <filename>a01229</filename>
    <includes id="a01094" name="dllexport.h" local="no" imported="no">gtsam_unstable/base/dllexport.h</includes>
    <includes id="a00887" name="NonlinearFactorGraph.h" local="no" imported="no">gtsam/nonlinear/NonlinearFactorGraph.h</includes>
    <includes id="a00917" name="Values.h" local="no" imported="no">gtsam/nonlinear/Values.h</includes>
    <includes id="a00560" name="GaussianFactorGraph.h" local="no" imported="no">gtsam/linear/GaussianFactorGraph.h</includes>
    <class kind="class">gtsam::ConcurrentFilter</class>
    <class kind="class">gtsam::ConcurrentSmoother</class>
    <namespace>gtsam</namespace>
    <member kind="function">
      <type>NonlinearFactorGraph</type>
      <name>calculateMarginalFactors</name>
      <anchorfile>a01226.html</anchorfile>
      <anchor>acf832591bd903048a42ff3103c78416a</anchor>
      <arglist>(const NonlinearFactorGraph &amp;graph, const Values &amp;theta, const KeySet &amp;remainingKeys, const GaussianFactorGraph::Eliminate &amp;eliminateFunction)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>ConcurrentIncrementalFilter.cpp</name>
    <path>/Users/dellaert/git/gtsam/gtsam_unstable/nonlinear/</path>
    <filename>a01232</filename>
    <includes id="a00857" name="LinearContainerFactor.h" local="no" imported="no">gtsam/nonlinear/LinearContainerFactor.h</includes>
    <includes id="a00113" name="timing.h" local="no" imported="no">gtsam/base/timing.h</includes>
    <includes id="a00020" name="debug.h" local="no" imported="no">gtsam/base/debug.h</includes>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>ConcurrentIncrementalSmoother.cpp</name>
    <path>/Users/dellaert/git/gtsam/gtsam_unstable/nonlinear/</path>
    <filename>a01238</filename>
    <includes id="a01241" name="ConcurrentIncrementalSmoother.h" local="no" imported="no">gtsam_unstable/nonlinear/ConcurrentIncrementalSmoother.h</includes>
    <includes id="a00857" name="LinearContainerFactor.h" local="no" imported="no">gtsam/nonlinear/LinearContainerFactor.h</includes>
    <includes id="a00113" name="timing.h" local="no" imported="no">gtsam/base/timing.h</includes>
    <includes id="a00020" name="debug.h" local="no" imported="no">gtsam/base/debug.h</includes>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>ConcurrentIncrementalSmoother.h</name>
    <path>/Users/dellaert/git/gtsam/gtsam_unstable/nonlinear/</path>
    <filename>a01241</filename>
    <includes id="a01229" name="ConcurrentFilteringAndSmoothing.h" local="no" imported="no">gtsam_unstable/nonlinear/ConcurrentFilteringAndSmoothing.h</includes>
    <includes id="a00824" name="ISAM2.h" local="no" imported="no">gtsam/nonlinear/ISAM2.h</includes>
    <class kind="class">gtsam::ConcurrentIncrementalSmoother</class>
    <class kind="struct">gtsam::ConcurrentIncrementalSmoother::Result</class>
    <class kind="struct">gtsam::traits&lt; ConcurrentIncrementalSmoother &gt;</class>
    <namespace>gtsam</namespace>
    <member kind="typedef">
      <type>ConcurrentIncrementalSmoother::Result</type>
      <name>ConcurrentIncrementalSmootherResult</name>
      <anchorfile>a01405.html</anchorfile>
      <anchor>ab1c68e081eba4a337a9e97a11cfb1bdc</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>FixedLagSmoother.cpp</name>
    <path>/Users/dellaert/git/gtsam/gtsam_unstable/nonlinear/</path>
    <filename>a01244</filename>
    <includes id="a01247" name="FixedLagSmoother.h" local="no" imported="no">gtsam_unstable/nonlinear/FixedLagSmoother.h</includes>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>FixedLagSmoother.h</name>
    <path>/Users/dellaert/git/gtsam/gtsam_unstable/nonlinear/</path>
    <filename>a01247</filename>
    <includes id="a01094" name="dllexport.h" local="no" imported="no">gtsam_unstable/base/dllexport.h</includes>
    <includes id="a00461" name="Key.h" local="no" imported="no">gtsam/inference/Key.h</includes>
    <includes id="a00887" name="NonlinearFactorGraph.h" local="no" imported="no">gtsam/nonlinear/NonlinearFactorGraph.h</includes>
    <includes id="a00917" name="Values.h" local="no" imported="no">gtsam/nonlinear/Values.h</includes>
    <class kind="class">gtsam::FixedLagSmoother</class>
    <class kind="struct">gtsam::FixedLagSmoother::Result</class>
    <namespace>gtsam</namespace>
    <member kind="typedef">
      <type>FixedLagSmoother::KeyTimestampMap</type>
      <name>FixedLagSmootherKeyTimestampMap</name>
      <anchorfile>a01405.html</anchorfile>
      <anchor>aa2a302ee683dae9b50409588c07669d7</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>IncrementalFixedLagSmoother.cpp</name>
    <path>/Users/dellaert/git/gtsam/gtsam_unstable/nonlinear/</path>
    <filename>a01250</filename>
    <includes id="a01253" name="IncrementalFixedLagSmoother.h" local="no" imported="no">gtsam_unstable/nonlinear/IncrementalFixedLagSmoother.h</includes>
    <includes id="a00020" name="debug.h" local="no" imported="no">gtsam/base/debug.h</includes>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>IncrementalFixedLagSmoother.h</name>
    <path>/Users/dellaert/git/gtsam/gtsam_unstable/nonlinear/</path>
    <filename>a01253</filename>
    <includes id="a01247" name="FixedLagSmoother.h" local="no" imported="no">gtsam_unstable/nonlinear/FixedLagSmoother.h</includes>
    <includes id="a00824" name="ISAM2.h" local="no" imported="no">gtsam/nonlinear/ISAM2.h</includes>
    <class kind="class">gtsam::IncrementalFixedLagSmoother</class>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>LinearizedFactor.cpp</name>
    <path>/Users/dellaert/git/gtsam/gtsam_unstable/nonlinear/</path>
    <filename>a01256</filename>
    <includes id="a01259" name="LinearizedFactor.h" local="no" imported="no">gtsam_unstable/nonlinear/LinearizedFactor.h</includes>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>LinearizedFactor.h</name>
    <path>/Users/dellaert/git/gtsam/gtsam_unstable/nonlinear/</path>
    <filename>a01259</filename>
    <includes id="a01094" name="dllexport.h" local="no" imported="no">gtsam_unstable/base/dllexport.h</includes>
    <includes id="a00881" name="NonlinearFactor.h" local="no" imported="no">gtsam/nonlinear/NonlinearFactor.h</includes>
    <includes id="a00605" name="JacobianFactor.h" local="no" imported="no">gtsam/linear/JacobianFactor.h</includes>
    <includes id="a00581" name="HessianFactor.h" local="no" imported="no">gtsam/linear/HessianFactor.h</includes>
    <class kind="class">gtsam::LinearizedGaussianFactor</class>
    <class kind="class">gtsam::LinearizedJacobianFactor</class>
    <class kind="struct">gtsam::traits&lt; LinearizedJacobianFactor &gt;</class>
    <class kind="class">gtsam::LinearizedHessianFactor</class>
    <class kind="struct">gtsam::traits&lt; LinearizedHessianFactor &gt;</class>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>NonlinearClusterTree.h</name>
    <path>/Users/dellaert/git/gtsam/gtsam_unstable/nonlinear/</path>
    <filename>a01262</filename>
    <includes id="a00887" name="NonlinearFactorGraph.h" local="no" imported="no">gtsam/nonlinear/NonlinearFactorGraph.h</includes>
    <includes id="a00530" name="GaussianBayesTree.h" local="no" imported="no">gtsam/linear/GaussianBayesTree.h</includes>
    <class kind="class">gtsam::NonlinearClusterTree</class>
    <class kind="struct">gtsam::NonlinearClusterTree::NonlinearCluster</class>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>BetweenFactorEM.h</name>
    <path>/Users/dellaert/git/gtsam/gtsam_unstable/slam/</path>
    <filename>a01271</filename>
    <includes id="a00098" name="Testable.h" local="no" imported="no">gtsam/base/Testable.h</includes>
    <includes id="a00053" name="Lie.h" local="no" imported="no">gtsam/base/Lie.h</includes>
    <includes id="a00881" name="NonlinearFactor.h" local="no" imported="no">gtsam/nonlinear/NonlinearFactor.h</includes>
    <includes id="a00554" name="GaussianFactor.h" local="no" imported="no">gtsam/linear/GaussianFactor.h</includes>
    <includes id="a00863" name="Marginals.h" local="no" imported="no">gtsam/nonlinear/Marginals.h</includes>
    <class kind="class">gtsam::BetweenFactorEM</class>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>BiasedGPSFactor.h</name>
    <path>/Users/dellaert/git/gtsam/gtsam_unstable/slam/</path>
    <filename>a01274</filename>
    <includes id="a00317" name="Pose3.h" local="no" imported="no">gtsam/geometry/Pose3.h</includes>
    <includes id="a00881" name="NonlinearFactor.h" local="no" imported="no">gtsam/nonlinear/NonlinearFactor.h</includes>
    <class kind="class">gtsam::BiasedGPSFactor</class>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>DummyFactor.cpp</name>
    <path>/Users/dellaert/git/gtsam/gtsam_unstable/slam/</path>
    <filename>a01277</filename>
    <includes id="a01280" name="DummyFactor.h" local="no" imported="no">gtsam_unstable/slam/DummyFactor.h</includes>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>DummyFactor.h</name>
    <path>/Users/dellaert/git/gtsam/gtsam_unstable/slam/</path>
    <filename>a01280</filename>
    <includes id="a01094" name="dllexport.h" local="no" imported="no">gtsam_unstable/base/dllexport.h</includes>
    <includes id="a00881" name="NonlinearFactor.h" local="no" imported="no">gtsam/nonlinear/NonlinearFactor.h</includes>
    <class kind="class">gtsam::DummyFactor</class>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>EquivInertialNavFactor_GlobalVel.h</name>
    <path>/Users/dellaert/git/gtsam/gtsam_unstable/slam/</path>
    <filename>a01283</filename>
    <includes id="a00881" name="NonlinearFactor.h" local="no" imported="no">gtsam/nonlinear/NonlinearFactor.h</includes>
    <includes id="a00626" name="NoiseModel.h" local="no" imported="no">gtsam/linear/NoiseModel.h</includes>
    <includes id="a00332" name="Rot3.h" local="no" imported="no">gtsam/geometry/Rot3.h</includes>
    <includes id="a00074" name="Matrix.h" local="no" imported="no">gtsam/base/Matrix.h</includes>
    <includes id="a00077" name="numericalDerivative.h" local="no" imported="no">gtsam/base/numericalDerivative.h</includes>
    <class kind="class">gtsam::EquivInertialNavFactor_GlobalVel</class>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>EquivInertialNavFactor_GlobalVel_NoBias.h</name>
    <path>/Users/dellaert/git/gtsam/gtsam_unstable/slam/</path>
    <filename>a01286</filename>
    <includes id="a00881" name="NonlinearFactor.h" local="no" imported="no">gtsam/nonlinear/NonlinearFactor.h</includes>
    <includes id="a00626" name="NoiseModel.h" local="no" imported="no">gtsam/linear/NoiseModel.h</includes>
    <includes id="a00332" name="Rot3.h" local="no" imported="no">gtsam/geometry/Rot3.h</includes>
    <includes id="a00074" name="Matrix.h" local="no" imported="no">gtsam/base/Matrix.h</includes>
    <includes id="a00077" name="numericalDerivative.h" local="no" imported="no">gtsam/base/numericalDerivative.h</includes>
    <class kind="class">gtsam::EquivInertialNavFactor_GlobalVel_NoBias</class>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>GaussMarkov1stOrderFactor.h</name>
    <path>/Users/dellaert/git/gtsam/gtsam_unstable/slam/</path>
    <filename>a01289</filename>
    <includes id="a00881" name="NonlinearFactor.h" local="no" imported="no">gtsam/nonlinear/NonlinearFactor.h</includes>
    <includes id="a00554" name="GaussianFactor.h" local="no" imported="no">gtsam/linear/GaussianFactor.h</includes>
    <includes id="a00626" name="NoiseModel.h" local="no" imported="no">gtsam/linear/NoiseModel.h</includes>
    <includes id="a00098" name="Testable.h" local="no" imported="no">gtsam/base/Testable.h</includes>
    <includes id="a00053" name="Lie.h" local="no" imported="no">gtsam/base/Lie.h</includes>
    <class kind="class">gtsam::GaussMarkov1stOrderFactor</class>
    <class kind="struct">gtsam::traits&lt; GaussMarkov1stOrderFactor&lt; VALUE &gt; &gt;</class>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>InertialNavFactor_GlobalVelocity.h</name>
    <path>/Users/dellaert/git/gtsam/gtsam_unstable/slam/</path>
    <filename>a01292</filename>
    <includes id="a00881" name="NonlinearFactor.h" local="no" imported="no">gtsam/nonlinear/NonlinearFactor.h</includes>
    <includes id="a00626" name="NoiseModel.h" local="no" imported="no">gtsam/linear/NoiseModel.h</includes>
    <includes id="a00332" name="Rot3.h" local="no" imported="no">gtsam/geometry/Rot3.h</includes>
    <includes id="a00074" name="Matrix.h" local="no" imported="no">gtsam/base/Matrix.h</includes>
    <includes id="a00077" name="numericalDerivative.h" local="no" imported="no">gtsam/base/numericalDerivative.h</includes>
    <class kind="class">gtsam::InertialNavFactor_GlobalVelocity</class>
    <class kind="struct">gtsam::traits&lt; InertialNavFactor_GlobalVelocity&lt; POSE, VELOCITY, IMUBIAS &gt; &gt;</class>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>InvDepthFactor3.h</name>
    <path>/Users/dellaert/git/gtsam/gtsam_unstable/slam/</path>
    <filename>a01295</filename>
    <includes id="a00227" name="Cal3_S2.h" local="no" imported="no">gtsam/geometry/Cal3_S2.h</includes>
    <includes id="a00881" name="NonlinearFactor.h" local="no" imported="no">gtsam/nonlinear/NonlinearFactor.h</includes>
    <class kind="class">gtsam::InvDepthFactor3</class>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>InvDepthFactorVariant1.h</name>
    <path>/Users/dellaert/git/gtsam/gtsam_unstable/slam/</path>
    <filename>a01298</filename>
    <includes id="a00881" name="NonlinearFactor.h" local="no" imported="no">gtsam/nonlinear/NonlinearFactor.h</includes>
    <includes id="a00287" name="PinholeCamera.h" local="no" imported="no">gtsam/geometry/PinholeCamera.h</includes>
    <includes id="a00227" name="Cal3_S2.h" local="no" imported="no">gtsam/geometry/Cal3_S2.h</includes>
    <includes id="a00317" name="Pose3.h" local="no" imported="no">gtsam/geometry/Pose3.h</includes>
    <includes id="a00299" name="Point2.h" local="no" imported="no">gtsam/geometry/Point2.h</includes>
    <includes id="a00077" name="numericalDerivative.h" local="no" imported="no">gtsam/base/numericalDerivative.h</includes>
    <class kind="class">gtsam::InvDepthFactorVariant1</class>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>InvDepthFactorVariant2.h</name>
    <path>/Users/dellaert/git/gtsam/gtsam_unstable/slam/</path>
    <filename>a01301</filename>
    <includes id="a00881" name="NonlinearFactor.h" local="no" imported="no">gtsam/nonlinear/NonlinearFactor.h</includes>
    <includes id="a00287" name="PinholeCamera.h" local="no" imported="no">gtsam/geometry/PinholeCamera.h</includes>
    <includes id="a00227" name="Cal3_S2.h" local="no" imported="no">gtsam/geometry/Cal3_S2.h</includes>
    <includes id="a00317" name="Pose3.h" local="no" imported="no">gtsam/geometry/Pose3.h</includes>
    <includes id="a00299" name="Point2.h" local="no" imported="no">gtsam/geometry/Point2.h</includes>
    <includes id="a00077" name="numericalDerivative.h" local="no" imported="no">gtsam/base/numericalDerivative.h</includes>
    <class kind="class">gtsam::InvDepthFactorVariant2</class>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>InvDepthFactorVariant3.h</name>
    <path>/Users/dellaert/git/gtsam/gtsam_unstable/slam/</path>
    <filename>a01304</filename>
    <includes id="a00881" name="NonlinearFactor.h" local="no" imported="no">gtsam/nonlinear/NonlinearFactor.h</includes>
    <includes id="a00287" name="PinholeCamera.h" local="no" imported="no">gtsam/geometry/PinholeCamera.h</includes>
    <includes id="a00227" name="Cal3_S2.h" local="no" imported="no">gtsam/geometry/Cal3_S2.h</includes>
    <includes id="a00317" name="Pose3.h" local="no" imported="no">gtsam/geometry/Pose3.h</includes>
    <includes id="a00299" name="Point2.h" local="no" imported="no">gtsam/geometry/Point2.h</includes>
    <includes id="a00077" name="numericalDerivative.h" local="no" imported="no">gtsam/base/numericalDerivative.h</includes>
    <class kind="class">gtsam::InvDepthFactorVariant3a</class>
    <class kind="class">gtsam::InvDepthFactorVariant3b</class>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>PartialPriorFactor.h</name>
    <path>/Users/dellaert/git/gtsam/gtsam_unstable/slam/</path>
    <filename>a01316</filename>
    <includes id="a00881" name="NonlinearFactor.h" local="no" imported="no">gtsam/nonlinear/NonlinearFactor.h</includes>
    <includes id="a00053" name="Lie.h" local="no" imported="no">gtsam/base/Lie.h</includes>
    <class kind="class">gtsam::PartialPriorFactor</class>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>PosePriorFactor.h</name>
    <path>/Users/dellaert/git/gtsam/gtsam_unstable/slam/</path>
    <filename>a01322</filename>
    <includes id="a00881" name="NonlinearFactor.h" local="no" imported="no">gtsam/nonlinear/NonlinearFactor.h</includes>
    <includes id="a00098" name="Testable.h" local="no" imported="no">gtsam/base/Testable.h</includes>
    <class kind="class">gtsam::PosePriorFactor</class>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>ProjectionFactorPPP.h</name>
    <path>/Users/dellaert/git/gtsam/gtsam_unstable/slam/</path>
    <filename>a01325</filename>
    <includes id="a00881" name="NonlinearFactor.h" local="no" imported="no">gtsam/nonlinear/NonlinearFactor.h</includes>
    <includes id="a00287" name="PinholeCamera.h" local="no" imported="no">gtsam/geometry/PinholeCamera.h</includes>
    <includes id="a00227" name="Cal3_S2.h" local="no" imported="no">gtsam/geometry/Cal3_S2.h</includes>
    <class kind="class">gtsam::ProjectionFactorPPP</class>
    <class kind="struct">gtsam::traits&lt; ProjectionFactorPPP&lt; POSE, LANDMARK, CALIBRATION &gt; &gt;</class>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>ProjectionFactorPPPC.h</name>
    <path>/Users/dellaert/git/gtsam/gtsam_unstable/slam/</path>
    <filename>a01328</filename>
    <includes id="a00881" name="NonlinearFactor.h" local="no" imported="no">gtsam/nonlinear/NonlinearFactor.h</includes>
    <includes id="a00287" name="PinholeCamera.h" local="no" imported="no">gtsam/geometry/PinholeCamera.h</includes>
    <includes id="a00227" name="Cal3_S2.h" local="no" imported="no">gtsam/geometry/Cal3_S2.h</includes>
    <class kind="class">gtsam::ProjectionFactorPPPC</class>
    <class kind="struct">gtsam::traits&lt; ProjectionFactorPPPC&lt; POSE, LANDMARK, CALIBRATION &gt; &gt;</class>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>RelativeElevationFactor.cpp</name>
    <path>/Users/dellaert/git/gtsam/gtsam_unstable/slam/</path>
    <filename>a01331</filename>
    <includes id="a01334" name="RelativeElevationFactor.h" local="no" imported="no">gtsam_unstable/slam/RelativeElevationFactor.h</includes>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>RelativeElevationFactor.h</name>
    <path>/Users/dellaert/git/gtsam/gtsam_unstable/slam/</path>
    <filename>a01334</filename>
    <includes id="a01094" name="dllexport.h" local="no" imported="no">gtsam_unstable/base/dllexport.h</includes>
    <includes id="a00317" name="Pose3.h" local="no" imported="no">gtsam/geometry/Pose3.h</includes>
    <includes id="a00881" name="NonlinearFactor.h" local="no" imported="no">gtsam/nonlinear/NonlinearFactor.h</includes>
    <class kind="class">gtsam::RelativeElevationFactor</class>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>serialization.cpp</name>
    <path>/Users/dellaert/git/gtsam/gtsam_unstable/slam/</path>
    <filename>a01337</filename>
    <includes id="a00935" name="BetweenFactor.h" local="no" imported="no">gtsam/slam/BetweenFactor.h</includes>
    <includes id="a00956" name="GeneralSFMFactor.h" local="no" imported="no">gtsam/slam/GeneralSFMFactor.h</includes>
    <includes id="a00992" name="PriorFactor.h" local="no" imported="no">gtsam/slam/PriorFactor.h</includes>
    <includes id="a00995" name="ProjectionFactor.h" local="no" imported="no">gtsam/slam/ProjectionFactor.h</includes>
    <includes id="a00311" name="Pose2.h" local="no" imported="no">gtsam/geometry/Pose2.h</includes>
    <includes id="a00317" name="Pose3.h" local="no" imported="no">gtsam/geometry/Pose3.h</includes>
    <includes id="a00245" name="Cal3DS2.h" local="no" imported="no">gtsam/geometry/Cal3DS2.h</includes>
  </compound>
  <compound kind="file">
    <name>SmartRangeFactor.h</name>
    <path>/Users/dellaert/git/gtsam/gtsam_unstable/slam/</path>
    <filename>a01340</filename>
    <includes id="a01094" name="dllexport.h" local="no" imported="no">gtsam_unstable/base/dllexport.h</includes>
    <includes id="a00881" name="NonlinearFactor.h" local="no" imported="no">gtsam/nonlinear/NonlinearFactor.h</includes>
    <includes id="a00461" name="Key.h" local="no" imported="no">gtsam/inference/Key.h</includes>
    <includes id="a00311" name="Pose2.h" local="no" imported="no">gtsam/geometry/Pose2.h</includes>
    <includes id="a00113" name="timing.h" local="no" imported="no">gtsam/base/timing.h</includes>
    <class kind="class">gtsam::SmartRangeFactor</class>
    <class kind="struct">gtsam::SmartRangeFactor::Circle2</class>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>SmartStereoProjectionFactor.h</name>
    <path>/Users/dellaert/git/gtsam/gtsam_unstable/slam/</path>
    <filename>a01343</filename>
    <includes id="a01007" name="SmartFactorBase.h" local="no" imported="no">gtsam/slam/SmartFactorBase.h</includes>
    <includes id="a00368" name="triangulation.h" local="no" imported="no">gtsam/geometry/triangulation.h</includes>
    <includes id="a00317" name="Pose3.h" local="no" imported="no">gtsam/geometry/Pose3.h</includes>
    <includes id="a00356" name="StereoCamera.h" local="no" imported="no">gtsam/geometry/StereoCamera.h</includes>
    <includes id="a00944" name="dataset.h" local="no" imported="no">gtsam/slam/dataset.h</includes>
    <class kind="class">gtsam::SmartStereoProjectionFactor</class>
    <class kind="struct">gtsam::traits&lt; SmartStereoProjectionFactor &gt;</class>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>SmartStereoProjectionPoseFactor.h</name>
    <path>/Users/dellaert/git/gtsam/gtsam_unstable/slam/</path>
    <filename>a01346</filename>
    <includes id="a01343" name="SmartStereoProjectionFactor.h" local="no" imported="no">gtsam_unstable/slam/SmartStereoProjectionFactor.h</includes>
    <class kind="class">gtsam::SmartStereoProjectionPoseFactor</class>
    <class kind="struct">gtsam::traits&lt; SmartStereoProjectionPoseFactor &gt;</class>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>TOAFactor.h</name>
    <path>/Users/dellaert/git/gtsam/gtsam_unstable/slam/</path>
    <filename>a01349</filename>
    <class kind="class">gtsam::TOAFactor</class>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>TransformBtwRobotsUnaryFactor.h</name>
    <path>/Users/dellaert/git/gtsam/gtsam_unstable/slam/</path>
    <filename>a01352</filename>
    <includes id="a00935" name="BetweenFactor.h" local="no" imported="no">gtsam/slam/BetweenFactor.h</includes>
    <includes id="a00881" name="NonlinearFactor.h" local="no" imported="no">gtsam/nonlinear/NonlinearFactor.h</includes>
    <includes id="a00554" name="GaussianFactor.h" local="no" imported="no">gtsam/linear/GaussianFactor.h</includes>
    <includes id="a00098" name="Testable.h" local="no" imported="no">gtsam/base/Testable.h</includes>
    <includes id="a00053" name="Lie.h" local="no" imported="no">gtsam/base/Lie.h</includes>
    <class kind="class">gtsam::TransformBtwRobotsUnaryFactor</class>
    <class kind="struct">gtsam::traits&lt; TransformBtwRobotsUnaryFactor&lt; VALUE &gt; &gt;</class>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>TransformBtwRobotsUnaryFactorEM.h</name>
    <path>/Users/dellaert/git/gtsam/gtsam_unstable/slam/</path>
    <filename>a01355</filename>
    <includes id="a00935" name="BetweenFactor.h" local="no" imported="no">gtsam/slam/BetweenFactor.h</includes>
    <includes id="a00881" name="NonlinearFactor.h" local="no" imported="no">gtsam/nonlinear/NonlinearFactor.h</includes>
    <includes id="a00887" name="NonlinearFactorGraph.h" local="no" imported="no">gtsam/nonlinear/NonlinearFactorGraph.h</includes>
    <includes id="a00863" name="Marginals.h" local="no" imported="no">gtsam/nonlinear/Marginals.h</includes>
    <includes id="a00554" name="GaussianFactor.h" local="no" imported="no">gtsam/linear/GaussianFactor.h</includes>
    <includes id="a00098" name="Testable.h" local="no" imported="no">gtsam/base/Testable.h</includes>
    <includes id="a00053" name="Lie.h" local="no" imported="no">gtsam/base/Lie.h</includes>
    <class kind="class">gtsam::TransformBtwRobotsUnaryFactorEM</class>
    <class kind="struct">gtsam::traits&lt; TransformBtwRobotsUnaryFactorEM&lt; VALUE &gt; &gt;</class>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="file">
    <name>TSAMFactors.h</name>
    <path>/Users/dellaert/git/gtsam/gtsam_unstable/slam/</path>
    <filename>a01358</filename>
    <includes id="a00311" name="Pose2.h" local="no" imported="no">gtsam/geometry/Pose2.h</includes>
    <includes id="a00881" name="NonlinearFactor.h" local="no" imported="no">gtsam/nonlinear/NonlinearFactor.h</includes>
    <class kind="class">gtsam::DeltaFactor</class>
    <class kind="class">gtsam::DeltaFactorBase</class>
    <class kind="class">gtsam::OdometryFactorBase</class>
    <namespace>gtsam</namespace>
  </compound>
  <compound kind="struct">
    <name>gtsam::_ValuesConstKeyValuePair</name>
    <filename>a03823.html</filename>
    <templarg></templarg>
    <member kind="variable">
      <type>const Key</type>
      <name>key</name>
      <anchorfile>a03823.html</anchorfile>
      <anchor>ad1598dd19527916716fe26a436e62a7f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const ValueType &amp;</type>
      <name>value</name>
      <anchorfile>a03823.html</anchorfile>
      <anchor>aef604e97b3cf7d6d4036d11e341f89dd</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>gtsam::_ValuesKeyValuePair</name>
    <filename>a03819.html</filename>
    <templarg>ValueType</templarg>
    <member kind="variable">
      <type>const Key</type>
      <name>key</name>
      <anchorfile>a03819.html</anchorfile>
      <anchor>aa928242396405483048bedd4a00e804c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ValueType &amp;</type>
      <name>value</name>
      <anchorfile>a03819.html</anchorfile>
      <anchor>ae0b729df9ea00bfe21c8f127881eb7b2</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::AcceleratingScenario</name>
    <filename>a03543.html</filename>
    <base>gtsam::Scenario</base>
    <member kind="function">
      <type></type>
      <name>AcceleratingScenario</name>
      <anchorfile>a03543.html</anchorfile>
      <anchor>ad0533d44571308b0098013ac11f65da1</anchor>
      <arglist>(const Rot3 &amp;nRb, const Point3 &amp;p0, const Vector3 &amp;v0, const Vector3 &amp;a_n, const Vector3 &amp;omega_b=Vector3::Zero())</arglist>
    </member>
    <member kind="function">
      <type>Pose3</type>
      <name>pose</name>
      <anchorfile>a03543.html</anchorfile>
      <anchor>a03b62443f7f87f435e3d8fdfede0f7a9</anchor>
      <arglist>(double t) const override</arglist>
    </member>
    <member kind="function">
      <type>Vector3</type>
      <name>omega_b</name>
      <anchorfile>a03543.html</anchorfile>
      <anchor>aa7499c8fbe12ca4238e40334548e1d06</anchor>
      <arglist>(double t) const override</arglist>
    </member>
    <member kind="function">
      <type>Vector3</type>
      <name>velocity_n</name>
      <anchorfile>a03543.html</anchorfile>
      <anchor>aed78128a8d22e10539cff5352c0f8790</anchor>
      <arglist>(double t) const override</arglist>
    </member>
    <member kind="function">
      <type>Vector3</type>
      <name>acceleration_n</name>
      <anchorfile>a03543.html</anchorfile>
      <anchor>add38095518e49172780a6479d67f13a9</anchor>
      <arglist>(double t) const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::ActiveSetSolver</name>
    <filename>a04243.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="function">
      <type></type>
      <name>ActiveSetSolver</name>
      <anchorfile>a04243.html</anchorfile>
      <anchor>abfcc406843118c6bfd09c3c8efcb45c3</anchor>
      <arglist>(const PROBLEM &amp;problem)</arglist>
    </member>
    <member kind="function">
      <type>std::pair&lt; VectorValues, VectorValues &gt;</type>
      <name>optimize</name>
      <anchorfile>a04243.html</anchorfile>
      <anchor>a9199c3d41182a0ac12af3e4ffca9c904</anchor>
      <arglist>(const VectorValues &amp;initialValues, const VectorValues &amp;duals=VectorValues(), bool useWarmStart=false) const</arglist>
    </member>
    <member kind="function">
      <type>std::pair&lt; VectorValues, VectorValues &gt;</type>
      <name>optimize</name>
      <anchorfile>a04243.html</anchorfile>
      <anchor>a5bc9f5cb3ddb1b992ffb3a1c4151be38</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>GaussianFactorGraph::shared_ptr</type>
      <name>buildDualGraph</name>
      <anchorfile>a04243.html</anchorfile>
      <anchor>a2dc30ca4aa3724b02f5a78279232a5c6</anchor>
      <arglist>(const InequalityFactorGraph &amp;workingSet, const VectorValues &amp;delta) const</arglist>
    </member>
    <member kind="function">
      <type>GaussianFactorGraph</type>
      <name>buildWorkingGraph</name>
      <anchorfile>a04243.html</anchorfile>
      <anchor>aa9dd2e1525a8b6d08969609f363ae901</anchor>
      <arglist>(const InequalityFactorGraph &amp;workingSet, const VectorValues &amp;xk=VectorValues()) const</arglist>
    </member>
    <member kind="function">
      <type>State</type>
      <name>iterate</name>
      <anchorfile>a04243.html</anchorfile>
      <anchor>af6c0a982aaff58ee34bf144f593cef74</anchor>
      <arglist>(const State &amp;state) const</arglist>
    </member>
    <member kind="function">
      <type>InequalityFactorGraph</type>
      <name>identifyActiveConstraints</name>
      <anchorfile>a04243.html</anchorfile>
      <anchor>a14fa9e5ec8f3b5d9e18216796a012d55</anchor>
      <arglist>(const InequalityFactorGraph &amp;inequalities, const VectorValues &amp;initialValues, const VectorValues &amp;duals=VectorValues(), bool useWarmStart=false) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>identifyLeavingConstraint</name>
      <anchorfile>a04243.html</anchorfile>
      <anchor>a4d3cbaac6427014110104e466cb02686</anchor>
      <arglist>(const InequalityFactorGraph &amp;workingSet, const VectorValues &amp;lambdas) const</arglist>
    </member>
    <class kind="struct">gtsam::ActiveSetSolver::State</class>
    <member kind="typedef" protection="protected">
      <type>std::vector&lt; std::pair&lt; Key, Matrix &gt; &gt;</type>
      <name>TermsContainer</name>
      <anchorfile>a04243.html</anchorfile>
      <anchor>a66254e59fcb0c1aa781cbd23fe6ad6f0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type>boost::tuple&lt; double, int &gt;</type>
      <name>computeStepSize</name>
      <anchorfile>a04243.html</anchorfile>
      <anchor>a317e9dd1e66ecec706e575faa6a149a0</anchor>
      <arglist>(const InequalityFactorGraph &amp;workingSet, const VectorValues &amp;xk, const VectorValues &amp;p, const double &amp;maxAlpha) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>TermsContainer</type>
      <name>collectDualJacobians</name>
      <anchorfile>a04243.html</anchorfile>
      <anchor>abb983a9712d899f46f6700a113ea7396</anchor>
      <arglist>(Key key, const FactorGraph&lt; FACTOR &gt; &amp;graph, const VariableIndex &amp;variableIndex) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>JacobianFactor::shared_ptr</type>
      <name>createDualFactor</name>
      <anchorfile>a04243.html</anchorfile>
      <anchor>a101e52c70d786db4bd0146c05ca16cc5</anchor>
      <arglist>(Key key, const InequalityFactorGraph &amp;workingSet, const VectorValues &amp;delta) const</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const PROBLEM &amp;</type>
      <name>problem_</name>
      <anchorfile>a04243.html</anchorfile>
      <anchor>a4bd8cdf7f1d08d4e958bb1261134bb59</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>VariableIndex</type>
      <name>inequalityVariableIndex_</name>
      <anchorfile>a04243.html</anchorfile>
      <anchor>a2fb4596033e63b58f880e398155822be</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>KeySet</type>
      <name>constrainedKeys_</name>
      <anchorfile>a04243.html</anchorfile>
      <anchor>a265e18a8ff62cd724b61f4c51f81dae0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::AdaptAutoDiff</name>
    <filename>a03555.html</filename>
    <templarg></templarg>
    <templarg>M</templarg>
    <templarg>N1</templarg>
    <templarg>N2</templarg>
  </compound>
  <compound kind="struct">
    <name>gtsam::additive_group_tag</name>
    <filename>a02055.html</filename>
  </compound>
  <compound kind="class">
    <name>gtsam::AHRS</name>
    <filename>a04443.html</filename>
    <member kind="function">
      <type></type>
      <name>AHRS</name>
      <anchorfile>a04443.html</anchorfile>
      <anchor>a81375ea82571d777fa83ac7d6b287055</anchor>
      <arglist>(const Matrix &amp;stationaryU, const Matrix &amp;stationaryF, double g_e, bool flat=false)</arglist>
    </member>
    <member kind="function">
      <type>std::pair&lt; Mechanization_bRn2, KalmanFilter::State &gt;</type>
      <name>aid</name>
      <anchorfile>a04443.html</anchorfile>
      <anchor>a88d78ca524f7c2cfc41999edeb8c3ba3</anchor>
      <arglist>(const Mechanization_bRn2 &amp;mech, KalmanFilter::State state, const Vector &amp;f, bool Farrell=0) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>a04443.html</anchorfile>
      <anchor>aa00999e95f9254e05ed2092f20fda6d1</anchor>
      <arglist>(const std::string &amp;s=&quot;&quot;) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::AHRSFactor</name>
    <filename>a03411.html</filename>
    <base>NoiseModelFactor3&lt; Rot3, Rot3, Vector3 &gt;</base>
    <member kind="function">
      <type></type>
      <name>AHRSFactor</name>
      <anchorfile>a03411.html</anchorfile>
      <anchor>a358af0919ed5a0349777771c393ba57a</anchor>
      <arglist>(Key rot_i, Key rot_j, Key bias, const PreintegratedAhrsMeasurements &amp;preintegratedMeasurements)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual gtsam::NonlinearFactor::shared_ptr</type>
      <name>clone</name>
      <anchorfile>a03411.html</anchorfile>
      <anchor>aced5668a16d527b36d0f1181bee48c04</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>print</name>
      <anchorfile>a03411.html</anchorfile>
      <anchor>af10730b5a78c48ff81908b24edde75fe</anchor>
      <arglist>(const std::string &amp;s, const KeyFormatter &amp;keyFormatter=DefaultKeyFormatter) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>equals</name>
      <anchorfile>a03411.html</anchorfile>
      <anchor>a096d7198b62cba2f18a57af39e48f355</anchor>
      <arglist>(const NonlinearFactor &amp;, double tol=1e-9) const</arglist>
    </member>
    <member kind="function">
      <type>const PreintegratedAhrsMeasurements &amp;</type>
      <name>preintegratedMeasurements</name>
      <anchorfile>a03411.html</anchorfile>
      <anchor>a569ec22ad82f66acd4366a70817b02d6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Vector</type>
      <name>evaluateError</name>
      <anchorfile>a03411.html</anchorfile>
      <anchor>a3cbe28b123770ca18af985a1580b126f</anchor>
      <arglist>(const Rot3 &amp;rot_i, const Rot3 &amp;rot_j, const Vector3 &amp;bias, boost::optional&lt; Matrix &amp; &gt; H1=boost::none, boost::optional&lt; Matrix &amp; &gt; H2=boost::none, boost::optional&lt; Matrix &amp; &gt; H3=boost::none) const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>AHRSFactor</name>
      <anchorfile>a03411.html</anchorfile>
      <anchor>ada50846eb6e3d2b7a39f87d88119890a</anchor>
      <arglist>(Key rot_i, Key rot_j, Key bias, const PreintegratedMeasurements &amp;preintegratedMeasurements, const Vector3 &amp;omegaCoriolis, const boost::optional&lt; Pose3 &gt; &amp;body_P_sensor=boost::none)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Rot3</type>
      <name>Predict</name>
      <anchorfile>a03411.html</anchorfile>
      <anchor>ae854b6b6845ad3f334a196ccfa51512b</anchor>
      <arglist>(const Rot3 &amp;rot_i, const Vector3 &amp;bias, const PreintegratedAhrsMeasurements preintegratedMeasurements)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Rot3</type>
      <name>predict</name>
      <anchorfile>a03411.html</anchorfile>
      <anchor>ad8889ed4efa158474b7a505f5fa916a2</anchor>
      <arglist>(const Rot3 &amp;rot_i, const Vector3 &amp;bias, const PreintegratedMeasurements preintegratedMeasurements, const Vector3 &amp;omegaCoriolis, const boost::optional&lt; Pose3 &gt; &amp;body_P_sensor=boost::none)</arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; AHRSFactor &gt;</type>
      <name>shared_ptr</name>
      <anchorfile>a03411.html</anchorfile>
      <anchor>af1b0ec037d45455b8988aecf32f79cf5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>PreintegratedAhrsMeasurements</type>
      <name>PreintegratedMeasurements</name>
      <anchorfile>a03411.html</anchorfile>
      <anchor>a189943052e9d7d873934a421ee70a682</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>boost::serialization::access</name>
      <anchorfile>a03411.html</anchorfile>
      <anchor>ac98d07dd8f7b70e16ccb9a01abf56b9c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::AlgebraicDecisionTree</name>
    <filename>a02339.html</filename>
    <templarg>L</templarg>
    <base>DecisionTree&lt; L, double &gt;</base>
    <member kind="function">
      <type></type>
      <name>AlgebraicDecisionTree</name>
      <anchorfile>a02339.html</anchorfile>
      <anchor>a4e42a5ca3fc306d2d83c88dd3532f71d</anchor>
      <arglist>(const L &amp;label, double y1, double y2)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>AlgebraicDecisionTree</name>
      <anchorfile>a02339.html</anchorfile>
      <anchor>a685a8ae8b9bdd8b65f33752b83bf0a1d</anchor>
      <arglist>(const typename Super::LabelC &amp;labelC, double y1, double y2)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>AlgebraicDecisionTree</name>
      <anchorfile>a02339.html</anchorfile>
      <anchor>a002710ce70616775068257c29a2e4778</anchor>
      <arglist>(const std::vector&lt; typename Super::LabelC &gt; &amp;labelCs, const std::vector&lt; double &gt; &amp;ys)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>AlgebraicDecisionTree</name>
      <anchorfile>a02339.html</anchorfile>
      <anchor>aca8f0d3a93b0e6ebeb69b673495b4192</anchor>
      <arglist>(const std::vector&lt; typename Super::LabelC &gt; &amp;labelCs, const std::string &amp;table)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>AlgebraicDecisionTree</name>
      <anchorfile>a02339.html</anchorfile>
      <anchor>af0cd622a320a4a202473ebae5dd289a7</anchor>
      <arglist>(Iterator begin, Iterator end, const L &amp;label)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>AlgebraicDecisionTree</name>
      <anchorfile>a02339.html</anchorfile>
      <anchor>a3cd971460a346293b80eae2f125c5bbe</anchor>
      <arglist>(const AlgebraicDecisionTree&lt; M &gt; &amp;other, const std::map&lt; M, L &gt; &amp;map)</arglist>
    </member>
    <member kind="function">
      <type>AlgebraicDecisionTree</type>
      <name>operator+</name>
      <anchorfile>a02339.html</anchorfile>
      <anchor>a73d781b3f789fe5361ac8ce253799585</anchor>
      <arglist>(const AlgebraicDecisionTree &amp;g) const</arglist>
    </member>
    <member kind="function">
      <type>AlgebraicDecisionTree</type>
      <name>operator *</name>
      <anchorfile>a02339.html</anchorfile>
      <anchor>a24bbe690a67380a6b18e574c590a1927</anchor>
      <arglist>(const AlgebraicDecisionTree &amp;g) const</arglist>
    </member>
    <member kind="function">
      <type>AlgebraicDecisionTree</type>
      <name>operator/</name>
      <anchorfile>a02339.html</anchorfile>
      <anchor>a0fb758bf01cbb66dfb631913f150ed00</anchor>
      <arglist>(const AlgebraicDecisionTree &amp;g) const</arglist>
    </member>
    <member kind="function">
      <type>AlgebraicDecisionTree</type>
      <name>sum</name>
      <anchorfile>a02339.html</anchorfile>
      <anchor>a12a2cd3038c73481b8af276cf5aeea25</anchor>
      <arglist>(const L &amp;label, size_t cardinality) const</arglist>
    </member>
    <member kind="function">
      <type>AlgebraicDecisionTree</type>
      <name>sum</name>
      <anchorfile>a02339.html</anchorfile>
      <anchor>ac453ade59229c14bec87a4dd8f5d7884</anchor>
      <arglist>(const typename Super::LabelC &amp;labelC) const</arglist>
    </member>
    <class kind="struct">gtsam::AlgebraicDecisionTree::Ring</class>
  </compound>
  <compound kind="class">
    <name>AlgebraicDecisionTree&lt; Key &gt;</name>
    <filename>a02339.html</filename>
    <base>DecisionTree&lt; Key, double &gt;</base>
    <member kind="function">
      <type></type>
      <name>AlgebraicDecisionTree</name>
      <anchorfile>a02339.html</anchorfile>
      <anchor>a4e42a5ca3fc306d2d83c88dd3532f71d</anchor>
      <arglist>(const Key &amp;label, double y1, double y2)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>AlgebraicDecisionTree</name>
      <anchorfile>a02339.html</anchorfile>
      <anchor>a685a8ae8b9bdd8b65f33752b83bf0a1d</anchor>
      <arglist>(const typename Super::LabelC &amp;labelC, double y1, double y2)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>AlgebraicDecisionTree</name>
      <anchorfile>a02339.html</anchorfile>
      <anchor>a002710ce70616775068257c29a2e4778</anchor>
      <arglist>(const std::vector&lt; typename Super::LabelC &gt; &amp;labelCs, const std::vector&lt; double &gt; &amp;ys)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>AlgebraicDecisionTree</name>
      <anchorfile>a02339.html</anchorfile>
      <anchor>aca8f0d3a93b0e6ebeb69b673495b4192</anchor>
      <arglist>(const std::vector&lt; typename Super::LabelC &gt; &amp;labelCs, const std::string &amp;table)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>AlgebraicDecisionTree</name>
      <anchorfile>a02339.html</anchorfile>
      <anchor>af0cd622a320a4a202473ebae5dd289a7</anchor>
      <arglist>(Iterator begin, Iterator end, const Key &amp;label)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>AlgebraicDecisionTree</name>
      <anchorfile>a02339.html</anchorfile>
      <anchor>a3cd971460a346293b80eae2f125c5bbe</anchor>
      <arglist>(const AlgebraicDecisionTree&lt; M &gt; &amp;other, const std::map&lt; M, Key &gt; &amp;map)</arglist>
    </member>
    <member kind="function">
      <type>AlgebraicDecisionTree</type>
      <name>operator+</name>
      <anchorfile>a02339.html</anchorfile>
      <anchor>a73d781b3f789fe5361ac8ce253799585</anchor>
      <arglist>(const AlgebraicDecisionTree &amp;g) const</arglist>
    </member>
    <member kind="function">
      <type>AlgebraicDecisionTree</type>
      <name>operator *</name>
      <anchorfile>a02339.html</anchorfile>
      <anchor>a24bbe690a67380a6b18e574c590a1927</anchor>
      <arglist>(const AlgebraicDecisionTree &amp;g) const</arglist>
    </member>
    <member kind="function">
      <type>AlgebraicDecisionTree</type>
      <name>operator/</name>
      <anchorfile>a02339.html</anchorfile>
      <anchor>a0fb758bf01cbb66dfb631913f150ed00</anchor>
      <arglist>(const AlgebraicDecisionTree &amp;g) const</arglist>
    </member>
    <member kind="function">
      <type>AlgebraicDecisionTree</type>
      <name>sum</name>
      <anchorfile>a02339.html</anchorfile>
      <anchor>a12a2cd3038c73481b8af276cf5aeea25</anchor>
      <arglist>(const Key &amp;label, size_t cardinality) const</arglist>
    </member>
    <member kind="function">
      <type>AlgebraicDecisionTree</type>
      <name>sum</name>
      <anchorfile>a02339.html</anchorfile>
      <anchor>ac453ade59229c14bec87a4dd8f5d7884</anchor>
      <arglist>(const typename Super::LabelC &amp;labelC) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::AllDiff</name>
    <filename>a04211.html</filename>
    <base>gtsam::Constraint</base>
    <member kind="function">
      <type></type>
      <name>AllDiff</name>
      <anchorfile>a04211.html</anchorfile>
      <anchor>abdf1c9f275b8408bc8c808d32a5a614e</anchor>
      <arglist>(const DiscreteKeys &amp;dkeys)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>equals</name>
      <anchorfile>a04211.html</anchorfile>
      <anchor>a7ffcc925b164737e746423a780b84eda</anchor>
      <arglist>(const DiscreteFactor &amp;other, double tol) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>operator()</name>
      <anchorfile>a04211.html</anchorfile>
      <anchor>a4f767df8f18fa8167d8c6a027407e451</anchor>
      <arglist>(const Values &amp;values) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual DecisionTreeFactor</type>
      <name>toDecisionTreeFactor</name>
      <anchorfile>a04211.html</anchorfile>
      <anchor>a8d0f93417de9bf81401d67e04c53d31b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual DecisionTreeFactor</type>
      <name>operator *</name>
      <anchorfile>a04211.html</anchorfile>
      <anchor>a80f259f015957af57bdb2064d0ac6de6</anchor>
      <arglist>(const DecisionTreeFactor &amp;f) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Constraint::shared_ptr</type>
      <name>partiallyApply</name>
      <anchorfile>a04211.html</anchorfile>
      <anchor>a388cc885ae9820b5c4b37ecbc249c1ee</anchor>
      <arglist>(const Values &amp;) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Constraint::shared_ptr</type>
      <name>partiallyApply</name>
      <anchorfile>a04211.html</anchorfile>
      <anchor>a09651b0063e0c4d6974bc48e730f32ce</anchor>
      <arglist>(const std::vector&lt; Domain &gt; &amp;) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::AntiFactor</name>
    <filename>a03943.html</filename>
    <base>gtsam::NonlinearFactor</base>
    <member kind="function">
      <type></type>
      <name>AntiFactor</name>
      <anchorfile>a03943.html</anchorfile>
      <anchor>a344e9905b3dbb09d34599cf6c59ccbf7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>AntiFactor</name>
      <anchorfile>a03943.html</anchorfile>
      <anchor>a0db982b2aa42e353e2c17e0ebf379602</anchor>
      <arglist>(NonlinearFactor::shared_ptr factor)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual gtsam::NonlinearFactor::shared_ptr</type>
      <name>clone</name>
      <anchorfile>a03943.html</anchorfile>
      <anchor>a4716912e7cb1cf4f5e8c0e8aa2d41a11</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>print</name>
      <anchorfile>a03943.html</anchorfile>
      <anchor>a0d67fa97d0c603f36232effa026ce3f9</anchor>
      <arglist>(const std::string &amp;s, const KeyFormatter &amp;keyFormatter=DefaultKeyFormatter) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>equals</name>
      <anchorfile>a03943.html</anchorfile>
      <anchor>ac58ced694e5d64be7a6f374b71f4fa34</anchor>
      <arglist>(const NonlinearFactor &amp;expected, double tol=1e-9) const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>error</name>
      <anchorfile>a03943.html</anchorfile>
      <anchor>a237a3225d1cba817b39e7d2b4f3c4260</anchor>
      <arglist>(const Values &amp;c) const</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>dim</name>
      <anchorfile>a03943.html</anchorfile>
      <anchor>a7086385c04c8dfae0cccbbf7e0420506</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>active</name>
      <anchorfile>a03943.html</anchorfile>
      <anchor>a2da9d1e642015c4e5ce9864683b49c0a</anchor>
      <arglist>(const Values &amp;c) const</arglist>
    </member>
    <member kind="function">
      <type>boost::shared_ptr&lt; GaussianFactor &gt;</type>
      <name>linearize</name>
      <anchorfile>a03943.html</anchorfile>
      <anchor>a192812e3adf33ae2c4626b68b80a1453</anchor>
      <arglist>(const Values &amp;c) const</arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>boost::serialization::access</name>
      <anchorfile>a03943.html</anchorfile>
      <anchor>ac98d07dd8f7b70e16ccb9a01abf56b9c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>gtsam::internal::apply_compose</name>
    <filename>a03579.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="class">
    <name>gtsam::Assignment</name>
    <filename>a02347.html</filename>
    <templarg>L</templarg>
  </compound>
  <compound kind="class">
    <name>gtsam::AttitudeFactor</name>
    <filename>a03415.html</filename>
    <member kind="function">
      <type></type>
      <name>AttitudeFactor</name>
      <anchorfile>a03415.html</anchorfile>
      <anchor>ada258d635483d37d32ce3b219e3f9186</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>AttitudeFactor</name>
      <anchorfile>a03415.html</anchorfile>
      <anchor>a9d407978a1737d54d14bf020ce489a0c</anchor>
      <arglist>(const Unit3 &amp;nZ, const Unit3 &amp;bRef=Unit3(0, 0, 1))</arglist>
    </member>
    <member kind="function">
      <type>Vector</type>
      <name>attitudeError</name>
      <anchorfile>a03415.html</anchorfile>
      <anchor>a18f856baebcf6c0b2375843048b4f412</anchor>
      <arglist>(const Rot3 &amp;p, OptionalJacobian&lt; 2, 3 &gt; H=boost::none) const</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const Unit3</type>
      <name>bRef_</name>
      <anchorfile>a03415.html</anchorfile>
      <anchor>a4cbbc7417f1cadc0b8c9570ae5543e08</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>boost::serialization::access</name>
      <anchorfile>a03415.html</anchorfile>
      <anchor>ac98d07dd8f7b70e16ccb9a01abf56b9c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::internal::AutoTicToc</name>
    <filename>a02231.html</filename>
  </compound>
  <compound kind="class">
    <name>gtsam::noiseModel::Base</name>
    <filename>a03219.html</filename>
    <member kind="function">
      <type></type>
      <name>Base</name>
      <anchorfile>a03219.html</anchorfile>
      <anchor>af3c6026adff03fe3f98f6fa16564bdfa</anchor>
      <arglist>(size_t dim=1)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isConstrained</name>
      <anchorfile>a03219.html</anchorfile>
      <anchor>a10cbb983bdd401c3d20b26adcdef02f2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isUnit</name>
      <anchorfile>a03219.html</anchorfile>
      <anchor>a48ee92a4ce6f6e9965dc2a928fc1e849</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>dim</name>
      <anchorfile>a03219.html</anchorfile>
      <anchor>a1227a3b20fdc80cdd73b682230c6e6fc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Vector</type>
      <name>sigmas</name>
      <anchorfile>a03219.html</anchorfile>
      <anchor>a48d242c6139ddf86815c65d860b9223b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual Vector</type>
      <name>whiten</name>
      <anchorfile>a03219.html</anchorfile>
      <anchor>a24b86160149f31a2ff20bec1d99bdc40</anchor>
      <arglist>(const Vector &amp;v) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual Matrix</type>
      <name>Whiten</name>
      <anchorfile>a03219.html</anchorfile>
      <anchor>ae2460797b2ba4cf8aa3fa7314c4352a4</anchor>
      <arglist>(const Matrix &amp;H) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual Vector</type>
      <name>unwhiten</name>
      <anchorfile>a03219.html</anchorfile>
      <anchor>ad80869425e9f6334f77f01da9fbed28b</anchor>
      <arglist>(const Vector &amp;v) const =0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>whitenInPlace</name>
      <anchorfile>a03219.html</anchorfile>
      <anchor>a11dc92b7aee00150dcc3f4a78bf373a9</anchor>
      <arglist>(Vector &amp;v) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>unwhitenInPlace</name>
      <anchorfile>a03219.html</anchorfile>
      <anchor>ae0990ff9ab2ffb0b0699dde29fcd2d16</anchor>
      <arglist>(Vector &amp;v) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>whitenInPlace</name>
      <anchorfile>a03219.html</anchorfile>
      <anchor>a226da48948c4725934d35b989fbe1d48</anchor>
      <arglist>(Eigen::Block&lt; Vector &gt; &amp;v) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>unwhitenInPlace</name>
      <anchorfile>a03219.html</anchorfile>
      <anchor>a1b4c980ddc0ded8d103c62970b7a01bd</anchor>
      <arglist>(Eigen::Block&lt; Vector &gt; &amp;v) const</arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>boost::serialization::access</name>
      <anchorfile>a03219.html</anchorfile>
      <anchor>ac98d07dd8f7b70e16ccb9a01abf56b9c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::noiseModel::mEstimator::Base</name>
    <filename>a03243.html</filename>
    <member kind="function">
      <type>Vector</type>
      <name>weight</name>
      <anchorfile>a03243.html</anchorfile>
      <anchor>a91b748d275ce0c13d9b76c580c6d29a9</anchor>
      <arglist>(const Vector &amp;error) const</arglist>
    </member>
    <member kind="function">
      <type>Vector</type>
      <name>sqrtWeight</name>
      <anchorfile>a03243.html</anchorfile>
      <anchor>a3e620f2a766b0a890426a961eedefb72</anchor>
      <arglist>(const Vector &amp;error) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reweight</name>
      <anchorfile>a03243.html</anchorfile>
      <anchor>a7b99210b97477669026faafe4c1c5f86</anchor>
      <arglist>(Vector &amp;error) const</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ReweightScheme</type>
      <name>reweight_</name>
      <anchorfile>a03243.html</anchorfile>
      <anchor>a324ead5e657531310058f768f9daf0e8</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>boost::serialization::access</name>
      <anchorfile>a03243.html</anchorfile>
      <anchor>ac98d07dd8f7b70e16ccb9a01abf56b9c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::BatchFixedLagSmoother</name>
    <filename>a04343.html</filename>
    <base protection="private">gtsam::FixedLagSmoother</base>
    <base>gtsam::FixedLagSmoother</base>
    <member kind="function">
      <type></type>
      <name>BatchFixedLagSmoother</name>
      <anchorfile>a04343.html</anchorfile>
      <anchor>ab29c77142aaf1d7342f52a5f8d3336ae</anchor>
      <arglist>(double smootherLag=0.0, const LevenbergMarquardtParams &amp;parameters=LevenbergMarquardtParams(), bool enforceConsistency=true)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~BatchFixedLagSmoother</name>
      <anchorfile>a04343.html</anchorfile>
      <anchor>aa9770a2d5a481eacc926ed1190353866</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>print</name>
      <anchorfile>a04343.html</anchorfile>
      <anchor>a5110115baefd6781afcf1c146e1f2de5</anchor>
      <arglist>(const std::string &amp;s=&quot;BatchFixedLagSmoother:\n&quot;, const KeyFormatter &amp;keyFormatter=DefaultKeyFormatter) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>equals</name>
      <anchorfile>a04343.html</anchorfile>
      <anchor>a386b72a339095630d632cf21c0a2b4e9</anchor>
      <arglist>(const FixedLagSmoother &amp;rhs, double tol=1e-9) const</arglist>
    </member>
    <member kind="function">
      <type>Result</type>
      <name>update</name>
      <anchorfile>a04343.html</anchorfile>
      <anchor>ac753a4b012936d8e65feb0a31b2e669a</anchor>
      <arglist>(const NonlinearFactorGraph &amp;newFactors=NonlinearFactorGraph(), const Values &amp;newTheta=Values(), const KeyTimestampMap &amp;timestamps=KeyTimestampMap(), const FastVector&lt; size_t &gt; &amp;factorsToRemove=FastVector&lt; size_t &gt;())</arglist>
    </member>
    <member kind="function">
      <type>Values</type>
      <name>calculateEstimate</name>
      <anchorfile>a04343.html</anchorfile>
      <anchor>ae2e9537639d44245bb79b0c8190d7ee7</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>VALUE</type>
      <name>calculateEstimate</name>
      <anchorfile>a04343.html</anchorfile>
      <anchor>a15698a5fa5301468f4a8f36b2970333e</anchor>
      <arglist>(Key key) const</arglist>
    </member>
    <member kind="function">
      <type>const LevenbergMarquardtParams &amp;</type>
      <name>params</name>
      <anchorfile>a04343.html</anchorfile>
      <anchor>aa291ef1f150938128fd0d67c1582c481</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>LevenbergMarquardtParams &amp;</type>
      <name>params</name>
      <anchorfile>a04343.html</anchorfile>
      <anchor>ac02a2bc46d4f31161ef1f449e130b4b6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const NonlinearFactorGraph &amp;</type>
      <name>getFactors</name>
      <anchorfile>a04343.html</anchorfile>
      <anchor>a9c8cda9600dfcd012505f635c94f6567</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Values &amp;</type>
      <name>getLinearizationPoint</name>
      <anchorfile>a04343.html</anchorfile>
      <anchor>a9eea8c7a8f205918039c68db88880a0b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Ordering &amp;</type>
      <name>getOrdering</name>
      <anchorfile>a04343.html</anchorfile>
      <anchor>a56d73e2a8dd9c90ada8c7ec627297878</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const VectorValues &amp;</type>
      <name>getDelta</name>
      <anchorfile>a04343.html</anchorfile>
      <anchor>aef837b5386dc176ee11a940004c980fc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Matrix</type>
      <name>marginalCovariance</name>
      <anchorfile>a04343.html</anchorfile>
      <anchor>ad919a50751623bffa87332e8fe8fcff6</anchor>
      <arglist>(Key key) const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static GaussianFactorGraph</type>
      <name>CalculateMarginalFactors</name>
      <anchorfile>a04343.html</anchorfile>
      <anchor>a7bf47ab6825cee92505c325a435e115d</anchor>
      <arglist>(const GaussianFactorGraph &amp;graph, const KeyVector &amp;keys, const GaussianFactorGraph::Eliminate &amp;eliminateFunction=EliminatePreferCholesky)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static NonlinearFactorGraph</type>
      <name>CalculateMarginalFactors</name>
      <anchorfile>a04343.html</anchorfile>
      <anchor>acb475dd61ea205e4f83d64571240c6c2</anchor>
      <arglist>(const NonlinearFactorGraph &amp;graph, const Values &amp;theta, const KeyVector &amp;keys, const GaussianFactorGraph::Eliminate &amp;eliminateFunction=EliminatePreferCholesky)</arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; BatchFixedLagSmoother &gt;</type>
      <name>shared_ptr</name>
      <anchorfile>a04343.html</anchorfile>
      <anchor>a3b8e4c8ee0ce560ec6a1d6d547bfb9b8</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>std::map&lt; Key, std::set&lt; Key &gt; &gt;</type>
      <name>FactorIndex</name>
      <anchorfile>a04343.html</anchorfile>
      <anchor>a5a865e6461cf4aade83efb2c832e9212</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>insertFactors</name>
      <anchorfile>a04343.html</anchorfile>
      <anchor>a278b992e33b5d0b88643360df47eccd4</anchor>
      <arglist>(const NonlinearFactorGraph &amp;newFactors)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>removeFactors</name>
      <anchorfile>a04343.html</anchorfile>
      <anchor>a6448b93cf7a7dab36b4816eb91efea3b</anchor>
      <arglist>(const std::set&lt; size_t &gt; &amp;deleteFactors)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>eraseKeys</name>
      <anchorfile>a04343.html</anchorfile>
      <anchor>a7d4c6aef241f3e829e53e4d216a8f727</anchor>
      <arglist>(const KeyVector &amp;keys)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>reorder</name>
      <anchorfile>a04343.html</anchorfile>
      <anchor>aeb8451d2dcb91918ec5ea8d284b61f08</anchor>
      <arglist>(const KeyVector &amp;marginalizeKeys=KeyVector())</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>Result</type>
      <name>optimize</name>
      <anchorfile>a04343.html</anchorfile>
      <anchor>ae6d2f72cadbe29a15e8322cb907345bd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>marginalize</name>
      <anchorfile>a04343.html</anchorfile>
      <anchor>a1b20b07b22befc587ecdd4290344dad1</anchor>
      <arglist>(const KeyVector &amp;marginalizableKeys)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>LevenbergMarquardtParams</type>
      <name>parameters_</name>
      <anchorfile>a04343.html</anchorfile>
      <anchor>a992cf7a5870a02da2e2ff30d3ea2bbca</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>enforceConsistency_</name>
      <anchorfile>a04343.html</anchorfile>
      <anchor>a66303e6b44bc6e49ce9a142a3c5c5b78</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>NonlinearFactorGraph</type>
      <name>factors_</name>
      <anchorfile>a04343.html</anchorfile>
      <anchor>a0f13807b691183a63d0d2f6f0900a468</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Values</type>
      <name>theta_</name>
      <anchorfile>a04343.html</anchorfile>
      <anchor>a107d44e8ccce2bfdb8742fa4c00c9960</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Values</type>
      <name>linearKeys_</name>
      <anchorfile>a04343.html</anchorfile>
      <anchor>afefeef296bb47a6738d4d3348c25e6cb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Ordering</type>
      <name>ordering_</name>
      <anchorfile>a04343.html</anchorfile>
      <anchor>a2a7e57a2b2569bf0927f59a7690cf4f4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>VectorValues</type>
      <name>delta_</name>
      <anchorfile>a04343.html</anchorfile>
      <anchor>ae360f3635b53eb336e3b3e90013ea0d5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::queue&lt; size_t &gt;</type>
      <name>availableSlots_</name>
      <anchorfile>a04343.html</anchorfile>
      <anchor>aa0516aa28f234d9e71399728dcba459e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>FactorIndex</type>
      <name>factorIndex_</name>
      <anchorfile>a04343.html</anchorfile>
      <anchor>ae1457b899472072b32fbce623f7532a7</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::BayesNet</name>
    <filename>a02879.html</filename>
    <templarg></templarg>
    <base>FactorGraph&lt; CONDITIONAL &gt;</base>
    <member kind="function" protection="protected">
      <type></type>
      <name>BayesNet</name>
      <anchorfile>a02879.html</anchorfile>
      <anchor>ae6a59fca7b59061bffe9d3aad97cca69</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>BayesNet</name>
      <anchorfile>a02879.html</anchorfile>
      <anchor>ad1f05fb1c55edbb9c84ccb29a0b7464c</anchor>
      <arglist>(ITERATOR firstConditional, ITERATOR lastConditional)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>a02879.html</anchorfile>
      <anchor>adad7e4b81a2d4e2bb47eb0a38d5ea692</anchor>
      <arglist>(const std::string &amp;s=&quot;BayesNet&quot;, const KeyFormatter &amp;formatter=DefaultKeyFormatter) const</arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; CONDITIONAL &gt;</type>
      <name>sharedConditional</name>
      <anchorfile>a02879.html</anchorfile>
      <anchor>a88103713b4df54500caaf6791f874a1c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::BayesTree</name>
    <filename>a02903.html</filename>
    <templarg>CLIQUE</templarg>
    <member kind="function" protection="protected">
      <type></type>
      <name>BayesTree</name>
      <anchorfile>a02903.html</anchorfile>
      <anchor>a52b84560f2afcae463ac9487e6e91a28</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>BayesTree</name>
      <anchorfile>a02903.html</anchorfile>
      <anchor>aa612762931fbe9d2dcf4a2dc24d294d3</anchor>
      <arglist>(const This &amp;other)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>equals</name>
      <anchorfile>a02903.html</anchorfile>
      <anchor>a3dcf5729b25b82bcdef01704bd46c5ee</anchor>
      <arglist>(const This &amp;other, double tol=1e-9) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>a02903.html</anchorfile>
      <anchor>ae6cc4d319a2dc374fb0bf9b6ae0c36b7</anchor>
      <arglist>(const std::string &amp;s=&quot;&quot;, const KeyFormatter &amp;keyFormatter=DefaultKeyFormatter) const</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>size</name>
      <anchorfile>a02903.html</anchorfile>
      <anchor>a92e98e84352bb66ac0c2a522cbf5f810</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>empty</name>
      <anchorfile>a02903.html</anchorfile>
      <anchor>ae2a294356e658d863a7ec53e847166b6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Nodes &amp;</type>
      <name>nodes</name>
      <anchorfile>a02903.html</anchorfile>
      <anchor>ae4c6f6d99fe14c91356a1fa8bc1f38db</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const sharedNode</type>
      <name>operator[]</name>
      <anchorfile>a02903.html</anchorfile>
      <anchor>a058451084fcb001fab57deb472b80d4a</anchor>
      <arglist>(Key j) const</arglist>
    </member>
    <member kind="function">
      <type>const Roots &amp;</type>
      <name>roots</name>
      <anchorfile>a02903.html</anchorfile>
      <anchor>ae4cf641d9752de4ed962c6fbaf8ec6b0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const sharedClique &amp;</type>
      <name>clique</name>
      <anchorfile>a02903.html</anchorfile>
      <anchor>a3182da414fca32f344babe35d52e742f</anchor>
      <arglist>(Key j) const</arglist>
    </member>
    <member kind="function">
      <type>BayesTreeCliqueData</type>
      <name>getCliqueData</name>
      <anchorfile>a02903.html</anchorfile>
      <anchor>adac7275a0aea6c2a1ec9c8562149b2c3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>numCachedSeparatorMarginals</name>
      <anchorfile>a02903.html</anchorfile>
      <anchor>ad40916eaa9d8c47ba5cc21b6f17601d7</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>sharedConditional</type>
      <name>marginalFactor</name>
      <anchorfile>a02903.html</anchorfile>
      <anchor>abb97607ffd4abad8a9d4c0ce5f6965f9</anchor>
      <arglist>(Key j, const Eliminate &amp;function=EliminationTraitsType::DefaultEliminate) const</arglist>
    </member>
    <member kind="function">
      <type>sharedFactorGraph</type>
      <name>joint</name>
      <anchorfile>a02903.html</anchorfile>
      <anchor>a22e4554fc3f7b0c31d95e68f3bacb787</anchor>
      <arglist>(Key j1, Key j2, const Eliminate &amp;function=EliminationTraitsType::DefaultEliminate) const</arglist>
    </member>
    <member kind="function">
      <type>sharedBayesNet</type>
      <name>jointBayesNet</name>
      <anchorfile>a02903.html</anchorfile>
      <anchor>a706acddbf431e3ba6f0920750106b5b0</anchor>
      <arglist>(Key j1, Key j2, const Eliminate &amp;function=EliminationTraitsType::DefaultEliminate) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>saveGraph</name>
      <anchorfile>a02903.html</anchorfile>
      <anchor>a46d214ab6c526a76045da439a25ded0d</anchor>
      <arglist>(const std::string &amp;s, const KeyFormatter &amp;keyFormatter=DefaultKeyFormatter) const</arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>boost::serialization::access</name>
      <anchorfile>a02903.html</anchorfile>
      <anchor>ac98d07dd8f7b70e16ccb9a01abf56b9c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>saveGraph</name>
      <anchorfile>a02903.html</anchorfile>
      <anchor>a0552857ea9af52b39cd510f1025fd119</anchor>
      <arglist>(std::ostream &amp;s, sharedClique clique, const KeyFormatter &amp;keyFormatter, int parentnum=0) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>getCliqueData</name>
      <anchorfile>a02903.html</anchorfile>
      <anchor>a818151a31f302b750c2a616a75896b38</anchor>
      <arglist>(BayesTreeCliqueData &amp;stats, sharedClique clique) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>removeClique</name>
      <anchorfile>a02903.html</anchorfile>
      <anchor>a2219fa7bb8a3be648ccc4934cb5ef4f8</anchor>
      <arglist>(sharedClique clique)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>fillNodesIndex</name>
      <anchorfile>a02903.html</anchorfile>
      <anchor>a2c52c639ba14d7890dd3afaff9cb0055</anchor>
      <arglist>(const sharedClique &amp;subtree)</arglist>
    </member>
    <member kind="function">
      <type>Key</type>
      <name>findParentClique</name>
      <anchorfile>a02903.html</anchorfile>
      <anchor>a86c8a339cb4056eef47ac3879527ca81</anchor>
      <arglist>(const CONTAINER &amp;parents) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>a02903.html</anchorfile>
      <anchor>a5df6aba3391ff4e2d0e6f5cffbed6b39</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>deleteCachedShortcuts</name>
      <anchorfile>a02903.html</anchorfile>
      <anchor>aa5f027c21ede0a1c1d2270d76ce1a237</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removePath</name>
      <anchorfile>a02903.html</anchorfile>
      <anchor>a062c9ddd6ebebd8833e45e0eec4176c9</anchor>
      <arglist>(sharedClique clique, BayesNetType &amp;bn, Cliques &amp;orphans)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeTop</name>
      <anchorfile>a02903.html</anchorfile>
      <anchor>a05ea548aa03e5946c4715fd5f2f89cb8</anchor>
      <arglist>(const KeyVector &amp;keys, BayesNetType &amp;bn, Cliques &amp;orphans)</arglist>
    </member>
    <member kind="function">
      <type>Cliques</type>
      <name>removeSubtree</name>
      <anchorfile>a02903.html</anchorfile>
      <anchor>adb8a95fe9b83e8baf71e155e3599926c</anchor>
      <arglist>(const sharedClique &amp;subtree)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>insertRoot</name>
      <anchorfile>a02903.html</anchorfile>
      <anchor>aec65e8ed773458e8a9f0fcf9a86207c0</anchor>
      <arglist>(const sharedClique &amp;subtree)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addClique</name>
      <anchorfile>a02903.html</anchorfile>
      <anchor>a6ff97b5ce99270811914a852f98a10b1</anchor>
      <arglist>(const sharedClique &amp;clique, const sharedClique &amp;parent_clique=sharedClique())</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addFactorsToGraph</name>
      <anchorfile>a02903.html</anchorfile>
      <anchor>acde536ac8cc471a906a17596c3a3660c</anchor>
      <arglist>(FactorGraph&lt; FactorType &gt; &amp;graph) const</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>size</name>
      <anchorfile>a02903.html</anchorfile>
      <anchor>a92e98e84352bb66ac0c2a522cbf5f810</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>empty</name>
      <anchorfile>a02903.html</anchorfile>
      <anchor>ae2a294356e658d863a7ec53e847166b6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Nodes &amp;</type>
      <name>nodes</name>
      <anchorfile>a02903.html</anchorfile>
      <anchor>ae4c6f6d99fe14c91356a1fa8bc1f38db</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const sharedNode</type>
      <name>operator[]</name>
      <anchorfile>a02903.html</anchorfile>
      <anchor>a058451084fcb001fab57deb472b80d4a</anchor>
      <arglist>(Key j) const</arglist>
    </member>
    <member kind="function">
      <type>const Roots &amp;</type>
      <name>roots</name>
      <anchorfile>a02903.html</anchorfile>
      <anchor>ae4cf641d9752de4ed962c6fbaf8ec6b0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const sharedClique &amp;</type>
      <name>clique</name>
      <anchorfile>a02903.html</anchorfile>
      <anchor>a3182da414fca32f344babe35d52e742f</anchor>
      <arglist>(Key j) const</arglist>
    </member>
    <member kind="function">
      <type>BayesTreeCliqueData</type>
      <name>getCliqueData</name>
      <anchorfile>a02903.html</anchorfile>
      <anchor>adac7275a0aea6c2a1ec9c8562149b2c3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>numCachedSeparatorMarginals</name>
      <anchorfile>a02903.html</anchorfile>
      <anchor>ad40916eaa9d8c47ba5cc21b6f17601d7</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>sharedConditional</type>
      <name>marginalFactor</name>
      <anchorfile>a02903.html</anchorfile>
      <anchor>abb97607ffd4abad8a9d4c0ce5f6965f9</anchor>
      <arglist>(Key j, const Eliminate &amp;function=EliminationTraitsType::DefaultEliminate) const</arglist>
    </member>
    <member kind="function">
      <type>sharedFactorGraph</type>
      <name>joint</name>
      <anchorfile>a02903.html</anchorfile>
      <anchor>a22e4554fc3f7b0c31d95e68f3bacb787</anchor>
      <arglist>(Key j1, Key j2, const Eliminate &amp;function=EliminationTraitsType::DefaultEliminate) const</arglist>
    </member>
    <member kind="function">
      <type>sharedBayesNet</type>
      <name>jointBayesNet</name>
      <anchorfile>a02903.html</anchorfile>
      <anchor>a706acddbf431e3ba6f0920750106b5b0</anchor>
      <arglist>(Key j1, Key j2, const Eliminate &amp;function=EliminationTraitsType::DefaultEliminate) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>saveGraph</name>
      <anchorfile>a02903.html</anchorfile>
      <anchor>a46d214ab6c526a76045da439a25ded0d</anchor>
      <arglist>(const std::string &amp;s, const KeyFormatter &amp;keyFormatter=DefaultKeyFormatter) const</arglist>
    </member>
    <member kind="typedef">
      <type>CLIQUE</type>
      <name>Clique</name>
      <anchorfile>a02903.html</anchorfile>
      <anchor>ab644899031c0c6436e5762832d79f04d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; Clique &gt;</type>
      <name>sharedClique</name>
      <anchorfile>a02903.html</anchorfile>
      <anchor>a4bb80cd37179ebd927ee03d8ca03dc1c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Clique</type>
      <name>Node</name>
      <anchorfile>a02903.html</anchorfile>
      <anchor>a560ef1c155691cd0ec623efd09c73565</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>sharedClique</type>
      <name>sharedNode</name>
      <anchorfile>a02903.html</anchorfile>
      <anchor>a79ce1db45ce48b1006397de1f7af923e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>FastList&lt; sharedClique &gt;</type>
      <name>Cliques</name>
      <anchorfile>a02903.html</anchorfile>
      <anchor>aada1aa3f705630a0f3767156c1d8ed5c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ConcurrentMap&lt; Key, sharedClique &gt;</type>
      <name>Nodes</name>
      <anchorfile>a02903.html</anchorfile>
      <anchor>ac8f341f38c2c8a6508721994f447a458</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>FastVector&lt; sharedClique &gt;</type>
      <name>Roots</name>
      <anchorfile>a02903.html</anchorfile>
      <anchor>af38ef93cf38589e7866441c51aa5117b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type>This &amp;</type>
      <name>operator=</name>
      <anchorfile>a02903.html</anchorfile>
      <anchor>a4ab587c6308aec74d754e9bdf14e01bc</anchor>
      <arglist>(const This &amp;other)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>BayesTree</name>
      <anchorfile>a02903.html</anchorfile>
      <anchor>a52b84560f2afcae463ac9487e6e91a28</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>BayesTree</name>
      <anchorfile>a02903.html</anchorfile>
      <anchor>aa612762931fbe9d2dcf4a2dc24d294d3</anchor>
      <arglist>(const This &amp;other)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Nodes</type>
      <name>nodes_</name>
      <anchorfile>a02903.html</anchorfile>
      <anchor>a20f99ef0c4c43c0d455119fc5322c8b4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Roots</type>
      <name>roots_</name>
      <anchorfile>a02903.html</anchorfile>
      <anchor>a69d492bb6b4b2d48c132528e687a897b</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>BayesTree&lt; DiscreteBayesTreeClique &gt;</name>
    <filename>a02903.html</filename>
    <member kind="friend">
      <type>friend class</type>
      <name>boost::serialization::access</name>
      <anchorfile>a02903.html</anchorfile>
      <anchor>ac98d07dd8f7b70e16ccb9a01abf56b9c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>getCliqueData</name>
      <anchorfile>a02903.html</anchorfile>
      <anchor>a818151a31f302b750c2a616a75896b38</anchor>
      <arglist>(BayesTreeCliqueData &amp;stats, sharedClique clique) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>saveGraph</name>
      <anchorfile>a02903.html</anchorfile>
      <anchor>a0552857ea9af52b39cd510f1025fd119</anchor>
      <arglist>(std::ostream &amp;s, sharedClique clique, const KeyFormatter &amp;keyFormatter, int parentnum=0) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>removeClique</name>
      <anchorfile>a02903.html</anchorfile>
      <anchor>a2219fa7bb8a3be648ccc4934cb5ef4f8</anchor>
      <arglist>(sharedClique clique)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>fillNodesIndex</name>
      <anchorfile>a02903.html</anchorfile>
      <anchor>a2c52c639ba14d7890dd3afaff9cb0055</anchor>
      <arglist>(const sharedClique &amp;subtree)</arglist>
    </member>
    <member kind="function">
      <type>Key</type>
      <name>findParentClique</name>
      <anchorfile>a02903.html</anchorfile>
      <anchor>a86c8a339cb4056eef47ac3879527ca81</anchor>
      <arglist>(const CONTAINER &amp;parents) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>a02903.html</anchorfile>
      <anchor>a5df6aba3391ff4e2d0e6f5cffbed6b39</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>deleteCachedShortcuts</name>
      <anchorfile>a02903.html</anchorfile>
      <anchor>aa5f027c21ede0a1c1d2270d76ce1a237</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removePath</name>
      <anchorfile>a02903.html</anchorfile>
      <anchor>a062c9ddd6ebebd8833e45e0eec4176c9</anchor>
      <arglist>(sharedClique clique, BayesNetType &amp;bn, Cliques &amp;orphans)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeTop</name>
      <anchorfile>a02903.html</anchorfile>
      <anchor>a05ea548aa03e5946c4715fd5f2f89cb8</anchor>
      <arglist>(const KeyVector &amp;keys, BayesNetType &amp;bn, Cliques &amp;orphans)</arglist>
    </member>
    <member kind="function">
      <type>Cliques</type>
      <name>removeSubtree</name>
      <anchorfile>a02903.html</anchorfile>
      <anchor>adb8a95fe9b83e8baf71e155e3599926c</anchor>
      <arglist>(const sharedClique &amp;subtree)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>insertRoot</name>
      <anchorfile>a02903.html</anchorfile>
      <anchor>aec65e8ed773458e8a9f0fcf9a86207c0</anchor>
      <arglist>(const sharedClique &amp;subtree)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addClique</name>
      <anchorfile>a02903.html</anchorfile>
      <anchor>a6ff97b5ce99270811914a852f98a10b1</anchor>
      <arglist>(const sharedClique &amp;clique, const sharedClique &amp;parent_clique=sharedClique())</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addFactorsToGraph</name>
      <anchorfile>a02903.html</anchorfile>
      <anchor>acde536ac8cc471a906a17596c3a3660c</anchor>
      <arglist>(FactorGraph&lt; FactorType &gt; &amp;graph) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>BayesTree</name>
      <anchorfile>a02903.html</anchorfile>
      <anchor>a52b84560f2afcae463ac9487e6e91a28</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>BayesTree</name>
      <anchorfile>a02903.html</anchorfile>
      <anchor>aa612762931fbe9d2dcf4a2dc24d294d3</anchor>
      <arglist>(const This &amp;other)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>equals</name>
      <anchorfile>a02903.html</anchorfile>
      <anchor>a3dcf5729b25b82bcdef01704bd46c5ee</anchor>
      <arglist>(const This &amp;other, double tol=1e-9) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>a02903.html</anchorfile>
      <anchor>ae6cc4d319a2dc374fb0bf9b6ae0c36b7</anchor>
      <arglist>(const std::string &amp;s=&quot;&quot;, const KeyFormatter &amp;keyFormatter=DefaultKeyFormatter) const</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>size</name>
      <anchorfile>a02903.html</anchorfile>
      <anchor>a92e98e84352bb66ac0c2a522cbf5f810</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>empty</name>
      <anchorfile>a02903.html</anchorfile>
      <anchor>ae2a294356e658d863a7ec53e847166b6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Nodes &amp;</type>
      <name>nodes</name>
      <anchorfile>a02903.html</anchorfile>
      <anchor>ae4c6f6d99fe14c91356a1fa8bc1f38db</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const sharedNode</type>
      <name>operator[]</name>
      <anchorfile>a02903.html</anchorfile>
      <anchor>a058451084fcb001fab57deb472b80d4a</anchor>
      <arglist>(Key j) const</arglist>
    </member>
    <member kind="function">
      <type>const Roots &amp;</type>
      <name>roots</name>
      <anchorfile>a02903.html</anchorfile>
      <anchor>ae4cf641d9752de4ed962c6fbaf8ec6b0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const sharedClique &amp;</type>
      <name>clique</name>
      <anchorfile>a02903.html</anchorfile>
      <anchor>a3182da414fca32f344babe35d52e742f</anchor>
      <arglist>(Key j) const</arglist>
    </member>
    <member kind="function">
      <type>BayesTreeCliqueData</type>
      <name>getCliqueData</name>
      <anchorfile>a02903.html</anchorfile>
      <anchor>adac7275a0aea6c2a1ec9c8562149b2c3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>numCachedSeparatorMarginals</name>
      <anchorfile>a02903.html</anchorfile>
      <anchor>ad40916eaa9d8c47ba5cc21b6f17601d7</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>sharedConditional</type>
      <name>marginalFactor</name>
      <anchorfile>a02903.html</anchorfile>
      <anchor>abb97607ffd4abad8a9d4c0ce5f6965f9</anchor>
      <arglist>(Key j, const Eliminate &amp;function=EliminationTraitsType::DefaultEliminate) const</arglist>
    </member>
    <member kind="function">
      <type>sharedFactorGraph</type>
      <name>joint</name>
      <anchorfile>a02903.html</anchorfile>
      <anchor>a22e4554fc3f7b0c31d95e68f3bacb787</anchor>
      <arglist>(Key j1, Key j2, const Eliminate &amp;function=EliminationTraitsType::DefaultEliminate) const</arglist>
    </member>
    <member kind="function">
      <type>sharedBayesNet</type>
      <name>jointBayesNet</name>
      <anchorfile>a02903.html</anchorfile>
      <anchor>a706acddbf431e3ba6f0920750106b5b0</anchor>
      <arglist>(Key j1, Key j2, const Eliminate &amp;function=EliminationTraitsType::DefaultEliminate) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>saveGraph</name>
      <anchorfile>a02903.html</anchorfile>
      <anchor>a46d214ab6c526a76045da439a25ded0d</anchor>
      <arglist>(const std::string &amp;s, const KeyFormatter &amp;keyFormatter=DefaultKeyFormatter) const</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>size</name>
      <anchorfile>a02903.html</anchorfile>
      <anchor>a92e98e84352bb66ac0c2a522cbf5f810</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>empty</name>
      <anchorfile>a02903.html</anchorfile>
      <anchor>ae2a294356e658d863a7ec53e847166b6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Nodes &amp;</type>
      <name>nodes</name>
      <anchorfile>a02903.html</anchorfile>
      <anchor>ae4c6f6d99fe14c91356a1fa8bc1f38db</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const sharedNode</type>
      <name>operator[]</name>
      <anchorfile>a02903.html</anchorfile>
      <anchor>a058451084fcb001fab57deb472b80d4a</anchor>
      <arglist>(Key j) const</arglist>
    </member>
    <member kind="function">
      <type>const Roots &amp;</type>
      <name>roots</name>
      <anchorfile>a02903.html</anchorfile>
      <anchor>ae4cf641d9752de4ed962c6fbaf8ec6b0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const sharedClique &amp;</type>
      <name>clique</name>
      <anchorfile>a02903.html</anchorfile>
      <anchor>a3182da414fca32f344babe35d52e742f</anchor>
      <arglist>(Key j) const</arglist>
    </member>
    <member kind="function">
      <type>BayesTreeCliqueData</type>
      <name>getCliqueData</name>
      <anchorfile>a02903.html</anchorfile>
      <anchor>adac7275a0aea6c2a1ec9c8562149b2c3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>numCachedSeparatorMarginals</name>
      <anchorfile>a02903.html</anchorfile>
      <anchor>ad40916eaa9d8c47ba5cc21b6f17601d7</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>sharedConditional</type>
      <name>marginalFactor</name>
      <anchorfile>a02903.html</anchorfile>
      <anchor>abb97607ffd4abad8a9d4c0ce5f6965f9</anchor>
      <arglist>(Key j, const Eliminate &amp;function=EliminationTraitsType::DefaultEliminate) const</arglist>
    </member>
    <member kind="function">
      <type>sharedFactorGraph</type>
      <name>joint</name>
      <anchorfile>a02903.html</anchorfile>
      <anchor>a22e4554fc3f7b0c31d95e68f3bacb787</anchor>
      <arglist>(Key j1, Key j2, const Eliminate &amp;function=EliminationTraitsType::DefaultEliminate) const</arglist>
    </member>
    <member kind="function">
      <type>sharedBayesNet</type>
      <name>jointBayesNet</name>
      <anchorfile>a02903.html</anchorfile>
      <anchor>a706acddbf431e3ba6f0920750106b5b0</anchor>
      <arglist>(Key j1, Key j2, const Eliminate &amp;function=EliminationTraitsType::DefaultEliminate) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>saveGraph</name>
      <anchorfile>a02903.html</anchorfile>
      <anchor>a46d214ab6c526a76045da439a25ded0d</anchor>
      <arglist>(const std::string &amp;s, const KeyFormatter &amp;keyFormatter=DefaultKeyFormatter) const</arglist>
    </member>
    <member kind="typedef">
      <type>DiscreteBayesTreeClique</type>
      <name>Clique</name>
      <anchorfile>a02903.html</anchorfile>
      <anchor>ab644899031c0c6436e5762832d79f04d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; Clique &gt;</type>
      <name>sharedClique</name>
      <anchorfile>a02903.html</anchorfile>
      <anchor>a4bb80cd37179ebd927ee03d8ca03dc1c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Clique</type>
      <name>Node</name>
      <anchorfile>a02903.html</anchorfile>
      <anchor>a560ef1c155691cd0ec623efd09c73565</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>sharedClique</type>
      <name>sharedNode</name>
      <anchorfile>a02903.html</anchorfile>
      <anchor>a79ce1db45ce48b1006397de1f7af923e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>FastList&lt; sharedClique &gt;</type>
      <name>Cliques</name>
      <anchorfile>a02903.html</anchorfile>
      <anchor>aada1aa3f705630a0f3767156c1d8ed5c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ConcurrentMap&lt; Key, sharedClique &gt;</type>
      <name>Nodes</name>
      <anchorfile>a02903.html</anchorfile>
      <anchor>ac8f341f38c2c8a6508721994f447a458</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>FastVector&lt; sharedClique &gt;</type>
      <name>Roots</name>
      <anchorfile>a02903.html</anchorfile>
      <anchor>af38ef93cf38589e7866441c51aa5117b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type>This &amp;</type>
      <name>operator=</name>
      <anchorfile>a02903.html</anchorfile>
      <anchor>a4ab587c6308aec74d754e9bdf14e01bc</anchor>
      <arglist>(const This &amp;other)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>BayesTree</name>
      <anchorfile>a02903.html</anchorfile>
      <anchor>a52b84560f2afcae463ac9487e6e91a28</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>BayesTree</name>
      <anchorfile>a02903.html</anchorfile>
      <anchor>aa612762931fbe9d2dcf4a2dc24d294d3</anchor>
      <arglist>(const This &amp;other)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Nodes</type>
      <name>nodes_</name>
      <anchorfile>a02903.html</anchorfile>
      <anchor>a20f99ef0c4c43c0d455119fc5322c8b4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Roots</type>
      <name>roots_</name>
      <anchorfile>a02903.html</anchorfile>
      <anchor>a69d492bb6b4b2d48c132528e687a897b</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>BayesTree&lt; GaussianBayesTreeClique &gt;</name>
    <filename>a02903.html</filename>
    <member kind="friend">
      <type>friend class</type>
      <name>boost::serialization::access</name>
      <anchorfile>a02903.html</anchorfile>
      <anchor>ac98d07dd8f7b70e16ccb9a01abf56b9c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>getCliqueData</name>
      <anchorfile>a02903.html</anchorfile>
      <anchor>a818151a31f302b750c2a616a75896b38</anchor>
      <arglist>(BayesTreeCliqueData &amp;stats, sharedClique clique) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>saveGraph</name>
      <anchorfile>a02903.html</anchorfile>
      <anchor>a0552857ea9af52b39cd510f1025fd119</anchor>
      <arglist>(std::ostream &amp;s, sharedClique clique, const KeyFormatter &amp;keyFormatter, int parentnum=0) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>removeClique</name>
      <anchorfile>a02903.html</anchorfile>
      <anchor>a2219fa7bb8a3be648ccc4934cb5ef4f8</anchor>
      <arglist>(sharedClique clique)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>fillNodesIndex</name>
      <anchorfile>a02903.html</anchorfile>
      <anchor>a2c52c639ba14d7890dd3afaff9cb0055</anchor>
      <arglist>(const sharedClique &amp;subtree)</arglist>
    </member>
    <member kind="function">
      <type>Key</type>
      <name>findParentClique</name>
      <anchorfile>a02903.html</anchorfile>
      <anchor>a86c8a339cb4056eef47ac3879527ca81</anchor>
      <arglist>(const CONTAINER &amp;parents) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>a02903.html</anchorfile>
      <anchor>a5df6aba3391ff4e2d0e6f5cffbed6b39</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>deleteCachedShortcuts</name>
      <anchorfile>a02903.html</anchorfile>
      <anchor>aa5f027c21ede0a1c1d2270d76ce1a237</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removePath</name>
      <anchorfile>a02903.html</anchorfile>
      <anchor>a062c9ddd6ebebd8833e45e0eec4176c9</anchor>
      <arglist>(sharedClique clique, BayesNetType &amp;bn, Cliques &amp;orphans)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeTop</name>
      <anchorfile>a02903.html</anchorfile>
      <anchor>a05ea548aa03e5946c4715fd5f2f89cb8</anchor>
      <arglist>(const KeyVector &amp;keys, BayesNetType &amp;bn, Cliques &amp;orphans)</arglist>
    </member>
    <member kind="function">
      <type>Cliques</type>
      <name>removeSubtree</name>
      <anchorfile>a02903.html</anchorfile>
      <anchor>adb8a95fe9b83e8baf71e155e3599926c</anchor>
      <arglist>(const sharedClique &amp;subtree)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>insertRoot</name>
      <anchorfile>a02903.html</anchorfile>
      <anchor>aec65e8ed773458e8a9f0fcf9a86207c0</anchor>
      <arglist>(const sharedClique &amp;subtree)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addClique</name>
      <anchorfile>a02903.html</anchorfile>
      <anchor>a6ff97b5ce99270811914a852f98a10b1</anchor>
      <arglist>(const sharedClique &amp;clique, const sharedClique &amp;parent_clique=sharedClique())</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addFactorsToGraph</name>
      <anchorfile>a02903.html</anchorfile>
      <anchor>acde536ac8cc471a906a17596c3a3660c</anchor>
      <arglist>(FactorGraph&lt; FactorType &gt; &amp;graph) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>BayesTree</name>
      <anchorfile>a02903.html</anchorfile>
      <anchor>a52b84560f2afcae463ac9487e6e91a28</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>BayesTree</name>
      <anchorfile>a02903.html</anchorfile>
      <anchor>aa612762931fbe9d2dcf4a2dc24d294d3</anchor>
      <arglist>(const This &amp;other)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>equals</name>
      <anchorfile>a02903.html</anchorfile>
      <anchor>a3dcf5729b25b82bcdef01704bd46c5ee</anchor>
      <arglist>(const This &amp;other, double tol=1e-9) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>a02903.html</anchorfile>
      <anchor>ae6cc4d319a2dc374fb0bf9b6ae0c36b7</anchor>
      <arglist>(const std::string &amp;s=&quot;&quot;, const KeyFormatter &amp;keyFormatter=DefaultKeyFormatter) const</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>size</name>
      <anchorfile>a02903.html</anchorfile>
      <anchor>a92e98e84352bb66ac0c2a522cbf5f810</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>empty</name>
      <anchorfile>a02903.html</anchorfile>
      <anchor>ae2a294356e658d863a7ec53e847166b6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Nodes &amp;</type>
      <name>nodes</name>
      <anchorfile>a02903.html</anchorfile>
      <anchor>ae4c6f6d99fe14c91356a1fa8bc1f38db</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const sharedNode</type>
      <name>operator[]</name>
      <anchorfile>a02903.html</anchorfile>
      <anchor>a058451084fcb001fab57deb472b80d4a</anchor>
      <arglist>(Key j) const</arglist>
    </member>
    <member kind="function">
      <type>const Roots &amp;</type>
      <name>roots</name>
      <anchorfile>a02903.html</anchorfile>
      <anchor>ae4cf641d9752de4ed962c6fbaf8ec6b0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const sharedClique &amp;</type>
      <name>clique</name>
      <anchorfile>a02903.html</anchorfile>
      <anchor>a3182da414fca32f344babe35d52e742f</anchor>
      <arglist>(Key j) const</arglist>
    </member>
    <member kind="function">
      <type>BayesTreeCliqueData</type>
      <name>getCliqueData</name>
      <anchorfile>a02903.html</anchorfile>
      <anchor>adac7275a0aea6c2a1ec9c8562149b2c3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>numCachedSeparatorMarginals</name>
      <anchorfile>a02903.html</anchorfile>
      <anchor>ad40916eaa9d8c47ba5cc21b6f17601d7</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>sharedConditional</type>
      <name>marginalFactor</name>
      <anchorfile>a02903.html</anchorfile>
      <anchor>abb97607ffd4abad8a9d4c0ce5f6965f9</anchor>
      <arglist>(Key j, const Eliminate &amp;function=EliminationTraitsType::DefaultEliminate) const</arglist>
    </member>
    <member kind="function">
      <type>sharedFactorGraph</type>
      <name>joint</name>
      <anchorfile>a02903.html</anchorfile>
      <anchor>a22e4554fc3f7b0c31d95e68f3bacb787</anchor>
      <arglist>(Key j1, Key j2, const Eliminate &amp;function=EliminationTraitsType::DefaultEliminate) const</arglist>
    </member>
    <member kind="function">
      <type>sharedBayesNet</type>
      <name>jointBayesNet</name>
      <anchorfile>a02903.html</anchorfile>
      <anchor>a706acddbf431e3ba6f0920750106b5b0</anchor>
      <arglist>(Key j1, Key j2, const Eliminate &amp;function=EliminationTraitsType::DefaultEliminate) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>saveGraph</name>
      <anchorfile>a02903.html</anchorfile>
      <anchor>a46d214ab6c526a76045da439a25ded0d</anchor>
      <arglist>(const std::string &amp;s, const KeyFormatter &amp;keyFormatter=DefaultKeyFormatter) const</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>size</name>
      <anchorfile>a02903.html</anchorfile>
      <anchor>a92e98e84352bb66ac0c2a522cbf5f810</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>empty</name>
      <anchorfile>a02903.html</anchorfile>
      <anchor>ae2a294356e658d863a7ec53e847166b6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Nodes &amp;</type>
      <name>nodes</name>
      <anchorfile>a02903.html</anchorfile>
      <anchor>ae4c6f6d99fe14c91356a1fa8bc1f38db</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const sharedNode</type>
      <name>operator[]</name>
      <anchorfile>a02903.html</anchorfile>
      <anchor>a058451084fcb001fab57deb472b80d4a</anchor>
      <arglist>(Key j) const</arglist>
    </member>
    <member kind="function">
      <type>const Roots &amp;</type>
      <name>roots</name>
      <anchorfile>a02903.html</anchorfile>
      <anchor>ae4cf641d9752de4ed962c6fbaf8ec6b0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const sharedClique &amp;</type>
      <name>clique</name>
      <anchorfile>a02903.html</anchorfile>
      <anchor>a3182da414fca32f344babe35d52e742f</anchor>
      <arglist>(Key j) const</arglist>
    </member>
    <member kind="function">
      <type>BayesTreeCliqueData</type>
      <name>getCliqueData</name>
      <anchorfile>a02903.html</anchorfile>
      <anchor>adac7275a0aea6c2a1ec9c8562149b2c3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>numCachedSeparatorMarginals</name>
      <anchorfile>a02903.html</anchorfile>
      <anchor>ad40916eaa9d8c47ba5cc21b6f17601d7</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>sharedConditional</type>
      <name>marginalFactor</name>
      <anchorfile>a02903.html</anchorfile>
      <anchor>abb97607ffd4abad8a9d4c0ce5f6965f9</anchor>
      <arglist>(Key j, const Eliminate &amp;function=EliminationTraitsType::DefaultEliminate) const</arglist>
    </member>
    <member kind="function">
      <type>sharedFactorGraph</type>
      <name>joint</name>
      <anchorfile>a02903.html</anchorfile>
      <anchor>a22e4554fc3f7b0c31d95e68f3bacb787</anchor>
      <arglist>(Key j1, Key j2, const Eliminate &amp;function=EliminationTraitsType::DefaultEliminate) const</arglist>
    </member>
    <member kind="function">
      <type>sharedBayesNet</type>
      <name>jointBayesNet</name>
      <anchorfile>a02903.html</anchorfile>
      <anchor>a706acddbf431e3ba6f0920750106b5b0</anchor>
      <arglist>(Key j1, Key j2, const Eliminate &amp;function=EliminationTraitsType::DefaultEliminate) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>saveGraph</name>
      <anchorfile>a02903.html</anchorfile>
      <anchor>a46d214ab6c526a76045da439a25ded0d</anchor>
      <arglist>(const std::string &amp;s, const KeyFormatter &amp;keyFormatter=DefaultKeyFormatter) const</arglist>
    </member>
    <member kind="typedef">
      <type>GaussianBayesTreeClique</type>
      <name>Clique</name>
      <anchorfile>a02903.html</anchorfile>
      <anchor>ab644899031c0c6436e5762832d79f04d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; Clique &gt;</type>
      <name>sharedClique</name>
      <anchorfile>a02903.html</anchorfile>
      <anchor>a4bb80cd37179ebd927ee03d8ca03dc1c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Clique</type>
      <name>Node</name>
      <anchorfile>a02903.html</anchorfile>
      <anchor>a560ef1c155691cd0ec623efd09c73565</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>sharedClique</type>
      <name>sharedNode</name>
      <anchorfile>a02903.html</anchorfile>
      <anchor>a79ce1db45ce48b1006397de1f7af923e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>FastList&lt; sharedClique &gt;</type>
      <name>Cliques</name>
      <anchorfile>a02903.html</anchorfile>
      <anchor>aada1aa3f705630a0f3767156c1d8ed5c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ConcurrentMap&lt; Key, sharedClique &gt;</type>
      <name>Nodes</name>
      <anchorfile>a02903.html</anchorfile>
      <anchor>ac8f341f38c2c8a6508721994f447a458</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>FastVector&lt; sharedClique &gt;</type>
      <name>Roots</name>
      <anchorfile>a02903.html</anchorfile>
      <anchor>af38ef93cf38589e7866441c51aa5117b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type>This &amp;</type>
      <name>operator=</name>
      <anchorfile>a02903.html</anchorfile>
      <anchor>a4ab587c6308aec74d754e9bdf14e01bc</anchor>
      <arglist>(const This &amp;other)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>BayesTree</name>
      <anchorfile>a02903.html</anchorfile>
      <anchor>a52b84560f2afcae463ac9487e6e91a28</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>BayesTree</name>
      <anchorfile>a02903.html</anchorfile>
      <anchor>aa612762931fbe9d2dcf4a2dc24d294d3</anchor>
      <arglist>(const This &amp;other)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Nodes</type>
      <name>nodes_</name>
      <anchorfile>a02903.html</anchorfile>
      <anchor>a20f99ef0c4c43c0d455119fc5322c8b4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Roots</type>
      <name>roots_</name>
      <anchorfile>a02903.html</anchorfile>
      <anchor>a69d492bb6b4b2d48c132528e687a897b</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>BayesTree&lt; ISAM2Clique &gt;</name>
    <filename>a02903.html</filename>
    <member kind="friend">
      <type>friend class</type>
      <name>boost::serialization::access</name>
      <anchorfile>a02903.html</anchorfile>
      <anchor>ac98d07dd8f7b70e16ccb9a01abf56b9c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>getCliqueData</name>
      <anchorfile>a02903.html</anchorfile>
      <anchor>a818151a31f302b750c2a616a75896b38</anchor>
      <arglist>(BayesTreeCliqueData &amp;stats, sharedClique clique) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>saveGraph</name>
      <anchorfile>a02903.html</anchorfile>
      <anchor>a0552857ea9af52b39cd510f1025fd119</anchor>
      <arglist>(std::ostream &amp;s, sharedClique clique, const KeyFormatter &amp;keyFormatter, int parentnum=0) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>removeClique</name>
      <anchorfile>a02903.html</anchorfile>
      <anchor>a2219fa7bb8a3be648ccc4934cb5ef4f8</anchor>
      <arglist>(sharedClique clique)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>fillNodesIndex</name>
      <anchorfile>a02903.html</anchorfile>
      <anchor>a2c52c639ba14d7890dd3afaff9cb0055</anchor>
      <arglist>(const sharedClique &amp;subtree)</arglist>
    </member>
    <member kind="function">
      <type>Key</type>
      <name>findParentClique</name>
      <anchorfile>a02903.html</anchorfile>
      <anchor>a86c8a339cb4056eef47ac3879527ca81</anchor>
      <arglist>(const CONTAINER &amp;parents) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>a02903.html</anchorfile>
      <anchor>a5df6aba3391ff4e2d0e6f5cffbed6b39</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>deleteCachedShortcuts</name>
      <anchorfile>a02903.html</anchorfile>
      <anchor>aa5f027c21ede0a1c1d2270d76ce1a237</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removePath</name>
      <anchorfile>a02903.html</anchorfile>
      <anchor>a062c9ddd6ebebd8833e45e0eec4176c9</anchor>
      <arglist>(sharedClique clique, BayesNetType &amp;bn, Cliques &amp;orphans)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeTop</name>
      <anchorfile>a02903.html</anchorfile>
      <anchor>a05ea548aa03e5946c4715fd5f2f89cb8</anchor>
      <arglist>(const KeyVector &amp;keys, BayesNetType &amp;bn, Cliques &amp;orphans)</arglist>
    </member>
    <member kind="function">
      <type>Cliques</type>
      <name>removeSubtree</name>
      <anchorfile>a02903.html</anchorfile>
      <anchor>adb8a95fe9b83e8baf71e155e3599926c</anchor>
      <arglist>(const sharedClique &amp;subtree)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>insertRoot</name>
      <anchorfile>a02903.html</anchorfile>
      <anchor>aec65e8ed773458e8a9f0fcf9a86207c0</anchor>
      <arglist>(const sharedClique &amp;subtree)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addClique</name>
      <anchorfile>a02903.html</anchorfile>
      <anchor>a6ff97b5ce99270811914a852f98a10b1</anchor>
      <arglist>(const sharedClique &amp;clique, const sharedClique &amp;parent_clique=sharedClique())</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addFactorsToGraph</name>
      <anchorfile>a02903.html</anchorfile>
      <anchor>acde536ac8cc471a906a17596c3a3660c</anchor>
      <arglist>(FactorGraph&lt; FactorType &gt; &amp;graph) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>BayesTree</name>
      <anchorfile>a02903.html</anchorfile>
      <anchor>a52b84560f2afcae463ac9487e6e91a28</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>BayesTree</name>
      <anchorfile>a02903.html</anchorfile>
      <anchor>aa612762931fbe9d2dcf4a2dc24d294d3</anchor>
      <arglist>(const This &amp;other)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>equals</name>
      <anchorfile>a02903.html</anchorfile>
      <anchor>a3dcf5729b25b82bcdef01704bd46c5ee</anchor>
      <arglist>(const This &amp;other, double tol=1e-9) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>a02903.html</anchorfile>
      <anchor>ae6cc4d319a2dc374fb0bf9b6ae0c36b7</anchor>
      <arglist>(const std::string &amp;s=&quot;&quot;, const KeyFormatter &amp;keyFormatter=DefaultKeyFormatter) const</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>size</name>
      <anchorfile>a02903.html</anchorfile>
      <anchor>a92e98e84352bb66ac0c2a522cbf5f810</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>empty</name>
      <anchorfile>a02903.html</anchorfile>
      <anchor>ae2a294356e658d863a7ec53e847166b6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Nodes &amp;</type>
      <name>nodes</name>
      <anchorfile>a02903.html</anchorfile>
      <anchor>ae4c6f6d99fe14c91356a1fa8bc1f38db</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const sharedNode</type>
      <name>operator[]</name>
      <anchorfile>a02903.html</anchorfile>
      <anchor>a058451084fcb001fab57deb472b80d4a</anchor>
      <arglist>(Key j) const</arglist>
    </member>
    <member kind="function">
      <type>const Roots &amp;</type>
      <name>roots</name>
      <anchorfile>a02903.html</anchorfile>
      <anchor>ae4cf641d9752de4ed962c6fbaf8ec6b0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const sharedClique &amp;</type>
      <name>clique</name>
      <anchorfile>a02903.html</anchorfile>
      <anchor>a3182da414fca32f344babe35d52e742f</anchor>
      <arglist>(Key j) const</arglist>
    </member>
    <member kind="function">
      <type>BayesTreeCliqueData</type>
      <name>getCliqueData</name>
      <anchorfile>a02903.html</anchorfile>
      <anchor>adac7275a0aea6c2a1ec9c8562149b2c3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>numCachedSeparatorMarginals</name>
      <anchorfile>a02903.html</anchorfile>
      <anchor>ad40916eaa9d8c47ba5cc21b6f17601d7</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>sharedConditional</type>
      <name>marginalFactor</name>
      <anchorfile>a02903.html</anchorfile>
      <anchor>abb97607ffd4abad8a9d4c0ce5f6965f9</anchor>
      <arglist>(Key j, const Eliminate &amp;function=EliminationTraitsType::DefaultEliminate) const</arglist>
    </member>
    <member kind="function">
      <type>sharedFactorGraph</type>
      <name>joint</name>
      <anchorfile>a02903.html</anchorfile>
      <anchor>a22e4554fc3f7b0c31d95e68f3bacb787</anchor>
      <arglist>(Key j1, Key j2, const Eliminate &amp;function=EliminationTraitsType::DefaultEliminate) const</arglist>
    </member>
    <member kind="function">
      <type>sharedBayesNet</type>
      <name>jointBayesNet</name>
      <anchorfile>a02903.html</anchorfile>
      <anchor>a706acddbf431e3ba6f0920750106b5b0</anchor>
      <arglist>(Key j1, Key j2, const Eliminate &amp;function=EliminationTraitsType::DefaultEliminate) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>saveGraph</name>
      <anchorfile>a02903.html</anchorfile>
      <anchor>a46d214ab6c526a76045da439a25ded0d</anchor>
      <arglist>(const std::string &amp;s, const KeyFormatter &amp;keyFormatter=DefaultKeyFormatter) const</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>size</name>
      <anchorfile>a02903.html</anchorfile>
      <anchor>a92e98e84352bb66ac0c2a522cbf5f810</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>empty</name>
      <anchorfile>a02903.html</anchorfile>
      <anchor>ae2a294356e658d863a7ec53e847166b6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Nodes &amp;</type>
      <name>nodes</name>
      <anchorfile>a02903.html</anchorfile>
      <anchor>ae4c6f6d99fe14c91356a1fa8bc1f38db</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const sharedNode</type>
      <name>operator[]</name>
      <anchorfile>a02903.html</anchorfile>
      <anchor>a058451084fcb001fab57deb472b80d4a</anchor>
      <arglist>(Key j) const</arglist>
    </member>
    <member kind="function">
      <type>const Roots &amp;</type>
      <name>roots</name>
      <anchorfile>a02903.html</anchorfile>
      <anchor>ae4cf641d9752de4ed962c6fbaf8ec6b0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const sharedClique &amp;</type>
      <name>clique</name>
      <anchorfile>a02903.html</anchorfile>
      <anchor>a3182da414fca32f344babe35d52e742f</anchor>
      <arglist>(Key j) const</arglist>
    </member>
    <member kind="function">
      <type>BayesTreeCliqueData</type>
      <name>getCliqueData</name>
      <anchorfile>a02903.html</anchorfile>
      <anchor>adac7275a0aea6c2a1ec9c8562149b2c3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>numCachedSeparatorMarginals</name>
      <anchorfile>a02903.html</anchorfile>
      <anchor>ad40916eaa9d8c47ba5cc21b6f17601d7</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>sharedConditional</type>
      <name>marginalFactor</name>
      <anchorfile>a02903.html</anchorfile>
      <anchor>abb97607ffd4abad8a9d4c0ce5f6965f9</anchor>
      <arglist>(Key j, const Eliminate &amp;function=EliminationTraitsType::DefaultEliminate) const</arglist>
    </member>
    <member kind="function">
      <type>sharedFactorGraph</type>
      <name>joint</name>
      <anchorfile>a02903.html</anchorfile>
      <anchor>a22e4554fc3f7b0c31d95e68f3bacb787</anchor>
      <arglist>(Key j1, Key j2, const Eliminate &amp;function=EliminationTraitsType::DefaultEliminate) const</arglist>
    </member>
    <member kind="function">
      <type>sharedBayesNet</type>
      <name>jointBayesNet</name>
      <anchorfile>a02903.html</anchorfile>
      <anchor>a706acddbf431e3ba6f0920750106b5b0</anchor>
      <arglist>(Key j1, Key j2, const Eliminate &amp;function=EliminationTraitsType::DefaultEliminate) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>saveGraph</name>
      <anchorfile>a02903.html</anchorfile>
      <anchor>a46d214ab6c526a76045da439a25ded0d</anchor>
      <arglist>(const std::string &amp;s, const KeyFormatter &amp;keyFormatter=DefaultKeyFormatter) const</arglist>
    </member>
    <member kind="typedef">
      <type>ISAM2Clique</type>
      <name>Clique</name>
      <anchorfile>a02903.html</anchorfile>
      <anchor>ab644899031c0c6436e5762832d79f04d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; Clique &gt;</type>
      <name>sharedClique</name>
      <anchorfile>a02903.html</anchorfile>
      <anchor>a4bb80cd37179ebd927ee03d8ca03dc1c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Clique</type>
      <name>Node</name>
      <anchorfile>a02903.html</anchorfile>
      <anchor>a560ef1c155691cd0ec623efd09c73565</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>sharedClique</type>
      <name>sharedNode</name>
      <anchorfile>a02903.html</anchorfile>
      <anchor>a79ce1db45ce48b1006397de1f7af923e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>FastList&lt; sharedClique &gt;</type>
      <name>Cliques</name>
      <anchorfile>a02903.html</anchorfile>
      <anchor>aada1aa3f705630a0f3767156c1d8ed5c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ConcurrentMap&lt; Key, sharedClique &gt;</type>
      <name>Nodes</name>
      <anchorfile>a02903.html</anchorfile>
      <anchor>ac8f341f38c2c8a6508721994f447a458</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>FastVector&lt; sharedClique &gt;</type>
      <name>Roots</name>
      <anchorfile>a02903.html</anchorfile>
      <anchor>af38ef93cf38589e7866441c51aa5117b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type>This &amp;</type>
      <name>operator=</name>
      <anchorfile>a02903.html</anchorfile>
      <anchor>a4ab587c6308aec74d754e9bdf14e01bc</anchor>
      <arglist>(const This &amp;other)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>BayesTree</name>
      <anchorfile>a02903.html</anchorfile>
      <anchor>a52b84560f2afcae463ac9487e6e91a28</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>BayesTree</name>
      <anchorfile>a02903.html</anchorfile>
      <anchor>aa612762931fbe9d2dcf4a2dc24d294d3</anchor>
      <arglist>(const This &amp;other)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Nodes</type>
      <name>nodes_</name>
      <anchorfile>a02903.html</anchorfile>
      <anchor>a20f99ef0c4c43c0d455119fc5322c8b4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Roots</type>
      <name>roots_</name>
      <anchorfile>a02903.html</anchorfile>
      <anchor>a69d492bb6b4b2d48c132528e687a897b</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>BayesTree&lt; SymbolicBayesTreeClique &gt;</name>
    <filename>a02903.html</filename>
    <member kind="friend">
      <type>friend class</type>
      <name>boost::serialization::access</name>
      <anchorfile>a02903.html</anchorfile>
      <anchor>ac98d07dd8f7b70e16ccb9a01abf56b9c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>getCliqueData</name>
      <anchorfile>a02903.html</anchorfile>
      <anchor>a818151a31f302b750c2a616a75896b38</anchor>
      <arglist>(BayesTreeCliqueData &amp;stats, sharedClique clique) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>saveGraph</name>
      <anchorfile>a02903.html</anchorfile>
      <anchor>a0552857ea9af52b39cd510f1025fd119</anchor>
      <arglist>(std::ostream &amp;s, sharedClique clique, const KeyFormatter &amp;keyFormatter, int parentnum=0) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>removeClique</name>
      <anchorfile>a02903.html</anchorfile>
      <anchor>a2219fa7bb8a3be648ccc4934cb5ef4f8</anchor>
      <arglist>(sharedClique clique)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>fillNodesIndex</name>
      <anchorfile>a02903.html</anchorfile>
      <anchor>a2c52c639ba14d7890dd3afaff9cb0055</anchor>
      <arglist>(const sharedClique &amp;subtree)</arglist>
    </member>
    <member kind="function">
      <type>Key</type>
      <name>findParentClique</name>
      <anchorfile>a02903.html</anchorfile>
      <anchor>a86c8a339cb4056eef47ac3879527ca81</anchor>
      <arglist>(const CONTAINER &amp;parents) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>a02903.html</anchorfile>
      <anchor>a5df6aba3391ff4e2d0e6f5cffbed6b39</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>deleteCachedShortcuts</name>
      <anchorfile>a02903.html</anchorfile>
      <anchor>aa5f027c21ede0a1c1d2270d76ce1a237</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removePath</name>
      <anchorfile>a02903.html</anchorfile>
      <anchor>a062c9ddd6ebebd8833e45e0eec4176c9</anchor>
      <arglist>(sharedClique clique, BayesNetType &amp;bn, Cliques &amp;orphans)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeTop</name>
      <anchorfile>a02903.html</anchorfile>
      <anchor>a05ea548aa03e5946c4715fd5f2f89cb8</anchor>
      <arglist>(const KeyVector &amp;keys, BayesNetType &amp;bn, Cliques &amp;orphans)</arglist>
    </member>
    <member kind="function">
      <type>Cliques</type>
      <name>removeSubtree</name>
      <anchorfile>a02903.html</anchorfile>
      <anchor>adb8a95fe9b83e8baf71e155e3599926c</anchor>
      <arglist>(const sharedClique &amp;subtree)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>insertRoot</name>
      <anchorfile>a02903.html</anchorfile>
      <anchor>aec65e8ed773458e8a9f0fcf9a86207c0</anchor>
      <arglist>(const sharedClique &amp;subtree)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addClique</name>
      <anchorfile>a02903.html</anchorfile>
      <anchor>a6ff97b5ce99270811914a852f98a10b1</anchor>
      <arglist>(const sharedClique &amp;clique, const sharedClique &amp;parent_clique=sharedClique())</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addFactorsToGraph</name>
      <anchorfile>a02903.html</anchorfile>
      <anchor>acde536ac8cc471a906a17596c3a3660c</anchor>
      <arglist>(FactorGraph&lt; FactorType &gt; &amp;graph) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>BayesTree</name>
      <anchorfile>a02903.html</anchorfile>
      <anchor>a52b84560f2afcae463ac9487e6e91a28</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>BayesTree</name>
      <anchorfile>a02903.html</anchorfile>
      <anchor>aa612762931fbe9d2dcf4a2dc24d294d3</anchor>
      <arglist>(const This &amp;other)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>equals</name>
      <anchorfile>a02903.html</anchorfile>
      <anchor>a3dcf5729b25b82bcdef01704bd46c5ee</anchor>
      <arglist>(const This &amp;other, double tol=1e-9) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>a02903.html</anchorfile>
      <anchor>ae6cc4d319a2dc374fb0bf9b6ae0c36b7</anchor>
      <arglist>(const std::string &amp;s=&quot;&quot;, const KeyFormatter &amp;keyFormatter=DefaultKeyFormatter) const</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>size</name>
      <anchorfile>a02903.html</anchorfile>
      <anchor>a92e98e84352bb66ac0c2a522cbf5f810</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>empty</name>
      <anchorfile>a02903.html</anchorfile>
      <anchor>ae2a294356e658d863a7ec53e847166b6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Nodes &amp;</type>
      <name>nodes</name>
      <anchorfile>a02903.html</anchorfile>
      <anchor>ae4c6f6d99fe14c91356a1fa8bc1f38db</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const sharedNode</type>
      <name>operator[]</name>
      <anchorfile>a02903.html</anchorfile>
      <anchor>a058451084fcb001fab57deb472b80d4a</anchor>
      <arglist>(Key j) const</arglist>
    </member>
    <member kind="function">
      <type>const Roots &amp;</type>
      <name>roots</name>
      <anchorfile>a02903.html</anchorfile>
      <anchor>ae4cf641d9752de4ed962c6fbaf8ec6b0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const sharedClique &amp;</type>
      <name>clique</name>
      <anchorfile>a02903.html</anchorfile>
      <anchor>a3182da414fca32f344babe35d52e742f</anchor>
      <arglist>(Key j) const</arglist>
    </member>
    <member kind="function">
      <type>BayesTreeCliqueData</type>
      <name>getCliqueData</name>
      <anchorfile>a02903.html</anchorfile>
      <anchor>adac7275a0aea6c2a1ec9c8562149b2c3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>numCachedSeparatorMarginals</name>
      <anchorfile>a02903.html</anchorfile>
      <anchor>ad40916eaa9d8c47ba5cc21b6f17601d7</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>sharedConditional</type>
      <name>marginalFactor</name>
      <anchorfile>a02903.html</anchorfile>
      <anchor>abb97607ffd4abad8a9d4c0ce5f6965f9</anchor>
      <arglist>(Key j, const Eliminate &amp;function=EliminationTraitsType::DefaultEliminate) const</arglist>
    </member>
    <member kind="function">
      <type>sharedFactorGraph</type>
      <name>joint</name>
      <anchorfile>a02903.html</anchorfile>
      <anchor>a22e4554fc3f7b0c31d95e68f3bacb787</anchor>
      <arglist>(Key j1, Key j2, const Eliminate &amp;function=EliminationTraitsType::DefaultEliminate) const</arglist>
    </member>
    <member kind="function">
      <type>sharedBayesNet</type>
      <name>jointBayesNet</name>
      <anchorfile>a02903.html</anchorfile>
      <anchor>a706acddbf431e3ba6f0920750106b5b0</anchor>
      <arglist>(Key j1, Key j2, const Eliminate &amp;function=EliminationTraitsType::DefaultEliminate) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>saveGraph</name>
      <anchorfile>a02903.html</anchorfile>
      <anchor>a46d214ab6c526a76045da439a25ded0d</anchor>
      <arglist>(const std::string &amp;s, const KeyFormatter &amp;keyFormatter=DefaultKeyFormatter) const</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>size</name>
      <anchorfile>a02903.html</anchorfile>
      <anchor>a92e98e84352bb66ac0c2a522cbf5f810</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>empty</name>
      <anchorfile>a02903.html</anchorfile>
      <anchor>ae2a294356e658d863a7ec53e847166b6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Nodes &amp;</type>
      <name>nodes</name>
      <anchorfile>a02903.html</anchorfile>
      <anchor>ae4c6f6d99fe14c91356a1fa8bc1f38db</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const sharedNode</type>
      <name>operator[]</name>
      <anchorfile>a02903.html</anchorfile>
      <anchor>a058451084fcb001fab57deb472b80d4a</anchor>
      <arglist>(Key j) const</arglist>
    </member>
    <member kind="function">
      <type>const Roots &amp;</type>
      <name>roots</name>
      <anchorfile>a02903.html</anchorfile>
      <anchor>ae4cf641d9752de4ed962c6fbaf8ec6b0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const sharedClique &amp;</type>
      <name>clique</name>
      <anchorfile>a02903.html</anchorfile>
      <anchor>a3182da414fca32f344babe35d52e742f</anchor>
      <arglist>(Key j) const</arglist>
    </member>
    <member kind="function">
      <type>BayesTreeCliqueData</type>
      <name>getCliqueData</name>
      <anchorfile>a02903.html</anchorfile>
      <anchor>adac7275a0aea6c2a1ec9c8562149b2c3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>numCachedSeparatorMarginals</name>
      <anchorfile>a02903.html</anchorfile>
      <anchor>ad40916eaa9d8c47ba5cc21b6f17601d7</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>sharedConditional</type>
      <name>marginalFactor</name>
      <anchorfile>a02903.html</anchorfile>
      <anchor>abb97607ffd4abad8a9d4c0ce5f6965f9</anchor>
      <arglist>(Key j, const Eliminate &amp;function=EliminationTraitsType::DefaultEliminate) const</arglist>
    </member>
    <member kind="function">
      <type>sharedFactorGraph</type>
      <name>joint</name>
      <anchorfile>a02903.html</anchorfile>
      <anchor>a22e4554fc3f7b0c31d95e68f3bacb787</anchor>
      <arglist>(Key j1, Key j2, const Eliminate &amp;function=EliminationTraitsType::DefaultEliminate) const</arglist>
    </member>
    <member kind="function">
      <type>sharedBayesNet</type>
      <name>jointBayesNet</name>
      <anchorfile>a02903.html</anchorfile>
      <anchor>a706acddbf431e3ba6f0920750106b5b0</anchor>
      <arglist>(Key j1, Key j2, const Eliminate &amp;function=EliminationTraitsType::DefaultEliminate) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>saveGraph</name>
      <anchorfile>a02903.html</anchorfile>
      <anchor>a46d214ab6c526a76045da439a25ded0d</anchor>
      <arglist>(const std::string &amp;s, const KeyFormatter &amp;keyFormatter=DefaultKeyFormatter) const</arglist>
    </member>
    <member kind="typedef">
      <type>SymbolicBayesTreeClique</type>
      <name>Clique</name>
      <anchorfile>a02903.html</anchorfile>
      <anchor>ab644899031c0c6436e5762832d79f04d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; Clique &gt;</type>
      <name>sharedClique</name>
      <anchorfile>a02903.html</anchorfile>
      <anchor>a4bb80cd37179ebd927ee03d8ca03dc1c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Clique</type>
      <name>Node</name>
      <anchorfile>a02903.html</anchorfile>
      <anchor>a560ef1c155691cd0ec623efd09c73565</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>sharedClique</type>
      <name>sharedNode</name>
      <anchorfile>a02903.html</anchorfile>
      <anchor>a79ce1db45ce48b1006397de1f7af923e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>FastList&lt; sharedClique &gt;</type>
      <name>Cliques</name>
      <anchorfile>a02903.html</anchorfile>
      <anchor>aada1aa3f705630a0f3767156c1d8ed5c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ConcurrentMap&lt; Key, sharedClique &gt;</type>
      <name>Nodes</name>
      <anchorfile>a02903.html</anchorfile>
      <anchor>ac8f341f38c2c8a6508721994f447a458</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>FastVector&lt; sharedClique &gt;</type>
      <name>Roots</name>
      <anchorfile>a02903.html</anchorfile>
      <anchor>af38ef93cf38589e7866441c51aa5117b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type>This &amp;</type>
      <name>operator=</name>
      <anchorfile>a02903.html</anchorfile>
      <anchor>a4ab587c6308aec74d754e9bdf14e01bc</anchor>
      <arglist>(const This &amp;other)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>BayesTree</name>
      <anchorfile>a02903.html</anchorfile>
      <anchor>a52b84560f2afcae463ac9487e6e91a28</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>BayesTree</name>
      <anchorfile>a02903.html</anchorfile>
      <anchor>aa612762931fbe9d2dcf4a2dc24d294d3</anchor>
      <arglist>(const This &amp;other)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Nodes</type>
      <name>nodes_</name>
      <anchorfile>a02903.html</anchorfile>
      <anchor>a20f99ef0c4c43c0d455119fc5322c8b4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Roots</type>
      <name>roots_</name>
      <anchorfile>a02903.html</anchorfile>
      <anchor>a69d492bb6b4b2d48c132528e687a897b</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::BayesTreeCliqueBase</name>
    <filename>a02915.html</filename>
    <templarg>DERIVED</templarg>
    <templarg>FACTORGRAPH</templarg>
    <member kind="function" protection="protected">
      <type></type>
      <name>BayesTreeCliqueBase</name>
      <anchorfile>a02915.html</anchorfile>
      <anchor>a425f748b06905e5f127e061e6b49c440</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>BayesTreeCliqueBase</name>
      <anchorfile>a02915.html</anchorfile>
      <anchor>a6c6e1acd351eea812eed018d0946edea</anchor>
      <arglist>(const sharedConditional &amp;conditional)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>equals</name>
      <anchorfile>a02915.html</anchorfile>
      <anchor>a93d41d0b550a8fb9fb95f5c892fb2615</anchor>
      <arglist>(const DERIVED &amp;other, double tol=1e-9) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>a02915.html</anchorfile>
      <anchor>ad03372d87f70713d127a4a702cfcdf23</anchor>
      <arglist>(const std::string &amp;s=&quot;&quot;, const KeyFormatter &amp;keyFormatter=DefaultKeyFormatter) const</arglist>
    </member>
    <member kind="function">
      <type>const sharedConditional &amp;</type>
      <name>conditional</name>
      <anchorfile>a02915.html</anchorfile>
      <anchor>a027c973b55e69d4522be8c5a422238bc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isRoot</name>
      <anchorfile>a02915.html</anchorfile>
      <anchor>a7b3765e6f51f0c9bb26a2dd58bb6b77a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>treeSize</name>
      <anchorfile>a02915.html</anchorfile>
      <anchor>a57f5a90f8cf4fe3835137d93bf3ace8c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>numCachedSeparatorMarginals</name>
      <anchorfile>a02915.html</anchorfile>
      <anchor>ad7f63b089fd6def94816a0d737622b4b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>derived_ptr</type>
      <name>parent</name>
      <anchorfile>a02915.html</anchorfile>
      <anchor>a57672340d13636be34533e6d7d65a3b6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>problemSize</name>
      <anchorfile>a02915.html</anchorfile>
      <anchor>a39a0b013ef5feecbcb8ca53b1d881806</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>boost::serialization::access</name>
      <anchorfile>a02915.html</anchorfile>
      <anchor>ac98d07dd8f7b70e16ccb9a01abf56b9c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type>KeyVector</type>
      <name>separator_setminus_B</name>
      <anchorfile>a02915.html</anchorfile>
      <anchor>acf1ef12f8527f4c2c708ef158362949d</anchor>
      <arglist>(const derived_ptr &amp;B) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>KeyVector</type>
      <name>shortcut_indices</name>
      <anchorfile>a02915.html</anchorfile>
      <anchor>ab3ed1131e643eb5b93220129cf84c681</anchor>
      <arglist>(const derived_ptr &amp;B, const FactorGraphType &amp;p_Cp_B) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>deleteCachedShortcutsNonRecursive</name>
      <anchorfile>a02915.html</anchorfile>
      <anchor>a1e30a722b512467abcb47be6e32b55ad</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>BayesNetType</type>
      <name>shortcut</name>
      <anchorfile>a02915.html</anchorfile>
      <anchor>a9edb268cc435f7b2a0c254df1404904b</anchor>
      <arglist>(const derived_ptr &amp;root, Eliminate function=EliminationTraitsType::DefaultEliminate) const</arglist>
    </member>
    <member kind="function">
      <type>FactorGraphType</type>
      <name>separatorMarginal</name>
      <anchorfile>a02915.html</anchorfile>
      <anchor>a991d9ea46836f7fe8eda6e1569cee16e</anchor>
      <arglist>(Eliminate function=EliminationTraitsType::DefaultEliminate) const</arglist>
    </member>
    <member kind="function">
      <type>FactorGraphType</type>
      <name>marginal2</name>
      <anchorfile>a02915.html</anchorfile>
      <anchor>a814b38ebe6f0ac5383306b1570fe4819</anchor>
      <arglist>(Eliminate function=EliminationTraitsType::DefaultEliminate) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>deleteCachedShortcuts</name>
      <anchorfile>a02915.html</anchorfile>
      <anchor>ab0eb467a5a3a8ac259aeca28d3be914a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setEliminationResult</name>
      <anchorfile>a02915.html</anchorfile>
      <anchor>afb3a025fa21a798cd6cafa931d54ab63</anchor>
      <arglist>(const typename FactorGraphType::EliminationResult &amp;eliminationResult)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>boost::optional&lt; FactorGraphType &gt;</type>
      <name>cachedSeparatorMarginal_</name>
      <anchorfile>a02915.html</anchorfile>
      <anchor>af3d82f22471162aafc735e1413d9e428</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>BayesTreeCliqueBase&lt; DiscreteBayesTreeClique, DiscreteFactorGraph &gt;</name>
    <filename>a02915.html</filename>
    <member kind="friend">
      <type>friend class</type>
      <name>boost::serialization::access</name>
      <anchorfile>a02915.html</anchorfile>
      <anchor>ac98d07dd8f7b70e16ccb9a01abf56b9c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type>KeyVector</type>
      <name>separator_setminus_B</name>
      <anchorfile>a02915.html</anchorfile>
      <anchor>acf1ef12f8527f4c2c708ef158362949d</anchor>
      <arglist>(const derived_ptr &amp;B) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>KeyVector</type>
      <name>shortcut_indices</name>
      <anchorfile>a02915.html</anchorfile>
      <anchor>ab3ed1131e643eb5b93220129cf84c681</anchor>
      <arglist>(const derived_ptr &amp;B, const FactorGraphType &amp;p_Cp_B) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>deleteCachedShortcutsNonRecursive</name>
      <anchorfile>a02915.html</anchorfile>
      <anchor>a1e30a722b512467abcb47be6e32b55ad</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>BayesNetType</type>
      <name>shortcut</name>
      <anchorfile>a02915.html</anchorfile>
      <anchor>a9edb268cc435f7b2a0c254df1404904b</anchor>
      <arglist>(const derived_ptr &amp;root, Eliminate function=EliminationTraitsType::DefaultEliminate) const</arglist>
    </member>
    <member kind="function">
      <type>FactorGraphType</type>
      <name>separatorMarginal</name>
      <anchorfile>a02915.html</anchorfile>
      <anchor>a991d9ea46836f7fe8eda6e1569cee16e</anchor>
      <arglist>(Eliminate function=EliminationTraitsType::DefaultEliminate) const</arglist>
    </member>
    <member kind="function">
      <type>FactorGraphType</type>
      <name>marginal2</name>
      <anchorfile>a02915.html</anchorfile>
      <anchor>a814b38ebe6f0ac5383306b1570fe4819</anchor>
      <arglist>(Eliminate function=EliminationTraitsType::DefaultEliminate) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>deleteCachedShortcuts</name>
      <anchorfile>a02915.html</anchorfile>
      <anchor>ab0eb467a5a3a8ac259aeca28d3be914a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>BayesTreeCliqueBase</name>
      <anchorfile>a02915.html</anchorfile>
      <anchor>a425f748b06905e5f127e061e6b49c440</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>BayesTreeCliqueBase</name>
      <anchorfile>a02915.html</anchorfile>
      <anchor>a6c6e1acd351eea812eed018d0946edea</anchor>
      <arglist>(const sharedConditional &amp;conditional)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>equals</name>
      <anchorfile>a02915.html</anchorfile>
      <anchor>a93d41d0b550a8fb9fb95f5c892fb2615</anchor>
      <arglist>(const DiscreteBayesTreeClique &amp;other, double tol=1e-9) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>a02915.html</anchorfile>
      <anchor>ad03372d87f70713d127a4a702cfcdf23</anchor>
      <arglist>(const std::string &amp;s=&quot;&quot;, const KeyFormatter &amp;keyFormatter=DefaultKeyFormatter) const</arglist>
    </member>
    <member kind="function">
      <type>const sharedConditional &amp;</type>
      <name>conditional</name>
      <anchorfile>a02915.html</anchorfile>
      <anchor>a027c973b55e69d4522be8c5a422238bc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isRoot</name>
      <anchorfile>a02915.html</anchorfile>
      <anchor>a7b3765e6f51f0c9bb26a2dd58bb6b77a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>treeSize</name>
      <anchorfile>a02915.html</anchorfile>
      <anchor>a57f5a90f8cf4fe3835137d93bf3ace8c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>numCachedSeparatorMarginals</name>
      <anchorfile>a02915.html</anchorfile>
      <anchor>ad7f63b089fd6def94816a0d737622b4b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>derived_ptr</type>
      <name>parent</name>
      <anchorfile>a02915.html</anchorfile>
      <anchor>a57672340d13636be34533e6d7d65a3b6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>problemSize</name>
      <anchorfile>a02915.html</anchorfile>
      <anchor>a39a0b013ef5feecbcb8ca53b1d881806</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setEliminationResult</name>
      <anchorfile>a02915.html</anchorfile>
      <anchor>afb3a025fa21a798cd6cafa931d54ab63</anchor>
      <arglist>(const typename FactorGraphType::EliminationResult &amp;eliminationResult)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>equals</name>
      <anchorfile>a02915.html</anchorfile>
      <anchor>a93d41d0b550a8fb9fb95f5c892fb2615</anchor>
      <arglist>(const DiscreteBayesTreeClique &amp;other, double tol=1e-9) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>a02915.html</anchorfile>
      <anchor>ad03372d87f70713d127a4a702cfcdf23</anchor>
      <arglist>(const std::string &amp;s=&quot;&quot;, const KeyFormatter &amp;keyFormatter=DefaultKeyFormatter) const</arglist>
    </member>
    <member kind="function">
      <type>const sharedConditional &amp;</type>
      <name>conditional</name>
      <anchorfile>a02915.html</anchorfile>
      <anchor>a027c973b55e69d4522be8c5a422238bc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isRoot</name>
      <anchorfile>a02915.html</anchorfile>
      <anchor>a7b3765e6f51f0c9bb26a2dd58bb6b77a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>treeSize</name>
      <anchorfile>a02915.html</anchorfile>
      <anchor>a57f5a90f8cf4fe3835137d93bf3ace8c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>numCachedSeparatorMarginals</name>
      <anchorfile>a02915.html</anchorfile>
      <anchor>ad7f63b089fd6def94816a0d737622b4b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>derived_ptr</type>
      <name>parent</name>
      <anchorfile>a02915.html</anchorfile>
      <anchor>a57672340d13636be34533e6d7d65a3b6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>problemSize</name>
      <anchorfile>a02915.html</anchorfile>
      <anchor>a39a0b013ef5feecbcb8ca53b1d881806</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>BayesTreeCliqueBase</name>
      <anchorfile>a02915.html</anchorfile>
      <anchor>a425f748b06905e5f127e061e6b49c440</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>BayesTreeCliqueBase</name>
      <anchorfile>a02915.html</anchorfile>
      <anchor>a6c6e1acd351eea812eed018d0946edea</anchor>
      <arglist>(const sharedConditional &amp;conditional)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>boost::optional&lt; FactorGraphType &gt;</type>
      <name>cachedSeparatorMarginal_</name>
      <anchorfile>a02915.html</anchorfile>
      <anchor>af3d82f22471162aafc735e1413d9e428</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>BayesTreeCliqueBase&lt; GaussianBayesTreeClique, GaussianFactorGraph &gt;</name>
    <filename>a02915.html</filename>
    <member kind="friend">
      <type>friend class</type>
      <name>boost::serialization::access</name>
      <anchorfile>a02915.html</anchorfile>
      <anchor>ac98d07dd8f7b70e16ccb9a01abf56b9c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type>KeyVector</type>
      <name>separator_setminus_B</name>
      <anchorfile>a02915.html</anchorfile>
      <anchor>acf1ef12f8527f4c2c708ef158362949d</anchor>
      <arglist>(const derived_ptr &amp;B) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>KeyVector</type>
      <name>shortcut_indices</name>
      <anchorfile>a02915.html</anchorfile>
      <anchor>ab3ed1131e643eb5b93220129cf84c681</anchor>
      <arglist>(const derived_ptr &amp;B, const FactorGraphType &amp;p_Cp_B) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>deleteCachedShortcutsNonRecursive</name>
      <anchorfile>a02915.html</anchorfile>
      <anchor>a1e30a722b512467abcb47be6e32b55ad</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>BayesNetType</type>
      <name>shortcut</name>
      <anchorfile>a02915.html</anchorfile>
      <anchor>a9edb268cc435f7b2a0c254df1404904b</anchor>
      <arglist>(const derived_ptr &amp;root, Eliminate function=EliminationTraitsType::DefaultEliminate) const</arglist>
    </member>
    <member kind="function">
      <type>FactorGraphType</type>
      <name>separatorMarginal</name>
      <anchorfile>a02915.html</anchorfile>
      <anchor>a991d9ea46836f7fe8eda6e1569cee16e</anchor>
      <arglist>(Eliminate function=EliminationTraitsType::DefaultEliminate) const</arglist>
    </member>
    <member kind="function">
      <type>FactorGraphType</type>
      <name>marginal2</name>
      <anchorfile>a02915.html</anchorfile>
      <anchor>a814b38ebe6f0ac5383306b1570fe4819</anchor>
      <arglist>(Eliminate function=EliminationTraitsType::DefaultEliminate) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>deleteCachedShortcuts</name>
      <anchorfile>a02915.html</anchorfile>
      <anchor>ab0eb467a5a3a8ac259aeca28d3be914a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>BayesTreeCliqueBase</name>
      <anchorfile>a02915.html</anchorfile>
      <anchor>a425f748b06905e5f127e061e6b49c440</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>BayesTreeCliqueBase</name>
      <anchorfile>a02915.html</anchorfile>
      <anchor>a6c6e1acd351eea812eed018d0946edea</anchor>
      <arglist>(const sharedConditional &amp;conditional)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>equals</name>
      <anchorfile>a02915.html</anchorfile>
      <anchor>a93d41d0b550a8fb9fb95f5c892fb2615</anchor>
      <arglist>(const GaussianBayesTreeClique &amp;other, double tol=1e-9) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>a02915.html</anchorfile>
      <anchor>ad03372d87f70713d127a4a702cfcdf23</anchor>
      <arglist>(const std::string &amp;s=&quot;&quot;, const KeyFormatter &amp;keyFormatter=DefaultKeyFormatter) const</arglist>
    </member>
    <member kind="function">
      <type>const sharedConditional &amp;</type>
      <name>conditional</name>
      <anchorfile>a02915.html</anchorfile>
      <anchor>a027c973b55e69d4522be8c5a422238bc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isRoot</name>
      <anchorfile>a02915.html</anchorfile>
      <anchor>a7b3765e6f51f0c9bb26a2dd58bb6b77a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>treeSize</name>
      <anchorfile>a02915.html</anchorfile>
      <anchor>a57f5a90f8cf4fe3835137d93bf3ace8c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>numCachedSeparatorMarginals</name>
      <anchorfile>a02915.html</anchorfile>
      <anchor>ad7f63b089fd6def94816a0d737622b4b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>derived_ptr</type>
      <name>parent</name>
      <anchorfile>a02915.html</anchorfile>
      <anchor>a57672340d13636be34533e6d7d65a3b6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>problemSize</name>
      <anchorfile>a02915.html</anchorfile>
      <anchor>a39a0b013ef5feecbcb8ca53b1d881806</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setEliminationResult</name>
      <anchorfile>a02915.html</anchorfile>
      <anchor>afb3a025fa21a798cd6cafa931d54ab63</anchor>
      <arglist>(const typename FactorGraphType::EliminationResult &amp;eliminationResult)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>equals</name>
      <anchorfile>a02915.html</anchorfile>
      <anchor>a93d41d0b550a8fb9fb95f5c892fb2615</anchor>
      <arglist>(const GaussianBayesTreeClique &amp;other, double tol=1e-9) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>a02915.html</anchorfile>
      <anchor>ad03372d87f70713d127a4a702cfcdf23</anchor>
      <arglist>(const std::string &amp;s=&quot;&quot;, const KeyFormatter &amp;keyFormatter=DefaultKeyFormatter) const</arglist>
    </member>
    <member kind="function">
      <type>const sharedConditional &amp;</type>
      <name>conditional</name>
      <anchorfile>a02915.html</anchorfile>
      <anchor>a027c973b55e69d4522be8c5a422238bc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isRoot</name>
      <anchorfile>a02915.html</anchorfile>
      <anchor>a7b3765e6f51f0c9bb26a2dd58bb6b77a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>treeSize</name>
      <anchorfile>a02915.html</anchorfile>
      <anchor>a57f5a90f8cf4fe3835137d93bf3ace8c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>numCachedSeparatorMarginals</name>
      <anchorfile>a02915.html</anchorfile>
      <anchor>ad7f63b089fd6def94816a0d737622b4b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>derived_ptr</type>
      <name>parent</name>
      <anchorfile>a02915.html</anchorfile>
      <anchor>a57672340d13636be34533e6d7d65a3b6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>problemSize</name>
      <anchorfile>a02915.html</anchorfile>
      <anchor>a39a0b013ef5feecbcb8ca53b1d881806</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>BayesTreeCliqueBase</name>
      <anchorfile>a02915.html</anchorfile>
      <anchor>a425f748b06905e5f127e061e6b49c440</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>BayesTreeCliqueBase</name>
      <anchorfile>a02915.html</anchorfile>
      <anchor>a6c6e1acd351eea812eed018d0946edea</anchor>
      <arglist>(const sharedConditional &amp;conditional)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>boost::optional&lt; FactorGraphType &gt;</type>
      <name>cachedSeparatorMarginal_</name>
      <anchorfile>a02915.html</anchorfile>
      <anchor>af3d82f22471162aafc735e1413d9e428</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>BayesTreeCliqueBase&lt; ISAM2Clique, GaussianFactorGraph &gt;</name>
    <filename>a02915.html</filename>
    <member kind="friend">
      <type>friend class</type>
      <name>boost::serialization::access</name>
      <anchorfile>a02915.html</anchorfile>
      <anchor>ac98d07dd8f7b70e16ccb9a01abf56b9c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type>KeyVector</type>
      <name>separator_setminus_B</name>
      <anchorfile>a02915.html</anchorfile>
      <anchor>acf1ef12f8527f4c2c708ef158362949d</anchor>
      <arglist>(const derived_ptr &amp;B) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>KeyVector</type>
      <name>shortcut_indices</name>
      <anchorfile>a02915.html</anchorfile>
      <anchor>ab3ed1131e643eb5b93220129cf84c681</anchor>
      <arglist>(const derived_ptr &amp;B, const FactorGraphType &amp;p_Cp_B) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>deleteCachedShortcutsNonRecursive</name>
      <anchorfile>a02915.html</anchorfile>
      <anchor>a1e30a722b512467abcb47be6e32b55ad</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>BayesNetType</type>
      <name>shortcut</name>
      <anchorfile>a02915.html</anchorfile>
      <anchor>a9edb268cc435f7b2a0c254df1404904b</anchor>
      <arglist>(const derived_ptr &amp;root, Eliminate function=EliminationTraitsType::DefaultEliminate) const</arglist>
    </member>
    <member kind="function">
      <type>FactorGraphType</type>
      <name>separatorMarginal</name>
      <anchorfile>a02915.html</anchorfile>
      <anchor>a991d9ea46836f7fe8eda6e1569cee16e</anchor>
      <arglist>(Eliminate function=EliminationTraitsType::DefaultEliminate) const</arglist>
    </member>
    <member kind="function">
      <type>FactorGraphType</type>
      <name>marginal2</name>
      <anchorfile>a02915.html</anchorfile>
      <anchor>a814b38ebe6f0ac5383306b1570fe4819</anchor>
      <arglist>(Eliminate function=EliminationTraitsType::DefaultEliminate) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>deleteCachedShortcuts</name>
      <anchorfile>a02915.html</anchorfile>
      <anchor>ab0eb467a5a3a8ac259aeca28d3be914a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>BayesTreeCliqueBase</name>
      <anchorfile>a02915.html</anchorfile>
      <anchor>a425f748b06905e5f127e061e6b49c440</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>BayesTreeCliqueBase</name>
      <anchorfile>a02915.html</anchorfile>
      <anchor>a6c6e1acd351eea812eed018d0946edea</anchor>
      <arglist>(const sharedConditional &amp;conditional)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>equals</name>
      <anchorfile>a02915.html</anchorfile>
      <anchor>a93d41d0b550a8fb9fb95f5c892fb2615</anchor>
      <arglist>(const ISAM2Clique &amp;other, double tol=1e-9) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>a02915.html</anchorfile>
      <anchor>ad03372d87f70713d127a4a702cfcdf23</anchor>
      <arglist>(const std::string &amp;s=&quot;&quot;, const KeyFormatter &amp;keyFormatter=DefaultKeyFormatter) const</arglist>
    </member>
    <member kind="function">
      <type>const sharedConditional &amp;</type>
      <name>conditional</name>
      <anchorfile>a02915.html</anchorfile>
      <anchor>a027c973b55e69d4522be8c5a422238bc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isRoot</name>
      <anchorfile>a02915.html</anchorfile>
      <anchor>a7b3765e6f51f0c9bb26a2dd58bb6b77a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>treeSize</name>
      <anchorfile>a02915.html</anchorfile>
      <anchor>a57f5a90f8cf4fe3835137d93bf3ace8c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>numCachedSeparatorMarginals</name>
      <anchorfile>a02915.html</anchorfile>
      <anchor>ad7f63b089fd6def94816a0d737622b4b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>derived_ptr</type>
      <name>parent</name>
      <anchorfile>a02915.html</anchorfile>
      <anchor>a57672340d13636be34533e6d7d65a3b6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>problemSize</name>
      <anchorfile>a02915.html</anchorfile>
      <anchor>a39a0b013ef5feecbcb8ca53b1d881806</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setEliminationResult</name>
      <anchorfile>a02915.html</anchorfile>
      <anchor>afb3a025fa21a798cd6cafa931d54ab63</anchor>
      <arglist>(const typename FactorGraphType::EliminationResult &amp;eliminationResult)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>equals</name>
      <anchorfile>a02915.html</anchorfile>
      <anchor>a93d41d0b550a8fb9fb95f5c892fb2615</anchor>
      <arglist>(const ISAM2Clique &amp;other, double tol=1e-9) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>a02915.html</anchorfile>
      <anchor>ad03372d87f70713d127a4a702cfcdf23</anchor>
      <arglist>(const std::string &amp;s=&quot;&quot;, const KeyFormatter &amp;keyFormatter=DefaultKeyFormatter) const</arglist>
    </member>
    <member kind="function">
      <type>const sharedConditional &amp;</type>
      <name>conditional</name>
      <anchorfile>a02915.html</anchorfile>
      <anchor>a027c973b55e69d4522be8c5a422238bc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isRoot</name>
      <anchorfile>a02915.html</anchorfile>
      <anchor>a7b3765e6f51f0c9bb26a2dd58bb6b77a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>treeSize</name>
      <anchorfile>a02915.html</anchorfile>
      <anchor>a57f5a90f8cf4fe3835137d93bf3ace8c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>numCachedSeparatorMarginals</name>
      <anchorfile>a02915.html</anchorfile>
      <anchor>ad7f63b089fd6def94816a0d737622b4b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>derived_ptr</type>
      <name>parent</name>
      <anchorfile>a02915.html</anchorfile>
      <anchor>a57672340d13636be34533e6d7d65a3b6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>problemSize</name>
      <anchorfile>a02915.html</anchorfile>
      <anchor>a39a0b013ef5feecbcb8ca53b1d881806</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>BayesTreeCliqueBase</name>
      <anchorfile>a02915.html</anchorfile>
      <anchor>a425f748b06905e5f127e061e6b49c440</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>BayesTreeCliqueBase</name>
      <anchorfile>a02915.html</anchorfile>
      <anchor>a6c6e1acd351eea812eed018d0946edea</anchor>
      <arglist>(const sharedConditional &amp;conditional)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>boost::optional&lt; FactorGraphType &gt;</type>
      <name>cachedSeparatorMarginal_</name>
      <anchorfile>a02915.html</anchorfile>
      <anchor>af3d82f22471162aafc735e1413d9e428</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>BayesTreeCliqueBase&lt; SymbolicBayesTreeClique, SymbolicFactorGraph &gt;</name>
    <filename>a02915.html</filename>
    <member kind="friend">
      <type>friend class</type>
      <name>boost::serialization::access</name>
      <anchorfile>a02915.html</anchorfile>
      <anchor>ac98d07dd8f7b70e16ccb9a01abf56b9c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type>KeyVector</type>
      <name>separator_setminus_B</name>
      <anchorfile>a02915.html</anchorfile>
      <anchor>acf1ef12f8527f4c2c708ef158362949d</anchor>
      <arglist>(const derived_ptr &amp;B) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>KeyVector</type>
      <name>shortcut_indices</name>
      <anchorfile>a02915.html</anchorfile>
      <anchor>ab3ed1131e643eb5b93220129cf84c681</anchor>
      <arglist>(const derived_ptr &amp;B, const FactorGraphType &amp;p_Cp_B) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>deleteCachedShortcutsNonRecursive</name>
      <anchorfile>a02915.html</anchorfile>
      <anchor>a1e30a722b512467abcb47be6e32b55ad</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>BayesNetType</type>
      <name>shortcut</name>
      <anchorfile>a02915.html</anchorfile>
      <anchor>a9edb268cc435f7b2a0c254df1404904b</anchor>
      <arglist>(const derived_ptr &amp;root, Eliminate function=EliminationTraitsType::DefaultEliminate) const</arglist>
    </member>
    <member kind="function">
      <type>FactorGraphType</type>
      <name>separatorMarginal</name>
      <anchorfile>a02915.html</anchorfile>
      <anchor>a991d9ea46836f7fe8eda6e1569cee16e</anchor>
      <arglist>(Eliminate function=EliminationTraitsType::DefaultEliminate) const</arglist>
    </member>
    <member kind="function">
      <type>FactorGraphType</type>
      <name>marginal2</name>
      <anchorfile>a02915.html</anchorfile>
      <anchor>a814b38ebe6f0ac5383306b1570fe4819</anchor>
      <arglist>(Eliminate function=EliminationTraitsType::DefaultEliminate) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>deleteCachedShortcuts</name>
      <anchorfile>a02915.html</anchorfile>
      <anchor>ab0eb467a5a3a8ac259aeca28d3be914a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>BayesTreeCliqueBase</name>
      <anchorfile>a02915.html</anchorfile>
      <anchor>a425f748b06905e5f127e061e6b49c440</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>BayesTreeCliqueBase</name>
      <anchorfile>a02915.html</anchorfile>
      <anchor>a6c6e1acd351eea812eed018d0946edea</anchor>
      <arglist>(const sharedConditional &amp;conditional)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>equals</name>
      <anchorfile>a02915.html</anchorfile>
      <anchor>a93d41d0b550a8fb9fb95f5c892fb2615</anchor>
      <arglist>(const SymbolicBayesTreeClique &amp;other, double tol=1e-9) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>a02915.html</anchorfile>
      <anchor>ad03372d87f70713d127a4a702cfcdf23</anchor>
      <arglist>(const std::string &amp;s=&quot;&quot;, const KeyFormatter &amp;keyFormatter=DefaultKeyFormatter) const</arglist>
    </member>
    <member kind="function">
      <type>const sharedConditional &amp;</type>
      <name>conditional</name>
      <anchorfile>a02915.html</anchorfile>
      <anchor>a027c973b55e69d4522be8c5a422238bc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isRoot</name>
      <anchorfile>a02915.html</anchorfile>
      <anchor>a7b3765e6f51f0c9bb26a2dd58bb6b77a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>treeSize</name>
      <anchorfile>a02915.html</anchorfile>
      <anchor>a57f5a90f8cf4fe3835137d93bf3ace8c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>numCachedSeparatorMarginals</name>
      <anchorfile>a02915.html</anchorfile>
      <anchor>ad7f63b089fd6def94816a0d737622b4b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>derived_ptr</type>
      <name>parent</name>
      <anchorfile>a02915.html</anchorfile>
      <anchor>a57672340d13636be34533e6d7d65a3b6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>problemSize</name>
      <anchorfile>a02915.html</anchorfile>
      <anchor>a39a0b013ef5feecbcb8ca53b1d881806</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setEliminationResult</name>
      <anchorfile>a02915.html</anchorfile>
      <anchor>afb3a025fa21a798cd6cafa931d54ab63</anchor>
      <arglist>(const typename FactorGraphType::EliminationResult &amp;eliminationResult)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>equals</name>
      <anchorfile>a02915.html</anchorfile>
      <anchor>a93d41d0b550a8fb9fb95f5c892fb2615</anchor>
      <arglist>(const SymbolicBayesTreeClique &amp;other, double tol=1e-9) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>a02915.html</anchorfile>
      <anchor>ad03372d87f70713d127a4a702cfcdf23</anchor>
      <arglist>(const std::string &amp;s=&quot;&quot;, const KeyFormatter &amp;keyFormatter=DefaultKeyFormatter) const</arglist>
    </member>
    <member kind="function">
      <type>const sharedConditional &amp;</type>
      <name>conditional</name>
      <anchorfile>a02915.html</anchorfile>
      <anchor>a027c973b55e69d4522be8c5a422238bc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isRoot</name>
      <anchorfile>a02915.html</anchorfile>
      <anchor>a7b3765e6f51f0c9bb26a2dd58bb6b77a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>treeSize</name>
      <anchorfile>a02915.html</anchorfile>
      <anchor>a57f5a90f8cf4fe3835137d93bf3ace8c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>numCachedSeparatorMarginals</name>
      <anchorfile>a02915.html</anchorfile>
      <anchor>ad7f63b089fd6def94816a0d737622b4b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>derived_ptr</type>
      <name>parent</name>
      <anchorfile>a02915.html</anchorfile>
      <anchor>a57672340d13636be34533e6d7d65a3b6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>problemSize</name>
      <anchorfile>a02915.html</anchorfile>
      <anchor>a39a0b013ef5feecbcb8ca53b1d881806</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>BayesTreeCliqueBase</name>
      <anchorfile>a02915.html</anchorfile>
      <anchor>a425f748b06905e5f127e061e6b49c440</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>BayesTreeCliqueBase</name>
      <anchorfile>a02915.html</anchorfile>
      <anchor>a6c6e1acd351eea812eed018d0946edea</anchor>
      <arglist>(const sharedConditional &amp;conditional)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>boost::optional&lt; FactorGraphType &gt;</type>
      <name>cachedSeparatorMarginal_</name>
      <anchorfile>a02915.html</anchorfile>
      <anchor>af3d82f22471162aafc735e1413d9e428</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>gtsam::BayesTreeCliqueData</name>
    <filename>a02899.html</filename>
  </compound>
  <compound kind="struct">
    <name>gtsam::BayesTreeCliqueStats</name>
    <filename>a02895.html</filename>
  </compound>
  <compound kind="class">
    <name>gtsam::BayesTreeOrphanWrapper</name>
    <filename>a02907.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>gtsam::Bearing</name>
    <filename>a02459.html</filename>
    <templarg></templarg>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>gtsam::Bearing&lt; Pose2, T &gt;</name>
    <filename>a02703.html</filename>
    <templarg></templarg>
    <base>HasBearing&lt; Pose2, T, Rot2 &gt;</base>
  </compound>
  <compound kind="struct">
    <name>gtsam::Bearing&lt; Pose3, Point3 &gt;</name>
    <filename>a02727.html</filename>
    <base>HasBearing&lt; Pose3, Point3, Unit3 &gt;</base>
  </compound>
  <compound kind="struct">
    <name>gtsam::Bearing&lt; Pose3, Pose3 &gt;</name>
    <filename>a02731.html</filename>
    <base>HasBearing&lt; Pose3, Pose3, Unit3 &gt;</base>
  </compound>
  <compound kind="struct">
    <name>gtsam::BearingFactor</name>
    <filename>a03911.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <base>gtsam::ExpressionFactor2</base>
    <member kind="function">
      <type></type>
      <name>BearingFactor</name>
      <anchorfile>a03911.html</anchorfile>
      <anchor>af6f0119ea5805d2b77b85f292920a647</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BearingFactor</name>
      <anchorfile>a03911.html</anchorfile>
      <anchor>ac8293c85cbe2aee87457e64475a7a93a</anchor>
      <arglist>(Key key1, Key key2, const T &amp;measured, const SharedNoiseModel &amp;model)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Expression&lt; T &gt;</type>
      <name>expression</name>
      <anchorfile>a03911.html</anchorfile>
      <anchor>a4b399e05668f4bb331a36ff1b77c081d</anchor>
      <arglist>(Key key1, Key key2) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>a03911.html</anchorfile>
      <anchor>a532bab45b452c313e97ceb6e44a7701d</anchor>
      <arglist>(const std::string &amp;s=&quot;&quot;, const KeyFormatter &amp;kf=DefaultKeyFormatter) const</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>gtsam::BearingRange</name>
    <filename>a02467.html</filename>
    <templarg>A1</templarg>
    <templarg>A2</templarg>
    <templarg>B</templarg>
    <templarg>R</templarg>
    <member kind="function">
      <type>const B &amp;</type>
      <name>bearing</name>
      <anchorfile>a02467.html</anchorfile>
      <anchor>a83ae99cd657ba4366d6551e0cb292da5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const R &amp;</type>
      <name>range</name>
      <anchorfile>a02467.html</anchorfile>
      <anchor>a07ffc6d75e98e2df8d473fd58ed97485</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static BearingRange</type>
      <name>Measure</name>
      <anchorfile>a02467.html</anchorfile>
      <anchor>a2796ba4e92d9eca80cb3a3b73439debc</anchor>
      <arglist>(const A1 &amp;a1, const A2 &amp;a2, OptionalJacobian&lt; dimension, traits&lt; A1 &gt;::dimension &gt; H1=boost::none, OptionalJacobian&lt; dimension, traits&lt; A2 &gt;::dimension &gt; H2=boost::none)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static B</type>
      <name>MeasureBearing</name>
      <anchorfile>a02467.html</anchorfile>
      <anchor>adbfd59a960fd145374b5e2c44ecf1296</anchor>
      <arglist>(const A1 &amp;a1, const A2 &amp;a2)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static R</type>
      <name>MeasureRange</name>
      <anchorfile>a02467.html</anchorfile>
      <anchor>a2699cffab46474e815330ac7ef901481</anchor>
      <arglist>(const A1 &amp;a1, const A2 &amp;a2)</arglist>
    </member>
    <member kind="function">
      <type>BearingRange</type>
      <name>retract</name>
      <anchorfile>a02467.html</anchorfile>
      <anchor>a37c14f336c93fc7accc3fab5e301af38</anchor>
      <arglist>(const TangentVector &amp;xi) const</arglist>
    </member>
    <member kind="function">
      <type>TangentVector</type>
      <name>localCoordinates</name>
      <anchorfile>a02467.html</anchorfile>
      <anchor>a86aca14d19ee010904d5db254c45835f</anchor>
      <arglist>(const BearingRange &amp;other) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>BearingRange&lt; A1, A2 &gt;</name>
    <filename>a02467.html</filename>
    <member kind="function">
      <type>BearingRange</type>
      <name>retract</name>
      <anchorfile>a02467.html</anchorfile>
      <anchor>a37c14f336c93fc7accc3fab5e301af38</anchor>
      <arglist>(const TangentVector &amp;xi) const</arglist>
    </member>
    <member kind="function">
      <type>TangentVector</type>
      <name>localCoordinates</name>
      <anchorfile>a02467.html</anchorfile>
      <anchor>a86aca14d19ee010904d5db254c45835f</anchor>
      <arglist>(const BearingRange &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>const typename Bearing&lt; A1, A2 &gt;::result_type &amp;</type>
      <name>bearing</name>
      <anchorfile>a02467.html</anchorfile>
      <anchor>a83ae99cd657ba4366d6551e0cb292da5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const typename Range&lt; A1, A2 &gt;::result_type &amp;</type>
      <name>range</name>
      <anchorfile>a02467.html</anchorfile>
      <anchor>a07ffc6d75e98e2df8d473fd58ed97485</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static BearingRange</type>
      <name>Measure</name>
      <anchorfile>a02467.html</anchorfile>
      <anchor>a2796ba4e92d9eca80cb3a3b73439debc</anchor>
      <arglist>(const A1 &amp;a1, const A2 &amp;a2, OptionalJacobian&lt; dimension, traits&lt; A1 &gt;::dimension &gt; H1=boost::none, OptionalJacobian&lt; dimension, traits&lt; A2 &gt;::dimension &gt; H2=boost::none)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static typename Bearing&lt; A1, A2 &gt;::result_type</type>
      <name>MeasureBearing</name>
      <anchorfile>a02467.html</anchorfile>
      <anchor>adbfd59a960fd145374b5e2c44ecf1296</anchor>
      <arglist>(const A1 &amp;a1, const A2 &amp;a2)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static typename Range&lt; A1, A2 &gt;::result_type</type>
      <name>MeasureRange</name>
      <anchorfile>a02467.html</anchorfile>
      <anchor>a2699cffab46474e815330ac7ef901481</anchor>
      <arglist>(const A1 &amp;a1, const A2 &amp;a2)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::BearingRangeFactor</name>
    <filename>a03919.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <base>ExpressionFactor2&lt; BearingRange&lt; A1, A2 &gt;, A1, A2 &gt;</base>
    <member kind="function">
      <type></type>
      <name>BearingRangeFactor</name>
      <anchorfile>a03919.html</anchorfile>
      <anchor>a0a1df8a5b7807a3ecc3e1baa74802ac7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BearingRangeFactor</name>
      <anchorfile>a03919.html</anchorfile>
      <anchor>a2cadb2247daabfc360bbf1d930909edb</anchor>
      <arglist>(Key key1, Key key2, const B &amp;measuredBearing, const R &amp;measuredRange, const SharedNoiseModel &amp;model)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual gtsam::NonlinearFactor::shared_ptr</type>
      <name>clone</name>
      <anchorfile>a03919.html</anchorfile>
      <anchor>a3da88ae56da7f975fd636526a9a3a8f8</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Expression&lt; T &gt;</type>
      <name>expression</name>
      <anchorfile>a03919.html</anchorfile>
      <anchor>a2289584d8aa79df42221fc685452d98a</anchor>
      <arglist>(Key key1, Key key2) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>print</name>
      <anchorfile>a03919.html</anchorfile>
      <anchor>a4f09cb11438cf01c15eee66045f6be2f</anchor>
      <arglist>(const std::string &amp;s=&quot;&quot;, const KeyFormatter &amp;kf=DefaultKeyFormatter) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::BearingS2</name>
    <filename>a04671.html</filename>
  </compound>
  <compound kind="class">
    <name>gtsam::BetweenConstraint</name>
    <filename>a03955.html</filename>
    <templarg></templarg>
    <base>gtsam::BetweenFactor</base>
    <member kind="function">
      <type></type>
      <name>BetweenConstraint</name>
      <anchorfile>a03955.html</anchorfile>
      <anchor>a58f473a74ca49a13084db2d076278baa</anchor>
      <arglist>(const VALUE &amp;measured, Key key1, Key key2, double mu=1000.0)</arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>boost::serialization::access</name>
      <anchorfile>a03955.html</anchorfile>
      <anchor>ac98d07dd8f7b70e16ccb9a01abf56b9c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::BetweenFactor</name>
    <filename>a03947.html</filename>
    <templarg></templarg>
    <base protection="private">gtsam::NoiseModelFactor</base>
    <base>NoiseModelFactor2&lt; VALUE, VALUE &gt;</base>
    <member kind="function">
      <type></type>
      <name>BetweenFactor</name>
      <anchorfile>a03947.html</anchorfile>
      <anchor>a059852c5e2a89302b823baae2de62676</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BetweenFactor</name>
      <anchorfile>a03947.html</anchorfile>
      <anchor>a8b852f5210cb19fa5c31ff97a5aec20e</anchor>
      <arglist>(Key key1, Key key2, const VALUE &amp;measured, const SharedNoiseModel &amp;model=nullptr)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual gtsam::NonlinearFactor::shared_ptr</type>
      <name>clone</name>
      <anchorfile>a03947.html</anchorfile>
      <anchor>a2fd51d7c7403c0a306744bae7e2108a9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>print</name>
      <anchorfile>a03947.html</anchorfile>
      <anchor>a841ff450c05ddfbc3851af039b54b4c2</anchor>
      <arglist>(const std::string &amp;s, const KeyFormatter &amp;keyFormatter=DefaultKeyFormatter) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>equals</name>
      <anchorfile>a03947.html</anchorfile>
      <anchor>af987f727f7f224bc1fa1d4e844ddd468</anchor>
      <arglist>(const NonlinearFactor &amp;expected, double tol=1e-9) const</arglist>
    </member>
    <member kind="function">
      <type>Vector</type>
      <name>evaluateError</name>
      <anchorfile>a03947.html</anchorfile>
      <anchor>adff0843a613d8f0ed1c7929fb4a965cd</anchor>
      <arglist>(const T &amp;p1, const T &amp;p2, boost::optional&lt; Matrix &amp; &gt; H1=boost::none, boost::optional&lt; Matrix &amp; &gt; H2=boost::none) const</arglist>
    </member>
    <member kind="function">
      <type>const VALUE &amp;</type>
      <name>measured</name>
      <anchorfile>a03947.html</anchorfile>
      <anchor>a0679debeaad3f1f8ec77ff2aadeb0c89</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>size</name>
      <anchorfile>a03947.html</anchorfile>
      <anchor>acca2c041d17817c142fe31ffa4148f15</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; BetweenFactor &gt;</type>
      <name>shared_ptr</name>
      <anchorfile>a03947.html</anchorfile>
      <anchor>a5f6d47911015651afe9139f016c04420</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>boost::serialization::access</name>
      <anchorfile>a03947.html</anchorfile>
      <anchor>ac98d07dd8f7b70e16ccb9a01abf56b9c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::BetweenFactorEM</name>
    <filename>a04447.html</filename>
    <templarg></templarg>
    <base protection="private">gtsam::NonlinearFactor</base>
    <base>gtsam::NonlinearFactor</base>
    <member kind="friend">
      <type>friend class</type>
      <name>boost::serialization::access</name>
      <anchorfile>a04447.html</anchorfile>
      <anchor>ac98d07dd8f7b70e16ccb9a01abf56b9c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::BiasedGPSFactor</name>
    <filename>a04451.html</filename>
    <base>NoiseModelFactor2&lt; Pose3, Point3 &gt;</base>
    <member kind="function">
      <type></type>
      <name>BiasedGPSFactor</name>
      <anchorfile>a04451.html</anchorfile>
      <anchor>a0e5eeadaf9c44915349785d633bdf28d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BiasedGPSFactor</name>
      <anchorfile>a04451.html</anchorfile>
      <anchor>a30495372aa9d90fb9bcc586b15e7fb7e</anchor>
      <arglist>(Key posekey, Key biaskey, const Point3 measured, const SharedNoiseModel &amp;model)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>print</name>
      <anchorfile>a04451.html</anchorfile>
      <anchor>a43206dabbb79c3d1025ae87e6bb2e0da</anchor>
      <arglist>(const std::string &amp;s, const KeyFormatter &amp;keyFormatter=DefaultKeyFormatter) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>equals</name>
      <anchorfile>a04451.html</anchorfile>
      <anchor>ab196e854750760a2728643df6c3771b9</anchor>
      <arglist>(const NonlinearFactor &amp;expected, double tol=1e-9) const</arglist>
    </member>
    <member kind="function">
      <type>Vector</type>
      <name>evaluateError</name>
      <anchorfile>a04451.html</anchorfile>
      <anchor>ab63934cf9c632c96a32c738e28ef227f</anchor>
      <arglist>(const Pose3 &amp;pose, const Point3 &amp;bias, boost::optional&lt; Matrix &amp; &gt; H1=boost::none, boost::optional&lt; Matrix &amp; &gt; H2=boost::none) const</arglist>
    </member>
    <member kind="function">
      <type>const Point3</type>
      <name>measured</name>
      <anchorfile>a04451.html</anchorfile>
      <anchor>a220c18e15d3f9b02fc0178346f9b22b6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; BiasedGPSFactor &gt;</type>
      <name>shared_ptr</name>
      <anchorfile>a04451.html</anchorfile>
      <anchor>a94207bcbd883bf018620e8a04678d0f5</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>boost::serialization::access</name>
      <anchorfile>a04451.html</anchorfile>
      <anchor>ac98d07dd8f7b70e16ccb9a01abf56b9c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::BinaryAllDiff</name>
    <filename>a04215.html</filename>
    <base>gtsam::Constraint</base>
    <member kind="function">
      <type></type>
      <name>BinaryAllDiff</name>
      <anchorfile>a04215.html</anchorfile>
      <anchor>adf624c34d618f9af6bdd079de0ba340a</anchor>
      <arglist>(const DiscreteKey &amp;key1, const DiscreteKey &amp;key2)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>equals</name>
      <anchorfile>a04215.html</anchorfile>
      <anchor>adf7700c6f5c39a614dc4d212ac30b667</anchor>
      <arglist>(const DiscreteFactor &amp;other, double tol) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>operator()</name>
      <anchorfile>a04215.html</anchorfile>
      <anchor>a8497595da30b99eb27457d4a892ecf5c</anchor>
      <arglist>(const Values &amp;values) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual DecisionTreeFactor</type>
      <name>toDecisionTreeFactor</name>
      <anchorfile>a04215.html</anchorfile>
      <anchor>ac384d47a741d1bfbc049dee5974e1fda</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual DecisionTreeFactor</type>
      <name>operator *</name>
      <anchorfile>a04215.html</anchorfile>
      <anchor>a0c5bfb36c974140925663aa9817ce2b9</anchor>
      <arglist>(const DecisionTreeFactor &amp;f) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Constraint::shared_ptr</type>
      <name>partiallyApply</name>
      <anchorfile>a04215.html</anchorfile>
      <anchor>ae64a11008fde2eabefac4650e524b075</anchor>
      <arglist>(const Values &amp;) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Constraint::shared_ptr</type>
      <name>partiallyApply</name>
      <anchorfile>a04215.html</anchorfile>
      <anchor>a1a5a3ff9b3231f55fa58f0c9fa8e682b</anchor>
      <arglist>(const std::vector&lt; Domain &gt; &amp;) const</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>gtsam::Expression::BinaryFunction</name>
    <filename>a03603.html</filename>
    <templarg>A1</templarg>
    <templarg>A2</templarg>
  </compound>
  <compound kind="struct">
    <name>gtsam::BinaryJacobianFactor</name>
    <filename>a03063.html</filename>
    <templarg>M</templarg>
    <templarg>N1</templarg>
    <templarg>N2</templarg>
    <base>gtsam::JacobianFactor</base>
    <member kind="function">
      <type></type>
      <name>BinaryJacobianFactor</name>
      <anchorfile>a03063.html</anchorfile>
      <anchor>adef0324d93ae1dd00943ea9a088b9bee</anchor>
      <arglist>(Key key1, const Eigen::Matrix&lt; double, M, N1 &gt; &amp;A1, Key key2, const Eigen::Matrix&lt; double, M, N2 &gt; &amp;A2, const Eigen::Matrix&lt; double, M, 1 &gt; &amp;b, const SharedDiagonal &amp;model=SharedDiagonal())</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>updateHessian</name>
      <anchorfile>a03063.html</anchorfile>
      <anchor>ac4f68485b4aeaeb3ad7a885d9519a278</anchor>
      <arglist>(const KeyVector &amp;infoKeys, SymmetricBlockMatrix *info) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::BinarySumExpression</name>
    <filename>a03615.html</filename>
    <templarg></templarg>
    <base>gtsam::Expression</base>
  </compound>
  <compound kind="class">
    <name>gtsam::BlockJacobiPreconditioner</name>
    <filename>a03339.html</filename>
    <base>gtsam::Preconditioner</base>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>solve</name>
      <anchorfile>a03339.html</anchorfile>
      <anchor>adec51d9dfebffaa1895c915a5d5da2cf</anchor>
      <arglist>(const Vector &amp;y, Vector &amp;x) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>transposeSolve</name>
      <anchorfile>a03339.html</anchorfile>
      <anchor>a4c29f4521a10ae7fa3e9e224204ad5ab</anchor>
      <arglist>(const Vector &amp;y, Vector &amp;x) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>build</name>
      <anchorfile>a03339.html</anchorfile>
      <anchor>af47759129a1d8abd2e12a9b404980a52</anchor>
      <arglist>(const GaussianFactorGraph &amp;gfg, const KeyInfo &amp;info, const std::map&lt; Key, Vector &gt; &amp;lambda)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>gtsam::BlockJacobiPreconditionerParameters</name>
    <filename>a03335.html</filename>
    <base>gtsam::PreconditionerParameters</base>
  </compound>
  <compound kind="struct">
    <name>gtsam::BoundingConstraint1</name>
    <filename>a03963.html</filename>
    <templarg></templarg>
    <base>gtsam::NoiseModelFactor1</base>
    <member kind="function">
      <type></type>
      <name>BoundingConstraint1</name>
      <anchorfile>a03963.html</anchorfile>
      <anchor>a936b8b1a987ef137f1b6d4bfbcc3db9f</anchor>
      <arglist>(Key key, double threshold, bool isGreaterThan, double mu=1000.0)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual double</type>
      <name>value</name>
      <anchorfile>a03963.html</anchorfile>
      <anchor>ae8d1b604f8580bfd89940d1154b66feb</anchor>
      <arglist>(const X &amp;x, boost::optional&lt; Matrix &amp; &gt; H=boost::none) const =0</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>active</name>
      <anchorfile>a03963.html</anchorfile>
      <anchor>ae81e4792eae60d803016eb0bb58520c3</anchor>
      <arglist>(const Values &amp;c) const</arglist>
    </member>
    <member kind="function">
      <type>Vector</type>
      <name>evaluateError</name>
      <anchorfile>a03963.html</anchorfile>
      <anchor>a2edcef248364f5ac90a3336e96b6f302</anchor>
      <arglist>(const X &amp;x, boost::optional&lt; Matrix &amp; &gt; H=boost::none) const</arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>boost::serialization::access</name>
      <anchorfile>a03963.html</anchorfile>
      <anchor>ac98d07dd8f7b70e16ccb9a01abf56b9c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>gtsam::BoundingConstraint2</name>
    <filename>a03967.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <base>gtsam::NoiseModelFactor2</base>
    <member kind="function">
      <type></type>
      <name>BoundingConstraint2</name>
      <anchorfile>a03967.html</anchorfile>
      <anchor>a80055453c5f4edd96aab215831371aa1</anchor>
      <arglist>(Key key1, Key key2, double threshold, bool isGreaterThan, double mu=1000.0)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual double</type>
      <name>value</name>
      <anchorfile>a03967.html</anchorfile>
      <anchor>ad1415ee808cefd215e6410c6dd9f4f51</anchor>
      <arglist>(const X1 &amp;x1, const X2 &amp;x2, boost::optional&lt; Matrix &amp; &gt; H1=boost::none, boost::optional&lt; Matrix &amp; &gt; H2=boost::none) const =0</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>active</name>
      <anchorfile>a03967.html</anchorfile>
      <anchor>afacec50d2f503528575102ad180d652d</anchor>
      <arglist>(const Values &amp;c) const</arglist>
    </member>
    <member kind="function">
      <type>Vector</type>
      <name>evaluateError</name>
      <anchorfile>a03967.html</anchorfile>
      <anchor>a8ebbe4222bc4f5203509a41180238c80</anchor>
      <arglist>(const X1 &amp;x1, const X2 &amp;x2, boost::optional&lt; Matrix &amp; &gt; H1=boost::none, boost::optional&lt; Matrix &amp; &gt; H2=boost::none) const</arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>boost::serialization::access</name>
      <anchorfile>a03967.html</anchorfile>
      <anchor>ac98d07dd8f7b70e16ccb9a01abf56b9c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::BTree</name>
    <filename>a04187.html</filename>
    <templarg>KEY</templarg>
    <templarg>VALUE</templarg>
    <member kind="function">
      <type></type>
      <name>BTree</name>
      <anchorfile>a04187.html</anchorfile>
      <anchor>af1c1db1dac07a1e3620eaa6ee6f39e8b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BTree</name>
      <anchorfile>a04187.html</anchorfile>
      <anchor>a473798566593d9aab0f04f0963c65e01</anchor>
      <arglist>(const BTree &amp;other)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BTree</name>
      <anchorfile>a04187.html</anchorfile>
      <anchor>a1d1180bb2a380eaa7801f7f5fc929889</anchor>
      <arglist>(const value_type &amp;keyValue)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BTree</name>
      <anchorfile>a04187.html</anchorfile>
      <anchor>a5dfdbc963fed1e0a73d97c7f67a527b7</anchor>
      <arglist>(const BTree &amp;l, const value_type &amp;keyValue, const BTree &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>BTree &amp;</type>
      <name>operator=</name>
      <anchorfile>a04187.html</anchorfile>
      <anchor>ae489e5428e7eed4f4a85dc3db4bb5f35</anchor>
      <arglist>(const BTree &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>empty</name>
      <anchorfile>a04187.html</anchorfile>
      <anchor>aed6c3a77a0d6571b18724bfee3351b8f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>BTree</type>
      <name>add</name>
      <anchorfile>a04187.html</anchorfile>
      <anchor>a3d4f18dd328a649fe378d3635eaec671</anchor>
      <arglist>(const value_type &amp;xd) const</arglist>
    </member>
    <member kind="function">
      <type>BTree</type>
      <name>add</name>
      <anchorfile>a04187.html</anchorfile>
      <anchor>a7099aa6833175a8a473fbf01dbf8d49d</anchor>
      <arglist>(const KEY &amp;x, const VALUE &amp;d) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>mem</name>
      <anchorfile>a04187.html</anchorfile>
      <anchor>a035c1a57ea9d048d62d3d09b13fd86d7</anchor>
      <arglist>(const KEY &amp;x) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>same</name>
      <anchorfile>a04187.html</anchorfile>
      <anchor>a515d2cefe6b358e7d28343698164954a</anchor>
      <arglist>(const BTree &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>a04187.html</anchorfile>
      <anchor>a88c105aedc464070807408bb7c4d8c66</anchor>
      <arglist>(const BTree &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>const value_type &amp;</type>
      <name>min</name>
      <anchorfile>a04187.html</anchorfile>
      <anchor>ab58036c653c4b7d6f33cd7fba227ce0e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>BTree</type>
      <name>remove_min</name>
      <anchorfile>a04187.html</anchorfile>
      <anchor>a2f00413fdd2723135bf880565a74071d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>BTree</type>
      <name>remove</name>
      <anchorfile>a04187.html</anchorfile>
      <anchor>a9210ea8123b01bded14d4b1f63aff304</anchor>
      <arglist>(const KEY &amp;x) const</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>height</name>
      <anchorfile>a04187.html</anchorfile>
      <anchor>a48622bf843ec137d4d914f2ec9e90f0f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>size</name>
      <anchorfile>a04187.html</anchorfile>
      <anchor>ad9449f7e73a294ee105aeca664e0ff17</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const VALUE &amp;</type>
      <name>find</name>
      <anchorfile>a04187.html</anchorfile>
      <anchor>ac39f1526ae32ca22893e98431557089d</anchor>
      <arglist>(const KEY &amp;k) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>a04187.html</anchorfile>
      <anchor>a91a9a2100919aa87189c75979ce1347f</anchor>
      <arglist>(const std::string &amp;s=&quot;&quot;) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>iter</name>
      <anchorfile>a04187.html</anchorfile>
      <anchor>a9d05f243c78c6d56562d2733a46fafbd</anchor>
      <arglist>(boost::function&lt; void(const KEY &amp;, const VALUE &amp;)&gt; f) const</arglist>
    </member>
    <member kind="function">
      <type>BTree&lt; KEY, TO &gt;</type>
      <name>map</name>
      <anchorfile>a04187.html</anchorfile>
      <anchor>ac2244e855e72b212982a3aeec7c217b7</anchor>
      <arglist>(boost::function&lt; TO(const KEY &amp;, const VALUE &amp;)&gt; f) const</arglist>
    </member>
    <member kind="function">
      <type>ACC</type>
      <name>fold</name>
      <anchorfile>a04187.html</anchorfile>
      <anchor>add4e6c001a289a49a8db542459c41aa2</anchor>
      <arglist>(boost::function&lt; ACC(const KEY &amp;, const VALUE &amp;, const ACC &amp;)&gt; f, const ACC &amp;a) const</arglist>
    </member>
    <member kind="function">
      <type>const_iterator</type>
      <name>begin</name>
      <anchorfile>a04187.html</anchorfile>
      <anchor>a565e62c73d3117137ad6a879324f2cde</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const_iterator</type>
      <name>end</name>
      <anchorfile>a04187.html</anchorfile>
      <anchor>ab3616bfa06dc22505713efcd464a35b5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static BTree</type>
      <name>merge</name>
      <anchorfile>a04187.html</anchorfile>
      <anchor>aaef75f2379cce7455f3ba15fb73a4602</anchor>
      <arglist>(const BTree &amp;t1, const BTree &amp;t2)</arglist>
    </member>
    <class kind="class">gtsam::BTree::const_iterator</class>
  </compound>
  <compound kind="class">
    <name>BTree&lt; KEY, KEY &gt;</name>
    <filename>a04187.html</filename>
    <member kind="function">
      <type></type>
      <name>BTree</name>
      <anchorfile>a04187.html</anchorfile>
      <anchor>af1c1db1dac07a1e3620eaa6ee6f39e8b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BTree</name>
      <anchorfile>a04187.html</anchorfile>
      <anchor>a473798566593d9aab0f04f0963c65e01</anchor>
      <arglist>(const BTree &amp;other)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BTree</name>
      <anchorfile>a04187.html</anchorfile>
      <anchor>a1d1180bb2a380eaa7801f7f5fc929889</anchor>
      <arglist>(const value_type &amp;keyValue)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BTree</name>
      <anchorfile>a04187.html</anchorfile>
      <anchor>a5dfdbc963fed1e0a73d97c7f67a527b7</anchor>
      <arglist>(const BTree &amp;l, const value_type &amp;keyValue, const BTree &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>BTree &amp;</type>
      <name>operator=</name>
      <anchorfile>a04187.html</anchorfile>
      <anchor>ae489e5428e7eed4f4a85dc3db4bb5f35</anchor>
      <arglist>(const BTree &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>empty</name>
      <anchorfile>a04187.html</anchorfile>
      <anchor>aed6c3a77a0d6571b18724bfee3351b8f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>BTree</type>
      <name>add</name>
      <anchorfile>a04187.html</anchorfile>
      <anchor>a3d4f18dd328a649fe378d3635eaec671</anchor>
      <arglist>(const value_type &amp;xd) const</arglist>
    </member>
    <member kind="function">
      <type>BTree</type>
      <name>add</name>
      <anchorfile>a04187.html</anchorfile>
      <anchor>a7099aa6833175a8a473fbf01dbf8d49d</anchor>
      <arglist>(const KEY &amp;x, const KEY &amp;d) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>mem</name>
      <anchorfile>a04187.html</anchorfile>
      <anchor>a035c1a57ea9d048d62d3d09b13fd86d7</anchor>
      <arglist>(const KEY &amp;x) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>same</name>
      <anchorfile>a04187.html</anchorfile>
      <anchor>a515d2cefe6b358e7d28343698164954a</anchor>
      <arglist>(const BTree &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>a04187.html</anchorfile>
      <anchor>a88c105aedc464070807408bb7c4d8c66</anchor>
      <arglist>(const BTree &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>const value_type &amp;</type>
      <name>min</name>
      <anchorfile>a04187.html</anchorfile>
      <anchor>ab58036c653c4b7d6f33cd7fba227ce0e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>BTree</type>
      <name>remove_min</name>
      <anchorfile>a04187.html</anchorfile>
      <anchor>a2f00413fdd2723135bf880565a74071d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>BTree</type>
      <name>remove</name>
      <anchorfile>a04187.html</anchorfile>
      <anchor>a9210ea8123b01bded14d4b1f63aff304</anchor>
      <arglist>(const KEY &amp;x) const</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>height</name>
      <anchorfile>a04187.html</anchorfile>
      <anchor>a48622bf843ec137d4d914f2ec9e90f0f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>size</name>
      <anchorfile>a04187.html</anchorfile>
      <anchor>ad9449f7e73a294ee105aeca664e0ff17</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const KEY &amp;</type>
      <name>find</name>
      <anchorfile>a04187.html</anchorfile>
      <anchor>ac39f1526ae32ca22893e98431557089d</anchor>
      <arglist>(const KEY &amp;k) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>a04187.html</anchorfile>
      <anchor>a91a9a2100919aa87189c75979ce1347f</anchor>
      <arglist>(const std::string &amp;s=&quot;&quot;) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>iter</name>
      <anchorfile>a04187.html</anchorfile>
      <anchor>a9d05f243c78c6d56562d2733a46fafbd</anchor>
      <arglist>(boost::function&lt; void(const KEY &amp;, const KEY &amp;)&gt; f) const</arglist>
    </member>
    <member kind="function">
      <type>BTree&lt; KEY, TO &gt;</type>
      <name>map</name>
      <anchorfile>a04187.html</anchorfile>
      <anchor>ac2244e855e72b212982a3aeec7c217b7</anchor>
      <arglist>(boost::function&lt; TO(const KEY &amp;, const KEY &amp;)&gt; f) const</arglist>
    </member>
    <member kind="function">
      <type>ACC</type>
      <name>fold</name>
      <anchorfile>a04187.html</anchorfile>
      <anchor>add4e6c001a289a49a8db542459c41aa2</anchor>
      <arglist>(boost::function&lt; ACC(const KEY &amp;, const KEY &amp;, const ACC &amp;)&gt; f, const ACC &amp;a) const</arglist>
    </member>
    <member kind="function">
      <type>const_iterator</type>
      <name>begin</name>
      <anchorfile>a04187.html</anchorfile>
      <anchor>a565e62c73d3117137ad6a879324f2cde</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const_iterator</type>
      <name>end</name>
      <anchorfile>a04187.html</anchorfile>
      <anchor>ab3616bfa06dc22505713efcd464a35b5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static BTree</type>
      <name>merge</name>
      <anchorfile>a04187.html</anchorfile>
      <anchor>aaef75f2379cce7455f3ba15fb73a4602</anchor>
      <arglist>(const BTree &amp;t1, const BTree &amp;t2)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::Cal3_S2</name>
    <filename>a02483.html</filename>
    <member kind="function">
      <type></type>
      <name>Cal3_S2</name>
      <anchorfile>a02483.html</anchorfile>
      <anchor>ac9978a1a4bdae33286f57b9277b18c1d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Cal3_S2</name>
      <anchorfile>a02483.html</anchorfile>
      <anchor>a6f59c7c3f3e8782b2b4e1d71cd289d4b</anchor>
      <arglist>(double fx, double fy, double s, double u0, double v0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Cal3_S2</name>
      <anchorfile>a02483.html</anchorfile>
      <anchor>a76de30dafa79de4cea55531481e9225c</anchor>
      <arglist>(const Vector &amp;d)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Cal3_S2</name>
      <anchorfile>a02483.html</anchorfile>
      <anchor>ae7de8f587615c7b0909c06df658e96e5</anchor>
      <arglist>(double fov, int w, int h)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Cal3_S2</name>
      <anchorfile>a02483.html</anchorfile>
      <anchor>a5ad69bd9898195b4ee05cf86086c02f9</anchor>
      <arglist>(const std::string &amp;path)</arglist>
    </member>
    <member kind="friend">
      <type>GTSAM_EXPORT friend std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a02483.html</anchorfile>
      <anchor>a7b7a39b1c54bcc249f3e629e420bac2b</anchor>
      <arglist>(std::ostream &amp;os, const Cal3_S2 &amp;cal)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>a02483.html</anchorfile>
      <anchor>a393cdb2e7e2c3ac2b1962f98d4183b38</anchor>
      <arglist>(const std::string &amp;s=&quot;Cal3_S2&quot;) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>equals</name>
      <anchorfile>a02483.html</anchorfile>
      <anchor>a5a354b8c3ba4d6b458678f167c347da2</anchor>
      <arglist>(const Cal3_S2 &amp;K, double tol=10e-9) const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>fx</name>
      <anchorfile>a02483.html</anchorfile>
      <anchor>a06cd05958f65529f38276cd7cc52d751</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>fy</name>
      <anchorfile>a02483.html</anchorfile>
      <anchor>a807551e73096edc515972b3781fde2c1</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>aspectRatio</name>
      <anchorfile>a02483.html</anchorfile>
      <anchor>a5da13543ca75a09016983b20c4ec6065</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>skew</name>
      <anchorfile>a02483.html</anchorfile>
      <anchor>a80adc9f925e4cc91bedf67f09761ddea</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>px</name>
      <anchorfile>a02483.html</anchorfile>
      <anchor>ad84f828ae31c3f92d3583750001951b3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>py</name>
      <anchorfile>a02483.html</anchorfile>
      <anchor>a22f953899dfc5a290a4636b32d8e9d86</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Point2</type>
      <name>principalPoint</name>
      <anchorfile>a02483.html</anchorfile>
      <anchor>abc535b4bbf0426013c1b178c5cb2cea9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Vector5</type>
      <name>vector</name>
      <anchorfile>a02483.html</anchorfile>
      <anchor>a56c995e8cf36ee222ab9608177f50cbf</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Matrix3</type>
      <name>K</name>
      <anchorfile>a02483.html</anchorfile>
      <anchor>ad58dcd2a0b3210e5972613212cb67e04</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Matrix3</type>
      <name>matrix</name>
      <anchorfile>a02483.html</anchorfile>
      <anchor>a62058826da335a37bb2b0497acfbe478</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Matrix3</type>
      <name>matrix_inverse</name>
      <anchorfile>a02483.html</anchorfile>
      <anchor>a99b777d10fbd43d47a6d31d9ed21df76</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Point2</type>
      <name>uncalibrate</name>
      <anchorfile>a02483.html</anchorfile>
      <anchor>a35dc759d40c3eb605fe4850ce1fd4c7d</anchor>
      <arglist>(const Point2 &amp;p, OptionalJacobian&lt; 2, 5 &gt; Dcal=boost::none, OptionalJacobian&lt; 2, 2 &gt; Dp=boost::none) const</arglist>
    </member>
    <member kind="function">
      <type>Point2</type>
      <name>calibrate</name>
      <anchorfile>a02483.html</anchorfile>
      <anchor>ac48b135a0fba7bbb366ec38a2cfbbddc</anchor>
      <arglist>(const Point2 &amp;p, OptionalJacobian&lt; 2, 5 &gt; Dcal=boost::none, OptionalJacobian&lt; 2, 2 &gt; Dp=boost::none) const</arglist>
    </member>
    <member kind="function">
      <type>Vector3</type>
      <name>calibrate</name>
      <anchorfile>a02483.html</anchorfile>
      <anchor>a7bec2d6a1006c856ad07445e2e84abb9</anchor>
      <arglist>(const Vector3 &amp;p) const</arglist>
    </member>
    <member kind="function">
      <type>Cal3_S2</type>
      <name>between</name>
      <anchorfile>a02483.html</anchorfile>
      <anchor>a9bba3f8020ee39cf143086e62572cbb7</anchor>
      <arglist>(const Cal3_S2 &amp;q, OptionalJacobian&lt; 5, 5 &gt; H1=boost::none, OptionalJacobian&lt; 5, 5 &gt; H2=boost::none) const</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>dim</name>
      <anchorfile>a02483.html</anchorfile>
      <anchor>a26ca20bc73c5b9ce1873543e6b935b53</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Cal3_S2</type>
      <name>retract</name>
      <anchorfile>a02483.html</anchorfile>
      <anchor>afbdc4704994a0c5a4f487f3cae159c17</anchor>
      <arglist>(const Vector &amp;d) const</arglist>
    </member>
    <member kind="function">
      <type>Vector5</type>
      <name>localCoordinates</name>
      <anchorfile>a02483.html</anchorfile>
      <anchor>ad5953ae1e667c79382c676362cbdb63a</anchor>
      <arglist>(const Cal3_S2 &amp;T2) const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static size_t</type>
      <name>Dim</name>
      <anchorfile>a02483.html</anchorfile>
      <anchor>a9be7a853d441efe66a254233e3137471</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>boost::serialization::access</name>
      <anchorfile>a02483.html</anchorfile>
      <anchor>ac98d07dd8f7b70e16ccb9a01abf56b9c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Cal3_S2</name>
      <anchorfile>a02483.html</anchorfile>
      <anchor>ac9978a1a4bdae33286f57b9277b18c1d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Cal3_S2</name>
      <anchorfile>a02483.html</anchorfile>
      <anchor>a6f59c7c3f3e8782b2b4e1d71cd289d4b</anchor>
      <arglist>(double fx, double fy, double s, double u0, double v0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Cal3_S2</name>
      <anchorfile>a02483.html</anchorfile>
      <anchor>a76de30dafa79de4cea55531481e9225c</anchor>
      <arglist>(const Vector &amp;d)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Cal3_S2</name>
      <anchorfile>a02483.html</anchorfile>
      <anchor>ae7de8f587615c7b0909c06df658e96e5</anchor>
      <arglist>(double fov, int w, int h)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Cal3_S2</name>
      <anchorfile>a02483.html</anchorfile>
      <anchor>a5ad69bd9898195b4ee05cf86086c02f9</anchor>
      <arglist>(const std::string &amp;path)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>fx</name>
      <anchorfile>a02483.html</anchorfile>
      <anchor>a06cd05958f65529f38276cd7cc52d751</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>fy</name>
      <anchorfile>a02483.html</anchorfile>
      <anchor>a807551e73096edc515972b3781fde2c1</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>aspectRatio</name>
      <anchorfile>a02483.html</anchorfile>
      <anchor>a5da13543ca75a09016983b20c4ec6065</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>skew</name>
      <anchorfile>a02483.html</anchorfile>
      <anchor>a80adc9f925e4cc91bedf67f09761ddea</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>px</name>
      <anchorfile>a02483.html</anchorfile>
      <anchor>ad84f828ae31c3f92d3583750001951b3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>py</name>
      <anchorfile>a02483.html</anchorfile>
      <anchor>a22f953899dfc5a290a4636b32d8e9d86</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Point2</type>
      <name>principalPoint</name>
      <anchorfile>a02483.html</anchorfile>
      <anchor>abc535b4bbf0426013c1b178c5cb2cea9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Vector5</type>
      <name>vector</name>
      <anchorfile>a02483.html</anchorfile>
      <anchor>a56c995e8cf36ee222ab9608177f50cbf</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Matrix3</type>
      <name>K</name>
      <anchorfile>a02483.html</anchorfile>
      <anchor>ad58dcd2a0b3210e5972613212cb67e04</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Matrix3</type>
      <name>matrix</name>
      <anchorfile>a02483.html</anchorfile>
      <anchor>a62058826da335a37bb2b0497acfbe478</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Matrix3</type>
      <name>matrix_inverse</name>
      <anchorfile>a02483.html</anchorfile>
      <anchor>a99b777d10fbd43d47a6d31d9ed21df76</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Point2</type>
      <name>uncalibrate</name>
      <anchorfile>a02483.html</anchorfile>
      <anchor>a35dc759d40c3eb605fe4850ce1fd4c7d</anchor>
      <arglist>(const Point2 &amp;p, OptionalJacobian&lt; 2, 5 &gt; Dcal=boost::none, OptionalJacobian&lt; 2, 2 &gt; Dp=boost::none) const</arglist>
    </member>
    <member kind="function">
      <type>Point2</type>
      <name>calibrate</name>
      <anchorfile>a02483.html</anchorfile>
      <anchor>ac48b135a0fba7bbb366ec38a2cfbbddc</anchor>
      <arglist>(const Point2 &amp;p, OptionalJacobian&lt; 2, 5 &gt; Dcal=boost::none, OptionalJacobian&lt; 2, 2 &gt; Dp=boost::none) const</arglist>
    </member>
    <member kind="function">
      <type>Vector3</type>
      <name>calibrate</name>
      <anchorfile>a02483.html</anchorfile>
      <anchor>a7bec2d6a1006c856ad07445e2e84abb9</anchor>
      <arglist>(const Vector3 &amp;p) const</arglist>
    </member>
    <member kind="function">
      <type>Cal3_S2</type>
      <name>between</name>
      <anchorfile>a02483.html</anchorfile>
      <anchor>a9bba3f8020ee39cf143086e62572cbb7</anchor>
      <arglist>(const Cal3_S2 &amp;q, OptionalJacobian&lt; 5, 5 &gt; H1=boost::none, OptionalJacobian&lt; 5, 5 &gt; H2=boost::none) const</arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; Cal3_S2 &gt;</type>
      <name>shared_ptr</name>
      <anchorfile>a02483.html</anchorfile>
      <anchor>a6748b9fdff7627d55b9874234172cee0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::Cal3_S2Stereo</name>
    <filename>a02495.html</filename>
    <member kind="function">
      <type></type>
      <name>Cal3_S2Stereo</name>
      <anchorfile>a02495.html</anchorfile>
      <anchor>a647d635956e27a9e0a94fc74a2e904fa</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Cal3_S2Stereo</name>
      <anchorfile>a02495.html</anchorfile>
      <anchor>a2ca55987f036f43be6bed31b7766ab27</anchor>
      <arglist>(double fx, double fy, double s, double u0, double v0, double b)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Cal3_S2Stereo</name>
      <anchorfile>a02495.html</anchorfile>
      <anchor>a1077828f44ebbc1f92a8bea478666dc0</anchor>
      <arglist>(const Vector &amp;d)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Cal3_S2Stereo</name>
      <anchorfile>a02495.html</anchorfile>
      <anchor>a7f1fe1eea1342b36c190c66bad4476ef</anchor>
      <arglist>(double fov, int w, int h, double b)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>equals</name>
      <anchorfile>a02495.html</anchorfile>
      <anchor>aa2068919bcefa870cc8e2d6b3cc93e5d</anchor>
      <arglist>(const Cal3_S2Stereo &amp;other, double tol=10e-9) const</arglist>
    </member>
    <member kind="function">
      <type>const Cal3_S2 &amp;</type>
      <name>calibration</name>
      <anchorfile>a02495.html</anchorfile>
      <anchor>a0b56736ec2f6aad60be7b44bcbaa37f0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Matrix</type>
      <name>matrix</name>
      <anchorfile>a02495.html</anchorfile>
      <anchor>a1970082901d04bec9304420d5804764f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>fx</name>
      <anchorfile>a02495.html</anchorfile>
      <anchor>a838586d5226f7e48d043ea745b2009be</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>fy</name>
      <anchorfile>a02495.html</anchorfile>
      <anchor>a07d3e156cf8c07ec0617ca645ad3de0d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>skew</name>
      <anchorfile>a02495.html</anchorfile>
      <anchor>aadcc1f9c8994a8de39ec63e673a34887</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>px</name>
      <anchorfile>a02495.html</anchorfile>
      <anchor>a234948b9d3ca4ccedaa3bf44bcb1744e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>py</name>
      <anchorfile>a02495.html</anchorfile>
      <anchor>afa078b483286297bc8d044525142141f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Point2</type>
      <name>principalPoint</name>
      <anchorfile>a02495.html</anchorfile>
      <anchor>a6371b26776c0e7de989d529063bbf854</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>baseline</name>
      <anchorfile>a02495.html</anchorfile>
      <anchor>aa2deb1f7e5d74fb15fd24844049029d6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Vector6</type>
      <name>vector</name>
      <anchorfile>a02495.html</anchorfile>
      <anchor>a2260bb03a4780c7e6df9ba1589280c40</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>dim</name>
      <anchorfile>a02495.html</anchorfile>
      <anchor>a0f8ff2594124b7e226d04f22c1f65e9d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Cal3_S2Stereo</type>
      <name>retract</name>
      <anchorfile>a02495.html</anchorfile>
      <anchor>a6bffe3791a2ebb2ee5c8983042e42281</anchor>
      <arglist>(const Vector &amp;d) const</arglist>
    </member>
    <member kind="function">
      <type>Vector6</type>
      <name>localCoordinates</name>
      <anchorfile>a02495.html</anchorfile>
      <anchor>a33158b47c45c5ef95a9f96da355a617a</anchor>
      <arglist>(const Cal3_S2Stereo &amp;T2) const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static size_t</type>
      <name>Dim</name>
      <anchorfile>a02495.html</anchorfile>
      <anchor>a7bffdc1fe38e61e69f4d55eccbed7e7e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>boost::serialization::access</name>
      <anchorfile>a02495.html</anchorfile>
      <anchor>ac98d07dd8f7b70e16ccb9a01abf56b9c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Cal3_S2Stereo</name>
      <anchorfile>a02495.html</anchorfile>
      <anchor>a647d635956e27a9e0a94fc74a2e904fa</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Cal3_S2Stereo</name>
      <anchorfile>a02495.html</anchorfile>
      <anchor>a2ca55987f036f43be6bed31b7766ab27</anchor>
      <arglist>(double fx, double fy, double s, double u0, double v0, double b)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Cal3_S2Stereo</name>
      <anchorfile>a02495.html</anchorfile>
      <anchor>a1077828f44ebbc1f92a8bea478666dc0</anchor>
      <arglist>(const Vector &amp;d)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Cal3_S2Stereo</name>
      <anchorfile>a02495.html</anchorfile>
      <anchor>a7f1fe1eea1342b36c190c66bad4476ef</anchor>
      <arglist>(double fov, int w, int h, double b)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>equals</name>
      <anchorfile>a02495.html</anchorfile>
      <anchor>aa2068919bcefa870cc8e2d6b3cc93e5d</anchor>
      <arglist>(const Cal3_S2Stereo &amp;other, double tol=10e-9) const</arglist>
    </member>
    <member kind="function">
      <type>const Cal3_S2 &amp;</type>
      <name>calibration</name>
      <anchorfile>a02495.html</anchorfile>
      <anchor>a0b56736ec2f6aad60be7b44bcbaa37f0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Matrix</type>
      <name>matrix</name>
      <anchorfile>a02495.html</anchorfile>
      <anchor>a1970082901d04bec9304420d5804764f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>fx</name>
      <anchorfile>a02495.html</anchorfile>
      <anchor>a838586d5226f7e48d043ea745b2009be</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>fy</name>
      <anchorfile>a02495.html</anchorfile>
      <anchor>a07d3e156cf8c07ec0617ca645ad3de0d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>skew</name>
      <anchorfile>a02495.html</anchorfile>
      <anchor>aadcc1f9c8994a8de39ec63e673a34887</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>px</name>
      <anchorfile>a02495.html</anchorfile>
      <anchor>a234948b9d3ca4ccedaa3bf44bcb1744e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>py</name>
      <anchorfile>a02495.html</anchorfile>
      <anchor>afa078b483286297bc8d044525142141f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Point2</type>
      <name>principalPoint</name>
      <anchorfile>a02495.html</anchorfile>
      <anchor>a6371b26776c0e7de989d529063bbf854</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>baseline</name>
      <anchorfile>a02495.html</anchorfile>
      <anchor>aa2deb1f7e5d74fb15fd24844049029d6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Vector6</type>
      <name>vector</name>
      <anchorfile>a02495.html</anchorfile>
      <anchor>a2260bb03a4780c7e6df9ba1589280c40</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; Cal3_S2Stereo &gt;</type>
      <name>shared_ptr</name>
      <anchorfile>a02495.html</anchorfile>
      <anchor>aef66cac91adf5a99a61b12ec0305a028</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::Cal3Bundler</name>
    <filename>a02507.html</filename>
    <member kind="function">
      <type></type>
      <name>Cal3Bundler</name>
      <anchorfile>a02507.html</anchorfile>
      <anchor>a7938e2594fda649315ec00539c9f5946</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Cal3Bundler</name>
      <anchorfile>a02507.html</anchorfile>
      <anchor>a5d3a2efcf7e0f0d1bff9362757036e81</anchor>
      <arglist>(double f, double k1, double k2, double u0=0, double v0=0)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>a02507.html</anchorfile>
      <anchor>a23df6ea4e3abb83ede3eb6587e064e87</anchor>
      <arglist>(const std::string &amp;s=&quot;&quot;) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>equals</name>
      <anchorfile>a02507.html</anchorfile>
      <anchor>a4b98f2ce006880417ffec51ee7de3b77</anchor>
      <arglist>(const Cal3Bundler &amp;K, double tol=10e-9) const</arglist>
    </member>
    <member kind="function">
      <type>Matrix3</type>
      <name>K</name>
      <anchorfile>a02507.html</anchorfile>
      <anchor>a6043ad8b1c02187c1216f59cdaa634f9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Vector4</type>
      <name>k</name>
      <anchorfile>a02507.html</anchorfile>
      <anchor>a6e6ab8c1b9c678a23ae8fb60f148d8a9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>fx</name>
      <anchorfile>a02507.html</anchorfile>
      <anchor>ad2382562cf69d7a38ed50ead56d1bfbc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>fy</name>
      <anchorfile>a02507.html</anchorfile>
      <anchor>a7848101e9489effa24090d3c98603ce2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>k1</name>
      <anchorfile>a02507.html</anchorfile>
      <anchor>a000d35943600b9bf81818b9ae65c1e53</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>k2</name>
      <anchorfile>a02507.html</anchorfile>
      <anchor>a0162ada34d8b64e4371db3b093f18d1e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>u0</name>
      <anchorfile>a02507.html</anchorfile>
      <anchor>add8cc47fbad9b94eb63334ac527b5f19</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>v0</name>
      <anchorfile>a02507.html</anchorfile>
      <anchor>a2c1e050fed9f047e65d5e05169eafd5e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Point2</type>
      <name>uncalibrate</name>
      <anchorfile>a02507.html</anchorfile>
      <anchor>a385d386469893b68323dee3f26ae169b</anchor>
      <arglist>(const Point2 &amp;p, OptionalJacobian&lt; 2, 3 &gt; Dcal=boost::none, OptionalJacobian&lt; 2, 2 &gt; Dp=boost::none) const</arglist>
    </member>
    <member kind="function">
      <type>Point2</type>
      <name>calibrate</name>
      <anchorfile>a02507.html</anchorfile>
      <anchor>a008b7fd967547ee45eb7ad4f92e370f3</anchor>
      <arglist>(const Point2 &amp;pi, const double tol=1e-5) const</arglist>
    </member>
    <member kind="function">
      <type>Matrix2</type>
      <name>D2d_intrinsic</name>
      <anchorfile>a02507.html</anchorfile>
      <anchor>a2d2f5baf132f1c70cd55fab1defc66ec</anchor>
      <arglist>(const Point2 &amp;p) const</arglist>
    </member>
    <member kind="function">
      <type>Matrix23</type>
      <name>D2d_calibration</name>
      <anchorfile>a02507.html</anchorfile>
      <anchor>a298f80d64ca9fe2e0c6fd508a767599c</anchor>
      <arglist>(const Point2 &amp;p) const</arglist>
    </member>
    <member kind="function">
      <type>Matrix25</type>
      <name>D2d_intrinsic_calibration</name>
      <anchorfile>a02507.html</anchorfile>
      <anchor>a130a3fee3d0c17fb1dfb3dab67ffdd66</anchor>
      <arglist>(const Point2 &amp;p) const</arglist>
    </member>
    <member kind="function">
      <type>Cal3Bundler</type>
      <name>retract</name>
      <anchorfile>a02507.html</anchorfile>
      <anchor>a1aae0a76422919169e665bc35e68897b</anchor>
      <arglist>(const Vector &amp;d) const</arglist>
    </member>
    <member kind="function">
      <type>Vector3</type>
      <name>localCoordinates</name>
      <anchorfile>a02507.html</anchorfile>
      <anchor>a3d9b93b77586cbfc637563a965d9bb74</anchor>
      <arglist>(const Cal3Bundler &amp;T2) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual size_t</type>
      <name>dim</name>
      <anchorfile>a02507.html</anchorfile>
      <anchor>a769518d0bb09484097b99fc880d17fc8</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static size_t</type>
      <name>Dim</name>
      <anchorfile>a02507.html</anchorfile>
      <anchor>af5790ae1df63a0bb946553657c4b9c85</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>boost::serialization::access</name>
      <anchorfile>a02507.html</anchorfile>
      <anchor>ac98d07dd8f7b70e16ccb9a01abf56b9c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Cal3Bundler</name>
      <anchorfile>a02507.html</anchorfile>
      <anchor>a7938e2594fda649315ec00539c9f5946</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Cal3Bundler</name>
      <anchorfile>a02507.html</anchorfile>
      <anchor>a5d3a2efcf7e0f0d1bff9362757036e81</anchor>
      <arglist>(double f, double k1, double k2, double u0=0, double v0=0)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>a02507.html</anchorfile>
      <anchor>a23df6ea4e3abb83ede3eb6587e064e87</anchor>
      <arglist>(const std::string &amp;s=&quot;&quot;) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>equals</name>
      <anchorfile>a02507.html</anchorfile>
      <anchor>a4b98f2ce006880417ffec51ee7de3b77</anchor>
      <arglist>(const Cal3Bundler &amp;K, double tol=10e-9) const</arglist>
    </member>
    <member kind="function">
      <type>Matrix3</type>
      <name>K</name>
      <anchorfile>a02507.html</anchorfile>
      <anchor>a6043ad8b1c02187c1216f59cdaa634f9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Vector4</type>
      <name>k</name>
      <anchorfile>a02507.html</anchorfile>
      <anchor>a6e6ab8c1b9c678a23ae8fb60f148d8a9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>fx</name>
      <anchorfile>a02507.html</anchorfile>
      <anchor>ad2382562cf69d7a38ed50ead56d1bfbc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>fy</name>
      <anchorfile>a02507.html</anchorfile>
      <anchor>a7848101e9489effa24090d3c98603ce2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>k1</name>
      <anchorfile>a02507.html</anchorfile>
      <anchor>a000d35943600b9bf81818b9ae65c1e53</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>k2</name>
      <anchorfile>a02507.html</anchorfile>
      <anchor>a0162ada34d8b64e4371db3b093f18d1e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>u0</name>
      <anchorfile>a02507.html</anchorfile>
      <anchor>add8cc47fbad9b94eb63334ac527b5f19</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>v0</name>
      <anchorfile>a02507.html</anchorfile>
      <anchor>a2c1e050fed9f047e65d5e05169eafd5e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Point2</type>
      <name>uncalibrate</name>
      <anchorfile>a02507.html</anchorfile>
      <anchor>a385d386469893b68323dee3f26ae169b</anchor>
      <arglist>(const Point2 &amp;p, OptionalJacobian&lt; 2, 3 &gt; Dcal=boost::none, OptionalJacobian&lt; 2, 2 &gt; Dp=boost::none) const</arglist>
    </member>
    <member kind="function">
      <type>Point2</type>
      <name>calibrate</name>
      <anchorfile>a02507.html</anchorfile>
      <anchor>a008b7fd967547ee45eb7ad4f92e370f3</anchor>
      <arglist>(const Point2 &amp;pi, const double tol=1e-5) const</arglist>
    </member>
    <member kind="function">
      <type>Matrix2</type>
      <name>D2d_intrinsic</name>
      <anchorfile>a02507.html</anchorfile>
      <anchor>a2d2f5baf132f1c70cd55fab1defc66ec</anchor>
      <arglist>(const Point2 &amp;p) const</arglist>
    </member>
    <member kind="function">
      <type>Matrix23</type>
      <name>D2d_calibration</name>
      <anchorfile>a02507.html</anchorfile>
      <anchor>a298f80d64ca9fe2e0c6fd508a767599c</anchor>
      <arglist>(const Point2 &amp;p) const</arglist>
    </member>
    <member kind="function">
      <type>Matrix25</type>
      <name>D2d_intrinsic_calibration</name>
      <anchorfile>a02507.html</anchorfile>
      <anchor>a130a3fee3d0c17fb1dfb3dab67ffdd66</anchor>
      <arglist>(const Point2 &amp;p) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::Cal3DS2</name>
    <filename>a02519.html</filename>
    <base>gtsam::Cal3DS2_Base</base>
    <member kind="function">
      <type></type>
      <name>Cal3DS2</name>
      <anchorfile>a02519.html</anchorfile>
      <anchor>a416fd0c0b79c280d6d5336a9e0964900</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>print</name>
      <anchorfile>a02519.html</anchorfile>
      <anchor>a39ceb33e5d2625907b186b8ba6b2bb7b</anchor>
      <arglist>(const std::string &amp;s=&quot;&quot;) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>equals</name>
      <anchorfile>a02519.html</anchorfile>
      <anchor>aa51ad8d273e4ebd54a4c71c3ecaff948</anchor>
      <arglist>(const Cal3DS2 &amp;K, double tol=10e-9) const</arglist>
    </member>
    <member kind="function">
      <type>Cal3DS2</type>
      <name>retract</name>
      <anchorfile>a02519.html</anchorfile>
      <anchor>ac847149836c68831e521deebbf5416d4</anchor>
      <arglist>(const Vector &amp;d) const</arglist>
    </member>
    <member kind="function">
      <type>Vector</type>
      <name>localCoordinates</name>
      <anchorfile>a02519.html</anchorfile>
      <anchor>ae50c6756bae966333b7babb530f4aa1b</anchor>
      <arglist>(const Cal3DS2 &amp;T2) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual size_t</type>
      <name>dim</name>
      <anchorfile>a02519.html</anchorfile>
      <anchor>a6aa6a5e7505e43fb43f02653ded8a7af</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static size_t</type>
      <name>Dim</name>
      <anchorfile>a02519.html</anchorfile>
      <anchor>abd94361657d8a101d46ca527940dd502</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual boost::shared_ptr&lt; Base &gt;</type>
      <name>clone</name>
      <anchorfile>a02519.html</anchorfile>
      <anchor>ad0d6bc618ebd9edc5b5ad336c7c3c314</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>boost::serialization::access</name>
      <anchorfile>a02519.html</anchorfile>
      <anchor>ac98d07dd8f7b70e16ccb9a01abf56b9c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Cal3DS2</name>
      <anchorfile>a02519.html</anchorfile>
      <anchor>a416fd0c0b79c280d6d5336a9e0964900</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>print</name>
      <anchorfile>a02519.html</anchorfile>
      <anchor>a39ceb33e5d2625907b186b8ba6b2bb7b</anchor>
      <arglist>(const std::string &amp;s=&quot;&quot;) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>equals</name>
      <anchorfile>a02519.html</anchorfile>
      <anchor>aa51ad8d273e4ebd54a4c71c3ecaff948</anchor>
      <arglist>(const Cal3DS2 &amp;K, double tol=10e-9) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual boost::shared_ptr&lt; Base &gt;</type>
      <name>clone</name>
      <anchorfile>a02519.html</anchorfile>
      <anchor>ad0d6bc618ebd9edc5b5ad336c7c3c314</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::Cal3DS2_Base</name>
    <filename>a02531.html</filename>
    <member kind="function">
      <type></type>
      <name>Cal3DS2_Base</name>
      <anchorfile>a02531.html</anchorfile>
      <anchor>adc89b3f946d8561769be84b4445dce79</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>print</name>
      <anchorfile>a02531.html</anchorfile>
      <anchor>af4efa5cca62a50c9737060e2cd833d4c</anchor>
      <arglist>(const std::string &amp;s=&quot;&quot;) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>equals</name>
      <anchorfile>a02531.html</anchorfile>
      <anchor>a7e50ba7d9b49650a907abd3aa091158c</anchor>
      <arglist>(const Cal3DS2_Base &amp;K, double tol=10e-9) const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>fx</name>
      <anchorfile>a02531.html</anchorfile>
      <anchor>a72e3e85ef609b3392c97297c9379d876</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>fy</name>
      <anchorfile>a02531.html</anchorfile>
      <anchor>afb772288a48ae8ebddde0c47d05fd662</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>skew</name>
      <anchorfile>a02531.html</anchorfile>
      <anchor>afe4d64e5cb152268c0090b0ef98efde1</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>px</name>
      <anchorfile>a02531.html</anchorfile>
      <anchor>a2b5452201e5c44367aa12dccc3c37de6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>py</name>
      <anchorfile>a02531.html</anchorfile>
      <anchor>ae117fbb3899e60ebe958665fbd254432</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>k1</name>
      <anchorfile>a02531.html</anchorfile>
      <anchor>a90a0cc3150156eb17066c3d6bb95a99e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>k2</name>
      <anchorfile>a02531.html</anchorfile>
      <anchor>a38ce12c0386aa31d159cedea0076afca</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>p1</name>
      <anchorfile>a02531.html</anchorfile>
      <anchor>add2664cff0283ec8b8299ff0002b019c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>p2</name>
      <anchorfile>a02531.html</anchorfile>
      <anchor>a0a28d69c1e3f12bd9c7d53419cc521e3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Matrix3</type>
      <name>K</name>
      <anchorfile>a02531.html</anchorfile>
      <anchor>a25a4e64c2d1e9294764a7e9f617e2a88</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Vector4</type>
      <name>k</name>
      <anchorfile>a02531.html</anchorfile>
      <anchor>ae46e8297a7e3dab6ec2486e0bf0648ae</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Vector9</type>
      <name>vector</name>
      <anchorfile>a02531.html</anchorfile>
      <anchor>abf88fb2d93077ecd0a4aba487c5b23ef</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Point2</type>
      <name>uncalibrate</name>
      <anchorfile>a02531.html</anchorfile>
      <anchor>ac6e5bbaf27a7beb03fce62197703dd6e</anchor>
      <arglist>(const Point2 &amp;p, OptionalJacobian&lt; 2, 9 &gt; Dcal=boost::none, OptionalJacobian&lt; 2, 2 &gt; Dp=boost::none) const</arglist>
    </member>
    <member kind="function">
      <type>Point2</type>
      <name>calibrate</name>
      <anchorfile>a02531.html</anchorfile>
      <anchor>ac1687945252b48e2725e7df14df928e4</anchor>
      <arglist>(const Point2 &amp;p, const double tol=1e-5) const</arglist>
    </member>
    <member kind="function">
      <type>Matrix2</type>
      <name>D2d_intrinsic</name>
      <anchorfile>a02531.html</anchorfile>
      <anchor>a2a5de5d704c658de776503bc78f30575</anchor>
      <arglist>(const Point2 &amp;p) const</arglist>
    </member>
    <member kind="function">
      <type>Matrix29</type>
      <name>D2d_calibration</name>
      <anchorfile>a02531.html</anchorfile>
      <anchor>a3528f21cedb334863e95af30e342d6de</anchor>
      <arglist>(const Point2 &amp;p) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual boost::shared_ptr&lt; Cal3DS2_Base &gt;</type>
      <name>clone</name>
      <anchorfile>a02531.html</anchorfile>
      <anchor>ab097a2b201455f577919e63eb3bca678</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>boost::serialization::access</name>
      <anchorfile>a02531.html</anchorfile>
      <anchor>ac98d07dd8f7b70e16ccb9a01abf56b9c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Cal3DS2_Base</name>
      <anchorfile>a02531.html</anchorfile>
      <anchor>adc89b3f946d8561769be84b4445dce79</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>print</name>
      <anchorfile>a02531.html</anchorfile>
      <anchor>af4efa5cca62a50c9737060e2cd833d4c</anchor>
      <arglist>(const std::string &amp;s=&quot;&quot;) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>equals</name>
      <anchorfile>a02531.html</anchorfile>
      <anchor>a7e50ba7d9b49650a907abd3aa091158c</anchor>
      <arglist>(const Cal3DS2_Base &amp;K, double tol=10e-9) const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>fx</name>
      <anchorfile>a02531.html</anchorfile>
      <anchor>a72e3e85ef609b3392c97297c9379d876</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>fy</name>
      <anchorfile>a02531.html</anchorfile>
      <anchor>afb772288a48ae8ebddde0c47d05fd662</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>skew</name>
      <anchorfile>a02531.html</anchorfile>
      <anchor>afe4d64e5cb152268c0090b0ef98efde1</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>px</name>
      <anchorfile>a02531.html</anchorfile>
      <anchor>a2b5452201e5c44367aa12dccc3c37de6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>py</name>
      <anchorfile>a02531.html</anchorfile>
      <anchor>ae117fbb3899e60ebe958665fbd254432</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>k1</name>
      <anchorfile>a02531.html</anchorfile>
      <anchor>a90a0cc3150156eb17066c3d6bb95a99e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>k2</name>
      <anchorfile>a02531.html</anchorfile>
      <anchor>a38ce12c0386aa31d159cedea0076afca</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>p1</name>
      <anchorfile>a02531.html</anchorfile>
      <anchor>add2664cff0283ec8b8299ff0002b019c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>p2</name>
      <anchorfile>a02531.html</anchorfile>
      <anchor>a0a28d69c1e3f12bd9c7d53419cc521e3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Matrix3</type>
      <name>K</name>
      <anchorfile>a02531.html</anchorfile>
      <anchor>a25a4e64c2d1e9294764a7e9f617e2a88</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Vector4</type>
      <name>k</name>
      <anchorfile>a02531.html</anchorfile>
      <anchor>ae46e8297a7e3dab6ec2486e0bf0648ae</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Vector9</type>
      <name>vector</name>
      <anchorfile>a02531.html</anchorfile>
      <anchor>abf88fb2d93077ecd0a4aba487c5b23ef</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Point2</type>
      <name>uncalibrate</name>
      <anchorfile>a02531.html</anchorfile>
      <anchor>ac6e5bbaf27a7beb03fce62197703dd6e</anchor>
      <arglist>(const Point2 &amp;p, OptionalJacobian&lt; 2, 9 &gt; Dcal=boost::none, OptionalJacobian&lt; 2, 2 &gt; Dp=boost::none) const</arglist>
    </member>
    <member kind="function">
      <type>Point2</type>
      <name>calibrate</name>
      <anchorfile>a02531.html</anchorfile>
      <anchor>ac1687945252b48e2725e7df14df928e4</anchor>
      <arglist>(const Point2 &amp;p, const double tol=1e-5) const</arglist>
    </member>
    <member kind="function">
      <type>Matrix2</type>
      <name>D2d_intrinsic</name>
      <anchorfile>a02531.html</anchorfile>
      <anchor>a2a5de5d704c658de776503bc78f30575</anchor>
      <arglist>(const Point2 &amp;p) const</arglist>
    </member>
    <member kind="function">
      <type>Matrix29</type>
      <name>D2d_calibration</name>
      <anchorfile>a02531.html</anchorfile>
      <anchor>a3528f21cedb334863e95af30e342d6de</anchor>
      <arglist>(const Point2 &amp;p) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual boost::shared_ptr&lt; Cal3DS2_Base &gt;</type>
      <name>clone</name>
      <anchorfile>a02531.html</anchorfile>
      <anchor>ab097a2b201455f577919e63eb3bca678</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::Cal3Unified</name>
    <filename>a02535.html</filename>
    <base>gtsam::Cal3DS2_Base</base>
    <member kind="function">
      <type></type>
      <name>Cal3Unified</name>
      <anchorfile>a02535.html</anchorfile>
      <anchor>aef2a791c3ba89ab087e104459fa1b20d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>print</name>
      <anchorfile>a02535.html</anchorfile>
      <anchor>afb8506b49fdc952412188729a9c405d4</anchor>
      <arglist>(const std::string &amp;s=&quot;&quot;) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>equals</name>
      <anchorfile>a02535.html</anchorfile>
      <anchor>aa6d55b7232cc0374fe167dd4266a9ac6</anchor>
      <arglist>(const Cal3Unified &amp;K, double tol=10e-9) const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>xi</name>
      <anchorfile>a02535.html</anchorfile>
      <anchor>a80a36bbc6309792977cd3a13864a6c2d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Point2</type>
      <name>uncalibrate</name>
      <anchorfile>a02535.html</anchorfile>
      <anchor>af43cfcde39736c03a216c0329747cc67</anchor>
      <arglist>(const Point2 &amp;p, OptionalJacobian&lt; 2, 10 &gt; Dcal=boost::none, OptionalJacobian&lt; 2, 2 &gt; Dp=boost::none) const</arglist>
    </member>
    <member kind="function">
      <type>Point2</type>
      <name>calibrate</name>
      <anchorfile>a02535.html</anchorfile>
      <anchor>adcf38430f33345c6b847ddfc7c0626d5</anchor>
      <arglist>(const Point2 &amp;p, const double tol=1e-5) const</arglist>
    </member>
    <member kind="function">
      <type>Point2</type>
      <name>spaceToNPlane</name>
      <anchorfile>a02535.html</anchorfile>
      <anchor>a19b59abd92fb06e447e010b77cec3148</anchor>
      <arglist>(const Point2 &amp;p) const</arglist>
    </member>
    <member kind="function">
      <type>Point2</type>
      <name>nPlaneToSpace</name>
      <anchorfile>a02535.html</anchorfile>
      <anchor>a34a211df3c9171dca639bab4a1fb4093</anchor>
      <arglist>(const Point2 &amp;p) const</arglist>
    </member>
    <member kind="function">
      <type>Cal3Unified</type>
      <name>retract</name>
      <anchorfile>a02535.html</anchorfile>
      <anchor>a5dec3028b266a10ad4e6bcbd978853ab</anchor>
      <arglist>(const Vector &amp;d) const</arglist>
    </member>
    <member kind="function">
      <type>Vector10</type>
      <name>localCoordinates</name>
      <anchorfile>a02535.html</anchorfile>
      <anchor>acedea5c0113f77128719004ffb59ac69</anchor>
      <arglist>(const Cal3Unified &amp;T2) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual size_t</type>
      <name>dim</name>
      <anchorfile>a02535.html</anchorfile>
      <anchor>ad751666910d43e12fe0dc661366d3077</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Vector10</type>
      <name>vector</name>
      <anchorfile>a02535.html</anchorfile>
      <anchor>a1b55a8740cdd5e7c7e8c49783222741f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static size_t</type>
      <name>Dim</name>
      <anchorfile>a02535.html</anchorfile>
      <anchor>af74f4e76f00451bbd751ff42786df828</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Cal3Unified</name>
      <anchorfile>a02535.html</anchorfile>
      <anchor>aef2a791c3ba89ab087e104459fa1b20d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>print</name>
      <anchorfile>a02535.html</anchorfile>
      <anchor>afb8506b49fdc952412188729a9c405d4</anchor>
      <arglist>(const std::string &amp;s=&quot;&quot;) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>equals</name>
      <anchorfile>a02535.html</anchorfile>
      <anchor>aa6d55b7232cc0374fe167dd4266a9ac6</anchor>
      <arglist>(const Cal3Unified &amp;K, double tol=10e-9) const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>xi</name>
      <anchorfile>a02535.html</anchorfile>
      <anchor>a80a36bbc6309792977cd3a13864a6c2d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Point2</type>
      <name>uncalibrate</name>
      <anchorfile>a02535.html</anchorfile>
      <anchor>af43cfcde39736c03a216c0329747cc67</anchor>
      <arglist>(const Point2 &amp;p, OptionalJacobian&lt; 2, 10 &gt; Dcal=boost::none, OptionalJacobian&lt; 2, 2 &gt; Dp=boost::none) const</arglist>
    </member>
    <member kind="function">
      <type>Point2</type>
      <name>calibrate</name>
      <anchorfile>a02535.html</anchorfile>
      <anchor>adcf38430f33345c6b847ddfc7c0626d5</anchor>
      <arglist>(const Point2 &amp;p, const double tol=1e-5) const</arglist>
    </member>
    <member kind="function">
      <type>Point2</type>
      <name>spaceToNPlane</name>
      <anchorfile>a02535.html</anchorfile>
      <anchor>a19b59abd92fb06e447e010b77cec3148</anchor>
      <arglist>(const Point2 &amp;p) const</arglist>
    </member>
    <member kind="function">
      <type>Point2</type>
      <name>nPlaneToSpace</name>
      <anchorfile>a02535.html</anchorfile>
      <anchor>a34a211df3c9171dca639bab4a1fb4093</anchor>
      <arglist>(const Point2 &amp;p) const</arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>boost::serialization::access</name>
      <anchorfile>a02535.html</anchorfile>
      <anchor>ac98d07dd8f7b70e16ccb9a01abf56b9c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::CalibratedCamera</name>
    <filename>a02555.html</filename>
    <base>gtsam::PinholeBase</base>
    <member kind="function">
      <type></type>
      <name>CalibratedCamera</name>
      <anchorfile>a02555.html</anchorfile>
      <anchor>a5b59414e39297638751de5f43b293798</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CalibratedCamera</name>
      <anchorfile>a02555.html</anchorfile>
      <anchor>ae9607d9d9ef98835b38d0fb494eba191</anchor>
      <arglist>(const Pose3 &amp;pose)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static CalibratedCamera</type>
      <name>Level</name>
      <anchorfile>a02555.html</anchorfile>
      <anchor>a816481e5b3be92b94f1ba0371806a2d6</anchor>
      <arglist>(const Pose2 &amp;pose2, double height)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static CalibratedCamera</type>
      <name>Lookat</name>
      <anchorfile>a02555.html</anchorfile>
      <anchor>a5a6ed3125f756b682faa83338e895cb4</anchor>
      <arglist>(const Point3 &amp;eye, const Point3 &amp;target, const Point3 &amp;upVector)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CalibratedCamera</name>
      <anchorfile>a02555.html</anchorfile>
      <anchor>a88d317a781597e5243bb7995df07d9cc</anchor>
      <arglist>(const Vector &amp;v)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~CalibratedCamera</name>
      <anchorfile>a02555.html</anchorfile>
      <anchor>ab3e14367e42bcc0d48495862c48aed81</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>CalibratedCamera</type>
      <name>retract</name>
      <anchorfile>a02555.html</anchorfile>
      <anchor>a4d59d1978cb514784f49ea252f70b52c</anchor>
      <arglist>(const Vector &amp;d) const</arglist>
    </member>
    <member kind="function">
      <type>Vector</type>
      <name>localCoordinates</name>
      <anchorfile>a02555.html</anchorfile>
      <anchor>a6bbda25ef776c5e222518d8aeda54140</anchor>
      <arglist>(const CalibratedCamera &amp;T2) const</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>dim</name>
      <anchorfile>a02555.html</anchorfile>
      <anchor>a676f6bf0f31dbb91db4dc65a7f7ce193</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static size_t</type>
      <name>Dim</name>
      <anchorfile>a02555.html</anchorfile>
      <anchor>ab6bda69b20fd92ca4de15ef9eac594bb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Point2</type>
      <name>project</name>
      <anchorfile>a02555.html</anchorfile>
      <anchor>aaa7b49f03ffcaaf4b6f9b69973ee28ec</anchor>
      <arglist>(const Point3 &amp;point, OptionalJacobian&lt; 2, 6 &gt; Dcamera=boost::none, OptionalJacobian&lt; 2, 3 &gt; Dpoint=boost::none) const</arglist>
    </member>
    <member kind="function">
      <type>Point3</type>
      <name>backproject</name>
      <anchorfile>a02555.html</anchorfile>
      <anchor>a50dba2306064516d387f5b8688349efe</anchor>
      <arglist>(const Point2 &amp;pn, double depth, OptionalJacobian&lt; 3, 6 &gt; Dresult_dpose=boost::none, OptionalJacobian&lt; 3, 2 &gt; Dresult_dp=boost::none, OptionalJacobian&lt; 3, 1 &gt; Dresult_ddepth=boost::none) const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>range</name>
      <anchorfile>a02555.html</anchorfile>
      <anchor>ae5bcde3dc7486e3e7416d7b511c0fe71</anchor>
      <arglist>(const Point3 &amp;point, OptionalJacobian&lt; 1, 6 &gt; Dcamera=boost::none, OptionalJacobian&lt; 1, 3 &gt; Dpoint=boost::none) const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>range</name>
      <anchorfile>a02555.html</anchorfile>
      <anchor>a65d00038d2f3cf408469f004add3b757</anchor>
      <arglist>(const Pose3 &amp;pose, OptionalJacobian&lt; 1, 6 &gt; Dcamera=boost::none, OptionalJacobian&lt; 1, 6 &gt; Dpose=boost::none) const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>range</name>
      <anchorfile>a02555.html</anchorfile>
      <anchor>ac452f777424850f1333bf6ec5d00b610</anchor>
      <arglist>(const CalibratedCamera &amp;camera, OptionalJacobian&lt; 1, 6 &gt; H1=boost::none, OptionalJacobian&lt; 1, 6 &gt; H2=boost::none) const</arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>boost::serialization::access</name>
      <anchorfile>a02555.html</anchorfile>
      <anchor>ac98d07dd8f7b70e16ccb9a01abf56b9c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CalibratedCamera</name>
      <anchorfile>a02555.html</anchorfile>
      <anchor>a5b59414e39297638751de5f43b293798</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CalibratedCamera</name>
      <anchorfile>a02555.html</anchorfile>
      <anchor>ae9607d9d9ef98835b38d0fb494eba191</anchor>
      <arglist>(const Pose3 &amp;pose)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CalibratedCamera</name>
      <anchorfile>a02555.html</anchorfile>
      <anchor>a88d317a781597e5243bb7995df07d9cc</anchor>
      <arglist>(const Vector &amp;v)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~CalibratedCamera</name>
      <anchorfile>a02555.html</anchorfile>
      <anchor>ab3e14367e42bcc0d48495862c48aed81</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Point2</type>
      <name>project</name>
      <anchorfile>a02555.html</anchorfile>
      <anchor>aaa7b49f03ffcaaf4b6f9b69973ee28ec</anchor>
      <arglist>(const Point3 &amp;point, OptionalJacobian&lt; 2, 6 &gt; Dcamera=boost::none, OptionalJacobian&lt; 2, 3 &gt; Dpoint=boost::none) const</arglist>
    </member>
    <member kind="function">
      <type>Point3</type>
      <name>backproject</name>
      <anchorfile>a02555.html</anchorfile>
      <anchor>a50dba2306064516d387f5b8688349efe</anchor>
      <arglist>(const Point2 &amp;pn, double depth, OptionalJacobian&lt; 3, 6 &gt; Dresult_dpose=boost::none, OptionalJacobian&lt; 3, 2 &gt; Dresult_dp=boost::none, OptionalJacobian&lt; 3, 1 &gt; Dresult_ddepth=boost::none) const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>range</name>
      <anchorfile>a02555.html</anchorfile>
      <anchor>ae5bcde3dc7486e3e7416d7b511c0fe71</anchor>
      <arglist>(const Point3 &amp;point, OptionalJacobian&lt; 1, 6 &gt; Dcamera=boost::none, OptionalJacobian&lt; 1, 3 &gt; Dpoint=boost::none) const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>range</name>
      <anchorfile>a02555.html</anchorfile>
      <anchor>a65d00038d2f3cf408469f004add3b757</anchor>
      <arglist>(const Pose3 &amp;pose, OptionalJacobian&lt; 1, 6 &gt; Dcamera=boost::none, OptionalJacobian&lt; 1, 6 &gt; Dpose=boost::none) const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>range</name>
      <anchorfile>a02555.html</anchorfile>
      <anchor>ac452f777424850f1333bf6ec5d00b610</anchor>
      <arglist>(const CalibratedCamera &amp;camera, OptionalJacobian&lt; 1, 6 &gt; H1=boost::none, OptionalJacobian&lt; 1, 6 &gt; H2=boost::none) const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static CalibratedCamera</type>
      <name>Level</name>
      <anchorfile>a02555.html</anchorfile>
      <anchor>a816481e5b3be92b94f1ba0371806a2d6</anchor>
      <arglist>(const Pose2 &amp;pose2, double height)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static CalibratedCamera</type>
      <name>Lookat</name>
      <anchorfile>a02555.html</anchorfile>
      <anchor>a5a6ed3125f756b682faa83338e895cb4</anchor>
      <arglist>(const Point3 &amp;eye, const Point3 &amp;target, const Point3 &amp;upVector)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>gtsam::CameraProjectionMatrix</name>
    <filename>a02855.html</filename>
    <templarg>CALIBRATION</templarg>
  </compound>
  <compound kind="class">
    <name>gtsam::CameraSet</name>
    <filename>a02571.html</filename>
    <templarg>CAMERA</templarg>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>print</name>
      <anchorfile>a02571.html</anchorfile>
      <anchor>a0a63d102fb3a0ff2bae4e1e6afeab87e</anchor>
      <arglist>(const std::string &amp;s=&quot;&quot;) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>equals</name>
      <anchorfile>a02571.html</anchorfile>
      <anchor>a76042f2726211fd8c3ef103b8a857fcb</anchor>
      <arglist>(const CameraSet &amp;p, double tol=1e-9) const</arglist>
    </member>
    <member kind="function">
      <type>ZVector</type>
      <name>project2</name>
      <anchorfile>a02571.html</anchorfile>
      <anchor>afa9d5a849df31c5c564999fef769afef</anchor>
      <arglist>(const POINT &amp;point, boost::optional&lt; FBlocks &amp; &gt; Fs=boost::none, boost::optional&lt; Matrix &amp; &gt; E=boost::none) const</arglist>
    </member>
    <member kind="function">
      <type>Vector</type>
      <name>reprojectionError</name>
      <anchorfile>a02571.html</anchorfile>
      <anchor>a092e0b2611c27f1a144025d6d9a5e860</anchor>
      <arglist>(const POINT &amp;point, const ZVector &amp;measured, boost::optional&lt; FBlocks &amp; &gt; Fs=boost::none, boost::optional&lt; Matrix &amp; &gt; E=boost::none) const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static SymmetricBlockMatrix</type>
      <name>SchurComplement</name>
      <anchorfile>a02571.html</anchorfile>
      <anchor>aafc7e8babf561cdd10bcaa72e80e39bb</anchor>
      <arglist>(const FBlocks &amp;Fs, const Matrix &amp;E, const Eigen::Matrix&lt; double, N, N &gt; &amp;P, const Vector &amp;b)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>ComputePointCovariance</name>
      <anchorfile>a02571.html</anchorfile>
      <anchor>a18f19b403b2b8199926f1e36a26f92fd</anchor>
      <arglist>(Eigen::Matrix&lt; double, N, N &gt; &amp;P, const Matrix &amp;E, double lambda, bool diagonalDamping=false)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Matrix</type>
      <name>PointCov</name>
      <anchorfile>a02571.html</anchorfile>
      <anchor>a78b6feaeb08bb174f61caf9bb42c6839</anchor>
      <arglist>(const Matrix &amp;E, const double lambda=0.0, bool diagonalDamping=false)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static SymmetricBlockMatrix</type>
      <name>SchurComplement</name>
      <anchorfile>a02571.html</anchorfile>
      <anchor>a3c2a77c489168d59c4b4a465dd825774</anchor>
      <arglist>(const FBlocks &amp;Fblocks, const Matrix &amp;E, const Vector &amp;b, const double lambda=0.0, bool diagonalDamping=false)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>UpdateSchurComplement</name>
      <anchorfile>a02571.html</anchorfile>
      <anchor>a8c675ee84d5eea01fd1a1b14d5d21136</anchor>
      <arglist>(const FBlocks &amp;Fs, const Matrix &amp;E, const Eigen::Matrix&lt; double, N, N &gt; &amp;P, const Vector &amp;b, const KeyVector &amp;allKeys, const KeyVector &amp;keys, SymmetricBlockMatrix &amp;augmentedHessian)</arglist>
    </member>
    <member kind="typedef">
      <type>Eigen::Matrix&lt; double, ZDim, D &gt;</type>
      <name>MatrixZD</name>
      <anchorfile>a02571.html</anchorfile>
      <anchor>a75170e88dc50a4e566f94dde1c50c704</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>CAMERA::Measurement</type>
      <name>Z</name>
      <anchorfile>a02571.html</anchorfile>
      <anchor>a4a53cfa51d5724a716a1235407a8b44d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static Vector</type>
      <name>ErrorVector</name>
      <anchorfile>a02571.html</anchorfile>
      <anchor>a7e9f7b66f70c0b6ec45101496987244b</anchor>
      <arglist>(const ZVector &amp;predicted, const ZVector &amp;measured)</arglist>
    </member>
    <member kind="variable" protection="protected" static="yes">
      <type>static const int</type>
      <name>D</name>
      <anchorfile>a02571.html</anchorfile>
      <anchor>ab6d158288b56d69a8bf0cab48da204ef</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected" static="yes">
      <type>static const int</type>
      <name>ZDim</name>
      <anchorfile>a02571.html</anchorfile>
      <anchor>aa53c362cacc434f7885688c5d113ff57</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>boost::serialization::access</name>
      <anchorfile>a02571.html</anchorfile>
      <anchor>ac98d07dd8f7b70e16ccb9a01abf56b9c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::noiseModel::mEstimator::Cauchy</name>
    <filename>a03259.html</filename>
    <base>gtsam::noiseModel::mEstimator::Base</base>
    <member kind="friend">
      <type>friend class</type>
      <name>boost::serialization::access</name>
      <anchorfile>a03259.html</anchorfile>
      <anchor>ac98d07dd8f7b70e16ccb9a01abf56b9c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>gtsam::Rot3::CayleyChart</name>
    <filename>a02763.html</filename>
  </compound>
  <compound kind="struct">
    <name>gtsam::CGState</name>
    <filename>a03159.html</filename>
    <templarg>S</templarg>
    <templarg>V</templarg>
    <templarg>E</templarg>
    <member kind="variable">
      <type>int</type>
      <name>k</name>
      <anchorfile>a03159.html</anchorfile>
      <anchor>a57ba7e407a63bdc77e53e8ff76985ab3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>steepest</name>
      <anchorfile>a03159.html</anchorfile>
      <anchor>a0ec86902a54fdd09f879a398b60fb585</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>V</type>
      <name>d</name>
      <anchorfile>a03159.html</anchorfile>
      <anchor>af7b2174dd081a48416a7f4b3bdbeda66</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>threshold</name>
      <anchorfile>a03159.html</anchorfile>
      <anchor>a377969b240efda1b91aec68ac0fd1273</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>gtsam::Pose2::ChartAtOrigin</name>
    <filename>a02691.html</filename>
  </compound>
  <compound kind="struct">
    <name>gtsam::Pose3::ChartAtOrigin</name>
    <filename>a02715.html</filename>
  </compound>
  <compound kind="struct">
    <name>gtsam::Rot2::ChartAtOrigin</name>
    <filename>a02747.html</filename>
  </compound>
  <compound kind="struct">
    <name>gtsam::Rot3::ChartAtOrigin</name>
    <filename>a02767.html</filename>
  </compound>
  <compound kind="struct">
    <name>gtsam::SO3::ChartAtOrigin</name>
    <filename>a02799.html</filename>
  </compound>
  <compound kind="class">
    <name>gtsam::CheiralityException</name>
    <filename>a02547.html</filename>
    <base>ThreadsafeException&lt; CheiralityException &gt;</base>
  </compound>
  <compound kind="class">
    <name>gtsam::DecisionTree::Choice</name>
    <filename>a02355.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <base>gtsam::DecisionTree::Node</base>
    <member kind="function">
      <type></type>
      <name>Choice</name>
      <anchorfile>a02355.html</anchorfile>
      <anchor>add2490ac08d196f3faf201b3c1e75168</anchor>
      <arglist>(const L &amp;label, size_t count)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Choice</name>
      <anchorfile>a02355.html</anchorfile>
      <anchor>a83715de1ab3f83cd2c616a39837c2eff</anchor>
      <arglist>(const Choice &amp;f, const Choice &amp;g, const Binary &amp;op)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>push_back</name>
      <anchorfile>a02355.html</anchorfile>
      <anchor>a930c01116531f16ab33633b6092c1e9d</anchor>
      <arglist>(const NodePtr &amp;node)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>a02355.html</anchorfile>
      <anchor>af48974f5e58d5980e389622174e703b4</anchor>
      <arglist>(const std::string &amp;s) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>dot</name>
      <anchorfile>a02355.html</anchorfile>
      <anchor>aed796762dfe22446a965ebe74effab84</anchor>
      <arglist>(std::ostream &amp;os, bool showZero) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>sameLeaf</name>
      <anchorfile>a02355.html</anchorfile>
      <anchor>a80ab73f85837958fbd9f1903bb9f5c58</anchor>
      <arglist>(const Leaf &amp;q) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>sameLeaf</name>
      <anchorfile>a02355.html</anchorfile>
      <anchor>ab44734a058f21956dcb01b9f09d979ae</anchor>
      <arglist>(const Node &amp;q) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>equals</name>
      <anchorfile>a02355.html</anchorfile>
      <anchor>a02e015bce0e749adf60243db89526477</anchor>
      <arglist>(const Node &amp;q, double tol) const</arglist>
    </member>
    <member kind="function">
      <type>const Y &amp;</type>
      <name>operator()</name>
      <anchorfile>a02355.html</anchorfile>
      <anchor>a159426ee0a915820df360a4a8a7163bb</anchor>
      <arglist>(const Assignment&lt; L &gt; &amp;x) const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Choice</name>
      <anchorfile>a02355.html</anchorfile>
      <anchor>aec83227caa2e2aef7537f4e77d8598fc</anchor>
      <arglist>(const L &amp;label, const Choice &amp;f, const Unary &amp;op)</arglist>
    </member>
    <member kind="function">
      <type>NodePtr</type>
      <name>apply</name>
      <anchorfile>a02355.html</anchorfile>
      <anchor>ad287b58496b907f72abc5c1a6591a906</anchor>
      <arglist>(const Unary &amp;op) const</arglist>
    </member>
    <member kind="function">
      <type>NodePtr</type>
      <name>choose</name>
      <anchorfile>a02355.html</anchorfile>
      <anchor>af77ed753d8a6714e0d2a2eea48d7ecfa</anchor>
      <arglist>(const L &amp;label, size_t index) const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static NodePtr</type>
      <name>Unique</name>
      <anchorfile>a02355.html</anchorfile>
      <anchor>af96c231636b548bb4df941e5d172e02f</anchor>
      <arglist>(const ChoicePtr &amp;f)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::CholeskyFailed</name>
    <filename>a02223.html</filename>
    <base>ThreadsafeException&lt; CholeskyFailed &gt;</base>
  </compound>
  <compound kind="struct">
    <name>gtsam::SmartRangeFactor::Circle2</name>
    <filename>a04547.html</filename>
  </compound>
  <compound kind="struct">
    <name>gtsam::ClusterTree::Cluster</name>
    <filename>a02931.html</filename>
    <member kind="function">
      <type></type>
      <name>Cluster</name>
      <anchorfile>a02931.html</anchorfile>
      <anchor>a02ea1b9ff2d9ad0486b593d3f404ea6a</anchor>
      <arglist>(Key key, const CONTAINER &amp;factorsToAdd)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addFactors</name>
      <anchorfile>a02931.html</anchorfile>
      <anchor>af0baff380d5b7c23c15f6b615af3665b</anchor>
      <arglist>(Key key, const CONTAINER &amp;factorsToAdd)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addChild</name>
      <anchorfile>a02931.html</anchorfile>
      <anchor>ab1c98ac426f00fff853601e6b3c79345</anchor>
      <arglist>(const boost::shared_ptr&lt; Cluster &gt; &amp;cluster)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>print</name>
      <anchorfile>a02931.html</anchorfile>
      <anchor>a2c09076a9fd810570b76613e3f7f84ff</anchor>
      <arglist>(const std::string &amp;s=&quot;&quot;, const KeyFormatter &amp;keyFormatter=DefaultKeyFormatter) const</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; size_t &gt;</type>
      <name>nrFrontalsOfChildren</name>
      <anchorfile>a02931.html</anchorfile>
      <anchor>a757d8c52d104d96298a1060943a00c77</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>merge</name>
      <anchorfile>a02931.html</anchorfile>
      <anchor>a72af85e48bd9b8ea2ea36db0bad5253b</anchor>
      <arglist>(const boost::shared_ptr&lt; Cluster &gt; &amp;cluster)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>mergeChildren</name>
      <anchorfile>a02931.html</anchorfile>
      <anchor>a5a35c15894923c99a38d393657169be0</anchor>
      <arglist>(const std::vector&lt; bool &gt; &amp;merge)</arglist>
    </member>
    <member kind="variable">
      <type>Children</type>
      <name>children</name>
      <anchorfile>a02931.html</anchorfile>
      <anchor>a1eacaf4f309980a98aa00907c016acbd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Keys</type>
      <name>orderedFrontalKeys</name>
      <anchorfile>a02931.html</anchorfile>
      <anchor>a572bf7152d93d7cda0f2745f90e28411</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>FactorGraphType</type>
      <name>factors</name>
      <anchorfile>a02931.html</anchorfile>
      <anchor>a962cb87201fac628ab4a0717b0e9ae50</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::ClusterTree</name>
    <filename>a02927.html</filename>
    <templarg>GRAPH</templarg>
    <member kind="function" protection="protected">
      <type></type>
      <name>ClusterTree</name>
      <anchorfile>a02927.html</anchorfile>
      <anchor>acd26df0cc3df2af1c22e4bc2dc76e226</anchor>
      <arglist>(const This &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>a02927.html</anchorfile>
      <anchor>ab53322af9cd6bd65e3feb3fc7b3761f3</anchor>
      <arglist>(const std::string &amp;s=&quot;&quot;, const KeyFormatter &amp;keyFormatter=DefaultKeyFormatter) const</arglist>
    </member>
    <member kind="function">
      <type>const FastVector&lt; sharedNode &gt; &amp;</type>
      <name>roots</name>
      <anchorfile>a02927.html</anchorfile>
      <anchor>a3123de9bac5e1e7fa6f8c3ccc334fc3b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>This &amp;</type>
      <name>operator=</name>
      <anchorfile>a02927.html</anchorfile>
      <anchor>a1e7239faf89a9160221c3ae89bf15325</anchor>
      <arglist>(const This &amp;other)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GTSAM_CONCEPT_TESTABLE_TYPE</name>
      <anchorfile>a02927.html</anchorfile>
      <anchor>abfa21c0fe09b5a423fbdc590eea58647</anchor>
      <arglist>(FactorType)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ClusterTree</name>
      <anchorfile>a02927.html</anchorfile>
      <anchor>ad0a639242851874afb9e9e4a001da7ae</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="typedef">
      <type>GRAPH</type>
      <name>FactorGraphType</name>
      <anchorfile>a02927.html</anchorfile>
      <anchor>a918d9e3e91e7707059ee6360e15b0e19</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ClusterTree&lt; GRAPH &gt;</type>
      <name>This</name>
      <anchorfile>a02927.html</anchorfile>
      <anchor>a5bdaf6c5ff6f7a774e3dbc871e9effd0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; This &gt;</type>
      <name>shared_ptr</name>
      <anchorfile>a02927.html</anchorfile>
      <anchor>a5bf3295cef6338605ac53b6831be8d65</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GRAPH::FactorType</type>
      <name>FactorType</name>
      <anchorfile>a02927.html</anchorfile>
      <anchor>a6f94687be7774294808f190e9c5b10c6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; FactorType &gt;</type>
      <name>sharedFactor</name>
      <anchorfile>a02927.html</anchorfile>
      <anchor>ac1b883466c2402549b5bc2899fe6025d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; Cluster &gt;</type>
      <name>sharedCluster</name>
      <anchorfile>a02927.html</anchorfile>
      <anchor>ad5fb900835112e8c6b463e3cde07b730</anchor>
      <arglist></arglist>
    </member>
    <class kind="struct">gtsam::ClusterTree::Cluster</class>
  </compound>
  <compound kind="class">
    <name>ClusterTree&lt; DiscreteFactorGraph &gt;</name>
    <filename>a02927.html</filename>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>a02927.html</anchorfile>
      <anchor>ab53322af9cd6bd65e3feb3fc7b3761f3</anchor>
      <arglist>(const std::string &amp;s=&quot;&quot;, const KeyFormatter &amp;keyFormatter=DefaultKeyFormatter) const</arglist>
    </member>
    <member kind="function">
      <type>const FastVector&lt; sharedNode &gt; &amp;</type>
      <name>roots</name>
      <anchorfile>a02927.html</anchorfile>
      <anchor>a3123de9bac5e1e7fa6f8c3ccc334fc3b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>ClusterTree</name>
      <anchorfile>a02927.html</anchorfile>
      <anchor>acd26df0cc3df2af1c22e4bc2dc76e226</anchor>
      <arglist>(const This &amp;other)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>This &amp;</type>
      <name>operator=</name>
      <anchorfile>a02927.html</anchorfile>
      <anchor>a1e7239faf89a9160221c3ae89bf15325</anchor>
      <arglist>(const This &amp;other)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GTSAM_CONCEPT_TESTABLE_TYPE</name>
      <anchorfile>a02927.html</anchorfile>
      <anchor>abfa21c0fe09b5a423fbdc590eea58647</anchor>
      <arglist>(FactorType)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ClusterTree</name>
      <anchorfile>a02927.html</anchorfile>
      <anchor>ad0a639242851874afb9e9e4a001da7ae</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>a02927.html</anchorfile>
      <anchor>ab53322af9cd6bd65e3feb3fc7b3761f3</anchor>
      <arglist>(const std::string &amp;s=&quot;&quot;, const KeyFormatter &amp;keyFormatter=DefaultKeyFormatter) const</arglist>
    </member>
    <member kind="function">
      <type>const FastVector&lt; sharedNode &gt; &amp;</type>
      <name>roots</name>
      <anchorfile>a02927.html</anchorfile>
      <anchor>a3123de9bac5e1e7fa6f8c3ccc334fc3b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="typedef">
      <type>DiscreteFactorGraph</type>
      <name>FactorGraphType</name>
      <anchorfile>a02927.html</anchorfile>
      <anchor>a918d9e3e91e7707059ee6360e15b0e19</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ClusterTree&lt; DiscreteFactorGraph &gt;</type>
      <name>This</name>
      <anchorfile>a02927.html</anchorfile>
      <anchor>a5bdaf6c5ff6f7a774e3dbc871e9effd0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; This &gt;</type>
      <name>shared_ptr</name>
      <anchorfile>a02927.html</anchorfile>
      <anchor>a5bf3295cef6338605ac53b6831be8d65</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>DiscreteFactorGraph ::FactorType</type>
      <name>FactorType</name>
      <anchorfile>a02927.html</anchorfile>
      <anchor>a6f94687be7774294808f190e9c5b10c6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; FactorType &gt;</type>
      <name>sharedFactor</name>
      <anchorfile>a02927.html</anchorfile>
      <anchor>ac1b883466c2402549b5bc2899fe6025d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; Cluster &gt;</type>
      <name>sharedCluster</name>
      <anchorfile>a02927.html</anchorfile>
      <anchor>ad5fb900835112e8c6b463e3cde07b730</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>ClusterTree</name>
      <anchorfile>a02927.html</anchorfile>
      <anchor>acd26df0cc3df2af1c22e4bc2dc76e226</anchor>
      <arglist>(const This &amp;other)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>This &amp;</type>
      <name>operator=</name>
      <anchorfile>a02927.html</anchorfile>
      <anchor>a1e7239faf89a9160221c3ae89bf15325</anchor>
      <arglist>(const This &amp;other)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ClusterTree&lt; GaussianFactorGraph &gt;</name>
    <filename>a02927.html</filename>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>a02927.html</anchorfile>
      <anchor>ab53322af9cd6bd65e3feb3fc7b3761f3</anchor>
      <arglist>(const std::string &amp;s=&quot;&quot;, const KeyFormatter &amp;keyFormatter=DefaultKeyFormatter) const</arglist>
    </member>
    <member kind="function">
      <type>const FastVector&lt; sharedNode &gt; &amp;</type>
      <name>roots</name>
      <anchorfile>a02927.html</anchorfile>
      <anchor>a3123de9bac5e1e7fa6f8c3ccc334fc3b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>ClusterTree</name>
      <anchorfile>a02927.html</anchorfile>
      <anchor>acd26df0cc3df2af1c22e4bc2dc76e226</anchor>
      <arglist>(const This &amp;other)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>This &amp;</type>
      <name>operator=</name>
      <anchorfile>a02927.html</anchorfile>
      <anchor>a1e7239faf89a9160221c3ae89bf15325</anchor>
      <arglist>(const This &amp;other)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GTSAM_CONCEPT_TESTABLE_TYPE</name>
      <anchorfile>a02927.html</anchorfile>
      <anchor>abfa21c0fe09b5a423fbdc590eea58647</anchor>
      <arglist>(FactorType)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ClusterTree</name>
      <anchorfile>a02927.html</anchorfile>
      <anchor>ad0a639242851874afb9e9e4a001da7ae</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>a02927.html</anchorfile>
      <anchor>ab53322af9cd6bd65e3feb3fc7b3761f3</anchor>
      <arglist>(const std::string &amp;s=&quot;&quot;, const KeyFormatter &amp;keyFormatter=DefaultKeyFormatter) const</arglist>
    </member>
    <member kind="function">
      <type>const FastVector&lt; sharedNode &gt; &amp;</type>
      <name>roots</name>
      <anchorfile>a02927.html</anchorfile>
      <anchor>a3123de9bac5e1e7fa6f8c3ccc334fc3b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="typedef">
      <type>GaussianFactorGraph</type>
      <name>FactorGraphType</name>
      <anchorfile>a02927.html</anchorfile>
      <anchor>a918d9e3e91e7707059ee6360e15b0e19</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ClusterTree&lt; GaussianFactorGraph &gt;</type>
      <name>This</name>
      <anchorfile>a02927.html</anchorfile>
      <anchor>a5bdaf6c5ff6f7a774e3dbc871e9effd0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; This &gt;</type>
      <name>shared_ptr</name>
      <anchorfile>a02927.html</anchorfile>
      <anchor>a5bf3295cef6338605ac53b6831be8d65</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GaussianFactorGraph ::FactorType</type>
      <name>FactorType</name>
      <anchorfile>a02927.html</anchorfile>
      <anchor>a6f94687be7774294808f190e9c5b10c6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; FactorType &gt;</type>
      <name>sharedFactor</name>
      <anchorfile>a02927.html</anchorfile>
      <anchor>ac1b883466c2402549b5bc2899fe6025d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; Cluster &gt;</type>
      <name>sharedCluster</name>
      <anchorfile>a02927.html</anchorfile>
      <anchor>ad5fb900835112e8c6b463e3cde07b730</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>ClusterTree</name>
      <anchorfile>a02927.html</anchorfile>
      <anchor>acd26df0cc3df2af1c22e4bc2dc76e226</anchor>
      <arglist>(const This &amp;other)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>This &amp;</type>
      <name>operator=</name>
      <anchorfile>a02927.html</anchorfile>
      <anchor>a1e7239faf89a9160221c3ae89bf15325</anchor>
      <arglist>(const This &amp;other)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ClusterTree&lt; NonlinearFactorGraph &gt;</name>
    <filename>a02927.html</filename>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>a02927.html</anchorfile>
      <anchor>ab53322af9cd6bd65e3feb3fc7b3761f3</anchor>
      <arglist>(const std::string &amp;s=&quot;&quot;, const KeyFormatter &amp;keyFormatter=DefaultKeyFormatter) const</arglist>
    </member>
    <member kind="function">
      <type>const FastVector&lt; sharedNode &gt; &amp;</type>
      <name>roots</name>
      <anchorfile>a02927.html</anchorfile>
      <anchor>a3123de9bac5e1e7fa6f8c3ccc334fc3b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>ClusterTree</name>
      <anchorfile>a02927.html</anchorfile>
      <anchor>acd26df0cc3df2af1c22e4bc2dc76e226</anchor>
      <arglist>(const This &amp;other)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>This &amp;</type>
      <name>operator=</name>
      <anchorfile>a02927.html</anchorfile>
      <anchor>a1e7239faf89a9160221c3ae89bf15325</anchor>
      <arglist>(const This &amp;other)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GTSAM_CONCEPT_TESTABLE_TYPE</name>
      <anchorfile>a02927.html</anchorfile>
      <anchor>abfa21c0fe09b5a423fbdc590eea58647</anchor>
      <arglist>(FactorType)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ClusterTree</name>
      <anchorfile>a02927.html</anchorfile>
      <anchor>ad0a639242851874afb9e9e4a001da7ae</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>a02927.html</anchorfile>
      <anchor>ab53322af9cd6bd65e3feb3fc7b3761f3</anchor>
      <arglist>(const std::string &amp;s=&quot;&quot;, const KeyFormatter &amp;keyFormatter=DefaultKeyFormatter) const</arglist>
    </member>
    <member kind="function">
      <type>const FastVector&lt; sharedNode &gt; &amp;</type>
      <name>roots</name>
      <anchorfile>a02927.html</anchorfile>
      <anchor>a3123de9bac5e1e7fa6f8c3ccc334fc3b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="typedef">
      <type>NonlinearFactorGraph</type>
      <name>FactorGraphType</name>
      <anchorfile>a02927.html</anchorfile>
      <anchor>a918d9e3e91e7707059ee6360e15b0e19</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ClusterTree&lt; NonlinearFactorGraph &gt;</type>
      <name>This</name>
      <anchorfile>a02927.html</anchorfile>
      <anchor>a5bdaf6c5ff6f7a774e3dbc871e9effd0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; This &gt;</type>
      <name>shared_ptr</name>
      <anchorfile>a02927.html</anchorfile>
      <anchor>a5bf3295cef6338605ac53b6831be8d65</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>NonlinearFactorGraph ::FactorType</type>
      <name>FactorType</name>
      <anchorfile>a02927.html</anchorfile>
      <anchor>a6f94687be7774294808f190e9c5b10c6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; FactorType &gt;</type>
      <name>sharedFactor</name>
      <anchorfile>a02927.html</anchorfile>
      <anchor>ac1b883466c2402549b5bc2899fe6025d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; Cluster &gt;</type>
      <name>sharedCluster</name>
      <anchorfile>a02927.html</anchorfile>
      <anchor>ad5fb900835112e8c6b463e3cde07b730</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>ClusterTree</name>
      <anchorfile>a02927.html</anchorfile>
      <anchor>acd26df0cc3df2af1c22e4bc2dc76e226</anchor>
      <arglist>(const This &amp;other)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>This &amp;</type>
      <name>operator=</name>
      <anchorfile>a02927.html</anchorfile>
      <anchor>a1e7239faf89a9160221c3ae89bf15325</anchor>
      <arglist>(const This &amp;other)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ClusterTree&lt; SymbolicFactorGraph &gt;</name>
    <filename>a02927.html</filename>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>a02927.html</anchorfile>
      <anchor>ab53322af9cd6bd65e3feb3fc7b3761f3</anchor>
      <arglist>(const std::string &amp;s=&quot;&quot;, const KeyFormatter &amp;keyFormatter=DefaultKeyFormatter) const</arglist>
    </member>
    <member kind="function">
      <type>const FastVector&lt; sharedNode &gt; &amp;</type>
      <name>roots</name>
      <anchorfile>a02927.html</anchorfile>
      <anchor>a3123de9bac5e1e7fa6f8c3ccc334fc3b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>ClusterTree</name>
      <anchorfile>a02927.html</anchorfile>
      <anchor>acd26df0cc3df2af1c22e4bc2dc76e226</anchor>
      <arglist>(const This &amp;other)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>This &amp;</type>
      <name>operator=</name>
      <anchorfile>a02927.html</anchorfile>
      <anchor>a1e7239faf89a9160221c3ae89bf15325</anchor>
      <arglist>(const This &amp;other)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GTSAM_CONCEPT_TESTABLE_TYPE</name>
      <anchorfile>a02927.html</anchorfile>
      <anchor>abfa21c0fe09b5a423fbdc590eea58647</anchor>
      <arglist>(FactorType)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ClusterTree</name>
      <anchorfile>a02927.html</anchorfile>
      <anchor>ad0a639242851874afb9e9e4a001da7ae</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>a02927.html</anchorfile>
      <anchor>ab53322af9cd6bd65e3feb3fc7b3761f3</anchor>
      <arglist>(const std::string &amp;s=&quot;&quot;, const KeyFormatter &amp;keyFormatter=DefaultKeyFormatter) const</arglist>
    </member>
    <member kind="function">
      <type>const FastVector&lt; sharedNode &gt; &amp;</type>
      <name>roots</name>
      <anchorfile>a02927.html</anchorfile>
      <anchor>a3123de9bac5e1e7fa6f8c3ccc334fc3b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="typedef">
      <type>SymbolicFactorGraph</type>
      <name>FactorGraphType</name>
      <anchorfile>a02927.html</anchorfile>
      <anchor>a918d9e3e91e7707059ee6360e15b0e19</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ClusterTree&lt; SymbolicFactorGraph &gt;</type>
      <name>This</name>
      <anchorfile>a02927.html</anchorfile>
      <anchor>a5bdaf6c5ff6f7a774e3dbc871e9effd0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; This &gt;</type>
      <name>shared_ptr</name>
      <anchorfile>a02927.html</anchorfile>
      <anchor>a5bf3295cef6338605ac53b6831be8d65</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SymbolicFactorGraph ::FactorType</type>
      <name>FactorType</name>
      <anchorfile>a02927.html</anchorfile>
      <anchor>a6f94687be7774294808f190e9c5b10c6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; FactorType &gt;</type>
      <name>sharedFactor</name>
      <anchorfile>a02927.html</anchorfile>
      <anchor>ac1b883466c2402549b5bc2899fe6025d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; Cluster &gt;</type>
      <name>sharedCluster</name>
      <anchorfile>a02927.html</anchorfile>
      <anchor>ad5fb900835112e8c6b463e3cde07b730</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>ClusterTree</name>
      <anchorfile>a02927.html</anchorfile>
      <anchor>acd26df0cc3df2af1c22e4bc2dc76e226</anchor>
      <arglist>(const This &amp;other)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>This &amp;</type>
      <name>operator=</name>
      <anchorfile>a02927.html</anchorfile>
      <anchor>a1e7239faf89a9160221c3ae89bf15325</anchor>
      <arglist>(const This &amp;other)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::CombinedImuFactor</name>
    <filename>a03443.html</filename>
    <base>NoiseModelFactor6&lt; Pose3, Vector3, Pose3, Vector3, imuBias::ConstantBias, imuBias::ConstantBias &gt;</base>
    <member kind="function">
      <type></type>
      <name>CombinedImuFactor</name>
      <anchorfile>a03443.html</anchorfile>
      <anchor>a1136323705e34e0528ce903a4291928b</anchor>
      <arglist>(Key pose_i, Key vel_i, Key pose_j, Key vel_j, Key bias_i, Key bias_j, const PreintegratedCombinedMeasurements &amp;preintegratedMeasurements)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual gtsam::NonlinearFactor::shared_ptr</type>
      <name>clone</name>
      <anchorfile>a03443.html</anchorfile>
      <anchor>a0d53050c75ec4e7ad51cd63d3af0189c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>print</name>
      <anchorfile>a03443.html</anchorfile>
      <anchor>a9cb1e8a7ead92942181b3268309afda6</anchor>
      <arglist>(const std::string &amp;s, const KeyFormatter &amp;keyFormatter=DefaultKeyFormatter) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>equals</name>
      <anchorfile>a03443.html</anchorfile>
      <anchor>abd12e1f885ac55dbf1d4dc20211ba4f3</anchor>
      <arglist>(const NonlinearFactor &amp;expected, double tol=1e-9) const</arglist>
    </member>
    <member kind="function">
      <type>const PreintegratedCombinedMeasurements &amp;</type>
      <name>preintegratedMeasurements</name>
      <anchorfile>a03443.html</anchorfile>
      <anchor>a9cc4de7060e6084ffbb7462816d2b892</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Vector</type>
      <name>evaluateError</name>
      <anchorfile>a03443.html</anchorfile>
      <anchor>a82c44584b0008ac3cd5c81a63fb9ee37</anchor>
      <arglist>(const Pose3 &amp;pose_i, const Vector3 &amp;vel_i, const Pose3 &amp;pose_j, const Vector3 &amp;vel_j, const imuBias::ConstantBias &amp;bias_i, const imuBias::ConstantBias &amp;bias_j, boost::optional&lt; Matrix &amp; &gt; H1=boost::none, boost::optional&lt; Matrix &amp; &gt; H2=boost::none, boost::optional&lt; Matrix &amp; &gt; H3=boost::none, boost::optional&lt; Matrix &amp; &gt; H4=boost::none, boost::optional&lt; Matrix &amp; &gt; H5=boost::none, boost::optional&lt; Matrix &amp; &gt; H6=boost::none) const</arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; CombinedImuFactor &gt;</type>
      <name>shared_ptr</name>
      <anchorfile>a03443.html</anchorfile>
      <anchor>a09c86d133977c6af9b6e1734b15539ea</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>boost::serialization::access</name>
      <anchorfile>a03443.html</anchorfile>
      <anchor>ac98d07dd8f7b70e16ccb9a01abf56b9c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::compose_key_visitor</name>
    <filename>a02971.html</filename>
    <templarg>V</templarg>
    <templarg>POSE</templarg>
    <templarg>KEY</templarg>
  </compound>
  <compound kind="class">
    <name>gtsam::ConcurrentBatchFilter</name>
    <filename>a04347.html</filename>
    <base protection="private">gtsam::ConcurrentFilter</base>
    <base>gtsam::ConcurrentFilter</base>
    <member kind="function">
      <type></type>
      <name>ConcurrentBatchFilter</name>
      <anchorfile>a04347.html</anchorfile>
      <anchor>ac00b884e43f6056aa3d60795b0347757</anchor>
      <arglist>(const LevenbergMarquardtParams &amp;parameters=LevenbergMarquardtParams())</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ConcurrentBatchFilter</name>
      <anchorfile>a04347.html</anchorfile>
      <anchor>a98326855509fcb655bd065032f2fbf34</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>print</name>
      <anchorfile>a04347.html</anchorfile>
      <anchor>a51b722a08b1121ebe427e92b3c9ed5e1</anchor>
      <arglist>(const std::string &amp;s=&quot;Concurrent Batch Filter:\n&quot;, const KeyFormatter &amp;keyFormatter=DefaultKeyFormatter) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>equals</name>
      <anchorfile>a04347.html</anchorfile>
      <anchor>a246d4a5b7aa5f945d847e943b4aec95b</anchor>
      <arglist>(const ConcurrentFilter &amp;rhs, double tol=1e-9) const</arglist>
    </member>
    <member kind="function">
      <type>const NonlinearFactorGraph &amp;</type>
      <name>getFactors</name>
      <anchorfile>a04347.html</anchorfile>
      <anchor>ae9f6dbb70b750341ac971ae4ad3ee975</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Values &amp;</type>
      <name>getLinearizationPoint</name>
      <anchorfile>a04347.html</anchorfile>
      <anchor>a7d2bec9af1ecbd8eb9f7f53dc2974a8b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Ordering &amp;</type>
      <name>getOrdering</name>
      <anchorfile>a04347.html</anchorfile>
      <anchor>adfccfa735462595ece6d65d978823a99</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const VectorValues &amp;</type>
      <name>getDelta</name>
      <anchorfile>a04347.html</anchorfile>
      <anchor>ada73b8203b78287cf751aa47420165b8</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Values</type>
      <name>calculateEstimate</name>
      <anchorfile>a04347.html</anchorfile>
      <anchor>ab513563d30d9a0f179400f1398eb2a25</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>VALUE</type>
      <name>calculateEstimate</name>
      <anchorfile>a04347.html</anchorfile>
      <anchor>a05b7023f15930d29766dc5caf6a58d13</anchor>
      <arglist>(Key key) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Result</type>
      <name>update</name>
      <anchorfile>a04347.html</anchorfile>
      <anchor>a41ace48b13b8858c654304c37cc6e516</anchor>
      <arglist>(const NonlinearFactorGraph &amp;newFactors=NonlinearFactorGraph(), const Values &amp;newTheta=Values(), const boost::optional&lt; FastList&lt; Key &gt; &gt; &amp;keysToMove=boost::none, const boost::optional&lt; std::vector&lt; size_t &gt; &gt; &amp;removeFactorIndices=boost::none)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>presync</name>
      <anchorfile>a04347.html</anchorfile>
      <anchor>adf94a824705873bc2eef9fba9767c893</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>getSummarizedFactors</name>
      <anchorfile>a04347.html</anchorfile>
      <anchor>a6c18b8b38d1809d605dcec60c30c1351</anchor>
      <arglist>(NonlinearFactorGraph &amp;filterSummarization, Values &amp;filterSummarizationValues)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>getSmootherFactors</name>
      <anchorfile>a04347.html</anchorfile>
      <anchor>a62c0d9066038176978ac4e0f64d67996</anchor>
      <arglist>(NonlinearFactorGraph &amp;smootherFactors, Values &amp;smootherValues)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>synchronize</name>
      <anchorfile>a04347.html</anchorfile>
      <anchor>ad8938d4f2d6c1334a00f66fdef8872bb</anchor>
      <arglist>(const NonlinearFactorGraph &amp;smootherSummarization, const Values &amp;smootherSummarizationValues)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>postsync</name>
      <anchorfile>a04347.html</anchorfile>
      <anchor>a57129b73a357c7477c1bf3bfffa56f23</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="typedef">
      <type>ConcurrentFilter</type>
      <name>Base</name>
      <anchorfile>a04347.html</anchorfile>
      <anchor>a555ff0266ebb6e89fac67338f5e65b55</anchor>
      <arglist></arglist>
    </member>
    <class kind="struct">gtsam::ConcurrentBatchFilter::Result</class>
    <member kind="variable" protection="protected">
      <type>LevenbergMarquardtParams</type>
      <name>parameters_</name>
      <anchorfile>a04347.html</anchorfile>
      <anchor>a4d42180687ee59c48c165e442ac214cd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>NonlinearFactorGraph</type>
      <name>factors_</name>
      <anchorfile>a04347.html</anchorfile>
      <anchor>a4273349b12ff10a45522ac2da17bd3ac</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Values</type>
      <name>theta_</name>
      <anchorfile>a04347.html</anchorfile>
      <anchor>a4f21a67939c54f3189a1eef9ff0f5111</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Ordering</type>
      <name>ordering_</name>
      <anchorfile>a04347.html</anchorfile>
      <anchor>ac7e5b9c160c1d47df396ac38138bb04b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>VectorValues</type>
      <name>delta_</name>
      <anchorfile>a04347.html</anchorfile>
      <anchor>a85eb5d629192894fe43863cf8e4d54aa</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::queue&lt; size_t &gt;</type>
      <name>availableSlots_</name>
      <anchorfile>a04347.html</anchorfile>
      <anchor>ab5f2e85ff3ef8399a98f96bd8cd22e48</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Values</type>
      <name>separatorValues_</name>
      <anchorfile>a04347.html</anchorfile>
      <anchor>add88e84357fdd32deaa2c68930ca9218</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; size_t &gt;</type>
      <name>separatorSummarizationSlots_</name>
      <anchorfile>a04347.html</anchorfile>
      <anchor>a1ad3fa2f2a437d517c5d57828295eaa0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>NonlinearFactorGraph</type>
      <name>smootherSummarization_</name>
      <anchorfile>a04347.html</anchorfile>
      <anchor>a55b54da7c93cb8f318ebf0b43e65dfa5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>NonlinearFactorGraph</type>
      <name>smootherShortcut_</name>
      <anchorfile>a04347.html</anchorfile>
      <anchor>ad8d78a2867f22265ae7baebad0c8c7fc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>NonlinearFactorGraph</type>
      <name>filterSummarization_</name>
      <anchorfile>a04347.html</anchorfile>
      <anchor>a51865e56b8ea3e55d6783f74d29c0524</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>NonlinearFactorGraph</type>
      <name>smootherFactors_</name>
      <anchorfile>a04347.html</anchorfile>
      <anchor>ad15982b0fe42808ba2186adc3ed546eb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Values</type>
      <name>smootherValues_</name>
      <anchorfile>a04347.html</anchorfile>
      <anchor>a5c37053575823c0b1ca1dc5a0fc3e2ce</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::ConcurrentBatchFilterResult</name>
    <filename>a04703.html</filename>
  </compound>
  <compound kind="class">
    <name>gtsam::ConcurrentBatchSmoother</name>
    <filename>a04359.html</filename>
    <base protection="private">gtsam::ConcurrentSmoother</base>
    <base>gtsam::ConcurrentSmoother</base>
    <member kind="function">
      <type></type>
      <name>ConcurrentBatchSmoother</name>
      <anchorfile>a04359.html</anchorfile>
      <anchor>ab48b7aa8c7d00c14f18f8c53816e2070</anchor>
      <arglist>(const LevenbergMarquardtParams &amp;parameters=LevenbergMarquardtParams())</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ConcurrentBatchSmoother</name>
      <anchorfile>a04359.html</anchorfile>
      <anchor>a47b40610b5d5a5553af1f2320b5425e4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>print</name>
      <anchorfile>a04359.html</anchorfile>
      <anchor>a1094be6d058001343783123c63467ac3</anchor>
      <arglist>(const std::string &amp;s=&quot;Concurrent Batch Smoother:\n&quot;, const KeyFormatter &amp;keyFormatter=DefaultKeyFormatter) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>equals</name>
      <anchorfile>a04359.html</anchorfile>
      <anchor>a072be8b07f0d10a9d87a355761115365</anchor>
      <arglist>(const ConcurrentSmoother &amp;rhs, double tol=1e-9) const</arglist>
    </member>
    <member kind="function">
      <type>const NonlinearFactorGraph &amp;</type>
      <name>getFactors</name>
      <anchorfile>a04359.html</anchorfile>
      <anchor>aa1ae98c11ef4724be4d925693c0abfe6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Values &amp;</type>
      <name>getLinearizationPoint</name>
      <anchorfile>a04359.html</anchorfile>
      <anchor>a8be34d1fabee6fa99996a290c7882759</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Ordering &amp;</type>
      <name>getOrdering</name>
      <anchorfile>a04359.html</anchorfile>
      <anchor>a89e6bac5272fa52fb8230c0294337507</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const VectorValues &amp;</type>
      <name>getDelta</name>
      <anchorfile>a04359.html</anchorfile>
      <anchor>a731b8790de0d9356faa9e7bef99a61f8</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Values</type>
      <name>calculateEstimate</name>
      <anchorfile>a04359.html</anchorfile>
      <anchor>a1650991c94586370b743ff4d0c44269d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>VALUE</type>
      <name>calculateEstimate</name>
      <anchorfile>a04359.html</anchorfile>
      <anchor>a4e554caaecbc8b9a6f113daa7cd55f72</anchor>
      <arglist>(Key key) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Result</type>
      <name>update</name>
      <anchorfile>a04359.html</anchorfile>
      <anchor>a64c2a3d5932e3de30f7a1ee1b18f9b9e</anchor>
      <arglist>(const NonlinearFactorGraph &amp;newFactors=NonlinearFactorGraph(), const Values &amp;newTheta=Values(), const boost::optional&lt; std::vector&lt; size_t &gt; &gt; &amp;removeFactorIndices=boost::none)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>presync</name>
      <anchorfile>a04359.html</anchorfile>
      <anchor>a3224d634e420787fae8be20c24678c91</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>getSummarizedFactors</name>
      <anchorfile>a04359.html</anchorfile>
      <anchor>a8831274517dba6977c2daa91993a15ef</anchor>
      <arglist>(NonlinearFactorGraph &amp;summarizedFactors, Values &amp;separatorValues)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>synchronize</name>
      <anchorfile>a04359.html</anchorfile>
      <anchor>a6cb076a3b78b97b34a39a78a6bd44782</anchor>
      <arglist>(const NonlinearFactorGraph &amp;smootherFactors, const Values &amp;smootherValues, const NonlinearFactorGraph &amp;summarizedFactors, const Values &amp;separatorValues)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>postsync</name>
      <anchorfile>a04359.html</anchorfile>
      <anchor>a198bc2b6ac631214187f2e8022aea681</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="typedef">
      <type>ConcurrentSmoother</type>
      <name>Base</name>
      <anchorfile>a04359.html</anchorfile>
      <anchor>a1b278d97e6a389b1ccb9824412b8b505</anchor>
      <arglist></arglist>
    </member>
    <class kind="struct">gtsam::ConcurrentBatchSmoother::Result</class>
    <member kind="variable" protection="protected">
      <type>LevenbergMarquardtParams</type>
      <name>parameters_</name>
      <anchorfile>a04359.html</anchorfile>
      <anchor>a91b21c41bacaa6de81c4db51daedaaa3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>NonlinearFactorGraph</type>
      <name>factors_</name>
      <anchorfile>a04359.html</anchorfile>
      <anchor>a04ddf3a86914685a6e5074d097032fb9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Values</type>
      <name>theta_</name>
      <anchorfile>a04359.html</anchorfile>
      <anchor>a6d98ce6cf1c5e3c7941c5baab22831d9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Ordering</type>
      <name>ordering_</name>
      <anchorfile>a04359.html</anchorfile>
      <anchor>ae8efc5a8159d12e14018ef5c2a8b4f94</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>VectorValues</type>
      <name>delta_</name>
      <anchorfile>a04359.html</anchorfile>
      <anchor>a36f85722882bab872b726cf6d9f6a2db</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>VariableIndex</type>
      <name>variableIndex_</name>
      <anchorfile>a04359.html</anchorfile>
      <anchor>ae08ea6fa103136f599cc71b39688ffb9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::queue&lt; size_t &gt;</type>
      <name>availableSlots_</name>
      <anchorfile>a04359.html</anchorfile>
      <anchor>a7a83711219fdbb734a8efb007a8dc8ae</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Values</type>
      <name>separatorValues_</name>
      <anchorfile>a04359.html</anchorfile>
      <anchor>acae62d02efddc751676d2fc2118ab0c7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; size_t &gt;</type>
      <name>filterSummarizationSlots_</name>
      <anchorfile>a04359.html</anchorfile>
      <anchor>a5aee85c6cda5457536015358b0890539</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>NonlinearFactorGraph</type>
      <name>smootherSummarization_</name>
      <anchorfile>a04359.html</anchorfile>
      <anchor>a7badf6494068a6318bc555dfe1a91917</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::ConcurrentBatchSmootherResult</name>
    <filename>a04707.html</filename>
  </compound>
  <compound kind="class">
    <name>gtsam::ConcurrentFilter</name>
    <filename>a04371.html</filename>
    <member kind="function">
      <type></type>
      <name>ConcurrentFilter</name>
      <anchorfile>a04371.html</anchorfile>
      <anchor>a6754bd467ed39025506d93693cd3cfd7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ConcurrentFilter</name>
      <anchorfile>a04371.html</anchorfile>
      <anchor>a129ac443a8a3f6b5c8ef6669316bfd15</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>print</name>
      <anchorfile>a04371.html</anchorfile>
      <anchor>a5565637f908944ac6fa373b285703e27</anchor>
      <arglist>(const std::string &amp;s=&quot;Concurrent Filter:\n&quot;, const KeyFormatter &amp;keyFormatter=DefaultKeyFormatter) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>equals</name>
      <anchorfile>a04371.html</anchorfile>
      <anchor>a5296012ce0b7457387709219b68f08a2</anchor>
      <arglist>(const ConcurrentFilter &amp;rhs, double tol=1e-9) const =0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>presync</name>
      <anchorfile>a04371.html</anchorfile>
      <anchor>ad64cdf8b2bfa6cc3b772a3775977f7e8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>getSummarizedFactors</name>
      <anchorfile>a04371.html</anchorfile>
      <anchor>a43e56abfa07eb271b17d761036cb37e1</anchor>
      <arglist>(NonlinearFactorGraph &amp;summarizedFactors, Values &amp;separatorValues)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>getSmootherFactors</name>
      <anchorfile>a04371.html</anchorfile>
      <anchor>a0ff193aa48ca1ff52e81c74e44e30e20</anchor>
      <arglist>(NonlinearFactorGraph &amp;smootherFactors, Values &amp;smootherValues)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>synchronize</name>
      <anchorfile>a04371.html</anchorfile>
      <anchor>a1c53190513f8eda576895f0c0839fb28</anchor>
      <arglist>(const NonlinearFactorGraph &amp;summarizedFactors, const Values &amp;separatorValues)=0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>postsync</name>
      <anchorfile>a04371.html</anchorfile>
      <anchor>ac012d1792e823b6b7c677ea64965c870</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::ConcurrentIncrementalFilter</name>
    <filename>a04379.html</filename>
    <base virtualness="virtual">gtsam::ConcurrentFilter</base>
    <member kind="function">
      <type></type>
      <name>ConcurrentIncrementalFilter</name>
      <anchorfile>a04379.html</anchorfile>
      <anchor>a0f95562e7c46b316c10b28a6eba443de</anchor>
      <arglist>(const ISAM2Params &amp;parameters=ISAM2Params())</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ConcurrentIncrementalFilter</name>
      <anchorfile>a04379.html</anchorfile>
      <anchor>a041f9c5156dbb4cb6d489df9b8eae741</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>print</name>
      <anchorfile>a04379.html</anchorfile>
      <anchor>a27e832f3b05de5235526861b5693f505</anchor>
      <arglist>(const std::string &amp;s=&quot;Concurrent Incremental Filter:\n&quot;, const KeyFormatter &amp;keyFormatter=DefaultKeyFormatter) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>equals</name>
      <anchorfile>a04379.html</anchorfile>
      <anchor>a19c528a673d47e58ced2a6f58772d43f</anchor>
      <arglist>(const ConcurrentFilter &amp;rhs, double tol=1e-9) const</arglist>
    </member>
    <member kind="function">
      <type>const NonlinearFactorGraph &amp;</type>
      <name>getFactors</name>
      <anchorfile>a04379.html</anchorfile>
      <anchor>a1a60a2792d2845a3ebdbbe821f4b837c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const ISAM2 &amp;</type>
      <name>getISAM2</name>
      <anchorfile>a04379.html</anchorfile>
      <anchor>a4f61aa794dca66d96c433080eb3dc697</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Values &amp;</type>
      <name>getLinearizationPoint</name>
      <anchorfile>a04379.html</anchorfile>
      <anchor>a11493a2a1a85339bca7e54adb3ab2b39</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const VectorValues &amp;</type>
      <name>getDelta</name>
      <anchorfile>a04379.html</anchorfile>
      <anchor>aa0a9c1462cbeebc8d399cfcc12576e98</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Values</type>
      <name>calculateEstimate</name>
      <anchorfile>a04379.html</anchorfile>
      <anchor>aede1b5fdf576222b433f3fcaf789d4ae</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>VALUE</type>
      <name>calculateEstimate</name>
      <anchorfile>a04379.html</anchorfile>
      <anchor>a1fded86688f472851a02679d57d178ee</anchor>
      <arglist>(Key key) const</arglist>
    </member>
    <member kind="function">
      <type>Result</type>
      <name>update</name>
      <anchorfile>a04379.html</anchorfile>
      <anchor>aef5e60d7807bd136cb18e8fc0eb0716b</anchor>
      <arglist>(const NonlinearFactorGraph &amp;newFactors=NonlinearFactorGraph(), const Values &amp;newTheta=Values(), const boost::optional&lt; FastList&lt; Key &gt; &gt; &amp;keysToMove=boost::none, const boost::optional&lt; FactorIndices &gt; &amp;removeFactorIndices=boost::none)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>presync</name>
      <anchorfile>a04379.html</anchorfile>
      <anchor>ae2beee2559cc2d72560df5a9599e2c2f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>getSummarizedFactors</name>
      <anchorfile>a04379.html</anchorfile>
      <anchor>a5724ec91d81d965dfa8c2ec26cc09412</anchor>
      <arglist>(NonlinearFactorGraph &amp;filterSummarization, Values &amp;filterSummarizationValues)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>getSmootherFactors</name>
      <anchorfile>a04379.html</anchorfile>
      <anchor>a4695811c77ca4c837127838b9b98a739</anchor>
      <arglist>(NonlinearFactorGraph &amp;smootherFactors, Values &amp;smootherValues)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>synchronize</name>
      <anchorfile>a04379.html</anchorfile>
      <anchor>a12edb6b17ea374190b463646c4f68927</anchor>
      <arglist>(const NonlinearFactorGraph &amp;smootherSummarization, const Values &amp;smootherSummarizationValues)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>postsync</name>
      <anchorfile>a04379.html</anchorfile>
      <anchor>ae0f5b8175b2d0dff5aae8617296be70f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="typedef">
      <type>ConcurrentFilter</type>
      <name>Base</name>
      <anchorfile>a04379.html</anchorfile>
      <anchor>aa6d88494b2afceb16f1b05ec9ef1b02b</anchor>
      <arglist></arglist>
    </member>
    <class kind="struct">gtsam::ConcurrentIncrementalFilter::Result</class>
    <member kind="variable" protection="protected">
      <type>ISAM2</type>
      <name>isam2_</name>
      <anchorfile>a04379.html</anchorfile>
      <anchor>ac769a4f1259dad73882c7acc6357a7ce</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>NonlinearFactorGraph</type>
      <name>previousSmootherSummarization_</name>
      <anchorfile>a04379.html</anchorfile>
      <anchor>a5b7a4c5d2f2ae1f2a0d28d08622434f8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>FactorIndices</type>
      <name>currentSmootherSummarizationSlots_</name>
      <anchorfile>a04379.html</anchorfile>
      <anchor>a99e40ad8d77b02624ed69e8ca501f2e9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>NonlinearFactorGraph</type>
      <name>smootherShortcut_</name>
      <anchorfile>a04379.html</anchorfile>
      <anchor>aa1f1037db6fb002c549dbe96f966e54e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>NonlinearFactorGraph</type>
      <name>smootherFactors_</name>
      <anchorfile>a04379.html</anchorfile>
      <anchor>a075382a8292a9220a2b1182e24557ffd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Values</type>
      <name>smootherValues_</name>
      <anchorfile>a04379.html</anchorfile>
      <anchor>a8435385a9faff9235f95a469226d0477</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::ConcurrentIncrementalSmoother</name>
    <filename>a04391.html</filename>
    <base virtualness="virtual">gtsam::ConcurrentSmoother</base>
    <member kind="function">
      <type></type>
      <name>ConcurrentIncrementalSmoother</name>
      <anchorfile>a04391.html</anchorfile>
      <anchor>a0e7e74fd31cb4894613ced117286b686</anchor>
      <arglist>(const ISAM2Params &amp;parameters=ISAM2Params())</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ConcurrentIncrementalSmoother</name>
      <anchorfile>a04391.html</anchorfile>
      <anchor>a3bf85ca417d2ed8161b090543849e981</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>print</name>
      <anchorfile>a04391.html</anchorfile>
      <anchor>a50c9ae19de2d0ca4fe69b1b5157c4056</anchor>
      <arglist>(const std::string &amp;s=&quot;Concurrent Incremental Smoother:\n&quot;, const KeyFormatter &amp;keyFormatter=DefaultKeyFormatter) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>equals</name>
      <anchorfile>a04391.html</anchorfile>
      <anchor>af61a1e0f5abf6da2bb19c874d9a4634d</anchor>
      <arglist>(const ConcurrentSmoother &amp;rhs, double tol=1e-9) const</arglist>
    </member>
    <member kind="function">
      <type>const NonlinearFactorGraph &amp;</type>
      <name>getFactors</name>
      <anchorfile>a04391.html</anchorfile>
      <anchor>aa2abccb559e587a12328aea7973517bf</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Values &amp;</type>
      <name>getLinearizationPoint</name>
      <anchorfile>a04391.html</anchorfile>
      <anchor>ad40074f4a818efb4343d919c2d35450b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const VectorValues &amp;</type>
      <name>getDelta</name>
      <anchorfile>a04391.html</anchorfile>
      <anchor>a24835ebf84282ee8901d7b7921fa60e5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Values</type>
      <name>calculateEstimate</name>
      <anchorfile>a04391.html</anchorfile>
      <anchor>a150cfc848df3b4110a115100e367b6ca</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>VALUE</type>
      <name>calculateEstimate</name>
      <anchorfile>a04391.html</anchorfile>
      <anchor>ab5dda171348a5b4ce96bbe732900743d</anchor>
      <arglist>(Key key) const</arglist>
    </member>
    <member kind="function">
      <type>Result</type>
      <name>update</name>
      <anchorfile>a04391.html</anchorfile>
      <anchor>af14b3a18825de237ac37f48ec01273ed</anchor>
      <arglist>(const NonlinearFactorGraph &amp;newFactors=NonlinearFactorGraph(), const Values &amp;newTheta=Values(), const boost::optional&lt; FactorIndices &gt; &amp;removeFactorIndices=boost::none)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>presync</name>
      <anchorfile>a04391.html</anchorfile>
      <anchor>a60a096400b17d1a683f9a00086837ced</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>getSummarizedFactors</name>
      <anchorfile>a04391.html</anchorfile>
      <anchor>aef2f262bc815705a0ec867d2c73aeffe</anchor>
      <arglist>(NonlinearFactorGraph &amp;summarizedFactors, Values &amp;separatorValues)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>synchronize</name>
      <anchorfile>a04391.html</anchorfile>
      <anchor>a1ed4a4ee020788c2ebc86cdf87d3de77</anchor>
      <arglist>(const NonlinearFactorGraph &amp;smootherFactors, const Values &amp;smootherValues, const NonlinearFactorGraph &amp;summarizedFactors, const Values &amp;separatorValues)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>postsync</name>
      <anchorfile>a04391.html</anchorfile>
      <anchor>a5e1a6fff2262c22e3078bb0f64b263ec</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="typedef">
      <type>ConcurrentSmoother</type>
      <name>Base</name>
      <anchorfile>a04391.html</anchorfile>
      <anchor>a1af52105708e88004190dc750aa21cd8</anchor>
      <arglist></arglist>
    </member>
    <class kind="struct">gtsam::ConcurrentIncrementalSmoother::Result</class>
    <member kind="variable" protection="protected">
      <type>ISAM2</type>
      <name>isam2_</name>
      <anchorfile>a04391.html</anchorfile>
      <anchor>a55fdf88917238da7986d6f182c442e41</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>NonlinearFactorGraph</type>
      <name>smootherFactors_</name>
      <anchorfile>a04391.html</anchorfile>
      <anchor>a559843658ae5895c4df96f332b4a9b23</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Values</type>
      <name>smootherValues_</name>
      <anchorfile>a04391.html</anchorfile>
      <anchor>a4eebdc4644affb62faf79bf0973d1120</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>NonlinearFactorGraph</type>
      <name>filterSummarizationFactors_</name>
      <anchorfile>a04391.html</anchorfile>
      <anchor>aba7be99b047cde76d1b09001461bd1b6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Values</type>
      <name>separatorValues_</name>
      <anchorfile>a04391.html</anchorfile>
      <anchor>acbd39d2a13545624adc7529024ff01ac</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>FactorIndices</type>
      <name>filterSummarizationSlots_</name>
      <anchorfile>a04391.html</anchorfile>
      <anchor>a72bbbff76f0371404fa32071e9c658db</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>synchronizationUpdatesAvailable_</name>
      <anchorfile>a04391.html</anchorfile>
      <anchor>aedc3e5c4fa2c4d8d8e5e7195023442f9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>NonlinearFactorGraph</type>
      <name>smootherSummarization_</name>
      <anchorfile>a04391.html</anchorfile>
      <anchor>a9bfd56b9fd920dbe6d5c300445d13147</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::ConcurrentMap</name>
    <filename>a01991.html</filename>
    <templarg>KEY</templarg>
    <templarg>VALUE</templarg>
    <member kind="function">
      <type></type>
      <name>ConcurrentMap</name>
      <anchorfile>a01991.html</anchorfile>
      <anchor>ab8ff3bd589931dfcf0270d4d34087253</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ConcurrentMap</name>
      <anchorfile>a01991.html</anchorfile>
      <anchor>a00df2b0e065bb753f3f58328b3a32355</anchor>
      <arglist>(INPUTITERATOR first, INPUTITERATOR last)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ConcurrentMap</name>
      <anchorfile>a01991.html</anchorfile>
      <anchor>a32688fb734dda9eb9b437f9c63c84893</anchor>
      <arglist>(const ConcurrentMap&lt; KEY, VALUE &gt; &amp;x)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ConcurrentMap</name>
      <anchorfile>a01991.html</anchorfile>
      <anchor>a7480e044beeb4638fe108d77ff2a0e0e</anchor>
      <arglist>(const Base &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>exists</name>
      <anchorfile>a01991.html</anchorfile>
      <anchor>a65c98661457fce1b72ac720f1c102b3b</anchor>
      <arglist>(const KEY &amp;e) const</arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>boost::serialization::access</name>
      <anchorfile>a01991.html</anchorfile>
      <anchor>ac98d07dd8f7b70e16ccb9a01abf56b9c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ConcurrentMap&lt; Key, sharedClique &gt;</name>
    <filename>a01991.html</filename>
    <member kind="function">
      <type></type>
      <name>ConcurrentMap</name>
      <anchorfile>a01991.html</anchorfile>
      <anchor>ab8ff3bd589931dfcf0270d4d34087253</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ConcurrentMap</name>
      <anchorfile>a01991.html</anchorfile>
      <anchor>a00df2b0e065bb753f3f58328b3a32355</anchor>
      <arglist>(INPUTITERATOR first, INPUTITERATOR last)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ConcurrentMap</name>
      <anchorfile>a01991.html</anchorfile>
      <anchor>a32688fb734dda9eb9b437f9c63c84893</anchor>
      <arglist>(const ConcurrentMap&lt; Key, sharedClique &gt; &amp;x)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ConcurrentMap</name>
      <anchorfile>a01991.html</anchorfile>
      <anchor>a7480e044beeb4638fe108d77ff2a0e0e</anchor>
      <arglist>(const Base &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>exists</name>
      <anchorfile>a01991.html</anchorfile>
      <anchor>a65c98661457fce1b72ac720f1c102b3b</anchor>
      <arglist>(const Key &amp;e) const</arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>boost::serialization::access</name>
      <anchorfile>a01991.html</anchorfile>
      <anchor>ac98d07dd8f7b70e16ccb9a01abf56b9c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ConcurrentMap&lt; Key, Vector &gt;</name>
    <filename>a01991.html</filename>
    <member kind="function">
      <type></type>
      <name>ConcurrentMap</name>
      <anchorfile>a01991.html</anchorfile>
      <anchor>ab8ff3bd589931dfcf0270d4d34087253</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ConcurrentMap</name>
      <anchorfile>a01991.html</anchorfile>
      <anchor>a00df2b0e065bb753f3f58328b3a32355</anchor>
      <arglist>(INPUTITERATOR first, INPUTITERATOR last)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ConcurrentMap</name>
      <anchorfile>a01991.html</anchorfile>
      <anchor>a32688fb734dda9eb9b437f9c63c84893</anchor>
      <arglist>(const ConcurrentMap&lt; Key, Vector &gt; &amp;x)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ConcurrentMap</name>
      <anchorfile>a01991.html</anchorfile>
      <anchor>a7480e044beeb4638fe108d77ff2a0e0e</anchor>
      <arglist>(const Base &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>exists</name>
      <anchorfile>a01991.html</anchorfile>
      <anchor>a65c98661457fce1b72ac720f1c102b3b</anchor>
      <arglist>(const Key &amp;e) const</arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>boost::serialization::access</name>
      <anchorfile>a01991.html</anchorfile>
      <anchor>ac98d07dd8f7b70e16ccb9a01abf56b9c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::ConcurrentSmoother</name>
    <filename>a04375.html</filename>
    <member kind="function">
      <type></type>
      <name>ConcurrentSmoother</name>
      <anchorfile>a04375.html</anchorfile>
      <anchor>aaaf5a11b3c127522d5629d250b2aba56</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ConcurrentSmoother</name>
      <anchorfile>a04375.html</anchorfile>
      <anchor>af75fe5536e50079a580bce98b77c8a17</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>print</name>
      <anchorfile>a04375.html</anchorfile>
      <anchor>ac28d5eecacd14c145aba3ece8fac29ad</anchor>
      <arglist>(const std::string &amp;s=&quot;Concurrent Smoother:\n&quot;, const KeyFormatter &amp;keyFormatter=DefaultKeyFormatter) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>equals</name>
      <anchorfile>a04375.html</anchorfile>
      <anchor>a30ef1039401b7511b53e6caf36c55d0e</anchor>
      <arglist>(const ConcurrentSmoother &amp;rhs, double tol=1e-9) const =0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>presync</name>
      <anchorfile>a04375.html</anchorfile>
      <anchor>ac61da2c7f833ba4cf81572971b3c8659</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>getSummarizedFactors</name>
      <anchorfile>a04375.html</anchorfile>
      <anchor>a920a30be4d282d0c6a528aea212c3ccd</anchor>
      <arglist>(NonlinearFactorGraph &amp;summarizedFactors, Values &amp;separatorValues)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>synchronize</name>
      <anchorfile>a04375.html</anchorfile>
      <anchor>a2f4a1f28d7b3881a137c538f0cd08ade</anchor>
      <arglist>(const NonlinearFactorGraph &amp;smootherFactors, const Values &amp;smootherValues, const NonlinearFactorGraph &amp;summarizedFactors, const Values &amp;rootValues)=0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>postsync</name>
      <anchorfile>a04375.html</anchorfile>
      <anchor>ab7325f60eb936c3dc89dfd5d83d6898f</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::Conditional</name>
    <filename>a02935.html</filename>
    <templarg>FACTOR</templarg>
    <templarg>DERIVEDCONDITIONAL</templarg>
    <member kind="function" protection="protected">
      <type></type>
      <name>Conditional</name>
      <anchorfile>a02935.html</anchorfile>
      <anchor>a92872ac46ea07c2953eabbdfe816f3ed</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>Conditional</name>
      <anchorfile>a02935.html</anchorfile>
      <anchor>a97b7d1439af9d6bd666946a7d22d2fd5</anchor>
      <arglist>(size_t nrFrontals)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>print</name>
      <anchorfile>a02935.html</anchorfile>
      <anchor>a2ec5a75aeba870ab0b0334733b34b449</anchor>
      <arglist>(const std::string &amp;s=&quot;Conditional&quot;, const KeyFormatter &amp;formatter=DefaultKeyFormatter) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>equals</name>
      <anchorfile>a02935.html</anchorfile>
      <anchor>af8b5b06f92b09ef2daa7e5dd6785bc33</anchor>
      <arglist>(const This &amp;c, double tol=1e-9) const</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>nrFrontals</name>
      <anchorfile>a02935.html</anchorfile>
      <anchor>a87e48132e41995e8327bc5b1daefd41d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>nrParents</name>
      <anchorfile>a02935.html</anchorfile>
      <anchor>ae19763bc0d1b12bea9e7bfcb304b40bb</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Key</type>
      <name>firstFrontalKey</name>
      <anchorfile>a02935.html</anchorfile>
      <anchor>a2c239cc3a58d08302df173d4e464f2f1</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Frontals</type>
      <name>frontals</name>
      <anchorfile>a02935.html</anchorfile>
      <anchor>ac32c96f2070f1c0a882101e02a9b3d01</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Parents</type>
      <name>parents</name>
      <anchorfile>a02935.html</anchorfile>
      <anchor>a4f7dab2390695c0972df2fc8da2ee6c4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>FACTOR::const_iterator</type>
      <name>beginFrontals</name>
      <anchorfile>a02935.html</anchorfile>
      <anchor>acca063529671c6783551c694061f17ab</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>FACTOR::const_iterator</type>
      <name>endFrontals</name>
      <anchorfile>a02935.html</anchorfile>
      <anchor>a2da329d78e91e9b7b7110c7a8370872e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>FACTOR::const_iterator</type>
      <name>beginParents</name>
      <anchorfile>a02935.html</anchorfile>
      <anchor>af1f80fbcb599d244f1f83998996d34b0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>FACTOR::const_iterator</type>
      <name>endParents</name>
      <anchorfile>a02935.html</anchorfile>
      <anchor>ae97aeba1e243d7dbbf90aff659bc490b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>boost::serialization::access</name>
      <anchorfile>a02935.html</anchorfile>
      <anchor>ac98d07dd8f7b70e16ccb9a01abf56b9c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>size_t &amp;</type>
      <name>nrFrontals</name>
      <anchorfile>a02935.html</anchorfile>
      <anchor>a3cc5ad0cb8a06107e865a1fb352bb164</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>FACTOR::iterator</type>
      <name>beginFrontals</name>
      <anchorfile>a02935.html</anchorfile>
      <anchor>ab2b9bbc643244dbabfc6c82bee870499</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>FACTOR::iterator</type>
      <name>endFrontals</name>
      <anchorfile>a02935.html</anchorfile>
      <anchor>a3ec8e5074bea26f7cc04f680d9fbd4af</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>FACTOR::iterator</type>
      <name>beginParents</name>
      <anchorfile>a02935.html</anchorfile>
      <anchor>aa44803c99d5df7869d1151468c49afad</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>FACTOR::iterator</type>
      <name>endParents</name>
      <anchorfile>a02935.html</anchorfile>
      <anchor>a3b07df7eeb50133c0b40388e80c455ab</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="typedef">
      <type>boost::iterator_range&lt; typename FACTOR::const_iterator &gt;</type>
      <name>Frontals</name>
      <anchorfile>a02935.html</anchorfile>
      <anchor>abcbfbd27ed84d38425130d72c522dcea</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::iterator_range&lt; typename FACTOR::const_iterator &gt;</type>
      <name>Parents</name>
      <anchorfile>a02935.html</anchorfile>
      <anchor>a7023eb6fc34dc7dc0d0be1f92481721f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>size_t</type>
      <name>nrFrontals_</name>
      <anchorfile>a02935.html</anchorfile>
      <anchor>a1700745916154a78b30a2fc15e28ce70</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Conditional&lt; DecisionTreeFactor, DiscreteConditional &gt;</name>
    <filename>a02935.html</filename>
    <member kind="friend">
      <type>friend class</type>
      <name>boost::serialization::access</name>
      <anchorfile>a02935.html</anchorfile>
      <anchor>ac98d07dd8f7b70e16ccb9a01abf56b9c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>size_t &amp;</type>
      <name>nrFrontals</name>
      <anchorfile>a02935.html</anchorfile>
      <anchor>a3cc5ad0cb8a06107e865a1fb352bb164</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>DecisionTreeFactor ::iterator</type>
      <name>beginFrontals</name>
      <anchorfile>a02935.html</anchorfile>
      <anchor>ab2b9bbc643244dbabfc6c82bee870499</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>DecisionTreeFactor ::iterator</type>
      <name>endFrontals</name>
      <anchorfile>a02935.html</anchorfile>
      <anchor>a3ec8e5074bea26f7cc04f680d9fbd4af</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>DecisionTreeFactor ::iterator</type>
      <name>beginParents</name>
      <anchorfile>a02935.html</anchorfile>
      <anchor>aa44803c99d5df7869d1151468c49afad</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>DecisionTreeFactor ::iterator</type>
      <name>endParents</name>
      <anchorfile>a02935.html</anchorfile>
      <anchor>a3b07df7eeb50133c0b40388e80c455ab</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>Conditional</name>
      <anchorfile>a02935.html</anchorfile>
      <anchor>a92872ac46ea07c2953eabbdfe816f3ed</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>Conditional</name>
      <anchorfile>a02935.html</anchorfile>
      <anchor>a97b7d1439af9d6bd666946a7d22d2fd5</anchor>
      <arglist>(size_t nrFrontals)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>print</name>
      <anchorfile>a02935.html</anchorfile>
      <anchor>a2ec5a75aeba870ab0b0334733b34b449</anchor>
      <arglist>(const std::string &amp;s=&quot;Conditional&quot;, const KeyFormatter &amp;formatter=DefaultKeyFormatter) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>equals</name>
      <anchorfile>a02935.html</anchorfile>
      <anchor>af8b5b06f92b09ef2daa7e5dd6785bc33</anchor>
      <arglist>(const This &amp;c, double tol=1e-9) const</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>nrFrontals</name>
      <anchorfile>a02935.html</anchorfile>
      <anchor>a87e48132e41995e8327bc5b1daefd41d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>nrParents</name>
      <anchorfile>a02935.html</anchorfile>
      <anchor>ae19763bc0d1b12bea9e7bfcb304b40bb</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Key</type>
      <name>firstFrontalKey</name>
      <anchorfile>a02935.html</anchorfile>
      <anchor>a2c239cc3a58d08302df173d4e464f2f1</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Frontals</type>
      <name>frontals</name>
      <anchorfile>a02935.html</anchorfile>
      <anchor>ac32c96f2070f1c0a882101e02a9b3d01</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Parents</type>
      <name>parents</name>
      <anchorfile>a02935.html</anchorfile>
      <anchor>a4f7dab2390695c0972df2fc8da2ee6c4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>DecisionTreeFactor ::const_iterator</type>
      <name>beginFrontals</name>
      <anchorfile>a02935.html</anchorfile>
      <anchor>acca063529671c6783551c694061f17ab</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>DecisionTreeFactor ::const_iterator</type>
      <name>endFrontals</name>
      <anchorfile>a02935.html</anchorfile>
      <anchor>a2da329d78e91e9b7b7110c7a8370872e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>DecisionTreeFactor ::const_iterator</type>
      <name>beginParents</name>
      <anchorfile>a02935.html</anchorfile>
      <anchor>af1f80fbcb599d244f1f83998996d34b0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>DecisionTreeFactor ::const_iterator</type>
      <name>endParents</name>
      <anchorfile>a02935.html</anchorfile>
      <anchor>ae97aeba1e243d7dbbf90aff659bc490b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>nrFrontals</name>
      <anchorfile>a02935.html</anchorfile>
      <anchor>a87e48132e41995e8327bc5b1daefd41d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>nrParents</name>
      <anchorfile>a02935.html</anchorfile>
      <anchor>ae19763bc0d1b12bea9e7bfcb304b40bb</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Key</type>
      <name>firstFrontalKey</name>
      <anchorfile>a02935.html</anchorfile>
      <anchor>a2c239cc3a58d08302df173d4e464f2f1</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Frontals</type>
      <name>frontals</name>
      <anchorfile>a02935.html</anchorfile>
      <anchor>ac32c96f2070f1c0a882101e02a9b3d01</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Parents</type>
      <name>parents</name>
      <anchorfile>a02935.html</anchorfile>
      <anchor>a4f7dab2390695c0972df2fc8da2ee6c4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>DecisionTreeFactor ::const_iterator</type>
      <name>beginFrontals</name>
      <anchorfile>a02935.html</anchorfile>
      <anchor>acca063529671c6783551c694061f17ab</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>DecisionTreeFactor ::const_iterator</type>
      <name>endFrontals</name>
      <anchorfile>a02935.html</anchorfile>
      <anchor>a2da329d78e91e9b7b7110c7a8370872e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>DecisionTreeFactor ::const_iterator</type>
      <name>beginParents</name>
      <anchorfile>a02935.html</anchorfile>
      <anchor>af1f80fbcb599d244f1f83998996d34b0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>DecisionTreeFactor ::const_iterator</type>
      <name>endParents</name>
      <anchorfile>a02935.html</anchorfile>
      <anchor>ae97aeba1e243d7dbbf90aff659bc490b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="typedef">
      <type>boost::iterator_range&lt; typename DecisionTreeFactor ::const_iterator &gt;</type>
      <name>Frontals</name>
      <anchorfile>a02935.html</anchorfile>
      <anchor>abcbfbd27ed84d38425130d72c522dcea</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::iterator_range&lt; typename DecisionTreeFactor ::const_iterator &gt;</type>
      <name>Parents</name>
      <anchorfile>a02935.html</anchorfile>
      <anchor>a7023eb6fc34dc7dc0d0be1f92481721f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>Conditional</name>
      <anchorfile>a02935.html</anchorfile>
      <anchor>a92872ac46ea07c2953eabbdfe816f3ed</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>Conditional</name>
      <anchorfile>a02935.html</anchorfile>
      <anchor>a97b7d1439af9d6bd666946a7d22d2fd5</anchor>
      <arglist>(size_t nrFrontals)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>print</name>
      <anchorfile>a02935.html</anchorfile>
      <anchor>a2ec5a75aeba870ab0b0334733b34b449</anchor>
      <arglist>(const std::string &amp;s=&quot;Conditional&quot;, const KeyFormatter &amp;formatter=DefaultKeyFormatter) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>equals</name>
      <anchorfile>a02935.html</anchorfile>
      <anchor>af8b5b06f92b09ef2daa7e5dd6785bc33</anchor>
      <arglist>(const This &amp;c, double tol=1e-9) const</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>size_t</type>
      <name>nrFrontals_</name>
      <anchorfile>a02935.html</anchorfile>
      <anchor>a1700745916154a78b30a2fc15e28ce70</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Conditional&lt; JacobianFactor, GaussianConditional &gt;</name>
    <filename>a02935.html</filename>
    <member kind="friend">
      <type>friend class</type>
      <name>boost::serialization::access</name>
      <anchorfile>a02935.html</anchorfile>
      <anchor>ac98d07dd8f7b70e16ccb9a01abf56b9c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>size_t &amp;</type>
      <name>nrFrontals</name>
      <anchorfile>a02935.html</anchorfile>
      <anchor>a3cc5ad0cb8a06107e865a1fb352bb164</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>JacobianFactor ::iterator</type>
      <name>beginFrontals</name>
      <anchorfile>a02935.html</anchorfile>
      <anchor>ab2b9bbc643244dbabfc6c82bee870499</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>JacobianFactor ::iterator</type>
      <name>endFrontals</name>
      <anchorfile>a02935.html</anchorfile>
      <anchor>a3ec8e5074bea26f7cc04f680d9fbd4af</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>JacobianFactor ::iterator</type>
      <name>beginParents</name>
      <anchorfile>a02935.html</anchorfile>
      <anchor>aa44803c99d5df7869d1151468c49afad</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>JacobianFactor ::iterator</type>
      <name>endParents</name>
      <anchorfile>a02935.html</anchorfile>
      <anchor>a3b07df7eeb50133c0b40388e80c455ab</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>Conditional</name>
      <anchorfile>a02935.html</anchorfile>
      <anchor>a92872ac46ea07c2953eabbdfe816f3ed</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>Conditional</name>
      <anchorfile>a02935.html</anchorfile>
      <anchor>a97b7d1439af9d6bd666946a7d22d2fd5</anchor>
      <arglist>(size_t nrFrontals)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>print</name>
      <anchorfile>a02935.html</anchorfile>
      <anchor>a2ec5a75aeba870ab0b0334733b34b449</anchor>
      <arglist>(const std::string &amp;s=&quot;Conditional&quot;, const KeyFormatter &amp;formatter=DefaultKeyFormatter) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>equals</name>
      <anchorfile>a02935.html</anchorfile>
      <anchor>af8b5b06f92b09ef2daa7e5dd6785bc33</anchor>
      <arglist>(const This &amp;c, double tol=1e-9) const</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>nrFrontals</name>
      <anchorfile>a02935.html</anchorfile>
      <anchor>a87e48132e41995e8327bc5b1daefd41d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>nrParents</name>
      <anchorfile>a02935.html</anchorfile>
      <anchor>ae19763bc0d1b12bea9e7bfcb304b40bb</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Key</type>
      <name>firstFrontalKey</name>
      <anchorfile>a02935.html</anchorfile>
      <anchor>a2c239cc3a58d08302df173d4e464f2f1</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Frontals</type>
      <name>frontals</name>
      <anchorfile>a02935.html</anchorfile>
      <anchor>ac32c96f2070f1c0a882101e02a9b3d01</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Parents</type>
      <name>parents</name>
      <anchorfile>a02935.html</anchorfile>
      <anchor>a4f7dab2390695c0972df2fc8da2ee6c4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>JacobianFactor ::const_iterator</type>
      <name>beginFrontals</name>
      <anchorfile>a02935.html</anchorfile>
      <anchor>acca063529671c6783551c694061f17ab</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>JacobianFactor ::const_iterator</type>
      <name>endFrontals</name>
      <anchorfile>a02935.html</anchorfile>
      <anchor>a2da329d78e91e9b7b7110c7a8370872e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>JacobianFactor ::const_iterator</type>
      <name>beginParents</name>
      <anchorfile>a02935.html</anchorfile>
      <anchor>af1f80fbcb599d244f1f83998996d34b0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>JacobianFactor ::const_iterator</type>
      <name>endParents</name>
      <anchorfile>a02935.html</anchorfile>
      <anchor>ae97aeba1e243d7dbbf90aff659bc490b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>nrFrontals</name>
      <anchorfile>a02935.html</anchorfile>
      <anchor>a87e48132e41995e8327bc5b1daefd41d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>nrParents</name>
      <anchorfile>a02935.html</anchorfile>
      <anchor>ae19763bc0d1b12bea9e7bfcb304b40bb</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Key</type>
      <name>firstFrontalKey</name>
      <anchorfile>a02935.html</anchorfile>
      <anchor>a2c239cc3a58d08302df173d4e464f2f1</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Frontals</type>
      <name>frontals</name>
      <anchorfile>a02935.html</anchorfile>
      <anchor>ac32c96f2070f1c0a882101e02a9b3d01</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Parents</type>
      <name>parents</name>
      <anchorfile>a02935.html</anchorfile>
      <anchor>a4f7dab2390695c0972df2fc8da2ee6c4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>JacobianFactor ::const_iterator</type>
      <name>beginFrontals</name>
      <anchorfile>a02935.html</anchorfile>
      <anchor>acca063529671c6783551c694061f17ab</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>JacobianFactor ::const_iterator</type>
      <name>endFrontals</name>
      <anchorfile>a02935.html</anchorfile>
      <anchor>a2da329d78e91e9b7b7110c7a8370872e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>JacobianFactor ::const_iterator</type>
      <name>beginParents</name>
      <anchorfile>a02935.html</anchorfile>
      <anchor>af1f80fbcb599d244f1f83998996d34b0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>JacobianFactor ::const_iterator</type>
      <name>endParents</name>
      <anchorfile>a02935.html</anchorfile>
      <anchor>ae97aeba1e243d7dbbf90aff659bc490b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="typedef">
      <type>boost::iterator_range&lt; typename JacobianFactor ::const_iterator &gt;</type>
      <name>Frontals</name>
      <anchorfile>a02935.html</anchorfile>
      <anchor>abcbfbd27ed84d38425130d72c522dcea</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::iterator_range&lt; typename JacobianFactor ::const_iterator &gt;</type>
      <name>Parents</name>
      <anchorfile>a02935.html</anchorfile>
      <anchor>a7023eb6fc34dc7dc0d0be1f92481721f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>Conditional</name>
      <anchorfile>a02935.html</anchorfile>
      <anchor>a92872ac46ea07c2953eabbdfe816f3ed</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>Conditional</name>
      <anchorfile>a02935.html</anchorfile>
      <anchor>a97b7d1439af9d6bd666946a7d22d2fd5</anchor>
      <arglist>(size_t nrFrontals)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>print</name>
      <anchorfile>a02935.html</anchorfile>
      <anchor>a2ec5a75aeba870ab0b0334733b34b449</anchor>
      <arglist>(const std::string &amp;s=&quot;Conditional&quot;, const KeyFormatter &amp;formatter=DefaultKeyFormatter) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>equals</name>
      <anchorfile>a02935.html</anchorfile>
      <anchor>af8b5b06f92b09ef2daa7e5dd6785bc33</anchor>
      <arglist>(const This &amp;c, double tol=1e-9) const</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>size_t</type>
      <name>nrFrontals_</name>
      <anchorfile>a02935.html</anchorfile>
      <anchor>a1700745916154a78b30a2fc15e28ce70</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Conditional&lt; SymbolicFactor, SymbolicConditional &gt;</name>
    <filename>a02935.html</filename>
    <member kind="friend">
      <type>friend class</type>
      <name>boost::serialization::access</name>
      <anchorfile>a02935.html</anchorfile>
      <anchor>ac98d07dd8f7b70e16ccb9a01abf56b9c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>size_t &amp;</type>
      <name>nrFrontals</name>
      <anchorfile>a02935.html</anchorfile>
      <anchor>a3cc5ad0cb8a06107e865a1fb352bb164</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>SymbolicFactor ::iterator</type>
      <name>beginFrontals</name>
      <anchorfile>a02935.html</anchorfile>
      <anchor>ab2b9bbc643244dbabfc6c82bee870499</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>SymbolicFactor ::iterator</type>
      <name>endFrontals</name>
      <anchorfile>a02935.html</anchorfile>
      <anchor>a3ec8e5074bea26f7cc04f680d9fbd4af</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>SymbolicFactor ::iterator</type>
      <name>beginParents</name>
      <anchorfile>a02935.html</anchorfile>
      <anchor>aa44803c99d5df7869d1151468c49afad</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>SymbolicFactor ::iterator</type>
      <name>endParents</name>
      <anchorfile>a02935.html</anchorfile>
      <anchor>a3b07df7eeb50133c0b40388e80c455ab</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>Conditional</name>
      <anchorfile>a02935.html</anchorfile>
      <anchor>a92872ac46ea07c2953eabbdfe816f3ed</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>Conditional</name>
      <anchorfile>a02935.html</anchorfile>
      <anchor>a97b7d1439af9d6bd666946a7d22d2fd5</anchor>
      <arglist>(size_t nrFrontals)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>print</name>
      <anchorfile>a02935.html</anchorfile>
      <anchor>a2ec5a75aeba870ab0b0334733b34b449</anchor>
      <arglist>(const std::string &amp;s=&quot;Conditional&quot;, const KeyFormatter &amp;formatter=DefaultKeyFormatter) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>equals</name>
      <anchorfile>a02935.html</anchorfile>
      <anchor>af8b5b06f92b09ef2daa7e5dd6785bc33</anchor>
      <arglist>(const This &amp;c, double tol=1e-9) const</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>nrFrontals</name>
      <anchorfile>a02935.html</anchorfile>
      <anchor>a87e48132e41995e8327bc5b1daefd41d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>nrParents</name>
      <anchorfile>a02935.html</anchorfile>
      <anchor>ae19763bc0d1b12bea9e7bfcb304b40bb</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Key</type>
      <name>firstFrontalKey</name>
      <anchorfile>a02935.html</anchorfile>
      <anchor>a2c239cc3a58d08302df173d4e464f2f1</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Frontals</type>
      <name>frontals</name>
      <anchorfile>a02935.html</anchorfile>
      <anchor>ac32c96f2070f1c0a882101e02a9b3d01</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Parents</type>
      <name>parents</name>
      <anchorfile>a02935.html</anchorfile>
      <anchor>a4f7dab2390695c0972df2fc8da2ee6c4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>SymbolicFactor ::const_iterator</type>
      <name>beginFrontals</name>
      <anchorfile>a02935.html</anchorfile>
      <anchor>acca063529671c6783551c694061f17ab</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>SymbolicFactor ::const_iterator</type>
      <name>endFrontals</name>
      <anchorfile>a02935.html</anchorfile>
      <anchor>a2da329d78e91e9b7b7110c7a8370872e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>SymbolicFactor ::const_iterator</type>
      <name>beginParents</name>
      <anchorfile>a02935.html</anchorfile>
      <anchor>af1f80fbcb599d244f1f83998996d34b0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>SymbolicFactor ::const_iterator</type>
      <name>endParents</name>
      <anchorfile>a02935.html</anchorfile>
      <anchor>ae97aeba1e243d7dbbf90aff659bc490b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>nrFrontals</name>
      <anchorfile>a02935.html</anchorfile>
      <anchor>a87e48132e41995e8327bc5b1daefd41d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>nrParents</name>
      <anchorfile>a02935.html</anchorfile>
      <anchor>ae19763bc0d1b12bea9e7bfcb304b40bb</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Key</type>
      <name>firstFrontalKey</name>
      <anchorfile>a02935.html</anchorfile>
      <anchor>a2c239cc3a58d08302df173d4e464f2f1</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Frontals</type>
      <name>frontals</name>
      <anchorfile>a02935.html</anchorfile>
      <anchor>ac32c96f2070f1c0a882101e02a9b3d01</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Parents</type>
      <name>parents</name>
      <anchorfile>a02935.html</anchorfile>
      <anchor>a4f7dab2390695c0972df2fc8da2ee6c4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>SymbolicFactor ::const_iterator</type>
      <name>beginFrontals</name>
      <anchorfile>a02935.html</anchorfile>
      <anchor>acca063529671c6783551c694061f17ab</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>SymbolicFactor ::const_iterator</type>
      <name>endFrontals</name>
      <anchorfile>a02935.html</anchorfile>
      <anchor>a2da329d78e91e9b7b7110c7a8370872e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>SymbolicFactor ::const_iterator</type>
      <name>beginParents</name>
      <anchorfile>a02935.html</anchorfile>
      <anchor>af1f80fbcb599d244f1f83998996d34b0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>SymbolicFactor ::const_iterator</type>
      <name>endParents</name>
      <anchorfile>a02935.html</anchorfile>
      <anchor>ae97aeba1e243d7dbbf90aff659bc490b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="typedef">
      <type>boost::iterator_range&lt; typename SymbolicFactor ::const_iterator &gt;</type>
      <name>Frontals</name>
      <anchorfile>a02935.html</anchorfile>
      <anchor>abcbfbd27ed84d38425130d72c522dcea</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::iterator_range&lt; typename SymbolicFactor ::const_iterator &gt;</type>
      <name>Parents</name>
      <anchorfile>a02935.html</anchorfile>
      <anchor>a7023eb6fc34dc7dc0d0be1f92481721f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>Conditional</name>
      <anchorfile>a02935.html</anchorfile>
      <anchor>a92872ac46ea07c2953eabbdfe816f3ed</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>Conditional</name>
      <anchorfile>a02935.html</anchorfile>
      <anchor>a97b7d1439af9d6bd666946a7d22d2fd5</anchor>
      <arglist>(size_t nrFrontals)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>print</name>
      <anchorfile>a02935.html</anchorfile>
      <anchor>a2ec5a75aeba870ab0b0334733b34b449</anchor>
      <arglist>(const std::string &amp;s=&quot;Conditional&quot;, const KeyFormatter &amp;formatter=DefaultKeyFormatter) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>equals</name>
      <anchorfile>a02935.html</anchorfile>
      <anchor>af8b5b06f92b09ef2daa7e5dd6785bc33</anchor>
      <arglist>(const This &amp;c, double tol=1e-9) const</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>size_t</type>
      <name>nrFrontals_</name>
      <anchorfile>a02935.html</anchorfile>
      <anchor>a1700745916154a78b30a2fc15e28ce70</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::ConjugateGradientParameters</name>
    <filename>a03071.html</filename>
    <base>gtsam::IterativeOptimizationParameters</base>
    <member kind="variable">
      <type>size_t</type>
      <name>minIterations_</name>
      <anchorfile>a03071.html</anchorfile>
      <anchor>a02664c7fcb805142421484310dafc7a4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>size_t</type>
      <name>maxIterations_</name>
      <anchorfile>a03071.html</anchorfile>
      <anchor>abe70bda38b526a112fa873a6b042502c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>size_t</type>
      <name>reset_</name>
      <anchorfile>a03071.html</anchorfile>
      <anchor>a347b5ce7b42d5eb5722eed23db93a5eb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>epsilon_rel_</name>
      <anchorfile>a03071.html</anchorfile>
      <anchor>a74161c7d0a842b59501281ccdf584590</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>epsilon_abs_</name>
      <anchorfile>a03071.html</anchorfile>
      <anchor>ad48e0d1383ab5cabb17d268244af3b14</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>BLASKernel</name>
      <anchorfile>a03071.html</anchorfile>
      <anchor>a5f3c3b9315279cf2112501b7c0a3b499</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>GTSAM</name>
      <anchorfile>a03071.html</anchorfile>
      <anchor>a5f3c3b9315279cf2112501b7c0a3b499a6899bab70a92ace73fecfa9de464de3c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>GTSAM</name>
      <anchorfile>a03071.html</anchorfile>
      <anchor>a5f3c3b9315279cf2112501b7c0a3b499a6899bab70a92ace73fecfa9de464de3c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::BTree::const_iterator</name>
    <filename>a04195.html</filename>
    <member kind="function">
      <type></type>
      <name>const_iterator</name>
      <anchorfile>a04195.html</anchorfile>
      <anchor>a36bc81260d4778905731a90080738456</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>const_iterator</name>
      <anchorfile>a04195.html</anchorfile>
      <anchor>acd7a667dd871c41636a22d99abfcb09a</anchor>
      <arglist>(const sharedNode &amp;root)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>a04195.html</anchorfile>
      <anchor>a1e4d4081e7054283f7297a90a3637295</anchor>
      <arglist>(const Self &amp;__x) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>a04195.html</anchorfile>
      <anchor>ae6c327c5b58d7a23ff4229e0ec02c679</anchor>
      <arglist>(const Self &amp;__x) const</arglist>
    </member>
    <member kind="function">
      <type>reference</type>
      <name>operator *</name>
      <anchorfile>a04195.html</anchorfile>
      <anchor>a6146af57d12d9e49a3d229dde777492a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>pointer</type>
      <name>operator-&gt;</name>
      <anchorfile>a04195.html</anchorfile>
      <anchor>a98ecf96dbfc698f71b7d2023846dd71b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Self &amp;</type>
      <name>operator++</name>
      <anchorfile>a04195.html</anchorfile>
      <anchor>a676218a20da84e7432bd29946128acc3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Self</type>
      <name>operator++</name>
      <anchorfile>a04195.html</anchorfile>
      <anchor>a375d4997693e4623026bee3faf1f3f9b</anchor>
      <arglist>(int)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>gtsam::const_selector</name>
    <filename>a02247.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>gtsam::const_selector&lt; BASIC_TYPE, BASIC_TYPE, AS_NON_CONST, AS_CONST &gt;</name>
    <filename>a02251.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>gtsam::const_selector&lt; const BASIC_TYPE, BASIC_TYPE, AS_NON_CONST, AS_CONST &gt;</name>
    <filename>a02255.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
  </compound>
  <compound kind="class">
    <name>gtsam::imuBias::ConstantBias</name>
    <filename>a03455.html</filename>
    <member kind="friend">
      <type>GTSAM_EXPORT friend std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a03455.html</anchorfile>
      <anchor>a4c277f4eedf6ef6bb33440eb7c8da0f3</anchor>
      <arglist>(std::ostream &amp;os, const ConstantBias &amp;bias)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>a03455.html</anchorfile>
      <anchor>a499e58fdf6aa720bc725c82a5749fba1</anchor>
      <arglist>(const std::string &amp;s=&quot;&quot;) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>equals</name>
      <anchorfile>a03455.html</anchorfile>
      <anchor>a276162fe16d92c17dab6258d5fab6d58</anchor>
      <arglist>(const ConstantBias &amp;expected, double tol=1e-5) const</arglist>
    </member>
    <member kind="function">
      <type>ConstantBias</type>
      <name>operator-</name>
      <anchorfile>a03455.html</anchorfile>
      <anchor>a5c18fc2155eb85c45809128956a7de20</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>ConstantBias</type>
      <name>operator+</name>
      <anchorfile>a03455.html</anchorfile>
      <anchor>a96e98bcbfb7312a0ba29043a96ff8c7b</anchor>
      <arglist>(const Vector6 &amp;v) const</arglist>
    </member>
    <member kind="function">
      <type>ConstantBias</type>
      <name>operator+</name>
      <anchorfile>a03455.html</anchorfile>
      <anchor>ad28898cc918cef1f1d1fd97fcc7a1036</anchor>
      <arglist>(const ConstantBias &amp;b) const</arglist>
    </member>
    <member kind="function">
      <type>ConstantBias</type>
      <name>operator-</name>
      <anchorfile>a03455.html</anchorfile>
      <anchor>a30c89c5c856d2d7514979203f536e9a2</anchor>
      <arglist>(const ConstantBias &amp;b) const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static ConstantBias</type>
      <name>identity</name>
      <anchorfile>a03455.html</anchorfile>
      <anchor>a7bfbcd50ee6bc2428165c7a2a34bbe59</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>boost::serialization::access</name>
      <anchorfile>a03455.html</anchorfile>
      <anchor>ac98d07dd8f7b70e16ccb9a01abf56b9c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>Vector6</type>
      <name>vector</name>
      <anchorfile>a03455.html</anchorfile>
      <anchor>a93610c76ef81c251cb8d5697ee9334bd</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Vector3 &amp;</type>
      <name>accelerometer</name>
      <anchorfile>a03455.html</anchorfile>
      <anchor>ab00580ac961bb55946efe19d2b826a4f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Vector3 &amp;</type>
      <name>gyroscope</name>
      <anchorfile>a03455.html</anchorfile>
      <anchor>a833c5eeeafbcf8cb4bfc4b38be7911d4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Vector3</type>
      <name>correctAccelerometer</name>
      <anchorfile>a03455.html</anchorfile>
      <anchor>a38e03cd494b2c3e3a0d0261a22af9662</anchor>
      <arglist>(const Vector3 &amp;measurement, OptionalJacobian&lt; 3, 6 &gt; H1=boost::none, OptionalJacobian&lt; 3, 3 &gt; H2=boost::none) const</arglist>
    </member>
    <member kind="function">
      <type>Vector3</type>
      <name>correctGyroscope</name>
      <anchorfile>a03455.html</anchorfile>
      <anchor>a75637e5863c69bf8d8ca2a5347947e73</anchor>
      <arglist>(const Vector3 &amp;measurement, OptionalJacobian&lt; 3, 6 &gt; H1=boost::none, OptionalJacobian&lt; 3, 3 &gt; H2=boost::none) const</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const size_t</type>
      <name>dimension</name>
      <anchorfile>a03455.html</anchorfile>
      <anchor>a85ba8cd799a5771ad8ac8669e1377f1d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::ConstantTwistScenario</name>
    <filename>a03539.html</filename>
    <base>gtsam::Scenario</base>
    <member kind="function">
      <type></type>
      <name>ConstantTwistScenario</name>
      <anchorfile>a03539.html</anchorfile>
      <anchor>a30f972429efb00671fc30d6c958d13b3</anchor>
      <arglist>(const Vector3 &amp;w, const Vector3 &amp;v, const Pose3 &amp;nTb0=Pose3())</arglist>
    </member>
    <member kind="function">
      <type>Pose3</type>
      <name>pose</name>
      <anchorfile>a03539.html</anchorfile>
      <anchor>acd96948b7aabca8d3edd32986f6ea517</anchor>
      <arglist>(double t) const override</arglist>
    </member>
    <member kind="function">
      <type>Vector3</type>
      <name>omega_b</name>
      <anchorfile>a03539.html</anchorfile>
      <anchor>a922a598b52121b45d9ae492453401f5c</anchor>
      <arglist>(double t) const override</arglist>
    </member>
    <member kind="function">
      <type>Vector3</type>
      <name>velocity_n</name>
      <anchorfile>a03539.html</anchorfile>
      <anchor>ad1ef4f451f2f8d8413424778ab3e1791</anchor>
      <arglist>(double t) const override</arglist>
    </member>
    <member kind="function">
      <type>Vector3</type>
      <name>acceleration_n</name>
      <anchorfile>a03539.html</anchorfile>
      <anchor>a313d9f5f2edd143748c1e20fddcd3bde</anchor>
      <arglist>(double t) const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::Values::ConstFiltered</name>
    <filename>a03843.html</filename>
    <templarg>ValueType</templarg>
    <member kind="function">
      <type></type>
      <name>ConstFiltered</name>
      <anchorfile>a03843.html</anchorfile>
      <anchor>a61101d5dad7e56d12e308d4c475314d8</anchor>
      <arglist>(const Filtered&lt; ValueType &gt; &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>size</name>
      <anchorfile>a03843.html</anchorfile>
      <anchor>a923578e69ab10edac875b6ee8bbee29e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="typedef">
      <type>_ValuesConstKeyValuePair&lt; ValueType &gt;</type>
      <name>KeyValuePair</name>
      <anchorfile>a03843.html</anchorfile>
      <anchor>ab19780909f6d4cd5dbeee01aa88d07ce</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>gtsam::Values::ConstKeyValuePair</name>
    <filename>a03879.html</filename>
    <member kind="variable">
      <type>const Key</type>
      <name>key</name>
      <anchorfile>a03879.html</anchorfile>
      <anchor>a1e4447d2022b8a70fabaa877641b63a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const Value &amp;</type>
      <name>value</name>
      <anchorfile>a03879.html</anchorfile>
      <anchor>a7fcc2317ca95dc55484dfa17dc31587d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::noiseModel::Constrained</name>
    <filename>a03231.html</filename>
    <base>gtsam::noiseModel::Diagonal</base>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isConstrained</name>
      <anchorfile>a03231.html</anchorfile>
      <anchor>a42da2d883ee7b17c5fd6436c43c0a958</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>constrained</name>
      <anchorfile>a03231.html</anchorfile>
      <anchor>a8bba90d84c33f799fa4c2c7b53b1774b</anchor>
      <arglist>(size_t i) const</arglist>
    </member>
    <member kind="function">
      <type>const Vector &amp;</type>
      <name>mu</name>
      <anchorfile>a03231.html</anchorfile>
      <anchor>acb9bb701c7c6173ce303be234915c4b4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>distance</name>
      <anchorfile>a03231.html</anchorfile>
      <anchor>aca307fefae5c186a8db15c8f019cd5be</anchor>
      <arglist>(const Vector &amp;v) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Vector</type>
      <name>whiten</name>
      <anchorfile>a03231.html</anchorfile>
      <anchor>a441b3ec7841db7fb4022e2099117cffe</anchor>
      <arglist>(const Vector &amp;v) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Matrix</type>
      <name>Whiten</name>
      <anchorfile>a03231.html</anchorfile>
      <anchor>aeb6113a6b1a943c3a55e7044509e96f4</anchor>
      <arglist>(const Matrix &amp;H) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>WhitenInPlace</name>
      <anchorfile>a03231.html</anchorfile>
      <anchor>a257325db2c69696801b745e7557428ed</anchor>
      <arglist>(Matrix &amp;H) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>WhitenInPlace</name>
      <anchorfile>a03231.html</anchorfile>
      <anchor>a0548915c56a496b0dfb50a002d622269</anchor>
      <arglist>(Eigen::Block&lt; Matrix &gt; H) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Diagonal::shared_ptr</type>
      <name>QR</name>
      <anchorfile>a03231.html</anchorfile>
      <anchor>ab91b1d20bba9014f34fc737381ce1558</anchor>
      <arglist>(Matrix &amp;Ab) const</arglist>
    </member>
    <member kind="function">
      <type>shared_ptr</type>
      <name>unit</name>
      <anchorfile>a03231.html</anchorfile>
      <anchor>aceab7c38ea485767ec7141ad57fefc9f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static shared_ptr</type>
      <name>MixedSigmas</name>
      <anchorfile>a03231.html</anchorfile>
      <anchor>a5453997b983eb928f23c149bdcc887c4</anchor>
      <arglist>(const Vector &amp;mu, const Vector &amp;sigmas)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static shared_ptr</type>
      <name>MixedSigmas</name>
      <anchorfile>a03231.html</anchorfile>
      <anchor>a7ccabe92c1846eb0f2ed4df33e6e0ca4</anchor>
      <arglist>(const Vector &amp;sigmas)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static shared_ptr</type>
      <name>MixedSigmas</name>
      <anchorfile>a03231.html</anchorfile>
      <anchor>aca99bfaf36768b6ce7cbf15a768505d4</anchor>
      <arglist>(double m, const Vector &amp;sigmas)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static shared_ptr</type>
      <name>MixedVariances</name>
      <anchorfile>a03231.html</anchorfile>
      <anchor>ad42a87f248c79be2cfda2934fa910c01</anchor>
      <arglist>(const Vector &amp;mu, const Vector &amp;variances)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static shared_ptr</type>
      <name>MixedPrecisions</name>
      <anchorfile>a03231.html</anchorfile>
      <anchor>a6dec800b5293cd57a0b6e38e434a5a7c</anchor>
      <arglist>(const Vector &amp;mu, const Vector &amp;precisions)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static shared_ptr</type>
      <name>All</name>
      <anchorfile>a03231.html</anchorfile>
      <anchor>a6530a33957f49cc78f8da3842ed685b4</anchor>
      <arglist>(size_t dim)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static shared_ptr</type>
      <name>All</name>
      <anchorfile>a03231.html</anchorfile>
      <anchor>a4b1918b7655f35a3ab554b55ab27a895</anchor>
      <arglist>(size_t dim, const Vector &amp;mu)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static shared_ptr</type>
      <name>All</name>
      <anchorfile>a03231.html</anchorfile>
      <anchor>a5a966c8c2281ccea35ef993b678bc4bc</anchor>
      <arglist>(size_t dim, double mu)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>Constrained</name>
      <anchorfile>a03231.html</anchorfile>
      <anchor>ad6aa2d673a9660668cbb5b446c2aea05</anchor>
      <arglist>(const Vector &amp;sigmas=Z_1x1)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>Constrained</name>
      <anchorfile>a03231.html</anchorfile>
      <anchor>a96cf4e02109b88d9be5a90d657ddd134</anchor>
      <arglist>(const Vector &amp;mu, const Vector &amp;sigmas)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Vector</type>
      <name>mu_</name>
      <anchorfile>a03231.html</anchorfile>
      <anchor>ad12d58b8b5c00ba93702bcccf15e6b4b</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>boost::serialization::access</name>
      <anchorfile>a03231.html</anchorfile>
      <anchor>ac98d07dd8f7b70e16ccb9a01abf56b9c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::Constraint</name>
    <filename>a04219.html</filename>
    <base>gtsam::DiscreteFactor</base>
    <member kind="function">
      <type></type>
      <name>Constraint</name>
      <anchorfile>a04219.html</anchorfile>
      <anchor>a30830bdf18fd5ae679c58171ffcb11cd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Constraint</name>
      <anchorfile>a04219.html</anchorfile>
      <anchor>a8fb05a92fff3a02b442d25e0a0b55fd7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual shared_ptr</type>
      <name>partiallyApply</name>
      <anchorfile>a04219.html</anchorfile>
      <anchor>a3593df1b8c600a6c95d06b1c5216617a</anchor>
      <arglist>(const Values &amp;) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual shared_ptr</type>
      <name>partiallyApply</name>
      <anchorfile>a04219.html</anchorfile>
      <anchor>ac1485e2d7e97d794cae79ec053a73bac</anchor>
      <arglist>(const std::vector&lt; Domain &gt; &amp;) const =0</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Constraint</name>
      <anchorfile>a04219.html</anchorfile>
      <anchor>a30830bdf18fd5ae679c58171ffcb11cd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Constraint</name>
      <anchorfile>a04219.html</anchorfile>
      <anchor>a8fb05a92fff3a02b442d25e0a0b55fd7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual shared_ptr</type>
      <name>partiallyApply</name>
      <anchorfile>a04219.html</anchorfile>
      <anchor>a3593df1b8c600a6c95d06b1c5216617a</anchor>
      <arglist>(const Values &amp;) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual shared_ptr</type>
      <name>partiallyApply</name>
      <anchorfile>a04219.html</anchorfile>
      <anchor>ac1485e2d7e97d794cae79ec053a73bac</anchor>
      <arglist>(const std::vector&lt; Domain &gt; &amp;) const =0</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>Constraint</name>
      <anchorfile>a04219.html</anchorfile>
      <anchor>a2ba8bfb584aa5d3a8e10264630fea7cc</anchor>
      <arglist>(const KeyVector &amp;js)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>Constraint</name>
      <anchorfile>a04219.html</anchorfile>
      <anchor>ac65b64bd3106f19619766800423d72de</anchor>
      <arglist>(Key j)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>Constraint</name>
      <anchorfile>a04219.html</anchorfile>
      <anchor>a641a803990fd91bafea6683a5c05474b</anchor>
      <arglist>(Key j1, Key j2)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>Constraint</name>
      <anchorfile>a04219.html</anchorfile>
      <anchor>ab4ad985f589a56d47ee4e5168cb6d771</anchor>
      <arglist>(KeyIterator beginKey, KeyIterator endKey)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>gtsam::ConstructorTraversalData</name>
    <filename>a03003.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <class kind="class">gtsam::ConstructorTraversalData::SymbolicFactors</class>
  </compound>
  <compound kind="class">
    <name>gtsam::CRefCallAddCopy</name>
    <filename>a02963.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="class">
    <name>gtsam::CRefCallPushBack</name>
    <filename>a02955.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="class">
    <name>gtsam::CSP</name>
    <filename>a04223.html</filename>
    <base>gtsam::DiscreteFactorGraph</base>
    <member kind="function">
      <type>void</type>
      <name>addSingleValue</name>
      <anchorfile>a04223.html</anchorfile>
      <anchor>a31dbd12c4fe55698ad8c5234e5ea1c03</anchor>
      <arglist>(const DiscreteKey &amp;dkey, size_t value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addAllDiff</name>
      <anchorfile>a04223.html</anchorfile>
      <anchor>af4defecc411aa135ec3ca05a923bed04</anchor>
      <arglist>(const DiscreteKey &amp;key1, const DiscreteKey &amp;key2)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addAllDiff</name>
      <anchorfile>a04223.html</anchorfile>
      <anchor>aa7c9a418cb57874c801408aa17853b39</anchor>
      <arglist>(const DiscreteKeys &amp;dkeys)</arglist>
    </member>
    <member kind="function">
      <type>sharedValues</type>
      <name>optimalAssignment</name>
      <anchorfile>a04223.html</anchorfile>
      <anchor>a8ebe518f7b3c6e2a479fba8ee09cad98</anchor>
      <arglist>(OptionalOrdering ordering=boost::none) const</arglist>
    </member>
    <member kind="typedef">
      <type>KeyVector</type>
      <name>Indices</name>
      <anchorfile>a04223.html</anchorfile>
      <anchor>a7968eaceebeb786bceb815eb790f3364</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::Cyclic</name>
    <filename>a02587.html</filename>
    <templarg>N</templarg>
    <member kind="function">
      <type></type>
      <name>Cyclic</name>
      <anchorfile>a02587.html</anchorfile>
      <anchor>a9fe359009a45861d7aed46f4895fc123</anchor>
      <arglist>(size_t i)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Cyclic</name>
      <anchorfile>a02587.html</anchorfile>
      <anchor>a7d391305f0d5d8928f4e87260eeb7132</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator size_t</name>
      <anchorfile>a02587.html</anchorfile>
      <anchor>adec1fe1583750a51eb414ab4c81cc7db</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Cyclic</type>
      <name>operator+</name>
      <anchorfile>a02587.html</anchorfile>
      <anchor>af8d1ead3b8a7c75fea482f87ca95d6e6</anchor>
      <arglist>(const Cyclic &amp;h) const</arglist>
    </member>
    <member kind="function">
      <type>Cyclic</type>
      <name>operator-</name>
      <anchorfile>a02587.html</anchorfile>
      <anchor>ada127fe6c598f530235f72657598762f</anchor>
      <arglist>(const Cyclic &amp;h) const</arglist>
    </member>
    <member kind="function">
      <type>Cyclic</type>
      <name>operator-</name>
      <anchorfile>a02587.html</anchorfile>
      <anchor>afc3663d590ddf7bf836a59364c5a522d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>a02587.html</anchorfile>
      <anchor>a7b94d8b155fdce35f6141c2eb648745c</anchor>
      <arglist>(const std::string &amp;s=&quot;&quot;) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>equals</name>
      <anchorfile>a02587.html</anchorfile>
      <anchor>a460e4d6082e92c1e7e655b0cab64c42a</anchor>
      <arglist>(const Cyclic &amp;other, double tol=1e-9) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::noiseModel::mEstimator::DCS</name>
    <filename>a03275.html</filename>
    <base>gtsam::noiseModel::mEstimator::Base</base>
    <member kind="friend">
      <type>friend class</type>
      <name>boost::serialization::access</name>
      <anchorfile>a03275.html</anchorfile>
      <anchor>ac98d07dd8f7b70e16ccb9a01abf56b9c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::DecisionTree</name>
    <filename>a02359.html</filename>
    <templarg>L</templarg>
    <templarg>Y</templarg>
    <member kind="function">
      <type></type>
      <name>DecisionTree</name>
      <anchorfile>a02359.html</anchorfile>
      <anchor>a6427d8a417f455f8e143ab09c3d04209</anchor>
      <arglist>(const Y &amp;y)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DecisionTree</name>
      <anchorfile>a02359.html</anchorfile>
      <anchor>ae0b844473823aa09c71e668449509cd2</anchor>
      <arglist>(const L &amp;label, const Y &amp;y1, const Y &amp;y2)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DecisionTree</name>
      <anchorfile>a02359.html</anchorfile>
      <anchor>aaa6cb1a9966203a7f43ccd31b335ca7d</anchor>
      <arglist>(const LabelC &amp;label, const Y &amp;y1, const Y &amp;y2)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DecisionTree</name>
      <anchorfile>a02359.html</anchorfile>
      <anchor>ad754d8699cb205788f889f012781bdc2</anchor>
      <arglist>(const std::vector&lt; LabelC &gt; &amp;labelCs, const std::vector&lt; Y &gt; &amp;ys)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DecisionTree</name>
      <anchorfile>a02359.html</anchorfile>
      <anchor>a3a9a4b4209812f071c1225d9542fa443</anchor>
      <arglist>(const std::vector&lt; LabelC &gt; &amp;labelCs, const std::string &amp;table)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DecisionTree</name>
      <anchorfile>a02359.html</anchorfile>
      <anchor>a1d535f26a06302403a1bd6dcac87b041</anchor>
      <arglist>(Iterator begin, Iterator end, const L &amp;label)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DecisionTree</name>
      <anchorfile>a02359.html</anchorfile>
      <anchor>afb65bfe5d3dc2b8f294ea894aabc25a3</anchor>
      <arglist>(const L &amp;label, const DecisionTree &amp;f0, const DecisionTree &amp;f1)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DecisionTree</name>
      <anchorfile>a02359.html</anchorfile>
      <anchor>aae3a9da146fe352b24b401922676cb37</anchor>
      <arglist>(const DecisionTree&lt; M, X &gt; &amp;other, const std::map&lt; M, L &gt; &amp;map, boost::function&lt; Y(const X &amp;)&gt; op)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>a02359.html</anchorfile>
      <anchor>aea4d286beaeb3083068b052f42b2921b</anchor>
      <arglist>(const std::string &amp;s=&quot;DecisionTree&quot;) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~DecisionTree</name>
      <anchorfile>a02359.html</anchorfile>
      <anchor>a13241b8776eaca6bb50144462e01f94e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>a02359.html</anchorfile>
      <anchor>ad9c9fc1b8f2aa6bc6466c2e7b61ee693</anchor>
      <arglist>(const DecisionTree &amp;q) const</arglist>
    </member>
    <member kind="function">
      <type>const Y &amp;</type>
      <name>operator()</name>
      <anchorfile>a02359.html</anchorfile>
      <anchor>aacfdbde11b02b8a95183b8a28af57f37</anchor>
      <arglist>(const Assignment&lt; L &gt; &amp;x) const</arglist>
    </member>
    <member kind="function">
      <type>DecisionTree</type>
      <name>apply</name>
      <anchorfile>a02359.html</anchorfile>
      <anchor>a00d49afa8ffc80de9cbdbb4489e50ffe</anchor>
      <arglist>(const Unary &amp;op) const</arglist>
    </member>
    <member kind="function">
      <type>DecisionTree</type>
      <name>apply</name>
      <anchorfile>a02359.html</anchorfile>
      <anchor>a47f7b5528330806519440a58f587c93b</anchor>
      <arglist>(const DecisionTree &amp;g, const Binary &amp;op) const</arglist>
    </member>
    <member kind="function">
      <type>DecisionTree</type>
      <name>choose</name>
      <anchorfile>a02359.html</anchorfile>
      <anchor>a0263dc037625a0f804260004b4c80b7b</anchor>
      <arglist>(const L &amp;label, size_t index) const</arglist>
    </member>
    <member kind="function">
      <type>DecisionTree</type>
      <name>combine</name>
      <anchorfile>a02359.html</anchorfile>
      <anchor>a9e2c871be4518f8487a8bd610c775924</anchor>
      <arglist>(const L &amp;label, size_t cardinality, const Binary &amp;op) const</arglist>
    </member>
    <member kind="function">
      <type>DecisionTree</type>
      <name>combine</name>
      <anchorfile>a02359.html</anchorfile>
      <anchor>a1c8ac39ffe15cbc5370a835277a9c33d</anchor>
      <arglist>(const LabelC &amp;labelC, const Binary &amp;op) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>dot</name>
      <anchorfile>a02359.html</anchorfile>
      <anchor>a7d7d45e1ee0d29f4521f773b99cc043b</anchor>
      <arglist>(std::ostream &amp;os, bool showZero=true) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>dot</name>
      <anchorfile>a02359.html</anchorfile>
      <anchor>a991144175b5a349d97b799a198c7ddc0</anchor>
      <arglist>(const std::string &amp;name, bool showZero=true) const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DecisionTree</name>
      <anchorfile>a02359.html</anchorfile>
      <anchor>a6427d8a417f455f8e143ab09c3d04209</anchor>
      <arglist>(const Y &amp;y)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DecisionTree</name>
      <anchorfile>a02359.html</anchorfile>
      <anchor>ae0b844473823aa09c71e668449509cd2</anchor>
      <arglist>(const L &amp;label, const Y &amp;y1, const Y &amp;y2)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DecisionTree</name>
      <anchorfile>a02359.html</anchorfile>
      <anchor>aaa6cb1a9966203a7f43ccd31b335ca7d</anchor>
      <arglist>(const LabelC &amp;label, const Y &amp;y1, const Y &amp;y2)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DecisionTree</name>
      <anchorfile>a02359.html</anchorfile>
      <anchor>ad754d8699cb205788f889f012781bdc2</anchor>
      <arglist>(const std::vector&lt; LabelC &gt; &amp;labelCs, const std::vector&lt; Y &gt; &amp;ys)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DecisionTree</name>
      <anchorfile>a02359.html</anchorfile>
      <anchor>a3a9a4b4209812f071c1225d9542fa443</anchor>
      <arglist>(const std::vector&lt; LabelC &gt; &amp;labelCs, const std::string &amp;table)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DecisionTree</name>
      <anchorfile>a02359.html</anchorfile>
      <anchor>a1d535f26a06302403a1bd6dcac87b041</anchor>
      <arglist>(Iterator begin, Iterator end, const L &amp;label)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DecisionTree</name>
      <anchorfile>a02359.html</anchorfile>
      <anchor>afb65bfe5d3dc2b8f294ea894aabc25a3</anchor>
      <arglist>(const L &amp;label, const DecisionTree &amp;f0, const DecisionTree &amp;f1)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DecisionTree</name>
      <anchorfile>a02359.html</anchorfile>
      <anchor>aae3a9da146fe352b24b401922676cb37</anchor>
      <arglist>(const DecisionTree&lt; M, X &gt; &amp;other, const std::map&lt; M, L &gt; &amp;map, boost::function&lt; Y(const X &amp;)&gt; op)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>a02359.html</anchorfile>
      <anchor>aea4d286beaeb3083068b052f42b2921b</anchor>
      <arglist>(const std::string &amp;s=&quot;DecisionTree&quot;) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~DecisionTree</name>
      <anchorfile>a02359.html</anchorfile>
      <anchor>a13241b8776eaca6bb50144462e01f94e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>a02359.html</anchorfile>
      <anchor>ad9c9fc1b8f2aa6bc6466c2e7b61ee693</anchor>
      <arglist>(const DecisionTree &amp;q) const</arglist>
    </member>
    <member kind="function">
      <type>const Y &amp;</type>
      <name>operator()</name>
      <anchorfile>a02359.html</anchorfile>
      <anchor>aacfdbde11b02b8a95183b8a28af57f37</anchor>
      <arglist>(const Assignment&lt; L &gt; &amp;x) const</arglist>
    </member>
    <member kind="function">
      <type>DecisionTree</type>
      <name>apply</name>
      <anchorfile>a02359.html</anchorfile>
      <anchor>a00d49afa8ffc80de9cbdbb4489e50ffe</anchor>
      <arglist>(const Unary &amp;op) const</arglist>
    </member>
    <member kind="function">
      <type>DecisionTree</type>
      <name>apply</name>
      <anchorfile>a02359.html</anchorfile>
      <anchor>a47f7b5528330806519440a58f587c93b</anchor>
      <arglist>(const DecisionTree &amp;g, const Binary &amp;op) const</arglist>
    </member>
    <member kind="function">
      <type>DecisionTree</type>
      <name>choose</name>
      <anchorfile>a02359.html</anchorfile>
      <anchor>a0263dc037625a0f804260004b4c80b7b</anchor>
      <arglist>(const L &amp;label, size_t index) const</arglist>
    </member>
    <member kind="function">
      <type>DecisionTree</type>
      <name>combine</name>
      <anchorfile>a02359.html</anchorfile>
      <anchor>a9e2c871be4518f8487a8bd610c775924</anchor>
      <arglist>(const L &amp;label, size_t cardinality, const Binary &amp;op) const</arglist>
    </member>
    <member kind="function">
      <type>DecisionTree</type>
      <name>combine</name>
      <anchorfile>a02359.html</anchorfile>
      <anchor>a1c8ac39ffe15cbc5370a835277a9c33d</anchor>
      <arglist>(const LabelC &amp;labelC, const Binary &amp;op) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>dot</name>
      <anchorfile>a02359.html</anchorfile>
      <anchor>a7d7d45e1ee0d29f4521f773b99cc043b</anchor>
      <arglist>(std::ostream &amp;os, bool showZero=true) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>dot</name>
      <anchorfile>a02359.html</anchorfile>
      <anchor>a991144175b5a349d97b799a198c7ddc0</anchor>
      <arglist>(const std::string &amp;name, bool showZero=true) const</arglist>
    </member>
    <member kind="typedef">
      <type>boost::function&lt; Y(const Y &amp;)&gt;</type>
      <name>Unary</name>
      <anchorfile>a02359.html</anchorfile>
      <anchor>a75766d048e6618d1975d1a91a67c904e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::pair&lt; L, size_t &gt;</type>
      <name>LabelC</name>
      <anchorfile>a02359.html</anchorfile>
      <anchor>a8fd239c82a4836b3e6d2ce39b9c46e7f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Node::Ptr</type>
      <name>NodePtr</name>
      <anchorfile>a02359.html</anchorfile>
      <anchor>aba6a583909719d5bc3d8c0cc50906270</anchor>
      <arglist></arglist>
    </member>
    <class kind="class">gtsam::DecisionTree::Choice</class>
    <class kind="class">gtsam::DecisionTree::Leaf</class>
    <class kind="class">gtsam::DecisionTree::Node</class>
    <member kind="function" protection="protected">
      <type>NodePtr</type>
      <name>create</name>
      <anchorfile>a02359.html</anchorfile>
      <anchor>a2050d2b05dfa96b77a632688284530ef</anchor>
      <arglist>(It begin, It end, ValueIt beginY, ValueIt endY) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>NodePtr</type>
      <name>convert</name>
      <anchorfile>a02359.html</anchorfile>
      <anchor>aeb698380d05334599cc8f76810e45740</anchor>
      <arglist>(const typename DecisionTree&lt; M, X &gt;::NodePtr &amp;f, const std::map&lt; M, L &gt; &amp;map, boost::function&lt; Y(const X &amp;)&gt; op)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>DecisionTree</name>
      <anchorfile>a02359.html</anchorfile>
      <anchor>af290fdb29bb254e51bfa295208655bcf</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DecisionTree&lt; Key, double &gt;</name>
    <filename>a02359.html</filename>
    <member kind="function">
      <type></type>
      <name>DecisionTree</name>
      <anchorfile>a02359.html</anchorfile>
      <anchor>a6427d8a417f455f8e143ab09c3d04209</anchor>
      <arglist>(const double &amp;y)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DecisionTree</name>
      <anchorfile>a02359.html</anchorfile>
      <anchor>ae0b844473823aa09c71e668449509cd2</anchor>
      <arglist>(const Key &amp;label, const double &amp;y1, const double &amp;y2)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DecisionTree</name>
      <anchorfile>a02359.html</anchorfile>
      <anchor>aaa6cb1a9966203a7f43ccd31b335ca7d</anchor>
      <arglist>(const LabelC &amp;label, const double &amp;y1, const double &amp;y2)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DecisionTree</name>
      <anchorfile>a02359.html</anchorfile>
      <anchor>ad754d8699cb205788f889f012781bdc2</anchor>
      <arglist>(const std::vector&lt; LabelC &gt; &amp;labelCs, const std::vector&lt; double &gt; &amp;ys)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DecisionTree</name>
      <anchorfile>a02359.html</anchorfile>
      <anchor>a3a9a4b4209812f071c1225d9542fa443</anchor>
      <arglist>(const std::vector&lt; LabelC &gt; &amp;labelCs, const std::string &amp;table)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DecisionTree</name>
      <anchorfile>a02359.html</anchorfile>
      <anchor>a1d535f26a06302403a1bd6dcac87b041</anchor>
      <arglist>(Iterator begin, Iterator end, const Key &amp;label)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DecisionTree</name>
      <anchorfile>a02359.html</anchorfile>
      <anchor>afb65bfe5d3dc2b8f294ea894aabc25a3</anchor>
      <arglist>(const Key &amp;label, const DecisionTree &amp;f0, const DecisionTree &amp;f1)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DecisionTree</name>
      <anchorfile>a02359.html</anchorfile>
      <anchor>aae3a9da146fe352b24b401922676cb37</anchor>
      <arglist>(const DecisionTree&lt; M, X &gt; &amp;other, const std::map&lt; M, Key &gt; &amp;map, boost::function&lt; double(const X &amp;)&gt; op)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>a02359.html</anchorfile>
      <anchor>aea4d286beaeb3083068b052f42b2921b</anchor>
      <arglist>(const std::string &amp;s=&quot;DecisionTree&quot;) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~DecisionTree</name>
      <anchorfile>a02359.html</anchorfile>
      <anchor>a13241b8776eaca6bb50144462e01f94e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>a02359.html</anchorfile>
      <anchor>ad9c9fc1b8f2aa6bc6466c2e7b61ee693</anchor>
      <arglist>(const DecisionTree &amp;q) const</arglist>
    </member>
    <member kind="function">
      <type>const double &amp;</type>
      <name>operator()</name>
      <anchorfile>a02359.html</anchorfile>
      <anchor>aacfdbde11b02b8a95183b8a28af57f37</anchor>
      <arglist>(const Assignment&lt; Key &gt; &amp;x) const</arglist>
    </member>
    <member kind="function">
      <type>DecisionTree</type>
      <name>apply</name>
      <anchorfile>a02359.html</anchorfile>
      <anchor>a00d49afa8ffc80de9cbdbb4489e50ffe</anchor>
      <arglist>(const Unary &amp;op) const</arglist>
    </member>
    <member kind="function">
      <type>DecisionTree</type>
      <name>apply</name>
      <anchorfile>a02359.html</anchorfile>
      <anchor>a47f7b5528330806519440a58f587c93b</anchor>
      <arglist>(const DecisionTree &amp;g, const Binary &amp;op) const</arglist>
    </member>
    <member kind="function">
      <type>DecisionTree</type>
      <name>choose</name>
      <anchorfile>a02359.html</anchorfile>
      <anchor>a0263dc037625a0f804260004b4c80b7b</anchor>
      <arglist>(const Key &amp;label, size_t index) const</arglist>
    </member>
    <member kind="function">
      <type>DecisionTree</type>
      <name>combine</name>
      <anchorfile>a02359.html</anchorfile>
      <anchor>a9e2c871be4518f8487a8bd610c775924</anchor>
      <arglist>(const Key &amp;label, size_t cardinality, const Binary &amp;op) const</arglist>
    </member>
    <member kind="function">
      <type>DecisionTree</type>
      <name>combine</name>
      <anchorfile>a02359.html</anchorfile>
      <anchor>a1c8ac39ffe15cbc5370a835277a9c33d</anchor>
      <arglist>(const LabelC &amp;labelC, const Binary &amp;op) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>dot</name>
      <anchorfile>a02359.html</anchorfile>
      <anchor>a7d7d45e1ee0d29f4521f773b99cc043b</anchor>
      <arglist>(std::ostream &amp;os, bool showZero=true) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>dot</name>
      <anchorfile>a02359.html</anchorfile>
      <anchor>a991144175b5a349d97b799a198c7ddc0</anchor>
      <arglist>(const std::string &amp;name, bool showZero=true) const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DecisionTree</name>
      <anchorfile>a02359.html</anchorfile>
      <anchor>a6427d8a417f455f8e143ab09c3d04209</anchor>
      <arglist>(const double &amp;y)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DecisionTree</name>
      <anchorfile>a02359.html</anchorfile>
      <anchor>ae0b844473823aa09c71e668449509cd2</anchor>
      <arglist>(const Key &amp;label, const double &amp;y1, const double &amp;y2)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DecisionTree</name>
      <anchorfile>a02359.html</anchorfile>
      <anchor>aaa6cb1a9966203a7f43ccd31b335ca7d</anchor>
      <arglist>(const LabelC &amp;label, const double &amp;y1, const double &amp;y2)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DecisionTree</name>
      <anchorfile>a02359.html</anchorfile>
      <anchor>ad754d8699cb205788f889f012781bdc2</anchor>
      <arglist>(const std::vector&lt; LabelC &gt; &amp;labelCs, const std::vector&lt; double &gt; &amp;ys)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DecisionTree</name>
      <anchorfile>a02359.html</anchorfile>
      <anchor>a3a9a4b4209812f071c1225d9542fa443</anchor>
      <arglist>(const std::vector&lt; LabelC &gt; &amp;labelCs, const std::string &amp;table)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DecisionTree</name>
      <anchorfile>a02359.html</anchorfile>
      <anchor>a1d535f26a06302403a1bd6dcac87b041</anchor>
      <arglist>(Iterator begin, Iterator end, const Key &amp;label)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DecisionTree</name>
      <anchorfile>a02359.html</anchorfile>
      <anchor>afb65bfe5d3dc2b8f294ea894aabc25a3</anchor>
      <arglist>(const Key &amp;label, const DecisionTree &amp;f0, const DecisionTree &amp;f1)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DecisionTree</name>
      <anchorfile>a02359.html</anchorfile>
      <anchor>aae3a9da146fe352b24b401922676cb37</anchor>
      <arglist>(const DecisionTree&lt; M, X &gt; &amp;other, const std::map&lt; M, Key &gt; &amp;map, boost::function&lt; double(const X &amp;)&gt; op)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>a02359.html</anchorfile>
      <anchor>aea4d286beaeb3083068b052f42b2921b</anchor>
      <arglist>(const std::string &amp;s=&quot;DecisionTree&quot;) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~DecisionTree</name>
      <anchorfile>a02359.html</anchorfile>
      <anchor>a13241b8776eaca6bb50144462e01f94e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>a02359.html</anchorfile>
      <anchor>ad9c9fc1b8f2aa6bc6466c2e7b61ee693</anchor>
      <arglist>(const DecisionTree &amp;q) const</arglist>
    </member>
    <member kind="function">
      <type>const double &amp;</type>
      <name>operator()</name>
      <anchorfile>a02359.html</anchorfile>
      <anchor>aacfdbde11b02b8a95183b8a28af57f37</anchor>
      <arglist>(const Assignment&lt; Key &gt; &amp;x) const</arglist>
    </member>
    <member kind="function">
      <type>DecisionTree</type>
      <name>apply</name>
      <anchorfile>a02359.html</anchorfile>
      <anchor>a00d49afa8ffc80de9cbdbb4489e50ffe</anchor>
      <arglist>(const Unary &amp;op) const</arglist>
    </member>
    <member kind="function">
      <type>DecisionTree</type>
      <name>apply</name>
      <anchorfile>a02359.html</anchorfile>
      <anchor>a47f7b5528330806519440a58f587c93b</anchor>
      <arglist>(const DecisionTree &amp;g, const Binary &amp;op) const</arglist>
    </member>
    <member kind="function">
      <type>DecisionTree</type>
      <name>choose</name>
      <anchorfile>a02359.html</anchorfile>
      <anchor>a0263dc037625a0f804260004b4c80b7b</anchor>
      <arglist>(const Key &amp;label, size_t index) const</arglist>
    </member>
    <member kind="function">
      <type>DecisionTree</type>
      <name>combine</name>
      <anchorfile>a02359.html</anchorfile>
      <anchor>a9e2c871be4518f8487a8bd610c775924</anchor>
      <arglist>(const Key &amp;label, size_t cardinality, const Binary &amp;op) const</arglist>
    </member>
    <member kind="function">
      <type>DecisionTree</type>
      <name>combine</name>
      <anchorfile>a02359.html</anchorfile>
      <anchor>a1c8ac39ffe15cbc5370a835277a9c33d</anchor>
      <arglist>(const LabelC &amp;labelC, const Binary &amp;op) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>dot</name>
      <anchorfile>a02359.html</anchorfile>
      <anchor>a7d7d45e1ee0d29f4521f773b99cc043b</anchor>
      <arglist>(std::ostream &amp;os, bool showZero=true) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>dot</name>
      <anchorfile>a02359.html</anchorfile>
      <anchor>a991144175b5a349d97b799a198c7ddc0</anchor>
      <arglist>(const std::string &amp;name, bool showZero=true) const</arglist>
    </member>
    <member kind="typedef">
      <type>boost::function&lt; double(const double &amp;)&gt;</type>
      <name>Unary</name>
      <anchorfile>a02359.html</anchorfile>
      <anchor>a75766d048e6618d1975d1a91a67c904e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::pair&lt; Key, size_t &gt;</type>
      <name>LabelC</name>
      <anchorfile>a02359.html</anchorfile>
      <anchor>a8fd239c82a4836b3e6d2ce39b9c46e7f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Node::Ptr</type>
      <name>NodePtr</name>
      <anchorfile>a02359.html</anchorfile>
      <anchor>aba6a583909719d5bc3d8c0cc50906270</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type>NodePtr</type>
      <name>create</name>
      <anchorfile>a02359.html</anchorfile>
      <anchor>a2050d2b05dfa96b77a632688284530ef</anchor>
      <arglist>(It begin, It end, ValueIt beginY, ValueIt endY) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>NodePtr</type>
      <name>convert</name>
      <anchorfile>a02359.html</anchorfile>
      <anchor>aeb698380d05334599cc8f76810e45740</anchor>
      <arglist>(const typename DecisionTree&lt; M, X &gt;::NodePtr &amp;f, const std::map&lt; M, Key &gt; &amp;map, boost::function&lt; double(const X &amp;)&gt; op)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>DecisionTree</name>
      <anchorfile>a02359.html</anchorfile>
      <anchor>af290fdb29bb254e51bfa295208655bcf</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DecisionTree&lt; L, double &gt;</name>
    <filename>a02359.html</filename>
    <member kind="function">
      <type></type>
      <name>DecisionTree</name>
      <anchorfile>a02359.html</anchorfile>
      <anchor>a6427d8a417f455f8e143ab09c3d04209</anchor>
      <arglist>(const double &amp;y)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DecisionTree</name>
      <anchorfile>a02359.html</anchorfile>
      <anchor>ae0b844473823aa09c71e668449509cd2</anchor>
      <arglist>(const L &amp;label, const double &amp;y1, const double &amp;y2)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DecisionTree</name>
      <anchorfile>a02359.html</anchorfile>
      <anchor>aaa6cb1a9966203a7f43ccd31b335ca7d</anchor>
      <arglist>(const LabelC &amp;label, const double &amp;y1, const double &amp;y2)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DecisionTree</name>
      <anchorfile>a02359.html</anchorfile>
      <anchor>ad754d8699cb205788f889f012781bdc2</anchor>
      <arglist>(const std::vector&lt; LabelC &gt; &amp;labelCs, const std::vector&lt; double &gt; &amp;ys)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DecisionTree</name>
      <anchorfile>a02359.html</anchorfile>
      <anchor>a3a9a4b4209812f071c1225d9542fa443</anchor>
      <arglist>(const std::vector&lt; LabelC &gt; &amp;labelCs, const std::string &amp;table)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DecisionTree</name>
      <anchorfile>a02359.html</anchorfile>
      <anchor>a1d535f26a06302403a1bd6dcac87b041</anchor>
      <arglist>(Iterator begin, Iterator end, const L &amp;label)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DecisionTree</name>
      <anchorfile>a02359.html</anchorfile>
      <anchor>afb65bfe5d3dc2b8f294ea894aabc25a3</anchor>
      <arglist>(const L &amp;label, const DecisionTree &amp;f0, const DecisionTree &amp;f1)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DecisionTree</name>
      <anchorfile>a02359.html</anchorfile>
      <anchor>aae3a9da146fe352b24b401922676cb37</anchor>
      <arglist>(const DecisionTree&lt; M, X &gt; &amp;other, const std::map&lt; M, L &gt; &amp;map, boost::function&lt; double(const X &amp;)&gt; op)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>a02359.html</anchorfile>
      <anchor>aea4d286beaeb3083068b052f42b2921b</anchor>
      <arglist>(const std::string &amp;s=&quot;DecisionTree&quot;) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~DecisionTree</name>
      <anchorfile>a02359.html</anchorfile>
      <anchor>a13241b8776eaca6bb50144462e01f94e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>a02359.html</anchorfile>
      <anchor>ad9c9fc1b8f2aa6bc6466c2e7b61ee693</anchor>
      <arglist>(const DecisionTree &amp;q) const</arglist>
    </member>
    <member kind="function">
      <type>const double &amp;</type>
      <name>operator()</name>
      <anchorfile>a02359.html</anchorfile>
      <anchor>aacfdbde11b02b8a95183b8a28af57f37</anchor>
      <arglist>(const Assignment&lt; L &gt; &amp;x) const</arglist>
    </member>
    <member kind="function">
      <type>DecisionTree</type>
      <name>apply</name>
      <anchorfile>a02359.html</anchorfile>
      <anchor>a00d49afa8ffc80de9cbdbb4489e50ffe</anchor>
      <arglist>(const Unary &amp;op) const</arglist>
    </member>
    <member kind="function">
      <type>DecisionTree</type>
      <name>apply</name>
      <anchorfile>a02359.html</anchorfile>
      <anchor>a47f7b5528330806519440a58f587c93b</anchor>
      <arglist>(const DecisionTree &amp;g, const Binary &amp;op) const</arglist>
    </member>
    <member kind="function">
      <type>DecisionTree</type>
      <name>choose</name>
      <anchorfile>a02359.html</anchorfile>
      <anchor>a0263dc037625a0f804260004b4c80b7b</anchor>
      <arglist>(const L &amp;label, size_t index) const</arglist>
    </member>
    <member kind="function">
      <type>DecisionTree</type>
      <name>combine</name>
      <anchorfile>a02359.html</anchorfile>
      <anchor>a9e2c871be4518f8487a8bd610c775924</anchor>
      <arglist>(const L &amp;label, size_t cardinality, const Binary &amp;op) const</arglist>
    </member>
    <member kind="function">
      <type>DecisionTree</type>
      <name>combine</name>
      <anchorfile>a02359.html</anchorfile>
      <anchor>a1c8ac39ffe15cbc5370a835277a9c33d</anchor>
      <arglist>(const LabelC &amp;labelC, const Binary &amp;op) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>dot</name>
      <anchorfile>a02359.html</anchorfile>
      <anchor>a7d7d45e1ee0d29f4521f773b99cc043b</anchor>
      <arglist>(std::ostream &amp;os, bool showZero=true) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>dot</name>
      <anchorfile>a02359.html</anchorfile>
      <anchor>a991144175b5a349d97b799a198c7ddc0</anchor>
      <arglist>(const std::string &amp;name, bool showZero=true) const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DecisionTree</name>
      <anchorfile>a02359.html</anchorfile>
      <anchor>a6427d8a417f455f8e143ab09c3d04209</anchor>
      <arglist>(const double &amp;y)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DecisionTree</name>
      <anchorfile>a02359.html</anchorfile>
      <anchor>ae0b844473823aa09c71e668449509cd2</anchor>
      <arglist>(const L &amp;label, const double &amp;y1, const double &amp;y2)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DecisionTree</name>
      <anchorfile>a02359.html</anchorfile>
      <anchor>aaa6cb1a9966203a7f43ccd31b335ca7d</anchor>
      <arglist>(const LabelC &amp;label, const double &amp;y1, const double &amp;y2)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DecisionTree</name>
      <anchorfile>a02359.html</anchorfile>
      <anchor>ad754d8699cb205788f889f012781bdc2</anchor>
      <arglist>(const std::vector&lt; LabelC &gt; &amp;labelCs, const std::vector&lt; double &gt; &amp;ys)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DecisionTree</name>
      <anchorfile>a02359.html</anchorfile>
      <anchor>a3a9a4b4209812f071c1225d9542fa443</anchor>
      <arglist>(const std::vector&lt; LabelC &gt; &amp;labelCs, const std::string &amp;table)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DecisionTree</name>
      <anchorfile>a02359.html</anchorfile>
      <anchor>a1d535f26a06302403a1bd6dcac87b041</anchor>
      <arglist>(Iterator begin, Iterator end, const L &amp;label)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DecisionTree</name>
      <anchorfile>a02359.html</anchorfile>
      <anchor>afb65bfe5d3dc2b8f294ea894aabc25a3</anchor>
      <arglist>(const L &amp;label, const DecisionTree &amp;f0, const DecisionTree &amp;f1)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DecisionTree</name>
      <anchorfile>a02359.html</anchorfile>
      <anchor>aae3a9da146fe352b24b401922676cb37</anchor>
      <arglist>(const DecisionTree&lt; M, X &gt; &amp;other, const std::map&lt; M, L &gt; &amp;map, boost::function&lt; double(const X &amp;)&gt; op)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>a02359.html</anchorfile>
      <anchor>aea4d286beaeb3083068b052f42b2921b</anchor>
      <arglist>(const std::string &amp;s=&quot;DecisionTree&quot;) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~DecisionTree</name>
      <anchorfile>a02359.html</anchorfile>
      <anchor>a13241b8776eaca6bb50144462e01f94e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>a02359.html</anchorfile>
      <anchor>ad9c9fc1b8f2aa6bc6466c2e7b61ee693</anchor>
      <arglist>(const DecisionTree &amp;q) const</arglist>
    </member>
    <member kind="function">
      <type>const double &amp;</type>
      <name>operator()</name>
      <anchorfile>a02359.html</anchorfile>
      <anchor>aacfdbde11b02b8a95183b8a28af57f37</anchor>
      <arglist>(const Assignment&lt; L &gt; &amp;x) const</arglist>
    </member>
    <member kind="function">
      <type>DecisionTree</type>
      <name>apply</name>
      <anchorfile>a02359.html</anchorfile>
      <anchor>a00d49afa8ffc80de9cbdbb4489e50ffe</anchor>
      <arglist>(const Unary &amp;op) const</arglist>
    </member>
    <member kind="function">
      <type>DecisionTree</type>
      <name>apply</name>
      <anchorfile>a02359.html</anchorfile>
      <anchor>a47f7b5528330806519440a58f587c93b</anchor>
      <arglist>(const DecisionTree &amp;g, const Binary &amp;op) const</arglist>
    </member>
    <member kind="function">
      <type>DecisionTree</type>
      <name>choose</name>
      <anchorfile>a02359.html</anchorfile>
      <anchor>a0263dc037625a0f804260004b4c80b7b</anchor>
      <arglist>(const L &amp;label, size_t index) const</arglist>
    </member>
    <member kind="function">
      <type>DecisionTree</type>
      <name>combine</name>
      <anchorfile>a02359.html</anchorfile>
      <anchor>a9e2c871be4518f8487a8bd610c775924</anchor>
      <arglist>(const L &amp;label, size_t cardinality, const Binary &amp;op) const</arglist>
    </member>
    <member kind="function">
      <type>DecisionTree</type>
      <name>combine</name>
      <anchorfile>a02359.html</anchorfile>
      <anchor>a1c8ac39ffe15cbc5370a835277a9c33d</anchor>
      <arglist>(const LabelC &amp;labelC, const Binary &amp;op) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>dot</name>
      <anchorfile>a02359.html</anchorfile>
      <anchor>a7d7d45e1ee0d29f4521f773b99cc043b</anchor>
      <arglist>(std::ostream &amp;os, bool showZero=true) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>dot</name>
      <anchorfile>a02359.html</anchorfile>
      <anchor>a991144175b5a349d97b799a198c7ddc0</anchor>
      <arglist>(const std::string &amp;name, bool showZero=true) const</arglist>
    </member>
    <member kind="typedef">
      <type>boost::function&lt; double(const double &amp;)&gt;</type>
      <name>Unary</name>
      <anchorfile>a02359.html</anchorfile>
      <anchor>a75766d048e6618d1975d1a91a67c904e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::pair&lt; L, size_t &gt;</type>
      <name>LabelC</name>
      <anchorfile>a02359.html</anchorfile>
      <anchor>a8fd239c82a4836b3e6d2ce39b9c46e7f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Node::Ptr</type>
      <name>NodePtr</name>
      <anchorfile>a02359.html</anchorfile>
      <anchor>aba6a583909719d5bc3d8c0cc50906270</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type>NodePtr</type>
      <name>create</name>
      <anchorfile>a02359.html</anchorfile>
      <anchor>a2050d2b05dfa96b77a632688284530ef</anchor>
      <arglist>(It begin, It end, ValueIt beginY, ValueIt endY) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>NodePtr</type>
      <name>convert</name>
      <anchorfile>a02359.html</anchorfile>
      <anchor>aeb698380d05334599cc8f76810e45740</anchor>
      <arglist>(const typename DecisionTree&lt; M, X &gt;::NodePtr &amp;f, const std::map&lt; M, L &gt; &amp;map, boost::function&lt; double(const X &amp;)&gt; op)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>DecisionTree</name>
      <anchorfile>a02359.html</anchorfile>
      <anchor>af290fdb29bb254e51bfa295208655bcf</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::DecisionTreeFactor</name>
    <filename>a02367.html</filename>
    <base>gtsam::DiscreteFactor</base>
    <base>gtsam::Potentials</base>
    <member kind="function">
      <type></type>
      <name>DecisionTreeFactor</name>
      <anchorfile>a02367.html</anchorfile>
      <anchor>ad52196341d54cfcb396eb62a52ceb7d6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DecisionTreeFactor</name>
      <anchorfile>a02367.html</anchorfile>
      <anchor>a0276612e37428bac98fbe8f00f280cbb</anchor>
      <arglist>(const DiscreteKeys &amp;keys, const ADT &amp;potentials)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DecisionTreeFactor</name>
      <anchorfile>a02367.html</anchorfile>
      <anchor>a143b3b93ebd73bfa38c90f48e4374cff</anchor>
      <arglist>(const DiscreteKeys &amp;keys, SOURCE table)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DecisionTreeFactor</name>
      <anchorfile>a02367.html</anchorfile>
      <anchor>a5f99b1a4066ec5cf56d4d5a89cb492be</anchor>
      <arglist>(const DiscreteConditional &amp;c)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>equals</name>
      <anchorfile>a02367.html</anchorfile>
      <anchor>ae5cc737ee87f8234f5c9012421730742</anchor>
      <arglist>(const DiscreteFactor &amp;other, double tol=1e-9) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>operator()</name>
      <anchorfile>a02367.html</anchorfile>
      <anchor>a517571d5a38149191ca26f092c243d3b</anchor>
      <arglist>(const Values &amp;values) const</arglist>
    </member>
    <member kind="function">
      <type>DecisionTreeFactor</type>
      <name>operator *</name>
      <anchorfile>a02367.html</anchorfile>
      <anchor>a88a04d31913f0002adc74df30fd54f6c</anchor>
      <arglist>(const DecisionTreeFactor &amp;f) const</arglist>
    </member>
    <member kind="function">
      <type>DecisionTreeFactor</type>
      <name>operator/</name>
      <anchorfile>a02367.html</anchorfile>
      <anchor>ae4e9dfe9ba689937cca26a497920ef43</anchor>
      <arglist>(const DecisionTreeFactor &amp;f) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual DecisionTreeFactor</type>
      <name>toDecisionTreeFactor</name>
      <anchorfile>a02367.html</anchorfile>
      <anchor>a021a6e170950d8fc18db0e0731d61ca4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>shared_ptr</type>
      <name>sum</name>
      <anchorfile>a02367.html</anchorfile>
      <anchor>a98817134685693d2eeb11f3056835ec3</anchor>
      <arglist>(size_t nrFrontals) const</arglist>
    </member>
    <member kind="function">
      <type>shared_ptr</type>
      <name>sum</name>
      <anchorfile>a02367.html</anchorfile>
      <anchor>a21a92514194030c43d23d7ad9d159099</anchor>
      <arglist>(const Ordering &amp;keys) const</arglist>
    </member>
    <member kind="function">
      <type>shared_ptr</type>
      <name>max</name>
      <anchorfile>a02367.html</anchorfile>
      <anchor>a449d2ce18c2b905a5a54694691972d4a</anchor>
      <arglist>(size_t nrFrontals) const</arglist>
    </member>
    <member kind="function">
      <type>DecisionTreeFactor</type>
      <name>apply</name>
      <anchorfile>a02367.html</anchorfile>
      <anchor>a6e0e32506f4207cb06834effd717bac3</anchor>
      <arglist>(const DecisionTreeFactor &amp;f, ADT::Binary op) const</arglist>
    </member>
    <member kind="function">
      <type>shared_ptr</type>
      <name>combine</name>
      <anchorfile>a02367.html</anchorfile>
      <anchor>a3ee7a26df3eb4606abe8b2d59c62ef29</anchor>
      <arglist>(size_t nrFrontals, ADT::Binary op) const</arglist>
    </member>
    <member kind="function">
      <type>shared_ptr</type>
      <name>combine</name>
      <anchorfile>a02367.html</anchorfile>
      <anchor>af97c886654f4c5edc890e976e7534de2</anchor>
      <arglist>(const Ordering &amp;keys, ADT::Binary op) const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DecisionTreeFactor</name>
      <anchorfile>a02367.html</anchorfile>
      <anchor>ad52196341d54cfcb396eb62a52ceb7d6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DecisionTreeFactor</name>
      <anchorfile>a02367.html</anchorfile>
      <anchor>a0276612e37428bac98fbe8f00f280cbb</anchor>
      <arglist>(const DiscreteKeys &amp;keys, const ADT &amp;potentials)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DecisionTreeFactor</name>
      <anchorfile>a02367.html</anchorfile>
      <anchor>a143b3b93ebd73bfa38c90f48e4374cff</anchor>
      <arglist>(const DiscreteKeys &amp;keys, SOURCE table)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DecisionTreeFactor</name>
      <anchorfile>a02367.html</anchorfile>
      <anchor>a5f99b1a4066ec5cf56d4d5a89cb492be</anchor>
      <arglist>(const DiscreteConditional &amp;c)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>equals</name>
      <anchorfile>a02367.html</anchorfile>
      <anchor>ae5cc737ee87f8234f5c9012421730742</anchor>
      <arglist>(const DiscreteFactor &amp;other, double tol=1e-9) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>operator()</name>
      <anchorfile>a02367.html</anchorfile>
      <anchor>a517571d5a38149191ca26f092c243d3b</anchor>
      <arglist>(const Values &amp;values) const</arglist>
    </member>
    <member kind="function">
      <type>DecisionTreeFactor</type>
      <name>operator *</name>
      <anchorfile>a02367.html</anchorfile>
      <anchor>a88a04d31913f0002adc74df30fd54f6c</anchor>
      <arglist>(const DecisionTreeFactor &amp;f) const</arglist>
    </member>
    <member kind="function">
      <type>DecisionTreeFactor</type>
      <name>operator/</name>
      <anchorfile>a02367.html</anchorfile>
      <anchor>ae4e9dfe9ba689937cca26a497920ef43</anchor>
      <arglist>(const DecisionTreeFactor &amp;f) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual DecisionTreeFactor</type>
      <name>toDecisionTreeFactor</name>
      <anchorfile>a02367.html</anchorfile>
      <anchor>a021a6e170950d8fc18db0e0731d61ca4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>shared_ptr</type>
      <name>sum</name>
      <anchorfile>a02367.html</anchorfile>
      <anchor>a98817134685693d2eeb11f3056835ec3</anchor>
      <arglist>(size_t nrFrontals) const</arglist>
    </member>
    <member kind="function">
      <type>shared_ptr</type>
      <name>sum</name>
      <anchorfile>a02367.html</anchorfile>
      <anchor>a21a92514194030c43d23d7ad9d159099</anchor>
      <arglist>(const Ordering &amp;keys) const</arglist>
    </member>
    <member kind="function">
      <type>shared_ptr</type>
      <name>max</name>
      <anchorfile>a02367.html</anchorfile>
      <anchor>a449d2ce18c2b905a5a54694691972d4a</anchor>
      <arglist>(size_t nrFrontals) const</arglist>
    </member>
    <member kind="function">
      <type>DecisionTreeFactor</type>
      <name>apply</name>
      <anchorfile>a02367.html</anchorfile>
      <anchor>a6e0e32506f4207cb06834effd717bac3</anchor>
      <arglist>(const DecisionTreeFactor &amp;f, ADT::Binary op) const</arglist>
    </member>
    <member kind="function">
      <type>shared_ptr</type>
      <name>combine</name>
      <anchorfile>a02367.html</anchorfile>
      <anchor>a3ee7a26df3eb4606abe8b2d59c62ef29</anchor>
      <arglist>(size_t nrFrontals, ADT::Binary op) const</arglist>
    </member>
    <member kind="function">
      <type>shared_ptr</type>
      <name>combine</name>
      <anchorfile>a02367.html</anchorfile>
      <anchor>af97c886654f4c5edc890e976e7534de2</anchor>
      <arglist>(const Ordering &amp;keys, ADT::Binary op) const</arglist>
    </member>
    <member kind="typedef">
      <type>DiscreteFactor</type>
      <name>Base</name>
      <anchorfile>a02367.html</anchorfile>
      <anchor>a96e20fc5f4cc476df586d28dab2da00c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::DeltaFactor</name>
    <filename>a04587.html</filename>
    <base protection="private">gtsam::NoiseModelFactor</base>
    <base>NoiseModelFactor2&lt; Pose2, Point2 &gt;</base>
    <member kind="function">
      <type></type>
      <name>DeltaFactor</name>
      <anchorfile>a04587.html</anchorfile>
      <anchor>a980a324026762555972df7d01de2774f</anchor>
      <arglist>(Key i, Key j, const Point2 &amp;measured, const SharedNoiseModel &amp;model)</arglist>
    </member>
    <member kind="function">
      <type>Vector</type>
      <name>evaluateError</name>
      <anchorfile>a04587.html</anchorfile>
      <anchor>af1ab4502045c2d612468181c4373d3c7</anchor>
      <arglist>(const Pose2 &amp;pose, const Point2 &amp;point, boost::optional&lt; Matrix &amp; &gt; H1=boost::none, boost::optional&lt; Matrix &amp; &gt; H2=boost::none) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::DeltaFactorBase</name>
    <filename>a04591.html</filename>
    <base protection="private">gtsam::NoiseModelFactor</base>
    <base>NoiseModelFactor4&lt; Pose2, Pose2, Pose2, Point2 &gt;</base>
    <member kind="function">
      <type></type>
      <name>DeltaFactorBase</name>
      <anchorfile>a04591.html</anchorfile>
      <anchor>a36cfa20e61f1e646b576829f29b02403</anchor>
      <arglist>(Key b1, Key i, Key b2, Key j, const Point2 &amp;measured, const SharedNoiseModel &amp;model)</arglist>
    </member>
    <member kind="function">
      <type>Vector</type>
      <name>evaluateError</name>
      <anchorfile>a04591.html</anchorfile>
      <anchor>a597a737f144cb102098a5de9bfd40a79</anchor>
      <arglist>(const Pose2 &amp;base1, const Pose2 &amp;pose, const Pose2 &amp;base2, const Point2 &amp;point, boost::optional&lt; Matrix &amp; &gt; H1=boost::none, boost::optional&lt; Matrix &amp; &gt; H2=boost::none, boost::optional&lt; Matrix &amp; &gt; H3=boost::none, boost::optional&lt; Matrix &amp; &gt; H4=boost::none) const</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>gtsam::ISAM2Result::DetailedResults</name>
    <filename>a03687.html</filename>
    <member kind="variable">
      <type>FastMap&lt; Key, VariableStatus &gt;</type>
      <name>variableStatus</name>
      <anchorfile>a03687.html</anchorfile>
      <anchor>a2c6eacb3cc35ccb3906baf85345ee532</anchor>
      <arglist></arglist>
    </member>
    <class kind="struct">gtsam::ISAM2Result::DetailedResults::VariableStatus</class>
  </compound>
  <compound kind="class">
    <name>gtsam::so3::DexpFunctor</name>
    <filename>a02807.html</filename>
    <base>gtsam::so3::ExpmapFunctor</base>
    <member kind="function">
      <type></type>
      <name>DexpFunctor</name>
      <anchorfile>a02807.html</anchorfile>
      <anchor>a29b8e81214974c238ab4b3be679c68bb</anchor>
      <arglist>(const Vector3 &amp;omega, bool nearZeroApprox=false)</arglist>
    </member>
    <member kind="function">
      <type>Vector3</type>
      <name>applyDexp</name>
      <anchorfile>a02807.html</anchorfile>
      <anchor>a14afce1d01aa4f28c77317999ed65288</anchor>
      <arglist>(const Vector3 &amp;v, OptionalJacobian&lt; 3, 3 &gt; H1=boost::none, OptionalJacobian&lt; 3, 3 &gt; H2=boost::none) const</arglist>
    </member>
    <member kind="function">
      <type>Vector3</type>
      <name>applyInvDexp</name>
      <anchorfile>a02807.html</anchorfile>
      <anchor>aaffb5258e5f92b1131846ea2c2fc3c17</anchor>
      <arglist>(const Vector3 &amp;v, OptionalJacobian&lt; 3, 3 &gt; H1=boost::none, OptionalJacobian&lt; 3, 3 &gt; H2=boost::none) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::DGroundConstraint</name>
    <filename>a04611.html</filename>
    <base protection="private">gtsam::NonlinearFactor</base>
    <base>PartialPriorFactor&lt; PoseRTV &gt;</base>
    <member kind="function">
      <type></type>
      <name>DGroundConstraint</name>
      <anchorfile>a04611.html</anchorfile>
      <anchor>aef6ee79ae04e38c60b1d6aa8381696a5</anchor>
      <arglist>(Key key, double height, const gtsam::SharedNoiseModel &amp;model)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DGroundConstraint</name>
      <anchorfile>a04611.html</anchorfile>
      <anchor>a7126927eeb877863f6da3e3328deca51</anchor>
      <arglist>(Key key, const Vector &amp;constraint, const gtsam::SharedNoiseModel &amp;model)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::DHeightPrior</name>
    <filename>a04599.html</filename>
    <base protection="private">gtsam::NonlinearFactor</base>
    <base>PartialPriorFactor&lt; PoseRTV &gt;</base>
  </compound>
  <compound kind="class">
    <name>gtsam::noiseModel::Diagonal</name>
    <filename>a03227.html</filename>
    <base>gtsam::noiseModel::Gaussian</base>
    <member kind="function" virtualness="virtual">
      <type>virtual Vector</type>
      <name>sigmas</name>
      <anchorfile>a03227.html</anchorfile>
      <anchor>a933b89bbdbaf02259cff9925dcde6feb</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Vector</type>
      <name>whiten</name>
      <anchorfile>a03227.html</anchorfile>
      <anchor>acbe4f6a1f30dd7578ba6e22502bfc12f</anchor>
      <arglist>(const Vector &amp;v) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Vector</type>
      <name>unwhiten</name>
      <anchorfile>a03227.html</anchorfile>
      <anchor>aa3e9e3f4b4ebb8687c3a879102034dda</anchor>
      <arglist>(const Vector &amp;v) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Matrix</type>
      <name>Whiten</name>
      <anchorfile>a03227.html</anchorfile>
      <anchor>a56a412e0ec7358555c8d592d71bd190d</anchor>
      <arglist>(const Matrix &amp;H) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>WhitenInPlace</name>
      <anchorfile>a03227.html</anchorfile>
      <anchor>a09cda79ef143e482cd1394c2205ec90c</anchor>
      <arglist>(Matrix &amp;H) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>WhitenInPlace</name>
      <anchorfile>a03227.html</anchorfile>
      <anchor>a6925f6a34d1eb7af8d25ca2258d531cc</anchor>
      <arglist>(Eigen::Block&lt; Matrix &gt; H) const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>sigma</name>
      <anchorfile>a03227.html</anchorfile>
      <anchor>a443266e681048b5d25eb386efc145664</anchor>
      <arglist>(size_t i) const</arglist>
    </member>
    <member kind="function">
      <type>const Vector &amp;</type>
      <name>invsigmas</name>
      <anchorfile>a03227.html</anchorfile>
      <anchor>aa7e42423f4d326261a0499edf5ae127a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Vector &amp;</type>
      <name>precisions</name>
      <anchorfile>a03227.html</anchorfile>
      <anchor>a8dbf8f5f0cbe7302275f74a9b90dae84</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Matrix</type>
      <name>R</name>
      <anchorfile>a03227.html</anchorfile>
      <anchor>a4dcd8388ed8e2a08c9065de8f6c388f8</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static shared_ptr</type>
      <name>Sigmas</name>
      <anchorfile>a03227.html</anchorfile>
      <anchor>a8f00b543a69c756b5277f2e89c701cc5</anchor>
      <arglist>(const Vector &amp;sigmas, bool smart=true)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static shared_ptr</type>
      <name>Variances</name>
      <anchorfile>a03227.html</anchorfile>
      <anchor>a8c23ce6bda772372da8814c0febbb36f</anchor>
      <arglist>(const Vector &amp;variances, bool smart=true)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static shared_ptr</type>
      <name>Precisions</name>
      <anchorfile>a03227.html</anchorfile>
      <anchor>a8d1a161668140ba54e1eb2fe9a7d50e0</anchor>
      <arglist>(const Vector &amp;precisions, bool smart=true)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>Diagonal</name>
      <anchorfile>a03227.html</anchorfile>
      <anchor>a52cdcdf2e0e6cda03100ba9d25605538</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>Diagonal</name>
      <anchorfile>a03227.html</anchorfile>
      <anchor>aa97d4530104dd414d2372892eb94859d</anchor>
      <arglist>(const Vector &amp;sigmas)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Vector</type>
      <name>sigmas_</name>
      <anchorfile>a03227.html</anchorfile>
      <anchor>a40cec73d5792d6ff6345de2207e571b1</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>boost::serialization::access</name>
      <anchorfile>a03227.html</anchorfile>
      <anchor>ac98d07dd8f7b70e16ccb9a01abf56b9c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::DirectProduct</name>
    <filename>a02063.html</filename>
    <member kind="function">
      <type></type>
      <name>DirectProduct</name>
      <anchorfile>a02063.html</anchorfile>
      <anchor>acfac23871b8e9ba54fdf2990e8fbbbeb</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::DirectSum</name>
    <filename>a02071.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="function">
      <type></type>
      <name>DirectSum</name>
      <anchorfile>a02071.html</anchorfile>
      <anchor>a920a249b3e2bf675eb9ae96ac25887b5</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::DiscreteBayesNet</name>
    <filename>a02375.html</filename>
    <base>FactorGraph&lt; DiscreteConditional &gt;</base>
    <member kind="function">
      <type></type>
      <name>DiscreteBayesNet</name>
      <anchorfile>a02375.html</anchorfile>
      <anchor>a7d2ca3113fe78e4f6788d120b62f9004</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DiscreteBayesNet</name>
      <anchorfile>a02375.html</anchorfile>
      <anchor>a1caa6732f0bf990da980f5154c499755</anchor>
      <arglist>(ITERATOR firstConditional, ITERATOR lastConditional)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DiscreteBayesNet</name>
      <anchorfile>a02375.html</anchorfile>
      <anchor>a73b6d262d031217311515968c7f90f70</anchor>
      <arglist>(const CONTAINER &amp;conditionals)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DiscreteBayesNet</name>
      <anchorfile>a02375.html</anchorfile>
      <anchor>a578876c094461271ac57f31f8f5212c4</anchor>
      <arglist>(const FactorGraph&lt; DERIVEDCONDITIONAL &gt; &amp;graph)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>equals</name>
      <anchorfile>a02375.html</anchorfile>
      <anchor>a1fe79940d5f7754c2156ecbc22a334da</anchor>
      <arglist>(const This &amp;bn, double tol=1e-9) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add</name>
      <anchorfile>a02375.html</anchorfile>
      <anchor>a89bf8255b448563ce57c4f20f01ce92b</anchor>
      <arglist>(const Signature &amp;s)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>evaluate</name>
      <anchorfile>a02375.html</anchorfile>
      <anchor>a86cd4eab1de2b290b9c10e2d21a3672a</anchor>
      <arglist>(const DiscreteConditional::Values &amp;values) const</arglist>
    </member>
    <member kind="function">
      <type>DiscreteFactor::sharedValues</type>
      <name>optimize</name>
      <anchorfile>a02375.html</anchorfile>
      <anchor>ad5f0ef91a7d10bc4892951e8ada9f055</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>DiscreteFactor::sharedValues</type>
      <name>sample</name>
      <anchorfile>a02375.html</anchorfile>
      <anchor>a1d166ba91c49124d1fed93eecd49e459</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DiscreteBayesNet</name>
      <anchorfile>a02375.html</anchorfile>
      <anchor>a7d2ca3113fe78e4f6788d120b62f9004</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DiscreteBayesNet</name>
      <anchorfile>a02375.html</anchorfile>
      <anchor>a1caa6732f0bf990da980f5154c499755</anchor>
      <arglist>(ITERATOR firstConditional, ITERATOR lastConditional)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DiscreteBayesNet</name>
      <anchorfile>a02375.html</anchorfile>
      <anchor>a73b6d262d031217311515968c7f90f70</anchor>
      <arglist>(const CONTAINER &amp;conditionals)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DiscreteBayesNet</name>
      <anchorfile>a02375.html</anchorfile>
      <anchor>a578876c094461271ac57f31f8f5212c4</anchor>
      <arglist>(const FactorGraph&lt; DERIVEDCONDITIONAL &gt; &amp;graph)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>equals</name>
      <anchorfile>a02375.html</anchorfile>
      <anchor>a1fe79940d5f7754c2156ecbc22a334da</anchor>
      <arglist>(const This &amp;bn, double tol=1e-9) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add</name>
      <anchorfile>a02375.html</anchorfile>
      <anchor>a89bf8255b448563ce57c4f20f01ce92b</anchor>
      <arglist>(const Signature &amp;s)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>evaluate</name>
      <anchorfile>a02375.html</anchorfile>
      <anchor>a86cd4eab1de2b290b9c10e2d21a3672a</anchor>
      <arglist>(const DiscreteConditional::Values &amp;values) const</arglist>
    </member>
    <member kind="function">
      <type>DiscreteFactor::sharedValues</type>
      <name>optimize</name>
      <anchorfile>a02375.html</anchorfile>
      <anchor>ad5f0ef91a7d10bc4892951e8ada9f055</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>DiscreteFactor::sharedValues</type>
      <name>sample</name>
      <anchorfile>a02375.html</anchorfile>
      <anchor>a1d166ba91c49124d1fed93eecd49e459</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>boost::serialization::access</name>
      <anchorfile>a02375.html</anchorfile>
      <anchor>ac98d07dd8f7b70e16ccb9a01abf56b9c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::DiscreteBayesTree</name>
    <filename>a02387.html</filename>
    <base>BayesTree&lt; DiscreteBayesTreeClique &gt;</base>
    <member kind="function">
      <type></type>
      <name>DiscreteBayesTree</name>
      <anchorfile>a02387.html</anchorfile>
      <anchor>a9ed89e4e8ddbb56919ab48642a1032c4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>equals</name>
      <anchorfile>a02387.html</anchorfile>
      <anchor>a336377e75d02f87e90cd0b6bc9cd0598</anchor>
      <arglist>(const This &amp;other, double tol=1e-9) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::DiscreteBayesTreeClique</name>
    <filename>a02383.html</filename>
    <base>BayesTreeCliqueBase&lt; DiscreteBayesTreeClique, DiscreteFactorGraph &gt;</base>
  </compound>
  <compound kind="class">
    <name>gtsam::DiscreteConditional</name>
    <filename>a02391.html</filename>
    <base>gtsam::DecisionTreeFactor</base>
    <base>Conditional&lt; DecisionTreeFactor, DiscreteConditional &gt;</base>
    <member kind="function">
      <type></type>
      <name>DiscreteConditional</name>
      <anchorfile>a02391.html</anchorfile>
      <anchor>abde5b7e78cd17f518afb2e8048e6748d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DiscreteConditional</name>
      <anchorfile>a02391.html</anchorfile>
      <anchor>a1364e251e09ee03e49bbb21520748bbd</anchor>
      <arglist>(size_t nFrontals, const DecisionTreeFactor &amp;f)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DiscreteConditional</name>
      <anchorfile>a02391.html</anchorfile>
      <anchor>a4213103c28d8fe4b6e9f6ee28672b192</anchor>
      <arglist>(const Signature &amp;signature)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DiscreteConditional</name>
      <anchorfile>a02391.html</anchorfile>
      <anchor>a24f884d7bb2647edeaa21c6798af63ff</anchor>
      <arglist>(const DecisionTreeFactor &amp;joint, const DecisionTreeFactor &amp;marginal, const boost::optional&lt; Ordering &gt; &amp;orderedKeys=boost::none)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static shared_ptr</type>
      <name>Combine</name>
      <anchorfile>a02391.html</anchorfile>
      <anchor>adbf49f45d8ff0282e0789d852de7fa60</anchor>
      <arglist>(ITERATOR firstConditional, ITERATOR lastConditional)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>a02391.html</anchorfile>
      <anchor>a99dd3dc9ffa896d16fed9537caa5069c</anchor>
      <arglist>(const std::string &amp;s=&quot;Discrete Conditional: &quot;, const KeyFormatter &amp;formatter=DefaultKeyFormatter) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>equals</name>
      <anchorfile>a02391.html</anchorfile>
      <anchor>a3190e5d167c41c035b0f4daedaf32e22</anchor>
      <arglist>(const DiscreteFactor &amp;other, double tol=1e-9) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>operator()</name>
      <anchorfile>a02391.html</anchorfile>
      <anchor>a04ab5db88fd803efe3118bc418372872</anchor>
      <arglist>(const Values &amp;values) const</arglist>
    </member>
    <member kind="function">
      <type>DecisionTreeFactor::shared_ptr</type>
      <name>toFactor</name>
      <anchorfile>a02391.html</anchorfile>
      <anchor>a5741fa0c6e0f72274af647cefb927f17</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>ADT</type>
      <name>choose</name>
      <anchorfile>a02391.html</anchorfile>
      <anchor>a3a25fd28e04bc3228930632b16197c54</anchor>
      <arglist>(const Assignment&lt; Key &gt; &amp;parentsValues) const</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>solve</name>
      <anchorfile>a02391.html</anchorfile>
      <anchor>ab1d7f638d7fb4ab304a89f0ff2206a0a</anchor>
      <arglist>(const Values &amp;parentsValues) const</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>sample</name>
      <anchorfile>a02391.html</anchorfile>
      <anchor>ade52bb95bf7cf35545b9c1415b23cfc2</anchor>
      <arglist>(const Values &amp;parentsValues) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>solveInPlace</name>
      <anchorfile>a02391.html</anchorfile>
      <anchor>a6bc7db598652ae6603c19d6321879bcc</anchor>
      <arglist>(Values &amp;parentsValues) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>sampleInPlace</name>
      <anchorfile>a02391.html</anchorfile>
      <anchor>afb97d66da1f11eea5826c4999b0beb87</anchor>
      <arglist>(Values &amp;parentsValues) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>a02391.html</anchorfile>
      <anchor>a99dd3dc9ffa896d16fed9537caa5069c</anchor>
      <arglist>(const std::string &amp;s=&quot;Discrete Conditional: &quot;, const KeyFormatter &amp;formatter=DefaultKeyFormatter) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>equals</name>
      <anchorfile>a02391.html</anchorfile>
      <anchor>a3190e5d167c41c035b0f4daedaf32e22</anchor>
      <arglist>(const DiscreteFactor &amp;other, double tol=1e-9) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>operator()</name>
      <anchorfile>a02391.html</anchorfile>
      <anchor>a04ab5db88fd803efe3118bc418372872</anchor>
      <arglist>(const Values &amp;values) const</arglist>
    </member>
    <member kind="function">
      <type>DecisionTreeFactor::shared_ptr</type>
      <name>toFactor</name>
      <anchorfile>a02391.html</anchorfile>
      <anchor>a5741fa0c6e0f72274af647cefb927f17</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>ADT</type>
      <name>choose</name>
      <anchorfile>a02391.html</anchorfile>
      <anchor>a3a25fd28e04bc3228930632b16197c54</anchor>
      <arglist>(const Assignment&lt; Key &gt; &amp;parentsValues) const</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>solve</name>
      <anchorfile>a02391.html</anchorfile>
      <anchor>ab1d7f638d7fb4ab304a89f0ff2206a0a</anchor>
      <arglist>(const Values &amp;parentsValues) const</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>sample</name>
      <anchorfile>a02391.html</anchorfile>
      <anchor>ade52bb95bf7cf35545b9c1415b23cfc2</anchor>
      <arglist>(const Values &amp;parentsValues) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>solveInPlace</name>
      <anchorfile>a02391.html</anchorfile>
      <anchor>a6bc7db598652ae6603c19d6321879bcc</anchor>
      <arglist>(Values &amp;parentsValues) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>sampleInPlace</name>
      <anchorfile>a02391.html</anchorfile>
      <anchor>afb97d66da1f11eea5826c4999b0beb87</anchor>
      <arglist>(Values &amp;parentsValues) const</arglist>
    </member>
    <member kind="typedef">
      <type>DiscreteConditional</type>
      <name>This</name>
      <anchorfile>a02391.html</anchorfile>
      <anchor>a87b5d53bfcabc8afdacbee26d4ef9916</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; This &gt;</type>
      <name>shared_ptr</name>
      <anchorfile>a02391.html</anchorfile>
      <anchor>a4d8b3999aa607019946cbcfd255c09dd</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>DecisionTreeFactor</type>
      <name>BaseFactor</name>
      <anchorfile>a02391.html</anchorfile>
      <anchor>a9ab81fc33a84e5f1d886f771e8492967</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Conditional&lt; BaseFactor, This &gt;</type>
      <name>BaseConditional</name>
      <anchorfile>a02391.html</anchorfile>
      <anchor>a7a8d450dab8cd70ce0e971fa92bc5982</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Assignment&lt; Key &gt;</type>
      <name>Values</name>
      <anchorfile>a02391.html</anchorfile>
      <anchor>a67b09fbd04b575685982021eab1e8544</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::DiscreteEliminationTree</name>
    <filename>a02399.html</filename>
    <base>EliminationTree&lt; DiscreteBayesNet, DiscreteFactorGraph &gt;</base>
    <member kind="function">
      <type></type>
      <name>DiscreteEliminationTree</name>
      <anchorfile>a02399.html</anchorfile>
      <anchor>a782fad055747d26fb8e876e3cf51bd6f</anchor>
      <arglist>(const DiscreteFactorGraph &amp;factorGraph, const VariableIndex &amp;structure, const Ordering &amp;order)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DiscreteEliminationTree</name>
      <anchorfile>a02399.html</anchorfile>
      <anchor>a615df00f083b043dbc3734f68bad05fc</anchor>
      <arglist>(const DiscreteFactorGraph &amp;factorGraph, const Ordering &amp;order)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>equals</name>
      <anchorfile>a02399.html</anchorfile>
      <anchor>a708057192d2685853f97fcd30c834cfc</anchor>
      <arglist>(const This &amp;other, double tol=1e-9) const</arglist>
    </member>
    <member kind="typedef">
      <type>EliminationTree&lt; DiscreteBayesNet, DiscreteFactorGraph &gt;</type>
      <name>Base</name>
      <anchorfile>a02399.html</anchorfile>
      <anchor>ae4e6afc353582183f3c881a3acad57ca</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>DiscreteEliminationTree</type>
      <name>This</name>
      <anchorfile>a02399.html</anchorfile>
      <anchor>a2b315837d2af900fce3ee59ef54a426f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; This &gt;</type>
      <name>shared_ptr</name>
      <anchorfile>a02399.html</anchorfile>
      <anchor>a850bd2d0f3c1a7b51aebd75582d86b43</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::DiscreteEulerPoincareHelicopter</name>
    <filename>a04655.html</filename>
    <base protection="private">gtsam::NoiseModelFactor</base>
    <base>NoiseModelFactor3&lt; Vector6, Vector6, Pose3 &gt;</base>
    <member kind="function" virtualness="virtual">
      <type>return a deep copy of this virtual factor gtsam::NonlinearFactor::shared_ptr</type>
      <name>clone</name>
      <anchorfile>a04655.html</anchorfile>
      <anchor>a059668d1d1d82370f6b06bd9a91a34b6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Vector</type>
      <name>evaluateError</name>
      <anchorfile>a04655.html</anchorfile>
      <anchor>a8338dea4f980d4bf3a0fc23ddfec904b</anchor>
      <arglist>(const Vector6 &amp;xik, const Vector6 &amp;xik_1, const Pose3 &amp;gk, boost::optional&lt; Matrix &amp; &gt; H1=boost::none, boost::optional&lt; Matrix &amp; &gt; H2=boost::none, boost::optional&lt; Matrix &amp; &gt; H3=boost::none) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::DiscreteFactor</name>
    <filename>a02403.html</filename>
    <base>gtsam::Factor</base>
    <member kind="function">
      <type></type>
      <name>DiscreteFactor</name>
      <anchorfile>a02403.html</anchorfile>
      <anchor>afadb0ff9285b8ef4c5efe5fb98167a60</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DiscreteFactor</name>
      <anchorfile>a02403.html</anchorfile>
      <anchor>af9f2d0ba3efda1bb35a2279c53c26b38</anchor>
      <arglist>(const CONTAINER &amp;keys)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~DiscreteFactor</name>
      <anchorfile>a02403.html</anchorfile>
      <anchor>aa6b82f4425946dfe76026c6f52f48e6a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>empty</name>
      <anchorfile>a02403.html</anchorfile>
      <anchor>a07cd4f1a7394246e28438400776c8f2a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual double</type>
      <name>operator()</name>
      <anchorfile>a02403.html</anchorfile>
      <anchor>a3d747207911fdd7827850f0948bab5b5</anchor>
      <arglist>(const Values &amp;) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual DecisionTreeFactor</type>
      <name>operator *</name>
      <anchorfile>a02403.html</anchorfile>
      <anchor>ae0d843a91115c2627d3fdb42af9c0ba8</anchor>
      <arglist>(const DecisionTreeFactor &amp;) const =0</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DiscreteFactor</name>
      <anchorfile>a02403.html</anchorfile>
      <anchor>afadb0ff9285b8ef4c5efe5fb98167a60</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DiscreteFactor</name>
      <anchorfile>a02403.html</anchorfile>
      <anchor>af9f2d0ba3efda1bb35a2279c53c26b38</anchor>
      <arglist>(const CONTAINER &amp;keys)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~DiscreteFactor</name>
      <anchorfile>a02403.html</anchorfile>
      <anchor>aa6b82f4425946dfe76026c6f52f48e6a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>empty</name>
      <anchorfile>a02403.html</anchorfile>
      <anchor>a07cd4f1a7394246e28438400776c8f2a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual double</type>
      <name>operator()</name>
      <anchorfile>a02403.html</anchorfile>
      <anchor>a3d747207911fdd7827850f0948bab5b5</anchor>
      <arglist>(const Values &amp;) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual DecisionTreeFactor</type>
      <name>operator *</name>
      <anchorfile>a02403.html</anchorfile>
      <anchor>ae0d843a91115c2627d3fdb42af9c0ba8</anchor>
      <arglist>(const DecisionTreeFactor &amp;) const =0</arglist>
    </member>
    <member kind="typedef">
      <type>DiscreteFactor</type>
      <name>This</name>
      <anchorfile>a02403.html</anchorfile>
      <anchor>ac3ef2648a55e80cefac3ce07b99a4236</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; DiscreteFactor &gt;</type>
      <name>shared_ptr</name>
      <anchorfile>a02403.html</anchorfile>
      <anchor>a7d274a86bec4b9e5339b465bf82b2c80</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Factor</type>
      <name>Base</name>
      <anchorfile>a02403.html</anchorfile>
      <anchor>a1fe887e0f0c0a7506db99e662f91aa29</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Assignment&lt; Key &gt;</type>
      <name>Values</name>
      <anchorfile>a02403.html</anchorfile>
      <anchor>abc27a873650f7676a28d2c82960b279e</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::DiscreteFactorGraph</name>
    <filename>a02419.html</filename>
    <base>FactorGraph&lt; DiscreteFactor &gt;</base>
    <base>EliminateableFactorGraph&lt; DiscreteFactorGraph &gt;</base>
    <member kind="function">
      <type></type>
      <name>DiscreteFactorGraph</name>
      <anchorfile>a02419.html</anchorfile>
      <anchor>a9c6155d411d5e8f4169ac14982175908</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DiscreteFactorGraph</name>
      <anchorfile>a02419.html</anchorfile>
      <anchor>ab200e82a32be55ee64c8e0450e289daa</anchor>
      <arglist>(ITERATOR firstFactor, ITERATOR lastFactor)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DiscreteFactorGraph</name>
      <anchorfile>a02419.html</anchorfile>
      <anchor>a1cc891cc009075ea80f8d114f5ce7941</anchor>
      <arglist>(const CONTAINER &amp;factors)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DiscreteFactorGraph</name>
      <anchorfile>a02419.html</anchorfile>
      <anchor>ab1687dd520685928c9effcaea5473416</anchor>
      <arglist>(const FactorGraph&lt; DERIVEDFACTOR &gt; &amp;graph)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add</name>
      <anchorfile>a02419.html</anchorfile>
      <anchor>a87ce384440c43993e8f98d9fd409c001</anchor>
      <arglist>(const DiscreteKeys &amp;keys, SOURCE table)</arglist>
    </member>
    <member kind="function">
      <type>KeySet</type>
      <name>keys</name>
      <anchorfile>a02419.html</anchorfile>
      <anchor>abc343953dd57e2f19a4778f34d63dfc2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>DecisionTreeFactor</type>
      <name>product</name>
      <anchorfile>a02419.html</anchorfile>
      <anchor>ac4424bd9e7e9decc7d140610f0c515f8</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>operator()</name>
      <anchorfile>a02419.html</anchorfile>
      <anchor>ac2d1ef20ecbb34888bbbfd72d42a5b71</anchor>
      <arglist>(const DiscreteFactor::Values &amp;values) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>a02419.html</anchorfile>
      <anchor>a37b7db9563f7016b2edc076ca537cb10</anchor>
      <arglist>(const std::string &amp;s=&quot;DiscreteFactorGraph&quot;, const KeyFormatter &amp;formatter=DefaultKeyFormatter) const</arglist>
    </member>
    <member kind="function">
      <type>DiscreteFactor::sharedValues</type>
      <name>optimize</name>
      <anchorfile>a02419.html</anchorfile>
      <anchor>a575e68409fd079ab7c72974aae067871</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="typedef">
      <type>DiscreteFactorGraph</type>
      <name>This</name>
      <anchorfile>a02419.html</anchorfile>
      <anchor>a50796434e042f15199bdb6695530189a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>FactorGraph&lt; DiscreteFactor &gt;</type>
      <name>Base</name>
      <anchorfile>a02419.html</anchorfile>
      <anchor>a8014b64b6ca21e950abfd4666ff81ed0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>EliminateableFactorGraph&lt; This &gt;</type>
      <name>BaseEliminateable</name>
      <anchorfile>a02419.html</anchorfile>
      <anchor>aa8426d72a4ee49cdea4c01dd04bfb412</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; This &gt;</type>
      <name>shared_ptr</name>
      <anchorfile>a02419.html</anchorfile>
      <anchor>a4a38a0fa8aea06ee7fa1d9dceab25387</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>KeyVector</type>
      <name>Indices</name>
      <anchorfile>a02419.html</anchorfile>
      <anchor>a2e98a123ffbf71a3ad7d5070c458e227</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::DiscreteJunctionTree</name>
    <filename>a02427.html</filename>
    <base>JunctionTree&lt; DiscreteBayesTree, DiscreteFactorGraph &gt;</base>
    <member kind="function">
      <type></type>
      <name>DiscreteJunctionTree</name>
      <anchorfile>a02427.html</anchorfile>
      <anchor>a4555ca722f81654a9aeb9983913dd6fc</anchor>
      <arglist>(const DiscreteEliminationTree &amp;eliminationTree)</arglist>
    </member>
    <member kind="typedef">
      <type>JunctionTree&lt; DiscreteBayesTree, DiscreteFactorGraph &gt;</type>
      <name>Base</name>
      <anchorfile>a02427.html</anchorfile>
      <anchor>a187d382e5e43fcc23e55bbbcf8cdb75c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>DiscreteJunctionTree</type>
      <name>This</name>
      <anchorfile>a02427.html</anchorfile>
      <anchor>ad6782b47cf2c877b9073da597c774d96</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; This &gt;</type>
      <name>shared_ptr</name>
      <anchorfile>a02427.html</anchorfile>
      <anchor>a67b80ddc56d75698e966b76590ab6cf0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>gtsam::DiscreteKeys</name>
    <filename>a02431.html</filename>
    <member kind="function">
      <type></type>
      <name>DiscreteKeys</name>
      <anchorfile>a02431.html</anchorfile>
      <anchor>ac710ec1e97bfeaed0c3f88694f1c9cdf</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DiscreteKeys</name>
      <anchorfile>a02431.html</anchorfile>
      <anchor>aeae84568ba908e2ea4fc5e876c08ce3f</anchor>
      <arglist>(const DiscreteKey &amp;key)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DiscreteKeys</name>
      <anchorfile>a02431.html</anchorfile>
      <anchor>af2a1fa833d44e52655656826b2a18d19</anchor>
      <arglist>(const std::vector&lt; DiscreteKey &gt; &amp;keys)</arglist>
    </member>
    <member kind="function">
      <type>GTSAM_EXPORT</type>
      <name>DiscreteKeys</name>
      <anchorfile>a02431.html</anchorfile>
      <anchor>adc6ee484dc8782489ecd65970ac29901</anchor>
      <arglist>(const std::vector&lt; int &gt; &amp;cs)</arglist>
    </member>
    <member kind="function">
      <type>GTSAM_EXPORT KeyVector</type>
      <name>indices</name>
      <anchorfile>a02431.html</anchorfile>
      <anchor>a84cdd881990fa290590eb32544f18723</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>GTSAM_EXPORT std::map&lt; Key, size_t &gt;</type>
      <name>cardinalities</name>
      <anchorfile>a02431.html</anchorfile>
      <anchor>a8ed9d6273b632b2e80f24d82eae90135</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>DiscreteKeys &amp;</type>
      <name>operator &amp;</name>
      <anchorfile>a02431.html</anchorfile>
      <anchor>ab42cbf723a6ea5692a8ea4d1b0e93acb</anchor>
      <arglist>(const DiscreteKey &amp;key)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::DiscreteMarginals</name>
    <filename>a02435.html</filename>
    <member kind="function">
      <type></type>
      <name>DiscreteMarginals</name>
      <anchorfile>a02435.html</anchorfile>
      <anchor>a989e365c2191c5db801307e50778a706</anchor>
      <arglist>(const DiscreteFactorGraph &amp;graph)</arglist>
    </member>
    <member kind="function">
      <type>DiscreteFactor::shared_ptr</type>
      <name>operator()</name>
      <anchorfile>a02435.html</anchorfile>
      <anchor>ab7e034af37152b81e3bc9e461d6c8271</anchor>
      <arglist>(Key variable) const</arglist>
    </member>
    <member kind="function">
      <type>Vector</type>
      <name>marginalProbabilities</name>
      <anchorfile>a02435.html</anchorfile>
      <anchor>a467d0ef89ee86bafe691130be9a2b4ac</anchor>
      <arglist>(const DiscreteKey &amp;key) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::DoglegOptimizer</name>
    <filename>a03567.html</filename>
    <base>gtsam::NonlinearOptimizer</base>
    <member kind="function">
      <type></type>
      <name>DoglegOptimizer</name>
      <anchorfile>a03567.html</anchorfile>
      <anchor>a803a7052a5817fde973bfe18578aee78</anchor>
      <arglist>(const NonlinearFactorGraph &amp;graph, const Values &amp;initialValues, const DoglegParams &amp;params=DoglegParams())</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DoglegOptimizer</name>
      <anchorfile>a03567.html</anchorfile>
      <anchor>a1419fd81113aa260374a94a49fe882fe</anchor>
      <arglist>(const NonlinearFactorGraph &amp;graph, const Values &amp;initialValues, const Ordering &amp;ordering)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~DoglegOptimizer</name>
      <anchorfile>a03567.html</anchorfile>
      <anchor>a40fea6de973f2432617156554808b765</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>GaussianFactorGraph::shared_ptr</type>
      <name>iterate</name>
      <anchorfile>a03567.html</anchorfile>
      <anchor>acd3e7c0d62e269ea01eab3f78d952097</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>const DoglegParams &amp;</type>
      <name>params</name>
      <anchorfile>a03567.html</anchorfile>
      <anchor>abc8bdba23a706cb147088f138bc6764b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getDelta</name>
      <anchorfile>a03567.html</anchorfile>
      <anchor>abb1a3d00708a7e24cb89cdd5e939ff92</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DoglegOptimizer</name>
      <anchorfile>a03567.html</anchorfile>
      <anchor>a803a7052a5817fde973bfe18578aee78</anchor>
      <arglist>(const NonlinearFactorGraph &amp;graph, const Values &amp;initialValues, const DoglegParams &amp;params=DoglegParams())</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DoglegOptimizer</name>
      <anchorfile>a03567.html</anchorfile>
      <anchor>a1419fd81113aa260374a94a49fe882fe</anchor>
      <arglist>(const NonlinearFactorGraph &amp;graph, const Values &amp;initialValues, const Ordering &amp;ordering)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~DoglegOptimizer</name>
      <anchorfile>a03567.html</anchorfile>
      <anchor>a40fea6de973f2432617156554808b765</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>GaussianFactorGraph::shared_ptr</type>
      <name>iterate</name>
      <anchorfile>a03567.html</anchorfile>
      <anchor>acd3e7c0d62e269ea01eab3f78d952097</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>const DoglegParams &amp;</type>
      <name>params</name>
      <anchorfile>a03567.html</anchorfile>
      <anchor>abc8bdba23a706cb147088f138bc6764b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getDelta</name>
      <anchorfile>a03567.html</anchorfile>
      <anchor>abb1a3d00708a7e24cb89cdd5e939ff92</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual const NonlinearOptimizerParams &amp;</type>
      <name>_params</name>
      <anchorfile>a03567.html</anchorfile>
      <anchor>a78dfaa9b92ec7082a43850f864788c79</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>DoglegParams</type>
      <name>ensureHasOrdering</name>
      <anchorfile>a03567.html</anchorfile>
      <anchor>a900052675c543781cc31d263421d412a</anchor>
      <arglist>(DoglegParams params, const NonlinearFactorGraph &amp;graph) const</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>gtsam::DoglegOptimizerImpl</name>
    <filename>a03571.html</filename>
    <member kind="function" static="yes">
      <type>static IterationResult</type>
      <name>Iterate</name>
      <anchorfile>a03571.html</anchorfile>
      <anchor>a6ad13f5fb8bb2f7e19a75ff19433ffa6</anchor>
      <arglist>(double delta, TrustRegionAdaptationMode mode, const VectorValues &amp;dx_u, const VectorValues &amp;dx_n, const M &amp;Rd, const F &amp;f, const VALUES &amp;x0, const double f_error, const bool verbose=false)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static VectorValues</type>
      <name>ComputeDoglegPoint</name>
      <anchorfile>a03571.html</anchorfile>
      <anchor>aac5b7fb1a7ecb259c5ea426f9cf600bd</anchor>
      <arglist>(double delta, const VectorValues &amp;dx_u, const VectorValues &amp;dx_n, const bool verbose=false)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static VectorValues</type>
      <name>ComputeBlend</name>
      <anchorfile>a03571.html</anchorfile>
      <anchor>ada99b21591a3877bff029f87e61f53c6</anchor>
      <arglist>(double delta, const VectorValues &amp;x_u, const VectorValues &amp;x_n, const bool verbose=false)</arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>TrustRegionAdaptationMode</name>
      <anchorfile>a03571.html</anchorfile>
      <anchor>a52e03ca11a892d070c911db43f22cf04</anchor>
      <arglist></arglist>
    </member>
    <class kind="struct">gtsam::DoglegOptimizerImpl::IterationResult</class>
  </compound>
  <compound kind="class">
    <name>gtsam::DoglegParams</name>
    <filename>a03563.html</filename>
    <base>gtsam::NonlinearOptimizerParams</base>
    <member kind="variable">
      <type>double</type>
      <name>deltaInitial</name>
      <anchorfile>a03563.html</anchorfile>
      <anchor>afc7c92d489fcbea53a1b645185e43e53</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>VerbosityDL</type>
      <name>verbosityDL</name>
      <anchorfile>a03563.html</anchorfile>
      <anchor>ae6a2936aed619333036329c343281356</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>VerbosityDL</name>
      <anchorfile>a03563.html</anchorfile>
      <anchor>a857a8ae8ed6eea7960231b3359dfa349</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::Domain</name>
    <filename>a04227.html</filename>
    <base>gtsam::Constraint</base>
    <member kind="function">
      <type></type>
      <name>Domain</name>
      <anchorfile>a04227.html</anchorfile>
      <anchor>a3bbec44f10f7c4e2326ae62cc034283b</anchor>
      <arglist>(const Domain &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>insert</name>
      <anchorfile>a04227.html</anchorfile>
      <anchor>ad24dc04a3a52863f6f1a6a4ca610b6f9</anchor>
      <arglist>(size_t value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>erase</name>
      <anchorfile>a04227.html</anchorfile>
      <anchor>a2d5beda5676a34c8634d95413f365e14</anchor>
      <arglist>(size_t value)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>equals</name>
      <anchorfile>a04227.html</anchorfile>
      <anchor>a4167f5226c48072fa37802dc66e38e95</anchor>
      <arglist>(const DiscreteFactor &amp;other, double tol) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>operator()</name>
      <anchorfile>a04227.html</anchorfile>
      <anchor>aacaf679588fb7cdc1406d82d82bd8c0d</anchor>
      <arglist>(const Values &amp;values) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual DecisionTreeFactor</type>
      <name>toDecisionTreeFactor</name>
      <anchorfile>a04227.html</anchorfile>
      <anchor>a0fccd64e1425abb6183a9c38117906e6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual DecisionTreeFactor</type>
      <name>operator *</name>
      <anchorfile>a04227.html</anchorfile>
      <anchor>a529c012327bdb510cd7ddf86135bcc4f</anchor>
      <arglist>(const DecisionTreeFactor &amp;f) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>checkAllDiff</name>
      <anchorfile>a04227.html</anchorfile>
      <anchor>a8cefd3fd9d3414abdf380c1e041e0288</anchor>
      <arglist>(const KeyVector keys, std::vector&lt; Domain &gt; &amp;domains)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Constraint::shared_ptr</type>
      <name>partiallyApply</name>
      <anchorfile>a04227.html</anchorfile>
      <anchor>afb7e5d427e41db6d0edbefb395b5043c</anchor>
      <arglist>(const Values &amp;values) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Constraint::shared_ptr</type>
      <name>partiallyApply</name>
      <anchorfile>a04227.html</anchorfile>
      <anchor>a8694c524dae6f6e304c80af58a117223</anchor>
      <arglist>(const std::vector&lt; Domain &gt; &amp;domains) const</arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; Domain &gt;</type>
      <name>shared_ptr</name>
      <anchorfile>a04227.html</anchorfile>
      <anchor>a9bc36f50dc751e9d0e1a237e058cfb0b</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::DRollPrior</name>
    <filename>a04603.html</filename>
    <base protection="private">gtsam::NonlinearFactor</base>
    <base>PartialPriorFactor&lt; PoseRTV &gt;</base>
    <member kind="function">
      <type></type>
      <name>DRollPrior</name>
      <anchorfile>a04603.html</anchorfile>
      <anchor>a7f497911e308950bd88caabc5d6a57b5</anchor>
      <arglist>(Key key, double wx, const gtsam::SharedNoiseModel &amp;model)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DRollPrior</name>
      <anchorfile>a04603.html</anchorfile>
      <anchor>a729602f1e3127f066c9733e6c6bb4bc8</anchor>
      <arglist>(Key key, const gtsam::SharedNoiseModel &amp;model)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::DSF</name>
    <filename>a04199.html</filename>
    <templarg>KEY</templarg>
    <base protection="protected">BTree&lt; KEY, KEY &gt;</base>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>a04199.html</anchorfile>
      <anchor>abd79fad6174732c9d980176877484dc9</anchor>
      <arglist>(const Self &amp;t) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>a04199.html</anchorfile>
      <anchor>a304af43b6b3fb46c82ae3a5a2b9efcf7</anchor>
      <arglist>(const Self &amp;t) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>KEY</type>
      <name>findSet_</name>
      <anchorfile>a04199.html</anchorfile>
      <anchor>a27cf7131f250c665b3e4d68006dd5bf9</anchor>
      <arglist>(const KEY &amp;key)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::DSFBase</name>
    <filename>a02007.html</filename>
    <member kind="function">
      <type></type>
      <name>DSFBase</name>
      <anchorfile>a02007.html</anchorfile>
      <anchor>af0274a9e27844450d42dd02ebc3ff34f</anchor>
      <arglist>(const size_t numNodes)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DSFBase</name>
      <anchorfile>a02007.html</anchorfile>
      <anchor>a7ad36282110651ed9939c8bf8e890425</anchor>
      <arglist>(const boost::shared_ptr&lt; V &gt; &amp;v_in)</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>find</name>
      <anchorfile>a02007.html</anchorfile>
      <anchor>a1e2a75106453cbd4dad52117b02c44c2</anchor>
      <arglist>(size_t key) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>merge</name>
      <anchorfile>a02007.html</anchorfile>
      <anchor>a721b4f56885d28096e1ca598abbd7c9c</anchor>
      <arglist>(const size_t &amp;i1, const size_t &amp;i2)</arglist>
    </member>
    <member kind="typedef">
      <type>std::vector&lt; size_t &gt;</type>
      <name>V</name>
      <anchorfile>a02007.html</anchorfile>
      <anchor>aeecd94c025c092012570bb2f82f9d2c9</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::DSFMap</name>
    <filename>a01995.html</filename>
    <templarg></templarg>
    <member kind="function">
      <type></type>
      <name>DSFMap</name>
      <anchorfile>a01995.html</anchorfile>
      <anchor>aac017122db12132a7b6656dd1bb5760f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>KEY</type>
      <name>find</name>
      <anchorfile>a01995.html</anchorfile>
      <anchor>aad793cdeca5c9150d15814c76ce8b903</anchor>
      <arglist>(const KEY &amp;key) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>merge</name>
      <anchorfile>a01995.html</anchorfile>
      <anchor>acce8aad42f635e5e0218503995afed91</anchor>
      <arglist>(const KEY &amp;x, const KEY &amp;y)</arglist>
    </member>
    <member kind="function">
      <type>std::map&lt; KEY, Set &gt;</type>
      <name>sets</name>
      <anchorfile>a01995.html</anchorfile>
      <anchor>a1350fde360b35102f344f909c18d0bc9</anchor>
      <arglist>() const</arglist>
    </member>
    <class kind="struct">gtsam::DSFMap::Entry</class>
    <member kind="function" protection="protected">
      <type>iterator</type>
      <name>find__</name>
      <anchorfile>a01995.html</anchorfile>
      <anchor>a16de46adebcd2c0f874c98127bc4ffd0</anchor>
      <arglist>(const KEY &amp;key) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>iterator</type>
      <name>find_</name>
      <anchorfile>a01995.html</anchorfile>
      <anchor>a22b6fe2aec10f27fbcb9777d74d12c15</anchor>
      <arglist>(const iterator &amp;it) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>iterator</type>
      <name>find_</name>
      <anchorfile>a01995.html</anchorfile>
      <anchor>a4883de168fa5121beee34c9c7d712f28</anchor>
      <arglist>(const KEY &amp;key) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::DSFVector</name>
    <filename>a02011.html</filename>
    <base>gtsam::DSFBase</base>
    <member kind="function">
      <type></type>
      <name>DSFVector</name>
      <anchorfile>a02011.html</anchorfile>
      <anchor>abd90fd03747876b5fb43df6432ac5ad5</anchor>
      <arglist>(const size_t numNodes)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DSFVector</name>
      <anchorfile>a02011.html</anchorfile>
      <anchor>af88896d4b3454f8fdb10b60b4fa8d5ff</anchor>
      <arglist>(const std::vector&lt; size_t &gt; &amp;keys)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DSFVector</name>
      <anchorfile>a02011.html</anchorfile>
      <anchor>ac37c745fe9ba94201ca653d155d085d0</anchor>
      <arglist>(const boost::shared_ptr&lt; V &gt; &amp;v_in, const std::vector&lt; size_t &gt; &amp;keys)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isSingleton</name>
      <anchorfile>a02011.html</anchorfile>
      <anchor>a754f1174792f2c903c1d6fff8127e9e4</anchor>
      <arglist>(const size_t &amp;label) const</arglist>
    </member>
    <member kind="function">
      <type>std::set&lt; size_t &gt;</type>
      <name>set</name>
      <anchorfile>a02011.html</anchorfile>
      <anchor>a066bc96be70ef86666f9e085a5906ce1</anchor>
      <arglist>(const size_t &amp;label) const</arglist>
    </member>
    <member kind="function">
      <type>std::map&lt; size_t, std::set&lt; size_t &gt; &gt;</type>
      <name>sets</name>
      <anchorfile>a02011.html</anchorfile>
      <anchor>a891e286d24dd7d26473bb9de998a3820</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::map&lt; size_t, std::vector&lt; size_t &gt; &gt;</type>
      <name>arrays</name>
      <anchorfile>a02011.html</anchorfile>
      <anchor>a925f127b4f9b52b75b9f005142bc554f</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::Dummy</name>
    <filename>a04203.html</filename>
  </compound>
  <compound kind="class">
    <name>gtsam::DummyFactor</name>
    <filename>a04455.html</filename>
    <base protection="private">gtsam::NonlinearFactor</base>
    <base>gtsam::NonlinearFactor</base>
    <member kind="function">
      <type></type>
      <name>DummyFactor</name>
      <anchorfile>a04455.html</anchorfile>
      <anchor>a3f098b8ba8f9baf49939421c0e130108</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DummyFactor</name>
      <anchorfile>a04455.html</anchorfile>
      <anchor>a46d5f76cb3bf66198a399bcffaa17720</anchor>
      <arglist>(const Key &amp;key1, size_t dim1, const Key &amp;key2, size_t dim2)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>print</name>
      <anchorfile>a04455.html</anchorfile>
      <anchor>a050c78a69aed78539b74bd996b4dd503</anchor>
      <arglist>(const std::string &amp;s=&quot;&quot;, const KeyFormatter &amp;keyFormatter=DefaultKeyFormatter) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>equals</name>
      <anchorfile>a04455.html</anchorfile>
      <anchor>a7f57dfce6b7f6a90cd7c5da05f74bae2</anchor>
      <arglist>(const NonlinearFactor &amp;f, double tol=1e-9) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>error</name>
      <anchorfile>a04455.html</anchorfile>
      <anchor>aacdb92a0f88366c97e7717cd691f2596</anchor>
      <arglist>(const Values &amp;c) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual size_t</type>
      <name>dim</name>
      <anchorfile>a04455.html</anchorfile>
      <anchor>a759c937518c93c2465330377c2e93267</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual boost::shared_ptr&lt; GaussianFactor &gt;</type>
      <name>linearize</name>
      <anchorfile>a04455.html</anchorfile>
      <anchor>a4665332671e62af5c517778a77fca82d</anchor>
      <arglist>(const Values &amp;c) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual NonlinearFactor::shared_ptr</type>
      <name>clone</name>
      <anchorfile>a04455.html</anchorfile>
      <anchor>a9b5ac01e096dfcc37d661ca78ffa97b6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>size_t</type>
      <name>rowDim_</name>
      <anchorfile>a04455.html</anchorfile>
      <anchor>a5b49948366b979a1b046b3f6ced230fe</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::DummyPreconditioner</name>
    <filename>a03331.html</filename>
    <base>gtsam::Preconditioner</base>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>solve</name>
      <anchorfile>a03331.html</anchorfile>
      <anchor>aaadf068d4910d07c08932fede82f7ae0</anchor>
      <arglist>(const Vector &amp;y, Vector &amp;x) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>transposeSolve</name>
      <anchorfile>a03331.html</anchorfile>
      <anchor>a6c600106867d484e6e01544e55d92444</anchor>
      <arglist>(const Vector &amp;y, Vector &amp;x) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>build</name>
      <anchorfile>a03331.html</anchorfile>
      <anchor>aebd8a0b280b7541cfca04b5409f3b280</anchor>
      <arglist>(const GaussianFactorGraph &amp;gfg, const KeyInfo &amp;info, const std::map&lt; Key, Vector &gt; &amp;lambda)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>gtsam::DummyPreconditionerParameters</name>
    <filename>a03327.html</filename>
    <base>gtsam::PreconditionerParameters</base>
  </compound>
  <compound kind="struct">
    <name>gtsam::internal::DynamicTraits</name>
    <filename>a02315.html</filename>
    <templarg>M</templarg>
    <templarg>N</templarg>
    <templarg>Options</templarg>
    <templarg>MaxRows</templarg>
    <templarg>MaxCols</templarg>
  </compound>
  <compound kind="class">
    <name>DynamicTraits&lt; 1, -1, Options, MaxRows, MaxCols &gt;</name>
    <filename>a02315.html</filename>
  </compound>
  <compound kind="class">
    <name>DynamicTraits&lt;-1, -1, Options, MaxRows, MaxCols &gt;</name>
    <filename>a02315.html</filename>
  </compound>
  <compound kind="class">
    <name>DynamicTraits&lt;-1, 1, Options, MaxRows, MaxCols &gt;</name>
    <filename>a02315.html</filename>
  </compound>
  <compound kind="class">
    <name>gtsam::DynamicValuesMismatched</name>
    <filename>a03895.html</filename>
  </compound>
  <compound kind="struct">
    <name>gtsam::Subgraph::Edge</name>
    <filename>a03371.html</filename>
  </compound>
  <compound kind="class">
    <name>gtsam::EliminatableClusterTree</name>
    <filename>a02891.html</filename>
    <templarg>BAYESTREE</templarg>
    <templarg>GRAPH</templarg>
    <base>gtsam::ClusterTree</base>
    <member kind="function" protection="protected">
      <type></type>
      <name>EliminatableClusterTree</name>
      <anchorfile>a02891.html</anchorfile>
      <anchor>a8ca5e336fa4998b33d1745c52c592897</anchor>
      <arglist>(const This &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>std::pair&lt; boost::shared_ptr&lt; BayesTreeType &gt;, boost::shared_ptr&lt; FactorGraphType &gt; &gt;</type>
      <name>eliminate</name>
      <anchorfile>a02891.html</anchorfile>
      <anchor>a48864b139f927eee46de3078bfbf9234</anchor>
      <arglist>(const Eliminate &amp;function) const</arglist>
    </member>
    <member kind="function">
      <type>const FastVector&lt; sharedFactor &gt; &amp;</type>
      <name>remainingFactors</name>
      <anchorfile>a02891.html</anchorfile>
      <anchor>abce2db4ebedd83f21305825f7249e89f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>This &amp;</type>
      <name>operator=</name>
      <anchorfile>a02891.html</anchorfile>
      <anchor>a19b6f69043d78e06565db935e9d0b460</anchor>
      <arglist>(const This &amp;other)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>EliminatableClusterTree</name>
      <anchorfile>a02891.html</anchorfile>
      <anchor>a025f8403f75d9e98e29e99a4ed318aea</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::pair&lt; boost::shared_ptr&lt; BayesTreeType &gt;, boost::shared_ptr&lt; FactorGraphType &gt; &gt;</type>
      <name>eliminate</name>
      <anchorfile>a02891.html</anchorfile>
      <anchor>a48864b139f927eee46de3078bfbf9234</anchor>
      <arglist>(const Eliminate &amp;function) const</arglist>
    </member>
    <member kind="function">
      <type>const FastVector&lt; sharedFactor &gt; &amp;</type>
      <name>remainingFactors</name>
      <anchorfile>a02891.html</anchorfile>
      <anchor>abce2db4ebedd83f21305825f7249e89f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="typedef">
      <type>BAYESTREE</type>
      <name>BayesTreeType</name>
      <anchorfile>a02891.html</anchorfile>
      <anchor>a903f18641237cb3ade58d72aeb8ba89c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GRAPH</type>
      <name>FactorGraphType</name>
      <anchorfile>a02891.html</anchorfile>
      <anchor>aa90e00878d09f0f6536a487b6c083604</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>EliminatableClusterTree&lt; BAYESTREE, GRAPH &gt;</type>
      <name>This</name>
      <anchorfile>a02891.html</anchorfile>
      <anchor>a0223c734101df3eebb97e09eabc0ecaf</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; This &gt;</type>
      <name>shared_ptr</name>
      <anchorfile>a02891.html</anchorfile>
      <anchor>acc8911d6ebde85bca47b51baede3fff8</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>BAYESTREE::ConditionalType</type>
      <name>ConditionalType</name>
      <anchorfile>a02891.html</anchorfile>
      <anchor>a0a4068d88de38214cc40f4a74d655c44</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; ConditionalType &gt;</type>
      <name>sharedConditional</name>
      <anchorfile>a02891.html</anchorfile>
      <anchor>a6157893772d92c0ea04206a8f02ddb05</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GRAPH::Eliminate</type>
      <name>Eliminate</name>
      <anchorfile>a02891.html</anchorfile>
      <anchor>af809c368808a33b15a8669ae1a04912e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GRAPH::FactorType</type>
      <name>FactorType</name>
      <anchorfile>a02891.html</anchorfile>
      <anchor>a9327311eb33b3bfc88da2473d355e56d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; FactorType &gt;</type>
      <name>sharedFactor</name>
      <anchorfile>a02891.html</anchorfile>
      <anchor>a673bca4ae33509fc9903516d9fba8794</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>EliminatableClusterTree</name>
      <anchorfile>a02891.html</anchorfile>
      <anchor>a8ca5e336fa4998b33d1745c52c592897</anchor>
      <arglist>(const This &amp;other)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>This &amp;</type>
      <name>operator=</name>
      <anchorfile>a02891.html</anchorfile>
      <anchor>a19b6f69043d78e06565db935e9d0b460</anchor>
      <arglist>(const This &amp;other)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>EliminatableClusterTree</name>
      <anchorfile>a02891.html</anchorfile>
      <anchor>a025f8403f75d9e98e29e99a4ed318aea</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>EliminatableClusterTree&lt; DiscreteBayesTree, DiscreteFactorGraph &gt;</name>
    <filename>a02891.html</filename>
    <base>ClusterTree&lt; DiscreteFactorGraph &gt;</base>
    <member kind="function" protection="protected">
      <type></type>
      <name>EliminatableClusterTree</name>
      <anchorfile>a02891.html</anchorfile>
      <anchor>a8ca5e336fa4998b33d1745c52c592897</anchor>
      <arglist>(const This &amp;other)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>EliminatableClusterTree</name>
      <anchorfile>a02891.html</anchorfile>
      <anchor>a025f8403f75d9e98e29e99a4ed318aea</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>This &amp;</type>
      <name>operator=</name>
      <anchorfile>a02891.html</anchorfile>
      <anchor>a19b6f69043d78e06565db935e9d0b460</anchor>
      <arglist>(const This &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>std::pair&lt; boost::shared_ptr&lt; BayesTreeType &gt;, boost::shared_ptr&lt; FactorGraphType &gt; &gt;</type>
      <name>eliminate</name>
      <anchorfile>a02891.html</anchorfile>
      <anchor>a48864b139f927eee46de3078bfbf9234</anchor>
      <arglist>(const Eliminate &amp;function) const</arglist>
    </member>
    <member kind="function">
      <type>const FastVector&lt; sharedFactor &gt; &amp;</type>
      <name>remainingFactors</name>
      <anchorfile>a02891.html</anchorfile>
      <anchor>abce2db4ebedd83f21305825f7249e89f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::pair&lt; boost::shared_ptr&lt; BayesTreeType &gt;, boost::shared_ptr&lt; FactorGraphType &gt; &gt;</type>
      <name>eliminate</name>
      <anchorfile>a02891.html</anchorfile>
      <anchor>a48864b139f927eee46de3078bfbf9234</anchor>
      <arglist>(const Eliminate &amp;function) const</arglist>
    </member>
    <member kind="function">
      <type>const FastVector&lt; sharedFactor &gt; &amp;</type>
      <name>remainingFactors</name>
      <anchorfile>a02891.html</anchorfile>
      <anchor>abce2db4ebedd83f21305825f7249e89f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="typedef">
      <type>DiscreteBayesTree</type>
      <name>BayesTreeType</name>
      <anchorfile>a02891.html</anchorfile>
      <anchor>a903f18641237cb3ade58d72aeb8ba89c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>DiscreteFactorGraph</type>
      <name>FactorGraphType</name>
      <anchorfile>a02891.html</anchorfile>
      <anchor>aa90e00878d09f0f6536a487b6c083604</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>EliminatableClusterTree&lt; DiscreteBayesTree, DiscreteFactorGraph &gt;</type>
      <name>This</name>
      <anchorfile>a02891.html</anchorfile>
      <anchor>a0223c734101df3eebb97e09eabc0ecaf</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; This &gt;</type>
      <name>shared_ptr</name>
      <anchorfile>a02891.html</anchorfile>
      <anchor>acc8911d6ebde85bca47b51baede3fff8</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>DiscreteBayesTree ::ConditionalType</type>
      <name>ConditionalType</name>
      <anchorfile>a02891.html</anchorfile>
      <anchor>a0a4068d88de38214cc40f4a74d655c44</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; ConditionalType &gt;</type>
      <name>sharedConditional</name>
      <anchorfile>a02891.html</anchorfile>
      <anchor>a6157893772d92c0ea04206a8f02ddb05</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>DiscreteFactorGraph ::Eliminate</type>
      <name>Eliminate</name>
      <anchorfile>a02891.html</anchorfile>
      <anchor>af809c368808a33b15a8669ae1a04912e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>DiscreteFactorGraph ::FactorType</type>
      <name>FactorType</name>
      <anchorfile>a02891.html</anchorfile>
      <anchor>a9327311eb33b3bfc88da2473d355e56d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; FactorType &gt;</type>
      <name>sharedFactor</name>
      <anchorfile>a02891.html</anchorfile>
      <anchor>a673bca4ae33509fc9903516d9fba8794</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>EliminatableClusterTree</name>
      <anchorfile>a02891.html</anchorfile>
      <anchor>a8ca5e336fa4998b33d1745c52c592897</anchor>
      <arglist>(const This &amp;other)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>EliminatableClusterTree</name>
      <anchorfile>a02891.html</anchorfile>
      <anchor>a025f8403f75d9e98e29e99a4ed318aea</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>This &amp;</type>
      <name>operator=</name>
      <anchorfile>a02891.html</anchorfile>
      <anchor>a19b6f69043d78e06565db935e9d0b460</anchor>
      <arglist>(const This &amp;other)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>EliminatableClusterTree&lt; GaussianBayesTree, GaussianFactorGraph &gt;</name>
    <filename>a02891.html</filename>
    <base>ClusterTree&lt; GaussianFactorGraph &gt;</base>
    <member kind="function" protection="protected">
      <type></type>
      <name>EliminatableClusterTree</name>
      <anchorfile>a02891.html</anchorfile>
      <anchor>a8ca5e336fa4998b33d1745c52c592897</anchor>
      <arglist>(const This &amp;other)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>EliminatableClusterTree</name>
      <anchorfile>a02891.html</anchorfile>
      <anchor>a025f8403f75d9e98e29e99a4ed318aea</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>This &amp;</type>
      <name>operator=</name>
      <anchorfile>a02891.html</anchorfile>
      <anchor>a19b6f69043d78e06565db935e9d0b460</anchor>
      <arglist>(const This &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>std::pair&lt; boost::shared_ptr&lt; BayesTreeType &gt;, boost::shared_ptr&lt; FactorGraphType &gt; &gt;</type>
      <name>eliminate</name>
      <anchorfile>a02891.html</anchorfile>
      <anchor>a48864b139f927eee46de3078bfbf9234</anchor>
      <arglist>(const Eliminate &amp;function) const</arglist>
    </member>
    <member kind="function">
      <type>const FastVector&lt; sharedFactor &gt; &amp;</type>
      <name>remainingFactors</name>
      <anchorfile>a02891.html</anchorfile>
      <anchor>abce2db4ebedd83f21305825f7249e89f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::pair&lt; boost::shared_ptr&lt; BayesTreeType &gt;, boost::shared_ptr&lt; FactorGraphType &gt; &gt;</type>
      <name>eliminate</name>
      <anchorfile>a02891.html</anchorfile>
      <anchor>a48864b139f927eee46de3078bfbf9234</anchor>
      <arglist>(const Eliminate &amp;function) const</arglist>
    </member>
    <member kind="function">
      <type>const FastVector&lt; sharedFactor &gt; &amp;</type>
      <name>remainingFactors</name>
      <anchorfile>a02891.html</anchorfile>
      <anchor>abce2db4ebedd83f21305825f7249e89f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="typedef">
      <type>GaussianBayesTree</type>
      <name>BayesTreeType</name>
      <anchorfile>a02891.html</anchorfile>
      <anchor>a903f18641237cb3ade58d72aeb8ba89c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GaussianFactorGraph</type>
      <name>FactorGraphType</name>
      <anchorfile>a02891.html</anchorfile>
      <anchor>aa90e00878d09f0f6536a487b6c083604</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>EliminatableClusterTree&lt; GaussianBayesTree, GaussianFactorGraph &gt;</type>
      <name>This</name>
      <anchorfile>a02891.html</anchorfile>
      <anchor>a0223c734101df3eebb97e09eabc0ecaf</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; This &gt;</type>
      <name>shared_ptr</name>
      <anchorfile>a02891.html</anchorfile>
      <anchor>acc8911d6ebde85bca47b51baede3fff8</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GaussianBayesTree ::ConditionalType</type>
      <name>ConditionalType</name>
      <anchorfile>a02891.html</anchorfile>
      <anchor>a0a4068d88de38214cc40f4a74d655c44</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; ConditionalType &gt;</type>
      <name>sharedConditional</name>
      <anchorfile>a02891.html</anchorfile>
      <anchor>a6157893772d92c0ea04206a8f02ddb05</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GaussianFactorGraph ::Eliminate</type>
      <name>Eliminate</name>
      <anchorfile>a02891.html</anchorfile>
      <anchor>af809c368808a33b15a8669ae1a04912e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GaussianFactorGraph ::FactorType</type>
      <name>FactorType</name>
      <anchorfile>a02891.html</anchorfile>
      <anchor>a9327311eb33b3bfc88da2473d355e56d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; FactorType &gt;</type>
      <name>sharedFactor</name>
      <anchorfile>a02891.html</anchorfile>
      <anchor>a673bca4ae33509fc9903516d9fba8794</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>EliminatableClusterTree</name>
      <anchorfile>a02891.html</anchorfile>
      <anchor>a8ca5e336fa4998b33d1745c52c592897</anchor>
      <arglist>(const This &amp;other)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>EliminatableClusterTree</name>
      <anchorfile>a02891.html</anchorfile>
      <anchor>a025f8403f75d9e98e29e99a4ed318aea</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>This &amp;</type>
      <name>operator=</name>
      <anchorfile>a02891.html</anchorfile>
      <anchor>a19b6f69043d78e06565db935e9d0b460</anchor>
      <arglist>(const This &amp;other)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>EliminatableClusterTree&lt; ISAM2BayesTree, GaussianFactorGraph &gt;</name>
    <filename>a02891.html</filename>
    <base>ClusterTree&lt; GaussianFactorGraph &gt;</base>
    <member kind="function" protection="protected">
      <type></type>
      <name>EliminatableClusterTree</name>
      <anchorfile>a02891.html</anchorfile>
      <anchor>a8ca5e336fa4998b33d1745c52c592897</anchor>
      <arglist>(const This &amp;other)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>EliminatableClusterTree</name>
      <anchorfile>a02891.html</anchorfile>
      <anchor>a025f8403f75d9e98e29e99a4ed318aea</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>This &amp;</type>
      <name>operator=</name>
      <anchorfile>a02891.html</anchorfile>
      <anchor>a19b6f69043d78e06565db935e9d0b460</anchor>
      <arglist>(const This &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>std::pair&lt; boost::shared_ptr&lt; BayesTreeType &gt;, boost::shared_ptr&lt; FactorGraphType &gt; &gt;</type>
      <name>eliminate</name>
      <anchorfile>a02891.html</anchorfile>
      <anchor>a48864b139f927eee46de3078bfbf9234</anchor>
      <arglist>(const Eliminate &amp;function) const</arglist>
    </member>
    <member kind="function">
      <type>const FastVector&lt; sharedFactor &gt; &amp;</type>
      <name>remainingFactors</name>
      <anchorfile>a02891.html</anchorfile>
      <anchor>abce2db4ebedd83f21305825f7249e89f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::pair&lt; boost::shared_ptr&lt; BayesTreeType &gt;, boost::shared_ptr&lt; FactorGraphType &gt; &gt;</type>
      <name>eliminate</name>
      <anchorfile>a02891.html</anchorfile>
      <anchor>a48864b139f927eee46de3078bfbf9234</anchor>
      <arglist>(const Eliminate &amp;function) const</arglist>
    </member>
    <member kind="function">
      <type>const FastVector&lt; sharedFactor &gt; &amp;</type>
      <name>remainingFactors</name>
      <anchorfile>a02891.html</anchorfile>
      <anchor>abce2db4ebedd83f21305825f7249e89f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="typedef">
      <type>ISAM2BayesTree</type>
      <name>BayesTreeType</name>
      <anchorfile>a02891.html</anchorfile>
      <anchor>a903f18641237cb3ade58d72aeb8ba89c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GaussianFactorGraph</type>
      <name>FactorGraphType</name>
      <anchorfile>a02891.html</anchorfile>
      <anchor>aa90e00878d09f0f6536a487b6c083604</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>EliminatableClusterTree&lt; ISAM2BayesTree, GaussianFactorGraph &gt;</type>
      <name>This</name>
      <anchorfile>a02891.html</anchorfile>
      <anchor>a0223c734101df3eebb97e09eabc0ecaf</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; This &gt;</type>
      <name>shared_ptr</name>
      <anchorfile>a02891.html</anchorfile>
      <anchor>acc8911d6ebde85bca47b51baede3fff8</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ISAM2BayesTree ::ConditionalType</type>
      <name>ConditionalType</name>
      <anchorfile>a02891.html</anchorfile>
      <anchor>a0a4068d88de38214cc40f4a74d655c44</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; ConditionalType &gt;</type>
      <name>sharedConditional</name>
      <anchorfile>a02891.html</anchorfile>
      <anchor>a6157893772d92c0ea04206a8f02ddb05</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GaussianFactorGraph ::Eliminate</type>
      <name>Eliminate</name>
      <anchorfile>a02891.html</anchorfile>
      <anchor>af809c368808a33b15a8669ae1a04912e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GaussianFactorGraph ::FactorType</type>
      <name>FactorType</name>
      <anchorfile>a02891.html</anchorfile>
      <anchor>a9327311eb33b3bfc88da2473d355e56d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; FactorType &gt;</type>
      <name>sharedFactor</name>
      <anchorfile>a02891.html</anchorfile>
      <anchor>a673bca4ae33509fc9903516d9fba8794</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>EliminatableClusterTree</name>
      <anchorfile>a02891.html</anchorfile>
      <anchor>a8ca5e336fa4998b33d1745c52c592897</anchor>
      <arglist>(const This &amp;other)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>EliminatableClusterTree</name>
      <anchorfile>a02891.html</anchorfile>
      <anchor>a025f8403f75d9e98e29e99a4ed318aea</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>This &amp;</type>
      <name>operator=</name>
      <anchorfile>a02891.html</anchorfile>
      <anchor>a19b6f69043d78e06565db935e9d0b460</anchor>
      <arglist>(const This &amp;other)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>EliminatableClusterTree&lt; SymbolicBayesTree, SymbolicFactorGraph &gt;</name>
    <filename>a02891.html</filename>
    <base>ClusterTree&lt; SymbolicFactorGraph &gt;</base>
    <member kind="function" protection="protected">
      <type></type>
      <name>EliminatableClusterTree</name>
      <anchorfile>a02891.html</anchorfile>
      <anchor>a8ca5e336fa4998b33d1745c52c592897</anchor>
      <arglist>(const This &amp;other)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>EliminatableClusterTree</name>
      <anchorfile>a02891.html</anchorfile>
      <anchor>a025f8403f75d9e98e29e99a4ed318aea</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>This &amp;</type>
      <name>operator=</name>
      <anchorfile>a02891.html</anchorfile>
      <anchor>a19b6f69043d78e06565db935e9d0b460</anchor>
      <arglist>(const This &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>std::pair&lt; boost::shared_ptr&lt; BayesTreeType &gt;, boost::shared_ptr&lt; FactorGraphType &gt; &gt;</type>
      <name>eliminate</name>
      <anchorfile>a02891.html</anchorfile>
      <anchor>a48864b139f927eee46de3078bfbf9234</anchor>
      <arglist>(const Eliminate &amp;function) const</arglist>
    </member>
    <member kind="function">
      <type>const FastVector&lt; sharedFactor &gt; &amp;</type>
      <name>remainingFactors</name>
      <anchorfile>a02891.html</anchorfile>
      <anchor>abce2db4ebedd83f21305825f7249e89f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::pair&lt; boost::shared_ptr&lt; BayesTreeType &gt;, boost::shared_ptr&lt; FactorGraphType &gt; &gt;</type>
      <name>eliminate</name>
      <anchorfile>a02891.html</anchorfile>
      <anchor>a48864b139f927eee46de3078bfbf9234</anchor>
      <arglist>(const Eliminate &amp;function) const</arglist>
    </member>
    <member kind="function">
      <type>const FastVector&lt; sharedFactor &gt; &amp;</type>
      <name>remainingFactors</name>
      <anchorfile>a02891.html</anchorfile>
      <anchor>abce2db4ebedd83f21305825f7249e89f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="typedef">
      <type>SymbolicBayesTree</type>
      <name>BayesTreeType</name>
      <anchorfile>a02891.html</anchorfile>
      <anchor>a903f18641237cb3ade58d72aeb8ba89c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SymbolicFactorGraph</type>
      <name>FactorGraphType</name>
      <anchorfile>a02891.html</anchorfile>
      <anchor>aa90e00878d09f0f6536a487b6c083604</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>EliminatableClusterTree&lt; SymbolicBayesTree, SymbolicFactorGraph &gt;</type>
      <name>This</name>
      <anchorfile>a02891.html</anchorfile>
      <anchor>a0223c734101df3eebb97e09eabc0ecaf</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; This &gt;</type>
      <name>shared_ptr</name>
      <anchorfile>a02891.html</anchorfile>
      <anchor>acc8911d6ebde85bca47b51baede3fff8</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SymbolicBayesTree ::ConditionalType</type>
      <name>ConditionalType</name>
      <anchorfile>a02891.html</anchorfile>
      <anchor>a0a4068d88de38214cc40f4a74d655c44</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; ConditionalType &gt;</type>
      <name>sharedConditional</name>
      <anchorfile>a02891.html</anchorfile>
      <anchor>a6157893772d92c0ea04206a8f02ddb05</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SymbolicFactorGraph ::Eliminate</type>
      <name>Eliminate</name>
      <anchorfile>a02891.html</anchorfile>
      <anchor>af809c368808a33b15a8669ae1a04912e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SymbolicFactorGraph ::FactorType</type>
      <name>FactorType</name>
      <anchorfile>a02891.html</anchorfile>
      <anchor>a9327311eb33b3bfc88da2473d355e56d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; FactorType &gt;</type>
      <name>sharedFactor</name>
      <anchorfile>a02891.html</anchorfile>
      <anchor>a673bca4ae33509fc9903516d9fba8794</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>EliminatableClusterTree</name>
      <anchorfile>a02891.html</anchorfile>
      <anchor>a8ca5e336fa4998b33d1745c52c592897</anchor>
      <arglist>(const This &amp;other)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>EliminatableClusterTree</name>
      <anchorfile>a02891.html</anchorfile>
      <anchor>a025f8403f75d9e98e29e99a4ed318aea</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>This &amp;</type>
      <name>operator=</name>
      <anchorfile>a02891.html</anchorfile>
      <anchor>a19b6f69043d78e06565db935e9d0b460</anchor>
      <arglist>(const This &amp;other)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::EliminateableFactorGraph</name>
    <filename>a02939.html</filename>
    <templarg>FACTORGRAPH</templarg>
    <member kind="function">
      <type>boost::shared_ptr&lt; BayesNetType &gt;</type>
      <name>eliminateSequential</name>
      <anchorfile>a02939.html</anchorfile>
      <anchor>aee4eddb0e0dc40bc4a4e8a0c1fc07f86</anchor>
      <arglist>(OptionalOrdering ordering=boost::none, const Eliminate &amp;function=EliminationTraitsType::DefaultEliminate, OptionalVariableIndex variableIndex=boost::none, OptionalOrderingType orderingType=boost::none) const</arglist>
    </member>
    <member kind="function">
      <type>boost::shared_ptr&lt; BayesTreeType &gt;</type>
      <name>eliminateMultifrontal</name>
      <anchorfile>a02939.html</anchorfile>
      <anchor>a5965e915c4ce274fa61d515590c9f58a</anchor>
      <arglist>(OptionalOrdering ordering=boost::none, const Eliminate &amp;function=EliminationTraitsType::DefaultEliminate, OptionalVariableIndex variableIndex=boost::none, OptionalOrderingType orderingType=boost::none) const</arglist>
    </member>
    <member kind="function">
      <type>std::pair&lt; boost::shared_ptr&lt; BayesNetType &gt;, boost::shared_ptr&lt; FactorGraphType &gt; &gt;</type>
      <name>eliminatePartialSequential</name>
      <anchorfile>a02939.html</anchorfile>
      <anchor>aded9c4a2331cab96eadac101c9d59ca9</anchor>
      <arglist>(const Ordering &amp;ordering, const Eliminate &amp;function=EliminationTraitsType::DefaultEliminate, OptionalVariableIndex variableIndex=boost::none) const</arglist>
    </member>
    <member kind="function">
      <type>std::pair&lt; boost::shared_ptr&lt; BayesNetType &gt;, boost::shared_ptr&lt; FactorGraphType &gt; &gt;</type>
      <name>eliminatePartialSequential</name>
      <anchorfile>a02939.html</anchorfile>
      <anchor>a2ff9c400c9160cd682aa47077e2bef64</anchor>
      <arglist>(const KeyVector &amp;variables, const Eliminate &amp;function=EliminationTraitsType::DefaultEliminate, OptionalVariableIndex variableIndex=boost::none) const</arglist>
    </member>
    <member kind="function">
      <type>std::pair&lt; boost::shared_ptr&lt; BayesTreeType &gt;, boost::shared_ptr&lt; FactorGraphType &gt; &gt;</type>
      <name>eliminatePartialMultifrontal</name>
      <anchorfile>a02939.html</anchorfile>
      <anchor>ae53290598abe8dd8b0e0d95dde1efb6b</anchor>
      <arglist>(const Ordering &amp;ordering, const Eliminate &amp;function=EliminationTraitsType::DefaultEliminate, OptionalVariableIndex variableIndex=boost::none) const</arglist>
    </member>
    <member kind="function">
      <type>std::pair&lt; boost::shared_ptr&lt; BayesTreeType &gt;, boost::shared_ptr&lt; FactorGraphType &gt; &gt;</type>
      <name>eliminatePartialMultifrontal</name>
      <anchorfile>a02939.html</anchorfile>
      <anchor>af652507a2aebb5677e65d2a2d20fa6e5</anchor>
      <arglist>(const KeyVector &amp;variables, const Eliminate &amp;function=EliminationTraitsType::DefaultEliminate, OptionalVariableIndex variableIndex=boost::none) const</arglist>
    </member>
    <member kind="function">
      <type>boost::shared_ptr&lt; BayesNetType &gt;</type>
      <name>marginalMultifrontalBayesNet</name>
      <anchorfile>a02939.html</anchorfile>
      <anchor>aa2a9ead3521a002e923a5a39074c6263</anchor>
      <arglist>(boost::variant&lt; const Ordering &amp;, const KeyVector &amp; &gt; variables, OptionalOrdering marginalizedVariableOrdering=boost::none, const Eliminate &amp;function=EliminationTraitsType::DefaultEliminate, OptionalVariableIndex variableIndex=boost::none) const</arglist>
    </member>
    <member kind="function">
      <type>boost::shared_ptr&lt; BayesTreeType &gt;</type>
      <name>marginalMultifrontalBayesTree</name>
      <anchorfile>a02939.html</anchorfile>
      <anchor>aabd4903202455396faa7b0a2eecece02</anchor>
      <arglist>(boost::variant&lt; const Ordering &amp;, const KeyVector &amp; &gt; variables, OptionalOrdering marginalizedVariableOrdering=boost::none, const Eliminate &amp;function=EliminationTraitsType::DefaultEliminate, OptionalVariableIndex variableIndex=boost::none) const</arglist>
    </member>
    <member kind="function">
      <type>boost::shared_ptr&lt; FactorGraphType &gt;</type>
      <name>marginal</name>
      <anchorfile>a02939.html</anchorfile>
      <anchor>a2dd60099f55b2bd1a13b88add4d0ebb7</anchor>
      <arglist>(const KeyVector &amp;variables, const Eliminate &amp;function=EliminationTraitsType::DefaultEliminate, OptionalVariableIndex variableIndex=boost::none) const</arglist>
    </member>
    <member kind="typedef">
      <type>EliminationTraits&lt; FactorGraphType &gt;</type>
      <name>EliminationTraitsType</name>
      <anchorfile>a02939.html</anchorfile>
      <anchor>ab732061a18179b70a5c03c63ee1de69d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>EliminationTraitsType::ConditionalType</type>
      <name>ConditionalType</name>
      <anchorfile>a02939.html</anchorfile>
      <anchor>abc4c30e867b516d0b5ff14761500aa07</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>EliminationTraitsType::BayesNetType</type>
      <name>BayesNetType</name>
      <anchorfile>a02939.html</anchorfile>
      <anchor>ae3cdbdc79f7d1cd8363c4986ad240d39</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>EliminationTraitsType::EliminationTreeType</type>
      <name>EliminationTreeType</name>
      <anchorfile>a02939.html</anchorfile>
      <anchor>a346379e4f07ee882f299fb36ea363095</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>EliminationTraitsType::BayesTreeType</type>
      <name>BayesTreeType</name>
      <anchorfile>a02939.html</anchorfile>
      <anchor>acadf38a0c32b1c2586dd169e0f7d1b8f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>EliminationTraitsType::JunctionTreeType</type>
      <name>JunctionTreeType</name>
      <anchorfile>a02939.html</anchorfile>
      <anchor>a09b40d82e5be58829294d734b90e74cb</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::pair&lt; boost::shared_ptr&lt; ConditionalType &gt;, boost::shared_ptr&lt; _FactorType &gt; &gt;</type>
      <name>EliminationResult</name>
      <anchorfile>a02939.html</anchorfile>
      <anchor>a65b359d184a02cd3c2f65ea09f76cada</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::function&lt; EliminationResult(const FactorGraphType &amp;, const Ordering &amp;)&gt;</type>
      <name>Eliminate</name>
      <anchorfile>a02939.html</anchorfile>
      <anchor>a63fe4a32952113eee5e3d767f5f721a3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::optional&lt; const Ordering &amp; &gt;</type>
      <name>OptionalOrdering</name>
      <anchorfile>a02939.html</anchorfile>
      <anchor>a9ea68785977d332075def60e26aea60c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::optional&lt; const VariableIndex &amp; &gt;</type>
      <name>OptionalVariableIndex</name>
      <anchorfile>a02939.html</anchorfile>
      <anchor>a1c7c9da555a7ee42ad0bccd5b3d51db9</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::optional&lt; Ordering::OrderingType &gt;</type>
      <name>OptionalOrderingType</name>
      <anchorfile>a02939.html</anchorfile>
      <anchor>acabbe9ae661818f9b84906ab285b5191</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>EliminateableFactorGraph&lt; DiscreteFactorGraph &gt;</name>
    <filename>a02939.html</filename>
    <member kind="function">
      <type>boost::shared_ptr&lt; BayesNetType &gt;</type>
      <name>eliminateSequential</name>
      <anchorfile>a02939.html</anchorfile>
      <anchor>aee4eddb0e0dc40bc4a4e8a0c1fc07f86</anchor>
      <arglist>(OptionalOrdering ordering=boost::none, const Eliminate &amp;function=EliminationTraitsType::DefaultEliminate, OptionalVariableIndex variableIndex=boost::none, OptionalOrderingType orderingType=boost::none) const</arglist>
    </member>
    <member kind="function">
      <type>boost::shared_ptr&lt; BayesTreeType &gt;</type>
      <name>eliminateMultifrontal</name>
      <anchorfile>a02939.html</anchorfile>
      <anchor>a5965e915c4ce274fa61d515590c9f58a</anchor>
      <arglist>(OptionalOrdering ordering=boost::none, const Eliminate &amp;function=EliminationTraitsType::DefaultEliminate, OptionalVariableIndex variableIndex=boost::none, OptionalOrderingType orderingType=boost::none) const</arglist>
    </member>
    <member kind="function">
      <type>std::pair&lt; boost::shared_ptr&lt; BayesNetType &gt;, boost::shared_ptr&lt; FactorGraphType &gt; &gt;</type>
      <name>eliminatePartialSequential</name>
      <anchorfile>a02939.html</anchorfile>
      <anchor>aded9c4a2331cab96eadac101c9d59ca9</anchor>
      <arglist>(const Ordering &amp;ordering, const Eliminate &amp;function=EliminationTraitsType::DefaultEliminate, OptionalVariableIndex variableIndex=boost::none) const</arglist>
    </member>
    <member kind="function">
      <type>std::pair&lt; boost::shared_ptr&lt; BayesNetType &gt;, boost::shared_ptr&lt; FactorGraphType &gt; &gt;</type>
      <name>eliminatePartialSequential</name>
      <anchorfile>a02939.html</anchorfile>
      <anchor>a2ff9c400c9160cd682aa47077e2bef64</anchor>
      <arglist>(const KeyVector &amp;variables, const Eliminate &amp;function=EliminationTraitsType::DefaultEliminate, OptionalVariableIndex variableIndex=boost::none) const</arglist>
    </member>
    <member kind="function">
      <type>std::pair&lt; boost::shared_ptr&lt; BayesTreeType &gt;, boost::shared_ptr&lt; FactorGraphType &gt; &gt;</type>
      <name>eliminatePartialMultifrontal</name>
      <anchorfile>a02939.html</anchorfile>
      <anchor>ae53290598abe8dd8b0e0d95dde1efb6b</anchor>
      <arglist>(const Ordering &amp;ordering, const Eliminate &amp;function=EliminationTraitsType::DefaultEliminate, OptionalVariableIndex variableIndex=boost::none) const</arglist>
    </member>
    <member kind="function">
      <type>std::pair&lt; boost::shared_ptr&lt; BayesTreeType &gt;, boost::shared_ptr&lt; FactorGraphType &gt; &gt;</type>
      <name>eliminatePartialMultifrontal</name>
      <anchorfile>a02939.html</anchorfile>
      <anchor>af652507a2aebb5677e65d2a2d20fa6e5</anchor>
      <arglist>(const KeyVector &amp;variables, const Eliminate &amp;function=EliminationTraitsType::DefaultEliminate, OptionalVariableIndex variableIndex=boost::none) const</arglist>
    </member>
    <member kind="function">
      <type>boost::shared_ptr&lt; BayesNetType &gt;</type>
      <name>marginalMultifrontalBayesNet</name>
      <anchorfile>a02939.html</anchorfile>
      <anchor>aa2a9ead3521a002e923a5a39074c6263</anchor>
      <arglist>(boost::variant&lt; const Ordering &amp;, const KeyVector &amp; &gt; variables, OptionalOrdering marginalizedVariableOrdering=boost::none, const Eliminate &amp;function=EliminationTraitsType::DefaultEliminate, OptionalVariableIndex variableIndex=boost::none) const</arglist>
    </member>
    <member kind="function">
      <type>boost::shared_ptr&lt; BayesTreeType &gt;</type>
      <name>marginalMultifrontalBayesTree</name>
      <anchorfile>a02939.html</anchorfile>
      <anchor>aabd4903202455396faa7b0a2eecece02</anchor>
      <arglist>(boost::variant&lt; const Ordering &amp;, const KeyVector &amp; &gt; variables, OptionalOrdering marginalizedVariableOrdering=boost::none, const Eliminate &amp;function=EliminationTraitsType::DefaultEliminate, OptionalVariableIndex variableIndex=boost::none) const</arglist>
    </member>
    <member kind="function">
      <type>boost::shared_ptr&lt; FactorGraphType &gt;</type>
      <name>marginal</name>
      <anchorfile>a02939.html</anchorfile>
      <anchor>a2dd60099f55b2bd1a13b88add4d0ebb7</anchor>
      <arglist>(const KeyVector &amp;variables, const Eliminate &amp;function=EliminationTraitsType::DefaultEliminate, OptionalVariableIndex variableIndex=boost::none) const</arglist>
    </member>
    <member kind="typedef">
      <type>EliminationTraits&lt; FactorGraphType &gt;</type>
      <name>EliminationTraitsType</name>
      <anchorfile>a02939.html</anchorfile>
      <anchor>ab732061a18179b70a5c03c63ee1de69d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>EliminationTraitsType::ConditionalType</type>
      <name>ConditionalType</name>
      <anchorfile>a02939.html</anchorfile>
      <anchor>abc4c30e867b516d0b5ff14761500aa07</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>EliminationTraitsType::BayesNetType</type>
      <name>BayesNetType</name>
      <anchorfile>a02939.html</anchorfile>
      <anchor>ae3cdbdc79f7d1cd8363c4986ad240d39</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>EliminationTraitsType::EliminationTreeType</type>
      <name>EliminationTreeType</name>
      <anchorfile>a02939.html</anchorfile>
      <anchor>a346379e4f07ee882f299fb36ea363095</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>EliminationTraitsType::BayesTreeType</type>
      <name>BayesTreeType</name>
      <anchorfile>a02939.html</anchorfile>
      <anchor>acadf38a0c32b1c2586dd169e0f7d1b8f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>EliminationTraitsType::JunctionTreeType</type>
      <name>JunctionTreeType</name>
      <anchorfile>a02939.html</anchorfile>
      <anchor>a09b40d82e5be58829294d734b90e74cb</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::pair&lt; boost::shared_ptr&lt; ConditionalType &gt;, boost::shared_ptr&lt; _FactorType &gt; &gt;</type>
      <name>EliminationResult</name>
      <anchorfile>a02939.html</anchorfile>
      <anchor>a65b359d184a02cd3c2f65ea09f76cada</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::function&lt; EliminationResult(const FactorGraphType &amp;, const Ordering &amp;)&gt;</type>
      <name>Eliminate</name>
      <anchorfile>a02939.html</anchorfile>
      <anchor>a63fe4a32952113eee5e3d767f5f721a3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::optional&lt; const Ordering &amp; &gt;</type>
      <name>OptionalOrdering</name>
      <anchorfile>a02939.html</anchorfile>
      <anchor>a9ea68785977d332075def60e26aea60c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::optional&lt; const VariableIndex &amp; &gt;</type>
      <name>OptionalVariableIndex</name>
      <anchorfile>a02939.html</anchorfile>
      <anchor>a1c7c9da555a7ee42ad0bccd5b3d51db9</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::optional&lt; Ordering::OrderingType &gt;</type>
      <name>OptionalOrderingType</name>
      <anchorfile>a02939.html</anchorfile>
      <anchor>acabbe9ae661818f9b84906ab285b5191</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>EliminateableFactorGraph&lt; GaussianFactorGraph &gt;</name>
    <filename>a02939.html</filename>
    <member kind="function">
      <type>boost::shared_ptr&lt; BayesNetType &gt;</type>
      <name>eliminateSequential</name>
      <anchorfile>a02939.html</anchorfile>
      <anchor>aee4eddb0e0dc40bc4a4e8a0c1fc07f86</anchor>
      <arglist>(OptionalOrdering ordering=boost::none, const Eliminate &amp;function=EliminationTraitsType::DefaultEliminate, OptionalVariableIndex variableIndex=boost::none, OptionalOrderingType orderingType=boost::none) const</arglist>
    </member>
    <member kind="function">
      <type>boost::shared_ptr&lt; BayesTreeType &gt;</type>
      <name>eliminateMultifrontal</name>
      <anchorfile>a02939.html</anchorfile>
      <anchor>a5965e915c4ce274fa61d515590c9f58a</anchor>
      <arglist>(OptionalOrdering ordering=boost::none, const Eliminate &amp;function=EliminationTraitsType::DefaultEliminate, OptionalVariableIndex variableIndex=boost::none, OptionalOrderingType orderingType=boost::none) const</arglist>
    </member>
    <member kind="function">
      <type>std::pair&lt; boost::shared_ptr&lt; BayesNetType &gt;, boost::shared_ptr&lt; FactorGraphType &gt; &gt;</type>
      <name>eliminatePartialSequential</name>
      <anchorfile>a02939.html</anchorfile>
      <anchor>aded9c4a2331cab96eadac101c9d59ca9</anchor>
      <arglist>(const Ordering &amp;ordering, const Eliminate &amp;function=EliminationTraitsType::DefaultEliminate, OptionalVariableIndex variableIndex=boost::none) const</arglist>
    </member>
    <member kind="function">
      <type>std::pair&lt; boost::shared_ptr&lt; BayesNetType &gt;, boost::shared_ptr&lt; FactorGraphType &gt; &gt;</type>
      <name>eliminatePartialSequential</name>
      <anchorfile>a02939.html</anchorfile>
      <anchor>a2ff9c400c9160cd682aa47077e2bef64</anchor>
      <arglist>(const KeyVector &amp;variables, const Eliminate &amp;function=EliminationTraitsType::DefaultEliminate, OptionalVariableIndex variableIndex=boost::none) const</arglist>
    </member>
    <member kind="function">
      <type>std::pair&lt; boost::shared_ptr&lt; BayesTreeType &gt;, boost::shared_ptr&lt; FactorGraphType &gt; &gt;</type>
      <name>eliminatePartialMultifrontal</name>
      <anchorfile>a02939.html</anchorfile>
      <anchor>ae53290598abe8dd8b0e0d95dde1efb6b</anchor>
      <arglist>(const Ordering &amp;ordering, const Eliminate &amp;function=EliminationTraitsType::DefaultEliminate, OptionalVariableIndex variableIndex=boost::none) const</arglist>
    </member>
    <member kind="function">
      <type>std::pair&lt; boost::shared_ptr&lt; BayesTreeType &gt;, boost::shared_ptr&lt; FactorGraphType &gt; &gt;</type>
      <name>eliminatePartialMultifrontal</name>
      <anchorfile>a02939.html</anchorfile>
      <anchor>af652507a2aebb5677e65d2a2d20fa6e5</anchor>
      <arglist>(const KeyVector &amp;variables, const Eliminate &amp;function=EliminationTraitsType::DefaultEliminate, OptionalVariableIndex variableIndex=boost::none) const</arglist>
    </member>
    <member kind="function">
      <type>boost::shared_ptr&lt; BayesNetType &gt;</type>
      <name>marginalMultifrontalBayesNet</name>
      <anchorfile>a02939.html</anchorfile>
      <anchor>aa2a9ead3521a002e923a5a39074c6263</anchor>
      <arglist>(boost::variant&lt; const Ordering &amp;, const KeyVector &amp; &gt; variables, OptionalOrdering marginalizedVariableOrdering=boost::none, const Eliminate &amp;function=EliminationTraitsType::DefaultEliminate, OptionalVariableIndex variableIndex=boost::none) const</arglist>
    </member>
    <member kind="function">
      <type>boost::shared_ptr&lt; BayesTreeType &gt;</type>
      <name>marginalMultifrontalBayesTree</name>
      <anchorfile>a02939.html</anchorfile>
      <anchor>aabd4903202455396faa7b0a2eecece02</anchor>
      <arglist>(boost::variant&lt; const Ordering &amp;, const KeyVector &amp; &gt; variables, OptionalOrdering marginalizedVariableOrdering=boost::none, const Eliminate &amp;function=EliminationTraitsType::DefaultEliminate, OptionalVariableIndex variableIndex=boost::none) const</arglist>
    </member>
    <member kind="function">
      <type>boost::shared_ptr&lt; FactorGraphType &gt;</type>
      <name>marginal</name>
      <anchorfile>a02939.html</anchorfile>
      <anchor>a2dd60099f55b2bd1a13b88add4d0ebb7</anchor>
      <arglist>(const KeyVector &amp;variables, const Eliminate &amp;function=EliminationTraitsType::DefaultEliminate, OptionalVariableIndex variableIndex=boost::none) const</arglist>
    </member>
    <member kind="typedef">
      <type>EliminationTraits&lt; FactorGraphType &gt;</type>
      <name>EliminationTraitsType</name>
      <anchorfile>a02939.html</anchorfile>
      <anchor>ab732061a18179b70a5c03c63ee1de69d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>EliminationTraitsType::ConditionalType</type>
      <name>ConditionalType</name>
      <anchorfile>a02939.html</anchorfile>
      <anchor>abc4c30e867b516d0b5ff14761500aa07</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>EliminationTraitsType::BayesNetType</type>
      <name>BayesNetType</name>
      <anchorfile>a02939.html</anchorfile>
      <anchor>ae3cdbdc79f7d1cd8363c4986ad240d39</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>EliminationTraitsType::EliminationTreeType</type>
      <name>EliminationTreeType</name>
      <anchorfile>a02939.html</anchorfile>
      <anchor>a346379e4f07ee882f299fb36ea363095</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>EliminationTraitsType::BayesTreeType</type>
      <name>BayesTreeType</name>
      <anchorfile>a02939.html</anchorfile>
      <anchor>acadf38a0c32b1c2586dd169e0f7d1b8f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>EliminationTraitsType::JunctionTreeType</type>
      <name>JunctionTreeType</name>
      <anchorfile>a02939.html</anchorfile>
      <anchor>a09b40d82e5be58829294d734b90e74cb</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::pair&lt; boost::shared_ptr&lt; ConditionalType &gt;, boost::shared_ptr&lt; _FactorType &gt; &gt;</type>
      <name>EliminationResult</name>
      <anchorfile>a02939.html</anchorfile>
      <anchor>a65b359d184a02cd3c2f65ea09f76cada</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::function&lt; EliminationResult(const FactorGraphType &amp;, const Ordering &amp;)&gt;</type>
      <name>Eliminate</name>
      <anchorfile>a02939.html</anchorfile>
      <anchor>a63fe4a32952113eee5e3d767f5f721a3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::optional&lt; const Ordering &amp; &gt;</type>
      <name>OptionalOrdering</name>
      <anchorfile>a02939.html</anchorfile>
      <anchor>a9ea68785977d332075def60e26aea60c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::optional&lt; const VariableIndex &amp; &gt;</type>
      <name>OptionalVariableIndex</name>
      <anchorfile>a02939.html</anchorfile>
      <anchor>a1c7c9da555a7ee42ad0bccd5b3d51db9</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::optional&lt; Ordering::OrderingType &gt;</type>
      <name>OptionalOrderingType</name>
      <anchorfile>a02939.html</anchorfile>
      <anchor>acabbe9ae661818f9b84906ab285b5191</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>EliminateableFactorGraph&lt; SymbolicFactorGraph &gt;</name>
    <filename>a02939.html</filename>
    <member kind="function">
      <type>boost::shared_ptr&lt; BayesNetType &gt;</type>
      <name>eliminateSequential</name>
      <anchorfile>a02939.html</anchorfile>
      <anchor>aee4eddb0e0dc40bc4a4e8a0c1fc07f86</anchor>
      <arglist>(OptionalOrdering ordering=boost::none, const Eliminate &amp;function=EliminationTraitsType::DefaultEliminate, OptionalVariableIndex variableIndex=boost::none, OptionalOrderingType orderingType=boost::none) const</arglist>
    </member>
    <member kind="function">
      <type>boost::shared_ptr&lt; BayesTreeType &gt;</type>
      <name>eliminateMultifrontal</name>
      <anchorfile>a02939.html</anchorfile>
      <anchor>a5965e915c4ce274fa61d515590c9f58a</anchor>
      <arglist>(OptionalOrdering ordering=boost::none, const Eliminate &amp;function=EliminationTraitsType::DefaultEliminate, OptionalVariableIndex variableIndex=boost::none, OptionalOrderingType orderingType=boost::none) const</arglist>
    </member>
    <member kind="function">
      <type>std::pair&lt; boost::shared_ptr&lt; BayesNetType &gt;, boost::shared_ptr&lt; FactorGraphType &gt; &gt;</type>
      <name>eliminatePartialSequential</name>
      <anchorfile>a02939.html</anchorfile>
      <anchor>aded9c4a2331cab96eadac101c9d59ca9</anchor>
      <arglist>(const Ordering &amp;ordering, const Eliminate &amp;function=EliminationTraitsType::DefaultEliminate, OptionalVariableIndex variableIndex=boost::none) const</arglist>
    </member>
    <member kind="function">
      <type>std::pair&lt; boost::shared_ptr&lt; BayesNetType &gt;, boost::shared_ptr&lt; FactorGraphType &gt; &gt;</type>
      <name>eliminatePartialSequential</name>
      <anchorfile>a02939.html</anchorfile>
      <anchor>a2ff9c400c9160cd682aa47077e2bef64</anchor>
      <arglist>(const KeyVector &amp;variables, const Eliminate &amp;function=EliminationTraitsType::DefaultEliminate, OptionalVariableIndex variableIndex=boost::none) const</arglist>
    </member>
    <member kind="function">
      <type>std::pair&lt; boost::shared_ptr&lt; BayesTreeType &gt;, boost::shared_ptr&lt; FactorGraphType &gt; &gt;</type>
      <name>eliminatePartialMultifrontal</name>
      <anchorfile>a02939.html</anchorfile>
      <anchor>ae53290598abe8dd8b0e0d95dde1efb6b</anchor>
      <arglist>(const Ordering &amp;ordering, const Eliminate &amp;function=EliminationTraitsType::DefaultEliminate, OptionalVariableIndex variableIndex=boost::none) const</arglist>
    </member>
    <member kind="function">
      <type>std::pair&lt; boost::shared_ptr&lt; BayesTreeType &gt;, boost::shared_ptr&lt; FactorGraphType &gt; &gt;</type>
      <name>eliminatePartialMultifrontal</name>
      <anchorfile>a02939.html</anchorfile>
      <anchor>af652507a2aebb5677e65d2a2d20fa6e5</anchor>
      <arglist>(const KeyVector &amp;variables, const Eliminate &amp;function=EliminationTraitsType::DefaultEliminate, OptionalVariableIndex variableIndex=boost::none) const</arglist>
    </member>
    <member kind="function">
      <type>boost::shared_ptr&lt; BayesNetType &gt;</type>
      <name>marginalMultifrontalBayesNet</name>
      <anchorfile>a02939.html</anchorfile>
      <anchor>aa2a9ead3521a002e923a5a39074c6263</anchor>
      <arglist>(boost::variant&lt; const Ordering &amp;, const KeyVector &amp; &gt; variables, OptionalOrdering marginalizedVariableOrdering=boost::none, const Eliminate &amp;function=EliminationTraitsType::DefaultEliminate, OptionalVariableIndex variableIndex=boost::none) const</arglist>
    </member>
    <member kind="function">
      <type>boost::shared_ptr&lt; BayesTreeType &gt;</type>
      <name>marginalMultifrontalBayesTree</name>
      <anchorfile>a02939.html</anchorfile>
      <anchor>aabd4903202455396faa7b0a2eecece02</anchor>
      <arglist>(boost::variant&lt; const Ordering &amp;, const KeyVector &amp; &gt; variables, OptionalOrdering marginalizedVariableOrdering=boost::none, const Eliminate &amp;function=EliminationTraitsType::DefaultEliminate, OptionalVariableIndex variableIndex=boost::none) const</arglist>
    </member>
    <member kind="function">
      <type>boost::shared_ptr&lt; FactorGraphType &gt;</type>
      <name>marginal</name>
      <anchorfile>a02939.html</anchorfile>
      <anchor>a2dd60099f55b2bd1a13b88add4d0ebb7</anchor>
      <arglist>(const KeyVector &amp;variables, const Eliminate &amp;function=EliminationTraitsType::DefaultEliminate, OptionalVariableIndex variableIndex=boost::none) const</arglist>
    </member>
    <member kind="typedef">
      <type>EliminationTraits&lt; FactorGraphType &gt;</type>
      <name>EliminationTraitsType</name>
      <anchorfile>a02939.html</anchorfile>
      <anchor>ab732061a18179b70a5c03c63ee1de69d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>EliminationTraitsType::ConditionalType</type>
      <name>ConditionalType</name>
      <anchorfile>a02939.html</anchorfile>
      <anchor>abc4c30e867b516d0b5ff14761500aa07</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>EliminationTraitsType::BayesNetType</type>
      <name>BayesNetType</name>
      <anchorfile>a02939.html</anchorfile>
      <anchor>ae3cdbdc79f7d1cd8363c4986ad240d39</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>EliminationTraitsType::EliminationTreeType</type>
      <name>EliminationTreeType</name>
      <anchorfile>a02939.html</anchorfile>
      <anchor>a346379e4f07ee882f299fb36ea363095</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>EliminationTraitsType::BayesTreeType</type>
      <name>BayesTreeType</name>
      <anchorfile>a02939.html</anchorfile>
      <anchor>acadf38a0c32b1c2586dd169e0f7d1b8f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>EliminationTraitsType::JunctionTreeType</type>
      <name>JunctionTreeType</name>
      <anchorfile>a02939.html</anchorfile>
      <anchor>a09b40d82e5be58829294d734b90e74cb</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::pair&lt; boost::shared_ptr&lt; ConditionalType &gt;, boost::shared_ptr&lt; _FactorType &gt; &gt;</type>
      <name>EliminationResult</name>
      <anchorfile>a02939.html</anchorfile>
      <anchor>a65b359d184a02cd3c2f65ea09f76cada</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::function&lt; EliminationResult(const FactorGraphType &amp;, const Ordering &amp;)&gt;</type>
      <name>Eliminate</name>
      <anchorfile>a02939.html</anchorfile>
      <anchor>a63fe4a32952113eee5e3d767f5f721a3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::optional&lt; const Ordering &amp; &gt;</type>
      <name>OptionalOrdering</name>
      <anchorfile>a02939.html</anchorfile>
      <anchor>a9ea68785977d332075def60e26aea60c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::optional&lt; const VariableIndex &amp; &gt;</type>
      <name>OptionalVariableIndex</name>
      <anchorfile>a02939.html</anchorfile>
      <anchor>a1c7c9da555a7ee42ad0bccd5b3d51db9</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::optional&lt; Ordering::OrderingType &gt;</type>
      <name>OptionalOrderingType</name>
      <anchorfile>a02939.html</anchorfile>
      <anchor>acabbe9ae661818f9b84906ab285b5191</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>gtsam::EliminationData</name>
    <filename>a02919.html</filename>
    <templarg></templarg>
    <class kind="class">gtsam::EliminationData::EliminationPostOrderVisitor</class>
  </compound>
  <compound kind="class">
    <name>gtsam::EliminationData::EliminationPostOrderVisitor</name>
    <filename>a02923.html</filename>
  </compound>
  <compound kind="struct">
    <name>gtsam::EliminationTraits</name>
    <filename>a02911.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>gtsam::EliminationTraits&lt; DiscreteFactorGraph &gt;</name>
    <filename>a02415.html</filename>
    <member kind="function" static="yes">
      <type>static std::pair&lt; boost::shared_ptr&lt; ConditionalType &gt;, boost::shared_ptr&lt; FactorType &gt; &gt;</type>
      <name>DefaultEliminate</name>
      <anchorfile>a02415.html</anchorfile>
      <anchor>ac651e1f38f6897e0ba5eb0ac798e1307</anchor>
      <arglist>(const FactorGraphType &amp;factors, const Ordering &amp;keys)</arglist>
    </member>
    <member kind="typedef">
      <type>DiscreteFactor</type>
      <name>FactorType</name>
      <anchorfile>a02415.html</anchorfile>
      <anchor>a414bee0b0df4c0f28a479f96ac874678</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>DiscreteFactorGraph</type>
      <name>FactorGraphType</name>
      <anchorfile>a02415.html</anchorfile>
      <anchor>a0b0039647ac9edf201136931cdaaadea</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>DiscreteConditional</type>
      <name>ConditionalType</name>
      <anchorfile>a02415.html</anchorfile>
      <anchor>ac69faa24b7ee947fe6fb0c86b735c209</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>DiscreteBayesNet</type>
      <name>BayesNetType</name>
      <anchorfile>a02415.html</anchorfile>
      <anchor>a662cce5359d9cbabb3277f88ca9f3a38</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>DiscreteEliminationTree</type>
      <name>EliminationTreeType</name>
      <anchorfile>a02415.html</anchorfile>
      <anchor>af11e1b3b45d3cdbf78d07854bbb59d82</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>DiscreteBayesTree</type>
      <name>BayesTreeType</name>
      <anchorfile>a02415.html</anchorfile>
      <anchor>a4dea5984af7ae9bb7b45b9e5f750b8d9</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>DiscreteJunctionTree</type>
      <name>JunctionTreeType</name>
      <anchorfile>a02415.html</anchorfile>
      <anchor>a3105cd6512d1674d6d433034c87b4e0c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>gtsam::EliminationTraits&lt; GaussianFactorGraph &gt;</name>
    <filename>a03131.html</filename>
    <member kind="function" static="yes">
      <type>static std::pair&lt; boost::shared_ptr&lt; ConditionalType &gt;, boost::shared_ptr&lt; FactorType &gt; &gt;</type>
      <name>DefaultEliminate</name>
      <anchorfile>a03131.html</anchorfile>
      <anchor>ae5330d1584fe5de52a66edc6b3f65270</anchor>
      <arglist>(const FactorGraphType &amp;factors, const Ordering &amp;keys)</arglist>
    </member>
    <member kind="typedef">
      <type>GaussianFactor</type>
      <name>FactorType</name>
      <anchorfile>a03131.html</anchorfile>
      <anchor>a44c2163f161ac7e266324bb084c81d82</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GaussianFactorGraph</type>
      <name>FactorGraphType</name>
      <anchorfile>a03131.html</anchorfile>
      <anchor>a84da0e567d8c07323dfe3cc962ab9b35</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GaussianConditional</type>
      <name>ConditionalType</name>
      <anchorfile>a03131.html</anchorfile>
      <anchor>a3cf2aefb4cd3f92327da069c3c57fd44</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GaussianBayesNet</type>
      <name>BayesNetType</name>
      <anchorfile>a03131.html</anchorfile>
      <anchor>a97ec662dcfbdf8116be7df830f288387</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GaussianEliminationTree</type>
      <name>EliminationTreeType</name>
      <anchorfile>a03131.html</anchorfile>
      <anchor>a847f1955c654f43fa24ff656fa3c763a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GaussianBayesTree</type>
      <name>BayesTreeType</name>
      <anchorfile>a03131.html</anchorfile>
      <anchor>a3b0578f45d822fdb8feea31cb08fc482</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GaussianJunctionTree</type>
      <name>JunctionTreeType</name>
      <anchorfile>a03131.html</anchorfile>
      <anchor>ac9a6d5a1e133796f4ef7957aced8c785</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>gtsam::EliminationTraits&lt; SymbolicFactorGraph &gt;</name>
    <filename>a04167.html</filename>
    <member kind="function" static="yes">
      <type>static std::pair&lt; boost::shared_ptr&lt; ConditionalType &gt;, boost::shared_ptr&lt; FactorType &gt; &gt;</type>
      <name>DefaultEliminate</name>
      <anchorfile>a04167.html</anchorfile>
      <anchor>afc1a336254d6a567d00d8445e1cf9500</anchor>
      <arglist>(const FactorGraphType &amp;factors, const Ordering &amp;keys)</arglist>
    </member>
    <member kind="typedef">
      <type>SymbolicFactor</type>
      <name>FactorType</name>
      <anchorfile>a04167.html</anchorfile>
      <anchor>a26777b37d1fa769f5b99439417ea858b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SymbolicFactorGraph</type>
      <name>FactorGraphType</name>
      <anchorfile>a04167.html</anchorfile>
      <anchor>a28c86252b3388e6c44407cc5a7ad822c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SymbolicConditional</type>
      <name>ConditionalType</name>
      <anchorfile>a04167.html</anchorfile>
      <anchor>affe537ded99dadd0cfde84b03a1962f2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SymbolicBayesNet</type>
      <name>BayesNetType</name>
      <anchorfile>a04167.html</anchorfile>
      <anchor>a826f4935d6f37458d20a04eb666c925d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SymbolicEliminationTree</type>
      <name>EliminationTreeType</name>
      <anchorfile>a04167.html</anchorfile>
      <anchor>a4229489dec7c3ec29f4b6200aba70232</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SymbolicBayesTree</type>
      <name>BayesTreeType</name>
      <anchorfile>a04167.html</anchorfile>
      <anchor>af52148826369afe47436ed5f6e89f9bc</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SymbolicJunctionTree</type>
      <name>JunctionTreeType</name>
      <anchorfile>a04167.html</anchorfile>
      <anchor>af3f9ccb100f0c9ab446683896228ff7c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::EliminationTree</name>
    <filename>a02943.html</filename>
    <templarg>BAYESNET</templarg>
    <templarg>GRAPH</templarg>
    <member kind="function" protection="protected">
      <type></type>
      <name>EliminationTree</name>
      <anchorfile>a02943.html</anchorfile>
      <anchor>af9d86f2a1c1e084c02982d08b3512385</anchor>
      <arglist>(const FactorGraphType &amp;factorGraph, const VariableIndex &amp;structure, const Ordering &amp;order)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>EliminationTree</name>
      <anchorfile>a02943.html</anchorfile>
      <anchor>a5767cf9b1e41ecdd681fc3c230e4a651</anchor>
      <arglist>(const FactorGraphType &amp;factorGraph, const Ordering &amp;order)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>EliminationTree</name>
      <anchorfile>a02943.html</anchorfile>
      <anchor>a2d9565551bfe73676f82d41d86f158a5</anchor>
      <arglist>(const This &amp;other)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>This &amp;</type>
      <name>operator=</name>
      <anchorfile>a02943.html</anchorfile>
      <anchor>a1224c71a07df3951c7d4ca92f2e8c30d</anchor>
      <arglist>(const This &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>std::pair&lt; boost::shared_ptr&lt; BayesNetType &gt;, boost::shared_ptr&lt; FactorGraphType &gt; &gt;</type>
      <name>eliminate</name>
      <anchorfile>a02943.html</anchorfile>
      <anchor>a11b6bc4f0b28b6b60a86555ed096d805</anchor>
      <arglist>(Eliminate function) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>equals</name>
      <anchorfile>a02943.html</anchorfile>
      <anchor>a056479065f5685d308ff64ed0cb609a2</anchor>
      <arglist>(const This &amp;other, double tol=1e-9) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>a02943.html</anchorfile>
      <anchor>a0d5c769b08d584c53439805f1bdccd38</anchor>
      <arglist>(const std::string &amp;name=&quot;EliminationTree: &quot;, const KeyFormatter &amp;formatter=DefaultKeyFormatter) const</arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>::EliminationTreeTester</name>
      <anchorfile>a02943.html</anchorfile>
      <anchor>afb1e378ea19d4d4de1a201e467e0699d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>EliminationTree</name>
      <anchorfile>a02943.html</anchorfile>
      <anchor>aacb8da2b775867c6bc7bc064ded4f68a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const FastVector&lt; sharedNode &gt; &amp;</type>
      <name>roots</name>
      <anchorfile>a02943.html</anchorfile>
      <anchor>a2cfa39edc0ff38393858068f32f41e6d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const FastVector&lt; sharedFactor &gt; &amp;</type>
      <name>remainingFactors</name>
      <anchorfile>a02943.html</anchorfile>
      <anchor>a282d6d56b00b8bd4010e279ca9bbe10f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>swap</name>
      <anchorfile>a02943.html</anchorfile>
      <anchor>aa803d492b75fb518207fb2b9a6788607</anchor>
      <arglist>(This &amp;other)</arglist>
    </member>
    <member kind="typedef">
      <type>GRAPH</type>
      <name>FactorGraphType</name>
      <anchorfile>a02943.html</anchorfile>
      <anchor>a8e0f85f2f105b76096963f275e801812</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GRAPH::FactorType</type>
      <name>FactorType</name>
      <anchorfile>a02943.html</anchorfile>
      <anchor>ae32081c8e91b81d6833173a86c999a49</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; FactorType &gt;</type>
      <name>sharedFactor</name>
      <anchorfile>a02943.html</anchorfile>
      <anchor>a4b18d7fff1722b2c8bb558d265d01b62</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>BAYESNET</type>
      <name>BayesNetType</name>
      <anchorfile>a02943.html</anchorfile>
      <anchor>a5a58f63ccebf38a91c029af056b8a163</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>BayesNetType::ConditionalType</type>
      <name>ConditionalType</name>
      <anchorfile>a02943.html</anchorfile>
      <anchor>ac710dbf0e617559c174181b8441c1a92</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; ConditionalType &gt;</type>
      <name>sharedConditional</name>
      <anchorfile>a02943.html</anchorfile>
      <anchor>a67f67602db3db2b835f5c1b66d659c54</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; Node &gt;</type>
      <name>sharedNode</name>
      <anchorfile>a02943.html</anchorfile>
      <anchor>ae60100edf4d90ad45a02a2f21be46e25</anchor>
      <arglist></arglist>
    </member>
    <class kind="struct">gtsam::EliminationTree::Node</class>
    <member kind="typedef" protection="protected">
      <type>EliminationTree&lt; BAYESNET, GRAPH &gt;</type>
      <name>This</name>
      <anchorfile>a02943.html</anchorfile>
      <anchor>a12e721d9dff82b978888af20a4297ae9</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>boost::shared_ptr&lt; This &gt;</type>
      <name>shared_ptr</name>
      <anchorfile>a02943.html</anchorfile>
      <anchor>acc124c37c3e0768bb6d67d679df4ff78</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>GTSAM_CONCEPT_TESTABLE_TYPE</name>
      <anchorfile>a02943.html</anchorfile>
      <anchor>a5c504ce39d515b010ab371dba4c793e2</anchor>
      <arglist>(FactorType)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>EliminationTree&lt; DiscreteBayesNet, DiscreteFactorGraph &gt;</name>
    <filename>a02943.html</filename>
    <member kind="friend">
      <type>friend class</type>
      <name>::EliminationTreeTester</name>
      <anchorfile>a02943.html</anchorfile>
      <anchor>afb1e378ea19d4d4de1a201e467e0699d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>EliminationTree</name>
      <anchorfile>a02943.html</anchorfile>
      <anchor>aacb8da2b775867c6bc7bc064ded4f68a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const FastVector&lt; sharedNode &gt; &amp;</type>
      <name>roots</name>
      <anchorfile>a02943.html</anchorfile>
      <anchor>a2cfa39edc0ff38393858068f32f41e6d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const FastVector&lt; sharedFactor &gt; &amp;</type>
      <name>remainingFactors</name>
      <anchorfile>a02943.html</anchorfile>
      <anchor>a282d6d56b00b8bd4010e279ca9bbe10f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>swap</name>
      <anchorfile>a02943.html</anchorfile>
      <anchor>aa803d492b75fb518207fb2b9a6788607</anchor>
      <arglist>(This &amp;other)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>EliminationTree</name>
      <anchorfile>a02943.html</anchorfile>
      <anchor>af9d86f2a1c1e084c02982d08b3512385</anchor>
      <arglist>(const FactorGraphType &amp;factorGraph, const VariableIndex &amp;structure, const Ordering &amp;order)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>EliminationTree</name>
      <anchorfile>a02943.html</anchorfile>
      <anchor>a5767cf9b1e41ecdd681fc3c230e4a651</anchor>
      <arglist>(const FactorGraphType &amp;factorGraph, const Ordering &amp;order)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>EliminationTree</name>
      <anchorfile>a02943.html</anchorfile>
      <anchor>a2d9565551bfe73676f82d41d86f158a5</anchor>
      <arglist>(const This &amp;other)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>This &amp;</type>
      <name>operator=</name>
      <anchorfile>a02943.html</anchorfile>
      <anchor>a1224c71a07df3951c7d4ca92f2e8c30d</anchor>
      <arglist>(const This &amp;other)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>equals</name>
      <anchorfile>a02943.html</anchorfile>
      <anchor>a056479065f5685d308ff64ed0cb609a2</anchor>
      <arglist>(const This &amp;other, double tol=1e-9) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>a02943.html</anchorfile>
      <anchor>a0d5c769b08d584c53439805f1bdccd38</anchor>
      <arglist>(const std::string &amp;name=&quot;EliminationTree: &quot;, const KeyFormatter &amp;formatter=DefaultKeyFormatter) const</arglist>
    </member>
    <member kind="function">
      <type>std::pair&lt; boost::shared_ptr&lt; BayesNetType &gt;, boost::shared_ptr&lt; FactorGraphType &gt; &gt;</type>
      <name>eliminate</name>
      <anchorfile>a02943.html</anchorfile>
      <anchor>a11b6bc4f0b28b6b60a86555ed096d805</anchor>
      <arglist>(Eliminate function) const</arglist>
    </member>
    <member kind="function">
      <type>std::pair&lt; boost::shared_ptr&lt; BayesNetType &gt;, boost::shared_ptr&lt; FactorGraphType &gt; &gt;</type>
      <name>eliminate</name>
      <anchorfile>a02943.html</anchorfile>
      <anchor>a11b6bc4f0b28b6b60a86555ed096d805</anchor>
      <arglist>(Eliminate function) const</arglist>
    </member>
    <member kind="typedef">
      <type>DiscreteFactorGraph</type>
      <name>FactorGraphType</name>
      <anchorfile>a02943.html</anchorfile>
      <anchor>a8e0f85f2f105b76096963f275e801812</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>DiscreteFactorGraph ::FactorType</type>
      <name>FactorType</name>
      <anchorfile>a02943.html</anchorfile>
      <anchor>ae32081c8e91b81d6833173a86c999a49</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; FactorType &gt;</type>
      <name>sharedFactor</name>
      <anchorfile>a02943.html</anchorfile>
      <anchor>a4b18d7fff1722b2c8bb558d265d01b62</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>DiscreteBayesNet</type>
      <name>BayesNetType</name>
      <anchorfile>a02943.html</anchorfile>
      <anchor>a5a58f63ccebf38a91c029af056b8a163</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>BayesNetType::ConditionalType</type>
      <name>ConditionalType</name>
      <anchorfile>a02943.html</anchorfile>
      <anchor>ac710dbf0e617559c174181b8441c1a92</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; ConditionalType &gt;</type>
      <name>sharedConditional</name>
      <anchorfile>a02943.html</anchorfile>
      <anchor>a67f67602db3db2b835f5c1b66d659c54</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; Node &gt;</type>
      <name>sharedNode</name>
      <anchorfile>a02943.html</anchorfile>
      <anchor>ae60100edf4d90ad45a02a2f21be46e25</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>EliminationTree&lt; DiscreteBayesNet, DiscreteFactorGraph &gt;</type>
      <name>This</name>
      <anchorfile>a02943.html</anchorfile>
      <anchor>a12e721d9dff82b978888af20a4297ae9</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>boost::shared_ptr&lt; This &gt;</type>
      <name>shared_ptr</name>
      <anchorfile>a02943.html</anchorfile>
      <anchor>acc124c37c3e0768bb6d67d679df4ff78</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>GTSAM_CONCEPT_TESTABLE_TYPE</name>
      <anchorfile>a02943.html</anchorfile>
      <anchor>a5c504ce39d515b010ab371dba4c793e2</anchor>
      <arglist>(FactorType)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>EliminationTree</name>
      <anchorfile>a02943.html</anchorfile>
      <anchor>af9d86f2a1c1e084c02982d08b3512385</anchor>
      <arglist>(const FactorGraphType &amp;factorGraph, const VariableIndex &amp;structure, const Ordering &amp;order)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>EliminationTree</name>
      <anchorfile>a02943.html</anchorfile>
      <anchor>a5767cf9b1e41ecdd681fc3c230e4a651</anchor>
      <arglist>(const FactorGraphType &amp;factorGraph, const Ordering &amp;order)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>EliminationTree</name>
      <anchorfile>a02943.html</anchorfile>
      <anchor>a2d9565551bfe73676f82d41d86f158a5</anchor>
      <arglist>(const This &amp;other)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>This &amp;</type>
      <name>operator=</name>
      <anchorfile>a02943.html</anchorfile>
      <anchor>a1224c71a07df3951c7d4ca92f2e8c30d</anchor>
      <arglist>(const This &amp;other)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>EliminationTree&lt; GaussianBayesNet, GaussianFactorGraph &gt;</name>
    <filename>a02943.html</filename>
    <member kind="friend">
      <type>friend class</type>
      <name>::EliminationTreeTester</name>
      <anchorfile>a02943.html</anchorfile>
      <anchor>afb1e378ea19d4d4de1a201e467e0699d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>EliminationTree</name>
      <anchorfile>a02943.html</anchorfile>
      <anchor>aacb8da2b775867c6bc7bc064ded4f68a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const FastVector&lt; sharedNode &gt; &amp;</type>
      <name>roots</name>
      <anchorfile>a02943.html</anchorfile>
      <anchor>a2cfa39edc0ff38393858068f32f41e6d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const FastVector&lt; sharedFactor &gt; &amp;</type>
      <name>remainingFactors</name>
      <anchorfile>a02943.html</anchorfile>
      <anchor>a282d6d56b00b8bd4010e279ca9bbe10f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>swap</name>
      <anchorfile>a02943.html</anchorfile>
      <anchor>aa803d492b75fb518207fb2b9a6788607</anchor>
      <arglist>(This &amp;other)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>EliminationTree</name>
      <anchorfile>a02943.html</anchorfile>
      <anchor>af9d86f2a1c1e084c02982d08b3512385</anchor>
      <arglist>(const FactorGraphType &amp;factorGraph, const VariableIndex &amp;structure, const Ordering &amp;order)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>EliminationTree</name>
      <anchorfile>a02943.html</anchorfile>
      <anchor>a5767cf9b1e41ecdd681fc3c230e4a651</anchor>
      <arglist>(const FactorGraphType &amp;factorGraph, const Ordering &amp;order)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>EliminationTree</name>
      <anchorfile>a02943.html</anchorfile>
      <anchor>a2d9565551bfe73676f82d41d86f158a5</anchor>
      <arglist>(const This &amp;other)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>This &amp;</type>
      <name>operator=</name>
      <anchorfile>a02943.html</anchorfile>
      <anchor>a1224c71a07df3951c7d4ca92f2e8c30d</anchor>
      <arglist>(const This &amp;other)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>equals</name>
      <anchorfile>a02943.html</anchorfile>
      <anchor>a056479065f5685d308ff64ed0cb609a2</anchor>
      <arglist>(const This &amp;other, double tol=1e-9) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>a02943.html</anchorfile>
      <anchor>a0d5c769b08d584c53439805f1bdccd38</anchor>
      <arglist>(const std::string &amp;name=&quot;EliminationTree: &quot;, const KeyFormatter &amp;formatter=DefaultKeyFormatter) const</arglist>
    </member>
    <member kind="function">
      <type>std::pair&lt; boost::shared_ptr&lt; BayesNetType &gt;, boost::shared_ptr&lt; FactorGraphType &gt; &gt;</type>
      <name>eliminate</name>
      <anchorfile>a02943.html</anchorfile>
      <anchor>a11b6bc4f0b28b6b60a86555ed096d805</anchor>
      <arglist>(Eliminate function) const</arglist>
    </member>
    <member kind="function">
      <type>std::pair&lt; boost::shared_ptr&lt; BayesNetType &gt;, boost::shared_ptr&lt; FactorGraphType &gt; &gt;</type>
      <name>eliminate</name>
      <anchorfile>a02943.html</anchorfile>
      <anchor>a11b6bc4f0b28b6b60a86555ed096d805</anchor>
      <arglist>(Eliminate function) const</arglist>
    </member>
    <member kind="typedef">
      <type>GaussianFactorGraph</type>
      <name>FactorGraphType</name>
      <anchorfile>a02943.html</anchorfile>
      <anchor>a8e0f85f2f105b76096963f275e801812</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GaussianFactorGraph ::FactorType</type>
      <name>FactorType</name>
      <anchorfile>a02943.html</anchorfile>
      <anchor>ae32081c8e91b81d6833173a86c999a49</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; FactorType &gt;</type>
      <name>sharedFactor</name>
      <anchorfile>a02943.html</anchorfile>
      <anchor>a4b18d7fff1722b2c8bb558d265d01b62</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GaussianBayesNet</type>
      <name>BayesNetType</name>
      <anchorfile>a02943.html</anchorfile>
      <anchor>a5a58f63ccebf38a91c029af056b8a163</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>BayesNetType::ConditionalType</type>
      <name>ConditionalType</name>
      <anchorfile>a02943.html</anchorfile>
      <anchor>ac710dbf0e617559c174181b8441c1a92</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; ConditionalType &gt;</type>
      <name>sharedConditional</name>
      <anchorfile>a02943.html</anchorfile>
      <anchor>a67f67602db3db2b835f5c1b66d659c54</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; Node &gt;</type>
      <name>sharedNode</name>
      <anchorfile>a02943.html</anchorfile>
      <anchor>ae60100edf4d90ad45a02a2f21be46e25</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>EliminationTree&lt; GaussianBayesNet, GaussianFactorGraph &gt;</type>
      <name>This</name>
      <anchorfile>a02943.html</anchorfile>
      <anchor>a12e721d9dff82b978888af20a4297ae9</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>boost::shared_ptr&lt; This &gt;</type>
      <name>shared_ptr</name>
      <anchorfile>a02943.html</anchorfile>
      <anchor>acc124c37c3e0768bb6d67d679df4ff78</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>GTSAM_CONCEPT_TESTABLE_TYPE</name>
      <anchorfile>a02943.html</anchorfile>
      <anchor>a5c504ce39d515b010ab371dba4c793e2</anchor>
      <arglist>(FactorType)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>EliminationTree</name>
      <anchorfile>a02943.html</anchorfile>
      <anchor>af9d86f2a1c1e084c02982d08b3512385</anchor>
      <arglist>(const FactorGraphType &amp;factorGraph, const VariableIndex &amp;structure, const Ordering &amp;order)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>EliminationTree</name>
      <anchorfile>a02943.html</anchorfile>
      <anchor>a5767cf9b1e41ecdd681fc3c230e4a651</anchor>
      <arglist>(const FactorGraphType &amp;factorGraph, const Ordering &amp;order)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>EliminationTree</name>
      <anchorfile>a02943.html</anchorfile>
      <anchor>a2d9565551bfe73676f82d41d86f158a5</anchor>
      <arglist>(const This &amp;other)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>This &amp;</type>
      <name>operator=</name>
      <anchorfile>a02943.html</anchorfile>
      <anchor>a1224c71a07df3951c7d4ca92f2e8c30d</anchor>
      <arglist>(const This &amp;other)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>EliminationTree&lt; SymbolicBayesNet, SymbolicFactorGraph &gt;</name>
    <filename>a02943.html</filename>
    <member kind="friend">
      <type>friend class</type>
      <name>::EliminationTreeTester</name>
      <anchorfile>a02943.html</anchorfile>
      <anchor>afb1e378ea19d4d4de1a201e467e0699d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>EliminationTree</name>
      <anchorfile>a02943.html</anchorfile>
      <anchor>aacb8da2b775867c6bc7bc064ded4f68a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const FastVector&lt; sharedNode &gt; &amp;</type>
      <name>roots</name>
      <anchorfile>a02943.html</anchorfile>
      <anchor>a2cfa39edc0ff38393858068f32f41e6d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const FastVector&lt; sharedFactor &gt; &amp;</type>
      <name>remainingFactors</name>
      <anchorfile>a02943.html</anchorfile>
      <anchor>a282d6d56b00b8bd4010e279ca9bbe10f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>swap</name>
      <anchorfile>a02943.html</anchorfile>
      <anchor>aa803d492b75fb518207fb2b9a6788607</anchor>
      <arglist>(This &amp;other)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>EliminationTree</name>
      <anchorfile>a02943.html</anchorfile>
      <anchor>af9d86f2a1c1e084c02982d08b3512385</anchor>
      <arglist>(const FactorGraphType &amp;factorGraph, const VariableIndex &amp;structure, const Ordering &amp;order)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>EliminationTree</name>
      <anchorfile>a02943.html</anchorfile>
      <anchor>a5767cf9b1e41ecdd681fc3c230e4a651</anchor>
      <arglist>(const FactorGraphType &amp;factorGraph, const Ordering &amp;order)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>EliminationTree</name>
      <anchorfile>a02943.html</anchorfile>
      <anchor>a2d9565551bfe73676f82d41d86f158a5</anchor>
      <arglist>(const This &amp;other)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>This &amp;</type>
      <name>operator=</name>
      <anchorfile>a02943.html</anchorfile>
      <anchor>a1224c71a07df3951c7d4ca92f2e8c30d</anchor>
      <arglist>(const This &amp;other)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>equals</name>
      <anchorfile>a02943.html</anchorfile>
      <anchor>a056479065f5685d308ff64ed0cb609a2</anchor>
      <arglist>(const This &amp;other, double tol=1e-9) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>a02943.html</anchorfile>
      <anchor>a0d5c769b08d584c53439805f1bdccd38</anchor>
      <arglist>(const std::string &amp;name=&quot;EliminationTree: &quot;, const KeyFormatter &amp;formatter=DefaultKeyFormatter) const</arglist>
    </member>
    <member kind="function">
      <type>std::pair&lt; boost::shared_ptr&lt; BayesNetType &gt;, boost::shared_ptr&lt; FactorGraphType &gt; &gt;</type>
      <name>eliminate</name>
      <anchorfile>a02943.html</anchorfile>
      <anchor>a11b6bc4f0b28b6b60a86555ed096d805</anchor>
      <arglist>(Eliminate function) const</arglist>
    </member>
    <member kind="function">
      <type>std::pair&lt; boost::shared_ptr&lt; BayesNetType &gt;, boost::shared_ptr&lt; FactorGraphType &gt; &gt;</type>
      <name>eliminate</name>
      <anchorfile>a02943.html</anchorfile>
      <anchor>a11b6bc4f0b28b6b60a86555ed096d805</anchor>
      <arglist>(Eliminate function) const</arglist>
    </member>
    <member kind="typedef">
      <type>SymbolicFactorGraph</type>
      <name>FactorGraphType</name>
      <anchorfile>a02943.html</anchorfile>
      <anchor>a8e0f85f2f105b76096963f275e801812</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SymbolicFactorGraph ::FactorType</type>
      <name>FactorType</name>
      <anchorfile>a02943.html</anchorfile>
      <anchor>ae32081c8e91b81d6833173a86c999a49</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; FactorType &gt;</type>
      <name>sharedFactor</name>
      <anchorfile>a02943.html</anchorfile>
      <anchor>a4b18d7fff1722b2c8bb558d265d01b62</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SymbolicBayesNet</type>
      <name>BayesNetType</name>
      <anchorfile>a02943.html</anchorfile>
      <anchor>a5a58f63ccebf38a91c029af056b8a163</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>BayesNetType::ConditionalType</type>
      <name>ConditionalType</name>
      <anchorfile>a02943.html</anchorfile>
      <anchor>ac710dbf0e617559c174181b8441c1a92</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; ConditionalType &gt;</type>
      <name>sharedConditional</name>
      <anchorfile>a02943.html</anchorfile>
      <anchor>a67f67602db3db2b835f5c1b66d659c54</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; Node &gt;</type>
      <name>sharedNode</name>
      <anchorfile>a02943.html</anchorfile>
      <anchor>ae60100edf4d90ad45a02a2f21be46e25</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>EliminationTree&lt; SymbolicBayesNet, SymbolicFactorGraph &gt;</type>
      <name>This</name>
      <anchorfile>a02943.html</anchorfile>
      <anchor>a12e721d9dff82b978888af20a4297ae9</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>boost::shared_ptr&lt; This &gt;</type>
      <name>shared_ptr</name>
      <anchorfile>a02943.html</anchorfile>
      <anchor>acc124c37c3e0768bb6d67d679df4ff78</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>GTSAM_CONCEPT_TESTABLE_TYPE</name>
      <anchorfile>a02943.html</anchorfile>
      <anchor>a5c504ce39d515b010ab371dba4c793e2</anchor>
      <arglist>(FactorType)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>EliminationTree</name>
      <anchorfile>a02943.html</anchorfile>
      <anchor>af9d86f2a1c1e084c02982d08b3512385</anchor>
      <arglist>(const FactorGraphType &amp;factorGraph, const VariableIndex &amp;structure, const Ordering &amp;order)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>EliminationTree</name>
      <anchorfile>a02943.html</anchorfile>
      <anchor>a5767cf9b1e41ecdd681fc3c230e4a651</anchor>
      <arglist>(const FactorGraphType &amp;factorGraph, const Ordering &amp;order)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>EliminationTree</name>
      <anchorfile>a02943.html</anchorfile>
      <anchor>a2d9565551bfe73676f82d41d86f158a5</anchor>
      <arglist>(const This &amp;other)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>This &amp;</type>
      <name>operator=</name>
      <anchorfile>a02943.html</anchorfile>
      <anchor>a1224c71a07df3951c7d4ca92f2e8c30d</anchor>
      <arglist>(const This &amp;other)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>gtsam::DSFMap::Entry</name>
    <filename>a01999.html</filename>
  </compound>
  <compound kind="class">
    <name>gtsam::EqualityFactorGraph</name>
    <filename>a04251.html</filename>
    <base>FactorGraph&lt; LinearEquality &gt;</base>
    <member kind="function">
      <type>double</type>
      <name>error</name>
      <anchorfile>a04251.html</anchorfile>
      <anchor>aa9e6612db431cc91b662e8db2da13acf</anchor>
      <arglist>(const VectorValues &amp;x) const</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>gtsam::equals</name>
    <filename>a02191.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>gtsam::equals_star</name>
    <filename>a02195.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="class">
    <name>gtsam::EquivInertialNavFactor_GlobalVel</name>
    <filename>a04459.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <base>NoiseModelFactor5&lt; POSE, VELOCITY, IMUBIAS, POSE, VELOCITY &gt;</base>
    <member kind="function">
      <type></type>
      <name>EquivInertialNavFactor_GlobalVel</name>
      <anchorfile>a04459.html</anchorfile>
      <anchor>ad3909c0eae412cff95ae2b01962feb7d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>EquivInertialNavFactor_GlobalVel</name>
      <anchorfile>a04459.html</anchorfile>
      <anchor>ab42b148a510e66814dc44a05a97d361c</anchor>
      <arglist>(const Key &amp;Pose1, const Key &amp;Vel1, const Key &amp;IMUBias1, const Key &amp;Pose2, const Key &amp;Vel2, const Vector &amp;delta_pos_in_t0, const Vector &amp;delta_vel_in_t0, const Vector3 &amp;delta_angles, double dt12, const Vector world_g, const Vector world_rho, const Vector &amp;world_omega_earth, const noiseModel::Gaussian::shared_ptr &amp;model_equivalent, const Matrix &amp;Jacobian_wrt_t0_Overall, boost::optional&lt; IMUBIAS &gt; Bias_initial=boost::none, boost::optional&lt; POSE &gt; body_P_sensor=boost::none)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>print</name>
      <anchorfile>a04459.html</anchorfile>
      <anchor>a770054a0b27938fc946b6ba79834226c</anchor>
      <arglist>(const std::string &amp;s=&quot;EquivInertialNavFactor_GlobalVel&quot;, const KeyFormatter &amp;keyFormatter=DefaultKeyFormatter) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>equals</name>
      <anchorfile>a04459.html</anchorfile>
      <anchor>a00f1e89c1cb982612b7a692a64e79c2f</anchor>
      <arglist>(const NonlinearFactor &amp;expected, double tol=1e-9) const</arglist>
    </member>
    <member kind="function">
      <type>Vector</type>
      <name>evaluateError</name>
      <anchorfile>a04459.html</anchorfile>
      <anchor>a65df171da2bca9dbb18f6bf7d41b8975</anchor>
      <arglist>(const POSE &amp;Pose1, const VELOCITY &amp;Vel1, const IMUBIAS &amp;Bias1, const POSE &amp;Pose2, const VELOCITY &amp;Vel2, boost::optional&lt; Matrix &amp; &gt; H1=boost::none, boost::optional&lt; Matrix &amp; &gt; H2=boost::none, boost::optional&lt; Matrix &amp; &gt; H3=boost::none, boost::optional&lt; Matrix &amp; &gt; H4=boost::none, boost::optional&lt; Matrix &amp; &gt; H5=boost::none) const</arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>boost::serialization::access</name>
      <anchorfile>a04459.html</anchorfile>
      <anchor>ac98d07dd8f7b70e16ccb9a01abf56b9c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::EquivInertialNavFactor_GlobalVel_NoBias</name>
    <filename>a04463.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <base>NoiseModelFactor4&lt; POSE, VELOCITY, POSE, VELOCITY &gt;</base>
    <member kind="function">
      <type></type>
      <name>EquivInertialNavFactor_GlobalVel_NoBias</name>
      <anchorfile>a04463.html</anchorfile>
      <anchor>abbbadec8a23c524ca1f4705bcb478526</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>EquivInertialNavFactor_GlobalVel_NoBias</name>
      <anchorfile>a04463.html</anchorfile>
      <anchor>ae09b4d6408c2c1558219f50e13466a7d</anchor>
      <arglist>(const Key &amp;Pose1, const Key &amp;Vel1, const Key &amp;Pose2, const Key &amp;Vel2, const Vector &amp;delta_pos_in_t0, const Vector &amp;delta_vel_in_t0, const Vector3 &amp;delta_angles, double dt12, const Vector world_g, const Vector world_rho, const Vector &amp;world_omega_earth, const noiseModel::Gaussian::shared_ptr &amp;model_equivalent, const Matrix &amp;Jacobian_wrt_t0_Overall, boost::optional&lt; POSE &gt; body_P_sensor=boost::none)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>print</name>
      <anchorfile>a04463.html</anchorfile>
      <anchor>ab993e872d0302dd0f0adb734017100d9</anchor>
      <arglist>(const std::string &amp;s=&quot;EquivInertialNavFactor_GlobalVel_NoBias&quot;, const KeyFormatter &amp;keyFormatter=DefaultKeyFormatter) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>equals</name>
      <anchorfile>a04463.html</anchorfile>
      <anchor>af74a96b4bfacea7b890959116f47a7a6</anchor>
      <arglist>(const NonlinearFactor &amp;expected, double tol=1e-9) const</arglist>
    </member>
    <member kind="function">
      <type>Vector</type>
      <name>evaluateError</name>
      <anchorfile>a04463.html</anchorfile>
      <anchor>a466d0e85fed8a83299d3f18f2eedcbe1</anchor>
      <arglist>(const POSE &amp;Pose1, const VELOCITY &amp;Vel1, const POSE &amp;Pose2, const VELOCITY &amp;Vel2, boost::optional&lt; Matrix &amp; &gt; H1=boost::none, boost::optional&lt; Matrix &amp; &gt; H2=boost::none, boost::optional&lt; Matrix &amp; &gt; H3=boost::none, boost::optional&lt; Matrix &amp; &gt; H4=boost::none) const</arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>boost::serialization::access</name>
      <anchorfile>a04463.html</anchorfile>
      <anchor>ac98d07dd8f7b70e16ccb9a01abf56b9c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::Errors</name>
    <filename>a03079.html</filename>
    <base>FastList&lt; Vector &gt;</base>
    <member kind="function">
      <type>GTSAM_EXPORT</type>
      <name>Errors</name>
      <anchorfile>a03079.html</anchorfile>
      <anchor>a06c11c056d90d6eea6e43c47f1a1e8d2</anchor>
      <arglist>(const VectorValues &amp;V)</arglist>
    </member>
    <member kind="function">
      <type>GTSAM_EXPORT void</type>
      <name>print</name>
      <anchorfile>a03079.html</anchorfile>
      <anchor>afeda99c08fde53f011879e45245e2989</anchor>
      <arglist>(const std::string &amp;s=&quot;Errors&quot;) const</arglist>
    </member>
    <member kind="function">
      <type>GTSAM_EXPORT bool</type>
      <name>equals</name>
      <anchorfile>a03079.html</anchorfile>
      <anchor>a916a0ae1776f150e69b5be7a889a05ce</anchor>
      <arglist>(const Errors &amp;expected, double tol=1e-9) const</arglist>
    </member>
    <member kind="function">
      <type>GTSAM_EXPORT Errors</type>
      <name>operator+</name>
      <anchorfile>a03079.html</anchorfile>
      <anchor>a5c0a6e392c37efb53ea264a0894da9bb</anchor>
      <arglist>(const Errors &amp;b) const</arglist>
    </member>
    <member kind="function">
      <type>GTSAM_EXPORT Errors</type>
      <name>operator-</name>
      <anchorfile>a03079.html</anchorfile>
      <anchor>a6cfad8051589ef1a87700492b8f8b303</anchor>
      <arglist>(const Errors &amp;b) const</arglist>
    </member>
    <member kind="function">
      <type>GTSAM_EXPORT Errors</type>
      <name>operator-</name>
      <anchorfile>a03079.html</anchorfile>
      <anchor>a1112d2e9529bc51bbdfd78257b14a42c</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::EssentialMatrix</name>
    <filename>a02595.html</filename>
    <member kind="function" static="yes">
      <type>static EssentialMatrix</type>
      <name>FromRotationAndDirection</name>
      <anchorfile>a02595.html</anchorfile>
      <anchor>a4dcbb4588415f7fe874855f113d5008d</anchor>
      <arglist>(const Rot3 &amp;aRb, const Unit3 &amp;aTb, OptionalJacobian&lt; 5, 3 &gt; H1=boost::none, OptionalJacobian&lt; 5, 2 &gt; H2=boost::none)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static EssentialMatrix</type>
      <name>FromPose3</name>
      <anchorfile>a02595.html</anchorfile>
      <anchor>a378802c7da7df87a6fd0bf563b6bdb13</anchor>
      <arglist>(const Pose3 &amp;_1P2_, OptionalJacobian&lt; 5, 6 &gt; H=boost::none)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static EssentialMatrix</type>
      <name>Random</name>
      <anchorfile>a02595.html</anchorfile>
      <anchor>a4b3fdce1e82ffb2901e53ed9bc5a7aba</anchor>
      <arglist>(Engine &amp;rng)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>EssentialMatrix</name>
      <anchorfile>a02595.html</anchorfile>
      <anchor>a29e768b352dff0cec0e50199663fd18e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>EssentialMatrix</name>
      <anchorfile>a02595.html</anchorfile>
      <anchor>a7ab38f00c9e4e460827a09b02c9e0f20</anchor>
      <arglist>(const Rot3 &amp;aRb, const Unit3 &amp;aTb)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>a02595.html</anchorfile>
      <anchor>a921f152188ad8f74fae6328a690f7411</anchor>
      <arglist>(const std::string &amp;s=&quot;&quot;) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>equals</name>
      <anchorfile>a02595.html</anchorfile>
      <anchor>a24669283146c7e6df3b3d01fbd0b1fed</anchor>
      <arglist>(const EssentialMatrix &amp;other, double tol=1e-8) const</arglist>
    </member>
    <member kind="function">
      <type>EssentialMatrix</type>
      <name>retract</name>
      <anchorfile>a02595.html</anchorfile>
      <anchor>a768f014724809c0176d1cae10beb1932</anchor>
      <arglist>(const Vector5 &amp;xi) const</arglist>
    </member>
    <member kind="function">
      <type>Vector5</type>
      <name>localCoordinates</name>
      <anchorfile>a02595.html</anchorfile>
      <anchor>a230f448b9900fe0c22a83a14ac7fca3c</anchor>
      <arglist>(const EssentialMatrix &amp;other) const</arglist>
    </member>
    <member kind="friend">
      <type>friend EssentialMatrix</type>
      <name>operator *</name>
      <anchorfile>a02595.html</anchorfile>
      <anchor>a1737702caab7c7a4a44b7559662326db</anchor>
      <arglist>(const Rot3 &amp;cRb, const EssentialMatrix &amp;E)</arglist>
    </member>
    <member kind="function">
      <type>const Rot3 &amp;</type>
      <name>rotation</name>
      <anchorfile>a02595.html</anchorfile>
      <anchor>a9a54d34b499c0cd5d53671101fba5ac3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Unit3 &amp;</type>
      <name>direction</name>
      <anchorfile>a02595.html</anchorfile>
      <anchor>acc6083c52f3ea5ebcfbde3b075cb8c4b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Matrix3 &amp;</type>
      <name>matrix</name>
      <anchorfile>a02595.html</anchorfile>
      <anchor>a0985cb45bcd43df979fdba7a81ceadf5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Unit3 &amp;</type>
      <name>epipole_a</name>
      <anchorfile>a02595.html</anchorfile>
      <anchor>a8e8a18375e95ceba02c3c8f7d62359ab</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Unit3</type>
      <name>epipole_b</name>
      <anchorfile>a02595.html</anchorfile>
      <anchor>acb6b6c1586e1e5fbfed6d08a6f7abdff</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Point3</type>
      <name>transformTo</name>
      <anchorfile>a02595.html</anchorfile>
      <anchor>aca8ee6259be205efec13de59d13ab3a7</anchor>
      <arglist>(const Point3 &amp;p, OptionalJacobian&lt; 3, 5 &gt; DE=boost::none, OptionalJacobian&lt; 3, 3 &gt; Dpoint=boost::none) const</arglist>
    </member>
    <member kind="function">
      <type>EssentialMatrix</type>
      <name>rotate</name>
      <anchorfile>a02595.html</anchorfile>
      <anchor>af9a4340182f05a4d1706d3c1ca5cc678</anchor>
      <arglist>(const Rot3 &amp;cRb, OptionalJacobian&lt; 5, 5 &gt; HE=boost::none, OptionalJacobian&lt; 5, 3 &gt; HR=boost::none) const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>error</name>
      <anchorfile>a02595.html</anchorfile>
      <anchor>a5516f9c1d46c81dae4506c90e8fb7031</anchor>
      <arglist>(const Vector3 &amp;vA, const Vector3 &amp;vB, OptionalJacobian&lt; 1, 5 &gt; H=boost::none) const</arglist>
    </member>
    <member kind="friend">
      <type>GTSAM_EXPORT friend std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a02595.html</anchorfile>
      <anchor>a01687a93a35e17a5c493130db27500aa</anchor>
      <arglist>(std::ostream &amp;os, const EssentialMatrix &amp;E)</arglist>
    </member>
    <member kind="friend">
      <type>GTSAM_EXPORT friend std::istream &amp;</type>
      <name>operator &gt;&gt;</name>
      <anchorfile>a02595.html</anchorfile>
      <anchor>af631402d6a202e5417f9c44bb1ff1cbb</anchor>
      <arglist>(std::istream &amp;is, EssentialMatrix &amp;E)</arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>boost::serialization::access</name>
      <anchorfile>a02595.html</anchorfile>
      <anchor>ac98d07dd8f7b70e16ccb9a01abf56b9c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>a02595.html</anchorfile>
      <anchor>a921f152188ad8f74fae6328a690f7411</anchor>
      <arglist>(const std::string &amp;s=&quot;&quot;) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>equals</name>
      <anchorfile>a02595.html</anchorfile>
      <anchor>a24669283146c7e6df3b3d01fbd0b1fed</anchor>
      <arglist>(const EssentialMatrix &amp;other, double tol=1e-8) const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Vector3</type>
      <name>Homogeneous</name>
      <anchorfile>a02595.html</anchorfile>
      <anchor>aa0ddbe48ef8253475276de478081025d</anchor>
      <arglist>(const Point2 &amp;p)</arglist>
    </member>
    <member kind="friend">
      <type>GTSAM_EXPORT friend std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a02595.html</anchorfile>
      <anchor>a01687a93a35e17a5c493130db27500aa</anchor>
      <arglist>(std::ostream &amp;os, const EssentialMatrix &amp;E)</arglist>
    </member>
    <member kind="friend">
      <type>GTSAM_EXPORT friend std::istream &amp;</type>
      <name>operator &gt;&gt;</name>
      <anchorfile>a02595.html</anchorfile>
      <anchor>af631402d6a202e5417f9c44bb1ff1cbb</anchor>
      <arglist>(std::istream &amp;is, EssentialMatrix &amp;E)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::EssentialMatrixConstraint</name>
    <filename>a03979.html</filename>
    <base>NoiseModelFactor2&lt; Pose3, Pose3 &gt;</base>
    <member kind="function">
      <type></type>
      <name>EssentialMatrixConstraint</name>
      <anchorfile>a03979.html</anchorfile>
      <anchor>ac03a28866f89ad12046904c7c0cff4b8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>EssentialMatrixConstraint</name>
      <anchorfile>a03979.html</anchorfile>
      <anchor>ad7a49abd9aa91e0671eae13becc08ca0</anchor>
      <arglist>(Key key1, Key key2, const EssentialMatrix &amp;measuredE, const SharedNoiseModel &amp;model)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual gtsam::NonlinearFactor::shared_ptr</type>
      <name>clone</name>
      <anchorfile>a03979.html</anchorfile>
      <anchor>aae09f5635a432bc761c6cfa308db6645</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>print</name>
      <anchorfile>a03979.html</anchorfile>
      <anchor>aae327dd91d7eead72554490225da2d9c</anchor>
      <arglist>(const std::string &amp;s=&quot;&quot;, const KeyFormatter &amp;keyFormatter=DefaultKeyFormatter) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>equals</name>
      <anchorfile>a03979.html</anchorfile>
      <anchor>a6266dbd0a015637d0591ae297a63c217</anchor>
      <arglist>(const NonlinearFactor &amp;expected, double tol=1e-9) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Vector</type>
      <name>evaluateError</name>
      <anchorfile>a03979.html</anchorfile>
      <anchor>a2e46eeb41d664dd8c4a184139a95fa91</anchor>
      <arglist>(const Pose3 &amp;p1, const Pose3 &amp;p2, boost::optional&lt; Matrix &amp; &gt; Hp1=boost::none, boost::optional&lt; Matrix &amp; &gt; Hp2=boost::none) const</arglist>
    </member>
    <member kind="function">
      <type>const EssentialMatrix &amp;</type>
      <name>measured</name>
      <anchorfile>a03979.html</anchorfile>
      <anchor>a9bbc280cd319ceab283a420550237df0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>size</name>
      <anchorfile>a03979.html</anchorfile>
      <anchor>a819b5c103052be2affbf33ccb1022152</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; EssentialMatrixConstraint &gt;</type>
      <name>shared_ptr</name>
      <anchorfile>a03979.html</anchorfile>
      <anchor>aa71b27df9573bff00b1a95c0fba271fe</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>boost::serialization::access</name>
      <anchorfile>a03979.html</anchorfile>
      <anchor>ac98d07dd8f7b70e16ccb9a01abf56b9c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::EssentialMatrixFactor</name>
    <filename>a03983.html</filename>
    <base>NoiseModelFactor1&lt; EssentialMatrix &gt;</base>
    <member kind="function">
      <type></type>
      <name>EssentialMatrixFactor</name>
      <anchorfile>a03983.html</anchorfile>
      <anchor>a9edbb5ac88824e6c9e87b5b979e5b5a5</anchor>
      <arglist>(Key key, const Point2 &amp;pA, const Point2 &amp;pB, const SharedNoiseModel &amp;model)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>EssentialMatrixFactor</name>
      <anchorfile>a03983.html</anchorfile>
      <anchor>ae683f489d5cfad2f4ea6a9840820808c</anchor>
      <arglist>(Key key, const Point2 &amp;pA, const Point2 &amp;pB, const SharedNoiseModel &amp;model, boost::shared_ptr&lt; CALIBRATION &gt; K)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual gtsam::NonlinearFactor::shared_ptr</type>
      <name>clone</name>
      <anchorfile>a03983.html</anchorfile>
      <anchor>a467ab33718522eb41a695ba8f8622a35</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>print</name>
      <anchorfile>a03983.html</anchorfile>
      <anchor>aac9c490ae8d799b941009da0a0ce27bf</anchor>
      <arglist>(const std::string &amp;s=&quot;&quot;, const KeyFormatter &amp;keyFormatter=DefaultKeyFormatter) const</arglist>
    </member>
    <member kind="function">
      <type>Vector</type>
      <name>evaluateError</name>
      <anchorfile>a03983.html</anchorfile>
      <anchor>aa06ad54df459953df73a9f710ea8b3c4</anchor>
      <arglist>(const EssentialMatrix &amp;E, boost::optional&lt; Matrix &amp; &gt; H=boost::none) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::EssentialMatrixFactor2</name>
    <filename>a03987.html</filename>
    <base>NoiseModelFactor2&lt; EssentialMatrix, double &gt;</base>
    <member kind="function">
      <type></type>
      <name>EssentialMatrixFactor2</name>
      <anchorfile>a03987.html</anchorfile>
      <anchor>ad5fe19b4fbbf5721eaf7e3e59aa313da</anchor>
      <arglist>(Key key1, Key key2, const Point2 &amp;pA, const Point2 &amp;pB, const SharedNoiseModel &amp;model)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>EssentialMatrixFactor2</name>
      <anchorfile>a03987.html</anchorfile>
      <anchor>a88adb03636bff678c71f1f572b9cf5b4</anchor>
      <arglist>(Key key1, Key key2, const Point2 &amp;pA, const Point2 &amp;pB, const SharedNoiseModel &amp;model, boost::shared_ptr&lt; CALIBRATION &gt; K)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual gtsam::NonlinearFactor::shared_ptr</type>
      <name>clone</name>
      <anchorfile>a03987.html</anchorfile>
      <anchor>a9a504d7bd41b24d173125ecbf3e8af8d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>print</name>
      <anchorfile>a03987.html</anchorfile>
      <anchor>a380f309d2666f7ece6901f62738209ce</anchor>
      <arglist>(const std::string &amp;s=&quot;&quot;, const KeyFormatter &amp;keyFormatter=DefaultKeyFormatter) const</arglist>
    </member>
    <member kind="function">
      <type>Vector</type>
      <name>evaluateError</name>
      <anchorfile>a03987.html</anchorfile>
      <anchor>a2a24f7a68614f041b07184c0a63a9c34</anchor>
      <arglist>(const EssentialMatrix &amp;E, const double &amp;d, boost::optional&lt; Matrix &amp; &gt; DE=boost::none, boost::optional&lt; Matrix &amp; &gt; Dd=boost::none) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::EssentialMatrixFactor3</name>
    <filename>a03991.html</filename>
    <base>gtsam::EssentialMatrixFactor2</base>
    <member kind="function">
      <type></type>
      <name>EssentialMatrixFactor3</name>
      <anchorfile>a03991.html</anchorfile>
      <anchor>a3168c36b93a9ebda9c7c001b90936be4</anchor>
      <arglist>(Key key1, Key key2, const Point2 &amp;pA, const Point2 &amp;pB, const Rot3 &amp;cRb, const SharedNoiseModel &amp;model)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>EssentialMatrixFactor3</name>
      <anchorfile>a03991.html</anchorfile>
      <anchor>a919fad59dac5dc1d750e8c8a3af53c4d</anchor>
      <arglist>(Key key1, Key key2, const Point2 &amp;pA, const Point2 &amp;pB, const Rot3 &amp;cRb, const SharedNoiseModel &amp;model, boost::shared_ptr&lt; CALIBRATION &gt; K)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual gtsam::NonlinearFactor::shared_ptr</type>
      <name>clone</name>
      <anchorfile>a03991.html</anchorfile>
      <anchor>aaba88e2303d61e66cd341556c4a34ca0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>print</name>
      <anchorfile>a03991.html</anchorfile>
      <anchor>a45eb601f63a494ac1670efca95e370aa</anchor>
      <arglist>(const std::string &amp;s=&quot;&quot;, const KeyFormatter &amp;keyFormatter=DefaultKeyFormatter) const</arglist>
    </member>
    <member kind="function">
      <type>Vector</type>
      <name>evaluateError</name>
      <anchorfile>a03991.html</anchorfile>
      <anchor>aa31d097d20660de3f9fd96b5baa140f9</anchor>
      <arglist>(const EssentialMatrix &amp;E, const double &amp;d, boost::optional&lt; Matrix &amp; &gt; DE=boost::none, boost::optional&lt; Matrix &amp; &gt; Dd=boost::none) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::internal::ExecutionTrace</name>
    <filename>a03587.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="class">
    <name>gtsam::so3::ExpmapFunctor</name>
    <filename>a02803.html</filename>
    <member kind="function">
      <type></type>
      <name>ExpmapFunctor</name>
      <anchorfile>a02803.html</anchorfile>
      <anchor>a4113d13c4aa3e72b1a1f371cd0942fd0</anchor>
      <arglist>(const Vector3 &amp;omega, bool nearZeroApprox=false)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ExpmapFunctor</name>
      <anchorfile>a02803.html</anchorfile>
      <anchor>a0e0cb7af2381d11eb959b20fccdde71f</anchor>
      <arglist>(const Vector3 &amp;axis, double angle, bool nearZeroApprox=false)</arglist>
    </member>
    <member kind="function">
      <type>SO3</type>
      <name>expmap</name>
      <anchorfile>a02803.html</anchorfile>
      <anchor>a6ceef8c46763ee780baac0bc900e6b64</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::Expression</name>
    <filename>a03595.html</filename>
    <templarg>T</templarg>
    <member kind="function">
      <type></type>
      <name>Expression</name>
      <anchorfile>a03595.html</anchorfile>
      <anchor>ad55a2363518370d61b6cf9f31ad31e10</anchor>
      <arglist>(const T &amp;value)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Expression</name>
      <anchorfile>a03595.html</anchorfile>
      <anchor>a69589c13620a88dd2a70ccdde4cc552d</anchor>
      <arglist>(const Key &amp;key)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Expression</name>
      <anchorfile>a03595.html</anchorfile>
      <anchor>a7a74922989aee4280a13b84dea65d307</anchor>
      <arglist>(const Symbol &amp;symbol)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Expression</name>
      <anchorfile>a03595.html</anchorfile>
      <anchor>a771a8f06cf37fbe690dba7ddfdb764c9</anchor>
      <arglist>(unsigned char c, std::uint64_t j)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Expression</name>
      <anchorfile>a03595.html</anchorfile>
      <anchor>aaed796271d53563978505b3bf9718a92</anchor>
      <arglist>(typename UnaryFunction&lt; A &gt;::type function, const Expression&lt; A &gt; &amp;expression)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Expression</name>
      <anchorfile>a03595.html</anchorfile>
      <anchor>aecdcceaf150115c58443790b71474131</anchor>
      <arglist>(typename BinaryFunction&lt; A1, A2 &gt;::type function, const Expression&lt; A1 &gt; &amp;expression1, const Expression&lt; A2 &gt; &amp;expression2)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Expression</name>
      <anchorfile>a03595.html</anchorfile>
      <anchor>a732e26bb6867a8204cbca5cfe0f20b0b</anchor>
      <arglist>(typename TernaryFunction&lt; A1, A2, A3 &gt;::type function, const Expression&lt; A1 &gt; &amp;expression1, const Expression&lt; A2 &gt; &amp;expression2, const Expression&lt; A3 &gt; &amp;expression3)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Expression</name>
      <anchorfile>a03595.html</anchorfile>
      <anchor>a4eed658c5c5d6464d848091bc61782fa</anchor>
      <arglist>(const Expression&lt; A &gt; &amp;expression, T(A::*method)(typename MakeOptionalJacobian&lt; T, A &gt;::type) const)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Expression</name>
      <anchorfile>a03595.html</anchorfile>
      <anchor>a92d5051661047f5305cbae92c2ea6d20</anchor>
      <arglist>(const Expression&lt; A1 &gt; &amp;expression1, T(A1::*method)(const A2 &amp;, typename MakeOptionalJacobian&lt; T, A1 &gt;::type, typename MakeOptionalJacobian&lt; T, A2 &gt;::type) const, const Expression&lt; A2 &gt; &amp;expression2)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Expression</name>
      <anchorfile>a03595.html</anchorfile>
      <anchor>aa7287c6c5f779e61b8dee55370b0e32f</anchor>
      <arglist>(const Expression&lt; A1 &gt; &amp;expression1, T(A1::*method)(const A2 &amp;, const A3 &amp;, typename MakeOptionalJacobian&lt; T, A1 &gt;::type, typename MakeOptionalJacobian&lt; T, A2 &gt;::type, typename MakeOptionalJacobian&lt; T, A3 &gt;::type) const, const Expression&lt; A2 &gt; &amp;expression2, const Expression&lt; A3 &gt; &amp;expression3)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Expression</name>
      <anchorfile>a03595.html</anchorfile>
      <anchor>a2a3b27d773b8144ff4fddb75080ea0cf</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::set&lt; Key &gt;</type>
      <name>keys</name>
      <anchorfile>a03595.html</anchorfile>
      <anchor>a452a299e44efac69311ca5ed6d42833a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>dims</name>
      <anchorfile>a03595.html</anchorfile>
      <anchor>a708f557c8b95ab8d3f047852b9ad7267</anchor>
      <arglist>(std::map&lt; Key, int &gt; &amp;map) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>a03595.html</anchorfile>
      <anchor>a84143c345478e215a7534694deab27ba</anchor>
      <arglist>(const std::string &amp;s) const</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>value</name>
      <anchorfile>a03595.html</anchorfile>
      <anchor>acb8e427a376afb1eec8bcda057128c11</anchor>
      <arglist>(const Values &amp;values, boost::optional&lt; std::vector&lt; Matrix &gt; &amp; &gt; H=boost::none) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual boost::shared_ptr&lt; Expression &gt;</type>
      <name>clone</name>
      <anchorfile>a03595.html</anchorfile>
      <anchor>a2e1547a68bd511c0c27dd46341e3935c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const boost::shared_ptr&lt; internal::ExpressionNode&lt; T &gt; &gt; &amp;</type>
      <name>root</name>
      <anchorfile>a03595.html</anchorfile>
      <anchor>a1720b8c722f71f07cb714422347fdb4b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>traceSize</name>
      <anchorfile>a03595.html</anchorfile>
      <anchor>afbfc8890e715ed28dcfc5e9e6077aebb</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Expression&lt; T &gt; &amp;</type>
      <name>operator+=</name>
      <anchorfile>a03595.html</anchorfile>
      <anchor>ae58fbcc07d76f062b6530592969915ff</anchor>
      <arglist>(const Expression&lt; T &gt; &amp;e)</arglist>
    </member>
    <member kind="typedef">
      <type>Expression&lt; T &gt;</type>
      <name>type</name>
      <anchorfile>a03595.html</anchorfile>
      <anchor>a18218921cb3aa2a55b8e73db8ff67aea</anchor>
      <arglist></arglist>
    </member>
    <class kind="struct">gtsam::Expression::BinaryFunction</class>
    <class kind="struct">gtsam::Expression::TernaryFunction</class>
    <class kind="struct">gtsam::Expression::UnaryFunction</class>
    <member kind="typedef" protection="protected">
      <type>std::pair&lt; KeyVector, FastVector&lt; int &gt; &gt;</type>
      <name>KeysAndDims</name>
      <anchorfile>a03595.html</anchorfile>
      <anchor>a6552097f187f99533d16013c7598f61b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>Expression</name>
      <anchorfile>a03595.html</anchorfile>
      <anchor>a3866041e611978ceb328ef4f61e086cc</anchor>
      <arglist>(const boost::shared_ptr&lt; internal::ExpressionNode&lt; T &gt; &gt; &amp;root)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>Expression</name>
      <anchorfile>a03595.html</anchorfile>
      <anchor>a1a57945bb87e069a703d5ee11c587826</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>T</type>
      <name>valueAndDerivatives</name>
      <anchorfile>a03595.html</anchorfile>
      <anchor>ac8c6cdfa4becdaf289fd6c9997343da3</anchor>
      <arglist>(const Values &amp;values, const KeyVector &amp;keys, const FastVector&lt; int &gt; &amp;dims, std::vector&lt; Matrix &gt; &amp;H) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>T</type>
      <name>traceExecution</name>
      <anchorfile>a03595.html</anchorfile>
      <anchor>afecaa44a9cecec402c4ffd858de147dc</anchor>
      <arglist>(const Values &amp;values, internal::ExecutionTrace&lt; T &gt; &amp;trace, void *traceStorage) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>T</type>
      <name>valueAndJacobianMap</name>
      <anchorfile>a03595.html</anchorfile>
      <anchor>a94e579dbb5e5f9ba0a3ae615d1224c9e</anchor>
      <arglist>(const Values &amp;values, internal::JacobianMap &amp;jacobians) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Expression&lt; BearingRange&lt; A1, A2 &gt; &gt;</name>
    <filename>a03595.html</filename>
    <member kind="function">
      <type></type>
      <name>Expression</name>
      <anchorfile>a03595.html</anchorfile>
      <anchor>ad55a2363518370d61b6cf9f31ad31e10</anchor>
      <arglist>(const BearingRange&lt; A1, A2 &gt; &amp;value)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Expression</name>
      <anchorfile>a03595.html</anchorfile>
      <anchor>a69589c13620a88dd2a70ccdde4cc552d</anchor>
      <arglist>(const Key &amp;key)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Expression</name>
      <anchorfile>a03595.html</anchorfile>
      <anchor>a7a74922989aee4280a13b84dea65d307</anchor>
      <arglist>(const Symbol &amp;symbol)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Expression</name>
      <anchorfile>a03595.html</anchorfile>
      <anchor>a771a8f06cf37fbe690dba7ddfdb764c9</anchor>
      <arglist>(unsigned char c, std::uint64_t j)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Expression</name>
      <anchorfile>a03595.html</anchorfile>
      <anchor>aaed796271d53563978505b3bf9718a92</anchor>
      <arglist>(typename UnaryFunction&lt; A &gt;::type function, const Expression&lt; A &gt; &amp;expression)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Expression</name>
      <anchorfile>a03595.html</anchorfile>
      <anchor>aecdcceaf150115c58443790b71474131</anchor>
      <arglist>(typename BinaryFunction&lt; A1, A2 &gt;::type function, const Expression&lt; A1 &gt; &amp;expression1, const Expression&lt; A2 &gt; &amp;expression2)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Expression</name>
      <anchorfile>a03595.html</anchorfile>
      <anchor>a732e26bb6867a8204cbca5cfe0f20b0b</anchor>
      <arglist>(typename TernaryFunction&lt; A1, A2, A3 &gt;::type function, const Expression&lt; A1 &gt; &amp;expression1, const Expression&lt; A2 &gt; &amp;expression2, const Expression&lt; A3 &gt; &amp;expression3)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Expression</name>
      <anchorfile>a03595.html</anchorfile>
      <anchor>a4eed658c5c5d6464d848091bc61782fa</anchor>
      <arglist>(const Expression&lt; A &gt; &amp;expression, BearingRange&lt; A1, A2 &gt;(A::*method)(typename MakeOptionalJacobian&lt; BearingRange&lt; A1, A2 &gt;, A &gt;::type) const)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Expression</name>
      <anchorfile>a03595.html</anchorfile>
      <anchor>a92d5051661047f5305cbae92c2ea6d20</anchor>
      <arglist>(const Expression&lt; A1 &gt; &amp;expression1, BearingRange&lt; A1, A2 &gt;(A1::*method)(const A2 &amp;, typename MakeOptionalJacobian&lt; BearingRange&lt; A1, A2 &gt;, A1 &gt;::type, typename MakeOptionalJacobian&lt; BearingRange&lt; A1, A2 &gt;, A2 &gt;::type) const, const Expression&lt; A2 &gt; &amp;expression2)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Expression</name>
      <anchorfile>a03595.html</anchorfile>
      <anchor>aa7287c6c5f779e61b8dee55370b0e32f</anchor>
      <arglist>(const Expression&lt; A1 &gt; &amp;expression1, BearingRange&lt; A1, A2 &gt;(A1::*method)(const A2 &amp;, const A3 &amp;, typename MakeOptionalJacobian&lt; BearingRange&lt; A1, A2 &gt;, A1 &gt;::type, typename MakeOptionalJacobian&lt; BearingRange&lt; A1, A2 &gt;, A2 &gt;::type, typename MakeOptionalJacobian&lt; BearingRange&lt; A1, A2 &gt;, A3 &gt;::type) const, const Expression&lt; A2 &gt; &amp;expression2, const Expression&lt; A3 &gt; &amp;expression3)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Expression</name>
      <anchorfile>a03595.html</anchorfile>
      <anchor>a2a3b27d773b8144ff4fddb75080ea0cf</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::set&lt; Key &gt;</type>
      <name>keys</name>
      <anchorfile>a03595.html</anchorfile>
      <anchor>a452a299e44efac69311ca5ed6d42833a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>dims</name>
      <anchorfile>a03595.html</anchorfile>
      <anchor>a708f557c8b95ab8d3f047852b9ad7267</anchor>
      <arglist>(std::map&lt; Key, int &gt; &amp;map) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>a03595.html</anchorfile>
      <anchor>a84143c345478e215a7534694deab27ba</anchor>
      <arglist>(const std::string &amp;s) const</arglist>
    </member>
    <member kind="function">
      <type>BearingRange&lt; A1, A2 &gt;</type>
      <name>value</name>
      <anchorfile>a03595.html</anchorfile>
      <anchor>acb8e427a376afb1eec8bcda057128c11</anchor>
      <arglist>(const Values &amp;values, boost::optional&lt; std::vector&lt; Matrix &gt; &amp; &gt; H=boost::none) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual boost::shared_ptr&lt; Expression &gt;</type>
      <name>clone</name>
      <anchorfile>a03595.html</anchorfile>
      <anchor>a2e1547a68bd511c0c27dd46341e3935c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const boost::shared_ptr&lt; internal::ExpressionNode&lt; BearingRange&lt; A1, A2 &gt; &gt; &gt; &amp;</type>
      <name>root</name>
      <anchorfile>a03595.html</anchorfile>
      <anchor>a1720b8c722f71f07cb714422347fdb4b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>traceSize</name>
      <anchorfile>a03595.html</anchorfile>
      <anchor>afbfc8890e715ed28dcfc5e9e6077aebb</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Expression&lt; BearingRange&lt; A1, A2 &gt; &gt; &amp;</type>
      <name>operator+=</name>
      <anchorfile>a03595.html</anchorfile>
      <anchor>ae58fbcc07d76f062b6530592969915ff</anchor>
      <arglist>(const Expression&lt; BearingRange&lt; A1, A2 &gt; &gt; &amp;e)</arglist>
    </member>
    <member kind="typedef">
      <type>Expression&lt; BearingRange&lt; A1, A2 &gt; &gt;</type>
      <name>type</name>
      <anchorfile>a03595.html</anchorfile>
      <anchor>a18218921cb3aa2a55b8e73db8ff67aea</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>std::pair&lt; KeyVector, FastVector&lt; int &gt; &gt;</type>
      <name>KeysAndDims</name>
      <anchorfile>a03595.html</anchorfile>
      <anchor>a6552097f187f99533d16013c7598f61b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>Expression</name>
      <anchorfile>a03595.html</anchorfile>
      <anchor>a3866041e611978ceb328ef4f61e086cc</anchor>
      <arglist>(const boost::shared_ptr&lt; internal::ExpressionNode&lt; BearingRange&lt; A1, A2 &gt; &gt; &gt; &amp;root)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>Expression</name>
      <anchorfile>a03595.html</anchorfile>
      <anchor>a1a57945bb87e069a703d5ee11c587826</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>BearingRange&lt; A1, A2 &gt;</type>
      <name>valueAndDerivatives</name>
      <anchorfile>a03595.html</anchorfile>
      <anchor>ac8c6cdfa4becdaf289fd6c9997343da3</anchor>
      <arglist>(const Values &amp;values, const KeyVector &amp;keys, const FastVector&lt; int &gt; &amp;dims, std::vector&lt; Matrix &gt; &amp;H) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>BearingRange&lt; A1, A2 &gt;</type>
      <name>traceExecution</name>
      <anchorfile>a03595.html</anchorfile>
      <anchor>afecaa44a9cecec402c4ffd858de147dc</anchor>
      <arglist>(const Values &amp;values, internal::ExecutionTrace&lt; BearingRange&lt; A1, A2 &gt; &gt; &amp;trace, void *traceStorage) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>BearingRange&lt; A1, A2 &gt;</type>
      <name>valueAndJacobianMap</name>
      <anchorfile>a03595.html</anchorfile>
      <anchor>a94e579dbb5e5f9ba0a3ae615d1224c9e</anchor>
      <arglist>(const Values &amp;values, internal::JacobianMap &amp;jacobians) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Expression&lt; double &gt;</name>
    <filename>a03595.html</filename>
    <member kind="function">
      <type></type>
      <name>Expression</name>
      <anchorfile>a03595.html</anchorfile>
      <anchor>ad55a2363518370d61b6cf9f31ad31e10</anchor>
      <arglist>(const double &amp;value)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Expression</name>
      <anchorfile>a03595.html</anchorfile>
      <anchor>a69589c13620a88dd2a70ccdde4cc552d</anchor>
      <arglist>(const Key &amp;key)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Expression</name>
      <anchorfile>a03595.html</anchorfile>
      <anchor>a7a74922989aee4280a13b84dea65d307</anchor>
      <arglist>(const Symbol &amp;symbol)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Expression</name>
      <anchorfile>a03595.html</anchorfile>
      <anchor>a771a8f06cf37fbe690dba7ddfdb764c9</anchor>
      <arglist>(unsigned char c, std::uint64_t j)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Expression</name>
      <anchorfile>a03595.html</anchorfile>
      <anchor>aaed796271d53563978505b3bf9718a92</anchor>
      <arglist>(typename UnaryFunction&lt; A &gt;::type function, const Expression&lt; A &gt; &amp;expression)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Expression</name>
      <anchorfile>a03595.html</anchorfile>
      <anchor>aecdcceaf150115c58443790b71474131</anchor>
      <arglist>(typename BinaryFunction&lt; A1, A2 &gt;::type function, const Expression&lt; A1 &gt; &amp;expression1, const Expression&lt; A2 &gt; &amp;expression2)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Expression</name>
      <anchorfile>a03595.html</anchorfile>
      <anchor>a732e26bb6867a8204cbca5cfe0f20b0b</anchor>
      <arglist>(typename TernaryFunction&lt; A1, A2, A3 &gt;::type function, const Expression&lt; A1 &gt; &amp;expression1, const Expression&lt; A2 &gt; &amp;expression2, const Expression&lt; A3 &gt; &amp;expression3)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Expression</name>
      <anchorfile>a03595.html</anchorfile>
      <anchor>a4eed658c5c5d6464d848091bc61782fa</anchor>
      <arglist>(const Expression&lt; A &gt; &amp;expression, double(A::*method)(typename MakeOptionalJacobian&lt; double, A &gt;::type) const)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Expression</name>
      <anchorfile>a03595.html</anchorfile>
      <anchor>a92d5051661047f5305cbae92c2ea6d20</anchor>
      <arglist>(const Expression&lt; A1 &gt; &amp;expression1, double(A1::*method)(const A2 &amp;, typename MakeOptionalJacobian&lt; double, A1 &gt;::type, typename MakeOptionalJacobian&lt; double, A2 &gt;::type) const, const Expression&lt; A2 &gt; &amp;expression2)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Expression</name>
      <anchorfile>a03595.html</anchorfile>
      <anchor>aa7287c6c5f779e61b8dee55370b0e32f</anchor>
      <arglist>(const Expression&lt; A1 &gt; &amp;expression1, double(A1::*method)(const A2 &amp;, const A3 &amp;, typename MakeOptionalJacobian&lt; double, A1 &gt;::type, typename MakeOptionalJacobian&lt; double, A2 &gt;::type, typename MakeOptionalJacobian&lt; double, A3 &gt;::type) const, const Expression&lt; A2 &gt; &amp;expression2, const Expression&lt; A3 &gt; &amp;expression3)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Expression</name>
      <anchorfile>a03595.html</anchorfile>
      <anchor>a2a3b27d773b8144ff4fddb75080ea0cf</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::set&lt; Key &gt;</type>
      <name>keys</name>
      <anchorfile>a03595.html</anchorfile>
      <anchor>a452a299e44efac69311ca5ed6d42833a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>dims</name>
      <anchorfile>a03595.html</anchorfile>
      <anchor>a708f557c8b95ab8d3f047852b9ad7267</anchor>
      <arglist>(std::map&lt; Key, int &gt; &amp;map) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>a03595.html</anchorfile>
      <anchor>a84143c345478e215a7534694deab27ba</anchor>
      <arglist>(const std::string &amp;s) const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>value</name>
      <anchorfile>a03595.html</anchorfile>
      <anchor>acb8e427a376afb1eec8bcda057128c11</anchor>
      <arglist>(const Values &amp;values, boost::optional&lt; std::vector&lt; Matrix &gt; &amp; &gt; H=boost::none) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual boost::shared_ptr&lt; Expression &gt;</type>
      <name>clone</name>
      <anchorfile>a03595.html</anchorfile>
      <anchor>a2e1547a68bd511c0c27dd46341e3935c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const boost::shared_ptr&lt; internal::ExpressionNode&lt; double &gt; &gt; &amp;</type>
      <name>root</name>
      <anchorfile>a03595.html</anchorfile>
      <anchor>a1720b8c722f71f07cb714422347fdb4b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>traceSize</name>
      <anchorfile>a03595.html</anchorfile>
      <anchor>afbfc8890e715ed28dcfc5e9e6077aebb</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Expression&lt; double &gt; &amp;</type>
      <name>operator+=</name>
      <anchorfile>a03595.html</anchorfile>
      <anchor>ae58fbcc07d76f062b6530592969915ff</anchor>
      <arglist>(const Expression&lt; double &gt; &amp;e)</arglist>
    </member>
    <member kind="typedef">
      <type>Expression&lt; double &gt;</type>
      <name>type</name>
      <anchorfile>a03595.html</anchorfile>
      <anchor>a18218921cb3aa2a55b8e73db8ff67aea</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>std::pair&lt; KeyVector, FastVector&lt; int &gt; &gt;</type>
      <name>KeysAndDims</name>
      <anchorfile>a03595.html</anchorfile>
      <anchor>a6552097f187f99533d16013c7598f61b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>Expression</name>
      <anchorfile>a03595.html</anchorfile>
      <anchor>a3866041e611978ceb328ef4f61e086cc</anchor>
      <arglist>(const boost::shared_ptr&lt; internal::ExpressionNode&lt; double &gt; &gt; &amp;root)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>Expression</name>
      <anchorfile>a03595.html</anchorfile>
      <anchor>a1a57945bb87e069a703d5ee11c587826</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>double</type>
      <name>valueAndDerivatives</name>
      <anchorfile>a03595.html</anchorfile>
      <anchor>ac8c6cdfa4becdaf289fd6c9997343da3</anchor>
      <arglist>(const Values &amp;values, const KeyVector &amp;keys, const FastVector&lt; int &gt; &amp;dims, std::vector&lt; Matrix &gt; &amp;H) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>double</type>
      <name>traceExecution</name>
      <anchorfile>a03595.html</anchorfile>
      <anchor>afecaa44a9cecec402c4ffd858de147dc</anchor>
      <arglist>(const Values &amp;values, internal::ExecutionTrace&lt; double &gt; &amp;trace, void *traceStorage) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>double</type>
      <name>valueAndJacobianMap</name>
      <anchorfile>a03595.html</anchorfile>
      <anchor>a94e579dbb5e5f9ba0a3ae615d1224c9e</anchor>
      <arglist>(const Values &amp;values, internal::JacobianMap &amp;jacobians) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::ExpressionFactor</name>
    <filename>a03583.html</filename>
    <templarg>T</templarg>
    <base>gtsam::NoiseModelFactor</base>
    <member kind="function">
      <type></type>
      <name>ExpressionFactor</name>
      <anchorfile>a03583.html</anchorfile>
      <anchor>af495ef11db24cd68275af89229240881</anchor>
      <arglist>(const SharedNoiseModel &amp;noiseModel, const T &amp;measurement, const Expression&lt; T &gt; &amp;expression)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ExpressionFactor</name>
      <anchorfile>a03583.html</anchorfile>
      <anchor>acee51e8a90650cddfae40dadef2ba7d5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const T &amp;</type>
      <name>measured</name>
      <anchorfile>a03583.html</anchorfile>
      <anchor>ab238c18edc5485892044b90fd7b355d5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>a03583.html</anchorfile>
      <anchor>a50f36712d7a27371c052ec39bb9300a1</anchor>
      <arglist>(const std::string &amp;s=&quot;&quot;, const KeyFormatter &amp;keyFormatter=DefaultKeyFormatter) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>equals</name>
      <anchorfile>a03583.html</anchorfile>
      <anchor>ae5cf5247e03db645ba418ff2f51915dd</anchor>
      <arglist>(const NonlinearFactor &amp;f, double tol) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Vector</type>
      <name>unwhitenedError</name>
      <anchorfile>a03583.html</anchorfile>
      <anchor>ae3c9c8d720d54bbdabec7e93f3aedbe2</anchor>
      <arglist>(const Values &amp;x, boost::optional&lt; std::vector&lt; Matrix &gt; &amp; &gt; H=boost::none) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual boost::shared_ptr&lt; GaussianFactor &gt;</type>
      <name>linearize</name>
      <anchorfile>a03583.html</anchorfile>
      <anchor>acd29c25ddf8325f3d8832bdcda93d82e</anchor>
      <arglist>(const Values &amp;x) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual gtsam::NonlinearFactor::shared_ptr</type>
      <name>clone</name>
      <anchorfile>a03583.html</anchorfile>
      <anchor>a3630d98f85604f3c71899c11920f9482</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>ExpressionFactor</name>
      <anchorfile>a03583.html</anchorfile>
      <anchor>ae72f1ff1db9bee9478d7d98c5384612f</anchor>
      <arglist>(const SharedNoiseModel &amp;noiseModel, const T &amp;measurement)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>initialize</name>
      <anchorfile>a03583.html</anchorfile>
      <anchor>afe7b64aa1ac8161c0765031f91618deb</anchor>
      <arglist>(const Expression&lt; T &gt; &amp;expression)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual Expression&lt; T &gt;</type>
      <name>expression</name>
      <anchorfile>a03583.html</anchorfile>
      <anchor>a45b86e50417905430f8d4509b1f87cf4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>T</type>
      <name>measured_</name>
      <anchorfile>a03583.html</anchorfile>
      <anchor>a5779a3714afe4df221b8b019cf82fbba</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Expression&lt; T &gt;</type>
      <name>expression_</name>
      <anchorfile>a03583.html</anchorfile>
      <anchor>a4c6b16e6167c0a10c83658195ac5da57</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>FastVector&lt; int &gt;</type>
      <name>dims_</name>
      <anchorfile>a03583.html</anchorfile>
      <anchor>a74e6d73bd82c3ea52a5b5878be6db725</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::ExpressionFactor2</name>
    <filename>a03623.html</filename>
    <templarg>T</templarg>
    <templarg>A1</templarg>
    <templarg>A2</templarg>
    <base>gtsam::ExpressionFactor</base>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ExpressionFactor2</name>
      <anchorfile>a03623.html</anchorfile>
      <anchor>aba4ab6f8f8038f67427920b9b62e4fad</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Vector</type>
      <name>evaluateError</name>
      <anchorfile>a03623.html</anchorfile>
      <anchor>a704b2d56c7ddc9535ec5d4da17ab4794</anchor>
      <arglist>(const A1 &amp;a1, const A2 &amp;a2, boost::optional&lt; Matrix &amp; &gt; H1=boost::none, boost::optional&lt; Matrix &amp; &gt; H2=boost::none) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Expression&lt; T &gt;</type>
      <name>expression</name>
      <anchorfile>a03623.html</anchorfile>
      <anchor>a24f5ff149c5d535ac46ca48357feeede</anchor>
      <arglist>(Key key1, Key key2) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>ExpressionFactor2</name>
      <anchorfile>a03623.html</anchorfile>
      <anchor>a9ab1a39c7884eecd9f0397381e99e420</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>ExpressionFactor2</name>
      <anchorfile>a03623.html</anchorfile>
      <anchor>a8a4297579c5a1e6d143e32cd26818b5b</anchor>
      <arglist>(Key key1, Key key2, const SharedNoiseModel &amp;noiseModel, const T &amp;measurement)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ExpressionFactor2&lt; BearingRange&lt; A1, A2 &gt;, A1, A2 &gt;</name>
    <filename>a03623.html</filename>
    <base>ExpressionFactor&lt; BearingRange&lt; A1, A2 &gt; &gt;</base>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ExpressionFactor2</name>
      <anchorfile>a03623.html</anchorfile>
      <anchor>aba4ab6f8f8038f67427920b9b62e4fad</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Vector</type>
      <name>evaluateError</name>
      <anchorfile>a03623.html</anchorfile>
      <anchor>a704b2d56c7ddc9535ec5d4da17ab4794</anchor>
      <arglist>(const A1 &amp;a1, const A2 &amp;a2, boost::optional&lt; Matrix &amp; &gt; H1=boost::none, boost::optional&lt; Matrix &amp; &gt; H2=boost::none) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Expression&lt; BearingRange&lt; A1, A2 &gt; &gt;</type>
      <name>expression</name>
      <anchorfile>a03623.html</anchorfile>
      <anchor>a24f5ff149c5d535ac46ca48357feeede</anchor>
      <arglist>(Key key1, Key key2) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>ExpressionFactor2</name>
      <anchorfile>a03623.html</anchorfile>
      <anchor>a9ab1a39c7884eecd9f0397381e99e420</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>ExpressionFactor2</name>
      <anchorfile>a03623.html</anchorfile>
      <anchor>a8a4297579c5a1e6d143e32cd26818b5b</anchor>
      <arglist>(Key key1, Key key2, const SharedNoiseModel &amp;noiseModel, const BearingRange&lt; A1, A2 &gt; &amp;measurement)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ExpressionFactor&lt; BearingRange&lt; A1, A2 &gt; &gt;</name>
    <filename>a03583.html</filename>
    <base>gtsam::NoiseModelFactor</base>
    <member kind="function">
      <type></type>
      <name>ExpressionFactor</name>
      <anchorfile>a03583.html</anchorfile>
      <anchor>af495ef11db24cd68275af89229240881</anchor>
      <arglist>(const SharedNoiseModel &amp;noiseModel, const BearingRange&lt; A1, A2 &gt; &amp;measurement, const Expression&lt; BearingRange&lt; A1, A2 &gt; &gt; &amp;expression)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ExpressionFactor</name>
      <anchorfile>a03583.html</anchorfile>
      <anchor>acee51e8a90650cddfae40dadef2ba7d5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const BearingRange&lt; A1, A2 &gt; &amp;</type>
      <name>measured</name>
      <anchorfile>a03583.html</anchorfile>
      <anchor>ab238c18edc5485892044b90fd7b355d5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>a03583.html</anchorfile>
      <anchor>a50f36712d7a27371c052ec39bb9300a1</anchor>
      <arglist>(const std::string &amp;s=&quot;&quot;, const KeyFormatter &amp;keyFormatter=DefaultKeyFormatter) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>equals</name>
      <anchorfile>a03583.html</anchorfile>
      <anchor>ae5cf5247e03db645ba418ff2f51915dd</anchor>
      <arglist>(const NonlinearFactor &amp;f, double tol) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Vector</type>
      <name>unwhitenedError</name>
      <anchorfile>a03583.html</anchorfile>
      <anchor>ae3c9c8d720d54bbdabec7e93f3aedbe2</anchor>
      <arglist>(const Values &amp;x, boost::optional&lt; std::vector&lt; Matrix &gt; &amp; &gt; H=boost::none) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual boost::shared_ptr&lt; GaussianFactor &gt;</type>
      <name>linearize</name>
      <anchorfile>a03583.html</anchorfile>
      <anchor>acd29c25ddf8325f3d8832bdcda93d82e</anchor>
      <arglist>(const Values &amp;x) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual gtsam::NonlinearFactor::shared_ptr</type>
      <name>clone</name>
      <anchorfile>a03583.html</anchorfile>
      <anchor>a3630d98f85604f3c71899c11920f9482</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>ExpressionFactor</name>
      <anchorfile>a03583.html</anchorfile>
      <anchor>ae72f1ff1db9bee9478d7d98c5384612f</anchor>
      <arglist>(const SharedNoiseModel &amp;noiseModel, const BearingRange&lt; A1, A2 &gt; &amp;measurement)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>initialize</name>
      <anchorfile>a03583.html</anchorfile>
      <anchor>afe7b64aa1ac8161c0765031f91618deb</anchor>
      <arglist>(const Expression&lt; BearingRange&lt; A1, A2 &gt; &gt; &amp;expression)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual Expression&lt; BearingRange&lt; A1, A2 &gt; &gt;</type>
      <name>expression</name>
      <anchorfile>a03583.html</anchorfile>
      <anchor>a45b86e50417905430f8d4509b1f87cf4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>BearingRange&lt; A1, A2 &gt;</type>
      <name>measured_</name>
      <anchorfile>a03583.html</anchorfile>
      <anchor>a5779a3714afe4df221b8b019cf82fbba</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Expression&lt; BearingRange&lt; A1, A2 &gt; &gt;</type>
      <name>expression_</name>
      <anchorfile>a03583.html</anchorfile>
      <anchor>a4c6b16e6167c0a10c83658195ac5da57</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>FastVector&lt; int &gt;</type>
      <name>dims_</name>
      <anchorfile>a03583.html</anchorfile>
      <anchor>a74e6d73bd82c3ea52a5b5878be6db725</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ExpressionFactor&lt; double &gt;</name>
    <filename>a03583.html</filename>
    <base>gtsam::NoiseModelFactor</base>
    <member kind="function">
      <type></type>
      <name>ExpressionFactor</name>
      <anchorfile>a03583.html</anchorfile>
      <anchor>af495ef11db24cd68275af89229240881</anchor>
      <arglist>(const SharedNoiseModel &amp;noiseModel, const double &amp;measurement, const Expression&lt; double &gt; &amp;expression)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ExpressionFactor</name>
      <anchorfile>a03583.html</anchorfile>
      <anchor>acee51e8a90650cddfae40dadef2ba7d5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const double &amp;</type>
      <name>measured</name>
      <anchorfile>a03583.html</anchorfile>
      <anchor>ab238c18edc5485892044b90fd7b355d5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>a03583.html</anchorfile>
      <anchor>a50f36712d7a27371c052ec39bb9300a1</anchor>
      <arglist>(const std::string &amp;s=&quot;&quot;, const KeyFormatter &amp;keyFormatter=DefaultKeyFormatter) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>equals</name>
      <anchorfile>a03583.html</anchorfile>
      <anchor>ae5cf5247e03db645ba418ff2f51915dd</anchor>
      <arglist>(const NonlinearFactor &amp;f, double tol) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Vector</type>
      <name>unwhitenedError</name>
      <anchorfile>a03583.html</anchorfile>
      <anchor>ae3c9c8d720d54bbdabec7e93f3aedbe2</anchor>
      <arglist>(const Values &amp;x, boost::optional&lt; std::vector&lt; Matrix &gt; &amp; &gt; H=boost::none) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual boost::shared_ptr&lt; GaussianFactor &gt;</type>
      <name>linearize</name>
      <anchorfile>a03583.html</anchorfile>
      <anchor>acd29c25ddf8325f3d8832bdcda93d82e</anchor>
      <arglist>(const Values &amp;x) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual gtsam::NonlinearFactor::shared_ptr</type>
      <name>clone</name>
      <anchorfile>a03583.html</anchorfile>
      <anchor>a3630d98f85604f3c71899c11920f9482</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>ExpressionFactor</name>
      <anchorfile>a03583.html</anchorfile>
      <anchor>ae72f1ff1db9bee9478d7d98c5384612f</anchor>
      <arglist>(const SharedNoiseModel &amp;noiseModel, const double &amp;measurement)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>initialize</name>
      <anchorfile>a03583.html</anchorfile>
      <anchor>afe7b64aa1ac8161c0765031f91618deb</anchor>
      <arglist>(const Expression&lt; double &gt; &amp;expression)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual Expression&lt; double &gt;</type>
      <name>expression</name>
      <anchorfile>a03583.html</anchorfile>
      <anchor>a45b86e50417905430f8d4509b1f87cf4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>measured_</name>
      <anchorfile>a03583.html</anchorfile>
      <anchor>a5779a3714afe4df221b8b019cf82fbba</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Expression&lt; double &gt;</type>
      <name>expression_</name>
      <anchorfile>a03583.html</anchorfile>
      <anchor>a4c6b16e6167c0a10c83658195ac5da57</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>FastVector&lt; int &gt;</type>
      <name>dims_</name>
      <anchorfile>a03583.html</anchorfile>
      <anchor>a74e6d73bd82c3ea52a5b5878be6db725</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::ExpressionFactorGraph</name>
    <filename>a03627.html</filename>
    <base>gtsam::NonlinearFactorGraph</base>
    <member kind="function">
      <type>void</type>
      <name>addExpressionFactor</name>
      <anchorfile>a03627.html</anchorfile>
      <anchor>ac417241d59dbed10d320032a0c502929</anchor>
      <arglist>(const Expression&lt; T &gt; &amp;h, const T &amp;z, const SharedNoiseModel &amp;R)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addExpressionFactor</name>
      <anchorfile>a03627.html</anchorfile>
      <anchor>ac417241d59dbed10d320032a0c502929</anchor>
      <arglist>(const Expression&lt; T &gt; &amp;h, const T &amp;z, const SharedNoiseModel &amp;R)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::internal::ExpressionNode</name>
    <filename>a03591.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="class">
    <name>gtsam::ExtendedKalmanFilter</name>
    <filename>a03631.html</filename>
    <templarg>VALUE</templarg>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>a03631.html</anchorfile>
      <anchor>add36115e54062f7fcbb9e5f9c5644616</anchor>
      <arglist>(const std::string &amp;s=&quot;&quot;) const</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>predict</name>
      <anchorfile>a03631.html</anchorfile>
      <anchor>aa5abc72bbcb716e6bf7746cb18fc3f82</anchor>
      <arglist>(const NoiseModelFactor &amp;motionFactor)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>update</name>
      <anchorfile>a03631.html</anchorfile>
      <anchor>a2af26c404282581900319486f1669e84</anchor>
      <arglist>(const NoiseModelFactor &amp;measurementFactor)</arglist>
    </member>
    <member kind="function">
      <type>const JacobianFactor::shared_ptr</type>
      <name>Density</name>
      <anchorfile>a03631.html</anchorfile>
      <anchor>a54c50e01306dada7382926f62145526b</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::Factor</name>
    <filename>a02951.html</filename>
    <member kind="function" protection="protected">
      <type></type>
      <name>Factor</name>
      <anchorfile>a02951.html</anchorfile>
      <anchor>a322a4d391be45b5909a65895fb7b023d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>Factor</name>
      <anchorfile>a02951.html</anchorfile>
      <anchor>aa3d2ef6b21961e708a4cbe10b55be59b</anchor>
      <arglist>(const CONTAINER &amp;keys)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>Factor</name>
      <anchorfile>a02951.html</anchorfile>
      <anchor>a70ff55886664229a25e29cf2a7bb1bb7</anchor>
      <arglist>(ITERATOR first, ITERATOR last)</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static Factor</type>
      <name>FromKeys</name>
      <anchorfile>a02951.html</anchorfile>
      <anchor>a5087976b9e398cd21305d33972feedad</anchor>
      <arglist>(const CONTAINER &amp;keys)</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static Factor</type>
      <name>FromIterators</name>
      <anchorfile>a02951.html</anchorfile>
      <anchor>a4157181261dc47002004d53c8b56f7bf</anchor>
      <arglist>(ITERATOR first, ITERATOR last)</arglist>
    </member>
    <member kind="function">
      <type>Key</type>
      <name>front</name>
      <anchorfile>a02951.html</anchorfile>
      <anchor>aeb63e9c85c567ee3b06b0d2ad0552a8a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Key</type>
      <name>back</name>
      <anchorfile>a02951.html</anchorfile>
      <anchor>ae38e5024d5b20aa06a5a6bd289e626c4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const_iterator</type>
      <name>find</name>
      <anchorfile>a02951.html</anchorfile>
      <anchor>a179a10d0319e87eda55d6925de0f5102</anchor>
      <arglist>(Key key) const</arglist>
    </member>
    <member kind="function">
      <type>const KeyVector &amp;</type>
      <name>keys</name>
      <anchorfile>a02951.html</anchorfile>
      <anchor>a92a49ace77f6474e109d55bae11e2bef</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const_iterator</type>
      <name>begin</name>
      <anchorfile>a02951.html</anchorfile>
      <anchor>a17c02f11c35bf7768347cad4943f0f64</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const_iterator</type>
      <name>end</name>
      <anchorfile>a02951.html</anchorfile>
      <anchor>aa1f00e05967c0c278beec17af9cb0530</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>size</name>
      <anchorfile>a02951.html</anchorfile>
      <anchor>afac01740aefd22f4f90f49767010f811</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>equals</name>
      <anchorfile>a02951.html</anchorfile>
      <anchor>a5cc62be07fbcde6678f8b346ab3a3f78</anchor>
      <arglist>(const This &amp;other, double tol=1e-9) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>a02951.html</anchorfile>
      <anchor>a5388ca5d908a0cdfbfdd7dcd9021ade6</anchor>
      <arglist>(const std::string &amp;s=&quot;Factor&quot;, const KeyFormatter &amp;formatter=DefaultKeyFormatter) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>printKeys</name>
      <anchorfile>a02951.html</anchorfile>
      <anchor>a52cdda1b64d2d584b1012362963b76f3</anchor>
      <arglist>(const std::string &amp;s=&quot;Factor&quot;, const KeyFormatter &amp;formatter=DefaultKeyFormatter) const</arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>boost::serialization::access</name>
      <anchorfile>a02951.html</anchorfile>
      <anchor>ac98d07dd8f7b70e16ccb9a01abf56b9c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>KeyVector &amp;</type>
      <name>keys</name>
      <anchorfile>a02951.html</anchorfile>
      <anchor>a41db5608c82d8df2284826b052b889c1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>begin</name>
      <anchorfile>a02951.html</anchorfile>
      <anchor>a5596dcbc299a2e8eec813b78fbcfe933</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>end</name>
      <anchorfile>a02951.html</anchorfile>
      <anchor>a33597c74ba8db7396722165424fe5ec3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="typedef">
      <type>KeyVector::iterator</type>
      <name>iterator</name>
      <anchorfile>a02951.html</anchorfile>
      <anchor>acb069f38cc81bea20cecfad4070da59e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>KeyVector::const_iterator</type>
      <name>const_iterator</name>
      <anchorfile>a02951.html</anchorfile>
      <anchor>a71af7ad9e9474ebbcf2fdffc7f31251b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>KeyVector</type>
      <name>keys_</name>
      <anchorfile>a02951.html</anchorfile>
      <anchor>a10e886cc8b8a374e2fe864707e0b6278</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::FactorGraph</name>
    <filename>a02887.html</filename>
    <templarg>FACTOR</templarg>
    <member kind="function" protection="protected">
      <type></type>
      <name>FactorGraph</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>a42db0a1062eb6c223b0a186a9d34cb4b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>FactorGraph</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>a63a80ba5a22fee5725d0efa75080cdfb</anchor>
      <arglist>(ITERATOR firstFactor, ITERATOR lastFactor)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>FactorGraph</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>a37b5e74d2c3711906f57982b4512351f</anchor>
      <arglist>(const CONTAINER &amp;factors)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reserve</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>afea8c7bf4fd19ccc1547be3a5d1834f6</anchor>
      <arglist>(size_t size)</arglist>
    </member>
    <member kind="function">
      <type>std::enable_if&lt; std::is_base_of&lt; FactorType, DERIVEDFACTOR &gt;::value &gt;::type</type>
      <name>push_back</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>a28fcfc8fcc5ac3068af271a821e31621</anchor>
      <arglist>(boost::shared_ptr&lt; DERIVEDFACTOR &gt; factor)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>push_back</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>aeaa4b43fb9b7111b478d3a96a3aa0e20</anchor>
      <arglist>(const sharedFactor &amp;factor)</arglist>
    </member>
    <member kind="function">
      <type>std::enable_if&lt; std::is_base_of&lt; FactorType, DERIVEDFACTOR &gt;::value &gt;::type</type>
      <name>emplace_shared</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>a8e64fe7be32c2602bb509d18d2bfd491</anchor>
      <arglist>(Args &amp;&amp;... args)</arglist>
    </member>
    <member kind="function">
      <type>std::enable_if&lt; std::is_base_of&lt; FactorType, typename ITERATOR::value_type::element_type &gt;::value &gt;::type</type>
      <name>push_back</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>af1158e556a9a5efa64a05667bfcf038b</anchor>
      <arglist>(ITERATOR firstFactor, ITERATOR lastFactor)</arglist>
    </member>
    <member kind="function">
      <type>std::enable_if&lt; std::is_base_of&lt; FactorType, typename CONTAINER::value_type::element_type &gt;::value &gt;::type</type>
      <name>push_back</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>a2b539f79df46e9f5a07b179fc632fd67</anchor>
      <arglist>(const CONTAINER &amp;container)</arglist>
    </member>
    <member kind="function">
      <type>std::enable_if&lt; std::is_base_of&lt; This, typename CLIQUE::FactorGraphType &gt;::value &gt;::type</type>
      <name>push_back</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>a7b06bb023c4e23edc3cff4a3fc6a2906</anchor>
      <arglist>(const BayesTree&lt; CLIQUE &gt; &amp;bayesTree)</arglist>
    </member>
    <member kind="function">
      <type>std::enable_if&lt; std::is_base_of&lt; FactorType, DERIVEDFACTOR &gt;::value &gt;::type</type>
      <name>push_back</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>af2c15ab7a1b0e1a05a80f6ec527eee84</anchor>
      <arglist>(const DERIVEDFACTOR &amp;factor)</arglist>
    </member>
    <member kind="function">
      <type>std::enable_if&lt; std::is_base_of&lt; FactorType, typename ITERATOR::value_type &gt;::value &gt;::type</type>
      <name>push_back</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>a7b0873f24893a29e260ef5199df3cbd7</anchor>
      <arglist>(ITERATOR firstFactor, ITERATOR lastFactor)</arglist>
    </member>
    <member kind="function">
      <type>std::enable_if&lt; std::is_base_of&lt; FactorType, typename CONTAINER::value_type &gt;::value &gt;::type</type>
      <name>push_back</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>a171b2e48cdc4c59479c6c5311118e454</anchor>
      <arglist>(const CONTAINER &amp;container)</arglist>
    </member>
    <member kind="function">
      <type>std::enable_if&lt; std::is_base_of&lt; FactorType, DERIVEDFACTOR &gt;::value, boost::assign::list_inserter&lt; RefCallPushBack&lt; This &gt; &gt; &gt;::type</type>
      <name>operator+=</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>aff46073025c2e79624602d7a0a5a3183</anchor>
      <arglist>(boost::shared_ptr&lt; DERIVEDFACTOR &gt; factor)</arglist>
    </member>
    <member kind="function">
      <type>boost::assign::list_inserter&lt; CRefCallPushBack&lt; This &gt; &gt;</type>
      <name>operator+=</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>a0584d686cc8431728029c920a2ab08b2</anchor>
      <arglist>(const sharedFactor &amp;factor)</arglist>
    </member>
    <member kind="function">
      <type>boost::assign::list_inserter&lt; CRefCallPushBack&lt; This &gt; &gt;</type>
      <name>operator+=</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>af97f5c19a7ae3f09a60ecb7a05ad2ff3</anchor>
      <arglist>(const FACTOR_OR_CONTAINER &amp;factorOrContainer)</arglist>
    </member>
    <member kind="function">
      <type>std::enable_if&lt; std::is_base_of&lt; FactorType, DERIVEDFACTOR &gt;::value &gt;::type</type>
      <name>add</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>af7cc4c74b62998b22c95cb525bda0547</anchor>
      <arglist>(boost::shared_ptr&lt; DERIVEDFACTOR &gt; factor)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>a9bc0c118e19c269d8e2951183d1c493e</anchor>
      <arglist>(const sharedFactor &amp;factor)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>a243182115ecfb081a1605fea939f86f4</anchor>
      <arglist>(const FACTOR_OR_CONTAINER &amp;factorOrContainer)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>a06c9c6d855c390743bd4a4472c730687</anchor>
      <arglist>(const std::string &amp;s=&quot;FactorGraph&quot;, const KeyFormatter &amp;formatter=DefaultKeyFormatter) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>equals</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>aacdf24691d25e1e93ca6b924465b7a35</anchor>
      <arglist>(const This &amp;fg, double tol=1e-9) const</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>size</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>a76fb453800c9ac164bef864782733403</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>empty</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>a0ed8834089b31ef96888643af4731a8a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const sharedFactor</type>
      <name>at</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>aec104a9847783a29065fd4d24f072b7a</anchor>
      <arglist>(size_t i) const</arglist>
    </member>
    <member kind="function">
      <type>sharedFactor &amp;</type>
      <name>at</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>a643fa29b7e95aab4c80169729492efd1</anchor>
      <arglist>(size_t i)</arglist>
    </member>
    <member kind="function">
      <type>const sharedFactor</type>
      <name>operator[]</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>ad00637b3f124aec8b4047faea5b5647b</anchor>
      <arglist>(size_t i) const</arglist>
    </member>
    <member kind="function">
      <type>sharedFactor &amp;</type>
      <name>operator[]</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>abcc88a56126d4715cc8a7de9ff3c34af</anchor>
      <arglist>(size_t i)</arglist>
    </member>
    <member kind="function">
      <type>const_iterator</type>
      <name>begin</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>abcaeffeae20930806f064f8413689c22</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const_iterator</type>
      <name>end</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>a94a257708f3530799e24d21f3125e181</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>sharedFactor</type>
      <name>front</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>a8aad182ded37c5add184e0113ec9ede9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>sharedFactor</type>
      <name>back</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>a37859ce7d210d593be80f625eceba620</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>begin</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>abaf0875f55936063d96c507de9e9255a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>end</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>ad6e1c6a2b56c2158afb28a58ab560e44</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resize</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>a231dd81b4751a9bccc3c89f35f76961e</anchor>
      <arglist>(size_t size)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>remove</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>a38468469269d7b6530cf4d32b4e462d1</anchor>
      <arglist>(size_t i)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>replace</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>aa706ee0e285f6c1a38e6a4446fe9ea4e</anchor>
      <arglist>(size_t index, sharedFactor factor)</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>erase</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>a22f324974f6e3380c54d1d69c71bc7fb</anchor>
      <arglist>(iterator item)</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>erase</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>a2825a68630a0547e1bfd5ba0cdf1de61</anchor>
      <arglist>(iterator first, iterator last)</arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>boost::serialization::access</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>ac98d07dd8f7b70e16ccb9a01abf56b9c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>nrFactors</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>a761f1022dadf60e2cacca304ab0533b4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>KeySet</type>
      <name>keys</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>a0c4667de76265a06cc6f74b1f3b25051</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>KeyVector</type>
      <name>keyVector</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>a3b4d9bbaceeb9043ab7c20d4778b69c5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>exists</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>acbf8cdf50816d4a0571f6b9b6254f9ce</anchor>
      <arglist>(size_t idx) const</arglist>
    </member>
    <member kind="typedef">
      <type>FACTOR</type>
      <name>FactorType</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>aa54fb0b66fd8fee9f3c1f2844cf3edef</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; FACTOR &gt;</type>
      <name>sharedFactor</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>ac9bfc88025d21ff01b7e9dc609ba0b0e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>FastVector&lt; sharedFactor &gt;</type>
      <name>factors_</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>ae0c75f68e3ebc37cc4511285b12c33fc</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>FactorGraph&lt; CONDITIONAL &gt;</name>
    <filename>a02887.html</filename>
    <member kind="friend">
      <type>friend class</type>
      <name>boost::serialization::access</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>ac98d07dd8f7b70e16ccb9a01abf56b9c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>nrFactors</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>a761f1022dadf60e2cacca304ab0533b4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>KeySet</type>
      <name>keys</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>a0c4667de76265a06cc6f74b1f3b25051</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>KeyVector</type>
      <name>keyVector</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>a3b4d9bbaceeb9043ab7c20d4778b69c5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>exists</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>acbf8cdf50816d4a0571f6b9b6254f9ce</anchor>
      <arglist>(size_t idx) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>FactorGraph</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>a42db0a1062eb6c223b0a186a9d34cb4b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>FactorGraph</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>a63a80ba5a22fee5725d0efa75080cdfb</anchor>
      <arglist>(ITERATOR firstFactor, ITERATOR lastFactor)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>FactorGraph</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>a37b5e74d2c3711906f57982b4512351f</anchor>
      <arglist>(const CONTAINER &amp;factors)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reserve</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>afea8c7bf4fd19ccc1547be3a5d1834f6</anchor>
      <arglist>(size_t size)</arglist>
    </member>
    <member kind="function">
      <type>std::enable_if&lt; std::is_base_of&lt; FactorType, DERIVEDFACTOR &gt;::value &gt;::type</type>
      <name>push_back</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>a28fcfc8fcc5ac3068af271a821e31621</anchor>
      <arglist>(boost::shared_ptr&lt; DERIVEDFACTOR &gt; factor)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>push_back</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>aeaa4b43fb9b7111b478d3a96a3aa0e20</anchor>
      <arglist>(const sharedFactor &amp;factor)</arglist>
    </member>
    <member kind="function">
      <type>std::enable_if&lt; std::is_base_of&lt; FactorType, typename ITERATOR::value_type::element_type &gt;::value &gt;::type</type>
      <name>push_back</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>af1158e556a9a5efa64a05667bfcf038b</anchor>
      <arglist>(ITERATOR firstFactor, ITERATOR lastFactor)</arglist>
    </member>
    <member kind="function">
      <type>std::enable_if&lt; std::is_base_of&lt; FactorType, typename CONTAINER::value_type::element_type &gt;::value &gt;::type</type>
      <name>push_back</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>a2b539f79df46e9f5a07b179fc632fd67</anchor>
      <arglist>(const CONTAINER &amp;container)</arglist>
    </member>
    <member kind="function">
      <type>std::enable_if&lt; std::is_base_of&lt; This, typename CLIQUE::FactorGraphType &gt;::value &gt;::type</type>
      <name>push_back</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>a7b06bb023c4e23edc3cff4a3fc6a2906</anchor>
      <arglist>(const BayesTree&lt; CLIQUE &gt; &amp;bayesTree)</arglist>
    </member>
    <member kind="function">
      <type>std::enable_if&lt; std::is_base_of&lt; FactorType, DERIVEDFACTOR &gt;::value &gt;::type</type>
      <name>push_back</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>af2c15ab7a1b0e1a05a80f6ec527eee84</anchor>
      <arglist>(const DERIVEDFACTOR &amp;factor)</arglist>
    </member>
    <member kind="function">
      <type>std::enable_if&lt; std::is_base_of&lt; FactorType, typename ITERATOR::value_type &gt;::value &gt;::type</type>
      <name>push_back</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>a7b0873f24893a29e260ef5199df3cbd7</anchor>
      <arglist>(ITERATOR firstFactor, ITERATOR lastFactor)</arglist>
    </member>
    <member kind="function">
      <type>std::enable_if&lt; std::is_base_of&lt; FactorType, typename CONTAINER::value_type &gt;::value &gt;::type</type>
      <name>push_back</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>a171b2e48cdc4c59479c6c5311118e454</anchor>
      <arglist>(const CONTAINER &amp;container)</arglist>
    </member>
    <member kind="function">
      <type>std::enable_if&lt; std::is_base_of&lt; FactorType, DERIVEDFACTOR &gt;::value &gt;::type</type>
      <name>emplace_shared</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>a8e64fe7be32c2602bb509d18d2bfd491</anchor>
      <arglist>(Args &amp;&amp;... args)</arglist>
    </member>
    <member kind="function">
      <type>std::enable_if&lt; std::is_base_of&lt; FactorType, DERIVEDFACTOR &gt;::value, boost::assign::list_inserter&lt; RefCallPushBack&lt; This &gt; &gt; &gt;::type</type>
      <name>operator+=</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>aff46073025c2e79624602d7a0a5a3183</anchor>
      <arglist>(boost::shared_ptr&lt; DERIVEDFACTOR &gt; factor)</arglist>
    </member>
    <member kind="function">
      <type>boost::assign::list_inserter&lt; CRefCallPushBack&lt; This &gt; &gt;</type>
      <name>operator+=</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>a0584d686cc8431728029c920a2ab08b2</anchor>
      <arglist>(const sharedFactor &amp;factor)</arglist>
    </member>
    <member kind="function">
      <type>boost::assign::list_inserter&lt; CRefCallPushBack&lt; This &gt; &gt;</type>
      <name>operator+=</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>af97f5c19a7ae3f09a60ecb7a05ad2ff3</anchor>
      <arglist>(const FACTOR_OR_CONTAINER &amp;factorOrContainer)</arglist>
    </member>
    <member kind="function">
      <type>std::enable_if&lt; std::is_base_of&lt; FactorType, DERIVEDFACTOR &gt;::value &gt;::type</type>
      <name>add</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>af7cc4c74b62998b22c95cb525bda0547</anchor>
      <arglist>(boost::shared_ptr&lt; DERIVEDFACTOR &gt; factor)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>a9bc0c118e19c269d8e2951183d1c493e</anchor>
      <arglist>(const sharedFactor &amp;factor)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>a243182115ecfb081a1605fea939f86f4</anchor>
      <arglist>(const FACTOR_OR_CONTAINER &amp;factorOrContainer)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>a06c9c6d855c390743bd4a4472c730687</anchor>
      <arglist>(const std::string &amp;s=&quot;FactorGraph&quot;, const KeyFormatter &amp;formatter=DefaultKeyFormatter) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>equals</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>aacdf24691d25e1e93ca6b924465b7a35</anchor>
      <arglist>(const This &amp;fg, double tol=1e-9) const</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>size</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>a76fb453800c9ac164bef864782733403</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>empty</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>a0ed8834089b31ef96888643af4731a8a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const sharedFactor</type>
      <name>at</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>aec104a9847783a29065fd4d24f072b7a</anchor>
      <arglist>(size_t i) const</arglist>
    </member>
    <member kind="function">
      <type>sharedFactor &amp;</type>
      <name>at</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>a643fa29b7e95aab4c80169729492efd1</anchor>
      <arglist>(size_t i)</arglist>
    </member>
    <member kind="function">
      <type>const sharedFactor</type>
      <name>operator[]</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>ad00637b3f124aec8b4047faea5b5647b</anchor>
      <arglist>(size_t i) const</arglist>
    </member>
    <member kind="function">
      <type>sharedFactor &amp;</type>
      <name>operator[]</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>abcc88a56126d4715cc8a7de9ff3c34af</anchor>
      <arglist>(size_t i)</arglist>
    </member>
    <member kind="function">
      <type>const_iterator</type>
      <name>begin</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>abcaeffeae20930806f064f8413689c22</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const_iterator</type>
      <name>end</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>a94a257708f3530799e24d21f3125e181</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>sharedFactor</type>
      <name>front</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>a8aad182ded37c5add184e0113ec9ede9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>sharedFactor</type>
      <name>back</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>a37859ce7d210d593be80f625eceba620</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>begin</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>abaf0875f55936063d96c507de9e9255a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>end</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>ad6e1c6a2b56c2158afb28a58ab560e44</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resize</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>a231dd81b4751a9bccc3c89f35f76961e</anchor>
      <arglist>(size_t size)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>remove</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>a38468469269d7b6530cf4d32b4e462d1</anchor>
      <arglist>(size_t i)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>replace</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>aa706ee0e285f6c1a38e6a4446fe9ea4e</anchor>
      <arglist>(size_t index, sharedFactor factor)</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>erase</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>a22f324974f6e3380c54d1d69c71bc7fb</anchor>
      <arglist>(iterator item)</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>erase</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>a2825a68630a0547e1bfd5ba0cdf1de61</anchor>
      <arglist>(iterator first, iterator last)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reserve</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>afea8c7bf4fd19ccc1547be3a5d1834f6</anchor>
      <arglist>(size_t size)</arglist>
    </member>
    <member kind="function">
      <type>std::enable_if&lt; std::is_base_of&lt; FactorType, DERIVEDFACTOR &gt;::value &gt;::type</type>
      <name>push_back</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>a28fcfc8fcc5ac3068af271a821e31621</anchor>
      <arglist>(boost::shared_ptr&lt; DERIVEDFACTOR &gt; factor)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>push_back</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>aeaa4b43fb9b7111b478d3a96a3aa0e20</anchor>
      <arglist>(const sharedFactor &amp;factor)</arglist>
    </member>
    <member kind="function">
      <type>std::enable_if&lt; std::is_base_of&lt; FactorType, typename ITERATOR::value_type::element_type &gt;::value &gt;::type</type>
      <name>push_back</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>af1158e556a9a5efa64a05667bfcf038b</anchor>
      <arglist>(ITERATOR firstFactor, ITERATOR lastFactor)</arglist>
    </member>
    <member kind="function">
      <type>std::enable_if&lt; std::is_base_of&lt; FactorType, typename CONTAINER::value_type::element_type &gt;::value &gt;::type</type>
      <name>push_back</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>a2b539f79df46e9f5a07b179fc632fd67</anchor>
      <arglist>(const CONTAINER &amp;container)</arglist>
    </member>
    <member kind="function">
      <type>std::enable_if&lt; std::is_base_of&lt; This, typename CLIQUE::FactorGraphType &gt;::value &gt;::type</type>
      <name>push_back</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>a7b06bb023c4e23edc3cff4a3fc6a2906</anchor>
      <arglist>(const BayesTree&lt; CLIQUE &gt; &amp;bayesTree)</arglist>
    </member>
    <member kind="function">
      <type>std::enable_if&lt; std::is_base_of&lt; FactorType, DERIVEDFACTOR &gt;::value &gt;::type</type>
      <name>push_back</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>af2c15ab7a1b0e1a05a80f6ec527eee84</anchor>
      <arglist>(const DERIVEDFACTOR &amp;factor)</arglist>
    </member>
    <member kind="function">
      <type>std::enable_if&lt; std::is_base_of&lt; FactorType, typename ITERATOR::value_type &gt;::value &gt;::type</type>
      <name>push_back</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>a7b0873f24893a29e260ef5199df3cbd7</anchor>
      <arglist>(ITERATOR firstFactor, ITERATOR lastFactor)</arglist>
    </member>
    <member kind="function">
      <type>std::enable_if&lt; std::is_base_of&lt; FactorType, typename CONTAINER::value_type &gt;::value &gt;::type</type>
      <name>push_back</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>a171b2e48cdc4c59479c6c5311118e454</anchor>
      <arglist>(const CONTAINER &amp;container)</arglist>
    </member>
    <member kind="function">
      <type>std::enable_if&lt; std::is_base_of&lt; FactorType, DERIVEDFACTOR &gt;::value &gt;::type</type>
      <name>emplace_shared</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>a8e64fe7be32c2602bb509d18d2bfd491</anchor>
      <arglist>(Args &amp;&amp;... args)</arglist>
    </member>
    <member kind="function">
      <type>std::enable_if&lt; std::is_base_of&lt; FactorType, DERIVEDFACTOR &gt;::value, boost::assign::list_inserter&lt; RefCallPushBack&lt; This &gt; &gt; &gt;::type</type>
      <name>operator+=</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>aff46073025c2e79624602d7a0a5a3183</anchor>
      <arglist>(boost::shared_ptr&lt; DERIVEDFACTOR &gt; factor)</arglist>
    </member>
    <member kind="function">
      <type>boost::assign::list_inserter&lt; CRefCallPushBack&lt; This &gt; &gt;</type>
      <name>operator+=</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>a0584d686cc8431728029c920a2ab08b2</anchor>
      <arglist>(const sharedFactor &amp;factor)</arglist>
    </member>
    <member kind="function">
      <type>boost::assign::list_inserter&lt; CRefCallPushBack&lt; This &gt; &gt;</type>
      <name>operator+=</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>af97f5c19a7ae3f09a60ecb7a05ad2ff3</anchor>
      <arglist>(const FACTOR_OR_CONTAINER &amp;factorOrContainer)</arglist>
    </member>
    <member kind="function">
      <type>std::enable_if&lt; std::is_base_of&lt; FactorType, DERIVEDFACTOR &gt;::value &gt;::type</type>
      <name>add</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>af7cc4c74b62998b22c95cb525bda0547</anchor>
      <arglist>(boost::shared_ptr&lt; DERIVEDFACTOR &gt; factor)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>a9bc0c118e19c269d8e2951183d1c493e</anchor>
      <arglist>(const sharedFactor &amp;factor)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>a243182115ecfb081a1605fea939f86f4</anchor>
      <arglist>(const FACTOR_OR_CONTAINER &amp;factorOrContainer)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>a06c9c6d855c390743bd4a4472c730687</anchor>
      <arglist>(const std::string &amp;s=&quot;FactorGraph&quot;, const KeyFormatter &amp;formatter=DefaultKeyFormatter) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>equals</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>aacdf24691d25e1e93ca6b924465b7a35</anchor>
      <arglist>(const This &amp;fg, double tol=1e-9) const</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>size</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>a76fb453800c9ac164bef864782733403</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>empty</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>a0ed8834089b31ef96888643af4731a8a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const sharedFactor</type>
      <name>at</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>aec104a9847783a29065fd4d24f072b7a</anchor>
      <arglist>(size_t i) const</arglist>
    </member>
    <member kind="function">
      <type>sharedFactor &amp;</type>
      <name>at</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>a643fa29b7e95aab4c80169729492efd1</anchor>
      <arglist>(size_t i)</arglist>
    </member>
    <member kind="function">
      <type>const sharedFactor</type>
      <name>operator[]</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>ad00637b3f124aec8b4047faea5b5647b</anchor>
      <arglist>(size_t i) const</arglist>
    </member>
    <member kind="function">
      <type>sharedFactor &amp;</type>
      <name>operator[]</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>abcc88a56126d4715cc8a7de9ff3c34af</anchor>
      <arglist>(size_t i)</arglist>
    </member>
    <member kind="function">
      <type>const_iterator</type>
      <name>begin</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>abcaeffeae20930806f064f8413689c22</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const_iterator</type>
      <name>end</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>a94a257708f3530799e24d21f3125e181</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>sharedFactor</type>
      <name>front</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>a8aad182ded37c5add184e0113ec9ede9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>sharedFactor</type>
      <name>back</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>a37859ce7d210d593be80f625eceba620</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>begin</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>abaf0875f55936063d96c507de9e9255a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>end</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>ad6e1c6a2b56c2158afb28a58ab560e44</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resize</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>a231dd81b4751a9bccc3c89f35f76961e</anchor>
      <arglist>(size_t size)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>remove</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>a38468469269d7b6530cf4d32b4e462d1</anchor>
      <arglist>(size_t i)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>replace</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>aa706ee0e285f6c1a38e6a4446fe9ea4e</anchor>
      <arglist>(size_t index, sharedFactor factor)</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>erase</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>a22f324974f6e3380c54d1d69c71bc7fb</anchor>
      <arglist>(iterator item)</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>erase</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>a2825a68630a0547e1bfd5ba0cdf1de61</anchor>
      <arglist>(iterator first, iterator last)</arglist>
    </member>
    <member kind="typedef">
      <type>CONDITIONAL</type>
      <name>FactorType</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>aa54fb0b66fd8fee9f3c1f2844cf3edef</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; CONDITIONAL &gt;</type>
      <name>sharedFactor</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>ac9bfc88025d21ff01b7e9dc609ba0b0e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>FactorGraph</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>a42db0a1062eb6c223b0a186a9d34cb4b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>FactorGraph</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>a63a80ba5a22fee5725d0efa75080cdfb</anchor>
      <arglist>(ITERATOR firstFactor, ITERATOR lastFactor)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>FactorGraph</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>a37b5e74d2c3711906f57982b4512351f</anchor>
      <arglist>(const CONTAINER &amp;factors)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>FastVector&lt; sharedFactor &gt;</type>
      <name>factors_</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>ae0c75f68e3ebc37cc4511285b12c33fc</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>FactorGraph&lt; DiscreteConditional &gt;</name>
    <filename>a02887.html</filename>
    <member kind="friend">
      <type>friend class</type>
      <name>boost::serialization::access</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>ac98d07dd8f7b70e16ccb9a01abf56b9c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>nrFactors</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>a761f1022dadf60e2cacca304ab0533b4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>KeySet</type>
      <name>keys</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>a0c4667de76265a06cc6f74b1f3b25051</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>KeyVector</type>
      <name>keyVector</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>a3b4d9bbaceeb9043ab7c20d4778b69c5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>exists</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>acbf8cdf50816d4a0571f6b9b6254f9ce</anchor>
      <arglist>(size_t idx) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>FactorGraph</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>a42db0a1062eb6c223b0a186a9d34cb4b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>FactorGraph</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>a63a80ba5a22fee5725d0efa75080cdfb</anchor>
      <arglist>(ITERATOR firstFactor, ITERATOR lastFactor)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>FactorGraph</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>a37b5e74d2c3711906f57982b4512351f</anchor>
      <arglist>(const CONTAINER &amp;factors)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reserve</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>afea8c7bf4fd19ccc1547be3a5d1834f6</anchor>
      <arglist>(size_t size)</arglist>
    </member>
    <member kind="function">
      <type>std::enable_if&lt; std::is_base_of&lt; FactorType, DERIVEDFACTOR &gt;::value &gt;::type</type>
      <name>push_back</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>a28fcfc8fcc5ac3068af271a821e31621</anchor>
      <arglist>(boost::shared_ptr&lt; DERIVEDFACTOR &gt; factor)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>push_back</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>aeaa4b43fb9b7111b478d3a96a3aa0e20</anchor>
      <arglist>(const sharedFactor &amp;factor)</arglist>
    </member>
    <member kind="function">
      <type>std::enable_if&lt; std::is_base_of&lt; FactorType, typename ITERATOR::value_type::element_type &gt;::value &gt;::type</type>
      <name>push_back</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>af1158e556a9a5efa64a05667bfcf038b</anchor>
      <arglist>(ITERATOR firstFactor, ITERATOR lastFactor)</arglist>
    </member>
    <member kind="function">
      <type>std::enable_if&lt; std::is_base_of&lt; FactorType, typename CONTAINER::value_type::element_type &gt;::value &gt;::type</type>
      <name>push_back</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>a2b539f79df46e9f5a07b179fc632fd67</anchor>
      <arglist>(const CONTAINER &amp;container)</arglist>
    </member>
    <member kind="function">
      <type>std::enable_if&lt; std::is_base_of&lt; This, typename CLIQUE::FactorGraphType &gt;::value &gt;::type</type>
      <name>push_back</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>a7b06bb023c4e23edc3cff4a3fc6a2906</anchor>
      <arglist>(const BayesTree&lt; CLIQUE &gt; &amp;bayesTree)</arglist>
    </member>
    <member kind="function">
      <type>std::enable_if&lt; std::is_base_of&lt; FactorType, DERIVEDFACTOR &gt;::value &gt;::type</type>
      <name>push_back</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>af2c15ab7a1b0e1a05a80f6ec527eee84</anchor>
      <arglist>(const DERIVEDFACTOR &amp;factor)</arglist>
    </member>
    <member kind="function">
      <type>std::enable_if&lt; std::is_base_of&lt; FactorType, typename ITERATOR::value_type &gt;::value &gt;::type</type>
      <name>push_back</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>a7b0873f24893a29e260ef5199df3cbd7</anchor>
      <arglist>(ITERATOR firstFactor, ITERATOR lastFactor)</arglist>
    </member>
    <member kind="function">
      <type>std::enable_if&lt; std::is_base_of&lt; FactorType, typename CONTAINER::value_type &gt;::value &gt;::type</type>
      <name>push_back</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>a171b2e48cdc4c59479c6c5311118e454</anchor>
      <arglist>(const CONTAINER &amp;container)</arglist>
    </member>
    <member kind="function">
      <type>std::enable_if&lt; std::is_base_of&lt; FactorType, DERIVEDFACTOR &gt;::value &gt;::type</type>
      <name>emplace_shared</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>a8e64fe7be32c2602bb509d18d2bfd491</anchor>
      <arglist>(Args &amp;&amp;... args)</arglist>
    </member>
    <member kind="function">
      <type>std::enable_if&lt; std::is_base_of&lt; FactorType, DERIVEDFACTOR &gt;::value, boost::assign::list_inserter&lt; RefCallPushBack&lt; This &gt; &gt; &gt;::type</type>
      <name>operator+=</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>aff46073025c2e79624602d7a0a5a3183</anchor>
      <arglist>(boost::shared_ptr&lt; DERIVEDFACTOR &gt; factor)</arglist>
    </member>
    <member kind="function">
      <type>boost::assign::list_inserter&lt; CRefCallPushBack&lt; This &gt; &gt;</type>
      <name>operator+=</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>a0584d686cc8431728029c920a2ab08b2</anchor>
      <arglist>(const sharedFactor &amp;factor)</arglist>
    </member>
    <member kind="function">
      <type>boost::assign::list_inserter&lt; CRefCallPushBack&lt; This &gt; &gt;</type>
      <name>operator+=</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>af97f5c19a7ae3f09a60ecb7a05ad2ff3</anchor>
      <arglist>(const FACTOR_OR_CONTAINER &amp;factorOrContainer)</arglist>
    </member>
    <member kind="function">
      <type>std::enable_if&lt; std::is_base_of&lt; FactorType, DERIVEDFACTOR &gt;::value &gt;::type</type>
      <name>add</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>af7cc4c74b62998b22c95cb525bda0547</anchor>
      <arglist>(boost::shared_ptr&lt; DERIVEDFACTOR &gt; factor)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>a9bc0c118e19c269d8e2951183d1c493e</anchor>
      <arglist>(const sharedFactor &amp;factor)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>a243182115ecfb081a1605fea939f86f4</anchor>
      <arglist>(const FACTOR_OR_CONTAINER &amp;factorOrContainer)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>a06c9c6d855c390743bd4a4472c730687</anchor>
      <arglist>(const std::string &amp;s=&quot;FactorGraph&quot;, const KeyFormatter &amp;formatter=DefaultKeyFormatter) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>equals</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>aacdf24691d25e1e93ca6b924465b7a35</anchor>
      <arglist>(const This &amp;fg, double tol=1e-9) const</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>size</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>a76fb453800c9ac164bef864782733403</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>empty</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>a0ed8834089b31ef96888643af4731a8a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const sharedFactor</type>
      <name>at</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>aec104a9847783a29065fd4d24f072b7a</anchor>
      <arglist>(size_t i) const</arglist>
    </member>
    <member kind="function">
      <type>sharedFactor &amp;</type>
      <name>at</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>a643fa29b7e95aab4c80169729492efd1</anchor>
      <arglist>(size_t i)</arglist>
    </member>
    <member kind="function">
      <type>const sharedFactor</type>
      <name>operator[]</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>ad00637b3f124aec8b4047faea5b5647b</anchor>
      <arglist>(size_t i) const</arglist>
    </member>
    <member kind="function">
      <type>sharedFactor &amp;</type>
      <name>operator[]</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>abcc88a56126d4715cc8a7de9ff3c34af</anchor>
      <arglist>(size_t i)</arglist>
    </member>
    <member kind="function">
      <type>const_iterator</type>
      <name>begin</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>abcaeffeae20930806f064f8413689c22</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const_iterator</type>
      <name>end</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>a94a257708f3530799e24d21f3125e181</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>sharedFactor</type>
      <name>front</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>a8aad182ded37c5add184e0113ec9ede9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>sharedFactor</type>
      <name>back</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>a37859ce7d210d593be80f625eceba620</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>begin</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>abaf0875f55936063d96c507de9e9255a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>end</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>ad6e1c6a2b56c2158afb28a58ab560e44</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resize</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>a231dd81b4751a9bccc3c89f35f76961e</anchor>
      <arglist>(size_t size)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>remove</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>a38468469269d7b6530cf4d32b4e462d1</anchor>
      <arglist>(size_t i)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>replace</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>aa706ee0e285f6c1a38e6a4446fe9ea4e</anchor>
      <arglist>(size_t index, sharedFactor factor)</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>erase</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>a22f324974f6e3380c54d1d69c71bc7fb</anchor>
      <arglist>(iterator item)</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>erase</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>a2825a68630a0547e1bfd5ba0cdf1de61</anchor>
      <arglist>(iterator first, iterator last)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reserve</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>afea8c7bf4fd19ccc1547be3a5d1834f6</anchor>
      <arglist>(size_t size)</arglist>
    </member>
    <member kind="function">
      <type>std::enable_if&lt; std::is_base_of&lt; FactorType, DERIVEDFACTOR &gt;::value &gt;::type</type>
      <name>push_back</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>a28fcfc8fcc5ac3068af271a821e31621</anchor>
      <arglist>(boost::shared_ptr&lt; DERIVEDFACTOR &gt; factor)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>push_back</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>aeaa4b43fb9b7111b478d3a96a3aa0e20</anchor>
      <arglist>(const sharedFactor &amp;factor)</arglist>
    </member>
    <member kind="function">
      <type>std::enable_if&lt; std::is_base_of&lt; FactorType, typename ITERATOR::value_type::element_type &gt;::value &gt;::type</type>
      <name>push_back</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>af1158e556a9a5efa64a05667bfcf038b</anchor>
      <arglist>(ITERATOR firstFactor, ITERATOR lastFactor)</arglist>
    </member>
    <member kind="function">
      <type>std::enable_if&lt; std::is_base_of&lt; FactorType, typename CONTAINER::value_type::element_type &gt;::value &gt;::type</type>
      <name>push_back</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>a2b539f79df46e9f5a07b179fc632fd67</anchor>
      <arglist>(const CONTAINER &amp;container)</arglist>
    </member>
    <member kind="function">
      <type>std::enable_if&lt; std::is_base_of&lt; This, typename CLIQUE::FactorGraphType &gt;::value &gt;::type</type>
      <name>push_back</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>a7b06bb023c4e23edc3cff4a3fc6a2906</anchor>
      <arglist>(const BayesTree&lt; CLIQUE &gt; &amp;bayesTree)</arglist>
    </member>
    <member kind="function">
      <type>std::enable_if&lt; std::is_base_of&lt; FactorType, DERIVEDFACTOR &gt;::value &gt;::type</type>
      <name>push_back</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>af2c15ab7a1b0e1a05a80f6ec527eee84</anchor>
      <arglist>(const DERIVEDFACTOR &amp;factor)</arglist>
    </member>
    <member kind="function">
      <type>std::enable_if&lt; std::is_base_of&lt; FactorType, typename ITERATOR::value_type &gt;::value &gt;::type</type>
      <name>push_back</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>a7b0873f24893a29e260ef5199df3cbd7</anchor>
      <arglist>(ITERATOR firstFactor, ITERATOR lastFactor)</arglist>
    </member>
    <member kind="function">
      <type>std::enable_if&lt; std::is_base_of&lt; FactorType, typename CONTAINER::value_type &gt;::value &gt;::type</type>
      <name>push_back</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>a171b2e48cdc4c59479c6c5311118e454</anchor>
      <arglist>(const CONTAINER &amp;container)</arglist>
    </member>
    <member kind="function">
      <type>std::enable_if&lt; std::is_base_of&lt; FactorType, DERIVEDFACTOR &gt;::value &gt;::type</type>
      <name>emplace_shared</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>a8e64fe7be32c2602bb509d18d2bfd491</anchor>
      <arglist>(Args &amp;&amp;... args)</arglist>
    </member>
    <member kind="function">
      <type>std::enable_if&lt; std::is_base_of&lt; FactorType, DERIVEDFACTOR &gt;::value, boost::assign::list_inserter&lt; RefCallPushBack&lt; This &gt; &gt; &gt;::type</type>
      <name>operator+=</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>aff46073025c2e79624602d7a0a5a3183</anchor>
      <arglist>(boost::shared_ptr&lt; DERIVEDFACTOR &gt; factor)</arglist>
    </member>
    <member kind="function">
      <type>boost::assign::list_inserter&lt; CRefCallPushBack&lt; This &gt; &gt;</type>
      <name>operator+=</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>a0584d686cc8431728029c920a2ab08b2</anchor>
      <arglist>(const sharedFactor &amp;factor)</arglist>
    </member>
    <member kind="function">
      <type>boost::assign::list_inserter&lt; CRefCallPushBack&lt; This &gt; &gt;</type>
      <name>operator+=</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>af97f5c19a7ae3f09a60ecb7a05ad2ff3</anchor>
      <arglist>(const FACTOR_OR_CONTAINER &amp;factorOrContainer)</arglist>
    </member>
    <member kind="function">
      <type>std::enable_if&lt; std::is_base_of&lt; FactorType, DERIVEDFACTOR &gt;::value &gt;::type</type>
      <name>add</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>af7cc4c74b62998b22c95cb525bda0547</anchor>
      <arglist>(boost::shared_ptr&lt; DERIVEDFACTOR &gt; factor)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>a9bc0c118e19c269d8e2951183d1c493e</anchor>
      <arglist>(const sharedFactor &amp;factor)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>a243182115ecfb081a1605fea939f86f4</anchor>
      <arglist>(const FACTOR_OR_CONTAINER &amp;factorOrContainer)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>a06c9c6d855c390743bd4a4472c730687</anchor>
      <arglist>(const std::string &amp;s=&quot;FactorGraph&quot;, const KeyFormatter &amp;formatter=DefaultKeyFormatter) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>equals</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>aacdf24691d25e1e93ca6b924465b7a35</anchor>
      <arglist>(const This &amp;fg, double tol=1e-9) const</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>size</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>a76fb453800c9ac164bef864782733403</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>empty</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>a0ed8834089b31ef96888643af4731a8a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const sharedFactor</type>
      <name>at</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>aec104a9847783a29065fd4d24f072b7a</anchor>
      <arglist>(size_t i) const</arglist>
    </member>
    <member kind="function">
      <type>sharedFactor &amp;</type>
      <name>at</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>a643fa29b7e95aab4c80169729492efd1</anchor>
      <arglist>(size_t i)</arglist>
    </member>
    <member kind="function">
      <type>const sharedFactor</type>
      <name>operator[]</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>ad00637b3f124aec8b4047faea5b5647b</anchor>
      <arglist>(size_t i) const</arglist>
    </member>
    <member kind="function">
      <type>sharedFactor &amp;</type>
      <name>operator[]</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>abcc88a56126d4715cc8a7de9ff3c34af</anchor>
      <arglist>(size_t i)</arglist>
    </member>
    <member kind="function">
      <type>const_iterator</type>
      <name>begin</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>abcaeffeae20930806f064f8413689c22</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const_iterator</type>
      <name>end</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>a94a257708f3530799e24d21f3125e181</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>sharedFactor</type>
      <name>front</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>a8aad182ded37c5add184e0113ec9ede9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>sharedFactor</type>
      <name>back</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>a37859ce7d210d593be80f625eceba620</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>begin</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>abaf0875f55936063d96c507de9e9255a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>end</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>ad6e1c6a2b56c2158afb28a58ab560e44</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resize</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>a231dd81b4751a9bccc3c89f35f76961e</anchor>
      <arglist>(size_t size)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>remove</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>a38468469269d7b6530cf4d32b4e462d1</anchor>
      <arglist>(size_t i)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>replace</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>aa706ee0e285f6c1a38e6a4446fe9ea4e</anchor>
      <arglist>(size_t index, sharedFactor factor)</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>erase</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>a22f324974f6e3380c54d1d69c71bc7fb</anchor>
      <arglist>(iterator item)</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>erase</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>a2825a68630a0547e1bfd5ba0cdf1de61</anchor>
      <arglist>(iterator first, iterator last)</arglist>
    </member>
    <member kind="typedef">
      <type>DiscreteConditional</type>
      <name>FactorType</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>aa54fb0b66fd8fee9f3c1f2844cf3edef</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; DiscreteConditional &gt;</type>
      <name>sharedFactor</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>ac9bfc88025d21ff01b7e9dc609ba0b0e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>FactorGraph</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>a42db0a1062eb6c223b0a186a9d34cb4b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>FactorGraph</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>a63a80ba5a22fee5725d0efa75080cdfb</anchor>
      <arglist>(ITERATOR firstFactor, ITERATOR lastFactor)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>FactorGraph</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>a37b5e74d2c3711906f57982b4512351f</anchor>
      <arglist>(const CONTAINER &amp;factors)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>FastVector&lt; sharedFactor &gt;</type>
      <name>factors_</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>ae0c75f68e3ebc37cc4511285b12c33fc</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>FactorGraph&lt; DiscreteFactor &gt;</name>
    <filename>a02887.html</filename>
    <member kind="friend">
      <type>friend class</type>
      <name>boost::serialization::access</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>ac98d07dd8f7b70e16ccb9a01abf56b9c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>nrFactors</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>a761f1022dadf60e2cacca304ab0533b4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>KeySet</type>
      <name>keys</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>a0c4667de76265a06cc6f74b1f3b25051</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>KeyVector</type>
      <name>keyVector</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>a3b4d9bbaceeb9043ab7c20d4778b69c5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>exists</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>acbf8cdf50816d4a0571f6b9b6254f9ce</anchor>
      <arglist>(size_t idx) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>FactorGraph</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>a42db0a1062eb6c223b0a186a9d34cb4b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>FactorGraph</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>a63a80ba5a22fee5725d0efa75080cdfb</anchor>
      <arglist>(ITERATOR firstFactor, ITERATOR lastFactor)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>FactorGraph</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>a37b5e74d2c3711906f57982b4512351f</anchor>
      <arglist>(const CONTAINER &amp;factors)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reserve</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>afea8c7bf4fd19ccc1547be3a5d1834f6</anchor>
      <arglist>(size_t size)</arglist>
    </member>
    <member kind="function">
      <type>std::enable_if&lt; std::is_base_of&lt; FactorType, DERIVEDFACTOR &gt;::value &gt;::type</type>
      <name>push_back</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>a28fcfc8fcc5ac3068af271a821e31621</anchor>
      <arglist>(boost::shared_ptr&lt; DERIVEDFACTOR &gt; factor)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>push_back</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>aeaa4b43fb9b7111b478d3a96a3aa0e20</anchor>
      <arglist>(const sharedFactor &amp;factor)</arglist>
    </member>
    <member kind="function">
      <type>std::enable_if&lt; std::is_base_of&lt; FactorType, typename ITERATOR::value_type::element_type &gt;::value &gt;::type</type>
      <name>push_back</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>af1158e556a9a5efa64a05667bfcf038b</anchor>
      <arglist>(ITERATOR firstFactor, ITERATOR lastFactor)</arglist>
    </member>
    <member kind="function">
      <type>std::enable_if&lt; std::is_base_of&lt; FactorType, typename CONTAINER::value_type::element_type &gt;::value &gt;::type</type>
      <name>push_back</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>a2b539f79df46e9f5a07b179fc632fd67</anchor>
      <arglist>(const CONTAINER &amp;container)</arglist>
    </member>
    <member kind="function">
      <type>std::enable_if&lt; std::is_base_of&lt; This, typename CLIQUE::FactorGraphType &gt;::value &gt;::type</type>
      <name>push_back</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>a7b06bb023c4e23edc3cff4a3fc6a2906</anchor>
      <arglist>(const BayesTree&lt; CLIQUE &gt; &amp;bayesTree)</arglist>
    </member>
    <member kind="function">
      <type>std::enable_if&lt; std::is_base_of&lt; FactorType, DERIVEDFACTOR &gt;::value &gt;::type</type>
      <name>push_back</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>af2c15ab7a1b0e1a05a80f6ec527eee84</anchor>
      <arglist>(const DERIVEDFACTOR &amp;factor)</arglist>
    </member>
    <member kind="function">
      <type>std::enable_if&lt; std::is_base_of&lt; FactorType, typename ITERATOR::value_type &gt;::value &gt;::type</type>
      <name>push_back</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>a7b0873f24893a29e260ef5199df3cbd7</anchor>
      <arglist>(ITERATOR firstFactor, ITERATOR lastFactor)</arglist>
    </member>
    <member kind="function">
      <type>std::enable_if&lt; std::is_base_of&lt; FactorType, typename CONTAINER::value_type &gt;::value &gt;::type</type>
      <name>push_back</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>a171b2e48cdc4c59479c6c5311118e454</anchor>
      <arglist>(const CONTAINER &amp;container)</arglist>
    </member>
    <member kind="function">
      <type>std::enable_if&lt; std::is_base_of&lt; FactorType, DERIVEDFACTOR &gt;::value &gt;::type</type>
      <name>emplace_shared</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>a8e64fe7be32c2602bb509d18d2bfd491</anchor>
      <arglist>(Args &amp;&amp;... args)</arglist>
    </member>
    <member kind="function">
      <type>std::enable_if&lt; std::is_base_of&lt; FactorType, DERIVEDFACTOR &gt;::value, boost::assign::list_inserter&lt; RefCallPushBack&lt; This &gt; &gt; &gt;::type</type>
      <name>operator+=</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>aff46073025c2e79624602d7a0a5a3183</anchor>
      <arglist>(boost::shared_ptr&lt; DERIVEDFACTOR &gt; factor)</arglist>
    </member>
    <member kind="function">
      <type>boost::assign::list_inserter&lt; CRefCallPushBack&lt; This &gt; &gt;</type>
      <name>operator+=</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>a0584d686cc8431728029c920a2ab08b2</anchor>
      <arglist>(const sharedFactor &amp;factor)</arglist>
    </member>
    <member kind="function">
      <type>boost::assign::list_inserter&lt; CRefCallPushBack&lt; This &gt; &gt;</type>
      <name>operator+=</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>af97f5c19a7ae3f09a60ecb7a05ad2ff3</anchor>
      <arglist>(const FACTOR_OR_CONTAINER &amp;factorOrContainer)</arglist>
    </member>
    <member kind="function">
      <type>std::enable_if&lt; std::is_base_of&lt; FactorType, DERIVEDFACTOR &gt;::value &gt;::type</type>
      <name>add</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>af7cc4c74b62998b22c95cb525bda0547</anchor>
      <arglist>(boost::shared_ptr&lt; DERIVEDFACTOR &gt; factor)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>a9bc0c118e19c269d8e2951183d1c493e</anchor>
      <arglist>(const sharedFactor &amp;factor)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>a243182115ecfb081a1605fea939f86f4</anchor>
      <arglist>(const FACTOR_OR_CONTAINER &amp;factorOrContainer)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>a06c9c6d855c390743bd4a4472c730687</anchor>
      <arglist>(const std::string &amp;s=&quot;FactorGraph&quot;, const KeyFormatter &amp;formatter=DefaultKeyFormatter) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>equals</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>aacdf24691d25e1e93ca6b924465b7a35</anchor>
      <arglist>(const This &amp;fg, double tol=1e-9) const</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>size</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>a76fb453800c9ac164bef864782733403</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>empty</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>a0ed8834089b31ef96888643af4731a8a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const sharedFactor</type>
      <name>at</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>aec104a9847783a29065fd4d24f072b7a</anchor>
      <arglist>(size_t i) const</arglist>
    </member>
    <member kind="function">
      <type>sharedFactor &amp;</type>
      <name>at</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>a643fa29b7e95aab4c80169729492efd1</anchor>
      <arglist>(size_t i)</arglist>
    </member>
    <member kind="function">
      <type>const sharedFactor</type>
      <name>operator[]</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>ad00637b3f124aec8b4047faea5b5647b</anchor>
      <arglist>(size_t i) const</arglist>
    </member>
    <member kind="function">
      <type>sharedFactor &amp;</type>
      <name>operator[]</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>abcc88a56126d4715cc8a7de9ff3c34af</anchor>
      <arglist>(size_t i)</arglist>
    </member>
    <member kind="function">
      <type>const_iterator</type>
      <name>begin</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>abcaeffeae20930806f064f8413689c22</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const_iterator</type>
      <name>end</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>a94a257708f3530799e24d21f3125e181</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>sharedFactor</type>
      <name>front</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>a8aad182ded37c5add184e0113ec9ede9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>sharedFactor</type>
      <name>back</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>a37859ce7d210d593be80f625eceba620</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>begin</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>abaf0875f55936063d96c507de9e9255a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>end</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>ad6e1c6a2b56c2158afb28a58ab560e44</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resize</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>a231dd81b4751a9bccc3c89f35f76961e</anchor>
      <arglist>(size_t size)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>remove</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>a38468469269d7b6530cf4d32b4e462d1</anchor>
      <arglist>(size_t i)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>replace</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>aa706ee0e285f6c1a38e6a4446fe9ea4e</anchor>
      <arglist>(size_t index, sharedFactor factor)</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>erase</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>a22f324974f6e3380c54d1d69c71bc7fb</anchor>
      <arglist>(iterator item)</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>erase</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>a2825a68630a0547e1bfd5ba0cdf1de61</anchor>
      <arglist>(iterator first, iterator last)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reserve</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>afea8c7bf4fd19ccc1547be3a5d1834f6</anchor>
      <arglist>(size_t size)</arglist>
    </member>
    <member kind="function">
      <type>std::enable_if&lt; std::is_base_of&lt; FactorType, DERIVEDFACTOR &gt;::value &gt;::type</type>
      <name>push_back</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>a28fcfc8fcc5ac3068af271a821e31621</anchor>
      <arglist>(boost::shared_ptr&lt; DERIVEDFACTOR &gt; factor)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>push_back</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>aeaa4b43fb9b7111b478d3a96a3aa0e20</anchor>
      <arglist>(const sharedFactor &amp;factor)</arglist>
    </member>
    <member kind="function">
      <type>std::enable_if&lt; std::is_base_of&lt; FactorType, typename ITERATOR::value_type::element_type &gt;::value &gt;::type</type>
      <name>push_back</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>af1158e556a9a5efa64a05667bfcf038b</anchor>
      <arglist>(ITERATOR firstFactor, ITERATOR lastFactor)</arglist>
    </member>
    <member kind="function">
      <type>std::enable_if&lt; std::is_base_of&lt; FactorType, typename CONTAINER::value_type::element_type &gt;::value &gt;::type</type>
      <name>push_back</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>a2b539f79df46e9f5a07b179fc632fd67</anchor>
      <arglist>(const CONTAINER &amp;container)</arglist>
    </member>
    <member kind="function">
      <type>std::enable_if&lt; std::is_base_of&lt; This, typename CLIQUE::FactorGraphType &gt;::value &gt;::type</type>
      <name>push_back</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>a7b06bb023c4e23edc3cff4a3fc6a2906</anchor>
      <arglist>(const BayesTree&lt; CLIQUE &gt; &amp;bayesTree)</arglist>
    </member>
    <member kind="function">
      <type>std::enable_if&lt; std::is_base_of&lt; FactorType, DERIVEDFACTOR &gt;::value &gt;::type</type>
      <name>push_back</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>af2c15ab7a1b0e1a05a80f6ec527eee84</anchor>
      <arglist>(const DERIVEDFACTOR &amp;factor)</arglist>
    </member>
    <member kind="function">
      <type>std::enable_if&lt; std::is_base_of&lt; FactorType, typename ITERATOR::value_type &gt;::value &gt;::type</type>
      <name>push_back</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>a7b0873f24893a29e260ef5199df3cbd7</anchor>
      <arglist>(ITERATOR firstFactor, ITERATOR lastFactor)</arglist>
    </member>
    <member kind="function">
      <type>std::enable_if&lt; std::is_base_of&lt; FactorType, typename CONTAINER::value_type &gt;::value &gt;::type</type>
      <name>push_back</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>a171b2e48cdc4c59479c6c5311118e454</anchor>
      <arglist>(const CONTAINER &amp;container)</arglist>
    </member>
    <member kind="function">
      <type>std::enable_if&lt; std::is_base_of&lt; FactorType, DERIVEDFACTOR &gt;::value &gt;::type</type>
      <name>emplace_shared</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>a8e64fe7be32c2602bb509d18d2bfd491</anchor>
      <arglist>(Args &amp;&amp;... args)</arglist>
    </member>
    <member kind="function">
      <type>std::enable_if&lt; std::is_base_of&lt; FactorType, DERIVEDFACTOR &gt;::value, boost::assign::list_inserter&lt; RefCallPushBack&lt; This &gt; &gt; &gt;::type</type>
      <name>operator+=</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>aff46073025c2e79624602d7a0a5a3183</anchor>
      <arglist>(boost::shared_ptr&lt; DERIVEDFACTOR &gt; factor)</arglist>
    </member>
    <member kind="function">
      <type>boost::assign::list_inserter&lt; CRefCallPushBack&lt; This &gt; &gt;</type>
      <name>operator+=</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>a0584d686cc8431728029c920a2ab08b2</anchor>
      <arglist>(const sharedFactor &amp;factor)</arglist>
    </member>
    <member kind="function">
      <type>boost::assign::list_inserter&lt; CRefCallPushBack&lt; This &gt; &gt;</type>
      <name>operator+=</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>af97f5c19a7ae3f09a60ecb7a05ad2ff3</anchor>
      <arglist>(const FACTOR_OR_CONTAINER &amp;factorOrContainer)</arglist>
    </member>
    <member kind="function">
      <type>std::enable_if&lt; std::is_base_of&lt; FactorType, DERIVEDFACTOR &gt;::value &gt;::type</type>
      <name>add</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>af7cc4c74b62998b22c95cb525bda0547</anchor>
      <arglist>(boost::shared_ptr&lt; DERIVEDFACTOR &gt; factor)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>a9bc0c118e19c269d8e2951183d1c493e</anchor>
      <arglist>(const sharedFactor &amp;factor)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>a243182115ecfb081a1605fea939f86f4</anchor>
      <arglist>(const FACTOR_OR_CONTAINER &amp;factorOrContainer)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>a06c9c6d855c390743bd4a4472c730687</anchor>
      <arglist>(const std::string &amp;s=&quot;FactorGraph&quot;, const KeyFormatter &amp;formatter=DefaultKeyFormatter) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>equals</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>aacdf24691d25e1e93ca6b924465b7a35</anchor>
      <arglist>(const This &amp;fg, double tol=1e-9) const</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>size</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>a76fb453800c9ac164bef864782733403</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>empty</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>a0ed8834089b31ef96888643af4731a8a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const sharedFactor</type>
      <name>at</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>aec104a9847783a29065fd4d24f072b7a</anchor>
      <arglist>(size_t i) const</arglist>
    </member>
    <member kind="function">
      <type>sharedFactor &amp;</type>
      <name>at</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>a643fa29b7e95aab4c80169729492efd1</anchor>
      <arglist>(size_t i)</arglist>
    </member>
    <member kind="function">
      <type>const sharedFactor</type>
      <name>operator[]</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>ad00637b3f124aec8b4047faea5b5647b</anchor>
      <arglist>(size_t i) const</arglist>
    </member>
    <member kind="function">
      <type>sharedFactor &amp;</type>
      <name>operator[]</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>abcc88a56126d4715cc8a7de9ff3c34af</anchor>
      <arglist>(size_t i)</arglist>
    </member>
    <member kind="function">
      <type>const_iterator</type>
      <name>begin</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>abcaeffeae20930806f064f8413689c22</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const_iterator</type>
      <name>end</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>a94a257708f3530799e24d21f3125e181</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>sharedFactor</type>
      <name>front</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>a8aad182ded37c5add184e0113ec9ede9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>sharedFactor</type>
      <name>back</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>a37859ce7d210d593be80f625eceba620</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>begin</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>abaf0875f55936063d96c507de9e9255a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>end</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>ad6e1c6a2b56c2158afb28a58ab560e44</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resize</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>a231dd81b4751a9bccc3c89f35f76961e</anchor>
      <arglist>(size_t size)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>remove</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>a38468469269d7b6530cf4d32b4e462d1</anchor>
      <arglist>(size_t i)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>replace</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>aa706ee0e285f6c1a38e6a4446fe9ea4e</anchor>
      <arglist>(size_t index, sharedFactor factor)</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>erase</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>a22f324974f6e3380c54d1d69c71bc7fb</anchor>
      <arglist>(iterator item)</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>erase</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>a2825a68630a0547e1bfd5ba0cdf1de61</anchor>
      <arglist>(iterator first, iterator last)</arglist>
    </member>
    <member kind="typedef">
      <type>DiscreteFactor</type>
      <name>FactorType</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>aa54fb0b66fd8fee9f3c1f2844cf3edef</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; DiscreteFactor &gt;</type>
      <name>sharedFactor</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>ac9bfc88025d21ff01b7e9dc609ba0b0e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>FactorGraph</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>a42db0a1062eb6c223b0a186a9d34cb4b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>FactorGraph</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>a63a80ba5a22fee5725d0efa75080cdfb</anchor>
      <arglist>(ITERATOR firstFactor, ITERATOR lastFactor)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>FactorGraph</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>a37b5e74d2c3711906f57982b4512351f</anchor>
      <arglist>(const CONTAINER &amp;factors)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>FastVector&lt; sharedFactor &gt;</type>
      <name>factors_</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>ae0c75f68e3ebc37cc4511285b12c33fc</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>FactorGraph&lt; Factor &gt;</name>
    <filename>a02887.html</filename>
    <member kind="friend">
      <type>friend class</type>
      <name>boost::serialization::access</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>ac98d07dd8f7b70e16ccb9a01abf56b9c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>nrFactors</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>a761f1022dadf60e2cacca304ab0533b4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>KeySet</type>
      <name>keys</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>a0c4667de76265a06cc6f74b1f3b25051</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>KeyVector</type>
      <name>keyVector</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>a3b4d9bbaceeb9043ab7c20d4778b69c5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>exists</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>acbf8cdf50816d4a0571f6b9b6254f9ce</anchor>
      <arglist>(size_t idx) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>FactorGraph</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>a42db0a1062eb6c223b0a186a9d34cb4b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>FactorGraph</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>a63a80ba5a22fee5725d0efa75080cdfb</anchor>
      <arglist>(ITERATOR firstFactor, ITERATOR lastFactor)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>FactorGraph</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>a37b5e74d2c3711906f57982b4512351f</anchor>
      <arglist>(const CONTAINER &amp;factors)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reserve</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>afea8c7bf4fd19ccc1547be3a5d1834f6</anchor>
      <arglist>(size_t size)</arglist>
    </member>
    <member kind="function">
      <type>std::enable_if&lt; std::is_base_of&lt; FactorType, DERIVEDFACTOR &gt;::value &gt;::type</type>
      <name>push_back</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>a28fcfc8fcc5ac3068af271a821e31621</anchor>
      <arglist>(boost::shared_ptr&lt; DERIVEDFACTOR &gt; factor)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>push_back</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>aeaa4b43fb9b7111b478d3a96a3aa0e20</anchor>
      <arglist>(const sharedFactor &amp;factor)</arglist>
    </member>
    <member kind="function">
      <type>std::enable_if&lt; std::is_base_of&lt; FactorType, typename ITERATOR::value_type::element_type &gt;::value &gt;::type</type>
      <name>push_back</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>af1158e556a9a5efa64a05667bfcf038b</anchor>
      <arglist>(ITERATOR firstFactor, ITERATOR lastFactor)</arglist>
    </member>
    <member kind="function">
      <type>std::enable_if&lt; std::is_base_of&lt; FactorType, typename CONTAINER::value_type::element_type &gt;::value &gt;::type</type>
      <name>push_back</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>a2b539f79df46e9f5a07b179fc632fd67</anchor>
      <arglist>(const CONTAINER &amp;container)</arglist>
    </member>
    <member kind="function">
      <type>std::enable_if&lt; std::is_base_of&lt; This, typename CLIQUE::FactorGraphType &gt;::value &gt;::type</type>
      <name>push_back</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>a7b06bb023c4e23edc3cff4a3fc6a2906</anchor>
      <arglist>(const BayesTree&lt; CLIQUE &gt; &amp;bayesTree)</arglist>
    </member>
    <member kind="function">
      <type>std::enable_if&lt; std::is_base_of&lt; FactorType, DERIVEDFACTOR &gt;::value &gt;::type</type>
      <name>push_back</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>af2c15ab7a1b0e1a05a80f6ec527eee84</anchor>
      <arglist>(const DERIVEDFACTOR &amp;factor)</arglist>
    </member>
    <member kind="function">
      <type>std::enable_if&lt; std::is_base_of&lt; FactorType, typename ITERATOR::value_type &gt;::value &gt;::type</type>
      <name>push_back</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>a7b0873f24893a29e260ef5199df3cbd7</anchor>
      <arglist>(ITERATOR firstFactor, ITERATOR lastFactor)</arglist>
    </member>
    <member kind="function">
      <type>std::enable_if&lt; std::is_base_of&lt; FactorType, typename CONTAINER::value_type &gt;::value &gt;::type</type>
      <name>push_back</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>a171b2e48cdc4c59479c6c5311118e454</anchor>
      <arglist>(const CONTAINER &amp;container)</arglist>
    </member>
    <member kind="function">
      <type>std::enable_if&lt; std::is_base_of&lt; FactorType, DERIVEDFACTOR &gt;::value &gt;::type</type>
      <name>emplace_shared</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>a8e64fe7be32c2602bb509d18d2bfd491</anchor>
      <arglist>(Args &amp;&amp;... args)</arglist>
    </member>
    <member kind="function">
      <type>std::enable_if&lt; std::is_base_of&lt; FactorType, DERIVEDFACTOR &gt;::value, boost::assign::list_inserter&lt; RefCallPushBack&lt; This &gt; &gt; &gt;::type</type>
      <name>operator+=</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>aff46073025c2e79624602d7a0a5a3183</anchor>
      <arglist>(boost::shared_ptr&lt; DERIVEDFACTOR &gt; factor)</arglist>
    </member>
    <member kind="function">
      <type>boost::assign::list_inserter&lt; CRefCallPushBack&lt; This &gt; &gt;</type>
      <name>operator+=</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>a0584d686cc8431728029c920a2ab08b2</anchor>
      <arglist>(const sharedFactor &amp;factor)</arglist>
    </member>
    <member kind="function">
      <type>boost::assign::list_inserter&lt; CRefCallPushBack&lt; This &gt; &gt;</type>
      <name>operator+=</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>af97f5c19a7ae3f09a60ecb7a05ad2ff3</anchor>
      <arglist>(const FACTOR_OR_CONTAINER &amp;factorOrContainer)</arglist>
    </member>
    <member kind="function">
      <type>std::enable_if&lt; std::is_base_of&lt; FactorType, DERIVEDFACTOR &gt;::value &gt;::type</type>
      <name>add</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>af7cc4c74b62998b22c95cb525bda0547</anchor>
      <arglist>(boost::shared_ptr&lt; DERIVEDFACTOR &gt; factor)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>a9bc0c118e19c269d8e2951183d1c493e</anchor>
      <arglist>(const sharedFactor &amp;factor)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>a243182115ecfb081a1605fea939f86f4</anchor>
      <arglist>(const FACTOR_OR_CONTAINER &amp;factorOrContainer)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>a06c9c6d855c390743bd4a4472c730687</anchor>
      <arglist>(const std::string &amp;s=&quot;FactorGraph&quot;, const KeyFormatter &amp;formatter=DefaultKeyFormatter) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>equals</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>aacdf24691d25e1e93ca6b924465b7a35</anchor>
      <arglist>(const This &amp;fg, double tol=1e-9) const</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>size</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>a76fb453800c9ac164bef864782733403</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>empty</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>a0ed8834089b31ef96888643af4731a8a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const sharedFactor</type>
      <name>at</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>aec104a9847783a29065fd4d24f072b7a</anchor>
      <arglist>(size_t i) const</arglist>
    </member>
    <member kind="function">
      <type>sharedFactor &amp;</type>
      <name>at</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>a643fa29b7e95aab4c80169729492efd1</anchor>
      <arglist>(size_t i)</arglist>
    </member>
    <member kind="function">
      <type>const sharedFactor</type>
      <name>operator[]</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>ad00637b3f124aec8b4047faea5b5647b</anchor>
      <arglist>(size_t i) const</arglist>
    </member>
    <member kind="function">
      <type>sharedFactor &amp;</type>
      <name>operator[]</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>abcc88a56126d4715cc8a7de9ff3c34af</anchor>
      <arglist>(size_t i)</arglist>
    </member>
    <member kind="function">
      <type>const_iterator</type>
      <name>begin</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>abcaeffeae20930806f064f8413689c22</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const_iterator</type>
      <name>end</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>a94a257708f3530799e24d21f3125e181</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>sharedFactor</type>
      <name>front</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>a8aad182ded37c5add184e0113ec9ede9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>sharedFactor</type>
      <name>back</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>a37859ce7d210d593be80f625eceba620</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>begin</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>abaf0875f55936063d96c507de9e9255a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>end</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>ad6e1c6a2b56c2158afb28a58ab560e44</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resize</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>a231dd81b4751a9bccc3c89f35f76961e</anchor>
      <arglist>(size_t size)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>remove</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>a38468469269d7b6530cf4d32b4e462d1</anchor>
      <arglist>(size_t i)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>replace</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>aa706ee0e285f6c1a38e6a4446fe9ea4e</anchor>
      <arglist>(size_t index, sharedFactor factor)</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>erase</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>a22f324974f6e3380c54d1d69c71bc7fb</anchor>
      <arglist>(iterator item)</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>erase</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>a2825a68630a0547e1bfd5ba0cdf1de61</anchor>
      <arglist>(iterator first, iterator last)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reserve</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>afea8c7bf4fd19ccc1547be3a5d1834f6</anchor>
      <arglist>(size_t size)</arglist>
    </member>
    <member kind="function">
      <type>std::enable_if&lt; std::is_base_of&lt; FactorType, DERIVEDFACTOR &gt;::value &gt;::type</type>
      <name>push_back</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>a28fcfc8fcc5ac3068af271a821e31621</anchor>
      <arglist>(boost::shared_ptr&lt; DERIVEDFACTOR &gt; factor)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>push_back</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>aeaa4b43fb9b7111b478d3a96a3aa0e20</anchor>
      <arglist>(const sharedFactor &amp;factor)</arglist>
    </member>
    <member kind="function">
      <type>std::enable_if&lt; std::is_base_of&lt; FactorType, typename ITERATOR::value_type::element_type &gt;::value &gt;::type</type>
      <name>push_back</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>af1158e556a9a5efa64a05667bfcf038b</anchor>
      <arglist>(ITERATOR firstFactor, ITERATOR lastFactor)</arglist>
    </member>
    <member kind="function">
      <type>std::enable_if&lt; std::is_base_of&lt; FactorType, typename CONTAINER::value_type::element_type &gt;::value &gt;::type</type>
      <name>push_back</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>a2b539f79df46e9f5a07b179fc632fd67</anchor>
      <arglist>(const CONTAINER &amp;container)</arglist>
    </member>
    <member kind="function">
      <type>std::enable_if&lt; std::is_base_of&lt; This, typename CLIQUE::FactorGraphType &gt;::value &gt;::type</type>
      <name>push_back</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>a7b06bb023c4e23edc3cff4a3fc6a2906</anchor>
      <arglist>(const BayesTree&lt; CLIQUE &gt; &amp;bayesTree)</arglist>
    </member>
    <member kind="function">
      <type>std::enable_if&lt; std::is_base_of&lt; FactorType, DERIVEDFACTOR &gt;::value &gt;::type</type>
      <name>push_back</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>af2c15ab7a1b0e1a05a80f6ec527eee84</anchor>
      <arglist>(const DERIVEDFACTOR &amp;factor)</arglist>
    </member>
    <member kind="function">
      <type>std::enable_if&lt; std::is_base_of&lt; FactorType, typename ITERATOR::value_type &gt;::value &gt;::type</type>
      <name>push_back</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>a7b0873f24893a29e260ef5199df3cbd7</anchor>
      <arglist>(ITERATOR firstFactor, ITERATOR lastFactor)</arglist>
    </member>
    <member kind="function">
      <type>std::enable_if&lt; std::is_base_of&lt; FactorType, typename CONTAINER::value_type &gt;::value &gt;::type</type>
      <name>push_back</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>a171b2e48cdc4c59479c6c5311118e454</anchor>
      <arglist>(const CONTAINER &amp;container)</arglist>
    </member>
    <member kind="function">
      <type>std::enable_if&lt; std::is_base_of&lt; FactorType, DERIVEDFACTOR &gt;::value &gt;::type</type>
      <name>emplace_shared</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>a8e64fe7be32c2602bb509d18d2bfd491</anchor>
      <arglist>(Args &amp;&amp;... args)</arglist>
    </member>
    <member kind="function">
      <type>std::enable_if&lt; std::is_base_of&lt; FactorType, DERIVEDFACTOR &gt;::value, boost::assign::list_inserter&lt; RefCallPushBack&lt; This &gt; &gt; &gt;::type</type>
      <name>operator+=</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>aff46073025c2e79624602d7a0a5a3183</anchor>
      <arglist>(boost::shared_ptr&lt; DERIVEDFACTOR &gt; factor)</arglist>
    </member>
    <member kind="function">
      <type>boost::assign::list_inserter&lt; CRefCallPushBack&lt; This &gt; &gt;</type>
      <name>operator+=</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>a0584d686cc8431728029c920a2ab08b2</anchor>
      <arglist>(const sharedFactor &amp;factor)</arglist>
    </member>
    <member kind="function">
      <type>boost::assign::list_inserter&lt; CRefCallPushBack&lt; This &gt; &gt;</type>
      <name>operator+=</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>af97f5c19a7ae3f09a60ecb7a05ad2ff3</anchor>
      <arglist>(const FACTOR_OR_CONTAINER &amp;factorOrContainer)</arglist>
    </member>
    <member kind="function">
      <type>std::enable_if&lt; std::is_base_of&lt; FactorType, DERIVEDFACTOR &gt;::value &gt;::type</type>
      <name>add</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>af7cc4c74b62998b22c95cb525bda0547</anchor>
      <arglist>(boost::shared_ptr&lt; DERIVEDFACTOR &gt; factor)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>a9bc0c118e19c269d8e2951183d1c493e</anchor>
      <arglist>(const sharedFactor &amp;factor)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>a243182115ecfb081a1605fea939f86f4</anchor>
      <arglist>(const FACTOR_OR_CONTAINER &amp;factorOrContainer)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>a06c9c6d855c390743bd4a4472c730687</anchor>
      <arglist>(const std::string &amp;s=&quot;FactorGraph&quot;, const KeyFormatter &amp;formatter=DefaultKeyFormatter) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>equals</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>aacdf24691d25e1e93ca6b924465b7a35</anchor>
      <arglist>(const This &amp;fg, double tol=1e-9) const</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>size</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>a76fb453800c9ac164bef864782733403</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>empty</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>a0ed8834089b31ef96888643af4731a8a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const sharedFactor</type>
      <name>at</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>aec104a9847783a29065fd4d24f072b7a</anchor>
      <arglist>(size_t i) const</arglist>
    </member>
    <member kind="function">
      <type>sharedFactor &amp;</type>
      <name>at</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>a643fa29b7e95aab4c80169729492efd1</anchor>
      <arglist>(size_t i)</arglist>
    </member>
    <member kind="function">
      <type>const sharedFactor</type>
      <name>operator[]</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>ad00637b3f124aec8b4047faea5b5647b</anchor>
      <arglist>(size_t i) const</arglist>
    </member>
    <member kind="function">
      <type>sharedFactor &amp;</type>
      <name>operator[]</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>abcc88a56126d4715cc8a7de9ff3c34af</anchor>
      <arglist>(size_t i)</arglist>
    </member>
    <member kind="function">
      <type>const_iterator</type>
      <name>begin</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>abcaeffeae20930806f064f8413689c22</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const_iterator</type>
      <name>end</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>a94a257708f3530799e24d21f3125e181</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>sharedFactor</type>
      <name>front</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>a8aad182ded37c5add184e0113ec9ede9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>sharedFactor</type>
      <name>back</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>a37859ce7d210d593be80f625eceba620</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>begin</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>abaf0875f55936063d96c507de9e9255a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>end</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>ad6e1c6a2b56c2158afb28a58ab560e44</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resize</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>a231dd81b4751a9bccc3c89f35f76961e</anchor>
      <arglist>(size_t size)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>remove</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>a38468469269d7b6530cf4d32b4e462d1</anchor>
      <arglist>(size_t i)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>replace</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>aa706ee0e285f6c1a38e6a4446fe9ea4e</anchor>
      <arglist>(size_t index, sharedFactor factor)</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>erase</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>a22f324974f6e3380c54d1d69c71bc7fb</anchor>
      <arglist>(iterator item)</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>erase</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>a2825a68630a0547e1bfd5ba0cdf1de61</anchor>
      <arglist>(iterator first, iterator last)</arglist>
    </member>
    <member kind="typedef">
      <type>Factor</type>
      <name>FactorType</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>aa54fb0b66fd8fee9f3c1f2844cf3edef</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; Factor &gt;</type>
      <name>sharedFactor</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>ac9bfc88025d21ff01b7e9dc609ba0b0e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>FactorGraph</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>a42db0a1062eb6c223b0a186a9d34cb4b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>FactorGraph</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>a63a80ba5a22fee5725d0efa75080cdfb</anchor>
      <arglist>(ITERATOR firstFactor, ITERATOR lastFactor)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>FactorGraph</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>a37b5e74d2c3711906f57982b4512351f</anchor>
      <arglist>(const CONTAINER &amp;factors)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>FastVector&lt; sharedFactor &gt;</type>
      <name>factors_</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>ae0c75f68e3ebc37cc4511285b12c33fc</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>FactorGraph&lt; GaussianConditional &gt;</name>
    <filename>a02887.html</filename>
    <member kind="friend">
      <type>friend class</type>
      <name>boost::serialization::access</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>ac98d07dd8f7b70e16ccb9a01abf56b9c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>nrFactors</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>a761f1022dadf60e2cacca304ab0533b4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>KeySet</type>
      <name>keys</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>a0c4667de76265a06cc6f74b1f3b25051</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>KeyVector</type>
      <name>keyVector</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>a3b4d9bbaceeb9043ab7c20d4778b69c5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>exists</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>acbf8cdf50816d4a0571f6b9b6254f9ce</anchor>
      <arglist>(size_t idx) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>FactorGraph</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>a42db0a1062eb6c223b0a186a9d34cb4b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>FactorGraph</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>a63a80ba5a22fee5725d0efa75080cdfb</anchor>
      <arglist>(ITERATOR firstFactor, ITERATOR lastFactor)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>FactorGraph</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>a37b5e74d2c3711906f57982b4512351f</anchor>
      <arglist>(const CONTAINER &amp;factors)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reserve</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>afea8c7bf4fd19ccc1547be3a5d1834f6</anchor>
      <arglist>(size_t size)</arglist>
    </member>
    <member kind="function">
      <type>std::enable_if&lt; std::is_base_of&lt; FactorType, DERIVEDFACTOR &gt;::value &gt;::type</type>
      <name>push_back</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>a28fcfc8fcc5ac3068af271a821e31621</anchor>
      <arglist>(boost::shared_ptr&lt; DERIVEDFACTOR &gt; factor)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>push_back</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>aeaa4b43fb9b7111b478d3a96a3aa0e20</anchor>
      <arglist>(const sharedFactor &amp;factor)</arglist>
    </member>
    <member kind="function">
      <type>std::enable_if&lt; std::is_base_of&lt; FactorType, typename ITERATOR::value_type::element_type &gt;::value &gt;::type</type>
      <name>push_back</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>af1158e556a9a5efa64a05667bfcf038b</anchor>
      <arglist>(ITERATOR firstFactor, ITERATOR lastFactor)</arglist>
    </member>
    <member kind="function">
      <type>std::enable_if&lt; std::is_base_of&lt; FactorType, typename CONTAINER::value_type::element_type &gt;::value &gt;::type</type>
      <name>push_back</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>a2b539f79df46e9f5a07b179fc632fd67</anchor>
      <arglist>(const CONTAINER &amp;container)</arglist>
    </member>
    <member kind="function">
      <type>std::enable_if&lt; std::is_base_of&lt; This, typename CLIQUE::FactorGraphType &gt;::value &gt;::type</type>
      <name>push_back</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>a7b06bb023c4e23edc3cff4a3fc6a2906</anchor>
      <arglist>(const BayesTree&lt; CLIQUE &gt; &amp;bayesTree)</arglist>
    </member>
    <member kind="function">
      <type>std::enable_if&lt; std::is_base_of&lt; FactorType, DERIVEDFACTOR &gt;::value &gt;::type</type>
      <name>push_back</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>af2c15ab7a1b0e1a05a80f6ec527eee84</anchor>
      <arglist>(const DERIVEDFACTOR &amp;factor)</arglist>
    </member>
    <member kind="function">
      <type>std::enable_if&lt; std::is_base_of&lt; FactorType, typename ITERATOR::value_type &gt;::value &gt;::type</type>
      <name>push_back</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>a7b0873f24893a29e260ef5199df3cbd7</anchor>
      <arglist>(ITERATOR firstFactor, ITERATOR lastFactor)</arglist>
    </member>
    <member kind="function">
      <type>std::enable_if&lt; std::is_base_of&lt; FactorType, typename CONTAINER::value_type &gt;::value &gt;::type</type>
      <name>push_back</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>a171b2e48cdc4c59479c6c5311118e454</anchor>
      <arglist>(const CONTAINER &amp;container)</arglist>
    </member>
    <member kind="function">
      <type>std::enable_if&lt; std::is_base_of&lt; FactorType, DERIVEDFACTOR &gt;::value &gt;::type</type>
      <name>emplace_shared</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>a8e64fe7be32c2602bb509d18d2bfd491</anchor>
      <arglist>(Args &amp;&amp;... args)</arglist>
    </member>
    <member kind="function">
      <type>std::enable_if&lt; std::is_base_of&lt; FactorType, DERIVEDFACTOR &gt;::value, boost::assign::list_inserter&lt; RefCallPushBack&lt; This &gt; &gt; &gt;::type</type>
      <name>operator+=</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>aff46073025c2e79624602d7a0a5a3183</anchor>
      <arglist>(boost::shared_ptr&lt; DERIVEDFACTOR &gt; factor)</arglist>
    </member>
    <member kind="function">
      <type>boost::assign::list_inserter&lt; CRefCallPushBack&lt; This &gt; &gt;</type>
      <name>operator+=</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>a0584d686cc8431728029c920a2ab08b2</anchor>
      <arglist>(const sharedFactor &amp;factor)</arglist>
    </member>
    <member kind="function">
      <type>boost::assign::list_inserter&lt; CRefCallPushBack&lt; This &gt; &gt;</type>
      <name>operator+=</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>af97f5c19a7ae3f09a60ecb7a05ad2ff3</anchor>
      <arglist>(const FACTOR_OR_CONTAINER &amp;factorOrContainer)</arglist>
    </member>
    <member kind="function">
      <type>std::enable_if&lt; std::is_base_of&lt; FactorType, DERIVEDFACTOR &gt;::value &gt;::type</type>
      <name>add</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>af7cc4c74b62998b22c95cb525bda0547</anchor>
      <arglist>(boost::shared_ptr&lt; DERIVEDFACTOR &gt; factor)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>a9bc0c118e19c269d8e2951183d1c493e</anchor>
      <arglist>(const sharedFactor &amp;factor)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>a243182115ecfb081a1605fea939f86f4</anchor>
      <arglist>(const FACTOR_OR_CONTAINER &amp;factorOrContainer)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>a06c9c6d855c390743bd4a4472c730687</anchor>
      <arglist>(const std::string &amp;s=&quot;FactorGraph&quot;, const KeyFormatter &amp;formatter=DefaultKeyFormatter) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>equals</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>aacdf24691d25e1e93ca6b924465b7a35</anchor>
      <arglist>(const This &amp;fg, double tol=1e-9) const</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>size</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>a76fb453800c9ac164bef864782733403</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>empty</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>a0ed8834089b31ef96888643af4731a8a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const sharedFactor</type>
      <name>at</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>aec104a9847783a29065fd4d24f072b7a</anchor>
      <arglist>(size_t i) const</arglist>
    </member>
    <member kind="function">
      <type>sharedFactor &amp;</type>
      <name>at</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>a643fa29b7e95aab4c80169729492efd1</anchor>
      <arglist>(size_t i)</arglist>
    </member>
    <member kind="function">
      <type>const sharedFactor</type>
      <name>operator[]</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>ad00637b3f124aec8b4047faea5b5647b</anchor>
      <arglist>(size_t i) const</arglist>
    </member>
    <member kind="function">
      <type>sharedFactor &amp;</type>
      <name>operator[]</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>abcc88a56126d4715cc8a7de9ff3c34af</anchor>
      <arglist>(size_t i)</arglist>
    </member>
    <member kind="function">
      <type>const_iterator</type>
      <name>begin</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>abcaeffeae20930806f064f8413689c22</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const_iterator</type>
      <name>end</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>a94a257708f3530799e24d21f3125e181</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>sharedFactor</type>
      <name>front</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>a8aad182ded37c5add184e0113ec9ede9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>sharedFactor</type>
      <name>back</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>a37859ce7d210d593be80f625eceba620</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>begin</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>abaf0875f55936063d96c507de9e9255a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>end</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>ad6e1c6a2b56c2158afb28a58ab560e44</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resize</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>a231dd81b4751a9bccc3c89f35f76961e</anchor>
      <arglist>(size_t size)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>remove</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>a38468469269d7b6530cf4d32b4e462d1</anchor>
      <arglist>(size_t i)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>replace</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>aa706ee0e285f6c1a38e6a4446fe9ea4e</anchor>
      <arglist>(size_t index, sharedFactor factor)</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>erase</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>a22f324974f6e3380c54d1d69c71bc7fb</anchor>
      <arglist>(iterator item)</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>erase</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>a2825a68630a0547e1bfd5ba0cdf1de61</anchor>
      <arglist>(iterator first, iterator last)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reserve</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>afea8c7bf4fd19ccc1547be3a5d1834f6</anchor>
      <arglist>(size_t size)</arglist>
    </member>
    <member kind="function">
      <type>std::enable_if&lt; std::is_base_of&lt; FactorType, DERIVEDFACTOR &gt;::value &gt;::type</type>
      <name>push_back</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>a28fcfc8fcc5ac3068af271a821e31621</anchor>
      <arglist>(boost::shared_ptr&lt; DERIVEDFACTOR &gt; factor)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>push_back</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>aeaa4b43fb9b7111b478d3a96a3aa0e20</anchor>
      <arglist>(const sharedFactor &amp;factor)</arglist>
    </member>
    <member kind="function">
      <type>std::enable_if&lt; std::is_base_of&lt; FactorType, typename ITERATOR::value_type::element_type &gt;::value &gt;::type</type>
      <name>push_back</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>af1158e556a9a5efa64a05667bfcf038b</anchor>
      <arglist>(ITERATOR firstFactor, ITERATOR lastFactor)</arglist>
    </member>
    <member kind="function">
      <type>std::enable_if&lt; std::is_base_of&lt; FactorType, typename CONTAINER::value_type::element_type &gt;::value &gt;::type</type>
      <name>push_back</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>a2b539f79df46e9f5a07b179fc632fd67</anchor>
      <arglist>(const CONTAINER &amp;container)</arglist>
    </member>
    <member kind="function">
      <type>std::enable_if&lt; std::is_base_of&lt; This, typename CLIQUE::FactorGraphType &gt;::value &gt;::type</type>
      <name>push_back</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>a7b06bb023c4e23edc3cff4a3fc6a2906</anchor>
      <arglist>(const BayesTree&lt; CLIQUE &gt; &amp;bayesTree)</arglist>
    </member>
    <member kind="function">
      <type>std::enable_if&lt; std::is_base_of&lt; FactorType, DERIVEDFACTOR &gt;::value &gt;::type</type>
      <name>push_back</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>af2c15ab7a1b0e1a05a80f6ec527eee84</anchor>
      <arglist>(const DERIVEDFACTOR &amp;factor)</arglist>
    </member>
    <member kind="function">
      <type>std::enable_if&lt; std::is_base_of&lt; FactorType, typename ITERATOR::value_type &gt;::value &gt;::type</type>
      <name>push_back</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>a7b0873f24893a29e260ef5199df3cbd7</anchor>
      <arglist>(ITERATOR firstFactor, ITERATOR lastFactor)</arglist>
    </member>
    <member kind="function">
      <type>std::enable_if&lt; std::is_base_of&lt; FactorType, typename CONTAINER::value_type &gt;::value &gt;::type</type>
      <name>push_back</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>a171b2e48cdc4c59479c6c5311118e454</anchor>
      <arglist>(const CONTAINER &amp;container)</arglist>
    </member>
    <member kind="function">
      <type>std::enable_if&lt; std::is_base_of&lt; FactorType, DERIVEDFACTOR &gt;::value &gt;::type</type>
      <name>emplace_shared</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>a8e64fe7be32c2602bb509d18d2bfd491</anchor>
      <arglist>(Args &amp;&amp;... args)</arglist>
    </member>
    <member kind="function">
      <type>std::enable_if&lt; std::is_base_of&lt; FactorType, DERIVEDFACTOR &gt;::value, boost::assign::list_inserter&lt; RefCallPushBack&lt; This &gt; &gt; &gt;::type</type>
      <name>operator+=</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>aff46073025c2e79624602d7a0a5a3183</anchor>
      <arglist>(boost::shared_ptr&lt; DERIVEDFACTOR &gt; factor)</arglist>
    </member>
    <member kind="function">
      <type>boost::assign::list_inserter&lt; CRefCallPushBack&lt; This &gt; &gt;</type>
      <name>operator+=</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>a0584d686cc8431728029c920a2ab08b2</anchor>
      <arglist>(const sharedFactor &amp;factor)</arglist>
    </member>
    <member kind="function">
      <type>boost::assign::list_inserter&lt; CRefCallPushBack&lt; This &gt; &gt;</type>
      <name>operator+=</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>af97f5c19a7ae3f09a60ecb7a05ad2ff3</anchor>
      <arglist>(const FACTOR_OR_CONTAINER &amp;factorOrContainer)</arglist>
    </member>
    <member kind="function">
      <type>std::enable_if&lt; std::is_base_of&lt; FactorType, DERIVEDFACTOR &gt;::value &gt;::type</type>
      <name>add</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>af7cc4c74b62998b22c95cb525bda0547</anchor>
      <arglist>(boost::shared_ptr&lt; DERIVEDFACTOR &gt; factor)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>a9bc0c118e19c269d8e2951183d1c493e</anchor>
      <arglist>(const sharedFactor &amp;factor)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>a243182115ecfb081a1605fea939f86f4</anchor>
      <arglist>(const FACTOR_OR_CONTAINER &amp;factorOrContainer)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>a06c9c6d855c390743bd4a4472c730687</anchor>
      <arglist>(const std::string &amp;s=&quot;FactorGraph&quot;, const KeyFormatter &amp;formatter=DefaultKeyFormatter) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>equals</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>aacdf24691d25e1e93ca6b924465b7a35</anchor>
      <arglist>(const This &amp;fg, double tol=1e-9) const</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>size</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>a76fb453800c9ac164bef864782733403</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>empty</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>a0ed8834089b31ef96888643af4731a8a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const sharedFactor</type>
      <name>at</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>aec104a9847783a29065fd4d24f072b7a</anchor>
      <arglist>(size_t i) const</arglist>
    </member>
    <member kind="function">
      <type>sharedFactor &amp;</type>
      <name>at</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>a643fa29b7e95aab4c80169729492efd1</anchor>
      <arglist>(size_t i)</arglist>
    </member>
    <member kind="function">
      <type>const sharedFactor</type>
      <name>operator[]</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>ad00637b3f124aec8b4047faea5b5647b</anchor>
      <arglist>(size_t i) const</arglist>
    </member>
    <member kind="function">
      <type>sharedFactor &amp;</type>
      <name>operator[]</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>abcc88a56126d4715cc8a7de9ff3c34af</anchor>
      <arglist>(size_t i)</arglist>
    </member>
    <member kind="function">
      <type>const_iterator</type>
      <name>begin</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>abcaeffeae20930806f064f8413689c22</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const_iterator</type>
      <name>end</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>a94a257708f3530799e24d21f3125e181</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>sharedFactor</type>
      <name>front</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>a8aad182ded37c5add184e0113ec9ede9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>sharedFactor</type>
      <name>back</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>a37859ce7d210d593be80f625eceba620</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>begin</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>abaf0875f55936063d96c507de9e9255a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>end</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>ad6e1c6a2b56c2158afb28a58ab560e44</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resize</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>a231dd81b4751a9bccc3c89f35f76961e</anchor>
      <arglist>(size_t size)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>remove</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>a38468469269d7b6530cf4d32b4e462d1</anchor>
      <arglist>(size_t i)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>replace</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>aa706ee0e285f6c1a38e6a4446fe9ea4e</anchor>
      <arglist>(size_t index, sharedFactor factor)</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>erase</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>a22f324974f6e3380c54d1d69c71bc7fb</anchor>
      <arglist>(iterator item)</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>erase</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>a2825a68630a0547e1bfd5ba0cdf1de61</anchor>
      <arglist>(iterator first, iterator last)</arglist>
    </member>
    <member kind="typedef">
      <type>GaussianConditional</type>
      <name>FactorType</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>aa54fb0b66fd8fee9f3c1f2844cf3edef</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; GaussianConditional &gt;</type>
      <name>sharedFactor</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>ac9bfc88025d21ff01b7e9dc609ba0b0e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>FactorGraph</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>a42db0a1062eb6c223b0a186a9d34cb4b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>FactorGraph</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>a63a80ba5a22fee5725d0efa75080cdfb</anchor>
      <arglist>(ITERATOR firstFactor, ITERATOR lastFactor)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>FactorGraph</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>a37b5e74d2c3711906f57982b4512351f</anchor>
      <arglist>(const CONTAINER &amp;factors)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>FastVector&lt; sharedFactor &gt;</type>
      <name>factors_</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>ae0c75f68e3ebc37cc4511285b12c33fc</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>FactorGraph&lt; GaussianFactor &gt;</name>
    <filename>a02887.html</filename>
    <member kind="friend">
      <type>friend class</type>
      <name>boost::serialization::access</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>ac98d07dd8f7b70e16ccb9a01abf56b9c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>nrFactors</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>a761f1022dadf60e2cacca304ab0533b4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>KeySet</type>
      <name>keys</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>a0c4667de76265a06cc6f74b1f3b25051</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>KeyVector</type>
      <name>keyVector</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>a3b4d9bbaceeb9043ab7c20d4778b69c5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>exists</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>acbf8cdf50816d4a0571f6b9b6254f9ce</anchor>
      <arglist>(size_t idx) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>FactorGraph</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>a42db0a1062eb6c223b0a186a9d34cb4b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>FactorGraph</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>a63a80ba5a22fee5725d0efa75080cdfb</anchor>
      <arglist>(ITERATOR firstFactor, ITERATOR lastFactor)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>FactorGraph</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>a37b5e74d2c3711906f57982b4512351f</anchor>
      <arglist>(const CONTAINER &amp;factors)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reserve</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>afea8c7bf4fd19ccc1547be3a5d1834f6</anchor>
      <arglist>(size_t size)</arglist>
    </member>
    <member kind="function">
      <type>std::enable_if&lt; std::is_base_of&lt; FactorType, DERIVEDFACTOR &gt;::value &gt;::type</type>
      <name>push_back</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>a28fcfc8fcc5ac3068af271a821e31621</anchor>
      <arglist>(boost::shared_ptr&lt; DERIVEDFACTOR &gt; factor)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>push_back</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>aeaa4b43fb9b7111b478d3a96a3aa0e20</anchor>
      <arglist>(const sharedFactor &amp;factor)</arglist>
    </member>
    <member kind="function">
      <type>std::enable_if&lt; std::is_base_of&lt; FactorType, typename ITERATOR::value_type::element_type &gt;::value &gt;::type</type>
      <name>push_back</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>af1158e556a9a5efa64a05667bfcf038b</anchor>
      <arglist>(ITERATOR firstFactor, ITERATOR lastFactor)</arglist>
    </member>
    <member kind="function">
      <type>std::enable_if&lt; std::is_base_of&lt; FactorType, typename CONTAINER::value_type::element_type &gt;::value &gt;::type</type>
      <name>push_back</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>a2b539f79df46e9f5a07b179fc632fd67</anchor>
      <arglist>(const CONTAINER &amp;container)</arglist>
    </member>
    <member kind="function">
      <type>std::enable_if&lt; std::is_base_of&lt; This, typename CLIQUE::FactorGraphType &gt;::value &gt;::type</type>
      <name>push_back</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>a7b06bb023c4e23edc3cff4a3fc6a2906</anchor>
      <arglist>(const BayesTree&lt; CLIQUE &gt; &amp;bayesTree)</arglist>
    </member>
    <member kind="function">
      <type>std::enable_if&lt; std::is_base_of&lt; FactorType, DERIVEDFACTOR &gt;::value &gt;::type</type>
      <name>push_back</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>af2c15ab7a1b0e1a05a80f6ec527eee84</anchor>
      <arglist>(const DERIVEDFACTOR &amp;factor)</arglist>
    </member>
    <member kind="function">
      <type>std::enable_if&lt; std::is_base_of&lt; FactorType, typename ITERATOR::value_type &gt;::value &gt;::type</type>
      <name>push_back</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>a7b0873f24893a29e260ef5199df3cbd7</anchor>
      <arglist>(ITERATOR firstFactor, ITERATOR lastFactor)</arglist>
    </member>
    <member kind="function">
      <type>std::enable_if&lt; std::is_base_of&lt; FactorType, typename CONTAINER::value_type &gt;::value &gt;::type</type>
      <name>push_back</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>a171b2e48cdc4c59479c6c5311118e454</anchor>
      <arglist>(const CONTAINER &amp;container)</arglist>
    </member>
    <member kind="function">
      <type>std::enable_if&lt; std::is_base_of&lt; FactorType, DERIVEDFACTOR &gt;::value &gt;::type</type>
      <name>emplace_shared</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>a8e64fe7be32c2602bb509d18d2bfd491</anchor>
      <arglist>(Args &amp;&amp;... args)</arglist>
    </member>
    <member kind="function">
      <type>std::enable_if&lt; std::is_base_of&lt; FactorType, DERIVEDFACTOR &gt;::value, boost::assign::list_inserter&lt; RefCallPushBack&lt; This &gt; &gt; &gt;::type</type>
      <name>operator+=</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>aff46073025c2e79624602d7a0a5a3183</anchor>
      <arglist>(boost::shared_ptr&lt; DERIVEDFACTOR &gt; factor)</arglist>
    </member>
    <member kind="function">
      <type>boost::assign::list_inserter&lt; CRefCallPushBack&lt; This &gt; &gt;</type>
      <name>operator+=</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>a0584d686cc8431728029c920a2ab08b2</anchor>
      <arglist>(const sharedFactor &amp;factor)</arglist>
    </member>
    <member kind="function">
      <type>boost::assign::list_inserter&lt; CRefCallPushBack&lt; This &gt; &gt;</type>
      <name>operator+=</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>af97f5c19a7ae3f09a60ecb7a05ad2ff3</anchor>
      <arglist>(const FACTOR_OR_CONTAINER &amp;factorOrContainer)</arglist>
    </member>
    <member kind="function">
      <type>std::enable_if&lt; std::is_base_of&lt; FactorType, DERIVEDFACTOR &gt;::value &gt;::type</type>
      <name>add</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>af7cc4c74b62998b22c95cb525bda0547</anchor>
      <arglist>(boost::shared_ptr&lt; DERIVEDFACTOR &gt; factor)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>a9bc0c118e19c269d8e2951183d1c493e</anchor>
      <arglist>(const sharedFactor &amp;factor)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>a243182115ecfb081a1605fea939f86f4</anchor>
      <arglist>(const FACTOR_OR_CONTAINER &amp;factorOrContainer)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>a06c9c6d855c390743bd4a4472c730687</anchor>
      <arglist>(const std::string &amp;s=&quot;FactorGraph&quot;, const KeyFormatter &amp;formatter=DefaultKeyFormatter) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>equals</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>aacdf24691d25e1e93ca6b924465b7a35</anchor>
      <arglist>(const This &amp;fg, double tol=1e-9) const</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>size</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>a76fb453800c9ac164bef864782733403</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>empty</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>a0ed8834089b31ef96888643af4731a8a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const sharedFactor</type>
      <name>at</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>aec104a9847783a29065fd4d24f072b7a</anchor>
      <arglist>(size_t i) const</arglist>
    </member>
    <member kind="function">
      <type>sharedFactor &amp;</type>
      <name>at</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>a643fa29b7e95aab4c80169729492efd1</anchor>
      <arglist>(size_t i)</arglist>
    </member>
    <member kind="function">
      <type>const sharedFactor</type>
      <name>operator[]</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>ad00637b3f124aec8b4047faea5b5647b</anchor>
      <arglist>(size_t i) const</arglist>
    </member>
    <member kind="function">
      <type>sharedFactor &amp;</type>
      <name>operator[]</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>abcc88a56126d4715cc8a7de9ff3c34af</anchor>
      <arglist>(size_t i)</arglist>
    </member>
    <member kind="function">
      <type>const_iterator</type>
      <name>begin</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>abcaeffeae20930806f064f8413689c22</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const_iterator</type>
      <name>end</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>a94a257708f3530799e24d21f3125e181</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>sharedFactor</type>
      <name>front</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>a8aad182ded37c5add184e0113ec9ede9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>sharedFactor</type>
      <name>back</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>a37859ce7d210d593be80f625eceba620</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>begin</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>abaf0875f55936063d96c507de9e9255a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>end</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>ad6e1c6a2b56c2158afb28a58ab560e44</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resize</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>a231dd81b4751a9bccc3c89f35f76961e</anchor>
      <arglist>(size_t size)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>remove</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>a38468469269d7b6530cf4d32b4e462d1</anchor>
      <arglist>(size_t i)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>replace</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>aa706ee0e285f6c1a38e6a4446fe9ea4e</anchor>
      <arglist>(size_t index, sharedFactor factor)</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>erase</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>a22f324974f6e3380c54d1d69c71bc7fb</anchor>
      <arglist>(iterator item)</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>erase</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>a2825a68630a0547e1bfd5ba0cdf1de61</anchor>
      <arglist>(iterator first, iterator last)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reserve</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>afea8c7bf4fd19ccc1547be3a5d1834f6</anchor>
      <arglist>(size_t size)</arglist>
    </member>
    <member kind="function">
      <type>std::enable_if&lt; std::is_base_of&lt; FactorType, DERIVEDFACTOR &gt;::value &gt;::type</type>
      <name>push_back</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>a28fcfc8fcc5ac3068af271a821e31621</anchor>
      <arglist>(boost::shared_ptr&lt; DERIVEDFACTOR &gt; factor)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>push_back</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>aeaa4b43fb9b7111b478d3a96a3aa0e20</anchor>
      <arglist>(const sharedFactor &amp;factor)</arglist>
    </member>
    <member kind="function">
      <type>std::enable_if&lt; std::is_base_of&lt; FactorType, typename ITERATOR::value_type::element_type &gt;::value &gt;::type</type>
      <name>push_back</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>af1158e556a9a5efa64a05667bfcf038b</anchor>
      <arglist>(ITERATOR firstFactor, ITERATOR lastFactor)</arglist>
    </member>
    <member kind="function">
      <type>std::enable_if&lt; std::is_base_of&lt; FactorType, typename CONTAINER::value_type::element_type &gt;::value &gt;::type</type>
      <name>push_back</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>a2b539f79df46e9f5a07b179fc632fd67</anchor>
      <arglist>(const CONTAINER &amp;container)</arglist>
    </member>
    <member kind="function">
      <type>std::enable_if&lt; std::is_base_of&lt; This, typename CLIQUE::FactorGraphType &gt;::value &gt;::type</type>
      <name>push_back</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>a7b06bb023c4e23edc3cff4a3fc6a2906</anchor>
      <arglist>(const BayesTree&lt; CLIQUE &gt; &amp;bayesTree)</arglist>
    </member>
    <member kind="function">
      <type>std::enable_if&lt; std::is_base_of&lt; FactorType, DERIVEDFACTOR &gt;::value &gt;::type</type>
      <name>push_back</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>af2c15ab7a1b0e1a05a80f6ec527eee84</anchor>
      <arglist>(const DERIVEDFACTOR &amp;factor)</arglist>
    </member>
    <member kind="function">
      <type>std::enable_if&lt; std::is_base_of&lt; FactorType, typename ITERATOR::value_type &gt;::value &gt;::type</type>
      <name>push_back</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>a7b0873f24893a29e260ef5199df3cbd7</anchor>
      <arglist>(ITERATOR firstFactor, ITERATOR lastFactor)</arglist>
    </member>
    <member kind="function">
      <type>std::enable_if&lt; std::is_base_of&lt; FactorType, typename CONTAINER::value_type &gt;::value &gt;::type</type>
      <name>push_back</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>a171b2e48cdc4c59479c6c5311118e454</anchor>
      <arglist>(const CONTAINER &amp;container)</arglist>
    </member>
    <member kind="function">
      <type>std::enable_if&lt; std::is_base_of&lt; FactorType, DERIVEDFACTOR &gt;::value &gt;::type</type>
      <name>emplace_shared</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>a8e64fe7be32c2602bb509d18d2bfd491</anchor>
      <arglist>(Args &amp;&amp;... args)</arglist>
    </member>
    <member kind="function">
      <type>std::enable_if&lt; std::is_base_of&lt; FactorType, DERIVEDFACTOR &gt;::value, boost::assign::list_inserter&lt; RefCallPushBack&lt; This &gt; &gt; &gt;::type</type>
      <name>operator+=</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>aff46073025c2e79624602d7a0a5a3183</anchor>
      <arglist>(boost::shared_ptr&lt; DERIVEDFACTOR &gt; factor)</arglist>
    </member>
    <member kind="function">
      <type>boost::assign::list_inserter&lt; CRefCallPushBack&lt; This &gt; &gt;</type>
      <name>operator+=</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>a0584d686cc8431728029c920a2ab08b2</anchor>
      <arglist>(const sharedFactor &amp;factor)</arglist>
    </member>
    <member kind="function">
      <type>boost::assign::list_inserter&lt; CRefCallPushBack&lt; This &gt; &gt;</type>
      <name>operator+=</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>af97f5c19a7ae3f09a60ecb7a05ad2ff3</anchor>
      <arglist>(const FACTOR_OR_CONTAINER &amp;factorOrContainer)</arglist>
    </member>
    <member kind="function">
      <type>std::enable_if&lt; std::is_base_of&lt; FactorType, DERIVEDFACTOR &gt;::value &gt;::type</type>
      <name>add</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>af7cc4c74b62998b22c95cb525bda0547</anchor>
      <arglist>(boost::shared_ptr&lt; DERIVEDFACTOR &gt; factor)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>a9bc0c118e19c269d8e2951183d1c493e</anchor>
      <arglist>(const sharedFactor &amp;factor)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>a243182115ecfb081a1605fea939f86f4</anchor>
      <arglist>(const FACTOR_OR_CONTAINER &amp;factorOrContainer)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>a06c9c6d855c390743bd4a4472c730687</anchor>
      <arglist>(const std::string &amp;s=&quot;FactorGraph&quot;, const KeyFormatter &amp;formatter=DefaultKeyFormatter) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>equals</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>aacdf24691d25e1e93ca6b924465b7a35</anchor>
      <arglist>(const This &amp;fg, double tol=1e-9) const</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>size</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>a76fb453800c9ac164bef864782733403</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>empty</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>a0ed8834089b31ef96888643af4731a8a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const sharedFactor</type>
      <name>at</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>aec104a9847783a29065fd4d24f072b7a</anchor>
      <arglist>(size_t i) const</arglist>
    </member>
    <member kind="function">
      <type>sharedFactor &amp;</type>
      <name>at</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>a643fa29b7e95aab4c80169729492efd1</anchor>
      <arglist>(size_t i)</arglist>
    </member>
    <member kind="function">
      <type>const sharedFactor</type>
      <name>operator[]</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>ad00637b3f124aec8b4047faea5b5647b</anchor>
      <arglist>(size_t i) const</arglist>
    </member>
    <member kind="function">
      <type>sharedFactor &amp;</type>
      <name>operator[]</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>abcc88a56126d4715cc8a7de9ff3c34af</anchor>
      <arglist>(size_t i)</arglist>
    </member>
    <member kind="function">
      <type>const_iterator</type>
      <name>begin</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>abcaeffeae20930806f064f8413689c22</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const_iterator</type>
      <name>end</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>a94a257708f3530799e24d21f3125e181</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>sharedFactor</type>
      <name>front</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>a8aad182ded37c5add184e0113ec9ede9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>sharedFactor</type>
      <name>back</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>a37859ce7d210d593be80f625eceba620</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>begin</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>abaf0875f55936063d96c507de9e9255a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>end</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>ad6e1c6a2b56c2158afb28a58ab560e44</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resize</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>a231dd81b4751a9bccc3c89f35f76961e</anchor>
      <arglist>(size_t size)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>remove</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>a38468469269d7b6530cf4d32b4e462d1</anchor>
      <arglist>(size_t i)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>replace</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>aa706ee0e285f6c1a38e6a4446fe9ea4e</anchor>
      <arglist>(size_t index, sharedFactor factor)</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>erase</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>a22f324974f6e3380c54d1d69c71bc7fb</anchor>
      <arglist>(iterator item)</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>erase</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>a2825a68630a0547e1bfd5ba0cdf1de61</anchor>
      <arglist>(iterator first, iterator last)</arglist>
    </member>
    <member kind="typedef">
      <type>GaussianFactor</type>
      <name>FactorType</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>aa54fb0b66fd8fee9f3c1f2844cf3edef</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; GaussianFactor &gt;</type>
      <name>sharedFactor</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>ac9bfc88025d21ff01b7e9dc609ba0b0e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>FactorGraph</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>a42db0a1062eb6c223b0a186a9d34cb4b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>FactorGraph</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>a63a80ba5a22fee5725d0efa75080cdfb</anchor>
      <arglist>(ITERATOR firstFactor, ITERATOR lastFactor)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>FactorGraph</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>a37b5e74d2c3711906f57982b4512351f</anchor>
      <arglist>(const CONTAINER &amp;factors)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>FastVector&lt; sharedFactor &gt;</type>
      <name>factors_</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>ae0c75f68e3ebc37cc4511285b12c33fc</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>FactorGraph&lt; LinearEquality &gt;</name>
    <filename>a02887.html</filename>
    <member kind="friend">
      <type>friend class</type>
      <name>boost::serialization::access</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>ac98d07dd8f7b70e16ccb9a01abf56b9c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>nrFactors</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>a761f1022dadf60e2cacca304ab0533b4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>KeySet</type>
      <name>keys</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>a0c4667de76265a06cc6f74b1f3b25051</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>KeyVector</type>
      <name>keyVector</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>a3b4d9bbaceeb9043ab7c20d4778b69c5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>exists</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>acbf8cdf50816d4a0571f6b9b6254f9ce</anchor>
      <arglist>(size_t idx) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>FactorGraph</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>a42db0a1062eb6c223b0a186a9d34cb4b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>FactorGraph</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>a63a80ba5a22fee5725d0efa75080cdfb</anchor>
      <arglist>(ITERATOR firstFactor, ITERATOR lastFactor)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>FactorGraph</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>a37b5e74d2c3711906f57982b4512351f</anchor>
      <arglist>(const CONTAINER &amp;factors)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reserve</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>afea8c7bf4fd19ccc1547be3a5d1834f6</anchor>
      <arglist>(size_t size)</arglist>
    </member>
    <member kind="function">
      <type>std::enable_if&lt; std::is_base_of&lt; FactorType, DERIVEDFACTOR &gt;::value &gt;::type</type>
      <name>push_back</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>a28fcfc8fcc5ac3068af271a821e31621</anchor>
      <arglist>(boost::shared_ptr&lt; DERIVEDFACTOR &gt; factor)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>push_back</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>aeaa4b43fb9b7111b478d3a96a3aa0e20</anchor>
      <arglist>(const sharedFactor &amp;factor)</arglist>
    </member>
    <member kind="function">
      <type>std::enable_if&lt; std::is_base_of&lt; FactorType, typename ITERATOR::value_type::element_type &gt;::value &gt;::type</type>
      <name>push_back</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>af1158e556a9a5efa64a05667bfcf038b</anchor>
      <arglist>(ITERATOR firstFactor, ITERATOR lastFactor)</arglist>
    </member>
    <member kind="function">
      <type>std::enable_if&lt; std::is_base_of&lt; FactorType, typename CONTAINER::value_type::element_type &gt;::value &gt;::type</type>
      <name>push_back</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>a2b539f79df46e9f5a07b179fc632fd67</anchor>
      <arglist>(const CONTAINER &amp;container)</arglist>
    </member>
    <member kind="function">
      <type>std::enable_if&lt; std::is_base_of&lt; This, typename CLIQUE::FactorGraphType &gt;::value &gt;::type</type>
      <name>push_back</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>a7b06bb023c4e23edc3cff4a3fc6a2906</anchor>
      <arglist>(const BayesTree&lt; CLIQUE &gt; &amp;bayesTree)</arglist>
    </member>
    <member kind="function">
      <type>std::enable_if&lt; std::is_base_of&lt; FactorType, DERIVEDFACTOR &gt;::value &gt;::type</type>
      <name>push_back</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>af2c15ab7a1b0e1a05a80f6ec527eee84</anchor>
      <arglist>(const DERIVEDFACTOR &amp;factor)</arglist>
    </member>
    <member kind="function">
      <type>std::enable_if&lt; std::is_base_of&lt; FactorType, typename ITERATOR::value_type &gt;::value &gt;::type</type>
      <name>push_back</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>a7b0873f24893a29e260ef5199df3cbd7</anchor>
      <arglist>(ITERATOR firstFactor, ITERATOR lastFactor)</arglist>
    </member>
    <member kind="function">
      <type>std::enable_if&lt; std::is_base_of&lt; FactorType, typename CONTAINER::value_type &gt;::value &gt;::type</type>
      <name>push_back</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>a171b2e48cdc4c59479c6c5311118e454</anchor>
      <arglist>(const CONTAINER &amp;container)</arglist>
    </member>
    <member kind="function">
      <type>std::enable_if&lt; std::is_base_of&lt; FactorType, DERIVEDFACTOR &gt;::value &gt;::type</type>
      <name>emplace_shared</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>a8e64fe7be32c2602bb509d18d2bfd491</anchor>
      <arglist>(Args &amp;&amp;... args)</arglist>
    </member>
    <member kind="function">
      <type>std::enable_if&lt; std::is_base_of&lt; FactorType, DERIVEDFACTOR &gt;::value, boost::assign::list_inserter&lt; RefCallPushBack&lt; This &gt; &gt; &gt;::type</type>
      <name>operator+=</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>aff46073025c2e79624602d7a0a5a3183</anchor>
      <arglist>(boost::shared_ptr&lt; DERIVEDFACTOR &gt; factor)</arglist>
    </member>
    <member kind="function">
      <type>boost::assign::list_inserter&lt; CRefCallPushBack&lt; This &gt; &gt;</type>
      <name>operator+=</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>a0584d686cc8431728029c920a2ab08b2</anchor>
      <arglist>(const sharedFactor &amp;factor)</arglist>
    </member>
    <member kind="function">
      <type>boost::assign::list_inserter&lt; CRefCallPushBack&lt; This &gt; &gt;</type>
      <name>operator+=</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>af97f5c19a7ae3f09a60ecb7a05ad2ff3</anchor>
      <arglist>(const FACTOR_OR_CONTAINER &amp;factorOrContainer)</arglist>
    </member>
    <member kind="function">
      <type>std::enable_if&lt; std::is_base_of&lt; FactorType, DERIVEDFACTOR &gt;::value &gt;::type</type>
      <name>add</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>af7cc4c74b62998b22c95cb525bda0547</anchor>
      <arglist>(boost::shared_ptr&lt; DERIVEDFACTOR &gt; factor)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>a9bc0c118e19c269d8e2951183d1c493e</anchor>
      <arglist>(const sharedFactor &amp;factor)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>a243182115ecfb081a1605fea939f86f4</anchor>
      <arglist>(const FACTOR_OR_CONTAINER &amp;factorOrContainer)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>a06c9c6d855c390743bd4a4472c730687</anchor>
      <arglist>(const std::string &amp;s=&quot;FactorGraph&quot;, const KeyFormatter &amp;formatter=DefaultKeyFormatter) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>equals</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>aacdf24691d25e1e93ca6b924465b7a35</anchor>
      <arglist>(const This &amp;fg, double tol=1e-9) const</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>size</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>a76fb453800c9ac164bef864782733403</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>empty</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>a0ed8834089b31ef96888643af4731a8a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const sharedFactor</type>
      <name>at</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>aec104a9847783a29065fd4d24f072b7a</anchor>
      <arglist>(size_t i) const</arglist>
    </member>
    <member kind="function">
      <type>sharedFactor &amp;</type>
      <name>at</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>a643fa29b7e95aab4c80169729492efd1</anchor>
      <arglist>(size_t i)</arglist>
    </member>
    <member kind="function">
      <type>const sharedFactor</type>
      <name>operator[]</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>ad00637b3f124aec8b4047faea5b5647b</anchor>
      <arglist>(size_t i) const</arglist>
    </member>
    <member kind="function">
      <type>sharedFactor &amp;</type>
      <name>operator[]</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>abcc88a56126d4715cc8a7de9ff3c34af</anchor>
      <arglist>(size_t i)</arglist>
    </member>
    <member kind="function">
      <type>const_iterator</type>
      <name>begin</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>abcaeffeae20930806f064f8413689c22</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const_iterator</type>
      <name>end</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>a94a257708f3530799e24d21f3125e181</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>sharedFactor</type>
      <name>front</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>a8aad182ded37c5add184e0113ec9ede9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>sharedFactor</type>
      <name>back</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>a37859ce7d210d593be80f625eceba620</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>begin</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>abaf0875f55936063d96c507de9e9255a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>end</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>ad6e1c6a2b56c2158afb28a58ab560e44</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resize</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>a231dd81b4751a9bccc3c89f35f76961e</anchor>
      <arglist>(size_t size)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>remove</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>a38468469269d7b6530cf4d32b4e462d1</anchor>
      <arglist>(size_t i)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>replace</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>aa706ee0e285f6c1a38e6a4446fe9ea4e</anchor>
      <arglist>(size_t index, sharedFactor factor)</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>erase</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>a22f324974f6e3380c54d1d69c71bc7fb</anchor>
      <arglist>(iterator item)</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>erase</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>a2825a68630a0547e1bfd5ba0cdf1de61</anchor>
      <arglist>(iterator first, iterator last)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reserve</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>afea8c7bf4fd19ccc1547be3a5d1834f6</anchor>
      <arglist>(size_t size)</arglist>
    </member>
    <member kind="function">
      <type>std::enable_if&lt; std::is_base_of&lt; FactorType, DERIVEDFACTOR &gt;::value &gt;::type</type>
      <name>push_back</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>a28fcfc8fcc5ac3068af271a821e31621</anchor>
      <arglist>(boost::shared_ptr&lt; DERIVEDFACTOR &gt; factor)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>push_back</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>aeaa4b43fb9b7111b478d3a96a3aa0e20</anchor>
      <arglist>(const sharedFactor &amp;factor)</arglist>
    </member>
    <member kind="function">
      <type>std::enable_if&lt; std::is_base_of&lt; FactorType, typename ITERATOR::value_type::element_type &gt;::value &gt;::type</type>
      <name>push_back</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>af1158e556a9a5efa64a05667bfcf038b</anchor>
      <arglist>(ITERATOR firstFactor, ITERATOR lastFactor)</arglist>
    </member>
    <member kind="function">
      <type>std::enable_if&lt; std::is_base_of&lt; FactorType, typename CONTAINER::value_type::element_type &gt;::value &gt;::type</type>
      <name>push_back</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>a2b539f79df46e9f5a07b179fc632fd67</anchor>
      <arglist>(const CONTAINER &amp;container)</arglist>
    </member>
    <member kind="function">
      <type>std::enable_if&lt; std::is_base_of&lt; This, typename CLIQUE::FactorGraphType &gt;::value &gt;::type</type>
      <name>push_back</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>a7b06bb023c4e23edc3cff4a3fc6a2906</anchor>
      <arglist>(const BayesTree&lt; CLIQUE &gt; &amp;bayesTree)</arglist>
    </member>
    <member kind="function">
      <type>std::enable_if&lt; std::is_base_of&lt; FactorType, DERIVEDFACTOR &gt;::value &gt;::type</type>
      <name>push_back</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>af2c15ab7a1b0e1a05a80f6ec527eee84</anchor>
      <arglist>(const DERIVEDFACTOR &amp;factor)</arglist>
    </member>
    <member kind="function">
      <type>std::enable_if&lt; std::is_base_of&lt; FactorType, typename ITERATOR::value_type &gt;::value &gt;::type</type>
      <name>push_back</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>a7b0873f24893a29e260ef5199df3cbd7</anchor>
      <arglist>(ITERATOR firstFactor, ITERATOR lastFactor)</arglist>
    </member>
    <member kind="function">
      <type>std::enable_if&lt; std::is_base_of&lt; FactorType, typename CONTAINER::value_type &gt;::value &gt;::type</type>
      <name>push_back</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>a171b2e48cdc4c59479c6c5311118e454</anchor>
      <arglist>(const CONTAINER &amp;container)</arglist>
    </member>
    <member kind="function">
      <type>std::enable_if&lt; std::is_base_of&lt; FactorType, DERIVEDFACTOR &gt;::value &gt;::type</type>
      <name>emplace_shared</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>a8e64fe7be32c2602bb509d18d2bfd491</anchor>
      <arglist>(Args &amp;&amp;... args)</arglist>
    </member>
    <member kind="function">
      <type>std::enable_if&lt; std::is_base_of&lt; FactorType, DERIVEDFACTOR &gt;::value, boost::assign::list_inserter&lt; RefCallPushBack&lt; This &gt; &gt; &gt;::type</type>
      <name>operator+=</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>aff46073025c2e79624602d7a0a5a3183</anchor>
      <arglist>(boost::shared_ptr&lt; DERIVEDFACTOR &gt; factor)</arglist>
    </member>
    <member kind="function">
      <type>boost::assign::list_inserter&lt; CRefCallPushBack&lt; This &gt; &gt;</type>
      <name>operator+=</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>a0584d686cc8431728029c920a2ab08b2</anchor>
      <arglist>(const sharedFactor &amp;factor)</arglist>
    </member>
    <member kind="function">
      <type>boost::assign::list_inserter&lt; CRefCallPushBack&lt; This &gt; &gt;</type>
      <name>operator+=</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>af97f5c19a7ae3f09a60ecb7a05ad2ff3</anchor>
      <arglist>(const FACTOR_OR_CONTAINER &amp;factorOrContainer)</arglist>
    </member>
    <member kind="function">
      <type>std::enable_if&lt; std::is_base_of&lt; FactorType, DERIVEDFACTOR &gt;::value &gt;::type</type>
      <name>add</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>af7cc4c74b62998b22c95cb525bda0547</anchor>
      <arglist>(boost::shared_ptr&lt; DERIVEDFACTOR &gt; factor)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>a9bc0c118e19c269d8e2951183d1c493e</anchor>
      <arglist>(const sharedFactor &amp;factor)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>a243182115ecfb081a1605fea939f86f4</anchor>
      <arglist>(const FACTOR_OR_CONTAINER &amp;factorOrContainer)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>a06c9c6d855c390743bd4a4472c730687</anchor>
      <arglist>(const std::string &amp;s=&quot;FactorGraph&quot;, const KeyFormatter &amp;formatter=DefaultKeyFormatter) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>equals</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>aacdf24691d25e1e93ca6b924465b7a35</anchor>
      <arglist>(const This &amp;fg, double tol=1e-9) const</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>size</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>a76fb453800c9ac164bef864782733403</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>empty</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>a0ed8834089b31ef96888643af4731a8a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const sharedFactor</type>
      <name>at</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>aec104a9847783a29065fd4d24f072b7a</anchor>
      <arglist>(size_t i) const</arglist>
    </member>
    <member kind="function">
      <type>sharedFactor &amp;</type>
      <name>at</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>a643fa29b7e95aab4c80169729492efd1</anchor>
      <arglist>(size_t i)</arglist>
    </member>
    <member kind="function">
      <type>const sharedFactor</type>
      <name>operator[]</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>ad00637b3f124aec8b4047faea5b5647b</anchor>
      <arglist>(size_t i) const</arglist>
    </member>
    <member kind="function">
      <type>sharedFactor &amp;</type>
      <name>operator[]</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>abcc88a56126d4715cc8a7de9ff3c34af</anchor>
      <arglist>(size_t i)</arglist>
    </member>
    <member kind="function">
      <type>const_iterator</type>
      <name>begin</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>abcaeffeae20930806f064f8413689c22</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const_iterator</type>
      <name>end</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>a94a257708f3530799e24d21f3125e181</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>sharedFactor</type>
      <name>front</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>a8aad182ded37c5add184e0113ec9ede9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>sharedFactor</type>
      <name>back</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>a37859ce7d210d593be80f625eceba620</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>begin</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>abaf0875f55936063d96c507de9e9255a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>end</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>ad6e1c6a2b56c2158afb28a58ab560e44</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resize</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>a231dd81b4751a9bccc3c89f35f76961e</anchor>
      <arglist>(size_t size)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>remove</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>a38468469269d7b6530cf4d32b4e462d1</anchor>
      <arglist>(size_t i)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>replace</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>aa706ee0e285f6c1a38e6a4446fe9ea4e</anchor>
      <arglist>(size_t index, sharedFactor factor)</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>erase</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>a22f324974f6e3380c54d1d69c71bc7fb</anchor>
      <arglist>(iterator item)</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>erase</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>a2825a68630a0547e1bfd5ba0cdf1de61</anchor>
      <arglist>(iterator first, iterator last)</arglist>
    </member>
    <member kind="typedef">
      <type>LinearEquality</type>
      <name>FactorType</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>aa54fb0b66fd8fee9f3c1f2844cf3edef</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; LinearEquality &gt;</type>
      <name>sharedFactor</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>ac9bfc88025d21ff01b7e9dc609ba0b0e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>FactorGraph</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>a42db0a1062eb6c223b0a186a9d34cb4b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>FactorGraph</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>a63a80ba5a22fee5725d0efa75080cdfb</anchor>
      <arglist>(ITERATOR firstFactor, ITERATOR lastFactor)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>FactorGraph</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>a37b5e74d2c3711906f57982b4512351f</anchor>
      <arglist>(const CONTAINER &amp;factors)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>FastVector&lt; sharedFactor &gt;</type>
      <name>factors_</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>ae0c75f68e3ebc37cc4511285b12c33fc</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>FactorGraph&lt; LinearInequality &gt;</name>
    <filename>a02887.html</filename>
    <member kind="friend">
      <type>friend class</type>
      <name>boost::serialization::access</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>ac98d07dd8f7b70e16ccb9a01abf56b9c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>nrFactors</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>a761f1022dadf60e2cacca304ab0533b4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>KeySet</type>
      <name>keys</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>a0c4667de76265a06cc6f74b1f3b25051</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>KeyVector</type>
      <name>keyVector</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>a3b4d9bbaceeb9043ab7c20d4778b69c5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>exists</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>acbf8cdf50816d4a0571f6b9b6254f9ce</anchor>
      <arglist>(size_t idx) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>FactorGraph</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>a42db0a1062eb6c223b0a186a9d34cb4b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>FactorGraph</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>a63a80ba5a22fee5725d0efa75080cdfb</anchor>
      <arglist>(ITERATOR firstFactor, ITERATOR lastFactor)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>FactorGraph</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>a37b5e74d2c3711906f57982b4512351f</anchor>
      <arglist>(const CONTAINER &amp;factors)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reserve</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>afea8c7bf4fd19ccc1547be3a5d1834f6</anchor>
      <arglist>(size_t size)</arglist>
    </member>
    <member kind="function">
      <type>std::enable_if&lt; std::is_base_of&lt; FactorType, DERIVEDFACTOR &gt;::value &gt;::type</type>
      <name>push_back</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>a28fcfc8fcc5ac3068af271a821e31621</anchor>
      <arglist>(boost::shared_ptr&lt; DERIVEDFACTOR &gt; factor)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>push_back</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>aeaa4b43fb9b7111b478d3a96a3aa0e20</anchor>
      <arglist>(const sharedFactor &amp;factor)</arglist>
    </member>
    <member kind="function">
      <type>std::enable_if&lt; std::is_base_of&lt; FactorType, typename ITERATOR::value_type::element_type &gt;::value &gt;::type</type>
      <name>push_back</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>af1158e556a9a5efa64a05667bfcf038b</anchor>
      <arglist>(ITERATOR firstFactor, ITERATOR lastFactor)</arglist>
    </member>
    <member kind="function">
      <type>std::enable_if&lt; std::is_base_of&lt; FactorType, typename CONTAINER::value_type::element_type &gt;::value &gt;::type</type>
      <name>push_back</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>a2b539f79df46e9f5a07b179fc632fd67</anchor>
      <arglist>(const CONTAINER &amp;container)</arglist>
    </member>
    <member kind="function">
      <type>std::enable_if&lt; std::is_base_of&lt; This, typename CLIQUE::FactorGraphType &gt;::value &gt;::type</type>
      <name>push_back</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>a7b06bb023c4e23edc3cff4a3fc6a2906</anchor>
      <arglist>(const BayesTree&lt; CLIQUE &gt; &amp;bayesTree)</arglist>
    </member>
    <member kind="function">
      <type>std::enable_if&lt; std::is_base_of&lt; FactorType, DERIVEDFACTOR &gt;::value &gt;::type</type>
      <name>push_back</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>af2c15ab7a1b0e1a05a80f6ec527eee84</anchor>
      <arglist>(const DERIVEDFACTOR &amp;factor)</arglist>
    </member>
    <member kind="function">
      <type>std::enable_if&lt; std::is_base_of&lt; FactorType, typename ITERATOR::value_type &gt;::value &gt;::type</type>
      <name>push_back</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>a7b0873f24893a29e260ef5199df3cbd7</anchor>
      <arglist>(ITERATOR firstFactor, ITERATOR lastFactor)</arglist>
    </member>
    <member kind="function">
      <type>std::enable_if&lt; std::is_base_of&lt; FactorType, typename CONTAINER::value_type &gt;::value &gt;::type</type>
      <name>push_back</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>a171b2e48cdc4c59479c6c5311118e454</anchor>
      <arglist>(const CONTAINER &amp;container)</arglist>
    </member>
    <member kind="function">
      <type>std::enable_if&lt; std::is_base_of&lt; FactorType, DERIVEDFACTOR &gt;::value &gt;::type</type>
      <name>emplace_shared</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>a8e64fe7be32c2602bb509d18d2bfd491</anchor>
      <arglist>(Args &amp;&amp;... args)</arglist>
    </member>
    <member kind="function">
      <type>std::enable_if&lt; std::is_base_of&lt; FactorType, DERIVEDFACTOR &gt;::value, boost::assign::list_inserter&lt; RefCallPushBack&lt; This &gt; &gt; &gt;::type</type>
      <name>operator+=</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>aff46073025c2e79624602d7a0a5a3183</anchor>
      <arglist>(boost::shared_ptr&lt; DERIVEDFACTOR &gt; factor)</arglist>
    </member>
    <member kind="function">
      <type>boost::assign::list_inserter&lt; CRefCallPushBack&lt; This &gt; &gt;</type>
      <name>operator+=</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>a0584d686cc8431728029c920a2ab08b2</anchor>
      <arglist>(const sharedFactor &amp;factor)</arglist>
    </member>
    <member kind="function">
      <type>boost::assign::list_inserter&lt; CRefCallPushBack&lt; This &gt; &gt;</type>
      <name>operator+=</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>af97f5c19a7ae3f09a60ecb7a05ad2ff3</anchor>
      <arglist>(const FACTOR_OR_CONTAINER &amp;factorOrContainer)</arglist>
    </member>
    <member kind="function">
      <type>std::enable_if&lt; std::is_base_of&lt; FactorType, DERIVEDFACTOR &gt;::value &gt;::type</type>
      <name>add</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>af7cc4c74b62998b22c95cb525bda0547</anchor>
      <arglist>(boost::shared_ptr&lt; DERIVEDFACTOR &gt; factor)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>a9bc0c118e19c269d8e2951183d1c493e</anchor>
      <arglist>(const sharedFactor &amp;factor)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>a243182115ecfb081a1605fea939f86f4</anchor>
      <arglist>(const FACTOR_OR_CONTAINER &amp;factorOrContainer)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>a06c9c6d855c390743bd4a4472c730687</anchor>
      <arglist>(const std::string &amp;s=&quot;FactorGraph&quot;, const KeyFormatter &amp;formatter=DefaultKeyFormatter) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>equals</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>aacdf24691d25e1e93ca6b924465b7a35</anchor>
      <arglist>(const This &amp;fg, double tol=1e-9) const</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>size</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>a76fb453800c9ac164bef864782733403</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>empty</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>a0ed8834089b31ef96888643af4731a8a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const sharedFactor</type>
      <name>at</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>aec104a9847783a29065fd4d24f072b7a</anchor>
      <arglist>(size_t i) const</arglist>
    </member>
    <member kind="function">
      <type>sharedFactor &amp;</type>
      <name>at</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>a643fa29b7e95aab4c80169729492efd1</anchor>
      <arglist>(size_t i)</arglist>
    </member>
    <member kind="function">
      <type>const sharedFactor</type>
      <name>operator[]</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>ad00637b3f124aec8b4047faea5b5647b</anchor>
      <arglist>(size_t i) const</arglist>
    </member>
    <member kind="function">
      <type>sharedFactor &amp;</type>
      <name>operator[]</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>abcc88a56126d4715cc8a7de9ff3c34af</anchor>
      <arglist>(size_t i)</arglist>
    </member>
    <member kind="function">
      <type>const_iterator</type>
      <name>begin</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>abcaeffeae20930806f064f8413689c22</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const_iterator</type>
      <name>end</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>a94a257708f3530799e24d21f3125e181</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>sharedFactor</type>
      <name>front</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>a8aad182ded37c5add184e0113ec9ede9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>sharedFactor</type>
      <name>back</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>a37859ce7d210d593be80f625eceba620</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>begin</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>abaf0875f55936063d96c507de9e9255a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>end</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>ad6e1c6a2b56c2158afb28a58ab560e44</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resize</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>a231dd81b4751a9bccc3c89f35f76961e</anchor>
      <arglist>(size_t size)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>remove</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>a38468469269d7b6530cf4d32b4e462d1</anchor>
      <arglist>(size_t i)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>replace</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>aa706ee0e285f6c1a38e6a4446fe9ea4e</anchor>
      <arglist>(size_t index, sharedFactor factor)</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>erase</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>a22f324974f6e3380c54d1d69c71bc7fb</anchor>
      <arglist>(iterator item)</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>erase</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>a2825a68630a0547e1bfd5ba0cdf1de61</anchor>
      <arglist>(iterator first, iterator last)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reserve</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>afea8c7bf4fd19ccc1547be3a5d1834f6</anchor>
      <arglist>(size_t size)</arglist>
    </member>
    <member kind="function">
      <type>std::enable_if&lt; std::is_base_of&lt; FactorType, DERIVEDFACTOR &gt;::value &gt;::type</type>
      <name>push_back</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>a28fcfc8fcc5ac3068af271a821e31621</anchor>
      <arglist>(boost::shared_ptr&lt; DERIVEDFACTOR &gt; factor)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>push_back</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>aeaa4b43fb9b7111b478d3a96a3aa0e20</anchor>
      <arglist>(const sharedFactor &amp;factor)</arglist>
    </member>
    <member kind="function">
      <type>std::enable_if&lt; std::is_base_of&lt; FactorType, typename ITERATOR::value_type::element_type &gt;::value &gt;::type</type>
      <name>push_back</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>af1158e556a9a5efa64a05667bfcf038b</anchor>
      <arglist>(ITERATOR firstFactor, ITERATOR lastFactor)</arglist>
    </member>
    <member kind="function">
      <type>std::enable_if&lt; std::is_base_of&lt; FactorType, typename CONTAINER::value_type::element_type &gt;::value &gt;::type</type>
      <name>push_back</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>a2b539f79df46e9f5a07b179fc632fd67</anchor>
      <arglist>(const CONTAINER &amp;container)</arglist>
    </member>
    <member kind="function">
      <type>std::enable_if&lt; std::is_base_of&lt; This, typename CLIQUE::FactorGraphType &gt;::value &gt;::type</type>
      <name>push_back</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>a7b06bb023c4e23edc3cff4a3fc6a2906</anchor>
      <arglist>(const BayesTree&lt; CLIQUE &gt; &amp;bayesTree)</arglist>
    </member>
    <member kind="function">
      <type>std::enable_if&lt; std::is_base_of&lt; FactorType, DERIVEDFACTOR &gt;::value &gt;::type</type>
      <name>push_back</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>af2c15ab7a1b0e1a05a80f6ec527eee84</anchor>
      <arglist>(const DERIVEDFACTOR &amp;factor)</arglist>
    </member>
    <member kind="function">
      <type>std::enable_if&lt; std::is_base_of&lt; FactorType, typename ITERATOR::value_type &gt;::value &gt;::type</type>
      <name>push_back</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>a7b0873f24893a29e260ef5199df3cbd7</anchor>
      <arglist>(ITERATOR firstFactor, ITERATOR lastFactor)</arglist>
    </member>
    <member kind="function">
      <type>std::enable_if&lt; std::is_base_of&lt; FactorType, typename CONTAINER::value_type &gt;::value &gt;::type</type>
      <name>push_back</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>a171b2e48cdc4c59479c6c5311118e454</anchor>
      <arglist>(const CONTAINER &amp;container)</arglist>
    </member>
    <member kind="function">
      <type>std::enable_if&lt; std::is_base_of&lt; FactorType, DERIVEDFACTOR &gt;::value &gt;::type</type>
      <name>emplace_shared</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>a8e64fe7be32c2602bb509d18d2bfd491</anchor>
      <arglist>(Args &amp;&amp;... args)</arglist>
    </member>
    <member kind="function">
      <type>std::enable_if&lt; std::is_base_of&lt; FactorType, DERIVEDFACTOR &gt;::value, boost::assign::list_inserter&lt; RefCallPushBack&lt; This &gt; &gt; &gt;::type</type>
      <name>operator+=</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>aff46073025c2e79624602d7a0a5a3183</anchor>
      <arglist>(boost::shared_ptr&lt; DERIVEDFACTOR &gt; factor)</arglist>
    </member>
    <member kind="function">
      <type>boost::assign::list_inserter&lt; CRefCallPushBack&lt; This &gt; &gt;</type>
      <name>operator+=</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>a0584d686cc8431728029c920a2ab08b2</anchor>
      <arglist>(const sharedFactor &amp;factor)</arglist>
    </member>
    <member kind="function">
      <type>boost::assign::list_inserter&lt; CRefCallPushBack&lt; This &gt; &gt;</type>
      <name>operator+=</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>af97f5c19a7ae3f09a60ecb7a05ad2ff3</anchor>
      <arglist>(const FACTOR_OR_CONTAINER &amp;factorOrContainer)</arglist>
    </member>
    <member kind="function">
      <type>std::enable_if&lt; std::is_base_of&lt; FactorType, DERIVEDFACTOR &gt;::value &gt;::type</type>
      <name>add</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>af7cc4c74b62998b22c95cb525bda0547</anchor>
      <arglist>(boost::shared_ptr&lt; DERIVEDFACTOR &gt; factor)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>a9bc0c118e19c269d8e2951183d1c493e</anchor>
      <arglist>(const sharedFactor &amp;factor)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>a243182115ecfb081a1605fea939f86f4</anchor>
      <arglist>(const FACTOR_OR_CONTAINER &amp;factorOrContainer)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>a06c9c6d855c390743bd4a4472c730687</anchor>
      <arglist>(const std::string &amp;s=&quot;FactorGraph&quot;, const KeyFormatter &amp;formatter=DefaultKeyFormatter) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>equals</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>aacdf24691d25e1e93ca6b924465b7a35</anchor>
      <arglist>(const This &amp;fg, double tol=1e-9) const</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>size</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>a76fb453800c9ac164bef864782733403</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>empty</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>a0ed8834089b31ef96888643af4731a8a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const sharedFactor</type>
      <name>at</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>aec104a9847783a29065fd4d24f072b7a</anchor>
      <arglist>(size_t i) const</arglist>
    </member>
    <member kind="function">
      <type>sharedFactor &amp;</type>
      <name>at</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>a643fa29b7e95aab4c80169729492efd1</anchor>
      <arglist>(size_t i)</arglist>
    </member>
    <member kind="function">
      <type>const sharedFactor</type>
      <name>operator[]</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>ad00637b3f124aec8b4047faea5b5647b</anchor>
      <arglist>(size_t i) const</arglist>
    </member>
    <member kind="function">
      <type>sharedFactor &amp;</type>
      <name>operator[]</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>abcc88a56126d4715cc8a7de9ff3c34af</anchor>
      <arglist>(size_t i)</arglist>
    </member>
    <member kind="function">
      <type>const_iterator</type>
      <name>begin</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>abcaeffeae20930806f064f8413689c22</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const_iterator</type>
      <name>end</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>a94a257708f3530799e24d21f3125e181</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>sharedFactor</type>
      <name>front</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>a8aad182ded37c5add184e0113ec9ede9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>sharedFactor</type>
      <name>back</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>a37859ce7d210d593be80f625eceba620</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>begin</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>abaf0875f55936063d96c507de9e9255a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>end</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>ad6e1c6a2b56c2158afb28a58ab560e44</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resize</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>a231dd81b4751a9bccc3c89f35f76961e</anchor>
      <arglist>(size_t size)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>remove</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>a38468469269d7b6530cf4d32b4e462d1</anchor>
      <arglist>(size_t i)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>replace</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>aa706ee0e285f6c1a38e6a4446fe9ea4e</anchor>
      <arglist>(size_t index, sharedFactor factor)</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>erase</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>a22f324974f6e3380c54d1d69c71bc7fb</anchor>
      <arglist>(iterator item)</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>erase</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>a2825a68630a0547e1bfd5ba0cdf1de61</anchor>
      <arglist>(iterator first, iterator last)</arglist>
    </member>
    <member kind="typedef">
      <type>LinearInequality</type>
      <name>FactorType</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>aa54fb0b66fd8fee9f3c1f2844cf3edef</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; LinearInequality &gt;</type>
      <name>sharedFactor</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>ac9bfc88025d21ff01b7e9dc609ba0b0e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>FactorGraph</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>a42db0a1062eb6c223b0a186a9d34cb4b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>FactorGraph</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>a63a80ba5a22fee5725d0efa75080cdfb</anchor>
      <arglist>(ITERATOR firstFactor, ITERATOR lastFactor)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>FactorGraph</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>a37b5e74d2c3711906f57982b4512351f</anchor>
      <arglist>(const CONTAINER &amp;factors)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>FastVector&lt; sharedFactor &gt;</type>
      <name>factors_</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>ae0c75f68e3ebc37cc4511285b12c33fc</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>FactorGraph&lt; NonlinearFactor &gt;</name>
    <filename>a02887.html</filename>
    <member kind="friend">
      <type>friend class</type>
      <name>boost::serialization::access</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>ac98d07dd8f7b70e16ccb9a01abf56b9c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>nrFactors</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>a761f1022dadf60e2cacca304ab0533b4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>KeySet</type>
      <name>keys</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>a0c4667de76265a06cc6f74b1f3b25051</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>KeyVector</type>
      <name>keyVector</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>a3b4d9bbaceeb9043ab7c20d4778b69c5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>exists</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>acbf8cdf50816d4a0571f6b9b6254f9ce</anchor>
      <arglist>(size_t idx) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>FactorGraph</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>a42db0a1062eb6c223b0a186a9d34cb4b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>FactorGraph</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>a63a80ba5a22fee5725d0efa75080cdfb</anchor>
      <arglist>(ITERATOR firstFactor, ITERATOR lastFactor)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>FactorGraph</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>a37b5e74d2c3711906f57982b4512351f</anchor>
      <arglist>(const CONTAINER &amp;factors)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reserve</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>afea8c7bf4fd19ccc1547be3a5d1834f6</anchor>
      <arglist>(size_t size)</arglist>
    </member>
    <member kind="function">
      <type>std::enable_if&lt; std::is_base_of&lt; FactorType, DERIVEDFACTOR &gt;::value &gt;::type</type>
      <name>push_back</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>a28fcfc8fcc5ac3068af271a821e31621</anchor>
      <arglist>(boost::shared_ptr&lt; DERIVEDFACTOR &gt; factor)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>push_back</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>aeaa4b43fb9b7111b478d3a96a3aa0e20</anchor>
      <arglist>(const sharedFactor &amp;factor)</arglist>
    </member>
    <member kind="function">
      <type>std::enable_if&lt; std::is_base_of&lt; FactorType, typename ITERATOR::value_type::element_type &gt;::value &gt;::type</type>
      <name>push_back</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>af1158e556a9a5efa64a05667bfcf038b</anchor>
      <arglist>(ITERATOR firstFactor, ITERATOR lastFactor)</arglist>
    </member>
    <member kind="function">
      <type>std::enable_if&lt; std::is_base_of&lt; FactorType, typename CONTAINER::value_type::element_type &gt;::value &gt;::type</type>
      <name>push_back</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>a2b539f79df46e9f5a07b179fc632fd67</anchor>
      <arglist>(const CONTAINER &amp;container)</arglist>
    </member>
    <member kind="function">
      <type>std::enable_if&lt; std::is_base_of&lt; This, typename CLIQUE::FactorGraphType &gt;::value &gt;::type</type>
      <name>push_back</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>a7b06bb023c4e23edc3cff4a3fc6a2906</anchor>
      <arglist>(const BayesTree&lt; CLIQUE &gt; &amp;bayesTree)</arglist>
    </member>
    <member kind="function">
      <type>std::enable_if&lt; std::is_base_of&lt; FactorType, DERIVEDFACTOR &gt;::value &gt;::type</type>
      <name>push_back</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>af2c15ab7a1b0e1a05a80f6ec527eee84</anchor>
      <arglist>(const DERIVEDFACTOR &amp;factor)</arglist>
    </member>
    <member kind="function">
      <type>std::enable_if&lt; std::is_base_of&lt; FactorType, typename ITERATOR::value_type &gt;::value &gt;::type</type>
      <name>push_back</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>a7b0873f24893a29e260ef5199df3cbd7</anchor>
      <arglist>(ITERATOR firstFactor, ITERATOR lastFactor)</arglist>
    </member>
    <member kind="function">
      <type>std::enable_if&lt; std::is_base_of&lt; FactorType, typename CONTAINER::value_type &gt;::value &gt;::type</type>
      <name>push_back</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>a171b2e48cdc4c59479c6c5311118e454</anchor>
      <arglist>(const CONTAINER &amp;container)</arglist>
    </member>
    <member kind="function">
      <type>std::enable_if&lt; std::is_base_of&lt; FactorType, DERIVEDFACTOR &gt;::value &gt;::type</type>
      <name>emplace_shared</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>a8e64fe7be32c2602bb509d18d2bfd491</anchor>
      <arglist>(Args &amp;&amp;... args)</arglist>
    </member>
    <member kind="function">
      <type>std::enable_if&lt; std::is_base_of&lt; FactorType, DERIVEDFACTOR &gt;::value, boost::assign::list_inserter&lt; RefCallPushBack&lt; This &gt; &gt; &gt;::type</type>
      <name>operator+=</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>aff46073025c2e79624602d7a0a5a3183</anchor>
      <arglist>(boost::shared_ptr&lt; DERIVEDFACTOR &gt; factor)</arglist>
    </member>
    <member kind="function">
      <type>boost::assign::list_inserter&lt; CRefCallPushBack&lt; This &gt; &gt;</type>
      <name>operator+=</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>a0584d686cc8431728029c920a2ab08b2</anchor>
      <arglist>(const sharedFactor &amp;factor)</arglist>
    </member>
    <member kind="function">
      <type>boost::assign::list_inserter&lt; CRefCallPushBack&lt; This &gt; &gt;</type>
      <name>operator+=</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>af97f5c19a7ae3f09a60ecb7a05ad2ff3</anchor>
      <arglist>(const FACTOR_OR_CONTAINER &amp;factorOrContainer)</arglist>
    </member>
    <member kind="function">
      <type>std::enable_if&lt; std::is_base_of&lt; FactorType, DERIVEDFACTOR &gt;::value &gt;::type</type>
      <name>add</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>af7cc4c74b62998b22c95cb525bda0547</anchor>
      <arglist>(boost::shared_ptr&lt; DERIVEDFACTOR &gt; factor)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>a9bc0c118e19c269d8e2951183d1c493e</anchor>
      <arglist>(const sharedFactor &amp;factor)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>a243182115ecfb081a1605fea939f86f4</anchor>
      <arglist>(const FACTOR_OR_CONTAINER &amp;factorOrContainer)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>a06c9c6d855c390743bd4a4472c730687</anchor>
      <arglist>(const std::string &amp;s=&quot;FactorGraph&quot;, const KeyFormatter &amp;formatter=DefaultKeyFormatter) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>equals</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>aacdf24691d25e1e93ca6b924465b7a35</anchor>
      <arglist>(const This &amp;fg, double tol=1e-9) const</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>size</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>a76fb453800c9ac164bef864782733403</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>empty</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>a0ed8834089b31ef96888643af4731a8a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const sharedFactor</type>
      <name>at</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>aec104a9847783a29065fd4d24f072b7a</anchor>
      <arglist>(size_t i) const</arglist>
    </member>
    <member kind="function">
      <type>sharedFactor &amp;</type>
      <name>at</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>a643fa29b7e95aab4c80169729492efd1</anchor>
      <arglist>(size_t i)</arglist>
    </member>
    <member kind="function">
      <type>const sharedFactor</type>
      <name>operator[]</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>ad00637b3f124aec8b4047faea5b5647b</anchor>
      <arglist>(size_t i) const</arglist>
    </member>
    <member kind="function">
      <type>sharedFactor &amp;</type>
      <name>operator[]</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>abcc88a56126d4715cc8a7de9ff3c34af</anchor>
      <arglist>(size_t i)</arglist>
    </member>
    <member kind="function">
      <type>const_iterator</type>
      <name>begin</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>abcaeffeae20930806f064f8413689c22</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const_iterator</type>
      <name>end</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>a94a257708f3530799e24d21f3125e181</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>sharedFactor</type>
      <name>front</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>a8aad182ded37c5add184e0113ec9ede9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>sharedFactor</type>
      <name>back</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>a37859ce7d210d593be80f625eceba620</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>begin</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>abaf0875f55936063d96c507de9e9255a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>end</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>ad6e1c6a2b56c2158afb28a58ab560e44</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resize</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>a231dd81b4751a9bccc3c89f35f76961e</anchor>
      <arglist>(size_t size)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>remove</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>a38468469269d7b6530cf4d32b4e462d1</anchor>
      <arglist>(size_t i)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>replace</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>aa706ee0e285f6c1a38e6a4446fe9ea4e</anchor>
      <arglist>(size_t index, sharedFactor factor)</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>erase</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>a22f324974f6e3380c54d1d69c71bc7fb</anchor>
      <arglist>(iterator item)</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>erase</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>a2825a68630a0547e1bfd5ba0cdf1de61</anchor>
      <arglist>(iterator first, iterator last)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reserve</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>afea8c7bf4fd19ccc1547be3a5d1834f6</anchor>
      <arglist>(size_t size)</arglist>
    </member>
    <member kind="function">
      <type>std::enable_if&lt; std::is_base_of&lt; FactorType, DERIVEDFACTOR &gt;::value &gt;::type</type>
      <name>push_back</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>a28fcfc8fcc5ac3068af271a821e31621</anchor>
      <arglist>(boost::shared_ptr&lt; DERIVEDFACTOR &gt; factor)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>push_back</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>aeaa4b43fb9b7111b478d3a96a3aa0e20</anchor>
      <arglist>(const sharedFactor &amp;factor)</arglist>
    </member>
    <member kind="function">
      <type>std::enable_if&lt; std::is_base_of&lt; FactorType, typename ITERATOR::value_type::element_type &gt;::value &gt;::type</type>
      <name>push_back</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>af1158e556a9a5efa64a05667bfcf038b</anchor>
      <arglist>(ITERATOR firstFactor, ITERATOR lastFactor)</arglist>
    </member>
    <member kind="function">
      <type>std::enable_if&lt; std::is_base_of&lt; FactorType, typename CONTAINER::value_type::element_type &gt;::value &gt;::type</type>
      <name>push_back</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>a2b539f79df46e9f5a07b179fc632fd67</anchor>
      <arglist>(const CONTAINER &amp;container)</arglist>
    </member>
    <member kind="function">
      <type>std::enable_if&lt; std::is_base_of&lt; This, typename CLIQUE::FactorGraphType &gt;::value &gt;::type</type>
      <name>push_back</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>a7b06bb023c4e23edc3cff4a3fc6a2906</anchor>
      <arglist>(const BayesTree&lt; CLIQUE &gt; &amp;bayesTree)</arglist>
    </member>
    <member kind="function">
      <type>std::enable_if&lt; std::is_base_of&lt; FactorType, DERIVEDFACTOR &gt;::value &gt;::type</type>
      <name>push_back</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>af2c15ab7a1b0e1a05a80f6ec527eee84</anchor>
      <arglist>(const DERIVEDFACTOR &amp;factor)</arglist>
    </member>
    <member kind="function">
      <type>std::enable_if&lt; std::is_base_of&lt; FactorType, typename ITERATOR::value_type &gt;::value &gt;::type</type>
      <name>push_back</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>a7b0873f24893a29e260ef5199df3cbd7</anchor>
      <arglist>(ITERATOR firstFactor, ITERATOR lastFactor)</arglist>
    </member>
    <member kind="function">
      <type>std::enable_if&lt; std::is_base_of&lt; FactorType, typename CONTAINER::value_type &gt;::value &gt;::type</type>
      <name>push_back</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>a171b2e48cdc4c59479c6c5311118e454</anchor>
      <arglist>(const CONTAINER &amp;container)</arglist>
    </member>
    <member kind="function">
      <type>std::enable_if&lt; std::is_base_of&lt; FactorType, DERIVEDFACTOR &gt;::value &gt;::type</type>
      <name>emplace_shared</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>a8e64fe7be32c2602bb509d18d2bfd491</anchor>
      <arglist>(Args &amp;&amp;... args)</arglist>
    </member>
    <member kind="function">
      <type>std::enable_if&lt; std::is_base_of&lt; FactorType, DERIVEDFACTOR &gt;::value, boost::assign::list_inserter&lt; RefCallPushBack&lt; This &gt; &gt; &gt;::type</type>
      <name>operator+=</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>aff46073025c2e79624602d7a0a5a3183</anchor>
      <arglist>(boost::shared_ptr&lt; DERIVEDFACTOR &gt; factor)</arglist>
    </member>
    <member kind="function">
      <type>boost::assign::list_inserter&lt; CRefCallPushBack&lt; This &gt; &gt;</type>
      <name>operator+=</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>a0584d686cc8431728029c920a2ab08b2</anchor>
      <arglist>(const sharedFactor &amp;factor)</arglist>
    </member>
    <member kind="function">
      <type>boost::assign::list_inserter&lt; CRefCallPushBack&lt; This &gt; &gt;</type>
      <name>operator+=</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>af97f5c19a7ae3f09a60ecb7a05ad2ff3</anchor>
      <arglist>(const FACTOR_OR_CONTAINER &amp;factorOrContainer)</arglist>
    </member>
    <member kind="function">
      <type>std::enable_if&lt; std::is_base_of&lt; FactorType, DERIVEDFACTOR &gt;::value &gt;::type</type>
      <name>add</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>af7cc4c74b62998b22c95cb525bda0547</anchor>
      <arglist>(boost::shared_ptr&lt; DERIVEDFACTOR &gt; factor)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>a9bc0c118e19c269d8e2951183d1c493e</anchor>
      <arglist>(const sharedFactor &amp;factor)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>a243182115ecfb081a1605fea939f86f4</anchor>
      <arglist>(const FACTOR_OR_CONTAINER &amp;factorOrContainer)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>a06c9c6d855c390743bd4a4472c730687</anchor>
      <arglist>(const std::string &amp;s=&quot;FactorGraph&quot;, const KeyFormatter &amp;formatter=DefaultKeyFormatter) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>equals</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>aacdf24691d25e1e93ca6b924465b7a35</anchor>
      <arglist>(const This &amp;fg, double tol=1e-9) const</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>size</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>a76fb453800c9ac164bef864782733403</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>empty</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>a0ed8834089b31ef96888643af4731a8a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const sharedFactor</type>
      <name>at</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>aec104a9847783a29065fd4d24f072b7a</anchor>
      <arglist>(size_t i) const</arglist>
    </member>
    <member kind="function">
      <type>sharedFactor &amp;</type>
      <name>at</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>a643fa29b7e95aab4c80169729492efd1</anchor>
      <arglist>(size_t i)</arglist>
    </member>
    <member kind="function">
      <type>const sharedFactor</type>
      <name>operator[]</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>ad00637b3f124aec8b4047faea5b5647b</anchor>
      <arglist>(size_t i) const</arglist>
    </member>
    <member kind="function">
      <type>sharedFactor &amp;</type>
      <name>operator[]</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>abcc88a56126d4715cc8a7de9ff3c34af</anchor>
      <arglist>(size_t i)</arglist>
    </member>
    <member kind="function">
      <type>const_iterator</type>
      <name>begin</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>abcaeffeae20930806f064f8413689c22</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const_iterator</type>
      <name>end</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>a94a257708f3530799e24d21f3125e181</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>sharedFactor</type>
      <name>front</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>a8aad182ded37c5add184e0113ec9ede9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>sharedFactor</type>
      <name>back</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>a37859ce7d210d593be80f625eceba620</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>begin</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>abaf0875f55936063d96c507de9e9255a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>end</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>ad6e1c6a2b56c2158afb28a58ab560e44</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resize</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>a231dd81b4751a9bccc3c89f35f76961e</anchor>
      <arglist>(size_t size)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>remove</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>a38468469269d7b6530cf4d32b4e462d1</anchor>
      <arglist>(size_t i)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>replace</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>aa706ee0e285f6c1a38e6a4446fe9ea4e</anchor>
      <arglist>(size_t index, sharedFactor factor)</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>erase</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>a22f324974f6e3380c54d1d69c71bc7fb</anchor>
      <arglist>(iterator item)</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>erase</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>a2825a68630a0547e1bfd5ba0cdf1de61</anchor>
      <arglist>(iterator first, iterator last)</arglist>
    </member>
    <member kind="typedef">
      <type>NonlinearFactor</type>
      <name>FactorType</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>aa54fb0b66fd8fee9f3c1f2844cf3edef</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; NonlinearFactor &gt;</type>
      <name>sharedFactor</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>ac9bfc88025d21ff01b7e9dc609ba0b0e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>FactorGraph</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>a42db0a1062eb6c223b0a186a9d34cb4b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>FactorGraph</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>a63a80ba5a22fee5725d0efa75080cdfb</anchor>
      <arglist>(ITERATOR firstFactor, ITERATOR lastFactor)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>FactorGraph</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>a37b5e74d2c3711906f57982b4512351f</anchor>
      <arglist>(const CONTAINER &amp;factors)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>FastVector&lt; sharedFactor &gt;</type>
      <name>factors_</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>ae0c75f68e3ebc37cc4511285b12c33fc</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>FactorGraph&lt; SymbolicConditional &gt;</name>
    <filename>a02887.html</filename>
    <member kind="friend">
      <type>friend class</type>
      <name>boost::serialization::access</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>ac98d07dd8f7b70e16ccb9a01abf56b9c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>nrFactors</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>a761f1022dadf60e2cacca304ab0533b4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>KeySet</type>
      <name>keys</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>a0c4667de76265a06cc6f74b1f3b25051</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>KeyVector</type>
      <name>keyVector</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>a3b4d9bbaceeb9043ab7c20d4778b69c5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>exists</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>acbf8cdf50816d4a0571f6b9b6254f9ce</anchor>
      <arglist>(size_t idx) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>FactorGraph</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>a42db0a1062eb6c223b0a186a9d34cb4b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>FactorGraph</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>a63a80ba5a22fee5725d0efa75080cdfb</anchor>
      <arglist>(ITERATOR firstFactor, ITERATOR lastFactor)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>FactorGraph</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>a37b5e74d2c3711906f57982b4512351f</anchor>
      <arglist>(const CONTAINER &amp;factors)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reserve</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>afea8c7bf4fd19ccc1547be3a5d1834f6</anchor>
      <arglist>(size_t size)</arglist>
    </member>
    <member kind="function">
      <type>std::enable_if&lt; std::is_base_of&lt; FactorType, DERIVEDFACTOR &gt;::value &gt;::type</type>
      <name>push_back</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>a28fcfc8fcc5ac3068af271a821e31621</anchor>
      <arglist>(boost::shared_ptr&lt; DERIVEDFACTOR &gt; factor)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>push_back</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>aeaa4b43fb9b7111b478d3a96a3aa0e20</anchor>
      <arglist>(const sharedFactor &amp;factor)</arglist>
    </member>
    <member kind="function">
      <type>std::enable_if&lt; std::is_base_of&lt; FactorType, typename ITERATOR::value_type::element_type &gt;::value &gt;::type</type>
      <name>push_back</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>af1158e556a9a5efa64a05667bfcf038b</anchor>
      <arglist>(ITERATOR firstFactor, ITERATOR lastFactor)</arglist>
    </member>
    <member kind="function">
      <type>std::enable_if&lt; std::is_base_of&lt; FactorType, typename CONTAINER::value_type::element_type &gt;::value &gt;::type</type>
      <name>push_back</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>a2b539f79df46e9f5a07b179fc632fd67</anchor>
      <arglist>(const CONTAINER &amp;container)</arglist>
    </member>
    <member kind="function">
      <type>std::enable_if&lt; std::is_base_of&lt; This, typename CLIQUE::FactorGraphType &gt;::value &gt;::type</type>
      <name>push_back</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>a7b06bb023c4e23edc3cff4a3fc6a2906</anchor>
      <arglist>(const BayesTree&lt; CLIQUE &gt; &amp;bayesTree)</arglist>
    </member>
    <member kind="function">
      <type>std::enable_if&lt; std::is_base_of&lt; FactorType, DERIVEDFACTOR &gt;::value &gt;::type</type>
      <name>push_back</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>af2c15ab7a1b0e1a05a80f6ec527eee84</anchor>
      <arglist>(const DERIVEDFACTOR &amp;factor)</arglist>
    </member>
    <member kind="function">
      <type>std::enable_if&lt; std::is_base_of&lt; FactorType, typename ITERATOR::value_type &gt;::value &gt;::type</type>
      <name>push_back</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>a7b0873f24893a29e260ef5199df3cbd7</anchor>
      <arglist>(ITERATOR firstFactor, ITERATOR lastFactor)</arglist>
    </member>
    <member kind="function">
      <type>std::enable_if&lt; std::is_base_of&lt; FactorType, typename CONTAINER::value_type &gt;::value &gt;::type</type>
      <name>push_back</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>a171b2e48cdc4c59479c6c5311118e454</anchor>
      <arglist>(const CONTAINER &amp;container)</arglist>
    </member>
    <member kind="function">
      <type>std::enable_if&lt; std::is_base_of&lt; FactorType, DERIVEDFACTOR &gt;::value &gt;::type</type>
      <name>emplace_shared</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>a8e64fe7be32c2602bb509d18d2bfd491</anchor>
      <arglist>(Args &amp;&amp;... args)</arglist>
    </member>
    <member kind="function">
      <type>std::enable_if&lt; std::is_base_of&lt; FactorType, DERIVEDFACTOR &gt;::value, boost::assign::list_inserter&lt; RefCallPushBack&lt; This &gt; &gt; &gt;::type</type>
      <name>operator+=</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>aff46073025c2e79624602d7a0a5a3183</anchor>
      <arglist>(boost::shared_ptr&lt; DERIVEDFACTOR &gt; factor)</arglist>
    </member>
    <member kind="function">
      <type>boost::assign::list_inserter&lt; CRefCallPushBack&lt; This &gt; &gt;</type>
      <name>operator+=</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>a0584d686cc8431728029c920a2ab08b2</anchor>
      <arglist>(const sharedFactor &amp;factor)</arglist>
    </member>
    <member kind="function">
      <type>boost::assign::list_inserter&lt; CRefCallPushBack&lt; This &gt; &gt;</type>
      <name>operator+=</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>af97f5c19a7ae3f09a60ecb7a05ad2ff3</anchor>
      <arglist>(const FACTOR_OR_CONTAINER &amp;factorOrContainer)</arglist>
    </member>
    <member kind="function">
      <type>std::enable_if&lt; std::is_base_of&lt; FactorType, DERIVEDFACTOR &gt;::value &gt;::type</type>
      <name>add</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>af7cc4c74b62998b22c95cb525bda0547</anchor>
      <arglist>(boost::shared_ptr&lt; DERIVEDFACTOR &gt; factor)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>a9bc0c118e19c269d8e2951183d1c493e</anchor>
      <arglist>(const sharedFactor &amp;factor)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>a243182115ecfb081a1605fea939f86f4</anchor>
      <arglist>(const FACTOR_OR_CONTAINER &amp;factorOrContainer)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>a06c9c6d855c390743bd4a4472c730687</anchor>
      <arglist>(const std::string &amp;s=&quot;FactorGraph&quot;, const KeyFormatter &amp;formatter=DefaultKeyFormatter) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>equals</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>aacdf24691d25e1e93ca6b924465b7a35</anchor>
      <arglist>(const This &amp;fg, double tol=1e-9) const</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>size</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>a76fb453800c9ac164bef864782733403</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>empty</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>a0ed8834089b31ef96888643af4731a8a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const sharedFactor</type>
      <name>at</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>aec104a9847783a29065fd4d24f072b7a</anchor>
      <arglist>(size_t i) const</arglist>
    </member>
    <member kind="function">
      <type>sharedFactor &amp;</type>
      <name>at</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>a643fa29b7e95aab4c80169729492efd1</anchor>
      <arglist>(size_t i)</arglist>
    </member>
    <member kind="function">
      <type>const sharedFactor</type>
      <name>operator[]</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>ad00637b3f124aec8b4047faea5b5647b</anchor>
      <arglist>(size_t i) const</arglist>
    </member>
    <member kind="function">
      <type>sharedFactor &amp;</type>
      <name>operator[]</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>abcc88a56126d4715cc8a7de9ff3c34af</anchor>
      <arglist>(size_t i)</arglist>
    </member>
    <member kind="function">
      <type>const_iterator</type>
      <name>begin</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>abcaeffeae20930806f064f8413689c22</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const_iterator</type>
      <name>end</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>a94a257708f3530799e24d21f3125e181</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>sharedFactor</type>
      <name>front</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>a8aad182ded37c5add184e0113ec9ede9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>sharedFactor</type>
      <name>back</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>a37859ce7d210d593be80f625eceba620</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>begin</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>abaf0875f55936063d96c507de9e9255a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>end</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>ad6e1c6a2b56c2158afb28a58ab560e44</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resize</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>a231dd81b4751a9bccc3c89f35f76961e</anchor>
      <arglist>(size_t size)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>remove</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>a38468469269d7b6530cf4d32b4e462d1</anchor>
      <arglist>(size_t i)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>replace</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>aa706ee0e285f6c1a38e6a4446fe9ea4e</anchor>
      <arglist>(size_t index, sharedFactor factor)</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>erase</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>a22f324974f6e3380c54d1d69c71bc7fb</anchor>
      <arglist>(iterator item)</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>erase</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>a2825a68630a0547e1bfd5ba0cdf1de61</anchor>
      <arglist>(iterator first, iterator last)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reserve</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>afea8c7bf4fd19ccc1547be3a5d1834f6</anchor>
      <arglist>(size_t size)</arglist>
    </member>
    <member kind="function">
      <type>std::enable_if&lt; std::is_base_of&lt; FactorType, DERIVEDFACTOR &gt;::value &gt;::type</type>
      <name>push_back</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>a28fcfc8fcc5ac3068af271a821e31621</anchor>
      <arglist>(boost::shared_ptr&lt; DERIVEDFACTOR &gt; factor)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>push_back</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>aeaa4b43fb9b7111b478d3a96a3aa0e20</anchor>
      <arglist>(const sharedFactor &amp;factor)</arglist>
    </member>
    <member kind="function">
      <type>std::enable_if&lt; std::is_base_of&lt; FactorType, typename ITERATOR::value_type::element_type &gt;::value &gt;::type</type>
      <name>push_back</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>af1158e556a9a5efa64a05667bfcf038b</anchor>
      <arglist>(ITERATOR firstFactor, ITERATOR lastFactor)</arglist>
    </member>
    <member kind="function">
      <type>std::enable_if&lt; std::is_base_of&lt; FactorType, typename CONTAINER::value_type::element_type &gt;::value &gt;::type</type>
      <name>push_back</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>a2b539f79df46e9f5a07b179fc632fd67</anchor>
      <arglist>(const CONTAINER &amp;container)</arglist>
    </member>
    <member kind="function">
      <type>std::enable_if&lt; std::is_base_of&lt; This, typename CLIQUE::FactorGraphType &gt;::value &gt;::type</type>
      <name>push_back</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>a7b06bb023c4e23edc3cff4a3fc6a2906</anchor>
      <arglist>(const BayesTree&lt; CLIQUE &gt; &amp;bayesTree)</arglist>
    </member>
    <member kind="function">
      <type>std::enable_if&lt; std::is_base_of&lt; FactorType, DERIVEDFACTOR &gt;::value &gt;::type</type>
      <name>push_back</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>af2c15ab7a1b0e1a05a80f6ec527eee84</anchor>
      <arglist>(const DERIVEDFACTOR &amp;factor)</arglist>
    </member>
    <member kind="function">
      <type>std::enable_if&lt; std::is_base_of&lt; FactorType, typename ITERATOR::value_type &gt;::value &gt;::type</type>
      <name>push_back</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>a7b0873f24893a29e260ef5199df3cbd7</anchor>
      <arglist>(ITERATOR firstFactor, ITERATOR lastFactor)</arglist>
    </member>
    <member kind="function">
      <type>std::enable_if&lt; std::is_base_of&lt; FactorType, typename CONTAINER::value_type &gt;::value &gt;::type</type>
      <name>push_back</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>a171b2e48cdc4c59479c6c5311118e454</anchor>
      <arglist>(const CONTAINER &amp;container)</arglist>
    </member>
    <member kind="function">
      <type>std::enable_if&lt; std::is_base_of&lt; FactorType, DERIVEDFACTOR &gt;::value &gt;::type</type>
      <name>emplace_shared</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>a8e64fe7be32c2602bb509d18d2bfd491</anchor>
      <arglist>(Args &amp;&amp;... args)</arglist>
    </member>
    <member kind="function">
      <type>std::enable_if&lt; std::is_base_of&lt; FactorType, DERIVEDFACTOR &gt;::value, boost::assign::list_inserter&lt; RefCallPushBack&lt; This &gt; &gt; &gt;::type</type>
      <name>operator+=</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>aff46073025c2e79624602d7a0a5a3183</anchor>
      <arglist>(boost::shared_ptr&lt; DERIVEDFACTOR &gt; factor)</arglist>
    </member>
    <member kind="function">
      <type>boost::assign::list_inserter&lt; CRefCallPushBack&lt; This &gt; &gt;</type>
      <name>operator+=</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>a0584d686cc8431728029c920a2ab08b2</anchor>
      <arglist>(const sharedFactor &amp;factor)</arglist>
    </member>
    <member kind="function">
      <type>boost::assign::list_inserter&lt; CRefCallPushBack&lt; This &gt; &gt;</type>
      <name>operator+=</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>af97f5c19a7ae3f09a60ecb7a05ad2ff3</anchor>
      <arglist>(const FACTOR_OR_CONTAINER &amp;factorOrContainer)</arglist>
    </member>
    <member kind="function">
      <type>std::enable_if&lt; std::is_base_of&lt; FactorType, DERIVEDFACTOR &gt;::value &gt;::type</type>
      <name>add</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>af7cc4c74b62998b22c95cb525bda0547</anchor>
      <arglist>(boost::shared_ptr&lt; DERIVEDFACTOR &gt; factor)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>a9bc0c118e19c269d8e2951183d1c493e</anchor>
      <arglist>(const sharedFactor &amp;factor)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>a243182115ecfb081a1605fea939f86f4</anchor>
      <arglist>(const FACTOR_OR_CONTAINER &amp;factorOrContainer)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>a06c9c6d855c390743bd4a4472c730687</anchor>
      <arglist>(const std::string &amp;s=&quot;FactorGraph&quot;, const KeyFormatter &amp;formatter=DefaultKeyFormatter) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>equals</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>aacdf24691d25e1e93ca6b924465b7a35</anchor>
      <arglist>(const This &amp;fg, double tol=1e-9) const</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>size</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>a76fb453800c9ac164bef864782733403</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>empty</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>a0ed8834089b31ef96888643af4731a8a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const sharedFactor</type>
      <name>at</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>aec104a9847783a29065fd4d24f072b7a</anchor>
      <arglist>(size_t i) const</arglist>
    </member>
    <member kind="function">
      <type>sharedFactor &amp;</type>
      <name>at</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>a643fa29b7e95aab4c80169729492efd1</anchor>
      <arglist>(size_t i)</arglist>
    </member>
    <member kind="function">
      <type>const sharedFactor</type>
      <name>operator[]</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>ad00637b3f124aec8b4047faea5b5647b</anchor>
      <arglist>(size_t i) const</arglist>
    </member>
    <member kind="function">
      <type>sharedFactor &amp;</type>
      <name>operator[]</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>abcc88a56126d4715cc8a7de9ff3c34af</anchor>
      <arglist>(size_t i)</arglist>
    </member>
    <member kind="function">
      <type>const_iterator</type>
      <name>begin</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>abcaeffeae20930806f064f8413689c22</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const_iterator</type>
      <name>end</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>a94a257708f3530799e24d21f3125e181</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>sharedFactor</type>
      <name>front</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>a8aad182ded37c5add184e0113ec9ede9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>sharedFactor</type>
      <name>back</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>a37859ce7d210d593be80f625eceba620</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>begin</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>abaf0875f55936063d96c507de9e9255a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>end</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>ad6e1c6a2b56c2158afb28a58ab560e44</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resize</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>a231dd81b4751a9bccc3c89f35f76961e</anchor>
      <arglist>(size_t size)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>remove</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>a38468469269d7b6530cf4d32b4e462d1</anchor>
      <arglist>(size_t i)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>replace</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>aa706ee0e285f6c1a38e6a4446fe9ea4e</anchor>
      <arglist>(size_t index, sharedFactor factor)</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>erase</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>a22f324974f6e3380c54d1d69c71bc7fb</anchor>
      <arglist>(iterator item)</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>erase</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>a2825a68630a0547e1bfd5ba0cdf1de61</anchor>
      <arglist>(iterator first, iterator last)</arglist>
    </member>
    <member kind="typedef">
      <type>SymbolicConditional</type>
      <name>FactorType</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>aa54fb0b66fd8fee9f3c1f2844cf3edef</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; SymbolicConditional &gt;</type>
      <name>sharedFactor</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>ac9bfc88025d21ff01b7e9dc609ba0b0e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>FactorGraph</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>a42db0a1062eb6c223b0a186a9d34cb4b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>FactorGraph</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>a63a80ba5a22fee5725d0efa75080cdfb</anchor>
      <arglist>(ITERATOR firstFactor, ITERATOR lastFactor)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>FactorGraph</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>a37b5e74d2c3711906f57982b4512351f</anchor>
      <arglist>(const CONTAINER &amp;factors)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>FastVector&lt; sharedFactor &gt;</type>
      <name>factors_</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>ae0c75f68e3ebc37cc4511285b12c33fc</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>FactorGraph&lt; SymbolicFactor &gt;</name>
    <filename>a02887.html</filename>
    <member kind="friend">
      <type>friend class</type>
      <name>boost::serialization::access</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>ac98d07dd8f7b70e16ccb9a01abf56b9c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>nrFactors</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>a761f1022dadf60e2cacca304ab0533b4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>KeySet</type>
      <name>keys</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>a0c4667de76265a06cc6f74b1f3b25051</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>KeyVector</type>
      <name>keyVector</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>a3b4d9bbaceeb9043ab7c20d4778b69c5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>exists</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>acbf8cdf50816d4a0571f6b9b6254f9ce</anchor>
      <arglist>(size_t idx) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>FactorGraph</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>a42db0a1062eb6c223b0a186a9d34cb4b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>FactorGraph</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>a63a80ba5a22fee5725d0efa75080cdfb</anchor>
      <arglist>(ITERATOR firstFactor, ITERATOR lastFactor)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>FactorGraph</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>a37b5e74d2c3711906f57982b4512351f</anchor>
      <arglist>(const CONTAINER &amp;factors)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reserve</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>afea8c7bf4fd19ccc1547be3a5d1834f6</anchor>
      <arglist>(size_t size)</arglist>
    </member>
    <member kind="function">
      <type>std::enable_if&lt; std::is_base_of&lt; FactorType, DERIVEDFACTOR &gt;::value &gt;::type</type>
      <name>push_back</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>a28fcfc8fcc5ac3068af271a821e31621</anchor>
      <arglist>(boost::shared_ptr&lt; DERIVEDFACTOR &gt; factor)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>push_back</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>aeaa4b43fb9b7111b478d3a96a3aa0e20</anchor>
      <arglist>(const sharedFactor &amp;factor)</arglist>
    </member>
    <member kind="function">
      <type>std::enable_if&lt; std::is_base_of&lt; FactorType, typename ITERATOR::value_type::element_type &gt;::value &gt;::type</type>
      <name>push_back</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>af1158e556a9a5efa64a05667bfcf038b</anchor>
      <arglist>(ITERATOR firstFactor, ITERATOR lastFactor)</arglist>
    </member>
    <member kind="function">
      <type>std::enable_if&lt; std::is_base_of&lt; FactorType, typename CONTAINER::value_type::element_type &gt;::value &gt;::type</type>
      <name>push_back</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>a2b539f79df46e9f5a07b179fc632fd67</anchor>
      <arglist>(const CONTAINER &amp;container)</arglist>
    </member>
    <member kind="function">
      <type>std::enable_if&lt; std::is_base_of&lt; This, typename CLIQUE::FactorGraphType &gt;::value &gt;::type</type>
      <name>push_back</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>a7b06bb023c4e23edc3cff4a3fc6a2906</anchor>
      <arglist>(const BayesTree&lt; CLIQUE &gt; &amp;bayesTree)</arglist>
    </member>
    <member kind="function">
      <type>std::enable_if&lt; std::is_base_of&lt; FactorType, DERIVEDFACTOR &gt;::value &gt;::type</type>
      <name>push_back</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>af2c15ab7a1b0e1a05a80f6ec527eee84</anchor>
      <arglist>(const DERIVEDFACTOR &amp;factor)</arglist>
    </member>
    <member kind="function">
      <type>std::enable_if&lt; std::is_base_of&lt; FactorType, typename ITERATOR::value_type &gt;::value &gt;::type</type>
      <name>push_back</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>a7b0873f24893a29e260ef5199df3cbd7</anchor>
      <arglist>(ITERATOR firstFactor, ITERATOR lastFactor)</arglist>
    </member>
    <member kind="function">
      <type>std::enable_if&lt; std::is_base_of&lt; FactorType, typename CONTAINER::value_type &gt;::value &gt;::type</type>
      <name>push_back</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>a171b2e48cdc4c59479c6c5311118e454</anchor>
      <arglist>(const CONTAINER &amp;container)</arglist>
    </member>
    <member kind="function">
      <type>std::enable_if&lt; std::is_base_of&lt; FactorType, DERIVEDFACTOR &gt;::value &gt;::type</type>
      <name>emplace_shared</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>a8e64fe7be32c2602bb509d18d2bfd491</anchor>
      <arglist>(Args &amp;&amp;... args)</arglist>
    </member>
    <member kind="function">
      <type>std::enable_if&lt; std::is_base_of&lt; FactorType, DERIVEDFACTOR &gt;::value, boost::assign::list_inserter&lt; RefCallPushBack&lt; This &gt; &gt; &gt;::type</type>
      <name>operator+=</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>aff46073025c2e79624602d7a0a5a3183</anchor>
      <arglist>(boost::shared_ptr&lt; DERIVEDFACTOR &gt; factor)</arglist>
    </member>
    <member kind="function">
      <type>boost::assign::list_inserter&lt; CRefCallPushBack&lt; This &gt; &gt;</type>
      <name>operator+=</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>a0584d686cc8431728029c920a2ab08b2</anchor>
      <arglist>(const sharedFactor &amp;factor)</arglist>
    </member>
    <member kind="function">
      <type>boost::assign::list_inserter&lt; CRefCallPushBack&lt; This &gt; &gt;</type>
      <name>operator+=</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>af97f5c19a7ae3f09a60ecb7a05ad2ff3</anchor>
      <arglist>(const FACTOR_OR_CONTAINER &amp;factorOrContainer)</arglist>
    </member>
    <member kind="function">
      <type>std::enable_if&lt; std::is_base_of&lt; FactorType, DERIVEDFACTOR &gt;::value &gt;::type</type>
      <name>add</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>af7cc4c74b62998b22c95cb525bda0547</anchor>
      <arglist>(boost::shared_ptr&lt; DERIVEDFACTOR &gt; factor)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>a9bc0c118e19c269d8e2951183d1c493e</anchor>
      <arglist>(const sharedFactor &amp;factor)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>a243182115ecfb081a1605fea939f86f4</anchor>
      <arglist>(const FACTOR_OR_CONTAINER &amp;factorOrContainer)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>a06c9c6d855c390743bd4a4472c730687</anchor>
      <arglist>(const std::string &amp;s=&quot;FactorGraph&quot;, const KeyFormatter &amp;formatter=DefaultKeyFormatter) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>equals</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>aacdf24691d25e1e93ca6b924465b7a35</anchor>
      <arglist>(const This &amp;fg, double tol=1e-9) const</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>size</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>a76fb453800c9ac164bef864782733403</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>empty</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>a0ed8834089b31ef96888643af4731a8a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const sharedFactor</type>
      <name>at</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>aec104a9847783a29065fd4d24f072b7a</anchor>
      <arglist>(size_t i) const</arglist>
    </member>
    <member kind="function">
      <type>sharedFactor &amp;</type>
      <name>at</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>a643fa29b7e95aab4c80169729492efd1</anchor>
      <arglist>(size_t i)</arglist>
    </member>
    <member kind="function">
      <type>const sharedFactor</type>
      <name>operator[]</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>ad00637b3f124aec8b4047faea5b5647b</anchor>
      <arglist>(size_t i) const</arglist>
    </member>
    <member kind="function">
      <type>sharedFactor &amp;</type>
      <name>operator[]</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>abcc88a56126d4715cc8a7de9ff3c34af</anchor>
      <arglist>(size_t i)</arglist>
    </member>
    <member kind="function">
      <type>const_iterator</type>
      <name>begin</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>abcaeffeae20930806f064f8413689c22</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const_iterator</type>
      <name>end</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>a94a257708f3530799e24d21f3125e181</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>sharedFactor</type>
      <name>front</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>a8aad182ded37c5add184e0113ec9ede9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>sharedFactor</type>
      <name>back</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>a37859ce7d210d593be80f625eceba620</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>begin</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>abaf0875f55936063d96c507de9e9255a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>end</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>ad6e1c6a2b56c2158afb28a58ab560e44</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resize</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>a231dd81b4751a9bccc3c89f35f76961e</anchor>
      <arglist>(size_t size)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>remove</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>a38468469269d7b6530cf4d32b4e462d1</anchor>
      <arglist>(size_t i)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>replace</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>aa706ee0e285f6c1a38e6a4446fe9ea4e</anchor>
      <arglist>(size_t index, sharedFactor factor)</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>erase</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>a22f324974f6e3380c54d1d69c71bc7fb</anchor>
      <arglist>(iterator item)</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>erase</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>a2825a68630a0547e1bfd5ba0cdf1de61</anchor>
      <arglist>(iterator first, iterator last)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reserve</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>afea8c7bf4fd19ccc1547be3a5d1834f6</anchor>
      <arglist>(size_t size)</arglist>
    </member>
    <member kind="function">
      <type>std::enable_if&lt; std::is_base_of&lt; FactorType, DERIVEDFACTOR &gt;::value &gt;::type</type>
      <name>push_back</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>a28fcfc8fcc5ac3068af271a821e31621</anchor>
      <arglist>(boost::shared_ptr&lt; DERIVEDFACTOR &gt; factor)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>push_back</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>aeaa4b43fb9b7111b478d3a96a3aa0e20</anchor>
      <arglist>(const sharedFactor &amp;factor)</arglist>
    </member>
    <member kind="function">
      <type>std::enable_if&lt; std::is_base_of&lt; FactorType, typename ITERATOR::value_type::element_type &gt;::value &gt;::type</type>
      <name>push_back</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>af1158e556a9a5efa64a05667bfcf038b</anchor>
      <arglist>(ITERATOR firstFactor, ITERATOR lastFactor)</arglist>
    </member>
    <member kind="function">
      <type>std::enable_if&lt; std::is_base_of&lt; FactorType, typename CONTAINER::value_type::element_type &gt;::value &gt;::type</type>
      <name>push_back</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>a2b539f79df46e9f5a07b179fc632fd67</anchor>
      <arglist>(const CONTAINER &amp;container)</arglist>
    </member>
    <member kind="function">
      <type>std::enable_if&lt; std::is_base_of&lt; This, typename CLIQUE::FactorGraphType &gt;::value &gt;::type</type>
      <name>push_back</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>a7b06bb023c4e23edc3cff4a3fc6a2906</anchor>
      <arglist>(const BayesTree&lt; CLIQUE &gt; &amp;bayesTree)</arglist>
    </member>
    <member kind="function">
      <type>std::enable_if&lt; std::is_base_of&lt; FactorType, DERIVEDFACTOR &gt;::value &gt;::type</type>
      <name>push_back</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>af2c15ab7a1b0e1a05a80f6ec527eee84</anchor>
      <arglist>(const DERIVEDFACTOR &amp;factor)</arglist>
    </member>
    <member kind="function">
      <type>std::enable_if&lt; std::is_base_of&lt; FactorType, typename ITERATOR::value_type &gt;::value &gt;::type</type>
      <name>push_back</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>a7b0873f24893a29e260ef5199df3cbd7</anchor>
      <arglist>(ITERATOR firstFactor, ITERATOR lastFactor)</arglist>
    </member>
    <member kind="function">
      <type>std::enable_if&lt; std::is_base_of&lt; FactorType, typename CONTAINER::value_type &gt;::value &gt;::type</type>
      <name>push_back</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>a171b2e48cdc4c59479c6c5311118e454</anchor>
      <arglist>(const CONTAINER &amp;container)</arglist>
    </member>
    <member kind="function">
      <type>std::enable_if&lt; std::is_base_of&lt; FactorType, DERIVEDFACTOR &gt;::value &gt;::type</type>
      <name>emplace_shared</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>a8e64fe7be32c2602bb509d18d2bfd491</anchor>
      <arglist>(Args &amp;&amp;... args)</arglist>
    </member>
    <member kind="function">
      <type>std::enable_if&lt; std::is_base_of&lt; FactorType, DERIVEDFACTOR &gt;::value, boost::assign::list_inserter&lt; RefCallPushBack&lt; This &gt; &gt; &gt;::type</type>
      <name>operator+=</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>aff46073025c2e79624602d7a0a5a3183</anchor>
      <arglist>(boost::shared_ptr&lt; DERIVEDFACTOR &gt; factor)</arglist>
    </member>
    <member kind="function">
      <type>boost::assign::list_inserter&lt; CRefCallPushBack&lt; This &gt; &gt;</type>
      <name>operator+=</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>a0584d686cc8431728029c920a2ab08b2</anchor>
      <arglist>(const sharedFactor &amp;factor)</arglist>
    </member>
    <member kind="function">
      <type>boost::assign::list_inserter&lt; CRefCallPushBack&lt; This &gt; &gt;</type>
      <name>operator+=</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>af97f5c19a7ae3f09a60ecb7a05ad2ff3</anchor>
      <arglist>(const FACTOR_OR_CONTAINER &amp;factorOrContainer)</arglist>
    </member>
    <member kind="function">
      <type>std::enable_if&lt; std::is_base_of&lt; FactorType, DERIVEDFACTOR &gt;::value &gt;::type</type>
      <name>add</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>af7cc4c74b62998b22c95cb525bda0547</anchor>
      <arglist>(boost::shared_ptr&lt; DERIVEDFACTOR &gt; factor)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>a9bc0c118e19c269d8e2951183d1c493e</anchor>
      <arglist>(const sharedFactor &amp;factor)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>a243182115ecfb081a1605fea939f86f4</anchor>
      <arglist>(const FACTOR_OR_CONTAINER &amp;factorOrContainer)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>a06c9c6d855c390743bd4a4472c730687</anchor>
      <arglist>(const std::string &amp;s=&quot;FactorGraph&quot;, const KeyFormatter &amp;formatter=DefaultKeyFormatter) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>equals</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>aacdf24691d25e1e93ca6b924465b7a35</anchor>
      <arglist>(const This &amp;fg, double tol=1e-9) const</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>size</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>a76fb453800c9ac164bef864782733403</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>empty</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>a0ed8834089b31ef96888643af4731a8a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const sharedFactor</type>
      <name>at</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>aec104a9847783a29065fd4d24f072b7a</anchor>
      <arglist>(size_t i) const</arglist>
    </member>
    <member kind="function">
      <type>sharedFactor &amp;</type>
      <name>at</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>a643fa29b7e95aab4c80169729492efd1</anchor>
      <arglist>(size_t i)</arglist>
    </member>
    <member kind="function">
      <type>const sharedFactor</type>
      <name>operator[]</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>ad00637b3f124aec8b4047faea5b5647b</anchor>
      <arglist>(size_t i) const</arglist>
    </member>
    <member kind="function">
      <type>sharedFactor &amp;</type>
      <name>operator[]</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>abcc88a56126d4715cc8a7de9ff3c34af</anchor>
      <arglist>(size_t i)</arglist>
    </member>
    <member kind="function">
      <type>const_iterator</type>
      <name>begin</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>abcaeffeae20930806f064f8413689c22</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const_iterator</type>
      <name>end</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>a94a257708f3530799e24d21f3125e181</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>sharedFactor</type>
      <name>front</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>a8aad182ded37c5add184e0113ec9ede9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>sharedFactor</type>
      <name>back</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>a37859ce7d210d593be80f625eceba620</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>begin</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>abaf0875f55936063d96c507de9e9255a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>end</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>ad6e1c6a2b56c2158afb28a58ab560e44</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resize</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>a231dd81b4751a9bccc3c89f35f76961e</anchor>
      <arglist>(size_t size)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>remove</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>a38468469269d7b6530cf4d32b4e462d1</anchor>
      <arglist>(size_t i)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>replace</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>aa706ee0e285f6c1a38e6a4446fe9ea4e</anchor>
      <arglist>(size_t index, sharedFactor factor)</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>erase</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>a22f324974f6e3380c54d1d69c71bc7fb</anchor>
      <arglist>(iterator item)</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>erase</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>a2825a68630a0547e1bfd5ba0cdf1de61</anchor>
      <arglist>(iterator first, iterator last)</arglist>
    </member>
    <member kind="typedef">
      <type>SymbolicFactor</type>
      <name>FactorType</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>aa54fb0b66fd8fee9f3c1f2844cf3edef</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; SymbolicFactor &gt;</type>
      <name>sharedFactor</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>ac9bfc88025d21ff01b7e9dc609ba0b0e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>FactorGraph</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>a42db0a1062eb6c223b0a186a9d34cb4b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>FactorGraph</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>a63a80ba5a22fee5725d0efa75080cdfb</anchor>
      <arglist>(ITERATOR firstFactor, ITERATOR lastFactor)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>FactorGraph</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>a37b5e74d2c3711906f57982b4512351f</anchor>
      <arglist>(const CONTAINER &amp;factors)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>FastVector&lt; sharedFactor &gt;</type>
      <name>factors_</name>
      <anchorfile>a02887.html</anchorfile>
      <anchor>ae0c75f68e3ebc37cc4511285b12c33fc</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::noiseModel::mEstimator::Fair</name>
    <filename>a03251.html</filename>
    <base>gtsam::noiseModel::mEstimator::Base</base>
    <member kind="friend">
      <type>friend class</type>
      <name>boost::serialization::access</name>
      <anchorfile>a03251.html</anchorfile>
      <anchor>ac98d07dd8f7b70e16ccb9a01abf56b9c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>gtsam::internal::FastDefaultAllocator</name>
    <filename>a02015.html</filename>
    <templarg>T</templarg>
  </compound>
  <compound kind="struct">
    <name>gtsam::internal::FastDefaultVectorAllocator</name>
    <filename>a02019.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="class">
    <name>gtsam::FastList</name>
    <filename>a02023.html</filename>
    <templarg>VALUE</templarg>
    <member kind="function">
      <type></type>
      <name>FastList</name>
      <anchorfile>a02023.html</anchorfile>
      <anchor>a4ddfad84c21aa8e028650085d28e64e1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>FastList</name>
      <anchorfile>a02023.html</anchorfile>
      <anchor>a4b392c0cdea93c6af52956ccf6282f44</anchor>
      <arglist>(INPUTITERATOR first, INPUTITERATOR last)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>FastList</name>
      <anchorfile>a02023.html</anchorfile>
      <anchor>a64ede4dd260eb040bf895828796af872</anchor>
      <arglist>(const FastList&lt; VALUE &gt; &amp;x)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>FastList</name>
      <anchorfile>a02023.html</anchorfile>
      <anchor>ad71cc6bc403f46960f54c75bc956093f</anchor>
      <arglist>(const Base &amp;x)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator std::list&lt; VALUE &gt;</name>
      <anchorfile>a02023.html</anchorfile>
      <anchor>a7c6e1a66ccf6adc94022389c3d81af55</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>boost::serialization::access</name>
      <anchorfile>a02023.html</anchorfile>
      <anchor>ac98d07dd8f7b70e16ccb9a01abf56b9c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>FastList&lt; Vector &gt;</name>
    <filename>a02023.html</filename>
    <member kind="function">
      <type></type>
      <name>FastList</name>
      <anchorfile>a02023.html</anchorfile>
      <anchor>a4ddfad84c21aa8e028650085d28e64e1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>FastList</name>
      <anchorfile>a02023.html</anchorfile>
      <anchor>a4b392c0cdea93c6af52956ccf6282f44</anchor>
      <arglist>(INPUTITERATOR first, INPUTITERATOR last)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>FastList</name>
      <anchorfile>a02023.html</anchorfile>
      <anchor>a64ede4dd260eb040bf895828796af872</anchor>
      <arglist>(const FastList&lt; Vector &gt; &amp;x)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>FastList</name>
      <anchorfile>a02023.html</anchorfile>
      <anchor>ad71cc6bc403f46960f54c75bc956093f</anchor>
      <arglist>(const Base &amp;x)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator std::list&lt; Vector &gt;</name>
      <anchorfile>a02023.html</anchorfile>
      <anchor>a7c6e1a66ccf6adc94022389c3d81af55</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>boost::serialization::access</name>
      <anchorfile>a02023.html</anchorfile>
      <anchor>ac98d07dd8f7b70e16ccb9a01abf56b9c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::FastMap</name>
    <filename>a02027.html</filename>
    <templarg>KEY</templarg>
    <templarg>VALUE</templarg>
    <member kind="function">
      <type></type>
      <name>FastMap</name>
      <anchorfile>a02027.html</anchorfile>
      <anchor>aa2c7d3ae2440cc9e7f4cbbcd6cfdfbf5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>FastMap</name>
      <anchorfile>a02027.html</anchorfile>
      <anchor>a44f4df011d0ec4151435413fe4633a76</anchor>
      <arglist>(INPUTITERATOR first, INPUTITERATOR last)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>FastMap</name>
      <anchorfile>a02027.html</anchorfile>
      <anchor>a882d34220cdc01fe4aa83ea2bbf29ce6</anchor>
      <arglist>(const FastMap&lt; KEY, VALUE &gt; &amp;x)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>FastMap</name>
      <anchorfile>a02027.html</anchorfile>
      <anchor>a2e756b7ee7f04a4e9d890ce38d388d61</anchor>
      <arglist>(const Base &amp;x)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator std::map&lt; KEY, VALUE &gt;</name>
      <anchorfile>a02027.html</anchorfile>
      <anchor>a64addaed169f9a54a4cba54da5c9571d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>insert2</name>
      <anchorfile>a02027.html</anchorfile>
      <anchor>a5c254b6b3b877e2987970bc08b2a6c89</anchor>
      <arglist>(const KEY &amp;key, const VALUE &amp;val)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>exists</name>
      <anchorfile>a02027.html</anchorfile>
      <anchor>ab2d8e8a8da5e66cffdbf553bf2ea7df0</anchor>
      <arglist>(const KEY &amp;e) const</arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>boost::serialization::access</name>
      <anchorfile>a02027.html</anchorfile>
      <anchor>ac98d07dd8f7b70e16ccb9a01abf56b9c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>FastMap&lt; Key, Factors &gt;</name>
    <filename>a02027.html</filename>
    <member kind="function">
      <type></type>
      <name>FastMap</name>
      <anchorfile>a02027.html</anchorfile>
      <anchor>aa2c7d3ae2440cc9e7f4cbbcd6cfdfbf5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>FastMap</name>
      <anchorfile>a02027.html</anchorfile>
      <anchor>a44f4df011d0ec4151435413fe4633a76</anchor>
      <arglist>(INPUTITERATOR first, INPUTITERATOR last)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>FastMap</name>
      <anchorfile>a02027.html</anchorfile>
      <anchor>a882d34220cdc01fe4aa83ea2bbf29ce6</anchor>
      <arglist>(const FastMap&lt; Key, Factors &gt; &amp;x)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>FastMap</name>
      <anchorfile>a02027.html</anchorfile>
      <anchor>a2e756b7ee7f04a4e9d890ce38d388d61</anchor>
      <arglist>(const Base &amp;x)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator std::map&lt; Key, Factors &gt;</name>
      <anchorfile>a02027.html</anchorfile>
      <anchor>a64addaed169f9a54a4cba54da5c9571d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>insert2</name>
      <anchorfile>a02027.html</anchorfile>
      <anchor>a5c254b6b3b877e2987970bc08b2a6c89</anchor>
      <arglist>(const Key &amp;key, const Factors &amp;val)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>exists</name>
      <anchorfile>a02027.html</anchorfile>
      <anchor>ab2d8e8a8da5e66cffdbf553bf2ea7df0</anchor>
      <arglist>(const Key &amp;e) const</arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>boost::serialization::access</name>
      <anchorfile>a02027.html</anchorfile>
      <anchor>ac98d07dd8f7b70e16ccb9a01abf56b9c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>FastMap&lt; Key, FastVector&lt; size_t &gt; &gt;</name>
    <filename>a02027.html</filename>
    <member kind="function">
      <type></type>
      <name>FastMap</name>
      <anchorfile>a02027.html</anchorfile>
      <anchor>aa2c7d3ae2440cc9e7f4cbbcd6cfdfbf5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>FastMap</name>
      <anchorfile>a02027.html</anchorfile>
      <anchor>a44f4df011d0ec4151435413fe4633a76</anchor>
      <arglist>(INPUTITERATOR first, INPUTITERATOR last)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>FastMap</name>
      <anchorfile>a02027.html</anchorfile>
      <anchor>a882d34220cdc01fe4aa83ea2bbf29ce6</anchor>
      <arglist>(const FastMap&lt; Key, FastVector&lt; size_t &gt; &gt; &amp;x)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>FastMap</name>
      <anchorfile>a02027.html</anchorfile>
      <anchor>a2e756b7ee7f04a4e9d890ce38d388d61</anchor>
      <arglist>(const Base &amp;x)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator std::map&lt; Key, FastVector&lt; size_t &gt; &gt;</name>
      <anchorfile>a02027.html</anchorfile>
      <anchor>a64addaed169f9a54a4cba54da5c9571d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>insert2</name>
      <anchorfile>a02027.html</anchorfile>
      <anchor>a5c254b6b3b877e2987970bc08b2a6c89</anchor>
      <arglist>(const Key &amp;key, const FastVector&lt; size_t &gt; &amp;val)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>exists</name>
      <anchorfile>a02027.html</anchorfile>
      <anchor>ab2d8e8a8da5e66cffdbf553bf2ea7df0</anchor>
      <arglist>(const Key &amp;e) const</arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>boost::serialization::access</name>
      <anchorfile>a02027.html</anchorfile>
      <anchor>ac98d07dd8f7b70e16ccb9a01abf56b9c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>FastMap&lt; Key, gtsam::ISAM2Result::DetailedResults::VariableStatus &gt;</name>
    <filename>a02027.html</filename>
    <member kind="function">
      <type></type>
      <name>FastMap</name>
      <anchorfile>a02027.html</anchorfile>
      <anchor>aa2c7d3ae2440cc9e7f4cbbcd6cfdfbf5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>FastMap</name>
      <anchorfile>a02027.html</anchorfile>
      <anchor>a44f4df011d0ec4151435413fe4633a76</anchor>
      <arglist>(INPUTITERATOR first, INPUTITERATOR last)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>FastMap</name>
      <anchorfile>a02027.html</anchorfile>
      <anchor>a882d34220cdc01fe4aa83ea2bbf29ce6</anchor>
      <arglist>(const FastMap&lt; Key, gtsam::ISAM2Result::DetailedResults::VariableStatus &gt; &amp;x)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>FastMap</name>
      <anchorfile>a02027.html</anchorfile>
      <anchor>a2e756b7ee7f04a4e9d890ce38d388d61</anchor>
      <arglist>(const Base &amp;x)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator std::map&lt; Key, gtsam::ISAM2Result::DetailedResults::VariableStatus &gt;</name>
      <anchorfile>a02027.html</anchorfile>
      <anchor>a64addaed169f9a54a4cba54da5c9571d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>insert2</name>
      <anchorfile>a02027.html</anchorfile>
      <anchor>a5c254b6b3b877e2987970bc08b2a6c89</anchor>
      <arglist>(const Key &amp;key, const gtsam::ISAM2Result::DetailedResults::VariableStatus &amp;val)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>exists</name>
      <anchorfile>a02027.html</anchorfile>
      <anchor>ab2d8e8a8da5e66cffdbf553bf2ea7df0</anchor>
      <arglist>(const Key &amp;e) const</arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>boost::serialization::access</name>
      <anchorfile>a02027.html</anchorfile>
      <anchor>ac98d07dd8f7b70e16ccb9a01abf56b9c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>FastMap&lt; Key, size_t &gt;</name>
    <filename>a02027.html</filename>
    <member kind="function">
      <type></type>
      <name>FastMap</name>
      <anchorfile>a02027.html</anchorfile>
      <anchor>aa2c7d3ae2440cc9e7f4cbbcd6cfdfbf5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>FastMap</name>
      <anchorfile>a02027.html</anchorfile>
      <anchor>a44f4df011d0ec4151435413fe4633a76</anchor>
      <arglist>(INPUTITERATOR first, INPUTITERATOR last)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>FastMap</name>
      <anchorfile>a02027.html</anchorfile>
      <anchor>a882d34220cdc01fe4aa83ea2bbf29ce6</anchor>
      <arglist>(const FastMap&lt; Key, size_t &gt; &amp;x)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>FastMap</name>
      <anchorfile>a02027.html</anchorfile>
      <anchor>a2e756b7ee7f04a4e9d890ce38d388d61</anchor>
      <arglist>(const Base &amp;x)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator std::map&lt; Key, size_t &gt;</name>
      <anchorfile>a02027.html</anchorfile>
      <anchor>a64addaed169f9a54a4cba54da5c9571d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>insert2</name>
      <anchorfile>a02027.html</anchorfile>
      <anchor>a5c254b6b3b877e2987970bc08b2a6c89</anchor>
      <arglist>(const Key &amp;key, const size_t &amp;val)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>exists</name>
      <anchorfile>a02027.html</anchorfile>
      <anchor>ab2d8e8a8da5e66cffdbf553bf2ea7df0</anchor>
      <arglist>(const Key &amp;e) const</arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>boost::serialization::access</name>
      <anchorfile>a02027.html</anchorfile>
      <anchor>ac98d07dd8f7b70e16ccb9a01abf56b9c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>FastMap&lt; Key, VectorValues::const_iterator &gt;</name>
    <filename>a02027.html</filename>
    <member kind="function">
      <type></type>
      <name>FastMap</name>
      <anchorfile>a02027.html</anchorfile>
      <anchor>aa2c7d3ae2440cc9e7f4cbbcd6cfdfbf5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>FastMap</name>
      <anchorfile>a02027.html</anchorfile>
      <anchor>a44f4df011d0ec4151435413fe4633a76</anchor>
      <arglist>(INPUTITERATOR first, INPUTITERATOR last)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>FastMap</name>
      <anchorfile>a02027.html</anchorfile>
      <anchor>a882d34220cdc01fe4aa83ea2bbf29ce6</anchor>
      <arglist>(const FastMap&lt; Key, VectorValues::const_iterator &gt; &amp;x)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>FastMap</name>
      <anchorfile>a02027.html</anchorfile>
      <anchor>a2e756b7ee7f04a4e9d890ce38d388d61</anchor>
      <arglist>(const Base &amp;x)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator std::map&lt; Key, VectorValues::const_iterator &gt;</name>
      <anchorfile>a02027.html</anchorfile>
      <anchor>a64addaed169f9a54a4cba54da5c9571d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>insert2</name>
      <anchorfile>a02027.html</anchorfile>
      <anchor>a5c254b6b3b877e2987970bc08b2a6c89</anchor>
      <arglist>(const Key &amp;key, const VectorValues::const_iterator &amp;val)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>exists</name>
      <anchorfile>a02027.html</anchorfile>
      <anchor>ab2d8e8a8da5e66cffdbf553bf2ea7df0</anchor>
      <arglist>(const Key &amp;e) const</arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>boost::serialization::access</name>
      <anchorfile>a02027.html</anchorfile>
      <anchor>ac98d07dd8f7b70e16ccb9a01abf56b9c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>FastMap&lt; size_t, boost::shared_ptr&lt; TimingOutline &gt; &gt;</name>
    <filename>a02027.html</filename>
    <member kind="function">
      <type></type>
      <name>FastMap</name>
      <anchorfile>a02027.html</anchorfile>
      <anchor>aa2c7d3ae2440cc9e7f4cbbcd6cfdfbf5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>FastMap</name>
      <anchorfile>a02027.html</anchorfile>
      <anchor>a44f4df011d0ec4151435413fe4633a76</anchor>
      <arglist>(INPUTITERATOR first, INPUTITERATOR last)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>FastMap</name>
      <anchorfile>a02027.html</anchorfile>
      <anchor>a882d34220cdc01fe4aa83ea2bbf29ce6</anchor>
      <arglist>(const FastMap&lt; size_t, boost::shared_ptr&lt; TimingOutline &gt; &gt; &amp;x)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>FastMap</name>
      <anchorfile>a02027.html</anchorfile>
      <anchor>a2e756b7ee7f04a4e9d890ce38d388d61</anchor>
      <arglist>(const Base &amp;x)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator std::map&lt; size_t, boost::shared_ptr&lt; TimingOutline &gt; &gt;</name>
      <anchorfile>a02027.html</anchorfile>
      <anchor>a64addaed169f9a54a4cba54da5c9571d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>insert2</name>
      <anchorfile>a02027.html</anchorfile>
      <anchor>a5c254b6b3b877e2987970bc08b2a6c89</anchor>
      <arglist>(const size_t &amp;key, const boost::shared_ptr&lt; TimingOutline &gt; &amp;val)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>exists</name>
      <anchorfile>a02027.html</anchorfile>
      <anchor>ab2d8e8a8da5e66cffdbf553bf2ea7df0</anchor>
      <arglist>(const size_t &amp;e) const</arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>boost::serialization::access</name>
      <anchorfile>a02027.html</anchorfile>
      <anchor>ac98d07dd8f7b70e16ccb9a01abf56b9c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::FastSet</name>
    <filename>a02031.html</filename>
    <templarg>VALUE</templarg>
    <member kind="function">
      <type></type>
      <name>FastSet</name>
      <anchorfile>a02031.html</anchorfile>
      <anchor>a197d0827760a4c5368587771c75afe5a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>FastSet</name>
      <anchorfile>a02031.html</anchorfile>
      <anchor>a907796ca5a60503fce8a84b970289efd</anchor>
      <arglist>(INPUTITERATOR first, INPUTITERATOR last)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>FastSet</name>
      <anchorfile>a02031.html</anchorfile>
      <anchor>a6fe5c76facd1eab99fe84c19c68d9e5c</anchor>
      <arglist>(const INPUTCONTAINER &amp;container)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>FastSet</name>
      <anchorfile>a02031.html</anchorfile>
      <anchor>a7f6cb2d27052a33035f135e837b51c47</anchor>
      <arglist>(const FastSet&lt; VALUE &gt; &amp;x)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>FastSet</name>
      <anchorfile>a02031.html</anchorfile>
      <anchor>acd2dc81b5518151095ba9aef2eb4d81d</anchor>
      <arglist>(const Base &amp;x)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator std::set&lt; VALUE &gt;</name>
      <anchorfile>a02031.html</anchorfile>
      <anchor>af4d995c3e8cbeba6cb06971e3a186e9e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>exists</name>
      <anchorfile>a02031.html</anchorfile>
      <anchor>a98754bce44e06e7360da502d4383840a</anchor>
      <arglist>(const VALUE &amp;e) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>a02031.html</anchorfile>
      <anchor>a1ef04a37a0fb1bfe861a7608d84b0737</anchor>
      <arglist>(const std::string &amp;str=&quot;&quot;) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>equals</name>
      <anchorfile>a02031.html</anchorfile>
      <anchor>aa0997bdf65b508a83fcd3a0abc6211ed</anchor>
      <arglist>(const FastSet&lt; VALUE &gt; &amp;other, double tol=1e-9) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>merge</name>
      <anchorfile>a02031.html</anchorfile>
      <anchor>a1000ebc2e2248c219d34b8232905be68</anchor>
      <arglist>(const FastSet &amp;other)</arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>boost::serialization::access</name>
      <anchorfile>a02031.html</anchorfile>
      <anchor>ac98d07dd8f7b70e16ccb9a01abf56b9c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>FastSet&lt; Key &gt;</name>
    <filename>a02031.html</filename>
    <member kind="function">
      <type></type>
      <name>FastSet</name>
      <anchorfile>a02031.html</anchorfile>
      <anchor>a197d0827760a4c5368587771c75afe5a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>FastSet</name>
      <anchorfile>a02031.html</anchorfile>
      <anchor>a907796ca5a60503fce8a84b970289efd</anchor>
      <arglist>(INPUTITERATOR first, INPUTITERATOR last)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>FastSet</name>
      <anchorfile>a02031.html</anchorfile>
      <anchor>a6fe5c76facd1eab99fe84c19c68d9e5c</anchor>
      <arglist>(const INPUTCONTAINER &amp;container)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>FastSet</name>
      <anchorfile>a02031.html</anchorfile>
      <anchor>a7f6cb2d27052a33035f135e837b51c47</anchor>
      <arglist>(const FastSet&lt; Key &gt; &amp;x)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>FastSet</name>
      <anchorfile>a02031.html</anchorfile>
      <anchor>acd2dc81b5518151095ba9aef2eb4d81d</anchor>
      <arglist>(const Base &amp;x)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator std::set&lt; Key &gt;</name>
      <anchorfile>a02031.html</anchorfile>
      <anchor>af4d995c3e8cbeba6cb06971e3a186e9e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>exists</name>
      <anchorfile>a02031.html</anchorfile>
      <anchor>a98754bce44e06e7360da502d4383840a</anchor>
      <arglist>(const Key &amp;e) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>a02031.html</anchorfile>
      <anchor>a1ef04a37a0fb1bfe861a7608d84b0737</anchor>
      <arglist>(const std::string &amp;str=&quot;&quot;) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>equals</name>
      <anchorfile>a02031.html</anchorfile>
      <anchor>aa0997bdf65b508a83fcd3a0abc6211ed</anchor>
      <arglist>(const FastSet&lt; Key &gt; &amp;other, double tol=1e-9) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>merge</name>
      <anchorfile>a02031.html</anchorfile>
      <anchor>a1000ebc2e2248c219d34b8232905be68</anchor>
      <arglist>(const FastSet &amp;other)</arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>boost::serialization::access</name>
      <anchorfile>a02031.html</anchorfile>
      <anchor>ac98d07dd8f7b70e16ccb9a01abf56b9c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::Values::Filtered</name>
    <filename>a03839.html</filename>
    <templarg>ValueType</templarg>
    <member kind="function">
      <type>size_t</type>
      <name>size</name>
      <anchorfile>a03839.html</anchorfile>
      <anchor>a548c4c95896dca5eea83d844b67e8b79</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="typedef">
      <type>_ValuesKeyValuePair&lt; ValueType &gt;</type>
      <name>KeyValuePair</name>
      <anchorfile>a03839.html</anchorfile>
      <anchor>a816979e5f4619b22258fe2abd87da92a</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>gtsam::FixedDimension</name>
    <filename>a02123.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="class">
    <name>gtsam::FixedLagSmoother</name>
    <filename>a04403.html</filename>
    <member kind="function">
      <type></type>
      <name>FixedLagSmoother</name>
      <anchorfile>a04403.html</anchorfile>
      <anchor>a9384ec1aab2b6062b1de20efda8f0ac9</anchor>
      <arglist>(double smootherLag=0.0)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~FixedLagSmoother</name>
      <anchorfile>a04403.html</anchorfile>
      <anchor>a6189c4ca8f70e3f4d171b0b702a6d404</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>print</name>
      <anchorfile>a04403.html</anchorfile>
      <anchor>a247af195b8fc6c21f775d07a6f1a093d</anchor>
      <arglist>(const std::string &amp;s=&quot;FixedLagSmoother:\n&quot;, const KeyFormatter &amp;keyFormatter=DefaultKeyFormatter) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>equals</name>
      <anchorfile>a04403.html</anchorfile>
      <anchor>a9ab7d2581a2552c83add66d586abcb8d</anchor>
      <arglist>(const FixedLagSmoother &amp;rhs, double tol=1e-9) const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>smootherLag</name>
      <anchorfile>a04403.html</anchorfile>
      <anchor>a2567f13353bd5253181965961390d1c2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double &amp;</type>
      <name>smootherLag</name>
      <anchorfile>a04403.html</anchorfile>
      <anchor>a8ede2540ae06502c9352a644394b7954</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const KeyTimestampMap &amp;</type>
      <name>timestamps</name>
      <anchorfile>a04403.html</anchorfile>
      <anchor>a01f665951032a9d519e5b3b908b1546e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual Result</type>
      <name>update</name>
      <anchorfile>a04403.html</anchorfile>
      <anchor>a0062f765432a9230790d0d8e7b7eac89</anchor>
      <arglist>(const NonlinearFactorGraph &amp;newFactors=NonlinearFactorGraph(), const Values &amp;newTheta=Values(), const KeyTimestampMap &amp;timestamps=KeyTimestampMap(), const FastVector&lt; size_t &gt; &amp;factorsToRemove=FastVector&lt; size_t &gt;())=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual Values</type>
      <name>calculateEstimate</name>
      <anchorfile>a04403.html</anchorfile>
      <anchor>aaaad70c43b93a340440d465299f99664</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; FixedLagSmoother &gt;</type>
      <name>shared_ptr</name>
      <anchorfile>a04403.html</anchorfile>
      <anchor>ae7df36b319e0d567b728f531de5458ca</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::map&lt; Key, double &gt;</type>
      <name>KeyTimestampMap</name>
      <anchorfile>a04403.html</anchorfile>
      <anchor>a7778c79a5998ac7c1768ebc1fba2e76f</anchor>
      <arglist></arglist>
    </member>
    <class kind="struct">gtsam::FixedLagSmoother::Result</class>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>updateKeyTimestampMap</name>
      <anchorfile>a04403.html</anchorfile>
      <anchor>ab6e58323e71c50b7b2ab44b713efa291</anchor>
      <arglist>(const KeyTimestampMap &amp;newTimestamps)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>eraseKeyTimestampMap</name>
      <anchorfile>a04403.html</anchorfile>
      <anchor>abf3da9a02bd1f7608eeec189156fa3c5</anchor>
      <arglist>(const KeyVector &amp;keys)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>double</type>
      <name>getCurrentTimestamp</name>
      <anchorfile>a04403.html</anchorfile>
      <anchor>aca4ec2f97e4e5c33ae0f3e4a588d767f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>KeyVector</type>
      <name>findKeysBefore</name>
      <anchorfile>a04403.html</anchorfile>
      <anchor>a98da76e547a0fecb587ba7438867c5f0</anchor>
      <arglist>(double timestamp) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>KeyVector</type>
      <name>findKeysAfter</name>
      <anchorfile>a04403.html</anchorfile>
      <anchor>ae5758e1be8478b3c35775f39a8b9132a</anchor>
      <arglist>(double timestamp) const</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>smootherLag_</name>
      <anchorfile>a04403.html</anchorfile>
      <anchor>a0df6ccadb55d8b5b85416e3ba3f216ac</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>TimestampKeyMap</type>
      <name>timestampKeyMap_</name>
      <anchorfile>a04403.html</anchorfile>
      <anchor>a3188bafd0ad41debfdc66abd10354fc5</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::FixedLagSmootherKeyTimestampMap</name>
    <filename>a04695.html</filename>
  </compound>
  <compound kind="class">
    <name>gtsam::FixedLagSmootherKeyTimestampMapValue</name>
    <filename>a04691.html</filename>
  </compound>
  <compound kind="class">
    <name>gtsam::FixedLagSmootherResult</name>
    <filename>a04699.html</filename>
  </compound>
  <compound kind="struct">
    <name>gtsam::internal::FixedSizeMatrix</name>
    <filename>a02151.html</filename>
    <templarg>Y</templarg>
    <templarg>X</templarg>
  </compound>
  <compound kind="class">
    <name>gtsam::FixedVector</name>
    <filename>a04207.html</filename>
    <templarg>N</templarg>
    <member kind="function">
      <type></type>
      <name>FixedVector</name>
      <anchorfile>a04207.html</anchorfile>
      <anchor>a0eefda65880b74607e047f079440c1a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>FixedVector</name>
      <anchorfile>a04207.html</anchorfile>
      <anchor>a3add84cf214e079640138fdd091a99b9</anchor>
      <arglist>(const FixedVector &amp;v)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>FixedVector</name>
      <anchorfile>a04207.html</anchorfile>
      <anchor>a308e4746e22b126d0b56125f13383cd4</anchor>
      <arglist>(const Vector &amp;v)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>FixedVector</name>
      <anchorfile>a04207.html</anchorfile>
      <anchor>affe70ad8bdd81fdf8244cb717ddcdc87</anchor>
      <arglist>(const double *values)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static FixedVector</type>
      <name>repeat</name>
      <anchorfile>a04207.html</anchorfile>
      <anchor>afcd08d1d982f9dcf6419d02663049f47</anchor>
      <arglist>(double value)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static FixedVector</type>
      <name>delta</name>
      <anchorfile>a04207.html</anchorfile>
      <anchor>a4c9be1322779f0231d2e5bd2a254e165</anchor>
      <arglist>(size_t i, double value)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static FixedVector</type>
      <name>basis</name>
      <anchorfile>a04207.html</anchorfile>
      <anchor>a3378d2de0c852bc10894da1568d1b4e5</anchor>
      <arglist>(size_t i)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static FixedVector</type>
      <name>zero</name>
      <anchorfile>a04207.html</anchorfile>
      <anchor>a5a612420e532aa23ada7cbcd9f4534dc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static FixedVector</type>
      <name>ones</name>
      <anchorfile>a04207.html</anchorfile>
      <anchor>af86c1747285f25a20916901e9bc510ff</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::FullIMUFactor</name>
    <filename>a04615.html</filename>
    <templarg></templarg>
    <base protection="private">gtsam::NoiseModelFactor</base>
    <base>NoiseModelFactor2&lt; POSE, POSE &gt;</base>
    <member kind="function">
      <type></type>
      <name>FullIMUFactor</name>
      <anchorfile>a04615.html</anchorfile>
      <anchor>a09dbb0db4e8235d13c6f69456d8bb815</anchor>
      <arglist>(const Vector3 &amp;accel, const Vector3 &amp;gyro, double dt, const Key &amp;key1, const Key &amp;key2, const SharedNoiseModel &amp;model)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>FullIMUFactor</name>
      <anchorfile>a04615.html</anchorfile>
      <anchor>a00bfde0187882ed21bae98841f8432a3</anchor>
      <arglist>(const Vector6 &amp;imu, double dt, const Key &amp;key1, const Key &amp;key2, const SharedNoiseModel &amp;model)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual gtsam::NonlinearFactor::shared_ptr</type>
      <name>clone</name>
      <anchorfile>a04615.html</anchorfile>
      <anchor>aeab830f44479f8b2713c872a83fee477</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>equals</name>
      <anchorfile>a04615.html</anchorfile>
      <anchor>a50f51cdae12c1f937bb04c551975a8c6</anchor>
      <arglist>(const NonlinearFactor &amp;e, double tol=1e-9) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>a04615.html</anchorfile>
      <anchor>ae600b6471db9c70d026be978e337f9ab</anchor>
      <arglist>(const std::string &amp;s=&quot;&quot;, const gtsam::KeyFormatter &amp;formatter=gtsam::DefaultKeyFormatter) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Vector</type>
      <name>evaluateError</name>
      <anchorfile>a04615.html</anchorfile>
      <anchor>a2c995bbe0cda2ac3c0fb5023988b573c</anchor>
      <arglist>(const PoseRTV &amp;x1, const PoseRTV &amp;x2, boost::optional&lt; Matrix &amp; &gt; H1=boost::none, boost::optional&lt; Matrix &amp; &gt; H2=boost::none) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Vector</type>
      <name>evaluateError</name>
      <anchorfile>a04615.html</anchorfile>
      <anchor>a8ff0505faddb72b3e7645e781c7b039b</anchor>
      <arglist>(const Pose3 &amp;x1, const Pose3 &amp;x2, boost::optional&lt; Matrix &amp; &gt; H1=boost::none, boost::optional&lt; Matrix &amp; &gt; H2=boost::none) const</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Vector3</type>
      <name>accel_</name>
      <anchorfile>a04615.html</anchorfile>
      <anchor>a703f0064742c57e97f80d5ecc72e6b22</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::G_x1</name>
    <filename>a02155.html</filename>
    <templarg>X1</templarg>
    <templarg>X2</templarg>
  </compound>
  <compound kind="class">
    <name>gtsam::noiseModel::Gaussian</name>
    <filename>a03223.html</filename>
    <base>gtsam::noiseModel::Base</base>
    <member kind="function" virtualness="virtual">
      <type>virtual Vector</type>
      <name>sigmas</name>
      <anchorfile>a03223.html</anchorfile>
      <anchor>aaecd8b702f55165e4d69510a09b775f7</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Vector</type>
      <name>whiten</name>
      <anchorfile>a03223.html</anchorfile>
      <anchor>ae5c02c0b925a42b78a8e40e04409c72d</anchor>
      <arglist>(const Vector &amp;v) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Vector</type>
      <name>unwhiten</name>
      <anchorfile>a03223.html</anchorfile>
      <anchor>a4f3447627cf031ba8ff52ae949671eaf</anchor>
      <arglist>(const Vector &amp;v) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>Mahalanobis</name>
      <anchorfile>a03223.html</anchorfile>
      <anchor>a4775de306df82c437c1622783aeb727f</anchor>
      <arglist>(const Vector &amp;v) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Matrix</type>
      <name>Whiten</name>
      <anchorfile>a03223.html</anchorfile>
      <anchor>ad21e0b3d0227a760b018326da97b1622</anchor>
      <arglist>(const Matrix &amp;H) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>WhitenInPlace</name>
      <anchorfile>a03223.html</anchorfile>
      <anchor>a10964d6f0d955e27acd6aeb16fc83ed1</anchor>
      <arglist>(Matrix &amp;H) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>WhitenInPlace</name>
      <anchorfile>a03223.html</anchorfile>
      <anchor>a5e6730ae7579632477a1dbee37e72acf</anchor>
      <arglist>(Eigen::Block&lt; Matrix &gt; H) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>WhitenSystem</name>
      <anchorfile>a03223.html</anchorfile>
      <anchor>a3efb4813985a64df71157d4559c9f7f5</anchor>
      <arglist>(std::vector&lt; Matrix &gt; &amp;A, Vector &amp;b) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual boost::shared_ptr&lt; Diagonal &gt;</type>
      <name>QR</name>
      <anchorfile>a03223.html</anchorfile>
      <anchor>a69d56bbe0e3c68743c5e7f42340b6426</anchor>
      <arglist>(Matrix &amp;Ab) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Matrix</type>
      <name>R</name>
      <anchorfile>a03223.html</anchorfile>
      <anchor>a1cafaca4432cb1917bbe221bbc418f55</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Matrix</type>
      <name>information</name>
      <anchorfile>a03223.html</anchorfile>
      <anchor>a5293be6d37b726474e359df92589b462</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Matrix</type>
      <name>covariance</name>
      <anchorfile>a03223.html</anchorfile>
      <anchor>a8b5cddc4a20d455904289b2b345ce57b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static shared_ptr</type>
      <name>SqrtInformation</name>
      <anchorfile>a03223.html</anchorfile>
      <anchor>a8c9d3331d5b09f086c44d99553f5e15c</anchor>
      <arglist>(const Matrix &amp;R, bool smart=true)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static shared_ptr</type>
      <name>Information</name>
      <anchorfile>a03223.html</anchorfile>
      <anchor>af7b24866cf09adbee55dad7854bfef92</anchor>
      <arglist>(const Matrix &amp;M, bool smart=true)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static shared_ptr</type>
      <name>Covariance</name>
      <anchorfile>a03223.html</anchorfile>
      <anchor>a3ed257b6e9a8016cc3c76a8962a64ba0</anchor>
      <arglist>(const Matrix &amp;covariance, bool smart=true)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>Gaussian</name>
      <anchorfile>a03223.html</anchorfile>
      <anchor>a1d28af98ad86135fe53b5510f1253abc</anchor>
      <arglist>(size_t dim=1, const boost::optional&lt; Matrix &gt; &amp;sqrt_information=boost::none)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>boost::optional&lt; Matrix &gt;</type>
      <name>sqrt_information_</name>
      <anchorfile>a03223.html</anchorfile>
      <anchor>a288d3c8bd743700bc19241361a32de01</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>boost::serialization::access</name>
      <anchorfile>a03223.html</anchorfile>
      <anchor>ac98d07dd8f7b70e16ccb9a01abf56b9c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::GaussianBayesNet</name>
    <filename>a03087.html</filename>
    <base>FactorGraph&lt; GaussianConditional &gt;</base>
    <member kind="function">
      <type></type>
      <name>GaussianBayesNet</name>
      <anchorfile>a03087.html</anchorfile>
      <anchor>adecacf9eadcbced34a26cd234e34d197</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GaussianBayesNet</name>
      <anchorfile>a03087.html</anchorfile>
      <anchor>ae4f5f693d7582da70a64ea80024fdf12</anchor>
      <arglist>(ITERATOR firstConditional, ITERATOR lastConditional)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GaussianBayesNet</name>
      <anchorfile>a03087.html</anchorfile>
      <anchor>ac863c8c8203f4cb9d099d6d1adf8fb3b</anchor>
      <arglist>(const CONTAINER &amp;conditionals)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GaussianBayesNet</name>
      <anchorfile>a03087.html</anchorfile>
      <anchor>a91b6b8d6390efc036e690dbaf5493ff4</anchor>
      <arglist>(const FactorGraph&lt; DERIVEDCONDITIONAL &gt; &amp;graph)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>equals</name>
      <anchorfile>a03087.html</anchorfile>
      <anchor>a0dfaa4e6414429241119976691640017</anchor>
      <arglist>(const This &amp;bn, double tol=1e-9) const</arglist>
    </member>
    <member kind="function">
      <type>VectorValues</type>
      <name>optimize</name>
      <anchorfile>a03087.html</anchorfile>
      <anchor>a01ccfdc104912f80933a0814dd469f40</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>VectorValues</type>
      <name>optimize</name>
      <anchorfile>a03087.html</anchorfile>
      <anchor>ab5b987183cf89eef5973b7c3352e9662</anchor>
      <arglist>(const VectorValues &amp;solutionForMissing) const</arglist>
    </member>
    <member kind="function">
      <type>Ordering</type>
      <name>ordering</name>
      <anchorfile>a03087.html</anchorfile>
      <anchor>aa4bf7623222114b8929266f89e96aeb5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::pair&lt; Matrix, Vector &gt;</type>
      <name>matrix</name>
      <anchorfile>a03087.html</anchorfile>
      <anchor>ab457a514b691290a40eb4ef1d264975f</anchor>
      <arglist>(boost::optional&lt; const Ordering &amp; &gt; ordering=boost::none) const</arglist>
    </member>
    <member kind="function">
      <type>VectorValues</type>
      <name>optimizeGradientSearch</name>
      <anchorfile>a03087.html</anchorfile>
      <anchor>ac73cf84092ee57fa01609ae699b9282a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>VectorValues</type>
      <name>gradient</name>
      <anchorfile>a03087.html</anchorfile>
      <anchor>afeb5efde40fe64df5844ba1154933128</anchor>
      <arglist>(const VectorValues &amp;x0) const</arglist>
    </member>
    <member kind="function">
      <type>VectorValues</type>
      <name>gradientAtZero</name>
      <anchorfile>a03087.html</anchorfile>
      <anchor>a882e37f9122d59c5f9f7ab927398cb24</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>error</name>
      <anchorfile>a03087.html</anchorfile>
      <anchor>a3db1291c789e604f170c756df896d80c</anchor>
      <arglist>(const VectorValues &amp;x) const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>determinant</name>
      <anchorfile>a03087.html</anchorfile>
      <anchor>aff1f3b8337a4768252aaa17337749e2d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>logDeterminant</name>
      <anchorfile>a03087.html</anchorfile>
      <anchor>ab658420b5501d66d8df2d3fd5e78133b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>VectorValues</type>
      <name>backSubstitute</name>
      <anchorfile>a03087.html</anchorfile>
      <anchor>ae94dd75d08bf33718cfc2fd05abbdd17</anchor>
      <arglist>(const VectorValues &amp;gx) const</arglist>
    </member>
    <member kind="function">
      <type>VectorValues</type>
      <name>backSubstituteTranspose</name>
      <anchorfile>a03087.html</anchorfile>
      <anchor>aa082daa02b066634ea1b624263ce1819</anchor>
      <arglist>(const VectorValues &amp;gx) const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GaussianBayesNet</name>
      <anchorfile>a03087.html</anchorfile>
      <anchor>adecacf9eadcbced34a26cd234e34d197</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GaussianBayesNet</name>
      <anchorfile>a03087.html</anchorfile>
      <anchor>ae4f5f693d7582da70a64ea80024fdf12</anchor>
      <arglist>(ITERATOR firstConditional, ITERATOR lastConditional)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GaussianBayesNet</name>
      <anchorfile>a03087.html</anchorfile>
      <anchor>ac863c8c8203f4cb9d099d6d1adf8fb3b</anchor>
      <arglist>(const CONTAINER &amp;conditionals)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GaussianBayesNet</name>
      <anchorfile>a03087.html</anchorfile>
      <anchor>a91b6b8d6390efc036e690dbaf5493ff4</anchor>
      <arglist>(const FactorGraph&lt; DERIVEDCONDITIONAL &gt; &amp;graph)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>equals</name>
      <anchorfile>a03087.html</anchorfile>
      <anchor>a0dfaa4e6414429241119976691640017</anchor>
      <arglist>(const This &amp;bn, double tol=1e-9) const</arglist>
    </member>
    <member kind="function">
      <type>VectorValues</type>
      <name>optimize</name>
      <anchorfile>a03087.html</anchorfile>
      <anchor>a01ccfdc104912f80933a0814dd469f40</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>VectorValues</type>
      <name>optimize</name>
      <anchorfile>a03087.html</anchorfile>
      <anchor>ab5b987183cf89eef5973b7c3352e9662</anchor>
      <arglist>(const VectorValues &amp;solutionForMissing) const</arglist>
    </member>
    <member kind="function">
      <type>Ordering</type>
      <name>ordering</name>
      <anchorfile>a03087.html</anchorfile>
      <anchor>aa4bf7623222114b8929266f89e96aeb5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::pair&lt; Matrix, Vector &gt;</type>
      <name>matrix</name>
      <anchorfile>a03087.html</anchorfile>
      <anchor>ab457a514b691290a40eb4ef1d264975f</anchor>
      <arglist>(boost::optional&lt; const Ordering &amp; &gt; ordering=boost::none) const</arglist>
    </member>
    <member kind="function">
      <type>VectorValues</type>
      <name>optimizeGradientSearch</name>
      <anchorfile>a03087.html</anchorfile>
      <anchor>ac73cf84092ee57fa01609ae699b9282a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>VectorValues</type>
      <name>gradient</name>
      <anchorfile>a03087.html</anchorfile>
      <anchor>afeb5efde40fe64df5844ba1154933128</anchor>
      <arglist>(const VectorValues &amp;x0) const</arglist>
    </member>
    <member kind="function">
      <type>VectorValues</type>
      <name>gradientAtZero</name>
      <anchorfile>a03087.html</anchorfile>
      <anchor>a882e37f9122d59c5f9f7ab927398cb24</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>error</name>
      <anchorfile>a03087.html</anchorfile>
      <anchor>a3db1291c789e604f170c756df896d80c</anchor>
      <arglist>(const VectorValues &amp;x) const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>determinant</name>
      <anchorfile>a03087.html</anchorfile>
      <anchor>aff1f3b8337a4768252aaa17337749e2d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>logDeterminant</name>
      <anchorfile>a03087.html</anchorfile>
      <anchor>ab658420b5501d66d8df2d3fd5e78133b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>VectorValues</type>
      <name>backSubstitute</name>
      <anchorfile>a03087.html</anchorfile>
      <anchor>ae94dd75d08bf33718cfc2fd05abbdd17</anchor>
      <arglist>(const VectorValues &amp;gx) const</arglist>
    </member>
    <member kind="function">
      <type>VectorValues</type>
      <name>backSubstituteTranspose</name>
      <anchorfile>a03087.html</anchorfile>
      <anchor>aa082daa02b066634ea1b624263ce1819</anchor>
      <arglist>(const VectorValues &amp;gx) const</arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>boost::serialization::access</name>
      <anchorfile>a03087.html</anchorfile>
      <anchor>ac98d07dd8f7b70e16ccb9a01abf56b9c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::GaussianBayesTree</name>
    <filename>a03099.html</filename>
    <base>BayesTree&lt; GaussianBayesTreeClique &gt;</base>
    <member kind="function">
      <type></type>
      <name>GaussianBayesTree</name>
      <anchorfile>a03099.html</anchorfile>
      <anchor>a10a6eb7dac9a7fcd873d0c0a3c01ca82</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>equals</name>
      <anchorfile>a03099.html</anchorfile>
      <anchor>a03c6f0a6e375f03c9338fdb51285bd68</anchor>
      <arglist>(const This &amp;other, double tol=1e-9) const</arglist>
    </member>
    <member kind="function">
      <type>VectorValues</type>
      <name>optimize</name>
      <anchorfile>a03099.html</anchorfile>
      <anchor>a8832a5973fd44c0afc4d7ace9c9d2bb2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>VectorValues</type>
      <name>optimizeGradientSearch</name>
      <anchorfile>a03099.html</anchorfile>
      <anchor>a8228e4f368150c8abc14ed7bb4f6a5e3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>VectorValues</type>
      <name>gradient</name>
      <anchorfile>a03099.html</anchorfile>
      <anchor>acd97366027e87528d3736bc7ad748485</anchor>
      <arglist>(const VectorValues &amp;x0) const</arglist>
    </member>
    <member kind="function">
      <type>VectorValues</type>
      <name>gradientAtZero</name>
      <anchorfile>a03099.html</anchorfile>
      <anchor>adf7805724675eff5b71ddf6bde6e599b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>error</name>
      <anchorfile>a03099.html</anchorfile>
      <anchor>a64a935c07cec479299fe940cf585ed40</anchor>
      <arglist>(const VectorValues &amp;x) const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>determinant</name>
      <anchorfile>a03099.html</anchorfile>
      <anchor>ab5e04f426f0cf72d1d33d9b6e8ae70a6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>logDeterminant</name>
      <anchorfile>a03099.html</anchorfile>
      <anchor>a7370eafc6174975fe9ca36782c1b2040</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Matrix</type>
      <name>marginalCovariance</name>
      <anchorfile>a03099.html</anchorfile>
      <anchor>a5804f0735805b572ee335113a245d9e5</anchor>
      <arglist>(Key key) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::GaussianBayesTreeClique</name>
    <filename>a03095.html</filename>
    <base>BayesTreeCliqueBase&lt; GaussianBayesTreeClique, GaussianFactorGraph &gt;</base>
  </compound>
  <compound kind="class">
    <name>gtsam::GaussianConditional</name>
    <filename>a03107.html</filename>
    <base>gtsam::JacobianFactor</base>
    <base>Conditional&lt; JacobianFactor, GaussianConditional &gt;</base>
    <member kind="function">
      <type></type>
      <name>GaussianConditional</name>
      <anchorfile>a03107.html</anchorfile>
      <anchor>a350122154dc86824df762ae59ee51f80</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GaussianConditional</name>
      <anchorfile>a03107.html</anchorfile>
      <anchor>a07e5a082e6ccb1034f4a9754bc1b64ab</anchor>
      <arglist>(Key key, const Vector &amp;d, const Matrix &amp;R, const SharedDiagonal &amp;sigmas=SharedDiagonal())</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GaussianConditional</name>
      <anchorfile>a03107.html</anchorfile>
      <anchor>aefa44e696b330113a6de949e457a6e4d</anchor>
      <arglist>(Key key, const Vector &amp;d, const Matrix &amp;R, Key name1, const Matrix &amp;S, const SharedDiagonal &amp;sigmas=SharedDiagonal())</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GaussianConditional</name>
      <anchorfile>a03107.html</anchorfile>
      <anchor>a961b569d232db0e156c295e2b1fcc970</anchor>
      <arglist>(Key key, const Vector &amp;d, const Matrix &amp;R, Key name1, const Matrix &amp;S, Key name2, const Matrix &amp;T, const SharedDiagonal &amp;sigmas=SharedDiagonal())</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GaussianConditional</name>
      <anchorfile>a03107.html</anchorfile>
      <anchor>a59d5c29925d10765fb5b1b3760161019</anchor>
      <arglist>(const TERMS &amp;terms, size_t nrFrontals, const Vector &amp;d, const SharedDiagonal &amp;sigmas=SharedDiagonal())</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GaussianConditional</name>
      <anchorfile>a03107.html</anchorfile>
      <anchor>a545518d753c73b6fc5b0cf644137ca26</anchor>
      <arglist>(const KEYS &amp;keys, size_t nrFrontals, const VerticalBlockMatrix &amp;augmentedMatrix, const SharedDiagonal &amp;sigmas=SharedDiagonal())</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>a03107.html</anchorfile>
      <anchor>adc31ba660e3b5466a78c728957e28aa2</anchor>
      <arglist>(const std::string &amp;=&quot;GaussianConditional&quot;, const KeyFormatter &amp;formatter=DefaultKeyFormatter) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>equals</name>
      <anchorfile>a03107.html</anchorfile>
      <anchor>a55b549f7052d5511c2e0b6533f7e135d</anchor>
      <arglist>(const GaussianFactor &amp;cg, double tol=1e-9) const</arglist>
    </member>
    <member kind="function">
      <type>constABlock</type>
      <name>R</name>
      <anchorfile>a03107.html</anchorfile>
      <anchor>a2f625a1f4f0ebb9db26019586b1abbe5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>constABlock</type>
      <name>S</name>
      <anchorfile>a03107.html</anchorfile>
      <anchor>ac4820ff3c08b4ae60be18d631606c89d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>constABlock</type>
      <name>S</name>
      <anchorfile>a03107.html</anchorfile>
      <anchor>a2a7af628c48e3516b08c10282590ad47</anchor>
      <arglist>(const_iterator it) const</arglist>
    </member>
    <member kind="function">
      <type>const constBVector</type>
      <name>d</name>
      <anchorfile>a03107.html</anchorfile>
      <anchor>aef329c61470954e7bec349f444e5e769</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>VectorValues</type>
      <name>solve</name>
      <anchorfile>a03107.html</anchorfile>
      <anchor>a18c86069f9b255070929f52539b78bcc</anchor>
      <arglist>(const VectorValues &amp;parents) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>solveTransposeInPlace</name>
      <anchorfile>a03107.html</anchorfile>
      <anchor>abd05feec1f1252ff85383df730680af0</anchor>
      <arglist>(VectorValues &amp;gy) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>scaleFrontalsBySigma</name>
      <anchorfile>a03107.html</anchorfile>
      <anchor>a54654887719d443e56a05c258ec80d1b</anchor>
      <arglist>(VectorValues &amp;gy) const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static shared_ptr</type>
      <name>Combine</name>
      <anchorfile>a03107.html</anchorfile>
      <anchor>a9656dae242e3f9a8293b1b5c05095911</anchor>
      <arglist>(ITERATOR firstConditional, ITERATOR lastConditional)</arglist>
    </member>
    <member kind="typedef">
      <type>GaussianConditional</type>
      <name>This</name>
      <anchorfile>a03107.html</anchorfile>
      <anchor>a0f8b1ce7a6a1414f8c24e160af2f8d4e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; This &gt;</type>
      <name>shared_ptr</name>
      <anchorfile>a03107.html</anchorfile>
      <anchor>aca05dc6ca9aea64f4621a8c8d2bf3d01</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>JacobianFactor</type>
      <name>BaseFactor</name>
      <anchorfile>a03107.html</anchorfile>
      <anchor>a2fdd1b89f3665eda71256f3a57f4a4d0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Conditional&lt; BaseFactor, This &gt;</type>
      <name>BaseConditional</name>
      <anchorfile>a03107.html</anchorfile>
      <anchor>a42acbab01dda87c1017d4f996bfb9ff7</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>boost::serialization::access</name>
      <anchorfile>a03107.html</anchorfile>
      <anchor>ac98d07dd8f7b70e16ccb9a01abf56b9c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::GaussianDensity</name>
    <filename>a03115.html</filename>
    <base>gtsam::GaussianConditional</base>
    <member kind="function">
      <type></type>
      <name>GaussianDensity</name>
      <anchorfile>a03115.html</anchorfile>
      <anchor>a5e87d41948515b0ea5548aed04227acd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GaussianDensity</name>
      <anchorfile>a03115.html</anchorfile>
      <anchor>ab87337fa52b848ce99be24006daef46c</anchor>
      <arglist>(const GaussianConditional &amp;conditional)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GaussianDensity</name>
      <anchorfile>a03115.html</anchorfile>
      <anchor>a4c8ce2cd6b2708df545c4fe7778169ee</anchor>
      <arglist>(Key key, const Vector &amp;d, const Matrix &amp;R, const SharedDiagonal &amp;noiseModel=SharedDiagonal())</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>a03115.html</anchorfile>
      <anchor>a94f21de157ee1e34300a7b9a18ae0516</anchor>
      <arglist>(const std::string &amp;=&quot;GaussianDensity&quot;, const KeyFormatter &amp;formatter=DefaultKeyFormatter) const</arglist>
    </member>
    <member kind="function">
      <type>Vector</type>
      <name>mean</name>
      <anchorfile>a03115.html</anchorfile>
      <anchor>a97499479e17fe37b3d01f1c517dad373</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Matrix</type>
      <name>covariance</name>
      <anchorfile>a03115.html</anchorfile>
      <anchor>add797ceb0bc6777c58f0540995524a38</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static GaussianDensity</type>
      <name>FromMeanAndStddev</name>
      <anchorfile>a03115.html</anchorfile>
      <anchor>a737eb90910e9ab3cb7d4f45b5d497d18</anchor>
      <arglist>(Key key, const Vector &amp;mean, const double &amp;sigma)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::GaussianEliminationTree</name>
    <filename>a03119.html</filename>
    <base>EliminationTree&lt; GaussianBayesNet, GaussianFactorGraph &gt;</base>
    <member kind="function">
      <type></type>
      <name>GaussianEliminationTree</name>
      <anchorfile>a03119.html</anchorfile>
      <anchor>acffc7084c938407b8b047843fbd7b138</anchor>
      <arglist>(const GaussianFactorGraph &amp;factorGraph, const VariableIndex &amp;structure, const Ordering &amp;order)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GaussianEliminationTree</name>
      <anchorfile>a03119.html</anchorfile>
      <anchor>abc03f84772075ab56747a259513f62a7</anchor>
      <arglist>(const GaussianFactorGraph &amp;factorGraph, const Ordering &amp;order)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>equals</name>
      <anchorfile>a03119.html</anchorfile>
      <anchor>aa5c2c091babfc2fa6b590654d73cd635</anchor>
      <arglist>(const This &amp;other, double tol=1e-9) const</arglist>
    </member>
    <member kind="typedef">
      <type>EliminationTree&lt; GaussianBayesNet, GaussianFactorGraph &gt;</type>
      <name>Base</name>
      <anchorfile>a03119.html</anchorfile>
      <anchor>a57a688c5bdfa87413e5982fb1ec61489</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GaussianEliminationTree</type>
      <name>This</name>
      <anchorfile>a03119.html</anchorfile>
      <anchor>a3d599a4ee436838e5ffba795580c2ab1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; This &gt;</type>
      <name>shared_ptr</name>
      <anchorfile>a03119.html</anchorfile>
      <anchor>a888dd1388dc43d47fda35ade35583279</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::GaussianFactor</name>
    <filename>a03123.html</filename>
    <base>gtsam::Factor</base>
    <member kind="function">
      <type></type>
      <name>GaussianFactor</name>
      <anchorfile>a03123.html</anchorfile>
      <anchor>ab31173c32b976a81d76af85e1d49e24a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GaussianFactor</name>
      <anchorfile>a03123.html</anchorfile>
      <anchor>a7fc8684c852571ea09ecea36847ed7a2</anchor>
      <arglist>(const CONTAINER &amp;keys)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~GaussianFactor</name>
      <anchorfile>a03123.html</anchorfile>
      <anchor>a5b1351803dd692f18042e2516ce1d42e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>equals</name>
      <anchorfile>a03123.html</anchorfile>
      <anchor>a995962014c602d30330eedc0718a5c1b</anchor>
      <arglist>(const GaussianFactor &amp;lf, double tol=1e-9) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual double</type>
      <name>error</name>
      <anchorfile>a03123.html</anchorfile>
      <anchor>a2704b2eba88bce36a17630cab8e7eebb</anchor>
      <arglist>(const VectorValues &amp;c) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual DenseIndex</type>
      <name>getDim</name>
      <anchorfile>a03123.html</anchorfile>
      <anchor>a043b7743551077755ab0a2f7ce9145a9</anchor>
      <arglist>(const_iterator variable) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual Matrix</type>
      <name>augmentedJacobian</name>
      <anchorfile>a03123.html</anchorfile>
      <anchor>aad92ba2bc352ae0e4c8e3089684f2fd2</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual std::pair&lt; Matrix, Vector &gt;</type>
      <name>jacobian</name>
      <anchorfile>a03123.html</anchorfile>
      <anchor>aab34974eaaefb9f2860f485a09ec4f1b</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual Matrix</type>
      <name>augmentedInformation</name>
      <anchorfile>a03123.html</anchorfile>
      <anchor>a9d0075b3f0fd624c5ae50784e29f9dc6</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual Matrix</type>
      <name>information</name>
      <anchorfile>a03123.html</anchorfile>
      <anchor>a3e5307082cc4fb1f5bc1c732ab4d61ec</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual VectorValues</type>
      <name>hessianDiagonal</name>
      <anchorfile>a03123.html</anchorfile>
      <anchor>af767744f94063ee3e508e533f16fbd10</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>hessianDiagonal</name>
      <anchorfile>a03123.html</anchorfile>
      <anchor>abee2d32cd8408a41f9605f4d60ff818f</anchor>
      <arglist>(double *d) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual std::map&lt; Key, Matrix &gt;</type>
      <name>hessianBlockDiagonal</name>
      <anchorfile>a03123.html</anchorfile>
      <anchor>a0edbb7994001f28b306de73427e28751</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual GaussianFactor::shared_ptr</type>
      <name>clone</name>
      <anchorfile>a03123.html</anchorfile>
      <anchor>a3e305eb0950fbb3a5ea6db3cc9f2032b</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>empty</name>
      <anchorfile>a03123.html</anchorfile>
      <anchor>adc1222b8ed44ec379c9bdfe813f6d682</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual GaussianFactor::shared_ptr</type>
      <name>negate</name>
      <anchorfile>a03123.html</anchorfile>
      <anchor>abd7ff975956b56b356d04547250650b7</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>updateHessian</name>
      <anchorfile>a03123.html</anchorfile>
      <anchor>acc9a428ca38e8899654ddf4394e07336</anchor>
      <arglist>(const KeyVector &amp;keys, SymmetricBlockMatrix *info) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>multiplyHessianAdd</name>
      <anchorfile>a03123.html</anchorfile>
      <anchor>a835e0d8c262a982cc165084304d21227</anchor>
      <arglist>(double alpha, const VectorValues &amp;x, VectorValues &amp;y) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual VectorValues</type>
      <name>gradientAtZero</name>
      <anchorfile>a03123.html</anchorfile>
      <anchor>a798113430deafb5db828d23a7187cac2</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>gradientAtZero</name>
      <anchorfile>a03123.html</anchorfile>
      <anchor>aff23fa0ddcc065591cd4301d86f7a96e</anchor>
      <arglist>(double *d) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual Vector</type>
      <name>gradient</name>
      <anchorfile>a03123.html</anchorfile>
      <anchor>a16e90a691f7240e1b973e6dd3d8dc9c9</anchor>
      <arglist>(Key key, const VectorValues &amp;x) const =0</arglist>
    </member>
    <member kind="typedef">
      <type>GaussianFactor</type>
      <name>This</name>
      <anchorfile>a03123.html</anchorfile>
      <anchor>ac49aaf7a5ac8bbf486762e9321a3d34f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; This &gt;</type>
      <name>shared_ptr</name>
      <anchorfile>a03123.html</anchorfile>
      <anchor>a0eeee0de6e144fedc937d7272be80a36</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Factor</type>
      <name>Base</name>
      <anchorfile>a03123.html</anchorfile>
      <anchor>a3fe9ce76eaef7dac2a434408e960bbd8</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>boost::serialization::access</name>
      <anchorfile>a03123.html</anchorfile>
      <anchor>ac98d07dd8f7b70e16ccb9a01abf56b9c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::GaussianFactorGraph</name>
    <filename>a03135.html</filename>
    <base>FactorGraph&lt; GaussianFactor &gt;</base>
    <base>EliminateableFactorGraph&lt; GaussianFactorGraph &gt;</base>
    <member kind="function">
      <type>std::vector&lt; boost::tuple&lt; size_t, size_t, double &gt; &gt;</type>
      <name>sparseJacobian</name>
      <anchorfile>a03135.html</anchorfile>
      <anchor>a922901a3a773795952c403cac7f72018</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Matrix</type>
      <name>sparseJacobian_</name>
      <anchorfile>a03135.html</anchorfile>
      <anchor>a5856b8544f4d9b76be4b2d8f13807e09</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Matrix</type>
      <name>augmentedJacobian</name>
      <anchorfile>a03135.html</anchorfile>
      <anchor>a608276c21c1958779e32065adf139089</anchor>
      <arglist>(boost::optional&lt; const Ordering &amp; &gt; optionalOrdering=boost::none) const</arglist>
    </member>
    <member kind="function">
      <type>std::pair&lt; Matrix, Vector &gt;</type>
      <name>jacobian</name>
      <anchorfile>a03135.html</anchorfile>
      <anchor>a2b217faf72f650fd401f5eeeac7af52f</anchor>
      <arglist>(boost::optional&lt; const Ordering &amp; &gt; optionalOrdering=boost::none) const</arglist>
    </member>
    <member kind="function">
      <type>Matrix</type>
      <name>augmentedHessian</name>
      <anchorfile>a03135.html</anchorfile>
      <anchor>a0a09026cf76ad2bfadb7a3080f7732cc</anchor>
      <arglist>(boost::optional&lt; const Ordering &amp; &gt; optionalOrdering=boost::none) const</arglist>
    </member>
    <member kind="function">
      <type>std::pair&lt; Matrix, Vector &gt;</type>
      <name>hessian</name>
      <anchorfile>a03135.html</anchorfile>
      <anchor>afb27917bc8b014e57dcbd04d5ff3d318</anchor>
      <arglist>(boost::optional&lt; const Ordering &amp; &gt; optionalOrdering=boost::none) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual VectorValues</type>
      <name>hessianDiagonal</name>
      <anchorfile>a03135.html</anchorfile>
      <anchor>ab325c99d695e76a6d1b99285d9ab8dae</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::map&lt; Key, Matrix &gt;</type>
      <name>hessianBlockDiagonal</name>
      <anchorfile>a03135.html</anchorfile>
      <anchor>a4d1d71b01cfecb78005b82465ebe632d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>VectorValues</type>
      <name>optimize</name>
      <anchorfile>a03135.html</anchorfile>
      <anchor>a801ecafe5fcc7cab20f579af4625aece</anchor>
      <arglist>(OptionalOrdering ordering=boost::none, const Eliminate &amp;function=EliminationTraitsType::DefaultEliminate) const</arglist>
    </member>
    <member kind="function">
      <type>VectorValues</type>
      <name>optimizeDensely</name>
      <anchorfile>a03135.html</anchorfile>
      <anchor>ae26bfbcee7625daf234a43fd45796700</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>VectorValues</type>
      <name>gradient</name>
      <anchorfile>a03135.html</anchorfile>
      <anchor>aa183f87ebad359ef5dee4ef626522bf2</anchor>
      <arglist>(const VectorValues &amp;x0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual VectorValues</type>
      <name>gradientAtZero</name>
      <anchorfile>a03135.html</anchorfile>
      <anchor>a4051ae22110840eeebe855652352ef69</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>VectorValues</type>
      <name>optimizeGradientSearch</name>
      <anchorfile>a03135.html</anchorfile>
      <anchor>a31ae5450f0fbcfc7e8edf0cb9deb21c2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>VectorValues</type>
      <name>transposeMultiply</name>
      <anchorfile>a03135.html</anchorfile>
      <anchor>adb2535546d074ea20f68d1c9a82ea91f</anchor>
      <arglist>(const Errors &amp;e) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>transposeMultiplyAdd</name>
      <anchorfile>a03135.html</anchorfile>
      <anchor>ad334bc63d65bb3fd53a28fdce19c9bc1</anchor>
      <arglist>(double alpha, const Errors &amp;e, VectorValues &amp;x) const</arglist>
    </member>
    <member kind="function">
      <type>Errors</type>
      <name>gaussianErrors</name>
      <anchorfile>a03135.html</anchorfile>
      <anchor>a908618e417977a645baca9f93b9c4e16</anchor>
      <arglist>(const VectorValues &amp;x) const</arglist>
    </member>
    <member kind="function">
      <type>Errors</type>
      <name>operator *</name>
      <anchorfile>a03135.html</anchorfile>
      <anchor>afc4c2e853df3dc4420573d7cb64816b1</anchor>
      <arglist>(const VectorValues &amp;x) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>multiplyHessianAdd</name>
      <anchorfile>a03135.html</anchorfile>
      <anchor>ad48bf2fb09cf416d3f980d5385dd63a8</anchor>
      <arglist>(double alpha, const VectorValues &amp;x, VectorValues &amp;y) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>multiplyInPlace</name>
      <anchorfile>a03135.html</anchorfile>
      <anchor>a4a87e24812c266e87af6b691063b11ef</anchor>
      <arglist>(const VectorValues &amp;x, Errors &amp;e) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>multiplyInPlace</name>
      <anchorfile>a03135.html</anchorfile>
      <anchor>a899a8e63e67a30a060879c8478e9d351</anchor>
      <arglist>(const VectorValues &amp;x, const Errors::iterator &amp;e) const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GaussianFactorGraph</name>
      <anchorfile>a03135.html</anchorfile>
      <anchor>a6230b36e3daf60b619e20742db3b02b6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GaussianFactorGraph</name>
      <anchorfile>a03135.html</anchorfile>
      <anchor>ae25329ab2478d0ea2054eebc7bcdde0a</anchor>
      <arglist>(ITERATOR firstFactor, ITERATOR lastFactor)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GaussianFactorGraph</name>
      <anchorfile>a03135.html</anchorfile>
      <anchor>af5974ac5896b74579db7967b05f6a146</anchor>
      <arglist>(const CONTAINER &amp;factors)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GaussianFactorGraph</name>
      <anchorfile>a03135.html</anchorfile>
      <anchor>aedece6712926154a27d3facc4899b88a</anchor>
      <arglist>(const FactorGraph&lt; DERIVEDFACTOR &gt; &amp;graph)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~GaussianFactorGraph</name>
      <anchorfile>a03135.html</anchorfile>
      <anchor>ad2cf3894566f0970a9df81f28b8a0dda</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add</name>
      <anchorfile>a03135.html</anchorfile>
      <anchor>a733aa6a7780bb3d16fb45345a655f717</anchor>
      <arglist>(const GaussianFactor &amp;factor)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add</name>
      <anchorfile>a03135.html</anchorfile>
      <anchor>a9778ee09d534bc6b8c2a2263e14875da</anchor>
      <arglist>(const sharedFactor &amp;factor)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add</name>
      <anchorfile>a03135.html</anchorfile>
      <anchor>acac67c59333e4db66b530ee09d231e3d</anchor>
      <arglist>(const Vector &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add</name>
      <anchorfile>a03135.html</anchorfile>
      <anchor>ad20e5b614636e00934414baf2a9b8636</anchor>
      <arglist>(Key key1, const Matrix &amp;A1, const Vector &amp;b, const SharedDiagonal &amp;model=SharedDiagonal())</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add</name>
      <anchorfile>a03135.html</anchorfile>
      <anchor>ad34fa381109aa8c3e1653dc352b350c9</anchor>
      <arglist>(Key key1, const Matrix &amp;A1, Key key2, const Matrix &amp;A2, const Vector &amp;b, const SharedDiagonal &amp;model=SharedDiagonal())</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add</name>
      <anchorfile>a03135.html</anchorfile>
      <anchor>a8a98904f917816d66b36a912acb44830</anchor>
      <arglist>(Key key1, const Matrix &amp;A1, Key key2, const Matrix &amp;A2, Key key3, const Matrix &amp;A3, const Vector &amp;b, const SharedDiagonal &amp;model=SharedDiagonal())</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add</name>
      <anchorfile>a03135.html</anchorfile>
      <anchor>a2eaa4c442c6a4424cb8febe3e0f4f66c</anchor>
      <arglist>(const TERMS &amp;terms, const Vector &amp;b, const SharedDiagonal &amp;model=SharedDiagonal())</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>error</name>
      <anchorfile>a03135.html</anchorfile>
      <anchor>ac0c9b70edb23bac0818ded3d32a6ed13</anchor>
      <arglist>(const VectorValues &amp;x) const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>probPrime</name>
      <anchorfile>a03135.html</anchorfile>
      <anchor>a74ed62e8ff4efeb6c33f4acd91d08625</anchor>
      <arglist>(const VectorValues &amp;c) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual GaussianFactorGraph</type>
      <name>clone</name>
      <anchorfile>a03135.html</anchorfile>
      <anchor>a85e7472485f1cfdd1354ee4161981c0f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual GaussianFactorGraph::shared_ptr</type>
      <name>cloneToPtr</name>
      <anchorfile>a03135.html</anchorfile>
      <anchor>a5ba73df3e028d51da3ee8add3f93b63e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>GaussianFactorGraph</type>
      <name>negate</name>
      <anchorfile>a03135.html</anchorfile>
      <anchor>a05bfa41e9ff99f246ea528ba26b82e69</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; boost::tuple&lt; size_t, size_t, double &gt; &gt;</type>
      <name>sparseJacobian</name>
      <anchorfile>a03135.html</anchorfile>
      <anchor>a922901a3a773795952c403cac7f72018</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Matrix</type>
      <name>sparseJacobian_</name>
      <anchorfile>a03135.html</anchorfile>
      <anchor>a5856b8544f4d9b76be4b2d8f13807e09</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Matrix</type>
      <name>augmentedJacobian</name>
      <anchorfile>a03135.html</anchorfile>
      <anchor>a608276c21c1958779e32065adf139089</anchor>
      <arglist>(boost::optional&lt; const Ordering &amp; &gt; optionalOrdering=boost::none) const</arglist>
    </member>
    <member kind="function">
      <type>std::pair&lt; Matrix, Vector &gt;</type>
      <name>jacobian</name>
      <anchorfile>a03135.html</anchorfile>
      <anchor>a2b217faf72f650fd401f5eeeac7af52f</anchor>
      <arglist>(boost::optional&lt; const Ordering &amp; &gt; optionalOrdering=boost::none) const</arglist>
    </member>
    <member kind="function">
      <type>Matrix</type>
      <name>augmentedHessian</name>
      <anchorfile>a03135.html</anchorfile>
      <anchor>a0a09026cf76ad2bfadb7a3080f7732cc</anchor>
      <arglist>(boost::optional&lt; const Ordering &amp; &gt; optionalOrdering=boost::none) const</arglist>
    </member>
    <member kind="function">
      <type>std::pair&lt; Matrix, Vector &gt;</type>
      <name>hessian</name>
      <anchorfile>a03135.html</anchorfile>
      <anchor>afb27917bc8b014e57dcbd04d5ff3d318</anchor>
      <arglist>(boost::optional&lt; const Ordering &amp; &gt; optionalOrdering=boost::none) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual VectorValues</type>
      <name>hessianDiagonal</name>
      <anchorfile>a03135.html</anchorfile>
      <anchor>ab325c99d695e76a6d1b99285d9ab8dae</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::map&lt; Key, Matrix &gt;</type>
      <name>hessianBlockDiagonal</name>
      <anchorfile>a03135.html</anchorfile>
      <anchor>a4d1d71b01cfecb78005b82465ebe632d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>VectorValues</type>
      <name>optimize</name>
      <anchorfile>a03135.html</anchorfile>
      <anchor>a801ecafe5fcc7cab20f579af4625aece</anchor>
      <arglist>(OptionalOrdering ordering=boost::none, const Eliminate &amp;function=EliminationTraitsType::DefaultEliminate) const</arglist>
    </member>
    <member kind="function">
      <type>VectorValues</type>
      <name>optimizeDensely</name>
      <anchorfile>a03135.html</anchorfile>
      <anchor>ae26bfbcee7625daf234a43fd45796700</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>VectorValues</type>
      <name>gradient</name>
      <anchorfile>a03135.html</anchorfile>
      <anchor>aa183f87ebad359ef5dee4ef626522bf2</anchor>
      <arglist>(const VectorValues &amp;x0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual VectorValues</type>
      <name>gradientAtZero</name>
      <anchorfile>a03135.html</anchorfile>
      <anchor>a4051ae22110840eeebe855652352ef69</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>VectorValues</type>
      <name>optimizeGradientSearch</name>
      <anchorfile>a03135.html</anchorfile>
      <anchor>a31ae5450f0fbcfc7e8edf0cb9deb21c2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>VectorValues</type>
      <name>transposeMultiply</name>
      <anchorfile>a03135.html</anchorfile>
      <anchor>adb2535546d074ea20f68d1c9a82ea91f</anchor>
      <arglist>(const Errors &amp;e) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>transposeMultiplyAdd</name>
      <anchorfile>a03135.html</anchorfile>
      <anchor>ad334bc63d65bb3fd53a28fdce19c9bc1</anchor>
      <arglist>(double alpha, const Errors &amp;e, VectorValues &amp;x) const</arglist>
    </member>
    <member kind="function">
      <type>Errors</type>
      <name>gaussianErrors</name>
      <anchorfile>a03135.html</anchorfile>
      <anchor>a908618e417977a645baca9f93b9c4e16</anchor>
      <arglist>(const VectorValues &amp;x) const</arglist>
    </member>
    <member kind="function">
      <type>Errors</type>
      <name>operator *</name>
      <anchorfile>a03135.html</anchorfile>
      <anchor>afc4c2e853df3dc4420573d7cb64816b1</anchor>
      <arglist>(const VectorValues &amp;x) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>multiplyHessianAdd</name>
      <anchorfile>a03135.html</anchorfile>
      <anchor>ad48bf2fb09cf416d3f980d5385dd63a8</anchor>
      <arglist>(double alpha, const VectorValues &amp;x, VectorValues &amp;y) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>multiplyInPlace</name>
      <anchorfile>a03135.html</anchorfile>
      <anchor>a4a87e24812c266e87af6b691063b11ef</anchor>
      <arglist>(const VectorValues &amp;x, Errors &amp;e) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>multiplyInPlace</name>
      <anchorfile>a03135.html</anchorfile>
      <anchor>a899a8e63e67a30a060879c8478e9d351</anchor>
      <arglist>(const VectorValues &amp;x, const Errors::iterator &amp;e) const</arglist>
    </member>
    <member kind="typedef">
      <type>GaussianFactorGraph</type>
      <name>This</name>
      <anchorfile>a03135.html</anchorfile>
      <anchor>aa5ff7a930581421abeb3b93c1347fcdb</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>FactorGraph&lt; GaussianFactor &gt;</type>
      <name>Base</name>
      <anchorfile>a03135.html</anchorfile>
      <anchor>ae9e408910e2cb068adea00486d8274e6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>EliminateableFactorGraph&lt; This &gt;</type>
      <name>BaseEliminateable</name>
      <anchorfile>a03135.html</anchorfile>
      <anchor>a1b58d74e4489680e0d4a866bad4b0dcf</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; This &gt;</type>
      <name>shared_ptr</name>
      <anchorfile>a03135.html</anchorfile>
      <anchor>a1f73f4987b9bdaac5c1414a401c0364c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>KeySet</type>
      <name>Keys</name>
      <anchorfile>a03135.html</anchorfile>
      <anchor>aacb8e92ffef9b561c3d40338ef8506f5</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>boost::serialization::access</name>
      <anchorfile>a03135.html</anchorfile>
      <anchor>ac98d07dd8f7b70e16ccb9a01abf56b9c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::GaussianFactorGraphSystem</name>
    <filename>a03315.html</filename>
  </compound>
  <compound kind="class">
    <name>gtsam::GaussianISAM</name>
    <filename>a03143.html</filename>
    <base>ISAM&lt; GaussianBayesTree &gt;</base>
    <member kind="function">
      <type></type>
      <name>GaussianISAM</name>
      <anchorfile>a03143.html</anchorfile>
      <anchor>a876e1826e8fdfda05ef9636a11a813d8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GaussianISAM</name>
      <anchorfile>a03143.html</anchorfile>
      <anchor>afa79821d0c4b3f880bd60eacb7552f15</anchor>
      <arglist>(const GaussianBayesTree &amp;bayesTree)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GaussianISAM</name>
      <anchorfile>a03143.html</anchorfile>
      <anchor>a876e1826e8fdfda05ef9636a11a813d8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GaussianISAM</name>
      <anchorfile>a03143.html</anchorfile>
      <anchor>afa79821d0c4b3f880bd60eacb7552f15</anchor>
      <arglist>(const GaussianBayesTree &amp;bayesTree)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::GaussianJunctionTree</name>
    <filename>a03147.html</filename>
    <base>JunctionTree&lt; GaussianBayesTree, GaussianFactorGraph &gt;</base>
    <member kind="function">
      <type></type>
      <name>GaussianJunctionTree</name>
      <anchorfile>a03147.html</anchorfile>
      <anchor>aeff8507ed504dfffa8f28dc7466bbb40</anchor>
      <arglist>(const GaussianEliminationTree &amp;eliminationTree)</arglist>
    </member>
    <member kind="typedef">
      <type>JunctionTree&lt; GaussianBayesTree, GaussianFactorGraph &gt;</type>
      <name>Base</name>
      <anchorfile>a03147.html</anchorfile>
      <anchor>a46850a5afd2d6af758c5209792cde593</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GaussianJunctionTree</type>
      <name>This</name>
      <anchorfile>a03147.html</anchorfile>
      <anchor>a3d2cb56f10ff0b3920a1e57af73e3371</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; This &gt;</type>
      <name>shared_ptr</name>
      <anchorfile>a03147.html</anchorfile>
      <anchor>af18233320fb77123cdc946164743704f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::GaussMarkov1stOrderFactor</name>
    <filename>a04467.html</filename>
    <templarg></templarg>
    <base>NoiseModelFactor2&lt; VALUE, VALUE &gt;</base>
    <member kind="function">
      <type></type>
      <name>GaussMarkov1stOrderFactor</name>
      <anchorfile>a04467.html</anchorfile>
      <anchor>a06e7fed12e1cd0e29551a6150ae3775c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GaussMarkov1stOrderFactor</name>
      <anchorfile>a04467.html</anchorfile>
      <anchor>a5b136d82361f771ed6a2e37d688de1d1</anchor>
      <arglist>(const Key &amp;key1, const Key &amp;key2, double delta_t, Vector tau, const SharedGaussian &amp;model)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>print</name>
      <anchorfile>a04467.html</anchorfile>
      <anchor>a0e12cc8d38dca43d47a761e037a08a38</anchor>
      <arglist>(const std::string &amp;s, const KeyFormatter &amp;keyFormatter=DefaultKeyFormatter) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>equals</name>
      <anchorfile>a04467.html</anchorfile>
      <anchor>acac8cb5485e3bc6183b100056c5906e5</anchor>
      <arglist>(const NonlinearFactor &amp;expected, double tol=1e-9) const</arglist>
    </member>
    <member kind="function">
      <type>Vector</type>
      <name>evaluateError</name>
      <anchorfile>a04467.html</anchorfile>
      <anchor>a3100e04851e47c69324d6d6068bacfdf</anchor>
      <arglist>(const VALUE &amp;p1, const VALUE &amp;p2, boost::optional&lt; Matrix &amp; &gt; H1=boost::none, boost::optional&lt; Matrix &amp; &gt; H2=boost::none) const</arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>boost::serialization::access</name>
      <anchorfile>a04467.html</anchorfile>
      <anchor>ac98d07dd8f7b70e16ccb9a01abf56b9c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::GaussNewtonOptimizer</name>
    <filename>a03639.html</filename>
    <base>gtsam::NonlinearOptimizer</base>
    <member kind="function">
      <type></type>
      <name>GaussNewtonOptimizer</name>
      <anchorfile>a03639.html</anchorfile>
      <anchor>ac6a87de7dcab376696ede784ccb5da0e</anchor>
      <arglist>(const NonlinearFactorGraph &amp;graph, const Values &amp;initialValues, const GaussNewtonParams &amp;params=GaussNewtonParams())</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GaussNewtonOptimizer</name>
      <anchorfile>a03639.html</anchorfile>
      <anchor>add3883c2df337aa134c62dd34460e1e9</anchor>
      <arglist>(const NonlinearFactorGraph &amp;graph, const Values &amp;initialValues, const Ordering &amp;ordering)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~GaussNewtonOptimizer</name>
      <anchorfile>a03639.html</anchorfile>
      <anchor>a9e82014dee82a2440113c0bef574bea0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>GaussianFactorGraph::shared_ptr</type>
      <name>iterate</name>
      <anchorfile>a03639.html</anchorfile>
      <anchor>aac60a78f5eb2157e916514cfa070dc70</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>const GaussNewtonParams &amp;</type>
      <name>params</name>
      <anchorfile>a03639.html</anchorfile>
      <anchor>a20195fe24bd73e6b7bfc28f7d4eaaf45</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GaussNewtonOptimizer</name>
      <anchorfile>a03639.html</anchorfile>
      <anchor>ac6a87de7dcab376696ede784ccb5da0e</anchor>
      <arglist>(const NonlinearFactorGraph &amp;graph, const Values &amp;initialValues, const GaussNewtonParams &amp;params=GaussNewtonParams())</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GaussNewtonOptimizer</name>
      <anchorfile>a03639.html</anchorfile>
      <anchor>add3883c2df337aa134c62dd34460e1e9</anchor>
      <arglist>(const NonlinearFactorGraph &amp;graph, const Values &amp;initialValues, const Ordering &amp;ordering)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~GaussNewtonOptimizer</name>
      <anchorfile>a03639.html</anchorfile>
      <anchor>a9e82014dee82a2440113c0bef574bea0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>GaussianFactorGraph::shared_ptr</type>
      <name>iterate</name>
      <anchorfile>a03639.html</anchorfile>
      <anchor>aac60a78f5eb2157e916514cfa070dc70</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>const GaussNewtonParams &amp;</type>
      <name>params</name>
      <anchorfile>a03639.html</anchorfile>
      <anchor>a20195fe24bd73e6b7bfc28f7d4eaaf45</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>const NonlinearOptimizerParams &amp;</type>
      <name>_params</name>
      <anchorfile>a03639.html</anchorfile>
      <anchor>a28ffc8b7d007eb015e862c802cbc70bb</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>GaussNewtonParams</type>
      <name>ensureHasOrdering</name>
      <anchorfile>a03639.html</anchorfile>
      <anchor>a844e8aad06fade01e6741f22335932c3</anchor>
      <arglist>(GaussNewtonParams params, const NonlinearFactorGraph &amp;graph) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::GaussNewtonParams</name>
    <filename>a03635.html</filename>
    <base>gtsam::NonlinearOptimizerParams</base>
  </compound>
  <compound kind="class">
    <name>gtsam::noiseModel::mEstimator::GemanMcClure</name>
    <filename>a03271.html</filename>
    <base>gtsam::noiseModel::mEstimator::Base</base>
    <member kind="friend">
      <type>friend class</type>
      <name>boost::serialization::access</name>
      <anchorfile>a03271.html</anchorfile>
      <anchor>ac98d07dd8f7b70e16ccb9a01abf56b9c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::GeneralSFMFactor</name>
    <filename>a03995.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <base>NoiseModelFactor2&lt; CAMERA, LANDMARK &gt;</base>
    <member kind="function">
      <type></type>
      <name>GeneralSFMFactor</name>
      <anchorfile>a03995.html</anchorfile>
      <anchor>a6597e39575729001daec1f975cee4bd7</anchor>
      <arglist>(const Point2 &amp;measured, const SharedNoiseModel &amp;model, Key cameraKey, Key landmarkKey)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GeneralSFMFactor</name>
      <anchorfile>a03995.html</anchorfile>
      <anchor>a65b2030a4a080aa03d6fa2ed183e5093</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GeneralSFMFactor</name>
      <anchorfile>a03995.html</anchorfile>
      <anchor>ab4a204f23fb77bacf94dabba6aa3e6f7</anchor>
      <arglist>(const Point2 &amp;p)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GeneralSFMFactor</name>
      <anchorfile>a03995.html</anchorfile>
      <anchor>add5b5e3afab2f22d30df78104bc9fd00</anchor>
      <arglist>(double x, double y)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~GeneralSFMFactor</name>
      <anchorfile>a03995.html</anchorfile>
      <anchor>ae6a452d862aa5b2f9402a78ed5ec8032</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual gtsam::NonlinearFactor::shared_ptr</type>
      <name>clone</name>
      <anchorfile>a03995.html</anchorfile>
      <anchor>a378274f170ebc7cc2f8bdaee261ccb41</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>a03995.html</anchorfile>
      <anchor>add3f0a508d8d415c55f63c2d41110d46</anchor>
      <arglist>(const std::string &amp;s=&quot;SFMFactor&quot;, const KeyFormatter &amp;keyFormatter=DefaultKeyFormatter) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>equals</name>
      <anchorfile>a03995.html</anchorfile>
      <anchor>a55507958826d5b57f036d0a2dc53f6f5</anchor>
      <arglist>(const NonlinearFactor &amp;p, double tol=1e-9) const</arglist>
    </member>
    <member kind="function">
      <type>Vector</type>
      <name>evaluateError</name>
      <anchorfile>a03995.html</anchorfile>
      <anchor>a1261652a27d4ce278943e03cd4f3c165</anchor>
      <arglist>(const CAMERA &amp;camera, const LANDMARK &amp;point, boost::optional&lt; Matrix &amp; &gt; H1=boost::none, boost::optional&lt; Matrix &amp; &gt; H2=boost::none) const</arglist>
    </member>
    <member kind="function">
      <type>boost::shared_ptr&lt; GaussianFactor &gt;</type>
      <name>linearize</name>
      <anchorfile>a03995.html</anchorfile>
      <anchor>a4115dab3a35033b91368f440dab32d6f</anchor>
      <arglist>(const Values &amp;values) const</arglist>
    </member>
    <member kind="function">
      <type>const Point2</type>
      <name>measured</name>
      <anchorfile>a03995.html</anchorfile>
      <anchor>a600eee15a3c90d46b0b9d9a9ece8f378</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="typedef">
      <type>GeneralSFMFactor&lt; CAMERA, LANDMARK &gt;</type>
      <name>This</name>
      <anchorfile>a03995.html</anchorfile>
      <anchor>a666ae4717c664ab751511226b5135d08</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>NoiseModelFactor2&lt; CAMERA, LANDMARK &gt;</type>
      <name>Base</name>
      <anchorfile>a03995.html</anchorfile>
      <anchor>a98fbb3f015804b390e4a6ce485fac27c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Point2</type>
      <name>measured_</name>
      <anchorfile>a03995.html</anchorfile>
      <anchor>ad207a707318ad32b2bdcaf6f8400c8d5</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>boost::serialization::access</name>
      <anchorfile>a03995.html</anchorfile>
      <anchor>ac98d07dd8f7b70e16ccb9a01abf56b9c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::GeneralSFMFactor2</name>
    <filename>a04003.html</filename>
    <templarg></templarg>
    <base>NoiseModelFactor3&lt; Pose3, Point3, CALIBRATION &gt;</base>
    <member kind="function">
      <type></type>
      <name>GeneralSFMFactor2</name>
      <anchorfile>a04003.html</anchorfile>
      <anchor>a9edba229f8eb9818477c7cc2a4a49b38</anchor>
      <arglist>(const Point2 &amp;measured, const SharedNoiseModel &amp;model, Key poseKey, Key landmarkKey, Key calibKey)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GeneralSFMFactor2</name>
      <anchorfile>a04003.html</anchorfile>
      <anchor>a35cb09493e3196e3ab58049a8923a2fb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~GeneralSFMFactor2</name>
      <anchorfile>a04003.html</anchorfile>
      <anchor>ab3862f134ada62ef690c44594c780188</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual gtsam::NonlinearFactor::shared_ptr</type>
      <name>clone</name>
      <anchorfile>a04003.html</anchorfile>
      <anchor>af9456cf84babc846bdcfb6801dde9ea9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>a04003.html</anchorfile>
      <anchor>a36b81daf99d8042596f985418fafe970</anchor>
      <arglist>(const std::string &amp;s=&quot;SFMFactor2&quot;, const KeyFormatter &amp;keyFormatter=DefaultKeyFormatter) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>equals</name>
      <anchorfile>a04003.html</anchorfile>
      <anchor>a016d9d99ed1de674da48c410cf2f4354</anchor>
      <arglist>(const NonlinearFactor &amp;p, double tol=1e-9) const</arglist>
    </member>
    <member kind="function">
      <type>Vector</type>
      <name>evaluateError</name>
      <anchorfile>a04003.html</anchorfile>
      <anchor>aa043cd498695fd8af6754bb6fc7e280c</anchor>
      <arglist>(const Pose3 &amp;pose3, const Point3 &amp;point, const CALIBRATION &amp;calib, boost::optional&lt; Matrix &amp; &gt; H1=boost::none, boost::optional&lt; Matrix &amp; &gt; H2=boost::none, boost::optional&lt; Matrix &amp; &gt; H3=boost::none) const</arglist>
    </member>
    <member kind="function">
      <type>const Point2</type>
      <name>measured</name>
      <anchorfile>a04003.html</anchorfile>
      <anchor>a9282c0dd5b7ea93004e753cf1a2d1146</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="typedef">
      <type>PinholeCamera&lt; CALIBRATION &gt;</type>
      <name>Camera</name>
      <anchorfile>a04003.html</anchorfile>
      <anchor>a998a6c897312bb10c30604ab4e4176f2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>NoiseModelFactor3&lt; Pose3, Point3, CALIBRATION &gt;</type>
      <name>Base</name>
      <anchorfile>a04003.html</anchorfile>
      <anchor>a5a334159f6da23d4f4ff1fd35c9b8ab0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Point2</type>
      <name>measured_</name>
      <anchorfile>a04003.html</anchorfile>
      <anchor>a83ff3c06799436d67e7d841de2fdb80b</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>boost::serialization::access</name>
      <anchorfile>a04003.html</anchorfile>
      <anchor>ac98d07dd8f7b70e16ccb9a01abf56b9c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::GenericProjectionFactor</name>
    <filename>a04051.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <base>NoiseModelFactor2&lt; POSE, LANDMARK &gt;</base>
    <member kind="function">
      <type></type>
      <name>GenericProjectionFactor</name>
      <anchorfile>a04051.html</anchorfile>
      <anchor>a87fd316162e688e38079f1a304ca6c46</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GenericProjectionFactor</name>
      <anchorfile>a04051.html</anchorfile>
      <anchor>aebd1ec0e741d556f72ed7e8309f7b259</anchor>
      <arglist>(const Point2 &amp;measured, const SharedNoiseModel &amp;model, Key poseKey, Key pointKey, const boost::shared_ptr&lt; CALIBRATION &gt; &amp;K, boost::optional&lt; POSE &gt; body_P_sensor=boost::none)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GenericProjectionFactor</name>
      <anchorfile>a04051.html</anchorfile>
      <anchor>ac43cf4ea5f79e0c3a64b5668505d89ad</anchor>
      <arglist>(const Point2 &amp;measured, const SharedNoiseModel &amp;model, Key poseKey, Key pointKey, const boost::shared_ptr&lt; CALIBRATION &gt; &amp;K, bool throwCheirality, bool verboseCheirality, boost::optional&lt; POSE &gt; body_P_sensor=boost::none)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~GenericProjectionFactor</name>
      <anchorfile>a04051.html</anchorfile>
      <anchor>ab3e44365566c5da167780554c0aea43a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual gtsam::NonlinearFactor::shared_ptr</type>
      <name>clone</name>
      <anchorfile>a04051.html</anchorfile>
      <anchor>a140e8b7de4a32e500af74d79b26452cb</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>a04051.html</anchorfile>
      <anchor>a1c9287f5be9d0006c8300c6e2c03536a</anchor>
      <arglist>(const std::string &amp;s=&quot;&quot;, const KeyFormatter &amp;keyFormatter=DefaultKeyFormatter) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>equals</name>
      <anchorfile>a04051.html</anchorfile>
      <anchor>aed79cbfca7fd14904b679c15d1a8bf1f</anchor>
      <arglist>(const NonlinearFactor &amp;p, double tol=1e-9) const</arglist>
    </member>
    <member kind="function">
      <type>Vector</type>
      <name>evaluateError</name>
      <anchorfile>a04051.html</anchorfile>
      <anchor>ad47f6a1478bfa01cd07ac6d0ec129dc7</anchor>
      <arglist>(const Pose3 &amp;pose, const Point3 &amp;point, boost::optional&lt; Matrix &amp; &gt; H1=boost::none, boost::optional&lt; Matrix &amp; &gt; H2=boost::none) const</arglist>
    </member>
    <member kind="function">
      <type>const Point2 &amp;</type>
      <name>measured</name>
      <anchorfile>a04051.html</anchorfile>
      <anchor>a581299b360ee63f65359d713ac75a631</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const boost::shared_ptr&lt; CALIBRATION &gt;</type>
      <name>calibration</name>
      <anchorfile>a04051.html</anchorfile>
      <anchor>a7e480535121905f2e56fe461da107ee4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>verboseCheirality</name>
      <anchorfile>a04051.html</anchorfile>
      <anchor>a149d45978d1104fe970df20eb2dff450</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>throwCheirality</name>
      <anchorfile>a04051.html</anchorfile>
      <anchor>ab4d91a228926cba2922d9e2e06ff4104</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="typedef">
      <type>NoiseModelFactor2&lt; POSE, LANDMARK &gt;</type>
      <name>Base</name>
      <anchorfile>a04051.html</anchorfile>
      <anchor>afb272b23dd8aefdd5fc4747c948aca5e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GenericProjectionFactor&lt; POSE, LANDMARK, CALIBRATION &gt;</type>
      <name>This</name>
      <anchorfile>a04051.html</anchorfile>
      <anchor>a284d1618cc30f43664b512e6236485ef</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; This &gt;</type>
      <name>shared_ptr</name>
      <anchorfile>a04051.html</anchorfile>
      <anchor>ad3d894b6b0ae69d0623f6f45272acb0a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Point2</type>
      <name>measured_</name>
      <anchorfile>a04051.html</anchorfile>
      <anchor>a255e1a0498e504c1c5ec0839a3b6c755</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>boost::shared_ptr&lt; CALIBRATION &gt;</type>
      <name>K_</name>
      <anchorfile>a04051.html</anchorfile>
      <anchor>a4dccf402a384fee6b9ad802c37ab989f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>boost::optional&lt; POSE &gt;</type>
      <name>body_P_sensor_</name>
      <anchorfile>a04051.html</anchorfile>
      <anchor>a481f97058dad682badfb45fd27c8d444</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>throwCheirality_</name>
      <anchorfile>a04051.html</anchorfile>
      <anchor>a9862177693076e80e6e0cd03ab11a94d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>verboseCheirality_</name>
      <anchorfile>a04051.html</anchorfile>
      <anchor>adaf27277e2f5b0bd1cf395ef8fda68aa</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>boost::serialization::access</name>
      <anchorfile>a04051.html</anchorfile>
      <anchor>ac98d07dd8f7b70e16ccb9a01abf56b9c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::GenericStereoFactor</name>
    <filename>a04107.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <base>NoiseModelFactor2&lt; POSE, LANDMARK &gt;</base>
    <member kind="function">
      <type></type>
      <name>GenericStereoFactor</name>
      <anchorfile>a04107.html</anchorfile>
      <anchor>aac8f2d1b74b72d392ae450974e8d1e18</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GenericStereoFactor</name>
      <anchorfile>a04107.html</anchorfile>
      <anchor>aca587c1e7ce85802898fbf398470b229</anchor>
      <arglist>(const StereoPoint2 &amp;measured, const SharedNoiseModel &amp;model, Key poseKey, Key landmarkKey, const Cal3_S2Stereo::shared_ptr &amp;K, boost::optional&lt; POSE &gt; body_P_sensor=boost::none)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GenericStereoFactor</name>
      <anchorfile>a04107.html</anchorfile>
      <anchor>a3e9bbe838c9f91e54e8b6f9d61d3f537</anchor>
      <arglist>(const StereoPoint2 &amp;measured, const SharedNoiseModel &amp;model, Key poseKey, Key landmarkKey, const Cal3_S2Stereo::shared_ptr &amp;K, bool throwCheirality, bool verboseCheirality, boost::optional&lt; POSE &gt; body_P_sensor=boost::none)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~GenericStereoFactor</name>
      <anchorfile>a04107.html</anchorfile>
      <anchor>a811df2da6b20690b8d562cb9c1a71f1e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual gtsam::NonlinearFactor::shared_ptr</type>
      <name>clone</name>
      <anchorfile>a04107.html</anchorfile>
      <anchor>adcb6b4113ba33ce25301b251f4dbce95</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>a04107.html</anchorfile>
      <anchor>ac1a17cd8158bdcc7837b08a63b4c35c8</anchor>
      <arglist>(const std::string &amp;s=&quot;&quot;, const KeyFormatter &amp;keyFormatter=DefaultKeyFormatter) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>equals</name>
      <anchorfile>a04107.html</anchorfile>
      <anchor>a3826113aa8cd2bf205b43a9bcb2892b8</anchor>
      <arglist>(const NonlinearFactor &amp;f, double tol=1e-9) const</arglist>
    </member>
    <member kind="function">
      <type>Vector</type>
      <name>evaluateError</name>
      <anchorfile>a04107.html</anchorfile>
      <anchor>a7f842cee894523ae75950e1999229ff9</anchor>
      <arglist>(const Pose3 &amp;pose, const Point3 &amp;point, boost::optional&lt; Matrix &amp; &gt; H1=boost::none, boost::optional&lt; Matrix &amp; &gt; H2=boost::none) const</arglist>
    </member>
    <member kind="function">
      <type>const StereoPoint2 &amp;</type>
      <name>measured</name>
      <anchorfile>a04107.html</anchorfile>
      <anchor>a294638bd837fe6fcb8196a195d789b95</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Cal3_S2Stereo::shared_ptr</type>
      <name>calibration</name>
      <anchorfile>a04107.html</anchorfile>
      <anchor>a1a512894a302677b724ef4a0c2b6d0f8</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>verboseCheirality</name>
      <anchorfile>a04107.html</anchorfile>
      <anchor>a73bfae830f21b0246b85e25870dafe34</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>throwCheirality</name>
      <anchorfile>a04107.html</anchorfile>
      <anchor>a0f42c83ba31c711f67243d36b72a7d31</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="typedef">
      <type>NoiseModelFactor2&lt; POSE, LANDMARK &gt;</type>
      <name>Base</name>
      <anchorfile>a04107.html</anchorfile>
      <anchor>afab7f245fcbd293f400fe700913a85b8</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GenericStereoFactor&lt; POSE, LANDMARK &gt;</type>
      <name>This</name>
      <anchorfile>a04107.html</anchorfile>
      <anchor>a6655f82262d0e9cfd83bf7ecea4cbea3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; GenericStereoFactor &gt;</type>
      <name>shared_ptr</name>
      <anchorfile>a04107.html</anchorfile>
      <anchor>a77ec7f1a8e17a46ad0a6e0d092b2549f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>POSE</type>
      <name>CamPose</name>
      <anchorfile>a04107.html</anchorfile>
      <anchor>acf611598e4995aaba265b3b4c853e67c</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>boost::serialization::access</name>
      <anchorfile>a04107.html</anchorfile>
      <anchor>ac98d07dd8f7b70e16ccb9a01abf56b9c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::GenericValue</name>
    <filename>a02035.html</filename>
    <templarg>T</templarg>
    <base>gtsam::Value</base>
    <member kind="function">
      <type></type>
      <name>GenericValue</name>
      <anchorfile>a02035.html</anchorfile>
      <anchor>a8bf7ebb7a0a758cebd90d38663f88f89</anchor>
      <arglist>(const T &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>const T &amp;</type>
      <name>value</name>
      <anchorfile>a02035.html</anchorfile>
      <anchor>aa6c427f5cc4e72c771de1ac139528118</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>T &amp;</type>
      <name>value</name>
      <anchorfile>a02035.html</anchorfile>
      <anchor>a77cdae2967e38ea90b37784243526c77</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~GenericValue</name>
      <anchorfile>a02035.html</anchorfile>
      <anchor>a8ba923dff0d5bcda3ceeabe4d6961cf0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>equals_</name>
      <anchorfile>a02035.html</anchorfile>
      <anchor>a8ad56e74f2bf0ecb1c4e5bb51c8c7f3a</anchor>
      <arglist>(const Value &amp;p, double tol=1e-9) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>equals</name>
      <anchorfile>a02035.html</anchorfile>
      <anchor>a60ddebd2ce398b9697a0161274ae91cc</anchor>
      <arglist>(const GenericValue &amp;other, double tol=1e-9) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>print</name>
      <anchorfile>a02035.html</anchorfile>
      <anchor>a5710b14af31fe802bcb23a2e73aa5952</anchor>
      <arglist>(const std::string &amp;str) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Value *</type>
      <name>clone_</name>
      <anchorfile>a02035.html</anchorfile>
      <anchor>a40dacf98aa8e515151f83fdcd23dc163</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>deallocate_</name>
      <anchorfile>a02035.html</anchorfile>
      <anchor>a2b4f1e071c57b253c2ed0537fd9aab21</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual boost::shared_ptr&lt; Value &gt;</type>
      <name>clone</name>
      <anchorfile>a02035.html</anchorfile>
      <anchor>a8150db61ed23cac08650752b9731dc8f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Value *</type>
      <name>retract_</name>
      <anchorfile>a02035.html</anchorfile>
      <anchor>a526e49642c08e4dedc2096b1621124f4</anchor>
      <arglist>(const Vector &amp;delta) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Vector</type>
      <name>localCoordinates_</name>
      <anchorfile>a02035.html</anchorfile>
      <anchor>a29462334be5cf8c13a4c11797fff08d3</anchor>
      <arglist>(const Value &amp;value2) const</arglist>
    </member>
    <member kind="function">
      <type>GenericValue</type>
      <name>retract</name>
      <anchorfile>a02035.html</anchorfile>
      <anchor>ae54ab9a7abe2a7d48bc2756aa545ac78</anchor>
      <arglist>(const Vector &amp;delta) const</arglist>
    </member>
    <member kind="function">
      <type>Vector</type>
      <name>localCoordinates</name>
      <anchorfile>a02035.html</anchorfile>
      <anchor>ac47a680ad0e320fa896e740fe662ad4d</anchor>
      <arglist>(const GenericValue &amp;value2) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual size_t</type>
      <name>dim</name>
      <anchorfile>a02035.html</anchorfile>
      <anchor>ac9cccd3f2f8d78e4adae05a39073b301</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Value &amp;</type>
      <name>operator=</name>
      <anchorfile>a02035.html</anchorfile>
      <anchor>ad655888a96f09033abb3ab942af13f1f</anchor>
      <arglist>(const Value &amp;rhs)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>GenericValue&lt; T &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>a02035.html</anchorfile>
      <anchor>a00757908b27afae485540d645bac6838</anchor>
      <arglist>(const GenericValue&lt; T &gt; &amp;rhs)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>T</type>
      <name>value_</name>
      <anchorfile>a02035.html</anchorfile>
      <anchor>ab8454e55f25f7f475f8d31001625a8e9</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>boost::serialization::access</name>
      <anchorfile>a02035.html</anchorfile>
      <anchor>ac98d07dd8f7b70e16ccb9a01abf56b9c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::GPSFactor</name>
    <filename>a03447.html</filename>
    <base>NoiseModelFactor1&lt; Pose3 &gt;</base>
    <member kind="function">
      <type></type>
      <name>GPSFactor</name>
      <anchorfile>a03447.html</anchorfile>
      <anchor>a2c18c211bcbb029e12310ed4d6bcc2cd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GPSFactor</name>
      <anchorfile>a03447.html</anchorfile>
      <anchor>aadfaf1bf9a6252628e62a7259baa34a4</anchor>
      <arglist>(Key key, const Point3 &amp;gpsIn, const SharedNoiseModel &amp;model)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual gtsam::NonlinearFactor::shared_ptr</type>
      <name>clone</name>
      <anchorfile>a03447.html</anchorfile>
      <anchor>a9ba85fe6a6d00e9ead9a80b7a156b3f9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>print</name>
      <anchorfile>a03447.html</anchorfile>
      <anchor>a707d31147e7fa1276cb281ed7f20a597</anchor>
      <arglist>(const std::string &amp;s, const KeyFormatter &amp;keyFormatter=DefaultKeyFormatter) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>equals</name>
      <anchorfile>a03447.html</anchorfile>
      <anchor>a2962c03efeb9cfb152cc52c4dd0f5748</anchor>
      <arglist>(const NonlinearFactor &amp;expected, double tol=1e-9) const</arglist>
    </member>
    <member kind="function">
      <type>Vector</type>
      <name>evaluateError</name>
      <anchorfile>a03447.html</anchorfile>
      <anchor>a470805d6285c224c7f876e299165f6df</anchor>
      <arglist>(const Pose3 &amp;p, boost::optional&lt; Matrix &amp; &gt; H=boost::none) const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::pair&lt; Pose3, Vector3 &gt;</type>
      <name>EstimateState</name>
      <anchorfile>a03447.html</anchorfile>
      <anchor>aa8d4c043abd2c3692e44d9adef8f7c9e</anchor>
      <arglist>(double t1, const Point3 &amp;NED1, double t2, const Point3 &amp;NED2, double timestamp)</arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; GPSFactor &gt;</type>
      <name>shared_ptr</name>
      <anchorfile>a03447.html</anchorfile>
      <anchor>addc288a62819fd96f68feef3a953de69</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GPSFactor</type>
      <name>This</name>
      <anchorfile>a03447.html</anchorfile>
      <anchor>a09a484b80ec2d6b518c59cc8012d7895</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>boost::serialization::access</name>
      <anchorfile>a03447.html</anchorfile>
      <anchor>ac98d07dd8f7b70e16ccb9a01abf56b9c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::GPSFactor2</name>
    <filename>a03451.html</filename>
    <base>NoiseModelFactor1&lt; NavState &gt;</base>
    <member kind="function">
      <type></type>
      <name>GPSFactor2</name>
      <anchorfile>a03451.html</anchorfile>
      <anchor>ab2d41c2ac9e0bd92725e0b756dd83fef</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GPSFactor2</name>
      <anchorfile>a03451.html</anchorfile>
      <anchor>a54ca84b1574a5f94e83424155cbb3c5c</anchor>
      <arglist>(Key key, const Point3 &amp;gpsIn, const SharedNoiseModel &amp;model)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual gtsam::NonlinearFactor::shared_ptr</type>
      <name>clone</name>
      <anchorfile>a03451.html</anchorfile>
      <anchor>a5824f6a5fa5e4fd3db45c492832d9166</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>print</name>
      <anchorfile>a03451.html</anchorfile>
      <anchor>a05ef48b0bed1e7a1999bb2b1b75b5992</anchor>
      <arglist>(const std::string &amp;s, const KeyFormatter &amp;keyFormatter=DefaultKeyFormatter) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>equals</name>
      <anchorfile>a03451.html</anchorfile>
      <anchor>a13aa62eef16a341212a3eeebc9b43d44</anchor>
      <arglist>(const NonlinearFactor &amp;expected, double tol=1e-9) const</arglist>
    </member>
    <member kind="function">
      <type>Vector</type>
      <name>evaluateError</name>
      <anchorfile>a03451.html</anchorfile>
      <anchor>aa044942647d7160a42b9b321d298abf7</anchor>
      <arglist>(const NavState &amp;p, boost::optional&lt; Matrix &amp; &gt; H=boost::none) const</arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; GPSFactor2 &gt;</type>
      <name>shared_ptr</name>
      <anchorfile>a03451.html</anchorfile>
      <anchor>a8694662da33ab6c8d077cf25b2bae69c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GPSFactor2</type>
      <name>This</name>
      <anchorfile>a03451.html</anchorfile>
      <anchor>a435d6411862b6a971171e922b355136e</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>boost::serialization::access</name>
      <anchorfile>a03451.html</anchorfile>
      <anchor>ac98d07dd8f7b70e16ccb9a01abf56b9c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>gtsam::GraphvizFormatting</name>
    <filename>a03791.html</filename>
    <member kind="function">
      <type></type>
      <name>GraphvizFormatting</name>
      <anchorfile>a03791.html</anchorfile>
      <anchor>a28cc4181d43026077d292c8f7bbc93a9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>Axis</type>
      <name>paperHorizontalAxis</name>
      <anchorfile>a03791.html</anchorfile>
      <anchor>acd47a7fd6c759b84610f2f0c8643cb3b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Axis</type>
      <name>paperVerticalAxis</name>
      <anchorfile>a03791.html</anchorfile>
      <anchor>a2510b8d60ade59a0cb2eb20bdeabefa5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>figureWidthInches</name>
      <anchorfile>a03791.html</anchorfile>
      <anchor>a956beb8694084f8d8867b0bec6a84459</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>figureHeightInches</name>
      <anchorfile>a03791.html</anchorfile>
      <anchor>ae78b1146dd869627a7e103669d96e636</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>scale</name>
      <anchorfile>a03791.html</anchorfile>
      <anchor>a7f90a6942877030cb1234c33fbc74755</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>mergeSimilarFactors</name>
      <anchorfile>a03791.html</anchorfile>
      <anchor>a7be882956fb690537dffee6b657bee1c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>plotFactorPoints</name>
      <anchorfile>a03791.html</anchorfile>
      <anchor>a37e8753118a817a2b736f988bfbb525b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>connectKeysToFactor</name>
      <anchorfile>a03791.html</anchorfile>
      <anchor>ade060391ef247c9263b2ff50ea2629f2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>binaryEdges</name>
      <anchorfile>a03791.html</anchorfile>
      <anchor>a01c61272515e5360554f0291d1293c50</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::map&lt; size_t, Point2 &gt;</type>
      <name>factorPositions</name>
      <anchorfile>a03791.html</anchorfile>
      <anchor>a8a11a96fd9d6aa85116f6c8ddc886b4a</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>gtsam::group_tag</name>
    <filename>a02047.html</filename>
  </compound>
  <compound kind="struct">
    <name>gtsam::internal::handle</name>
    <filename>a03847.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>gtsam::internal::handle&lt; Eigen::Matrix&lt; double, M, N &gt; &gt;</name>
    <filename>a03863.html</filename>
    <templarg>M</templarg>
    <templarg>N</templarg>
  </compound>
  <compound kind="struct">
    <name>gtsam::internal::handle_matrix</name>
    <filename>a03851.html</filename>
    <templarg></templarg>
    <templarg>isDynamic</templarg>
  </compound>
  <compound kind="struct">
    <name>gtsam::internal::handle_matrix&lt; Eigen::Matrix&lt; double, M, N &gt;, false &gt;</name>
    <filename>a03859.html</filename>
    <templarg>M</templarg>
    <templarg>N</templarg>
  </compound>
  <compound kind="struct">
    <name>gtsam::internal::handle_matrix&lt; Eigen::Matrix&lt; double, M, N &gt;, true &gt;</name>
    <filename>a03855.html</filename>
    <templarg>M</templarg>
    <templarg>N</templarg>
  </compound>
  <compound kind="struct">
    <name>gtsam::HasBearing</name>
    <filename>a02475.html</filename>
    <templarg>A1</templarg>
    <templarg>A2</templarg>
    <templarg>RT</templarg>
  </compound>
  <compound kind="class">
    <name>HasBearing&lt; Pose2, T, Rot2 &gt;</name>
    <filename>a02475.html</filename>
  </compound>
  <compound kind="class">
    <name>HasBearing&lt; Pose3, Point3, Unit3 &gt;</name>
    <filename>a02475.html</filename>
  </compound>
  <compound kind="class">
    <name>HasBearing&lt; Pose3, Pose3, Unit3 &gt;</name>
    <filename>a02475.html</filename>
  </compound>
  <compound kind="struct">
    <name>gtsam::internal::HasManifoldPrereqs</name>
    <filename>a02103.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>gtsam::HasRange</name>
    <filename>a02479.html</filename>
    <templarg>A1</templarg>
    <templarg>A2</templarg>
    <templarg>RT</templarg>
  </compound>
  <compound kind="class">
    <name>HasRange&lt; CalibratedCamera, T, double &gt;</name>
    <filename>a02479.html</filename>
  </compound>
  <compound kind="class">
    <name>HasRange&lt; PinholeCamera&lt; Calibration &gt;, T, double &gt;</name>
    <filename>a02479.html</filename>
  </compound>
  <compound kind="class">
    <name>HasRange&lt; Pose2, T, double &gt;</name>
    <filename>a02479.html</filename>
  </compound>
  <compound kind="class">
    <name>HasRange&lt; Pose3, T, double &gt;</name>
    <filename>a02479.html</filename>
  </compound>
  <compound kind="class">
    <name>HasRange&lt; PoseRTV, PoseRTV, double &gt;</name>
    <filename>a02479.html</filename>
  </compound>
  <compound kind="class">
    <name>HasRange&lt; SimpleCamera, T, double &gt;</name>
    <filename>a02479.html</filename>
  </compound>
  <compound kind="struct">
    <name>gtsam::HasTestablePrereqs</name>
    <filename>a02199.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>gtsam::internal::HasVectorSpacePrereqs</name>
    <filename>a02287.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="class">
    <name>gtsam::HessianFactor</name>
    <filename>a03151.html</filename>
    <base>gtsam::GaussianFactor</base>
    <member kind="function">
      <type></type>
      <name>HessianFactor</name>
      <anchorfile>a03151.html</anchorfile>
      <anchor>acdcbc6dc5ead9bfdb6010f74bee3c8df</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HessianFactor</name>
      <anchorfile>a03151.html</anchorfile>
      <anchor>a7f637f93694de5b61c160376f5702cdd</anchor>
      <arglist>(Key j, const Matrix &amp;G, const Vector &amp;g, double f)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HessianFactor</name>
      <anchorfile>a03151.html</anchorfile>
      <anchor>aaebd96bc8dc741f8509a173814df19d2</anchor>
      <arglist>(Key j, const Vector &amp;mu, const Matrix &amp;Sigma)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HessianFactor</name>
      <anchorfile>a03151.html</anchorfile>
      <anchor>abb07c3bd55ff688700f82f6024bdf9f0</anchor>
      <arglist>(Key j1, Key j2, const Matrix &amp;G11, const Matrix &amp;G12, const Vector &amp;g1, const Matrix &amp;G22, const Vector &amp;g2, double f)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HessianFactor</name>
      <anchorfile>a03151.html</anchorfile>
      <anchor>a8dd0c87ce694143e2ad42c48559f9883</anchor>
      <arglist>(Key j1, Key j2, Key j3, const Matrix &amp;G11, const Matrix &amp;G12, const Matrix &amp;G13, const Vector &amp;g1, const Matrix &amp;G22, const Matrix &amp;G23, const Vector &amp;g2, const Matrix &amp;G33, const Vector &amp;g3, double f)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HessianFactor</name>
      <anchorfile>a03151.html</anchorfile>
      <anchor>a3dcc955082863c99391622760e7bdc93</anchor>
      <arglist>(const KeyVector &amp;js, const std::vector&lt; Matrix &gt; &amp;Gs, const std::vector&lt; Vector &gt; &amp;gs, double f)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HessianFactor</name>
      <anchorfile>a03151.html</anchorfile>
      <anchor>aea53397c9d43a943410ca33a4d8953d4</anchor>
      <arglist>(const KEYS &amp;keys, const SymmetricBlockMatrix &amp;augmentedInformation)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HessianFactor</name>
      <anchorfile>a03151.html</anchorfile>
      <anchor>ab4d355478837b450288cb1aac6d2d7ba</anchor>
      <arglist>(const JacobianFactor &amp;cg)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HessianFactor</name>
      <anchorfile>a03151.html</anchorfile>
      <anchor>ae8dd0248da60828ce386aed28b5dbd8e</anchor>
      <arglist>(const GaussianFactor &amp;factor)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HessianFactor</name>
      <anchorfile>a03151.html</anchorfile>
      <anchor>a5661391df1d96556ef8b4fdbd9713fc7</anchor>
      <arglist>(const GaussianFactorGraph &amp;factors, boost::optional&lt; const Scatter &amp; &gt; scatter=boost::none)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~HessianFactor</name>
      <anchorfile>a03151.html</anchorfile>
      <anchor>acf121e58f658a326d90565a8df34400c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual GaussianFactor::shared_ptr</type>
      <name>clone</name>
      <anchorfile>a03151.html</anchorfile>
      <anchor>a8ef07729e7e2c88777bf56cc54f82a3d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>print</name>
      <anchorfile>a03151.html</anchorfile>
      <anchor>af65f4f9c6d540b49d4bf0a2d361a1c8a</anchor>
      <arglist>(const std::string &amp;s=&quot;&quot;, const KeyFormatter &amp;formatter=DefaultKeyFormatter) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>equals</name>
      <anchorfile>a03151.html</anchorfile>
      <anchor>a5501a2693bcc2da99930e29a96415ec8</anchor>
      <arglist>(const GaussianFactor &amp;lf, double tol=1e-9) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>error</name>
      <anchorfile>a03151.html</anchorfile>
      <anchor>a5293846fbdb07af272421a1043218bd7</anchor>
      <arglist>(const VectorValues &amp;c) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual DenseIndex</type>
      <name>getDim</name>
      <anchorfile>a03151.html</anchorfile>
      <anchor>a0cfa4b1d2ced3e6fa9d8b4a4a14d8248</anchor>
      <arglist>(const_iterator variable) const</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>rows</name>
      <anchorfile>a03151.html</anchorfile>
      <anchor>aa8ebfa1105fd175d5c1eea3380c94259</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual GaussianFactor::shared_ptr</type>
      <name>negate</name>
      <anchorfile>a03151.html</anchorfile>
      <anchor>a7c2e711427a1335c58ef9f2f71199f04</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>empty</name>
      <anchorfile>a03151.html</anchorfile>
      <anchor>aa1c3e7b9597cdd7391c003f34e91579f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>constantTerm</name>
      <anchorfile>a03151.html</anchorfile>
      <anchor>a51e8f87fdbb60bd0744b624a6bdaa8e4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double &amp;</type>
      <name>constantTerm</name>
      <anchorfile>a03151.html</anchorfile>
      <anchor>a08e4787abc98623af37e92babae465b8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>SymmetricBlockMatrix::constBlock</type>
      <name>linearTerm</name>
      <anchorfile>a03151.html</anchorfile>
      <anchor>a8640eb9977d58a1e01be42dc49b7bc76</anchor>
      <arglist>(const_iterator j) const</arglist>
    </member>
    <member kind="function">
      <type>SymmetricBlockMatrix::constBlock</type>
      <name>linearTerm</name>
      <anchorfile>a03151.html</anchorfile>
      <anchor>a5bd74e517dd02d55684db2fc68114529</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>SymmetricBlockMatrix::Block</type>
      <name>linearTerm</name>
      <anchorfile>a03151.html</anchorfile>
      <anchor>a475512a6c478d8e02f212d9b851bd8ec</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const SymmetricBlockMatrix &amp;</type>
      <name>info</name>
      <anchorfile>a03151.html</anchorfile>
      <anchor>a7c38468107889c1e9fe9febb7133d184</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>SymmetricBlockMatrix &amp;</type>
      <name>info</name>
      <anchorfile>a03151.html</anchorfile>
      <anchor>a2ace0c89f48fac0c8189c3d45c1431ce</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Matrix</type>
      <name>augmentedInformation</name>
      <anchorfile>a03151.html</anchorfile>
      <anchor>a09ef84fdbadb9dded3e2cf98e7d1e232</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Eigen::SelfAdjointView&lt; SymmetricBlockMatrix::constBlock, Eigen::Upper &gt;</type>
      <name>informationView</name>
      <anchorfile>a03151.html</anchorfile>
      <anchor>a17f12be473e2564e46c2b80eef3148a5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Matrix</type>
      <name>information</name>
      <anchorfile>a03151.html</anchorfile>
      <anchor>a1097e5c0199f3595148a8c116c15db5d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual VectorValues</type>
      <name>hessianDiagonal</name>
      <anchorfile>a03151.html</anchorfile>
      <anchor>a6edef657d1ea32062402120f760d6e8b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>hessianDiagonal</name>
      <anchorfile>a03151.html</anchorfile>
      <anchor>a644ea06870c3a1801d31e26942417294</anchor>
      <arglist>(double *d) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::map&lt; Key, Matrix &gt;</type>
      <name>hessianBlockDiagonal</name>
      <anchorfile>a03151.html</anchorfile>
      <anchor>ac9629c1cf276f0d8aa00cff2c6bfa010</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::pair&lt; Matrix, Vector &gt;</type>
      <name>jacobian</name>
      <anchorfile>a03151.html</anchorfile>
      <anchor>a1e4c53613c20025697c9faa96e03f652</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Matrix</type>
      <name>augmentedJacobian</name>
      <anchorfile>a03151.html</anchorfile>
      <anchor>a00b7e836937b8605f6a3ca57cd403f6f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>updateHessian</name>
      <anchorfile>a03151.html</anchorfile>
      <anchor>aec525069ba97eb6b24b2ac1b0950572d</anchor>
      <arglist>(const KeyVector &amp;keys, SymmetricBlockMatrix *info) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>updateHessian</name>
      <anchorfile>a03151.html</anchorfile>
      <anchor>a09b438b583509deb200750a1c4de317a</anchor>
      <arglist>(HessianFactor *other) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>multiplyHessianAdd</name>
      <anchorfile>a03151.html</anchorfile>
      <anchor>ab32752205418c66069fc8fa3d0f5c931</anchor>
      <arglist>(double alpha, const VectorValues &amp;x, VectorValues &amp;y) const</arglist>
    </member>
    <member kind="function">
      <type>VectorValues</type>
      <name>gradientAtZero</name>
      <anchorfile>a03151.html</anchorfile>
      <anchor>ac664679baa8eb3361360d2ab69d604cc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>gradientAtZero</name>
      <anchorfile>a03151.html</anchorfile>
      <anchor>a2f5c10ceba25f69dd92258a9b9b6f2f8</anchor>
      <arglist>(double *d) const</arglist>
    </member>
    <member kind="function">
      <type>Vector</type>
      <name>gradient</name>
      <anchorfile>a03151.html</anchorfile>
      <anchor>a2e9a5b05075f10fa52f6ba9285a96513</anchor>
      <arglist>(Key key, const VectorValues &amp;x) const</arglist>
    </member>
    <member kind="function">
      <type>boost::shared_ptr&lt; GaussianConditional &gt;</type>
      <name>eliminateCholesky</name>
      <anchorfile>a03151.html</anchorfile>
      <anchor>a4153fcedb4ea45db327ee1620a3f2ca6</anchor>
      <arglist>(const Ordering &amp;keys)</arglist>
    </member>
    <member kind="function">
      <type>VectorValues</type>
      <name>solve</name>
      <anchorfile>a03151.html</anchorfile>
      <anchor>a08367080ea54ebc1e299d46fe2300d40</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="typedef">
      <type>GaussianFactor</type>
      <name>Base</name>
      <anchorfile>a03151.html</anchorfile>
      <anchor>aa789851c9863ba4440fba3f3a0a93fc9</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>HessianFactor</type>
      <name>This</name>
      <anchorfile>a03151.html</anchorfile>
      <anchor>a0300131de1073bdca240aa56a41b5e41</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; This &gt;</type>
      <name>shared_ptr</name>
      <anchorfile>a03151.html</anchorfile>
      <anchor>a10c151a4d4beb9d9af4249f4a02791ff</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SymmetricBlockMatrix::Block</type>
      <name>Block</name>
      <anchorfile>a03151.html</anchorfile>
      <anchor>af327feedf9d9e897e81fd0fb7254f3cc</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SymmetricBlockMatrix::constBlock</type>
      <name>constBlock</name>
      <anchorfile>a03151.html</anchorfile>
      <anchor>ad46fcd8ecbfad2f75caa390ac491fa88</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>SymmetricBlockMatrix</type>
      <name>info_</name>
      <anchorfile>a03151.html</anchorfile>
      <anchor>a9de862db7722018e839c909d6ff9236b</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>boost::serialization::access</name>
      <anchorfile>a03151.html</anchorfile>
      <anchor>ac98d07dd8f7b70e16ccb9a01abf56b9c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::noiseModel::mEstimator::Huber</name>
    <filename>a03255.html</filename>
    <base>gtsam::noiseModel::mEstimator::Base</base>
    <member kind="friend">
      <type>friend class</type>
      <name>boost::serialization::access</name>
      <anchorfile>a03255.html</anchorfile>
      <anchor>ac98d07dd8f7b70e16ccb9a01abf56b9c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::IMUFactor</name>
    <filename>a04619.html</filename>
    <templarg></templarg>
    <base protection="private">gtsam::NoiseModelFactor</base>
    <base>NoiseModelFactor2&lt; POSE, POSE &gt;</base>
    <member kind="function">
      <type></type>
      <name>IMUFactor</name>
      <anchorfile>a04619.html</anchorfile>
      <anchor>a82c99eae1feb895c77e4e0511a2d9d3c</anchor>
      <arglist>(const Vector3 &amp;accel, const Vector3 &amp;gyro, double dt, const Key &amp;key1, const Key &amp;key2, const SharedNoiseModel &amp;model)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IMUFactor</name>
      <anchorfile>a04619.html</anchorfile>
      <anchor>aaa50f0dfe5836eb4d74f4ad53c192fac</anchor>
      <arglist>(const Vector6 &amp;imu_vector, double dt, const Key &amp;key1, const Key &amp;key2, const SharedNoiseModel &amp;model)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual gtsam::NonlinearFactor::shared_ptr</type>
      <name>clone</name>
      <anchorfile>a04619.html</anchorfile>
      <anchor>adc31a9423d261b0d36af7ad29b294327</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>equals</name>
      <anchorfile>a04619.html</anchorfile>
      <anchor>a241bf89ef40255d042481770f6db8bcc</anchor>
      <arglist>(const NonlinearFactor &amp;e, double tol=1e-9) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>a04619.html</anchorfile>
      <anchor>a0b3d466c0774f68bbbbd7a7c3cb6bbf9</anchor>
      <arglist>(const std::string &amp;s=&quot;&quot;, const gtsam::KeyFormatter &amp;formatter=gtsam::DefaultKeyFormatter) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Vector</type>
      <name>evaluateError</name>
      <anchorfile>a04619.html</anchorfile>
      <anchor>a13aaf5b85dd0c8e292477d0ba9d9afb3</anchor>
      <arglist>(const PoseRTV &amp;x1, const PoseRTV &amp;x2, boost::optional&lt; Matrix &amp; &gt; H1=boost::none, boost::optional&lt; Matrix &amp; &gt; H2=boost::none) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Vector</type>
      <name>evaluateError</name>
      <anchorfile>a04619.html</anchorfile>
      <anchor>a72ab6da39812e54aa5318b8c0b5ce52e</anchor>
      <arglist>(const Pose3 &amp;x1, const Pose3 &amp;x2, boost::optional&lt; Matrix &amp; &gt; H1=boost::none, boost::optional&lt; Matrix &amp; &gt; H2=boost::none) const</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Vector3</type>
      <name>accel_</name>
      <anchorfile>a04619.html</anchorfile>
      <anchor>ace44d48bf0957926d4b493f0afd261bc</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::ImuFactor</name>
    <filename>a03467.html</filename>
    <base>NoiseModelFactor5&lt; Pose3, Vector3, Pose3, Vector3, imuBias::ConstantBias &gt;</base>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>print</name>
      <anchorfile>a03467.html</anchorfile>
      <anchor>acbc7c685329fe665743a5222b7e13b62</anchor>
      <arglist>(const std::string &amp;s, const KeyFormatter &amp;keyFormatter=DefaultKeyFormatter) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>equals</name>
      <anchorfile>a03467.html</anchorfile>
      <anchor>ac3030a1ffd0ea8e96de791ef2b4e022f</anchor>
      <arglist>(const NonlinearFactor &amp;expected, double tol=1e-9) const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ImuFactor</name>
      <anchorfile>a03467.html</anchorfile>
      <anchor>ae252ef148a19d5906acb5dea75a760b8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ImuFactor</name>
      <anchorfile>a03467.html</anchorfile>
      <anchor>a93d499891d2801915a26a344b06036bb</anchor>
      <arglist>(Key pose_i, Key vel_i, Key pose_j, Key vel_j, Key bias, const PreintegratedImuMeasurements &amp;preintegratedMeasurements)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual gtsam::NonlinearFactor::shared_ptr</type>
      <name>clone</name>
      <anchorfile>a03467.html</anchorfile>
      <anchor>a3d2fb16f5e1795984000b8b89e98e1d4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const PreintegratedImuMeasurements &amp;</type>
      <name>preintegratedMeasurements</name>
      <anchorfile>a03467.html</anchorfile>
      <anchor>af8c6615e5b2c132d0cbd7ccd889fb26b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Vector</type>
      <name>evaluateError</name>
      <anchorfile>a03467.html</anchorfile>
      <anchor>a3994e3dd9d5b46aee1f3c0daf740ab73</anchor>
      <arglist>(const Pose3 &amp;pose_i, const Vector3 &amp;vel_i, const Pose3 &amp;pose_j, const Vector3 &amp;vel_j, const imuBias::ConstantBias &amp;bias_i, boost::optional&lt; Matrix &amp; &gt; H1=boost::none, boost::optional&lt; Matrix &amp; &gt; H2=boost::none, boost::optional&lt; Matrix &amp; &gt; H3=boost::none, boost::optional&lt; Matrix &amp; &gt; H4=boost::none, boost::optional&lt; Matrix &amp; &gt; H5=boost::none) const</arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; ImuFactor &gt;</type>
      <name>shared_ptr</name>
      <anchorfile>a03467.html</anchorfile>
      <anchor>af09006b1c068a81855e46397a4040c68</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>boost::serialization::access</name>
      <anchorfile>a03467.html</anchorfile>
      <anchor>ac98d07dd8f7b70e16ccb9a01abf56b9c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::ImuFactor2</name>
    <filename>a03471.html</filename>
    <base>NoiseModelFactor3&lt; NavState, NavState, imuBias::ConstantBias &gt;</base>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>print</name>
      <anchorfile>a03471.html</anchorfile>
      <anchor>aee295c49e227999f8deb6beaea36e51a</anchor>
      <arglist>(const std::string &amp;s, const KeyFormatter &amp;keyFormatter=DefaultKeyFormatter) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>equals</name>
      <anchorfile>a03471.html</anchorfile>
      <anchor>a05c5f574cbe4ad15470fce945c74704e</anchor>
      <arglist>(const NonlinearFactor &amp;expected, double tol=1e-9) const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ImuFactor2</name>
      <anchorfile>a03471.html</anchorfile>
      <anchor>a0abb4a12c32bea6d415ff0977b2ef75b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ImuFactor2</name>
      <anchorfile>a03471.html</anchorfile>
      <anchor>ae90d38f249a8da177d3b9263113899ec</anchor>
      <arglist>(Key state_i, Key state_j, Key bias, const PreintegratedImuMeasurements &amp;preintegratedMeasurements)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual gtsam::NonlinearFactor::shared_ptr</type>
      <name>clone</name>
      <anchorfile>a03471.html</anchorfile>
      <anchor>a794422f987c47a1ec7542ab5a7419336</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const PreintegratedImuMeasurements &amp;</type>
      <name>preintegratedMeasurements</name>
      <anchorfile>a03471.html</anchorfile>
      <anchor>a2a866efbfbeccedd43a7c4b7c09b167d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Vector</type>
      <name>evaluateError</name>
      <anchorfile>a03471.html</anchorfile>
      <anchor>a554686d04f2d68d956ddf949ecb7eb57</anchor>
      <arglist>(const NavState &amp;state_i, const NavState &amp;state_j, const imuBias::ConstantBias &amp;bias_i, boost::optional&lt; Matrix &amp; &gt; H1=boost::none, boost::optional&lt; Matrix &amp; &gt; H2=boost::none, boost::optional&lt; Matrix &amp; &gt; H3=boost::none) const</arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>boost::serialization::access</name>
      <anchorfile>a03471.html</anchorfile>
      <anchor>ac98d07dd8f7b70e16ccb9a01abf56b9c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::InconsistentEliminationRequested</name>
    <filename>a02995.html</filename>
  </compound>
  <compound kind="class">
    <name>gtsam::IncrementalFixedLagSmoother</name>
    <filename>a04411.html</filename>
    <base protection="private">gtsam::FixedLagSmoother</base>
    <base>gtsam::FixedLagSmoother</base>
    <member kind="function">
      <type></type>
      <name>IncrementalFixedLagSmoother</name>
      <anchorfile>a04411.html</anchorfile>
      <anchor>a03b3ed3058a50fcade553a79d6ad5cbb</anchor>
      <arglist>(double smootherLag=0.0, const ISAM2Params &amp;parameters=ISAM2Params())</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~IncrementalFixedLagSmoother</name>
      <anchorfile>a04411.html</anchorfile>
      <anchor>a4dc7a9a8a77689b8d3a3b86c8c31b63c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>print</name>
      <anchorfile>a04411.html</anchorfile>
      <anchor>a347b2e0a6b7db356cc084ec07c03142a</anchor>
      <arglist>(const std::string &amp;s=&quot;IncrementalFixedLagSmoother:\n&quot;, const KeyFormatter &amp;keyFormatter=DefaultKeyFormatter) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>equals</name>
      <anchorfile>a04411.html</anchorfile>
      <anchor>a49ee3dcc726c5af5250bf65fc9114536</anchor>
      <arglist>(const FixedLagSmoother &amp;rhs, double tol=1e-9) const</arglist>
    </member>
    <member kind="function">
      <type>Result</type>
      <name>update</name>
      <anchorfile>a04411.html</anchorfile>
      <anchor>a420656ce0a7ee9a202b394058fd028d6</anchor>
      <arglist>(const NonlinearFactorGraph &amp;newFactors=NonlinearFactorGraph(), const Values &amp;newTheta=Values(), const KeyTimestampMap &amp;timestamps=KeyTimestampMap(), const FastVector&lt; size_t &gt; &amp;factorsToRemove=FactorIndices())</arglist>
    </member>
    <member kind="function">
      <type>Values</type>
      <name>calculateEstimate</name>
      <anchorfile>a04411.html</anchorfile>
      <anchor>a2c92a1dd8fa9a4b2c7121192bbbee8e9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>VALUE</type>
      <name>calculateEstimate</name>
      <anchorfile>a04411.html</anchorfile>
      <anchor>a43bacdbc94462499b206289851dff5f4</anchor>
      <arglist>(Key key) const</arglist>
    </member>
    <member kind="function">
      <type>const ISAM2Params &amp;</type>
      <name>params</name>
      <anchorfile>a04411.html</anchorfile>
      <anchor>a219eb5d0547dd1630da41e0d3c9e8e5f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const NonlinearFactorGraph &amp;</type>
      <name>getFactors</name>
      <anchorfile>a04411.html</anchorfile>
      <anchor>a580ece2ee10b8e557164c6917c718bdb</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Values &amp;</type>
      <name>getLinearizationPoint</name>
      <anchorfile>a04411.html</anchorfile>
      <anchor>a0d8349a71ca90eaa3455f2d27f892e54</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const VectorValues &amp;</type>
      <name>getDelta</name>
      <anchorfile>a04411.html</anchorfile>
      <anchor>a7027714d001ebfc4f671fe958d63d461</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Matrix</type>
      <name>marginalCovariance</name>
      <anchorfile>a04411.html</anchorfile>
      <anchor>a5c817f301560a2af0c87e5a2a2789f0e</anchor>
      <arglist>(Key key) const</arglist>
    </member>
    <member kind="function">
      <type>const ISAM2Result &amp;</type>
      <name>getISAM2Result</name>
      <anchorfile>a04411.html</anchorfile>
      <anchor>a93571abf02e2586de84bf91b542dff06</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; IncrementalFixedLagSmoother &gt;</type>
      <name>shared_ptr</name>
      <anchorfile>a04411.html</anchorfile>
      <anchor>af49d03dc028e2d965e8b97f65c139d25</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>eraseKeysBefore</name>
      <anchorfile>a04411.html</anchorfile>
      <anchor>a41b599965a6a30d1b0f2e0362a30331b</anchor>
      <arglist>(double timestamp)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>createOrderingConstraints</name>
      <anchorfile>a04411.html</anchorfile>
      <anchor>a4f73b7fe3ea0ba38d6f36c859383b141</anchor>
      <arglist>(const KeyVector &amp;marginalizableKeys, boost::optional&lt; FastMap&lt; Key, int &gt; &gt; &amp;constrainedKeys) const</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ISAM2</type>
      <name>isam_</name>
      <anchorfile>a04411.html</anchorfile>
      <anchor>a030a15052e4af9e5bcf3554c502f0581</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ISAM2Result</type>
      <name>isamResult_</name>
      <anchorfile>a04411.html</anchorfile>
      <anchor>a8d6bfa51f655245a20f4c2e79f4c98c8</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::IndeterminantLinearSystemException</name>
    <filename>a03203.html</filename>
    <base>ThreadsafeException&lt; IndeterminantLinearSystemException &gt;</base>
  </compound>
  <compound kind="class">
    <name>gtsam::IndexPair</name>
    <filename>a02003.html</filename>
  </compound>
  <compound kind="class">
    <name>gtsam::InequalityFactorGraph</name>
    <filename>a04259.html</filename>
    <base>FactorGraph&lt; LinearInequality &gt;</base>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>a04259.html</anchorfile>
      <anchor>ac3ac196dd2b7b43fd2d8fd1054a389b7</anchor>
      <arglist>(const std::string &amp;str, const KeyFormatter &amp;keyFormatter=DefaultKeyFormatter) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>equals</name>
      <anchorfile>a04259.html</anchorfile>
      <anchor>aa912f296bc5c346fe610b7bfd176de1e</anchor>
      <arglist>(const InequalityFactorGraph &amp;other, double tol=1e-9) const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>error</name>
      <anchorfile>a04259.html</anchorfile>
      <anchor>aa3a2e1023ef4cc34a91d4791a4f10e51</anchor>
      <arglist>(const VectorValues &amp;x) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::InertialNavFactor_GlobalVelocity</name>
    <filename>a04475.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <base>NoiseModelFactor5&lt; POSE, VELOCITY, IMUBIAS, POSE, VELOCITY &gt;</base>
    <member kind="function">
      <type></type>
      <name>InertialNavFactor_GlobalVelocity</name>
      <anchorfile>a04475.html</anchorfile>
      <anchor>a8163cf109163faa6b8a1c0f86a41b5e0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>InertialNavFactor_GlobalVelocity</name>
      <anchorfile>a04475.html</anchorfile>
      <anchor>a712cad1c44cf0aaba905a736166e24b6</anchor>
      <arglist>(const Key &amp;Pose1, const Key &amp;Vel1, const Key &amp;IMUBias1, const Key &amp;Pose2, const Key &amp;Vel2, const Vector &amp;measurement_acc, const Vector &amp;measurement_gyro, const double measurement_dt, const Vector world_g, const Vector world_rho, const Vector &amp;world_omega_earth, const noiseModel::Gaussian::shared_ptr &amp;model_continuous, boost::optional&lt; POSE &gt; body_P_sensor=boost::none)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>print</name>
      <anchorfile>a04475.html</anchorfile>
      <anchor>abc3b9d9a66abfda035ae0f5646676753</anchor>
      <arglist>(const std::string &amp;s=&quot;InertialNavFactor_GlobalVelocity&quot;, const KeyFormatter &amp;keyFormatter=DefaultKeyFormatter) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>equals</name>
      <anchorfile>a04475.html</anchorfile>
      <anchor>a5b1e9f6649243d6f33e8d1606369867a</anchor>
      <arglist>(const NonlinearFactor &amp;expected, double tol=1e-9) const</arglist>
    </member>
    <member kind="function">
      <type>Vector</type>
      <name>evaluateError</name>
      <anchorfile>a04475.html</anchorfile>
      <anchor>a4171bec0a8e24bd7658a7b6c1a209285</anchor>
      <arglist>(const POSE &amp;Pose1, const VELOCITY &amp;Vel1, const IMUBIAS &amp;Bias1, const POSE &amp;Pose2, const VELOCITY &amp;Vel2, boost::optional&lt; Matrix &amp; &gt; H1=boost::none, boost::optional&lt; Matrix &amp; &gt; H2=boost::none, boost::optional&lt; Matrix &amp; &gt; H3=boost::none, boost::optional&lt; Matrix &amp; &gt; H4=boost::none, boost::optional&lt; Matrix &amp; &gt; H5=boost::none) const</arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>boost::serialization::access</name>
      <anchorfile>a04475.html</anchorfile>
      <anchor>ac98d07dd8f7b70e16ccb9a01abf56b9c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::InfeasibleInitialValues</name>
    <filename>a04267.html</filename>
    <base>ThreadsafeException&lt; InfeasibleInitialValues &gt;</base>
  </compound>
  <compound kind="class">
    <name>gtsam::InfeasibleOrUnboundedProblem</name>
    <filename>a04271.html</filename>
    <base>ThreadsafeException&lt; InfeasibleOrUnboundedProblem &gt;</base>
  </compound>
  <compound kind="struct">
    <name>gtsam::InitializePose3</name>
    <filename>a04011.html</filename>
    <member kind="function" static="yes">
      <type>static Values</type>
      <name>computeOrientationsChordal</name>
      <anchorfile>a04011.html</anchorfile>
      <anchor>a5fb65b015ebd0b64ddf59f62f24ee661</anchor>
      <arglist>(const NonlinearFactorGraph &amp;pose3Graph)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Values</type>
      <name>computeOrientationsGradient</name>
      <anchorfile>a04011.html</anchorfile>
      <anchor>a9218509c31ac0030fa685d68144d083b</anchor>
      <arglist>(const NonlinearFactorGraph &amp;pose3Graph, const Values &amp;givenGuess, size_t maxIter=10000, const bool setRefFrame=true)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static NonlinearFactorGraph</type>
      <name>buildPose3graph</name>
      <anchorfile>a04011.html</anchorfile>
      <anchor>a908ec0e39fe22080bdb2fe10cef9f83f</anchor>
      <arglist>(const NonlinearFactorGraph &amp;graph)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Values</type>
      <name>computePoses</name>
      <anchorfile>a04011.html</anchorfile>
      <anchor>ae64138c9f166aac8f91e1a06374908a2</anchor>
      <arglist>(NonlinearFactorGraph &amp;pose3graph, Values &amp;initialRot)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Values</type>
      <name>initializeOrientations</name>
      <anchorfile>a04011.html</anchorfile>
      <anchor>ad8900891ebae624b54cb32bd387f81f2</anchor>
      <arglist>(const NonlinearFactorGraph &amp;graph)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Values</type>
      <name>initialize</name>
      <anchorfile>a04011.html</anchorfile>
      <anchor>a0de66d19607ddc19c27d3e5be2911f6c</anchor>
      <arglist>(const NonlinearFactorGraph &amp;graph, const Values &amp;givenGuess, bool useGradient=false)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Values</type>
      <name>initialize</name>
      <anchorfile>a04011.html</anchorfile>
      <anchor>a28534d9ea0e1486f3f32cf1b24c17da8</anchor>
      <arglist>(const NonlinearFactorGraph &amp;graph)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::InvalidArgumentThreadsafe</name>
    <filename>a02219.html</filename>
    <base>ThreadsafeException&lt; InvalidArgumentThreadsafe &gt;</base>
    <member kind="function">
      <type></type>
      <name>InvalidArgumentThreadsafe</name>
      <anchorfile>a02219.html</anchorfile>
      <anchor>a5b59c8bf5a4f3ed5ab5a3bdc4bb0dad2</anchor>
      <arglist>(const std::string &amp;description)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::InvalidDenseElimination</name>
    <filename>a03215.html</filename>
    <base>ThreadsafeException&lt; InvalidDenseElimination &gt;</base>
  </compound>
  <compound kind="class">
    <name>gtsam::InvalidMatrixBlock</name>
    <filename>a03211.html</filename>
    <base>ThreadsafeException&lt; InvalidMatrixBlock &gt;</base>
    <member kind="variable">
      <type>const DenseIndex</type>
      <name>factorRows</name>
      <anchorfile>a03211.html</anchorfile>
      <anchor>a59d61b85cd1f8048f26ce0b990d2c91f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const DenseIndex</type>
      <name>blockRows</name>
      <anchorfile>a03211.html</anchorfile>
      <anchor>aa31b41ba5908fca8f458ea7d49278f4f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::InvalidNoiseModel</name>
    <filename>a03207.html</filename>
    <base>ThreadsafeException&lt; InvalidNoiseModel &gt;</base>
    <member kind="variable">
      <type>const DenseIndex</type>
      <name>factorDims</name>
      <anchorfile>a03207.html</anchorfile>
      <anchor>a725a99a84ba90f5847f283c5c63ad7f4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const DenseIndex</type>
      <name>noiseModelDims</name>
      <anchorfile>a03207.html</anchorfile>
      <anchor>af1938d77a9e6086a0ffe9352bac15467</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::InvDepthFactor3</name>
    <filename>a04483.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <base>NoiseModelFactor3&lt; POSE, LANDMARK, INVDEPTH &gt;</base>
    <member kind="function">
      <type></type>
      <name>InvDepthFactor3</name>
      <anchorfile>a04483.html</anchorfile>
      <anchor>ae28e2a2bc71914dc6e4eaf24522b6719</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>InvDepthFactor3</name>
      <anchorfile>a04483.html</anchorfile>
      <anchor>aa6f43b18dda94eaa5ce4936954a43437</anchor>
      <arglist>(const Point2 &amp;measured, const SharedNoiseModel &amp;model, const Key poseKey, Key pointKey, Key invDepthKey, const Cal3_S2::shared_ptr &amp;K)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~InvDepthFactor3</name>
      <anchorfile>a04483.html</anchorfile>
      <anchor>a5e56223e6f80b4c567a65fe6933e0284</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>a04483.html</anchorfile>
      <anchor>a4e6790bd52e37ae70dd5ddc463d85913</anchor>
      <arglist>(const std::string &amp;s=&quot;InvDepthFactor3&quot;, const KeyFormatter &amp;keyFormatter=DefaultKeyFormatter) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>equals</name>
      <anchorfile>a04483.html</anchorfile>
      <anchor>a017cf38c8eeb682955d64cb850eae72c</anchor>
      <arglist>(const NonlinearFactor &amp;p, double tol=1e-9) const</arglist>
    </member>
    <member kind="function">
      <type>Vector</type>
      <name>evaluateError</name>
      <anchorfile>a04483.html</anchorfile>
      <anchor>a54013628db2c017064e5f4da802a9c1d</anchor>
      <arglist>(const POSE &amp;pose, const Vector5 &amp;point, const INVDEPTH &amp;invDepth, boost::optional&lt; Matrix &amp; &gt; H1=boost::none, boost::optional&lt; Matrix &amp; &gt; H2=boost::none, boost::optional&lt; Matrix &amp; &gt; H3=boost::none) const</arglist>
    </member>
    <member kind="function">
      <type>const Point2 &amp;</type>
      <name>imagePoint</name>
      <anchorfile>a04483.html</anchorfile>
      <anchor>a50ac42c593e9749c07776734d0baaebc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Cal3_S2::shared_ptr</type>
      <name>calibration</name>
      <anchorfile>a04483.html</anchorfile>
      <anchor>ab36361e456d11753382fca93192dc882</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="typedef">
      <type>NoiseModelFactor3&lt; POSE, LANDMARK, INVDEPTH &gt;</type>
      <name>Base</name>
      <anchorfile>a04483.html</anchorfile>
      <anchor>a7a0516070352606670b8beeb4fc657dc</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>InvDepthFactor3&lt; POSE, LANDMARK, INVDEPTH &gt;</type>
      <name>This</name>
      <anchorfile>a04483.html</anchorfile>
      <anchor>a9ce8d35838cf82d2623348ae23e0f146</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; This &gt;</type>
      <name>shared_ptr</name>
      <anchorfile>a04483.html</anchorfile>
      <anchor>a739bca5aed776aabe012c320a802bab6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Point2</type>
      <name>measured_</name>
      <anchorfile>a04483.html</anchorfile>
      <anchor>ab133b86c75ad5feb11f50f8d2cc4511f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>boost::shared_ptr&lt; Cal3_S2 &gt;</type>
      <name>K_</name>
      <anchorfile>a04483.html</anchorfile>
      <anchor>a14d8163202992f7165c6e2d1cc37d0a3</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>boost::serialization::access</name>
      <anchorfile>a04483.html</anchorfile>
      <anchor>ac98d07dd8f7b70e16ccb9a01abf56b9c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::InvDepthFactorVariant1</name>
    <filename>a04487.html</filename>
    <base protection="private">gtsam::NoiseModelFactor</base>
    <base>NoiseModelFactor2&lt; Pose3, Vector6 &gt;</base>
    <member kind="function">
      <type></type>
      <name>InvDepthFactorVariant1</name>
      <anchorfile>a04487.html</anchorfile>
      <anchor>a6fa08a3de5a08032d4ad4e5fd2679788</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>InvDepthFactorVariant1</name>
      <anchorfile>a04487.html</anchorfile>
      <anchor>a3e9e55e4e1c4a0cad887e4b05610f010</anchor>
      <arglist>(const Key poseKey, const Key landmarkKey, const Point2 &amp;measured, const Cal3_S2::shared_ptr &amp;K, const SharedNoiseModel &amp;model)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~InvDepthFactorVariant1</name>
      <anchorfile>a04487.html</anchorfile>
      <anchor>aa01443941496a2bf1897d02fe52396c6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>a04487.html</anchorfile>
      <anchor>a55f46f57ded4a25aa6a5397227c53281</anchor>
      <arglist>(const std::string &amp;s=&quot;InvDepthFactorVariant1&quot;, const KeyFormatter &amp;keyFormatter=DefaultKeyFormatter) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>equals</name>
      <anchorfile>a04487.html</anchorfile>
      <anchor>ab411cfe47731e950a49aff163573b14c</anchor>
      <arglist>(const NonlinearFactor &amp;p, double tol=1e-9) const</arglist>
    </member>
    <member kind="function">
      <type>Vector</type>
      <name>evaluateError</name>
      <anchorfile>a04487.html</anchorfile>
      <anchor>a15ced359fde2b8964e756d77c602c7dd</anchor>
      <arglist>(const Pose3 &amp;pose, const Vector6 &amp;landmark, boost::optional&lt; Matrix &amp; &gt; H1=boost::none, boost::optional&lt; Matrix &amp; &gt; H2=boost::none) const</arglist>
    </member>
    <member kind="function">
      <type>const Point2 &amp;</type>
      <name>imagePoint</name>
      <anchorfile>a04487.html</anchorfile>
      <anchor>a747a7072c813e01da6bccaee2b596ad3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Cal3_S2::shared_ptr</type>
      <name>calibration</name>
      <anchorfile>a04487.html</anchorfile>
      <anchor>a81594d8d924371f1bf88f029862b29d2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="typedef">
      <type>NoiseModelFactor2&lt; Pose3, Vector6 &gt;</type>
      <name>Base</name>
      <anchorfile>a04487.html</anchorfile>
      <anchor>a088a5a08d3871c6349069cdc38ebf825</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>InvDepthFactorVariant1</type>
      <name>This</name>
      <anchorfile>a04487.html</anchorfile>
      <anchor>a70a6793b4772b74b8e0f94e79af5a961</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; This &gt;</type>
      <name>shared_ptr</name>
      <anchorfile>a04487.html</anchorfile>
      <anchor>afd6c9ecc9b98d0534c1fad00a6109f6b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Point2</type>
      <name>measured_</name>
      <anchorfile>a04487.html</anchorfile>
      <anchor>ac774fa86b569a9c510990ab32f11ed02</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Cal3_S2::shared_ptr</type>
      <name>K_</name>
      <anchorfile>a04487.html</anchorfile>
      <anchor>a957de95c74c3421d820677029cab3040</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>boost::serialization::access</name>
      <anchorfile>a04487.html</anchorfile>
      <anchor>ac98d07dd8f7b70e16ccb9a01abf56b9c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::InvDepthFactorVariant2</name>
    <filename>a04491.html</filename>
    <base protection="private">gtsam::NoiseModelFactor</base>
    <base>NoiseModelFactor2&lt; Pose3, Vector3 &gt;</base>
    <member kind="function">
      <type></type>
      <name>InvDepthFactorVariant2</name>
      <anchorfile>a04491.html</anchorfile>
      <anchor>a2a1562da3696397fcbdfc15b5ea37029</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>InvDepthFactorVariant2</name>
      <anchorfile>a04491.html</anchorfile>
      <anchor>ae845ae5cd3dcb960941edd2e29fdd643</anchor>
      <arglist>(const Key poseKey, const Key landmarkKey, const Point2 &amp;measured, const Cal3_S2::shared_ptr &amp;K, const Point3 referencePoint, const SharedNoiseModel &amp;model)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~InvDepthFactorVariant2</name>
      <anchorfile>a04491.html</anchorfile>
      <anchor>aeec1edb405632f189f537e1cf2c075f9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>a04491.html</anchorfile>
      <anchor>afa07deb0f7c0fa4a4a9d687dec5af56d</anchor>
      <arglist>(const std::string &amp;s=&quot;InvDepthFactorVariant2&quot;, const KeyFormatter &amp;keyFormatter=DefaultKeyFormatter) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>equals</name>
      <anchorfile>a04491.html</anchorfile>
      <anchor>a5a1c4a685c32504c0fa5e06e94d7b0c9</anchor>
      <arglist>(const NonlinearFactor &amp;p, double tol=1e-9) const</arglist>
    </member>
    <member kind="function">
      <type>Vector</type>
      <name>evaluateError</name>
      <anchorfile>a04491.html</anchorfile>
      <anchor>ad92f92b24e9347da9c1abc7d60efceef</anchor>
      <arglist>(const Pose3 &amp;pose, const Vector3 &amp;landmark, boost::optional&lt; Matrix &amp; &gt; H1=boost::none, boost::optional&lt; Matrix &amp; &gt; H2=boost::none) const</arglist>
    </member>
    <member kind="function">
      <type>const Point2 &amp;</type>
      <name>imagePoint</name>
      <anchorfile>a04491.html</anchorfile>
      <anchor>a41cc7b4abb7af1a0fca7f76ef9b4f0a1</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Cal3_S2::shared_ptr</type>
      <name>calibration</name>
      <anchorfile>a04491.html</anchorfile>
      <anchor>a768c00d6eec5a1241b49f8095c8cc673</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Point3 &amp;</type>
      <name>referencePoint</name>
      <anchorfile>a04491.html</anchorfile>
      <anchor>ad6a56c91cafc1c8f4a96db6c3376ba2a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="typedef">
      <type>NoiseModelFactor2&lt; Pose3, Vector3 &gt;</type>
      <name>Base</name>
      <anchorfile>a04491.html</anchorfile>
      <anchor>addb66abec98197833c991df96ccdbd48</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>InvDepthFactorVariant2</type>
      <name>This</name>
      <anchorfile>a04491.html</anchorfile>
      <anchor>af99a8bcbe5cfe559724ec2d02df4d072</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; This &gt;</type>
      <name>shared_ptr</name>
      <anchorfile>a04491.html</anchorfile>
      <anchor>aa1de0753a1897687a3376956a56a21c9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Point2</type>
      <name>measured_</name>
      <anchorfile>a04491.html</anchorfile>
      <anchor>af936b4b128aac0b1cad29a8ad021dd96</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Cal3_S2::shared_ptr</type>
      <name>K_</name>
      <anchorfile>a04491.html</anchorfile>
      <anchor>a02c0d546827eaf8efd7cb7447b0e37b1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Point3</type>
      <name>referencePoint_</name>
      <anchorfile>a04491.html</anchorfile>
      <anchor>a1751ebcce9070692b0323a99e500b5c3</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>boost::serialization::access</name>
      <anchorfile>a04491.html</anchorfile>
      <anchor>ac98d07dd8f7b70e16ccb9a01abf56b9c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::InvDepthFactorVariant3a</name>
    <filename>a04495.html</filename>
    <base protection="private">gtsam::NoiseModelFactor</base>
    <base>NoiseModelFactor2&lt; Pose3, Vector3 &gt;</base>
    <member kind="function">
      <type></type>
      <name>InvDepthFactorVariant3a</name>
      <anchorfile>a04495.html</anchorfile>
      <anchor>a6bc0d2d5d888499778c38bdc03ff7092</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>InvDepthFactorVariant3a</name>
      <anchorfile>a04495.html</anchorfile>
      <anchor>ad1c9778a690c2d5634613bfd3cb5e04e</anchor>
      <arglist>(const Key poseKey, const Key landmarkKey, const Point2 &amp;measured, const Cal3_S2::shared_ptr &amp;K, const SharedNoiseModel &amp;model)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~InvDepthFactorVariant3a</name>
      <anchorfile>a04495.html</anchorfile>
      <anchor>a9fc8c950a2ee721d43eda7ba79ed5dfc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>a04495.html</anchorfile>
      <anchor>ada97338de00f77cdbf3e1bdbbab11349</anchor>
      <arglist>(const std::string &amp;s=&quot;InvDepthFactorVariant3a&quot;, const KeyFormatter &amp;keyFormatter=DefaultKeyFormatter) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>equals</name>
      <anchorfile>a04495.html</anchorfile>
      <anchor>a84061a6bc0c3b313bcd3c5b29762eaab</anchor>
      <arglist>(const NonlinearFactor &amp;p, double tol=1e-9) const</arglist>
    </member>
    <member kind="function">
      <type>Vector</type>
      <name>evaluateError</name>
      <anchorfile>a04495.html</anchorfile>
      <anchor>a8c75749fa2983ca78d64748cd391be79</anchor>
      <arglist>(const Pose3 &amp;pose, const Vector3 &amp;landmark, boost::optional&lt; Matrix &amp; &gt; H1=boost::none, boost::optional&lt; Matrix &amp; &gt; H2=boost::none) const</arglist>
    </member>
    <member kind="function">
      <type>const Point2 &amp;</type>
      <name>imagePoint</name>
      <anchorfile>a04495.html</anchorfile>
      <anchor>a354db83a18fc667fac5a301cd491aa70</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Cal3_S2::shared_ptr</type>
      <name>calibration</name>
      <anchorfile>a04495.html</anchorfile>
      <anchor>abf04968147189a3b3332026f8129d87c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="typedef">
      <type>NoiseModelFactor2&lt; Pose3, Vector3 &gt;</type>
      <name>Base</name>
      <anchorfile>a04495.html</anchorfile>
      <anchor>a919616999e4c7099be2b4d31202e7e0c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>InvDepthFactorVariant3a</type>
      <name>This</name>
      <anchorfile>a04495.html</anchorfile>
      <anchor>ad03ae2a53548c1fc5bb40f126438a9aa</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; This &gt;</type>
      <name>shared_ptr</name>
      <anchorfile>a04495.html</anchorfile>
      <anchor>a6506671a0b5ef18ef818887f231eb90e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Point2</type>
      <name>measured_</name>
      <anchorfile>a04495.html</anchorfile>
      <anchor>a967aa072c8724d0fdafbe4303d41f42b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Cal3_S2::shared_ptr</type>
      <name>K_</name>
      <anchorfile>a04495.html</anchorfile>
      <anchor>a224b89d16d5ce28caf912ba7985f6e40</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>boost::serialization::access</name>
      <anchorfile>a04495.html</anchorfile>
      <anchor>ac98d07dd8f7b70e16ccb9a01abf56b9c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::InvDepthFactorVariant3b</name>
    <filename>a04499.html</filename>
    <base protection="private">gtsam::NoiseModelFactor</base>
    <base>NoiseModelFactor3&lt; Pose3, Pose3, Vector3 &gt;</base>
    <member kind="function">
      <type></type>
      <name>InvDepthFactorVariant3b</name>
      <anchorfile>a04499.html</anchorfile>
      <anchor>ad18e773d05dffcbaecf5527ee66b9ce3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>InvDepthFactorVariant3b</name>
      <anchorfile>a04499.html</anchorfile>
      <anchor>a6aeb62eacb0bfe61f9e47babafe64470</anchor>
      <arglist>(const Key poseKey1, const Key poseKey2, const Key landmarkKey, const Point2 &amp;measured, const Cal3_S2::shared_ptr &amp;K, const SharedNoiseModel &amp;model)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~InvDepthFactorVariant3b</name>
      <anchorfile>a04499.html</anchorfile>
      <anchor>a99b3f99f261ab860c1629e5cbcd3b5a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>a04499.html</anchorfile>
      <anchor>aad6be231b98d6fbd3d751e3d1984c4c2</anchor>
      <arglist>(const std::string &amp;s=&quot;InvDepthFactorVariant3&quot;, const KeyFormatter &amp;keyFormatter=DefaultKeyFormatter) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>equals</name>
      <anchorfile>a04499.html</anchorfile>
      <anchor>adbe1dc80d25614f15df27a81476ab3de</anchor>
      <arglist>(const NonlinearFactor &amp;p, double tol=1e-9) const</arglist>
    </member>
    <member kind="function">
      <type>Vector</type>
      <name>evaluateError</name>
      <anchorfile>a04499.html</anchorfile>
      <anchor>a8bc08ccf711133884ed59656c700b4f9</anchor>
      <arglist>(const Pose3 &amp;pose1, const Pose3 &amp;pose2, const Vector3 &amp;landmark, boost::optional&lt; Matrix &amp; &gt; H1=boost::none, boost::optional&lt; Matrix &amp; &gt; H2=boost::none, boost::optional&lt; Matrix &amp; &gt; H3=boost::none) const</arglist>
    </member>
    <member kind="function">
      <type>const Point2 &amp;</type>
      <name>imagePoint</name>
      <anchorfile>a04499.html</anchorfile>
      <anchor>a9674970bea92bd447e032c85ab2624c3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Cal3_S2::shared_ptr</type>
      <name>calibration</name>
      <anchorfile>a04499.html</anchorfile>
      <anchor>aff82b7383e7d93698b7a8d3910daa39c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="typedef">
      <type>NoiseModelFactor3&lt; Pose3, Pose3, Vector3 &gt;</type>
      <name>Base</name>
      <anchorfile>a04499.html</anchorfile>
      <anchor>a7da9d30fc14dcdbf407609bdb60203e1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>InvDepthFactorVariant3b</type>
      <name>This</name>
      <anchorfile>a04499.html</anchorfile>
      <anchor>aa9eca5307e666875ee641073f65c00c3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; This &gt;</type>
      <name>shared_ptr</name>
      <anchorfile>a04499.html</anchorfile>
      <anchor>af5841e6aab0cd2e621432a0022eb3a27</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Point2</type>
      <name>measured_</name>
      <anchorfile>a04499.html</anchorfile>
      <anchor>af1c6da4f3f92c262060ac5f4591ee86f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Cal3_S2::shared_ptr</type>
      <name>K_</name>
      <anchorfile>a04499.html</anchorfile>
      <anchor>a84202eefb6c47352247e491d9c9c5ae5</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>boost::serialization::access</name>
      <anchorfile>a04499.html</anchorfile>
      <anchor>ac98d07dd8f7b70e16ccb9a01abf56b9c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::ISAM</name>
    <filename>a02999.html</filename>
    <templarg>BAYESTREE</templarg>
    <member kind="function">
      <type></type>
      <name>ISAM</name>
      <anchorfile>a02999.html</anchorfile>
      <anchor>a528e028d3e062171007e8f40b55fdbae</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ISAM</name>
      <anchorfile>a02999.html</anchorfile>
      <anchor>a0c7b81b104909590d1341dcfd19dadc9</anchor>
      <arglist>(const Base &amp;bayesTree)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>update</name>
      <anchorfile>a02999.html</anchorfile>
      <anchor>a0994a7782d39515a5c2869ef9efb65f3</anchor>
      <arglist>(const FactorGraphType &amp;newFactors, const Eliminate &amp;function=EliminationTraitsType::DefaultEliminate)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>update_internal</name>
      <anchorfile>a02999.html</anchorfile>
      <anchor>aad035c91c1fcfe5438c9816e75bb8fb3</anchor>
      <arglist>(const FactorGraphType &amp;newFactors, Cliques &amp;orphans, const Eliminate &amp;function=EliminationTraitsType::DefaultEliminate)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::ISAM2</name>
    <filename>a03643.html</filename>
    <base>BayesTree&lt; ISAM2Clique &gt;</base>
    <member kind="function">
      <type>Values</type>
      <name>calculateBestEstimate</name>
      <anchorfile>a03643.html</anchorfile>
      <anchor>a9d6f2b0d018f817f64fee6abdaa413ff</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const VectorValues &amp;</type>
      <name>getDelta</name>
      <anchorfile>a03643.html</anchorfile>
      <anchor>a54c3a0329b3397df717271cfd530b105</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>error</name>
      <anchorfile>a03643.html</anchorfile>
      <anchor>ae2e2d054d1dcbc65bf886d016662a36c</anchor>
      <arglist>(const VectorValues &amp;x) const</arglist>
    </member>
    <member kind="function">
      <type>const NonlinearFactorGraph &amp;</type>
      <name>getFactorsUnsafe</name>
      <anchorfile>a03643.html</anchorfile>
      <anchor>a91471339341dc0f21951e861a022b1f5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const VariableIndex &amp;</type>
      <name>getVariableIndex</name>
      <anchorfile>a03643.html</anchorfile>
      <anchor>af60a5fca0bbd2ef7c3067ce17ba8022f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const KeySet &amp;</type>
      <name>getFixedVariables</name>
      <anchorfile>a03643.html</anchorfile>
      <anchor>a03d3ea63442e22d3391e1910373131b4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>printStats</name>
      <anchorfile>a03643.html</anchorfile>
      <anchor>a8e147b16c01a4651d7f3a27ac834e39a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>VectorValues</type>
      <name>gradientAtZero</name>
      <anchorfile>a03643.html</anchorfile>
      <anchor>acb78e33b3c8f18302b1ba591a938fccd</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ISAM2</name>
      <anchorfile>a03643.html</anchorfile>
      <anchor>ab79162caabd11ce503c7115c4e9f9419</anchor>
      <arglist>(const ISAM2Params &amp;params)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ISAM2</name>
      <anchorfile>a03643.html</anchorfile>
      <anchor>ade4c702ba582e744962b5bd403f22206</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ISAM2</name>
      <anchorfile>a03643.html</anchorfile>
      <anchor>a35e0e8a7a31690c623e594774879ace1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>equals</name>
      <anchorfile>a03643.html</anchorfile>
      <anchor>a8f8912a98f58032d5fcf449ea6db5195</anchor>
      <arglist>(const ISAM2 &amp;other, double tol=1e-9) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ISAM2Result</type>
      <name>update</name>
      <anchorfile>a03643.html</anchorfile>
      <anchor>abd282f9b00477204ab09590993a974e6</anchor>
      <arglist>(const NonlinearFactorGraph &amp;newFactors=NonlinearFactorGraph(), const Values &amp;newTheta=Values(), const FactorIndices &amp;removeFactorIndices=FactorIndices(), const boost::optional&lt; FastMap&lt; Key, int &gt; &gt; &amp;constrainedKeys=boost::none, const boost::optional&lt; FastList&lt; Key &gt; &gt; &amp;noRelinKeys=boost::none, const boost::optional&lt; FastList&lt; Key &gt; &gt; &amp;extraReelimKeys=boost::none, bool force_relinearize=false)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>marginalizeLeaves</name>
      <anchorfile>a03643.html</anchorfile>
      <anchor>a321fb6f90eb0035ef8e5bb383f8da4a2</anchor>
      <arglist>(const FastList&lt; Key &gt; &amp;leafKeys, boost::optional&lt; FactorIndices &amp; &gt; marginalFactorsIndices=boost::none, boost::optional&lt; FactorIndices &amp; &gt; deletedFactorsIndices=boost::none)</arglist>
    </member>
    <member kind="function">
      <type>const Values &amp;</type>
      <name>getLinearizationPoint</name>
      <anchorfile>a03643.html</anchorfile>
      <anchor>aa821a692ef200fd2ab3c46c0e1fe2ad3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>valueExists</name>
      <anchorfile>a03643.html</anchorfile>
      <anchor>affcd8d849cfa6e8dbfc73628d38552b9</anchor>
      <arglist>(Key key) const</arglist>
    </member>
    <member kind="function">
      <type>Values</type>
      <name>calculateEstimate</name>
      <anchorfile>a03643.html</anchorfile>
      <anchor>ae12fc71728266a75fa3893f40531f597</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>VALUE</type>
      <name>calculateEstimate</name>
      <anchorfile>a03643.html</anchorfile>
      <anchor>a35b4a27886c7dd9caacb1ff2e04ca8a9</anchor>
      <arglist>(Key key) const</arglist>
    </member>
    <member kind="function">
      <type>const Value &amp;</type>
      <name>calculateEstimate</name>
      <anchorfile>a03643.html</anchorfile>
      <anchor>a29aac843741b236546fa2f8b70929404</anchor>
      <arglist>(Key key) const</arglist>
    </member>
    <member kind="function">
      <type>Matrix</type>
      <name>marginalCovariance</name>
      <anchorfile>a03643.html</anchorfile>
      <anchor>a4be1cf1c4427ef29581c30618e5e1a4a</anchor>
      <arglist>(Key key) const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>AddFactorsStep1</name>
      <anchorfile>a03643.html</anchorfile>
      <anchor>a074fb4bc23c99bd4949a801c806a7d5b</anchor>
      <arglist>(const NonlinearFactorGraph &amp;newFactors, bool useUnusedSlots, NonlinearFactorGraph *nonlinearFactors, FactorIndices *newFactorIndices)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static KeySet</type>
      <name>CheckRelinearizationFull</name>
      <anchorfile>a03643.html</anchorfile>
      <anchor>a00d06b2a7b0cb017f3fa0bd7f793b6ac</anchor>
      <arglist>(const VectorValues &amp;delta, const ISAM2Params::RelinearizationThreshold &amp;relinearizeThreshold)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static KeySet</type>
      <name>CheckRelinearizationPartial</name>
      <anchorfile>a03643.html</anchorfile>
      <anchor>a65476c6e638c0291e24048ba5634d15a</anchor>
      <arglist>(const ISAM2::Roots &amp;roots, const VectorValues &amp;delta, const ISAM2Params::RelinearizationThreshold &amp;relinearizeThreshold)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static size_t</type>
      <name>UpdateGaussNewtonDelta</name>
      <anchorfile>a03643.html</anchorfile>
      <anchor>ae6f8e9cd0b82e641ce64e2c8be195692</anchor>
      <arglist>(const ISAM2::Roots &amp;roots, const KeySet &amp;replacedKeys, double wildfireThreshold, VectorValues *delta)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static size_t</type>
      <name>UpdateRgProd</name>
      <anchorfile>a03643.html</anchorfile>
      <anchor>a4b3efd4e78a8801f54f0467bb58d90da</anchor>
      <arglist>(const ISAM2::Roots &amp;roots, const KeySet &amp;replacedKeys, const VectorValues &amp;gradAtZero, VectorValues *RgProd)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static VectorValues</type>
      <name>ComputeGradientSearch</name>
      <anchorfile>a03643.html</anchorfile>
      <anchor>abbcaf0d184a7084789d682d9aba888de</anchor>
      <arglist>(const VectorValues &amp;gradAtZero, const VectorValues &amp;RgProd)</arglist>
    </member>
    <member kind="typedef">
      <type>ISAM2</type>
      <name>This</name>
      <anchorfile>a03643.html</anchorfile>
      <anchor>a7c4c4137185f8dcca2fd136936462919</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>BayesTree&lt; ISAM2Clique &gt;</type>
      <name>Base</name>
      <anchorfile>a03643.html</anchorfile>
      <anchor>adfc37e7c222718cc8b3e76afec7e5f8a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Base::Clique</type>
      <name>Clique</name>
      <anchorfile>a03643.html</anchorfile>
      <anchor>a90a8a46839620cb74f9a965b425bf7ab</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Base::sharedClique</type>
      <name>sharedClique</name>
      <anchorfile>a03643.html</anchorfile>
      <anchor>a5fd7e27e3c0336ed65461ad36ec85618</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Base::Cliques</type>
      <name>Cliques</name>
      <anchorfile>a03643.html</anchorfile>
      <anchor>a9b0db92a44543ba7ddf0b7f96c49a370</anchor>
      <arglist></arglist>
    </member>
    <class kind="struct">gtsam::ISAM2::PartialSolveResult</class>
    <class kind="struct">gtsam::ISAM2::ReorderingMode</class>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>addVariables</name>
      <anchorfile>a03643.html</anchorfile>
      <anchor>ac4fc82ae885c105ceaeec960926e97ae</anchor>
      <arglist>(const Values &amp;newTheta)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>removeVariables</name>
      <anchorfile>a03643.html</anchorfile>
      <anchor>a16e2e5fbcc35c91e434858bddde793f9</anchor>
      <arglist>(const KeySet &amp;unusedKeys)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>expmapMasked</name>
      <anchorfile>a03643.html</anchorfile>
      <anchor>ad21c3b635788039c3e5aa8f048e5e59d</anchor>
      <arglist>(const KeySet &amp;mask)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Values</type>
      <name>theta_</name>
      <anchorfile>a03643.html</anchorfile>
      <anchor>abe3ea23a8d9b61097f28bf2a5c23057e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>VariableIndex</type>
      <name>variableIndex_</name>
      <anchorfile>a03643.html</anchorfile>
      <anchor>ab9bd085bcf745368cb4801d04538ec18</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>VectorValues</type>
      <name>delta_</name>
      <anchorfile>a03643.html</anchorfile>
      <anchor>aa1a5f004e312d381945569e74e801941</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>KeySet</type>
      <name>deltaReplacedMask_</name>
      <anchorfile>a03643.html</anchorfile>
      <anchor>a0f7ba75bbd10998951d79a62106e0623</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>NonlinearFactorGraph</type>
      <name>nonlinearFactors_</name>
      <anchorfile>a03643.html</anchorfile>
      <anchor>a9307a6fb614f33fb354e4e445467c258</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>GaussianFactorGraph</type>
      <name>linearFactors_</name>
      <anchorfile>a03643.html</anchorfile>
      <anchor>ada63722602d709e210d4e1ab45dcc6a8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ISAM2Params</type>
      <name>params_</name>
      <anchorfile>a03643.html</anchorfile>
      <anchor>abec56652222d97d144e75a175ba3e8d0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>boost::optional&lt; double &gt;</type>
      <name>doglegDelta_</name>
      <anchorfile>a03643.html</anchorfile>
      <anchor>ad460de94ada9813a2a9ca8ee8a953a19</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>KeySet</type>
      <name>fixedVariables_</name>
      <anchorfile>a03643.html</anchorfile>
      <anchor>a0d0807258336ff483ad89c80cdb88eea</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>update_count_</name>
      <anchorfile>a03643.html</anchorfile>
      <anchor>a29b30773e68652011e31ee0a9a0cfa4d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::ISAM2Clique</name>
    <filename>a03667.html</filename>
    <base>BayesTreeCliqueBase&lt; ISAM2Clique, GaussianFactorGraph &gt;</base>
    <member kind="function">
      <type></type>
      <name>ISAM2Clique</name>
      <anchorfile>a03667.html</anchorfile>
      <anchor>a65df62d31a1b1634ab9ebd9e2bbe32a8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ISAM2Clique</name>
      <anchorfile>a03667.html</anchorfile>
      <anchor>a19fabd19af262f6e8bda230a2efadc82</anchor>
      <arglist>(const ISAM2Clique &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>ISAM2Clique &amp;</type>
      <name>operator=</name>
      <anchorfile>a03667.html</anchorfile>
      <anchor>ad8a8618f7967b50bc1b9e5329a38c98b</anchor>
      <arglist>(const ISAM2Clique &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setEliminationResult</name>
      <anchorfile>a03667.html</anchorfile>
      <anchor>ad79e1c0e71cabe328a510a571cc29206</anchor>
      <arglist>(const FactorGraphType::EliminationResult &amp;eliminationResult)</arglist>
    </member>
    <member kind="function">
      <type>Base::FactorType::shared_ptr &amp;</type>
      <name>cachedFactor</name>
      <anchorfile>a03667.html</anchorfile>
      <anchor>a553ee8faff7f1780c26202f3ea5090fd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const Vector &amp;</type>
      <name>gradientContribution</name>
      <anchorfile>a03667.html</anchorfile>
      <anchor>a09792789c5dd9c0f73f6bd293aa1c078</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>a03667.html</anchorfile>
      <anchor>a9424e5a0b74c29ed43a00323fcd3f76f</anchor>
      <arglist>(const std::string &amp;s=&quot;&quot;, const KeyFormatter &amp;formatter=DefaultKeyFormatter) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>nnz_internal</name>
      <anchorfile>a03667.html</anchorfile>
      <anchor>a62a816c05cad8360c92599ae644b0554</anchor>
      <arglist>(size_t *result) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>findAll</name>
      <anchorfile>a03667.html</anchorfile>
      <anchor>a184ab7f333a15833d70c2533413d2ab5</anchor>
      <arglist>(const KeySet &amp;markedMask, KeySet *keys) const</arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>boost::serialization::access</name>
      <anchorfile>a03667.html</anchorfile>
      <anchor>ac98d07dd8f7b70e16ccb9a01abf56b9c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>gtsam::ISAM2DoglegParams</name>
    <filename>a03675.html</filename>
    <member kind="function">
      <type></type>
      <name>ISAM2DoglegParams</name>
      <anchorfile>a03675.html</anchorfile>
      <anchor>a68b79a86c44c9bec6549ecdfaf0cf536</anchor>
      <arglist>(double _initialDelta=1.0, double _wildfireThreshold=1e-5, DoglegOptimizerImpl::TrustRegionAdaptationMode _adaptationMode=DoglegOptimizerImpl::SEARCH_EACH_ITERATION, bool _verbose=false)</arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>initialDelta</name>
      <anchorfile>a03675.html</anchorfile>
      <anchor>a929d62bcb7aefda2b8514a813360d272</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>wildfireThreshold</name>
      <anchorfile>a03675.html</anchorfile>
      <anchor>aaf78f71297ce1a510acd290b3e7289f2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>DoglegOptimizerImpl::TrustRegionAdaptationMode</type>
      <name>adaptationMode</name>
      <anchorfile>a03675.html</anchorfile>
      <anchor>a4011adf62546c0fca59e62c0522136b8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>verbose</name>
      <anchorfile>a03675.html</anchorfile>
      <anchor>a423adc06cbc8c72f89469d1c3eb24571</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>gtsam::ISAM2GaussNewtonParams</name>
    <filename>a03671.html</filename>
    <member kind="function">
      <type></type>
      <name>ISAM2GaussNewtonParams</name>
      <anchorfile>a03671.html</anchorfile>
      <anchor>ab1b9012a5a0d91351d13174c5208dc7e</anchor>
      <arglist>(double _wildfireThreshold=0.001)</arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>wildfireThreshold</name>
      <anchorfile>a03671.html</anchorfile>
      <anchor>a2d9c7345a550e3719689a75a4e203f3b</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>gtsam::ISAM2Params</name>
    <filename>a03679.html</filename>
    <member kind="function">
      <type></type>
      <name>ISAM2Params</name>
      <anchorfile>a03679.html</anchorfile>
      <anchor>ab4737152c866e704c33d2da886a09bb5</anchor>
      <arglist>(OptimizationParams _optimizationParams=ISAM2GaussNewtonParams(), RelinearizationThreshold _relinearizeThreshold=0.1, int _relinearizeSkip=10, bool _enableRelinearization=true, bool _evaluateNonlinearError=false, Factorization _factorization=ISAM2Params::CHOLESKY, bool _cacheLinearizedFactors=true, const KeyFormatter &amp;_keyFormatter=DefaultKeyFormatter)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>a03679.html</anchorfile>
      <anchor>a31940d63f74bdd2ac6f7d6dff2e94d84</anchor>
      <arglist>(const std::string &amp;str=&quot;&quot;) const</arglist>
    </member>
    <member kind="variable">
      <type>OptimizationParams</type>
      <name>optimizationParams</name>
      <anchorfile>a03679.html</anchorfile>
      <anchor>a228293673dafedcf900dc0927be66b1d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>RelinearizationThreshold</type>
      <name>relinearizeThreshold</name>
      <anchorfile>a03679.html</anchorfile>
      <anchor>af5da340f5774c8ccbbdecfc0a5299888</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>relinearizeSkip</name>
      <anchorfile>a03679.html</anchorfile>
      <anchor>ab914df94ba4aeff0d19293240f61838c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>enableRelinearization</name>
      <anchorfile>a03679.html</anchorfile>
      <anchor>a39c7b95cdffb77c3f9b02c8b74d135d2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>evaluateNonlinearError</name>
      <anchorfile>a03679.html</anchorfile>
      <anchor>a6d72361621ace3e37e5b06eed1ef2a40</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Factorization</type>
      <name>factorization</name>
      <anchorfile>a03679.html</anchorfile>
      <anchor>ae9aeb4bedb786390f4c64e8217730cf4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>cacheLinearizedFactors</name>
      <anchorfile>a03679.html</anchorfile>
      <anchor>a63f4f566f792b1bfe55ced8c8d0f77c1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>KeyFormatter</type>
      <name>keyFormatter</name>
      <anchorfile>a03679.html</anchorfile>
      <anchor>af43c5940b56d327638b1a04bf8f85c91</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>enableDetailedResults</name>
      <anchorfile>a03679.html</anchorfile>
      <anchor>a705057d0849755bb974848f57ca1482f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>enablePartialRelinearizationCheck</name>
      <anchorfile>a03679.html</anchorfile>
      <anchor>a086c925f9657f69bb87381f5caa35d8d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>findUnusedFactorSlots</name>
      <anchorfile>a03679.html</anchorfile>
      <anchor>a8ff00037b52caa1ac8ce81747dfd794e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::variant&lt; ISAM2GaussNewtonParams, ISAM2DoglegParams &gt;</type>
      <name>OptimizationParams</name>
      <anchorfile>a03679.html</anchorfile>
      <anchor>a78914164d9fc6f601b2e41ed6f29d386</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::variant&lt; double, FastMap&lt; char, Vector &gt; &gt;</type>
      <name>RelinearizationThreshold</name>
      <anchorfile>a03679.html</anchorfile>
      <anchor>aaca0be318ade6e00378389976c5cb761</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>gtsam::ISAM2Result</name>
    <filename>a03683.html</filename>
    <member kind="function">
      <type>size_t</type>
      <name>getVariablesRelinearized</name>
      <anchorfile>a03683.html</anchorfile>
      <anchor>a1b2b5247eaf3ef6f6d3e639e2e310962</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable">
      <type>boost::optional&lt; double &gt;</type>
      <name>errorBefore</name>
      <anchorfile>a03683.html</anchorfile>
      <anchor>a5ddf96680d6cac030d8862da98bcaba5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>boost::optional&lt; double &gt;</type>
      <name>errorAfter</name>
      <anchorfile>a03683.html</anchorfile>
      <anchor>ae57486e5d3d6592d0c08b4783baf2f27</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>size_t</type>
      <name>variablesRelinearized</name>
      <anchorfile>a03683.html</anchorfile>
      <anchor>a0ef240bad454346811a3db6a28e2516a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>size_t</type>
      <name>variablesReeliminated</name>
      <anchorfile>a03683.html</anchorfile>
      <anchor>aa591562d9627adfff6641e1b7f217c06</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>size_t</type>
      <name>factorsRecalculated</name>
      <anchorfile>a03683.html</anchorfile>
      <anchor>a3d4494a9ce533ee7fac5acf6819f2484</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>size_t</type>
      <name>cliques</name>
      <anchorfile>a03683.html</anchorfile>
      <anchor>a8676d942982667bd0a77975c944c6ae4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>FactorIndices</type>
      <name>newFactorsIndices</name>
      <anchorfile>a03683.html</anchorfile>
      <anchor>adb82c057d927f3c326ca3c38dac29660</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>boost::optional&lt; DetailedResults &gt;</type>
      <name>detail</name>
      <anchorfile>a03683.html</anchorfile>
      <anchor>a7cc687e12fe3ad3a6fba651108fac6b7</anchor>
      <arglist></arglist>
    </member>
    <class kind="struct">gtsam::ISAM2Result::DetailedResults</class>
  </compound>
  <compound kind="class">
    <name>ISAM&lt; GaussianBayesTree &gt;</name>
    <filename>a02999.html</filename>
    <base>gtsam::GaussianBayesTree</base>
    <member kind="function">
      <type></type>
      <name>ISAM</name>
      <anchorfile>a02999.html</anchorfile>
      <anchor>a528e028d3e062171007e8f40b55fdbae</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ISAM</name>
      <anchorfile>a02999.html</anchorfile>
      <anchor>a0c7b81b104909590d1341dcfd19dadc9</anchor>
      <arglist>(const Base &amp;bayesTree)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>update</name>
      <anchorfile>a02999.html</anchorfile>
      <anchor>a0994a7782d39515a5c2869ef9efb65f3</anchor>
      <arglist>(const FactorGraphType &amp;newFactors, const Eliminate &amp;function=EliminationTraitsType::DefaultEliminate)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>update_internal</name>
      <anchorfile>a02999.html</anchorfile>
      <anchor>aad035c91c1fcfe5438c9816e75bb8fb3</anchor>
      <arglist>(const FactorGraphType &amp;newFactors, Cliques &amp;orphans, const Eliminate &amp;function=EliminationTraitsType::DefaultEliminate)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ISAM</name>
      <anchorfile>a02999.html</anchorfile>
      <anchor>a528e028d3e062171007e8f40b55fdbae</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ISAM</name>
      <anchorfile>a02999.html</anchorfile>
      <anchor>a0c7b81b104909590d1341dcfd19dadc9</anchor>
      <arglist>(const Base &amp;bayesTree)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>update</name>
      <anchorfile>a02999.html</anchorfile>
      <anchor>a0994a7782d39515a5c2869ef9efb65f3</anchor>
      <arglist>(const FactorGraphType &amp;newFactors, const Eliminate &amp;function=EliminationTraitsType::DefaultEliminate)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>update_internal</name>
      <anchorfile>a02999.html</anchorfile>
      <anchor>aad035c91c1fcfe5438c9816e75bb8fb3</anchor>
      <arglist>(const FactorGraphType &amp;newFactors, Cliques &amp;orphans, const Eliminate &amp;function=EliminationTraitsType::DefaultEliminate)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ISAM&lt; SymbolicBayesTree &gt;</name>
    <filename>a02999.html</filename>
    <base>gtsam::SymbolicBayesTree</base>
    <member kind="function">
      <type></type>
      <name>ISAM</name>
      <anchorfile>a02999.html</anchorfile>
      <anchor>a528e028d3e062171007e8f40b55fdbae</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ISAM</name>
      <anchorfile>a02999.html</anchorfile>
      <anchor>a0c7b81b104909590d1341dcfd19dadc9</anchor>
      <arglist>(const Base &amp;bayesTree)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>update</name>
      <anchorfile>a02999.html</anchorfile>
      <anchor>a0994a7782d39515a5c2869ef9efb65f3</anchor>
      <arglist>(const FactorGraphType &amp;newFactors, const Eliminate &amp;function=EliminationTraitsType::DefaultEliminate)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>update_internal</name>
      <anchorfile>a02999.html</anchorfile>
      <anchor>aad035c91c1fcfe5438c9816e75bb8fb3</anchor>
      <arglist>(const FactorGraphType &amp;newFactors, Cliques &amp;orphans, const Eliminate &amp;function=EliminationTraitsType::DefaultEliminate)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ISAM</name>
      <anchorfile>a02999.html</anchorfile>
      <anchor>a528e028d3e062171007e8f40b55fdbae</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ISAM</name>
      <anchorfile>a02999.html</anchorfile>
      <anchor>a0c7b81b104909590d1341dcfd19dadc9</anchor>
      <arglist>(const Base &amp;bayesTree)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>update</name>
      <anchorfile>a02999.html</anchorfile>
      <anchor>a0994a7782d39515a5c2869ef9efb65f3</anchor>
      <arglist>(const FactorGraphType &amp;newFactors, const Eliminate &amp;function=EliminationTraitsType::DefaultEliminate)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>update_internal</name>
      <anchorfile>a02999.html</anchorfile>
      <anchor>aad035c91c1fcfe5438c9816e75bb8fb3</anchor>
      <arglist>(const FactorGraphType &amp;newFactors, Cliques &amp;orphans, const Eliminate &amp;function=EliminationTraitsType::DefaultEliminate)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::IsGroup</name>
    <filename>a02059.html</filename>
    <templarg>G</templarg>
  </compound>
  <compound kind="class">
    <name>IsGroup&lt; T &gt;</name>
    <filename>a02059.html</filename>
  </compound>
  <compound kind="class">
    <name>gtsam::IsLieGroup</name>
    <filename>a02095.html</filename>
    <templarg></templarg>
    <base>IsGroup&lt; T &gt;</base>
  </compound>
  <compound kind="class">
    <name>gtsam::noiseModel::Isotropic</name>
    <filename>a03235.html</filename>
    <base>gtsam::noiseModel::Diagonal</base>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>Mahalanobis</name>
      <anchorfile>a03235.html</anchorfile>
      <anchor>a20e4ec9acdc32d812713f519aa7361dd</anchor>
      <arglist>(const Vector &amp;v) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Vector</type>
      <name>whiten</name>
      <anchorfile>a03235.html</anchorfile>
      <anchor>a8d0e73d29557843afe1e3852f70b6471</anchor>
      <arglist>(const Vector &amp;v) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Vector</type>
      <name>unwhiten</name>
      <anchorfile>a03235.html</anchorfile>
      <anchor>a1d6ebe70bcdcdc478f683cb76351f199</anchor>
      <arglist>(const Vector &amp;v) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Matrix</type>
      <name>Whiten</name>
      <anchorfile>a03235.html</anchorfile>
      <anchor>a3882c7d5fa8949cb6d72812d55826579</anchor>
      <arglist>(const Matrix &amp;H) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>WhitenInPlace</name>
      <anchorfile>a03235.html</anchorfile>
      <anchor>a90dc7f9d920ece9281b2cb965151b3da</anchor>
      <arglist>(Matrix &amp;H) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>whitenInPlace</name>
      <anchorfile>a03235.html</anchorfile>
      <anchor>af377f0dfdff497396c10737616a4f451</anchor>
      <arglist>(Vector &amp;v) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>WhitenInPlace</name>
      <anchorfile>a03235.html</anchorfile>
      <anchor>adf2f789153ee5f363d45454a880fcc1f</anchor>
      <arglist>(Eigen::Block&lt; Matrix &gt; H) const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>sigma</name>
      <anchorfile>a03235.html</anchorfile>
      <anchor>a0d9e4784fd131f6f47c9c24e9973f0ab</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static shared_ptr</type>
      <name>Sigma</name>
      <anchorfile>a03235.html</anchorfile>
      <anchor>a6f34496ff6924bd5552c77810e991015</anchor>
      <arglist>(size_t dim, double sigma, bool smart=true)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static shared_ptr</type>
      <name>Variance</name>
      <anchorfile>a03235.html</anchorfile>
      <anchor>af176eeec710dc59f5e0125e52a9e8326</anchor>
      <arglist>(size_t dim, double variance, bool smart=true)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static shared_ptr</type>
      <name>Precision</name>
      <anchorfile>a03235.html</anchorfile>
      <anchor>a82d8d86deec2e1cc7185c9ccf113b724</anchor>
      <arglist>(size_t dim, double precision, bool smart=true)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>Isotropic</name>
      <anchorfile>a03235.html</anchorfile>
      <anchor>ae18e287216417166319c4ea7ba046941</anchor>
      <arglist>(size_t dim, double sigma)</arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>boost::serialization::access</name>
      <anchorfile>a03235.html</anchorfile>
      <anchor>ac98d07dd8f7b70e16ccb9a01abf56b9c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::IsTestable</name>
    <filename>a02187.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="class">
    <name>gtsam::IsVectorSpace</name>
    <filename>a02331.html</filename>
    <templarg></templarg>
    <base>gtsam::IsLieGroup</base>
  </compound>
  <compound kind="struct">
    <name>gtsam::DoglegOptimizerImpl::IterationResult</name>
    <filename>a03575.html</filename>
  </compound>
  <compound kind="class">
    <name>gtsam::IterativeOptimizationParameters</name>
    <filename>a03167.html</filename>
  </compound>
  <compound kind="class">
    <name>gtsam::IterativeSolver</name>
    <filename>a03171.html</filename>
  </compound>
  <compound kind="class">
    <name>gtsam::JacobianFactor</name>
    <filename>a03183.html</filename>
    <base>gtsam::GaussianFactor</base>
    <member kind="function">
      <type></type>
      <name>JacobianFactor</name>
      <anchorfile>a03183.html</anchorfile>
      <anchor>aebf0c4a50146cf293ad757393edb7eba</anchor>
      <arglist>(const GaussianFactor &amp;gf)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>JacobianFactor</name>
      <anchorfile>a03183.html</anchorfile>
      <anchor>a51dae31470b597cfcb125d8eea11c9f7</anchor>
      <arglist>(const JacobianFactor &amp;jf)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>JacobianFactor</name>
      <anchorfile>a03183.html</anchorfile>
      <anchor>a3f6c68122081325fba60790aea4e3033</anchor>
      <arglist>(const HessianFactor &amp;hf)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>JacobianFactor</name>
      <anchorfile>a03183.html</anchorfile>
      <anchor>a6529a99f529d8d5e9a7d65e0aed8622b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>JacobianFactor</name>
      <anchorfile>a03183.html</anchorfile>
      <anchor>a6b7a84b699fe0ef46cedd5e523f5bec6</anchor>
      <arglist>(const Vector &amp;b_in)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>JacobianFactor</name>
      <anchorfile>a03183.html</anchorfile>
      <anchor>a8242a86e1822da752487387b49ff5e30</anchor>
      <arglist>(Key i1, const Matrix &amp;A1, const Vector &amp;b, const SharedDiagonal &amp;model=SharedDiagonal())</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>JacobianFactor</name>
      <anchorfile>a03183.html</anchorfile>
      <anchor>a19bfb262816122d0bbe6ec6b1b2c7b1f</anchor>
      <arglist>(Key i1, const Matrix &amp;A1, Key i2, const Matrix &amp;A2, const Vector &amp;b, const SharedDiagonal &amp;model=SharedDiagonal())</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>JacobianFactor</name>
      <anchorfile>a03183.html</anchorfile>
      <anchor>a10686053f59eecc6fa400436ae7524d7</anchor>
      <arglist>(Key i1, const Matrix &amp;A1, Key i2, const Matrix &amp;A2, Key i3, const Matrix &amp;A3, const Vector &amp;b, const SharedDiagonal &amp;model=SharedDiagonal())</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>JacobianFactor</name>
      <anchorfile>a03183.html</anchorfile>
      <anchor>adc5d50005aa660bbcd38e56d036a16f1</anchor>
      <arglist>(const TERMS &amp;terms, const Vector &amp;b, const SharedDiagonal &amp;model=SharedDiagonal())</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>JacobianFactor</name>
      <anchorfile>a03183.html</anchorfile>
      <anchor>aa3af91d18474a5833c9aa706e2faffbf</anchor>
      <arglist>(const KEYS &amp;keys, const VerticalBlockMatrix &amp;augmentedMatrix, const SharedDiagonal &amp;sigmas=SharedDiagonal())</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>JacobianFactor</name>
      <anchorfile>a03183.html</anchorfile>
      <anchor>a6b77218bc3eeae092c3937f256471eb5</anchor>
      <arglist>(const GaussianFactorGraph &amp;graph, boost::optional&lt; const Ordering &amp; &gt; ordering=boost::none, boost::optional&lt; const VariableSlots &amp; &gt; p_variableSlots=boost::none)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~JacobianFactor</name>
      <anchorfile>a03183.html</anchorfile>
      <anchor>afbeef8a25aebb72b466c88e5cc2f6306</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual GaussianFactor::shared_ptr</type>
      <name>clone</name>
      <anchorfile>a03183.html</anchorfile>
      <anchor>a7184c8881f76ae6266ba56371962de87</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>equals</name>
      <anchorfile>a03183.html</anchorfile>
      <anchor>a5c5e8e1a7c5ad6cad7e2d0b5c520dcd5</anchor>
      <arglist>(const GaussianFactor &amp;lf, double tol=1e-9) const</arglist>
    </member>
    <member kind="function">
      <type>Vector</type>
      <name>error_vector</name>
      <anchorfile>a03183.html</anchorfile>
      <anchor>a916898a80621163ad8a94cae1677cb58</anchor>
      <arglist>(const VectorValues &amp;c) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>error</name>
      <anchorfile>a03183.html</anchorfile>
      <anchor>a3df92080ae38d1d10fd423d4d3888790</anchor>
      <arglist>(const VectorValues &amp;c) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Matrix</type>
      <name>augmentedInformation</name>
      <anchorfile>a03183.html</anchorfile>
      <anchor>a9368a5a3cea39307c647dac328b96b21</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Matrix</type>
      <name>information</name>
      <anchorfile>a03183.html</anchorfile>
      <anchor>a8c198de0a5a0ca7d68da8fb38120a489</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual VectorValues</type>
      <name>hessianDiagonal</name>
      <anchorfile>a03183.html</anchorfile>
      <anchor>ae4063e44cff3fd8362e9dc1c8f4742d3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>hessianDiagonal</name>
      <anchorfile>a03183.html</anchorfile>
      <anchor>a69906c210cc7fd0607705dbd361930d5</anchor>
      <arglist>(double *d) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::map&lt; Key, Matrix &gt;</type>
      <name>hessianBlockDiagonal</name>
      <anchorfile>a03183.html</anchorfile>
      <anchor>ab5be3866db3f8f2051435ad68b04b009</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::pair&lt; Matrix, Vector &gt;</type>
      <name>jacobian</name>
      <anchorfile>a03183.html</anchorfile>
      <anchor>ae77f37e9491ca6a9db02378300b08e5d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::pair&lt; Matrix, Vector &gt;</type>
      <name>jacobianUnweighted</name>
      <anchorfile>a03183.html</anchorfile>
      <anchor>ae1ad69f4f0b17f81856166f021b47e95</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Matrix</type>
      <name>augmentedJacobian</name>
      <anchorfile>a03183.html</anchorfile>
      <anchor>a6ed7d7af4982d52b6cb427f13ce0b2f2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Matrix</type>
      <name>augmentedJacobianUnweighted</name>
      <anchorfile>a03183.html</anchorfile>
      <anchor>ac0a22f1c66f89d6b147f190c58bb753a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const VerticalBlockMatrix &amp;</type>
      <name>matrixObject</name>
      <anchorfile>a03183.html</anchorfile>
      <anchor>a87edf8ea0c3ff41eecc9c5238eaf5e6d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>VerticalBlockMatrix &amp;</type>
      <name>matrixObject</name>
      <anchorfile>a03183.html</anchorfile>
      <anchor>a3f46732d3af7edbb56e17431504247ab</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual GaussianFactor::shared_ptr</type>
      <name>negate</name>
      <anchorfile>a03183.html</anchorfile>
      <anchor>a9021c529d787bf4083fda8ee33d825e0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>empty</name>
      <anchorfile>a03183.html</anchorfile>
      <anchor>a70f3cad9137c0f92057f6bf15c4120fb</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isConstrained</name>
      <anchorfile>a03183.html</anchorfile>
      <anchor>a6c450b7717764964f270faeb3beb36ac</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual DenseIndex</type>
      <name>getDim</name>
      <anchorfile>a03183.html</anchorfile>
      <anchor>a824e41e75ce850f8e9859f159696d74f</anchor>
      <arglist>(const_iterator variable) const</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>rows</name>
      <anchorfile>a03183.html</anchorfile>
      <anchor>abb57c8cec2af9109edb3127ae89f69a8</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>cols</name>
      <anchorfile>a03183.html</anchorfile>
      <anchor>ad8665a5b047867d807cd1808edad1e0c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const SharedDiagonal &amp;</type>
      <name>get_model</name>
      <anchorfile>a03183.html</anchorfile>
      <anchor>a57e5504c1dc66e9ed9b4ef4845105c65</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>SharedDiagonal &amp;</type>
      <name>get_model</name>
      <anchorfile>a03183.html</anchorfile>
      <anchor>a027b97a36c32c2ad26631c35cc405569</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const constBVector</type>
      <name>getb</name>
      <anchorfile>a03183.html</anchorfile>
      <anchor>a0d0aa9bc7d1cdf639b6731d6cef6b2f8</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>constABlock</type>
      <name>getA</name>
      <anchorfile>a03183.html</anchorfile>
      <anchor>af3116737337ff3df51a5c5fe884154c4</anchor>
      <arglist>(const_iterator variable) const</arglist>
    </member>
    <member kind="function">
      <type>constABlock</type>
      <name>getA</name>
      <anchorfile>a03183.html</anchorfile>
      <anchor>a6ec09943327b0cf49a05216eb9c128de</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>BVector</type>
      <name>getb</name>
      <anchorfile>a03183.html</anchorfile>
      <anchor>a283d02687937cd199624b53d515622af</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>ABlock</type>
      <name>getA</name>
      <anchorfile>a03183.html</anchorfile>
      <anchor>a83e85032eecb0d6deee3743bd4d21253</anchor>
      <arglist>(iterator variable)</arglist>
    </member>
    <member kind="function">
      <type>ABlock</type>
      <name>getA</name>
      <anchorfile>a03183.html</anchorfile>
      <anchor>a9cf15287bde9bbd4eed7209140418057</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>updateHessian</name>
      <anchorfile>a03183.html</anchorfile>
      <anchor>a3bd787aff917c2961a10a1c6742ff3ad</anchor>
      <arglist>(const KeyVector &amp;keys, SymmetricBlockMatrix *info) const</arglist>
    </member>
    <member kind="function">
      <type>Vector</type>
      <name>operator *</name>
      <anchorfile>a03183.html</anchorfile>
      <anchor>a57720da22fd93bd0514b6c9e1976399a</anchor>
      <arglist>(const VectorValues &amp;x) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>transposeMultiplyAdd</name>
      <anchorfile>a03183.html</anchorfile>
      <anchor>a41d2a9584c072dd01977752acf05fd06</anchor>
      <arglist>(double alpha, const Vector &amp;e, VectorValues &amp;x) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>multiplyHessianAdd</name>
      <anchorfile>a03183.html</anchorfile>
      <anchor>ac954268c148bae5e15eef17be71b0323</anchor>
      <arglist>(double alpha, const VectorValues &amp;x, VectorValues &amp;y) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>multiplyHessianAdd</name>
      <anchorfile>a03183.html</anchorfile>
      <anchor>a89568ca7957c90ebdd47dcdb4a1a6994</anchor>
      <arglist>(double alpha, const double *x, double *y, const std::vector&lt; size_t &gt; &amp;accumulatedDims) const</arglist>
    </member>
    <member kind="function">
      <type>VectorValues</type>
      <name>gradientAtZero</name>
      <anchorfile>a03183.html</anchorfile>
      <anchor>ae9e003d2827f4c6261bfc2f676ecb027</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>gradientAtZero</name>
      <anchorfile>a03183.html</anchorfile>
      <anchor>a8b0e0dd65e5169999043b0f192ef02a1</anchor>
      <arglist>(double *d) const</arglist>
    </member>
    <member kind="function">
      <type>Vector</type>
      <name>gradient</name>
      <anchorfile>a03183.html</anchorfile>
      <anchor>a240f5c246a2aa2fdd519053aac4b88dd</anchor>
      <arglist>(Key key, const VectorValues &amp;x) const</arglist>
    </member>
    <member kind="function">
      <type>JacobianFactor</type>
      <name>whiten</name>
      <anchorfile>a03183.html</anchorfile>
      <anchor>aa5170ead08445576b43ba1fc1ca065f3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::pair&lt; boost::shared_ptr&lt; GaussianConditional &gt;, shared_ptr &gt;</type>
      <name>eliminate</name>
      <anchorfile>a03183.html</anchorfile>
      <anchor>aacf73ccbc1b57b515c9733bbe91e36aa</anchor>
      <arglist>(const Ordering &amp;keys)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setModel</name>
      <anchorfile>a03183.html</anchorfile>
      <anchor>aed654ae2a8c5ef5862636bd068571409</anchor>
      <arglist>(bool anyConstrained, const Vector &amp;sigmas)</arglist>
    </member>
    <member kind="function">
      <type>boost::shared_ptr&lt; GaussianConditional &gt;</type>
      <name>splitConditional</name>
      <anchorfile>a03183.html</anchorfile>
      <anchor>a25834726868b7b4e5427588ee38212aa</anchor>
      <arglist>(size_t nrFrontals)</arglist>
    </member>
    <member kind="typedef">
      <type>JacobianFactor</type>
      <name>This</name>
      <anchorfile>a03183.html</anchorfile>
      <anchor>a53b64a11dd54af2f37fc441d6475ed0b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GaussianFactor</type>
      <name>Base</name>
      <anchorfile>a03183.html</anchorfile>
      <anchor>a9fc30c262bb0a6b6d2ea13d39086f3b9</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; This &gt;</type>
      <name>shared_ptr</name>
      <anchorfile>a03183.html</anchorfile>
      <anchor>adaf03a52ed83559d6a03cbab95092698</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>fillTerms</name>
      <anchorfile>a03183.html</anchorfile>
      <anchor>a44d0e92d8e8e74eab3792080ed648b5e</anchor>
      <arglist>(const TERMS &amp;terms, const Vector &amp;b, const SharedDiagonal &amp;noiseModel)</arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>boost::serialization::access</name>
      <anchorfile>a03183.html</anchorfile>
      <anchor>ac98d07dd8f7b70e16ccb9a01abf56b9c</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend GTSAM_EXPORT std::pair&lt; boost::shared_ptr&lt; GaussianConditional &gt;, shared_ptr &gt;</type>
      <name>EliminateQR</name>
      <anchorfile>a03183.html</anchorfile>
      <anchor>a0468cf2748fa382edbf96217ab2575d0</anchor>
      <arglist>(const GaussianFactorGraph &amp;factors, const Ordering &amp;keys)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::JacobianFactorQ</name>
    <filename>a04015.html</filename>
    <templarg>D</templarg>
    <templarg>ZDim</templarg>
    <base>gtsam::RegularJacobianFactor</base>
    <member kind="function">
      <type></type>
      <name>JacobianFactorQ</name>
      <anchorfile>a04015.html</anchorfile>
      <anchor>a4dd3fbba46a6dff75bcf902931a3b769</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>JacobianFactorQ</name>
      <anchorfile>a04015.html</anchorfile>
      <anchor>abfb38e58b5b2d1293cf374b7eca2b2d4</anchor>
      <arglist>(const KeyVector &amp;keys, const SharedDiagonal &amp;model=SharedDiagonal())</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>JacobianFactorQ</name>
      <anchorfile>a04015.html</anchorfile>
      <anchor>a549fef1272025c45472f2e4294bd319e</anchor>
      <arglist>(const KeyVector &amp;keys, const std::vector&lt; MatrixZD, Eigen::aligned_allocator&lt; MatrixZD &gt; &gt; &amp;FBlocks, const Matrix &amp;E, const Matrix3 &amp;P, const Vector &amp;b, const SharedDiagonal &amp;model=SharedDiagonal())</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::JacobianFactorQR</name>
    <filename>a04023.html</filename>
    <templarg>D</templarg>
    <templarg>ZDim</templarg>
    <base>gtsam::RegularJacobianFactor</base>
    <member kind="function">
      <type></type>
      <name>JacobianFactorQR</name>
      <anchorfile>a04023.html</anchorfile>
      <anchor>a6acdcc2e3a964795a0438cdb3ea94b1d</anchor>
      <arglist>(const KeyVector &amp;keys, const std::vector&lt; MatrixZD, Eigen::aligned_allocator&lt; MatrixZD &gt; &gt; &amp;FBlocks, const Matrix &amp;E, const Matrix3 &amp;P, const Vector &amp;b, const SharedDiagonal &amp;model=SharedDiagonal())</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::JacobianFactorSVD</name>
    <filename>a04027.html</filename>
    <templarg>D</templarg>
    <templarg>ZDim</templarg>
    <base>gtsam::RegularJacobianFactor</base>
    <member kind="function">
      <type></type>
      <name>JacobianFactorSVD</name>
      <anchorfile>a04027.html</anchorfile>
      <anchor>a551b1c04012573be8cb418c02ed77295</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>JacobianFactorSVD</name>
      <anchorfile>a04027.html</anchorfile>
      <anchor>a7631acc7207dd75097e22708237f3632</anchor>
      <arglist>(const KeyVector &amp;keys, const SharedDiagonal &amp;model=SharedDiagonal())</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>JacobianFactorSVD</name>
      <anchorfile>a04027.html</anchorfile>
      <anchor>a72d8f9bc4560c97915194f35f8c2025f</anchor>
      <arglist>(const KeyVector &amp;keys, const std::vector&lt; MatrixZD, Eigen::aligned_allocator&lt; MatrixZD &gt; &gt; &amp;Fblocks, const Matrix &amp;Enull, const Vector &amp;b, const SharedDiagonal &amp;model=SharedDiagonal())</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::JointMarginal</name>
    <filename>a03715.html</filename>
    <member kind="function">
      <type></type>
      <name>JointMarginal</name>
      <anchorfile>a03715.html</anchorfile>
      <anchor>ab2fcf64154122a05a99c0d7c29611d34</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Matrix</type>
      <name>operator()</name>
      <anchorfile>a03715.html</anchorfile>
      <anchor>a6a6394311df16f326cab72ef545cbd9c</anchor>
      <arglist>(Key iVariable, Key jVariable) const</arglist>
    </member>
    <member kind="function">
      <type>Matrix</type>
      <name>at</name>
      <anchorfile>a03715.html</anchorfile>
      <anchor>a31082f007860b235520dfe7e427d7c88</anchor>
      <arglist>(Key iVariable, Key jVariable) const</arglist>
    </member>
    <member kind="function">
      <type>Matrix</type>
      <name>fullMatrix</name>
      <anchorfile>a03715.html</anchorfile>
      <anchor>a5faff6a6fe223f246b99c727fcb59e8a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>a03715.html</anchorfile>
      <anchor>ae436258b48812bdea2492f505a8d66c2</anchor>
      <arglist>(const std::string &amp;s=&quot;&quot;, const KeyFormatter &amp;formatter=DefaultKeyFormatter) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::JunctionTree</name>
    <filename>a03011.html</filename>
    <templarg>BAYESTREE</templarg>
    <templarg>GRAPH</templarg>
    <base>gtsam::EliminatableClusterTree</base>
    <member kind="function" protection="protected" static="yes">
      <type>static This</type>
      <name>FromEliminationTree</name>
      <anchorfile>a03011.html</anchorfile>
      <anchor>a0a0aed924d0fb7d666de293d7e8611d1</anchor>
      <arglist>(const ETREE &amp;eliminationTree)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>JunctionTree</name>
      <anchorfile>a03011.html</anchorfile>
      <anchor>a5812db967ae1a284a243c5a695656d52</anchor>
      <arglist>(const EliminationTree&lt; ETREE_BAYESNET, ETREE_GRAPH &gt; &amp;eliminationTree)</arglist>
    </member>
    <member kind="typedef">
      <type>JunctionTree&lt; BAYESTREE, GRAPH &gt;</type>
      <name>This</name>
      <anchorfile>a03011.html</anchorfile>
      <anchor>a5cd5f2112feb82893591bc85c5608dfc</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; This &gt;</type>
      <name>shared_ptr</name>
      <anchorfile>a03011.html</anchorfile>
      <anchor>acf4f22ad215c4df3d6f76cc82189a205</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>EliminatableClusterTree&lt; BAYESTREE, GRAPH &gt;</type>
      <name>Base</name>
      <anchorfile>a03011.html</anchorfile>
      <anchor>ab2fa0727164979796294c2231971bfb4</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>JunctionTree&lt; DiscreteBayesTree, DiscreteFactorGraph &gt;</name>
    <filename>a03011.html</filename>
    <base>EliminatableClusterTree&lt; DiscreteBayesTree, DiscreteFactorGraph &gt;</base>
    <member kind="function" protection="protected" static="yes">
      <type>static This</type>
      <name>FromEliminationTree</name>
      <anchorfile>a03011.html</anchorfile>
      <anchor>a0a0aed924d0fb7d666de293d7e8611d1</anchor>
      <arglist>(const ETREE &amp;eliminationTree)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>JunctionTree</name>
      <anchorfile>a03011.html</anchorfile>
      <anchor>a5812db967ae1a284a243c5a695656d52</anchor>
      <arglist>(const EliminationTree&lt; ETREE_BAYESNET, ETREE_GRAPH &gt; &amp;eliminationTree)</arglist>
    </member>
    <member kind="typedef">
      <type>JunctionTree&lt; DiscreteBayesTree, DiscreteFactorGraph &gt;</type>
      <name>This</name>
      <anchorfile>a03011.html</anchorfile>
      <anchor>a5cd5f2112feb82893591bc85c5608dfc</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; This &gt;</type>
      <name>shared_ptr</name>
      <anchorfile>a03011.html</anchorfile>
      <anchor>acf4f22ad215c4df3d6f76cc82189a205</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>EliminatableClusterTree&lt; DiscreteBayesTree, DiscreteFactorGraph &gt;</type>
      <name>Base</name>
      <anchorfile>a03011.html</anchorfile>
      <anchor>ab2fa0727164979796294c2231971bfb4</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>JunctionTree&lt; GaussianBayesTree, GaussianFactorGraph &gt;</name>
    <filename>a03011.html</filename>
    <base>EliminatableClusterTree&lt; GaussianBayesTree, GaussianFactorGraph &gt;</base>
    <member kind="function" protection="protected" static="yes">
      <type>static This</type>
      <name>FromEliminationTree</name>
      <anchorfile>a03011.html</anchorfile>
      <anchor>a0a0aed924d0fb7d666de293d7e8611d1</anchor>
      <arglist>(const ETREE &amp;eliminationTree)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>JunctionTree</name>
      <anchorfile>a03011.html</anchorfile>
      <anchor>a5812db967ae1a284a243c5a695656d52</anchor>
      <arglist>(const EliminationTree&lt; ETREE_BAYESNET, ETREE_GRAPH &gt; &amp;eliminationTree)</arglist>
    </member>
    <member kind="typedef">
      <type>JunctionTree&lt; GaussianBayesTree, GaussianFactorGraph &gt;</type>
      <name>This</name>
      <anchorfile>a03011.html</anchorfile>
      <anchor>a5cd5f2112feb82893591bc85c5608dfc</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; This &gt;</type>
      <name>shared_ptr</name>
      <anchorfile>a03011.html</anchorfile>
      <anchor>acf4f22ad215c4df3d6f76cc82189a205</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>EliminatableClusterTree&lt; GaussianBayesTree, GaussianFactorGraph &gt;</type>
      <name>Base</name>
      <anchorfile>a03011.html</anchorfile>
      <anchor>ab2fa0727164979796294c2231971bfb4</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>JunctionTree&lt; ISAM2BayesTree, GaussianFactorGraph &gt;</name>
    <filename>a03011.html</filename>
    <base>EliminatableClusterTree&lt; ISAM2BayesTree, GaussianFactorGraph &gt;</base>
    <member kind="function" protection="protected" static="yes">
      <type>static This</type>
      <name>FromEliminationTree</name>
      <anchorfile>a03011.html</anchorfile>
      <anchor>a0a0aed924d0fb7d666de293d7e8611d1</anchor>
      <arglist>(const ETREE &amp;eliminationTree)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>JunctionTree</name>
      <anchorfile>a03011.html</anchorfile>
      <anchor>a5812db967ae1a284a243c5a695656d52</anchor>
      <arglist>(const EliminationTree&lt; ETREE_BAYESNET, ETREE_GRAPH &gt; &amp;eliminationTree)</arglist>
    </member>
    <member kind="typedef">
      <type>JunctionTree&lt; ISAM2BayesTree, GaussianFactorGraph &gt;</type>
      <name>This</name>
      <anchorfile>a03011.html</anchorfile>
      <anchor>a5cd5f2112feb82893591bc85c5608dfc</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; This &gt;</type>
      <name>shared_ptr</name>
      <anchorfile>a03011.html</anchorfile>
      <anchor>acf4f22ad215c4df3d6f76cc82189a205</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>EliminatableClusterTree&lt; ISAM2BayesTree, GaussianFactorGraph &gt;</type>
      <name>Base</name>
      <anchorfile>a03011.html</anchorfile>
      <anchor>ab2fa0727164979796294c2231971bfb4</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>JunctionTree&lt; SymbolicBayesTree, SymbolicFactorGraph &gt;</name>
    <filename>a03011.html</filename>
    <base>EliminatableClusterTree&lt; SymbolicBayesTree, SymbolicFactorGraph &gt;</base>
    <member kind="function" protection="protected" static="yes">
      <type>static This</type>
      <name>FromEliminationTree</name>
      <anchorfile>a03011.html</anchorfile>
      <anchor>a0a0aed924d0fb7d666de293d7e8611d1</anchor>
      <arglist>(const ETREE &amp;eliminationTree)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>JunctionTree</name>
      <anchorfile>a03011.html</anchorfile>
      <anchor>a5812db967ae1a284a243c5a695656d52</anchor>
      <arglist>(const EliminationTree&lt; ETREE_BAYESNET, ETREE_GRAPH &gt; &amp;eliminationTree)</arglist>
    </member>
    <member kind="typedef">
      <type>JunctionTree&lt; SymbolicBayesTree, SymbolicFactorGraph &gt;</type>
      <name>This</name>
      <anchorfile>a03011.html</anchorfile>
      <anchor>a5cd5f2112feb82893591bc85c5608dfc</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; This &gt;</type>
      <name>shared_ptr</name>
      <anchorfile>a03011.html</anchorfile>
      <anchor>acf4f22ad215c4df3d6f76cc82189a205</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>EliminatableClusterTree&lt; SymbolicBayesTree, SymbolicFactorGraph &gt;</type>
      <name>Base</name>
      <anchorfile>a03011.html</anchorfile>
      <anchor>ab2fa0727164979796294c2231971bfb4</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::KalmanFilter</name>
    <filename>a03191.html</filename>
    <member kind="function">
      <type>State</type>
      <name>init</name>
      <anchorfile>a03191.html</anchorfile>
      <anchor>acb9daee749e2ef26748b521997f07e5c</anchor>
      <arglist>(const Vector &amp;x0, const SharedDiagonal &amp;P0) const</arglist>
    </member>
    <member kind="function">
      <type>State</type>
      <name>init</name>
      <anchorfile>a03191.html</anchorfile>
      <anchor>a90e5b9b28e841532e440df526dae5724</anchor>
      <arglist>(const Vector &amp;x0, const Matrix &amp;P0) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>a03191.html</anchorfile>
      <anchor>ac986e5f05f8b7f238263aabc5531bad2</anchor>
      <arglist>(const std::string &amp;s=&quot;&quot;) const</arglist>
    </member>
    <member kind="function">
      <type>State</type>
      <name>predict</name>
      <anchorfile>a03191.html</anchorfile>
      <anchor>ab13a9d493e5a274d55930633f3465e9e</anchor>
      <arglist>(const State &amp;p, const Matrix &amp;F, const Matrix &amp;B, const Vector &amp;u, const SharedDiagonal &amp;modelQ) const</arglist>
    </member>
    <member kind="function">
      <type>State</type>
      <name>predict2</name>
      <anchorfile>a03191.html</anchorfile>
      <anchor>acd841a23216a6a1751e72c22fca8481c</anchor>
      <arglist>(const State &amp;p, const Matrix &amp;A0, const Matrix &amp;A1, const Vector &amp;b, const SharedDiagonal &amp;model) const</arglist>
    </member>
    <member kind="function">
      <type>State</type>
      <name>update</name>
      <anchorfile>a03191.html</anchorfile>
      <anchor>a7cfd02544165e7a80eee93ab9e04fb57</anchor>
      <arglist>(const State &amp;p, const Matrix &amp;H, const Vector &amp;z, const SharedDiagonal &amp;model) const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Key</type>
      <name>step</name>
      <anchorfile>a03191.html</anchorfile>
      <anchor>a511b92f76e4d965f50f88a805af12ff8</anchor>
      <arglist>(const State &amp;p)</arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>Factorization</name>
      <anchorfile>a03191.html</anchorfile>
      <anchor>a0e169084c003be746ef37e980b8266a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GaussianDensity::shared_ptr</type>
      <name>State</name>
      <anchorfile>a03191.html</anchorfile>
      <anchor>a943f07d46bc01eac1070cd08fc193cc1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::KeyInfo</name>
    <filename>a03179.html</filename>
    <member kind="function">
      <type></type>
      <name>KeyInfo</name>
      <anchorfile>a03179.html</anchorfile>
      <anchor>af566da66fd34a7a1b378035f35561867</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>KeyInfo</name>
      <anchorfile>a03179.html</anchorfile>
      <anchor>a38579ec81944e0423a2b54457b8f0114</anchor>
      <arglist>(const GaussianFactorGraph &amp;fg)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>KeyInfo</name>
      <anchorfile>a03179.html</anchorfile>
      <anchor>a48cb80c1c64a52be1cefd24b17de65c9</anchor>
      <arglist>(const GaussianFactorGraph &amp;fg, const Ordering &amp;ordering)</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>numCols</name>
      <anchorfile>a03179.html</anchorfile>
      <anchor>aa7d0169c6f78e236980fa6d60733fb73</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Ordering &amp;</type>
      <name>ordering</name>
      <anchorfile>a03179.html</anchorfile>
      <anchor>a2cb1c219c36237daba0e0acd280357ec</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; size_t &gt;</type>
      <name>colSpec</name>
      <anchorfile>a03179.html</anchorfile>
      <anchor>a3b6bf0c3234fb34484fc1d1dd7f0de75</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>VectorValues</type>
      <name>x0</name>
      <anchorfile>a03179.html</anchorfile>
      <anchor>a25347b9393790061a70ce7bd2c89b650</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Vector</type>
      <name>x0vector</name>
      <anchorfile>a03179.html</anchorfile>
      <anchor>a2044f33e89c81087afe7bccef2b3d650</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>gtsam::KeyInfoEntry</name>
    <filename>a03175.html</filename>
  </compound>
  <compound kind="struct">
    <name>gtsam::Values::KeyValuePair</name>
    <filename>a03875.html</filename>
    <member kind="variable">
      <type>const Key</type>
      <name>key</name>
      <anchorfile>a03875.html</anchorfile>
      <anchor>ae8240622f321ec9a81a9c41679ca530b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Value &amp;</type>
      <name>value</name>
      <anchorfile>a03875.html</anchorfile>
      <anchor>a512e61d8416f2210a0c41a0a96232b54</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::noiseModel::mEstimator::L2WithDeadZone</name>
    <filename>a03279.html</filename>
    <base>gtsam::noiseModel::mEstimator::Base</base>
    <member kind="friend">
      <type>friend class</type>
      <name>boost::serialization::access</name>
      <anchorfile>a03279.html</anchorfile>
      <anchor>ac98d07dd8f7b70e16ccb9a01abf56b9c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::LabeledSymbol</name>
    <filename>a03019.html</filename>
    <member kind="function">
      <type></type>
      <name>LabeledSymbol</name>
      <anchorfile>a03019.html</anchorfile>
      <anchor>a26423032387e3e0615c2f168a3ad0389</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>LabeledSymbol</name>
      <anchorfile>a03019.html</anchorfile>
      <anchor>aa3fb596d35048a62db4081d6805a2788</anchor>
      <arglist>(const LabeledSymbol &amp;key)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>LabeledSymbol</name>
      <anchorfile>a03019.html</anchorfile>
      <anchor>a67e7b55ea34de161202e6cc27ede4d3a</anchor>
      <arglist>(unsigned char c, unsigned char label, std::uint64_t j)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>LabeledSymbol</name>
      <anchorfile>a03019.html</anchorfile>
      <anchor>a6adf25100691a1e4d85a52984d97b890</anchor>
      <arglist>(gtsam::Key key)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator gtsam::Key</name>
      <anchorfile>a03019.html</anchorfile>
      <anchor>afe4e15a83b906dd5b4dc92fd9e9fda91</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>gtsam::Key</type>
      <name>key</name>
      <anchorfile>a03019.html</anchorfile>
      <anchor>aab3ca67a6a5cf4956873157e03b98a40</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>unsigned char</type>
      <name>label</name>
      <anchorfile>a03019.html</anchorfile>
      <anchor>ad222539e4fb96408cb54a19cdd736a5b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>unsigned char</type>
      <name>chr</name>
      <anchorfile>a03019.html</anchorfile>
      <anchor>a9b4c02257d2f21b0be48725cfe5fbe01</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>index</name>
      <anchorfile>a03019.html</anchorfile>
      <anchor>ac076b7b884539583308adb9e5116dc18</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator std::string</name>
      <anchorfile>a03019.html</anchorfile>
      <anchor>ae2acaada18ce4cf5328b7c7524f2566d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;</name>
      <anchorfile>a03019.html</anchorfile>
      <anchor>ab35881951614403c3bfb08cc117e488b</anchor>
      <arglist>(const LabeledSymbol &amp;comp) const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static boost::function&lt; bool(gtsam::Key)&gt;</type>
      <name>TypeTest</name>
      <anchorfile>a03019.html</anchorfile>
      <anchor>af9b0ed1dc2f238a2e2fbf848c2ffb115</anchor>
      <arglist>(unsigned char c)</arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>boost::serialization::access</name>
      <anchorfile>a03019.html</anchorfile>
      <anchor>ac98d07dd8f7b70e16ccb9a01abf56b9c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::DecisionTree::Leaf</name>
    <filename>a02351.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <base>gtsam::DecisionTree::Node</base>
    <member kind="function">
      <type></type>
      <name>Leaf</name>
      <anchorfile>a02351.html</anchorfile>
      <anchor>a97c108bf62752ef8d78b231358987bed</anchor>
      <arglist>(const Y &amp;constant)</arglist>
    </member>
    <member kind="function">
      <type>const Y &amp;</type>
      <name>constant</name>
      <anchorfile>a02351.html</anchorfile>
      <anchor>a0da52ea56916854bc69092787720dd04</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>sameLeaf</name>
      <anchorfile>a02351.html</anchorfile>
      <anchor>aa932de8633e776390a1a705e4094abe9</anchor>
      <arglist>(const Leaf &amp;q) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>sameLeaf</name>
      <anchorfile>a02351.html</anchorfile>
      <anchor>abf1f2dca1543ac1b78601cdc3425de39</anchor>
      <arglist>(const Node &amp;q) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>equals</name>
      <anchorfile>a02351.html</anchorfile>
      <anchor>a1f2913e71e2181e9c468da8cb98cb99f</anchor>
      <arglist>(const Node &amp;q, double tol) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>a02351.html</anchorfile>
      <anchor>ac7d30037c6d4f492ef4d33a5fe1361e5</anchor>
      <arglist>(const std::string &amp;s) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>dot</name>
      <anchorfile>a02351.html</anchorfile>
      <anchor>a2be1e1d0b9a9519b074bb3afee893993</anchor>
      <arglist>(std::ostream &amp;os, bool showZero) const</arglist>
    </member>
    <member kind="function">
      <type>const Y &amp;</type>
      <name>operator()</name>
      <anchorfile>a02351.html</anchorfile>
      <anchor>a96902728bbb763419398e503100a71a8</anchor>
      <arglist>(const Assignment&lt; L &gt; &amp;x) const</arglist>
    </member>
    <member kind="function">
      <type>NodePtr</type>
      <name>apply</name>
      <anchorfile>a02351.html</anchorfile>
      <anchor>a097946885255a8628c9055b2511f866c</anchor>
      <arglist>(const Unary &amp;op) const</arglist>
    </member>
    <member kind="function">
      <type>NodePtr</type>
      <name>choose</name>
      <anchorfile>a02351.html</anchorfile>
      <anchor>acd9ec7cf704371fa5e3f240b6051b784</anchor>
      <arglist>(const L &amp;label, size_t index) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::LevenbergMarquardtOptimizer</name>
    <filename>a03695.html</filename>
    <base>gtsam::NonlinearOptimizer</base>
    <member kind="function">
      <type></type>
      <name>LevenbergMarquardtOptimizer</name>
      <anchorfile>a03695.html</anchorfile>
      <anchor>afbc0d366428f3339505587ac0848e2f3</anchor>
      <arglist>(const NonlinearFactorGraph &amp;graph, const Values &amp;initialValues, const LevenbergMarquardtParams &amp;params=LevenbergMarquardtParams())</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>LevenbergMarquardtOptimizer</name>
      <anchorfile>a03695.html</anchorfile>
      <anchor>aa9fd26c5fea8ba07a0a5cbe08c5f2e6f</anchor>
      <arglist>(const NonlinearFactorGraph &amp;graph, const Values &amp;initialValues, const Ordering &amp;ordering, const LevenbergMarquardtParams &amp;params=LevenbergMarquardtParams())</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~LevenbergMarquardtOptimizer</name>
      <anchorfile>a03695.html</anchorfile>
      <anchor>ad3a1c3e2b30fefe2922bfbf5eef8bf4f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>lambda</name>
      <anchorfile>a03695.html</anchorfile>
      <anchor>a297f58837db566e305af2bbeb166a29a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getInnerIterations</name>
      <anchorfile>a03695.html</anchorfile>
      <anchor>afa4715456d87cc7a4aa33374f9f567c5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>a03695.html</anchorfile>
      <anchor>a899353dce14ec64bf389164011b58c72</anchor>
      <arglist>(const std::string &amp;str=&quot;&quot;) const</arglist>
    </member>
    <member kind="function">
      <type>GaussianFactorGraph::shared_ptr</type>
      <name>iterate</name>
      <anchorfile>a03695.html</anchorfile>
      <anchor>acdede5810712b3645ce2daecb874a8f9</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>const LevenbergMarquardtParams &amp;</type>
      <name>params</name>
      <anchorfile>a03695.html</anchorfile>
      <anchor>aa47fce71dda0b8c5e03a85f5369c2bfc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual GaussianFactorGraph::shared_ptr</type>
      <name>linearize</name>
      <anchorfile>a03695.html</anchorfile>
      <anchor>a057a2f55586c21863a382345375a13f4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>GaussianFactorGraph</type>
      <name>buildDampedSystem</name>
      <anchorfile>a03695.html</anchorfile>
      <anchor>a993dac110d6205c2566ec9c4cf22cb2c</anchor>
      <arglist>(const GaussianFactorGraph &amp;linear, const VectorValues &amp;sqrtHessianDiagonal) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>tryLambda</name>
      <anchorfile>a03695.html</anchorfile>
      <anchor>aedf9c658eb5e461dbfdee6d952970daa</anchor>
      <arglist>(const GaussianFactorGraph &amp;linear, const VectorValues &amp;sqrtHessianDiagonal)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>LevenbergMarquardtOptimizer</name>
      <anchorfile>a03695.html</anchorfile>
      <anchor>afbc0d366428f3339505587ac0848e2f3</anchor>
      <arglist>(const NonlinearFactorGraph &amp;graph, const Values &amp;initialValues, const LevenbergMarquardtParams &amp;params=LevenbergMarquardtParams())</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>LevenbergMarquardtOptimizer</name>
      <anchorfile>a03695.html</anchorfile>
      <anchor>aa9fd26c5fea8ba07a0a5cbe08c5f2e6f</anchor>
      <arglist>(const NonlinearFactorGraph &amp;graph, const Values &amp;initialValues, const Ordering &amp;ordering, const LevenbergMarquardtParams &amp;params=LevenbergMarquardtParams())</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~LevenbergMarquardtOptimizer</name>
      <anchorfile>a03695.html</anchorfile>
      <anchor>ad3a1c3e2b30fefe2922bfbf5eef8bf4f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>lambda</name>
      <anchorfile>a03695.html</anchorfile>
      <anchor>a297f58837db566e305af2bbeb166a29a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getInnerIterations</name>
      <anchorfile>a03695.html</anchorfile>
      <anchor>afa4715456d87cc7a4aa33374f9f567c5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>a03695.html</anchorfile>
      <anchor>a899353dce14ec64bf389164011b58c72</anchor>
      <arglist>(const std::string &amp;str=&quot;&quot;) const</arglist>
    </member>
    <member kind="function">
      <type>GaussianFactorGraph::shared_ptr</type>
      <name>iterate</name>
      <anchorfile>a03695.html</anchorfile>
      <anchor>acdede5810712b3645ce2daecb874a8f9</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>const LevenbergMarquardtParams &amp;</type>
      <name>params</name>
      <anchorfile>a03695.html</anchorfile>
      <anchor>aa47fce71dda0b8c5e03a85f5369c2bfc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual GaussianFactorGraph::shared_ptr</type>
      <name>linearize</name>
      <anchorfile>a03695.html</anchorfile>
      <anchor>a057a2f55586c21863a382345375a13f4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>GaussianFactorGraph</type>
      <name>buildDampedSystem</name>
      <anchorfile>a03695.html</anchorfile>
      <anchor>a993dac110d6205c2566ec9c4cf22cb2c</anchor>
      <arglist>(const GaussianFactorGraph &amp;linear, const VectorValues &amp;sqrtHessianDiagonal) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>tryLambda</name>
      <anchorfile>a03695.html</anchorfile>
      <anchor>aedf9c658eb5e461dbfdee6d952970daa</anchor>
      <arglist>(const GaussianFactorGraph &amp;linear, const VectorValues &amp;sqrtHessianDiagonal)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>const NonlinearOptimizerParams &amp;</type>
      <name>_params</name>
      <anchorfile>a03695.html</anchorfile>
      <anchor>adcbab356e60a01b4b7e088635bb794e9</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const LevenbergMarquardtParams</type>
      <name>params_</name>
      <anchorfile>a03695.html</anchorfile>
      <anchor>a81721702704bfbd35d14db2b1978f911</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::LevenbergMarquardtParams</name>
    <filename>a03699.html</filename>
    <base>gtsam::NonlinearOptimizerParams</base>
    <member kind="function">
      <type>boost::shared_ptr&lt; NonlinearOptimizerParams &gt;</type>
      <name>clone</name>
      <anchorfile>a03699.html</anchorfile>
      <anchor>a42d304e6e666fd9a08214006ed349888</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>boost::shared_ptr&lt; NonlinearOptimizerParams &gt;</type>
      <name>clone</name>
      <anchorfile>a03699.html</anchorfile>
      <anchor>a42d304e6e666fd9a08214006ed349888</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>lambdaInitial</name>
      <anchorfile>a03699.html</anchorfile>
      <anchor>a49aef82106661bcbd87299fa60209912</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>lambdaFactor</name>
      <anchorfile>a03699.html</anchorfile>
      <anchor>a0ff6f8698a3993eb6a2fe5720b5c45d6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>lambdaUpperBound</name>
      <anchorfile>a03699.html</anchorfile>
      <anchor>a465daecb791ab692aa14fe0405b64e36</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>lambdaLowerBound</name>
      <anchorfile>a03699.html</anchorfile>
      <anchor>aad53fd303fc59476683c27e942f63ae2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>VerbosityLM</type>
      <name>verbosityLM</name>
      <anchorfile>a03699.html</anchorfile>
      <anchor>afbde4b9a9a164eb9e3af824e0651686e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>minModelFidelity</name>
      <anchorfile>a03699.html</anchorfile>
      <anchor>aa6ab26143bf0ebbada2c325a88ca3348</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::string</type>
      <name>logFile</name>
      <anchorfile>a03699.html</anchorfile>
      <anchor>ae713aec0fbc945c84d7d18c966115674</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>diagonalDamping</name>
      <anchorfile>a03699.html</anchorfile>
      <anchor>ac5d85270de6828947a2d6e980a5c22a4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>useFixedLambdaFactor</name>
      <anchorfile>a03699.html</anchorfile>
      <anchor>ad003372fa93954c8f2c86fd3e413f3ae</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>minDiagonal</name>
      <anchorfile>a03699.html</anchorfile>
      <anchor>a23c5fa1bbf749c1997a7e685f0cc4d49</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>maxDiagonal</name>
      <anchorfile>a03699.html</anchorfile>
      <anchor>a4e94ad90d500f35181d23aa2461bf84d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>VerbosityLM</name>
      <anchorfile>a03699.html</anchorfile>
      <anchor>af2f0633976570cd713705bdb91598bfd</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>gtsam::lie_group_tag</name>
    <filename>a02083.html</filename>
    <base>gtsam::manifold_tag</base>
    <base>gtsam::group_tag</base>
  </compound>
  <compound kind="struct">
    <name>gtsam::LieGroup</name>
    <filename>a02079.html</filename>
    <templarg>Class</templarg>
    <templarg>N</templarg>
    <member kind="function">
      <type>Class</type>
      <name>expmap</name>
      <anchorfile>a02079.html</anchorfile>
      <anchor>aee395d766c6c8afb27a9bece5c42400e</anchor>
      <arglist>(const TangentVector &amp;v) const</arglist>
    </member>
    <member kind="function">
      <type>TangentVector</type>
      <name>logmap</name>
      <anchorfile>a02079.html</anchorfile>
      <anchor>a9a8ba0a0f7442929df460d79292134aa</anchor>
      <arglist>(const Class &amp;g) const</arglist>
    </member>
    <member kind="function">
      <type>Class</type>
      <name>expmap</name>
      <anchorfile>a02079.html</anchorfile>
      <anchor>a6e41bdf1904caef72ea3f014a0ddd802</anchor>
      <arglist>(const TangentVector &amp;v, ChartJacobian H1, ChartJacobian H2=boost::none) const</arglist>
    </member>
    <member kind="function">
      <type>TangentVector</type>
      <name>logmap</name>
      <anchorfile>a02079.html</anchorfile>
      <anchor>aa23724169652cc5d3eddd61bdb5863a8</anchor>
      <arglist>(const Class &amp;g, ChartJacobian H1, ChartJacobian H2=boost::none) const</arglist>
    </member>
    <member kind="function">
      <type>Class</type>
      <name>retract</name>
      <anchorfile>a02079.html</anchorfile>
      <anchor>adf52076de7615c335b4574f577a22b77</anchor>
      <arglist>(const TangentVector &amp;v) const</arglist>
    </member>
    <member kind="function">
      <type>TangentVector</type>
      <name>localCoordinates</name>
      <anchorfile>a02079.html</anchorfile>
      <anchor>a5380bfede1eb39fa9473824009a747a7</anchor>
      <arglist>(const Class &amp;g) const</arglist>
    </member>
    <member kind="function">
      <type>Class</type>
      <name>retract</name>
      <anchorfile>a02079.html</anchorfile>
      <anchor>abf5136443b24362863f0ad7473168641</anchor>
      <arglist>(const TangentVector &amp;v, ChartJacobian H1, ChartJacobian H2=boost::none) const</arglist>
    </member>
    <member kind="function">
      <type>TangentVector</type>
      <name>localCoordinates</name>
      <anchorfile>a02079.html</anchorfile>
      <anchor>a7c6ad50bc991512d6cf712ab9b0c28c1</anchor>
      <arglist>(const Class &amp;g, ChartJacobian H1, ChartJacobian H2=boost::none) const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Class</type>
      <name>Retract</name>
      <anchorfile>a02079.html</anchorfile>
      <anchor>af0dab5bebe52a8ccebe8ea8a1dbafd21</anchor>
      <arglist>(const TangentVector &amp;v)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static TangentVector</type>
      <name>LocalCoordinates</name>
      <anchorfile>a02079.html</anchorfile>
      <anchor>aaa535efd2e685eeb1f26e828d49d7819</anchor>
      <arglist>(const Class &amp;g)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Class</type>
      <name>Retract</name>
      <anchorfile>a02079.html</anchorfile>
      <anchor>a0a33185a535749337d9fe29fc15b6876</anchor>
      <arglist>(const TangentVector &amp;v, ChartJacobian H)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static TangentVector</type>
      <name>LocalCoordinates</name>
      <anchorfile>a02079.html</anchorfile>
      <anchor>ad01a6917a30ac38fa975ee70b8442568</anchor>
      <arglist>(const Class &amp;g, ChartJacobian H)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>gtsam::internal::LieGroup</name>
    <filename>a02091.html</filename>
    <templarg>Class</templarg>
    <base>gtsam::internal::LieGroupTraits</base>
    <base>Testable&lt; Class &gt;</base>
  </compound>
  <compound kind="class">
    <name>LieGroup&lt; Pose2 &gt;</name>
    <filename>a02091.html</filename>
    <base>LieGroupTraits&lt; Pose2 &gt;</base>
    <base>Testable&lt; Pose2 &gt;</base>
  </compound>
  <compound kind="class">
    <name>LieGroup&lt; Pose2, 3 &gt;</name>
    <filename>a02079.html</filename>
    <member kind="function">
      <type>Pose2</type>
      <name>expmap</name>
      <anchorfile>a02079.html</anchorfile>
      <anchor>aee395d766c6c8afb27a9bece5c42400e</anchor>
      <arglist>(const TangentVector &amp;v) const</arglist>
    </member>
    <member kind="function">
      <type>Pose2</type>
      <name>expmap</name>
      <anchorfile>a02079.html</anchorfile>
      <anchor>a6e41bdf1904caef72ea3f014a0ddd802</anchor>
      <arglist>(const TangentVector &amp;v, ChartJacobian H1, ChartJacobian H2=boost::none) const</arglist>
    </member>
    <member kind="function">
      <type>TangentVector</type>
      <name>logmap</name>
      <anchorfile>a02079.html</anchorfile>
      <anchor>a9a8ba0a0f7442929df460d79292134aa</anchor>
      <arglist>(const Pose2 &amp;g) const</arglist>
    </member>
    <member kind="function">
      <type>TangentVector</type>
      <name>logmap</name>
      <anchorfile>a02079.html</anchorfile>
      <anchor>aa23724169652cc5d3eddd61bdb5863a8</anchor>
      <arglist>(const Pose2 &amp;g, ChartJacobian H1, ChartJacobian H2=boost::none) const</arglist>
    </member>
    <member kind="function">
      <type>Pose2</type>
      <name>retract</name>
      <anchorfile>a02079.html</anchorfile>
      <anchor>adf52076de7615c335b4574f577a22b77</anchor>
      <arglist>(const TangentVector &amp;v) const</arglist>
    </member>
    <member kind="function">
      <type>Pose2</type>
      <name>retract</name>
      <anchorfile>a02079.html</anchorfile>
      <anchor>abf5136443b24362863f0ad7473168641</anchor>
      <arglist>(const TangentVector &amp;v, ChartJacobian H1, ChartJacobian H2=boost::none) const</arglist>
    </member>
    <member kind="function">
      <type>TangentVector</type>
      <name>localCoordinates</name>
      <anchorfile>a02079.html</anchorfile>
      <anchor>a5380bfede1eb39fa9473824009a747a7</anchor>
      <arglist>(const Pose2 &amp;g) const</arglist>
    </member>
    <member kind="function">
      <type>TangentVector</type>
      <name>localCoordinates</name>
      <anchorfile>a02079.html</anchorfile>
      <anchor>a7c6ad50bc991512d6cf712ab9b0c28c1</anchor>
      <arglist>(const Pose2 &amp;g, ChartJacobian H1, ChartJacobian H2=boost::none) const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Pose2</type>
      <name>Retract</name>
      <anchorfile>a02079.html</anchorfile>
      <anchor>af0dab5bebe52a8ccebe8ea8a1dbafd21</anchor>
      <arglist>(const TangentVector &amp;v)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Pose2</type>
      <name>Retract</name>
      <anchorfile>a02079.html</anchorfile>
      <anchor>a0a33185a535749337d9fe29fc15b6876</anchor>
      <arglist>(const TangentVector &amp;v, ChartJacobian H)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static TangentVector</type>
      <name>LocalCoordinates</name>
      <anchorfile>a02079.html</anchorfile>
      <anchor>aaa535efd2e685eeb1f26e828d49d7819</anchor>
      <arglist>(const Pose2 &amp;g)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static TangentVector</type>
      <name>LocalCoordinates</name>
      <anchorfile>a02079.html</anchorfile>
      <anchor>ad01a6917a30ac38fa975ee70b8442568</anchor>
      <arglist>(const Pose2 &amp;g, ChartJacobian H)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>LieGroup&lt; Pose3 &gt;</name>
    <filename>a02091.html</filename>
    <base>LieGroupTraits&lt; Pose3 &gt;</base>
    <base>Testable&lt; Pose3 &gt;</base>
  </compound>
  <compound kind="class">
    <name>LieGroup&lt; Pose3, 6 &gt;</name>
    <filename>a02079.html</filename>
    <member kind="function">
      <type>Pose3</type>
      <name>expmap</name>
      <anchorfile>a02079.html</anchorfile>
      <anchor>aee395d766c6c8afb27a9bece5c42400e</anchor>
      <arglist>(const TangentVector &amp;v) const</arglist>
    </member>
    <member kind="function">
      <type>Pose3</type>
      <name>expmap</name>
      <anchorfile>a02079.html</anchorfile>
      <anchor>a6e41bdf1904caef72ea3f014a0ddd802</anchor>
      <arglist>(const TangentVector &amp;v, ChartJacobian H1, ChartJacobian H2=boost::none) const</arglist>
    </member>
    <member kind="function">
      <type>TangentVector</type>
      <name>logmap</name>
      <anchorfile>a02079.html</anchorfile>
      <anchor>a9a8ba0a0f7442929df460d79292134aa</anchor>
      <arglist>(const Pose3 &amp;g) const</arglist>
    </member>
    <member kind="function">
      <type>TangentVector</type>
      <name>logmap</name>
      <anchorfile>a02079.html</anchorfile>
      <anchor>aa23724169652cc5d3eddd61bdb5863a8</anchor>
      <arglist>(const Pose3 &amp;g, ChartJacobian H1, ChartJacobian H2=boost::none) const</arglist>
    </member>
    <member kind="function">
      <type>Pose3</type>
      <name>retract</name>
      <anchorfile>a02079.html</anchorfile>
      <anchor>adf52076de7615c335b4574f577a22b77</anchor>
      <arglist>(const TangentVector &amp;v) const</arglist>
    </member>
    <member kind="function">
      <type>Pose3</type>
      <name>retract</name>
      <anchorfile>a02079.html</anchorfile>
      <anchor>abf5136443b24362863f0ad7473168641</anchor>
      <arglist>(const TangentVector &amp;v, ChartJacobian H1, ChartJacobian H2=boost::none) const</arglist>
    </member>
    <member kind="function">
      <type>TangentVector</type>
      <name>localCoordinates</name>
      <anchorfile>a02079.html</anchorfile>
      <anchor>a5380bfede1eb39fa9473824009a747a7</anchor>
      <arglist>(const Pose3 &amp;g) const</arglist>
    </member>
    <member kind="function">
      <type>TangentVector</type>
      <name>localCoordinates</name>
      <anchorfile>a02079.html</anchorfile>
      <anchor>a7c6ad50bc991512d6cf712ab9b0c28c1</anchor>
      <arglist>(const Pose3 &amp;g, ChartJacobian H1, ChartJacobian H2=boost::none) const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Pose3</type>
      <name>Retract</name>
      <anchorfile>a02079.html</anchorfile>
      <anchor>af0dab5bebe52a8ccebe8ea8a1dbafd21</anchor>
      <arglist>(const TangentVector &amp;v)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Pose3</type>
      <name>Retract</name>
      <anchorfile>a02079.html</anchorfile>
      <anchor>a0a33185a535749337d9fe29fc15b6876</anchor>
      <arglist>(const TangentVector &amp;v, ChartJacobian H)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static TangentVector</type>
      <name>LocalCoordinates</name>
      <anchorfile>a02079.html</anchorfile>
      <anchor>aaa535efd2e685eeb1f26e828d49d7819</anchor>
      <arglist>(const Pose3 &amp;g)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static TangentVector</type>
      <name>LocalCoordinates</name>
      <anchorfile>a02079.html</anchorfile>
      <anchor>ad01a6917a30ac38fa975ee70b8442568</anchor>
      <arglist>(const Pose3 &amp;g, ChartJacobian H)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>LieGroup&lt; PoseRTV &gt;</name>
    <filename>a02091.html</filename>
    <base>LieGroupTraits&lt; PoseRTV &gt;</base>
    <base>Testable&lt; PoseRTV &gt;</base>
  </compound>
  <compound kind="class">
    <name>LieGroup&lt; Rot2 &gt;</name>
    <filename>a02091.html</filename>
    <base>LieGroupTraits&lt; Rot2 &gt;</base>
    <base>Testable&lt; Rot2 &gt;</base>
  </compound>
  <compound kind="class">
    <name>LieGroup&lt; Rot2, 1 &gt;</name>
    <filename>a02079.html</filename>
    <member kind="function">
      <type>Rot2</type>
      <name>expmap</name>
      <anchorfile>a02079.html</anchorfile>
      <anchor>aee395d766c6c8afb27a9bece5c42400e</anchor>
      <arglist>(const TangentVector &amp;v) const</arglist>
    </member>
    <member kind="function">
      <type>Rot2</type>
      <name>expmap</name>
      <anchorfile>a02079.html</anchorfile>
      <anchor>a6e41bdf1904caef72ea3f014a0ddd802</anchor>
      <arglist>(const TangentVector &amp;v, ChartJacobian H1, ChartJacobian H2=boost::none) const</arglist>
    </member>
    <member kind="function">
      <type>TangentVector</type>
      <name>logmap</name>
      <anchorfile>a02079.html</anchorfile>
      <anchor>a9a8ba0a0f7442929df460d79292134aa</anchor>
      <arglist>(const Rot2 &amp;g) const</arglist>
    </member>
    <member kind="function">
      <type>TangentVector</type>
      <name>logmap</name>
      <anchorfile>a02079.html</anchorfile>
      <anchor>aa23724169652cc5d3eddd61bdb5863a8</anchor>
      <arglist>(const Rot2 &amp;g, ChartJacobian H1, ChartJacobian H2=boost::none) const</arglist>
    </member>
    <member kind="function">
      <type>Rot2</type>
      <name>retract</name>
      <anchorfile>a02079.html</anchorfile>
      <anchor>adf52076de7615c335b4574f577a22b77</anchor>
      <arglist>(const TangentVector &amp;v) const</arglist>
    </member>
    <member kind="function">
      <type>Rot2</type>
      <name>retract</name>
      <anchorfile>a02079.html</anchorfile>
      <anchor>abf5136443b24362863f0ad7473168641</anchor>
      <arglist>(const TangentVector &amp;v, ChartJacobian H1, ChartJacobian H2=boost::none) const</arglist>
    </member>
    <member kind="function">
      <type>TangentVector</type>
      <name>localCoordinates</name>
      <anchorfile>a02079.html</anchorfile>
      <anchor>a5380bfede1eb39fa9473824009a747a7</anchor>
      <arglist>(const Rot2 &amp;g) const</arglist>
    </member>
    <member kind="function">
      <type>TangentVector</type>
      <name>localCoordinates</name>
      <anchorfile>a02079.html</anchorfile>
      <anchor>a7c6ad50bc991512d6cf712ab9b0c28c1</anchor>
      <arglist>(const Rot2 &amp;g, ChartJacobian H1, ChartJacobian H2=boost::none) const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Rot2</type>
      <name>Retract</name>
      <anchorfile>a02079.html</anchorfile>
      <anchor>af0dab5bebe52a8ccebe8ea8a1dbafd21</anchor>
      <arglist>(const TangentVector &amp;v)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Rot2</type>
      <name>Retract</name>
      <anchorfile>a02079.html</anchorfile>
      <anchor>a0a33185a535749337d9fe29fc15b6876</anchor>
      <arglist>(const TangentVector &amp;v, ChartJacobian H)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static TangentVector</type>
      <name>LocalCoordinates</name>
      <anchorfile>a02079.html</anchorfile>
      <anchor>aaa535efd2e685eeb1f26e828d49d7819</anchor>
      <arglist>(const Rot2 &amp;g)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static TangentVector</type>
      <name>LocalCoordinates</name>
      <anchorfile>a02079.html</anchorfile>
      <anchor>ad01a6917a30ac38fa975ee70b8442568</anchor>
      <arglist>(const Rot2 &amp;g, ChartJacobian H)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>LieGroup&lt; Rot3 &gt;</name>
    <filename>a02091.html</filename>
    <base>LieGroupTraits&lt; Rot3 &gt;</base>
    <base>Testable&lt; Rot3 &gt;</base>
  </compound>
  <compound kind="class">
    <name>LieGroup&lt; Rot3, 3 &gt;</name>
    <filename>a02079.html</filename>
    <member kind="function">
      <type>Rot3</type>
      <name>expmap</name>
      <anchorfile>a02079.html</anchorfile>
      <anchor>aee395d766c6c8afb27a9bece5c42400e</anchor>
      <arglist>(const TangentVector &amp;v) const</arglist>
    </member>
    <member kind="function">
      <type>Rot3</type>
      <name>expmap</name>
      <anchorfile>a02079.html</anchorfile>
      <anchor>a6e41bdf1904caef72ea3f014a0ddd802</anchor>
      <arglist>(const TangentVector &amp;v, ChartJacobian H1, ChartJacobian H2=boost::none) const</arglist>
    </member>
    <member kind="function">
      <type>TangentVector</type>
      <name>logmap</name>
      <anchorfile>a02079.html</anchorfile>
      <anchor>a9a8ba0a0f7442929df460d79292134aa</anchor>
      <arglist>(const Rot3 &amp;g) const</arglist>
    </member>
    <member kind="function">
      <type>TangentVector</type>
      <name>logmap</name>
      <anchorfile>a02079.html</anchorfile>
      <anchor>aa23724169652cc5d3eddd61bdb5863a8</anchor>
      <arglist>(const Rot3 &amp;g, ChartJacobian H1, ChartJacobian H2=boost::none) const</arglist>
    </member>
    <member kind="function">
      <type>Rot3</type>
      <name>retract</name>
      <anchorfile>a02079.html</anchorfile>
      <anchor>adf52076de7615c335b4574f577a22b77</anchor>
      <arglist>(const TangentVector &amp;v) const</arglist>
    </member>
    <member kind="function">
      <type>Rot3</type>
      <name>retract</name>
      <anchorfile>a02079.html</anchorfile>
      <anchor>abf5136443b24362863f0ad7473168641</anchor>
      <arglist>(const TangentVector &amp;v, ChartJacobian H1, ChartJacobian H2=boost::none) const</arglist>
    </member>
    <member kind="function">
      <type>TangentVector</type>
      <name>localCoordinates</name>
      <anchorfile>a02079.html</anchorfile>
      <anchor>a5380bfede1eb39fa9473824009a747a7</anchor>
      <arglist>(const Rot3 &amp;g) const</arglist>
    </member>
    <member kind="function">
      <type>TangentVector</type>
      <name>localCoordinates</name>
      <anchorfile>a02079.html</anchorfile>
      <anchor>a7c6ad50bc991512d6cf712ab9b0c28c1</anchor>
      <arglist>(const Rot3 &amp;g, ChartJacobian H1, ChartJacobian H2=boost::none) const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Rot3</type>
      <name>Retract</name>
      <anchorfile>a02079.html</anchorfile>
      <anchor>af0dab5bebe52a8ccebe8ea8a1dbafd21</anchor>
      <arglist>(const TangentVector &amp;v)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Rot3</type>
      <name>Retract</name>
      <anchorfile>a02079.html</anchorfile>
      <anchor>a0a33185a535749337d9fe29fc15b6876</anchor>
      <arglist>(const TangentVector &amp;v, ChartJacobian H)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static TangentVector</type>
      <name>LocalCoordinates</name>
      <anchorfile>a02079.html</anchorfile>
      <anchor>aaa535efd2e685eeb1f26e828d49d7819</anchor>
      <arglist>(const Rot3 &amp;g)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static TangentVector</type>
      <name>LocalCoordinates</name>
      <anchorfile>a02079.html</anchorfile>
      <anchor>ad01a6917a30ac38fa975ee70b8442568</anchor>
      <arglist>(const Rot3 &amp;g, ChartJacobian H)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>LieGroup&lt; SO3 &gt;</name>
    <filename>a02091.html</filename>
    <base>LieGroupTraits&lt; SO3 &gt;</base>
    <base>Testable&lt; SO3 &gt;</base>
  </compound>
  <compound kind="class">
    <name>LieGroup&lt; SO3, 3 &gt;</name>
    <filename>a02079.html</filename>
    <member kind="function">
      <type>SO3</type>
      <name>expmap</name>
      <anchorfile>a02079.html</anchorfile>
      <anchor>aee395d766c6c8afb27a9bece5c42400e</anchor>
      <arglist>(const TangentVector &amp;v) const</arglist>
    </member>
    <member kind="function">
      <type>SO3</type>
      <name>expmap</name>
      <anchorfile>a02079.html</anchorfile>
      <anchor>a6e41bdf1904caef72ea3f014a0ddd802</anchor>
      <arglist>(const TangentVector &amp;v, ChartJacobian H1, ChartJacobian H2=boost::none) const</arglist>
    </member>
    <member kind="function">
      <type>TangentVector</type>
      <name>logmap</name>
      <anchorfile>a02079.html</anchorfile>
      <anchor>a9a8ba0a0f7442929df460d79292134aa</anchor>
      <arglist>(const SO3 &amp;g) const</arglist>
    </member>
    <member kind="function">
      <type>TangentVector</type>
      <name>logmap</name>
      <anchorfile>a02079.html</anchorfile>
      <anchor>aa23724169652cc5d3eddd61bdb5863a8</anchor>
      <arglist>(const SO3 &amp;g, ChartJacobian H1, ChartJacobian H2=boost::none) const</arglist>
    </member>
    <member kind="function">
      <type>SO3</type>
      <name>retract</name>
      <anchorfile>a02079.html</anchorfile>
      <anchor>adf52076de7615c335b4574f577a22b77</anchor>
      <arglist>(const TangentVector &amp;v) const</arglist>
    </member>
    <member kind="function">
      <type>SO3</type>
      <name>retract</name>
      <anchorfile>a02079.html</anchorfile>
      <anchor>abf5136443b24362863f0ad7473168641</anchor>
      <arglist>(const TangentVector &amp;v, ChartJacobian H1, ChartJacobian H2=boost::none) const</arglist>
    </member>
    <member kind="function">
      <type>TangentVector</type>
      <name>localCoordinates</name>
      <anchorfile>a02079.html</anchorfile>
      <anchor>a5380bfede1eb39fa9473824009a747a7</anchor>
      <arglist>(const SO3 &amp;g) const</arglist>
    </member>
    <member kind="function">
      <type>TangentVector</type>
      <name>localCoordinates</name>
      <anchorfile>a02079.html</anchorfile>
      <anchor>a7c6ad50bc991512d6cf712ab9b0c28c1</anchor>
      <arglist>(const SO3 &amp;g, ChartJacobian H1, ChartJacobian H2=boost::none) const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static SO3</type>
      <name>Retract</name>
      <anchorfile>a02079.html</anchorfile>
      <anchor>af0dab5bebe52a8ccebe8ea8a1dbafd21</anchor>
      <arglist>(const TangentVector &amp;v)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static SO3</type>
      <name>Retract</name>
      <anchorfile>a02079.html</anchorfile>
      <anchor>a0a33185a535749337d9fe29fc15b6876</anchor>
      <arglist>(const TangentVector &amp;v, ChartJacobian H)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static TangentVector</type>
      <name>LocalCoordinates</name>
      <anchorfile>a02079.html</anchorfile>
      <anchor>aaa535efd2e685eeb1f26e828d49d7819</anchor>
      <arglist>(const SO3 &amp;g)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static TangentVector</type>
      <name>LocalCoordinates</name>
      <anchorfile>a02079.html</anchorfile>
      <anchor>ad01a6917a30ac38fa975ee70b8442568</anchor>
      <arglist>(const SO3 &amp;g, ChartJacobian H)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>gtsam::internal::LieGroupTraits</name>
    <filename>a02087.html</filename>
    <templarg>Class</templarg>
  </compound>
  <compound kind="class">
    <name>LieGroupTraits&lt; Pose2 &gt;</name>
    <filename>a02087.html</filename>
  </compound>
  <compound kind="class">
    <name>LieGroupTraits&lt; Pose3 &gt;</name>
    <filename>a02087.html</filename>
  </compound>
  <compound kind="class">
    <name>LieGroupTraits&lt; PoseRTV &gt;</name>
    <filename>a02087.html</filename>
  </compound>
  <compound kind="class">
    <name>LieGroupTraits&lt; ProductLieGroup&lt; G, H &gt; &gt;</name>
    <filename>a02087.html</filename>
  </compound>
  <compound kind="class">
    <name>LieGroupTraits&lt; Rot2 &gt;</name>
    <filename>a02087.html</filename>
  </compound>
  <compound kind="class">
    <name>LieGroupTraits&lt; Rot3 &gt;</name>
    <filename>a02087.html</filename>
  </compound>
  <compound kind="class">
    <name>LieGroupTraits&lt; SO3 &gt;</name>
    <filename>a02087.html</filename>
  </compound>
  <compound kind="class">
    <name>gtsam::LinearContainerFactor</name>
    <filename>a03703.html</filename>
    <base>gtsam::NonlinearFactor</base>
    <member kind="function">
      <type></type>
      <name>LinearContainerFactor</name>
      <anchorfile>a03703.html</anchorfile>
      <anchor>a3df136440d82f7ee96f45f5a0bfe8d9a</anchor>
      <arglist>(const JacobianFactor &amp;factor, const Values &amp;linearizationPoint=Values())</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>LinearContainerFactor</name>
      <anchorfile>a03703.html</anchorfile>
      <anchor>ade7ae78a7f514eafa8f0b95b4ec8192c</anchor>
      <arglist>(const HessianFactor &amp;factor, const Values &amp;linearizationPoint=Values())</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>LinearContainerFactor</name>
      <anchorfile>a03703.html</anchorfile>
      <anchor>a3b9d025a1624a404f8ed8dff8fd03c19</anchor>
      <arglist>(const GaussianFactor::shared_ptr &amp;factor, const Values &amp;linearizationPoint=Values())</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>a03703.html</anchorfile>
      <anchor>aa48434b0b9383f58d2989b6e32854777</anchor>
      <arglist>(const std::string &amp;s=&quot;&quot;, const KeyFormatter &amp;keyFormatter=gtsam::DefaultKeyFormatter) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>equals</name>
      <anchorfile>a03703.html</anchorfile>
      <anchor>a24ad91cfd02087b8366d4510a84a8318</anchor>
      <arglist>(const NonlinearFactor &amp;f, double tol=1e-9) const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>error</name>
      <anchorfile>a03703.html</anchorfile>
      <anchor>a4e200012aabe0b7c00b633c3c00d1442</anchor>
      <arglist>(const Values &amp;c) const</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>dim</name>
      <anchorfile>a03703.html</anchorfile>
      <anchor>ab4193463e0e6259d845bb5e451ca44e2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const boost::optional&lt; Values &gt; &amp;</type>
      <name>linearizationPoint</name>
      <anchorfile>a03703.html</anchorfile>
      <anchor>a2f3c17b58cde97b2964968aa35cb64c8</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>GaussianFactor::shared_ptr</type>
      <name>linearize</name>
      <anchorfile>a03703.html</anchorfile>
      <anchor>afe87cc89e294c56717cbbe3c2db178e6</anchor>
      <arglist>(const Values &amp;c) const</arglist>
    </member>
    <member kind="function">
      <type>GaussianFactor::shared_ptr</type>
      <name>negateToGaussian</name>
      <anchorfile>a03703.html</anchorfile>
      <anchor>a7c207d0c0a1625dbe0bb8bc32a017a31</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>NonlinearFactor::shared_ptr</type>
      <name>negateToNonlinear</name>
      <anchorfile>a03703.html</anchorfile>
      <anchor>aa36d3afe29adc8d20590f23e3a8df7c8</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>NonlinearFactor::shared_ptr</type>
      <name>clone</name>
      <anchorfile>a03703.html</anchorfile>
      <anchor>a0bd1cc464f43067daa0b26e5a0494524</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isJacobian</name>
      <anchorfile>a03703.html</anchorfile>
      <anchor>a9aea6bbcd5160699b755aac5d65e4f79</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>boost::shared_ptr&lt; JacobianFactor &gt;</type>
      <name>toJacobian</name>
      <anchorfile>a03703.html</anchorfile>
      <anchor>a7dd10105bea727ca5a0b846b749ba900</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>boost::shared_ptr&lt; HessianFactor &gt;</type>
      <name>toHessian</name>
      <anchorfile>a03703.html</anchorfile>
      <anchor>a011841322e848555d848bf0fd0346f4b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static NonlinearFactorGraph</type>
      <name>ConvertLinearGraph</name>
      <anchorfile>a03703.html</anchorfile>
      <anchor>af9fdf12a0a8775f4deed5250bdd22657</anchor>
      <arglist>(const GaussianFactorGraph &amp;linear_graph, const Values &amp;linearizationPoint=Values())</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>LinearContainerFactor</name>
      <anchorfile>a03703.html</anchorfile>
      <anchor>a0a29b56bbe991b4e0ee8b4205b5a1b42</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>LinearContainerFactor</name>
      <anchorfile>a03703.html</anchorfile>
      <anchor>a513eab0403b8af02730e086fbd7a2eb5</anchor>
      <arglist>(const GaussianFactor::shared_ptr &amp;factor, const boost::optional&lt; Values &gt; &amp;linearizationPoint)</arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>boost::serialization::access</name>
      <anchorfile>a03703.html</anchorfile>
      <anchor>ac98d07dd8f7b70e16ccb9a01abf56b9c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::LinearCost</name>
    <filename>a04275.html</filename>
    <base>gtsam::JacobianFactor</base>
    <member kind="function">
      <type></type>
      <name>LinearCost</name>
      <anchorfile>a04275.html</anchorfile>
      <anchor>a7f6582793cc44f94f357a26fa2c7ff77</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>LinearCost</name>
      <anchorfile>a04275.html</anchorfile>
      <anchor>abd196c0c083e3b69befd4dad31241cb8</anchor>
      <arglist>(const HessianFactor &amp;hf)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>LinearCost</name>
      <anchorfile>a04275.html</anchorfile>
      <anchor>abd74904bafc90a8f05c98bf146aa8b89</anchor>
      <arglist>(const JacobianFactor &amp;jf)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>LinearCost</name>
      <anchorfile>a04275.html</anchorfile>
      <anchor>a2f96566edf7dd337ec411582d7d53a84</anchor>
      <arglist>(Key i1, const RowVector &amp;A1)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>LinearCost</name>
      <anchorfile>a04275.html</anchorfile>
      <anchor>ad05786a7a5a62430f995ddc445c426ec</anchor>
      <arglist>(Key i1, const RowVector &amp;A1, Key i2, const RowVector &amp;A2, double b)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>LinearCost</name>
      <anchorfile>a04275.html</anchorfile>
      <anchor>a38aa6f84e94a1fe51519e5ad2a36e7e8</anchor>
      <arglist>(Key i1, const RowVector &amp;A1, Key i2, const RowVector &amp;A2, Key i3, const RowVector &amp;A3)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>LinearCost</name>
      <anchorfile>a04275.html</anchorfile>
      <anchor>ab5eff4ab861d335173f328a032d16d3d</anchor>
      <arglist>(const TERMS &amp;terms)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~LinearCost</name>
      <anchorfile>a04275.html</anchorfile>
      <anchor>a39ac9c090d97d7c523e3b9aac3546aea</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>equals</name>
      <anchorfile>a04275.html</anchorfile>
      <anchor>a5e2b96ad14602a06f6757b7b1724d71c</anchor>
      <arglist>(const GaussianFactor &amp;lf, double tol=1e-9) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>print</name>
      <anchorfile>a04275.html</anchorfile>
      <anchor>ab3ea753a94d66b4440b87fca2574f0dd</anchor>
      <arglist>(const std::string &amp;s=&quot;&quot;, const KeyFormatter &amp;formatter=DefaultKeyFormatter) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual GaussianFactor::shared_ptr</type>
      <name>clone</name>
      <anchorfile>a04275.html</anchorfile>
      <anchor>a99c7c00a6d7e241b1bc3fd81fc866f23</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Vector</type>
      <name>error_vector</name>
      <anchorfile>a04275.html</anchorfile>
      <anchor>a5bcc1438786e3d909fad4b030d0d247e</anchor>
      <arglist>(const VectorValues &amp;c) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>error</name>
      <anchorfile>a04275.html</anchorfile>
      <anchor>ab3520a3855d25ac50182dd9f6d0a5165</anchor>
      <arglist>(const VectorValues &amp;c) const</arglist>
    </member>
    <member kind="typedef">
      <type>LinearCost</type>
      <name>This</name>
      <anchorfile>a04275.html</anchorfile>
      <anchor>a880663d1c0a5d36d9ce71dfda5daa79f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>JacobianFactor</type>
      <name>Base</name>
      <anchorfile>a04275.html</anchorfile>
      <anchor>a448b4fe53cdcfe9653d39efc3f324a38</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; This &gt;</type>
      <name>shared_ptr</name>
      <anchorfile>a04275.html</anchorfile>
      <anchor>a36fb8e2177a1d834b6f75a800424b26e</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::LinearEquality</name>
    <filename>a04283.html</filename>
    <base>gtsam::JacobianFactor</base>
    <member kind="function">
      <type></type>
      <name>LinearEquality</name>
      <anchorfile>a04283.html</anchorfile>
      <anchor>af14d3c561504798fd4e25f8fb01032a7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>LinearEquality</name>
      <anchorfile>a04283.html</anchorfile>
      <anchor>a98ad667a15c1ef60257970dcb967ea84</anchor>
      <arglist>(const JacobianFactor &amp;jf, Key dualKey)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>LinearEquality</name>
      <anchorfile>a04283.html</anchorfile>
      <anchor>a0f585fedf9e402552b731ed7ad3dfbdc</anchor>
      <arglist>(const HessianFactor &amp;hf)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>LinearEquality</name>
      <anchorfile>a04283.html</anchorfile>
      <anchor>afb481af43d1a78c70adda882bb9d0dcc</anchor>
      <arglist>(Key i1, const Matrix &amp;A1, const Vector &amp;b, Key dualKey)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>LinearEquality</name>
      <anchorfile>a04283.html</anchorfile>
      <anchor>ad5e5e4288be87ed2ce512440dd00b84c</anchor>
      <arglist>(Key i1, const Matrix &amp;A1, Key i2, const Matrix &amp;A2, const Vector &amp;b, Key dualKey)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>LinearEquality</name>
      <anchorfile>a04283.html</anchorfile>
      <anchor>aaf4f379ca3d74bf04c21a575df6edec4</anchor>
      <arglist>(Key i1, const Matrix &amp;A1, Key i2, const Matrix &amp;A2, Key i3, const Matrix &amp;A3, const Vector &amp;b, Key dualKey)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>LinearEquality</name>
      <anchorfile>a04283.html</anchorfile>
      <anchor>a7a3051fdde76faeb85dc3a455b8a2c34</anchor>
      <arglist>(const TERMS &amp;terms, const Vector &amp;b, Key dualKey)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~LinearEquality</name>
      <anchorfile>a04283.html</anchorfile>
      <anchor>ab5a8a9b35ae793a2446248d4d0b238fb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>equals</name>
      <anchorfile>a04283.html</anchorfile>
      <anchor>a2c473d0a597f00aef0c8aa27dc877a17</anchor>
      <arglist>(const GaussianFactor &amp;lf, double tol=1e-9) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>print</name>
      <anchorfile>a04283.html</anchorfile>
      <anchor>a2c4a1de4c89ce879619f50b0ffd551a3</anchor>
      <arglist>(const std::string &amp;s=&quot;&quot;, const KeyFormatter &amp;formatter=DefaultKeyFormatter) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual GaussianFactor::shared_ptr</type>
      <name>clone</name>
      <anchorfile>a04283.html</anchorfile>
      <anchor>afe4f3ef542bb1b0dcad1aa896de2030b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Key</type>
      <name>dualKey</name>
      <anchorfile>a04283.html</anchorfile>
      <anchor>a0bddeadfb86e4525f1040d39f1e90f75</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>active</name>
      <anchorfile>a04283.html</anchorfile>
      <anchor>a4df80bba11ef8fc55572aa01583aba16</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Vector</type>
      <name>error_vector</name>
      <anchorfile>a04283.html</anchorfile>
      <anchor>a93a0228dd1a30f95d5e0a5eed073870b</anchor>
      <arglist>(const VectorValues &amp;c) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>error</name>
      <anchorfile>a04283.html</anchorfile>
      <anchor>a52bef9b10b7ad449f7c233eaeb408ad0</anchor>
      <arglist>(const VectorValues &amp;c) const</arglist>
    </member>
    <member kind="typedef">
      <type>LinearEquality</type>
      <name>This</name>
      <anchorfile>a04283.html</anchorfile>
      <anchor>aa21421cb759b6518ceeee14ebf24785c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>JacobianFactor</type>
      <name>Base</name>
      <anchorfile>a04283.html</anchorfile>
      <anchor>aebda5d7b3c18d7c10a9c4c0aa5a3f746</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; This &gt;</type>
      <name>shared_ptr</name>
      <anchorfile>a04283.html</anchorfile>
      <anchor>a7d6724ff3dafd9eddefe71eacb302a59</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::LinearInequality</name>
    <filename>a04291.html</filename>
    <base>gtsam::JacobianFactor</base>
    <member kind="function">
      <type></type>
      <name>LinearInequality</name>
      <anchorfile>a04291.html</anchorfile>
      <anchor>a318c4a6f8b83b5040b2ba8556f47447e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>LinearInequality</name>
      <anchorfile>a04291.html</anchorfile>
      <anchor>ac0336c52983b0df9715badc9131dc196</anchor>
      <arglist>(const HessianFactor &amp;hf)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>LinearInequality</name>
      <anchorfile>a04291.html</anchorfile>
      <anchor>a7b633c7b207ada226bb6f4efe233be98</anchor>
      <arglist>(const JacobianFactor &amp;jf, Key dualKey)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>LinearInequality</name>
      <anchorfile>a04291.html</anchorfile>
      <anchor>a72392e2ce1f18048deabbcede32f9035</anchor>
      <arglist>(Key i1, const RowVector &amp;A1, double b, Key dualKey)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>LinearInequality</name>
      <anchorfile>a04291.html</anchorfile>
      <anchor>ae3d0f1f6aedb2ccc246eb1f20e5716be</anchor>
      <arglist>(Key i1, const RowVector &amp;A1, Key i2, const RowVector &amp;A2, double b, Key dualKey)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>LinearInequality</name>
      <anchorfile>a04291.html</anchorfile>
      <anchor>aeadc6eaa9e67d9b825c5b785734e3a4d</anchor>
      <arglist>(Key i1, const RowVector &amp;A1, Key i2, const RowVector &amp;A2, Key i3, const RowVector &amp;A3, double b, Key dualKey)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>LinearInequality</name>
      <anchorfile>a04291.html</anchorfile>
      <anchor>a36679e8023dedce578bb5c9634a194d2</anchor>
      <arglist>(const TERMS &amp;terms, double b, Key dualKey)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~LinearInequality</name>
      <anchorfile>a04291.html</anchorfile>
      <anchor>a4ff844e7ade2d03054c5fbd5c9417386</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>equals</name>
      <anchorfile>a04291.html</anchorfile>
      <anchor>afec6183557ced145bf9bb6b14f320f49</anchor>
      <arglist>(const GaussianFactor &amp;lf, double tol=1e-9) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>print</name>
      <anchorfile>a04291.html</anchorfile>
      <anchor>a19a4ad486ee90ccb5bdab56b956bf5c3</anchor>
      <arglist>(const std::string &amp;s=&quot;&quot;, const KeyFormatter &amp;formatter=DefaultKeyFormatter) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual GaussianFactor::shared_ptr</type>
      <name>clone</name>
      <anchorfile>a04291.html</anchorfile>
      <anchor>aa513a7672a6ba1090e445e6b2d639798</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Key</type>
      <name>dualKey</name>
      <anchorfile>a04291.html</anchorfile>
      <anchor>aad12f50494ff2b1b59ae2a7d78777c00</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>active</name>
      <anchorfile>a04291.html</anchorfile>
      <anchor>ab7d88f376bf8b99b2c59117399e6c33c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>activate</name>
      <anchorfile>a04291.html</anchorfile>
      <anchor>aaf8872367199b360f35c6fd7e3b19712</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>inactivate</name>
      <anchorfile>a04291.html</anchorfile>
      <anchor>a0ea11e4b21477672ef4ab6bdc7017675</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Vector</type>
      <name>error_vector</name>
      <anchorfile>a04291.html</anchorfile>
      <anchor>ad1992c39586ff322a39064d66c252be0</anchor>
      <arglist>(const VectorValues &amp;c) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>error</name>
      <anchorfile>a04291.html</anchorfile>
      <anchor>ab0c6ab51ec69cb06d1ab0b5c88a0dfb9</anchor>
      <arglist>(const VectorValues &amp;c) const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>dotProductRow</name>
      <anchorfile>a04291.html</anchorfile>
      <anchor>a8887d186334237c732bb137b71722fa6</anchor>
      <arglist>(const VectorValues &amp;p) const</arglist>
    </member>
    <member kind="typedef">
      <type>LinearInequality</type>
      <name>This</name>
      <anchorfile>a04291.html</anchorfile>
      <anchor>aeb0dcb2152c3266d1e17ac279bc91b02</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>JacobianFactor</type>
      <name>Base</name>
      <anchorfile>a04291.html</anchorfile>
      <anchor>a4aeacce12d9d4ba428ffd29a653543e6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; This &gt;</type>
      <name>shared_ptr</name>
      <anchorfile>a04291.html</anchorfile>
      <anchor>a6d3c692d1e6758dcab4770758023aeb1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::LinearizedGaussianFactor</name>
    <filename>a04415.html</filename>
    <base>gtsam::NonlinearFactor</base>
    <member kind="function">
      <type></type>
      <name>LinearizedGaussianFactor</name>
      <anchorfile>a04415.html</anchorfile>
      <anchor>a76f724cf12a809ffd2a0740e6bdaa08b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>LinearizedGaussianFactor</name>
      <anchorfile>a04415.html</anchorfile>
      <anchor>a1d52cd91562bcf1362ccff4fd4a01c3f</anchor>
      <arglist>(const GaussianFactor::shared_ptr &amp;gaussian, const Values &amp;lin_points)</arglist>
    </member>
    <member kind="typedef">
      <type>NonlinearFactor</type>
      <name>Base</name>
      <anchorfile>a04415.html</anchorfile>
      <anchor>a97beab87c47fe88f025dfd73b00d1a7b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; LinearizedGaussianFactor &gt;</type>
      <name>shared_ptr</name>
      <anchorfile>a04415.html</anchorfile>
      <anchor>ae0ab7941f13f7e6e9ddc9c2ba28ebe26</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Values</type>
      <name>lin_points_</name>
      <anchorfile>a04415.html</anchorfile>
      <anchor>ac6daae35e932f735a1583eab077f3826</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>boost::serialization::access</name>
      <anchorfile>a04415.html</anchorfile>
      <anchor>ac98d07dd8f7b70e16ccb9a01abf56b9c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::LinearizedHessianFactor</name>
    <filename>a04427.html</filename>
    <base>gtsam::LinearizedGaussianFactor</base>
    <member kind="function">
      <type></type>
      <name>LinearizedHessianFactor</name>
      <anchorfile>a04427.html</anchorfile>
      <anchor>a83440cd16b1e4fae3ab24e200224bea0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>LinearizedHessianFactor</name>
      <anchorfile>a04427.html</anchorfile>
      <anchor>a61d1d64e8fb85e8658702e99816a4311</anchor>
      <arglist>(const HessianFactor::shared_ptr &amp;hessian, const Values &amp;lin_points)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual gtsam::NonlinearFactor::shared_ptr</type>
      <name>clone</name>
      <anchorfile>a04427.html</anchorfile>
      <anchor>aac304eac7a7dbf036cf67954e3cef0a2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>print</name>
      <anchorfile>a04427.html</anchorfile>
      <anchor>a2858146322a207098c5ffb9b83a51097</anchor>
      <arglist>(const std::string &amp;s=&quot;&quot;, const KeyFormatter &amp;keyFormatter=DefaultKeyFormatter) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>equals</name>
      <anchorfile>a04427.html</anchorfile>
      <anchor>af60e098891b7f0193e209d4a56de0928</anchor>
      <arglist>(const NonlinearFactor &amp;expected, double tol=1e-9) const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>constantTerm</name>
      <anchorfile>a04427.html</anchorfile>
      <anchor>ac0218f6b63946c4fd83a87a1f35c37b0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>constColumn</type>
      <name>linearTerm</name>
      <anchorfile>a04427.html</anchorfile>
      <anchor>a23d7637efe22a11bc124f4ab2149306d</anchor>
      <arglist>(const_iterator j) const</arglist>
    </member>
    <member kind="function">
      <type>constColumn</type>
      <name>linearTerm</name>
      <anchorfile>a04427.html</anchorfile>
      <anchor>a8c8183736bab5f3463864545f4eb6da0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Matrix</type>
      <name>squaredTerm</name>
      <anchorfile>a04427.html</anchorfile>
      <anchor>a5f703080a8235fc7c27e848a42dc3716</anchor>
      <arglist>(const_iterator j1, const_iterator j2) const</arglist>
    </member>
    <member kind="function">
      <type>Eigen::SelfAdjointView&lt; constBlock, Eigen::Upper &gt;</type>
      <name>squaredTerm</name>
      <anchorfile>a04427.html</anchorfile>
      <anchor>a91dc74237c4ab9cde92b6abb52308c8d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>dim</name>
      <anchorfile>a04427.html</anchorfile>
      <anchor>a079c09668c282c0cad75f084406c5588</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>error</name>
      <anchorfile>a04427.html</anchorfile>
      <anchor>a5c43cdf850910217be26d65a01497e41</anchor>
      <arglist>(const Values &amp;c) const</arglist>
    </member>
    <member kind="function">
      <type>boost::shared_ptr&lt; GaussianFactor &gt;</type>
      <name>linearize</name>
      <anchorfile>a04427.html</anchorfile>
      <anchor>af3ecc51a514d3339944d3a53c20e1145</anchor>
      <arglist>(const Values &amp;c) const</arglist>
    </member>
    <member kind="typedef">
      <type>LinearizedGaussianFactor</type>
      <name>Base</name>
      <anchorfile>a04427.html</anchorfile>
      <anchor>a20d9a7d41e7826339c5f27d41eca81c6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; LinearizedHessianFactor &gt;</type>
      <name>shared_ptr</name>
      <anchorfile>a04427.html</anchorfile>
      <anchor>af1963d9a181a84f82d6045a6b85c7a7c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SymmetricBlockMatrix::Block</type>
      <name>Block</name>
      <anchorfile>a04427.html</anchorfile>
      <anchor>aa39f1014aa1cbfc9d9a941faa077070c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SymmetricBlockMatrix::constBlock</type>
      <name>constBlock</name>
      <anchorfile>a04427.html</anchorfile>
      <anchor>a56bf9689ab6a550ce4937ce1432a6864</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SymmetricBlockMatrix::Block::ColXpr</type>
      <name>Column</name>
      <anchorfile>a04427.html</anchorfile>
      <anchor>a38ed8e18d42f2932cbd92a2a395c42eb</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SymmetricBlockMatrix::constBlock::ColXpr</type>
      <name>constColumn</name>
      <anchorfile>a04427.html</anchorfile>
      <anchor>aaf1740804322bf9d1440f0228b27f305</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>SymmetricBlockMatrix</type>
      <name>info_</name>
      <anchorfile>a04427.html</anchorfile>
      <anchor>a4e74af7801749eb32354b4284ae7c86c</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>boost::serialization::access</name>
      <anchorfile>a04427.html</anchorfile>
      <anchor>ac98d07dd8f7b70e16ccb9a01abf56b9c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::LinearizedJacobianFactor</name>
    <filename>a04419.html</filename>
    <base>gtsam::LinearizedGaussianFactor</base>
    <member kind="function">
      <type></type>
      <name>LinearizedJacobianFactor</name>
      <anchorfile>a04419.html</anchorfile>
      <anchor>a80f529ae554bf662f4449d5295b24a02</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>LinearizedJacobianFactor</name>
      <anchorfile>a04419.html</anchorfile>
      <anchor>aa00b8e5ad6f8c51dfe1ba4d20338a653</anchor>
      <arglist>(const JacobianFactor::shared_ptr &amp;jacobian, const Values &amp;lin_points)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual gtsam::NonlinearFactor::shared_ptr</type>
      <name>clone</name>
      <anchorfile>a04419.html</anchorfile>
      <anchor>ad4d888a4fe8f08ee6ae25b15247f1b98</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>print</name>
      <anchorfile>a04419.html</anchorfile>
      <anchor>a5b54ca2e262a75b215f21d90048ace0b</anchor>
      <arglist>(const std::string &amp;s=&quot;&quot;, const KeyFormatter &amp;keyFormatter=DefaultKeyFormatter) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>equals</name>
      <anchorfile>a04419.html</anchorfile>
      <anchor>ac50f4fd62c6426817299e8ebf2d3c0c8</anchor>
      <arglist>(const NonlinearFactor &amp;expected, double tol=1e-9) const</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>dim</name>
      <anchorfile>a04419.html</anchorfile>
      <anchor>ae3ceba1b771611396af89c39714fa8c1</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>error</name>
      <anchorfile>a04419.html</anchorfile>
      <anchor>a13287b67809967efa75855080a0d75ec</anchor>
      <arglist>(const Values &amp;c) const</arglist>
    </member>
    <member kind="function">
      <type>boost::shared_ptr&lt; GaussianFactor &gt;</type>
      <name>linearize</name>
      <anchorfile>a04419.html</anchorfile>
      <anchor>ac33b1f1ada7b649c47e655f4446de345</anchor>
      <arglist>(const Values &amp;c) const</arglist>
    </member>
    <member kind="function">
      <type>Vector</type>
      <name>error_vector</name>
      <anchorfile>a04419.html</anchorfile>
      <anchor>af3b094b4f8fcb0a55af3ba29f9128ce6</anchor>
      <arglist>(const Values &amp;c) const</arglist>
    </member>
    <member kind="typedef">
      <type>LinearizedGaussianFactor</type>
      <name>Base</name>
      <anchorfile>a04419.html</anchorfile>
      <anchor>ad9f025e87094d40cef15ebc7d4cfec1b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; LinearizedJacobianFactor &gt;</type>
      <name>shared_ptr</name>
      <anchorfile>a04419.html</anchorfile>
      <anchor>a2c9ce0179f9d40ed11525ba899e7eaa4</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>boost::serialization::access</name>
      <anchorfile>a04419.html</anchorfile>
      <anchor>ac98d07dd8f7b70e16ccb9a01abf56b9c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::ListOfOneContainer</name>
    <filename>a02263.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>gtsam::LP</name>
    <filename>a04299.html</filename>
    <member kind="function">
      <type>bool</type>
      <name>isFeasible</name>
      <anchorfile>a04299.html</anchorfile>
      <anchor>a80bc0818938b203b105f4d920824a8d5</anchor>
      <arglist>(const VectorValues &amp;x) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>a04299.html</anchorfile>
      <anchor>a79e21ab0c633e75fd1d2b08df998f87f</anchor>
      <arglist>(const string &amp;s=&quot;&quot;) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>equals</name>
      <anchorfile>a04299.html</anchorfile>
      <anchor>a73f5064264c1558d0fefaf866d74590c</anchor>
      <arglist>(const LP &amp;other, double tol=1e-9) const</arglist>
    </member>
    <member kind="variable">
      <type>LinearCost</type>
      <name>cost</name>
      <anchorfile>a04299.html</anchorfile>
      <anchor>a8a2b168b07db8e54b818920f388ff7ff</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>EqualityFactorGraph</type>
      <name>equalities</name>
      <anchorfile>a04299.html</anchorfile>
      <anchor>aca53e6e5db3108597f75298ab9666c50</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>InequalityFactorGraph</type>
      <name>inequalities</name>
      <anchorfile>a04299.html</anchorfile>
      <anchor>a86b8513e9c04af56e1e0e5126c7bc4f2</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::LPInitSolver</name>
    <filename>a04307.html</filename>
    <member kind="function">
      <type></type>
      <name>LPInitSolver</name>
      <anchorfile>a04307.html</anchorfile>
      <anchor>a67b90d48db4e0404c21158e716a6cba3</anchor>
      <arglist>(const LP &amp;lp)</arglist>
    </member>
    <member kind="function">
      <type>VectorValues</type>
      <name>solve</name>
      <anchorfile>a04307.html</anchorfile>
      <anchor>afe3f43d8a5c5c82e6d994ecb0b6aacad</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>gtsam::LPPolicy</name>
    <filename>a04311.html</filename>
    <member kind="function" static="yes">
      <type>static GaussianFactorGraph</type>
      <name>buildCostFunction</name>
      <anchorfile>a04311.html</anchorfile>
      <anchor>ad38a54d5c4c962b9110e5a74339cc110</anchor>
      <arglist>(const LP &amp;lp, const VectorValues &amp;xk)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr double</type>
      <name>maxAlpha</name>
      <anchorfile>a04311.html</anchorfile>
      <anchor>a43b6a6ed49b3c70474a0424dc3d9ad87</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::MagFactor</name>
    <filename>a03487.html</filename>
    <base>NoiseModelFactor1&lt; Rot2 &gt;</base>
    <member kind="function">
      <type></type>
      <name>MagFactor</name>
      <anchorfile>a03487.html</anchorfile>
      <anchor>ae9daca6c0ee19dd63e4889c6acbb13d9</anchor>
      <arglist>(Key key, const Point3 &amp;measured, double scale, const Unit3 &amp;direction, const Point3 &amp;bias, const SharedNoiseModel &amp;model)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual NonlinearFactor::shared_ptr</type>
      <name>clone</name>
      <anchorfile>a03487.html</anchorfile>
      <anchor>a0292e2eba77b557f7a8f1bdb36f5738c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Vector</type>
      <name>evaluateError</name>
      <anchorfile>a03487.html</anchorfile>
      <anchor>a3783b3981d5f4fc1f0e4b5c38b757bc9</anchor>
      <arglist>(const Rot2 &amp;nRb, boost::optional&lt; Matrix &amp; &gt; H=boost::none) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::MagFactor1</name>
    <filename>a03491.html</filename>
    <base>NoiseModelFactor1&lt; Rot3 &gt;</base>
    <member kind="function">
      <type></type>
      <name>MagFactor1</name>
      <anchorfile>a03491.html</anchorfile>
      <anchor>a5667d9e3964646f534760bab0b309241</anchor>
      <arglist>(Key key, const Point3 &amp;measured, double scale, const Unit3 &amp;direction, const Point3 &amp;bias, const SharedNoiseModel &amp;model)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual NonlinearFactor::shared_ptr</type>
      <name>clone</name>
      <anchorfile>a03491.html</anchorfile>
      <anchor>aa9c88cf720f0940e5116603a31f9d483</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Vector</type>
      <name>evaluateError</name>
      <anchorfile>a03491.html</anchorfile>
      <anchor>ab96a570856763a3951b895594337ce67</anchor>
      <arglist>(const Rot3 &amp;nRb, boost::optional&lt; Matrix &amp; &gt; H=boost::none) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::MagFactor2</name>
    <filename>a03495.html</filename>
    <base>NoiseModelFactor2&lt; Point3, Point3 &gt;</base>
    <member kind="function">
      <type></type>
      <name>MagFactor2</name>
      <anchorfile>a03495.html</anchorfile>
      <anchor>a5d8d154a6e667e362d68d1250b2c5f40</anchor>
      <arglist>(Key key1, Key key2, const Point3 &amp;measured, const Rot3 &amp;nRb, const SharedNoiseModel &amp;model)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual NonlinearFactor::shared_ptr</type>
      <name>clone</name>
      <anchorfile>a03495.html</anchorfile>
      <anchor>a6b04ab97649fcbac7177ec232e4988f8</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Vector</type>
      <name>evaluateError</name>
      <anchorfile>a03495.html</anchorfile>
      <anchor>adf4a03de55be63c088766feda542f285</anchor>
      <arglist>(const Point3 &amp;nM, const Point3 &amp;bias, boost::optional&lt; Matrix &amp; &gt; H1=boost::none, boost::optional&lt; Matrix &amp; &gt; H2=boost::none) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::MagFactor3</name>
    <filename>a03499.html</filename>
    <base>NoiseModelFactor3&lt; double, Unit3, Point3 &gt;</base>
    <member kind="function">
      <type></type>
      <name>MagFactor3</name>
      <anchorfile>a03499.html</anchorfile>
      <anchor>a796f1b1585f0c205eb6d7ced3ff40a86</anchor>
      <arglist>(Key key1, Key key2, Key key3, const Point3 &amp;measured, const Rot3 &amp;nRb, const SharedNoiseModel &amp;model)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual NonlinearFactor::shared_ptr</type>
      <name>clone</name>
      <anchorfile>a03499.html</anchorfile>
      <anchor>a0ccd718c6d26972a8007647d81d74ed2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Vector</type>
      <name>evaluateError</name>
      <anchorfile>a03499.html</anchorfile>
      <anchor>acfe72192b2d99b82df1e8b80196bcdc8</anchor>
      <arglist>(const double &amp;scale, const Unit3 &amp;direction, const Point3 &amp;bias, boost::optional&lt; Matrix &amp; &gt; H1=boost::none, boost::optional&lt; Matrix &amp; &gt; H2=boost::none, boost::optional&lt; Matrix &amp; &gt; H3=boost::none) const</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>gtsam::MakeJacobian</name>
    <filename>a02167.html</filename>
    <templarg>T</templarg>
    <templarg>A</templarg>
  </compound>
  <compound kind="struct">
    <name>gtsam::MakeOptionalJacobian</name>
    <filename>a02171.html</filename>
    <templarg></templarg>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>gtsam::internal::Manifold</name>
    <filename>a02119.html</filename>
    <templarg>Class</templarg>
    <base>gtsam::internal::ManifoldTraits</base>
    <base>Testable&lt; Class &gt;</base>
  </compound>
  <compound kind="class">
    <name>Manifold&lt; Cal3_S2 &gt;</name>
    <filename>a02119.html</filename>
    <base>ManifoldTraits&lt; Cal3_S2 &gt;</base>
    <base>Testable&lt; Cal3_S2 &gt;</base>
  </compound>
  <compound kind="class">
    <name>Manifold&lt; Cal3_S2Stereo &gt;</name>
    <filename>a02119.html</filename>
    <base>ManifoldTraits&lt; Cal3_S2Stereo &gt;</base>
    <base>Testable&lt; Cal3_S2Stereo &gt;</base>
  </compound>
  <compound kind="class">
    <name>Manifold&lt; Cal3Bundler &gt;</name>
    <filename>a02119.html</filename>
    <base>ManifoldTraits&lt; Cal3Bundler &gt;</base>
    <base>Testable&lt; Cal3Bundler &gt;</base>
  </compound>
  <compound kind="class">
    <name>Manifold&lt; Cal3DS2 &gt;</name>
    <filename>a02119.html</filename>
    <base>ManifoldTraits&lt; Cal3DS2 &gt;</base>
    <base>Testable&lt; Cal3DS2 &gt;</base>
  </compound>
  <compound kind="class">
    <name>Manifold&lt; Cal3Unified &gt;</name>
    <filename>a02119.html</filename>
    <base>ManifoldTraits&lt; Cal3Unified &gt;</base>
    <base>Testable&lt; Cal3Unified &gt;</base>
  </compound>
  <compound kind="class">
    <name>Manifold&lt; CalibratedCamera &gt;</name>
    <filename>a02119.html</filename>
    <base>ManifoldTraits&lt; CalibratedCamera &gt;</base>
    <base>Testable&lt; CalibratedCamera &gt;</base>
  </compound>
  <compound kind="class">
    <name>Manifold&lt; EssentialMatrix &gt;</name>
    <filename>a02119.html</filename>
    <base>ManifoldTraits&lt; EssentialMatrix &gt;</base>
    <base>Testable&lt; EssentialMatrix &gt;</base>
  </compound>
  <compound kind="class">
    <name>Manifold&lt; NavState &gt;</name>
    <filename>a02119.html</filename>
    <base>ManifoldTraits&lt; NavState &gt;</base>
    <base>Testable&lt; NavState &gt;</base>
  </compound>
  <compound kind="class">
    <name>Manifold&lt; OrientedPlane3 &gt;</name>
    <filename>a02119.html</filename>
    <base>ManifoldTraits&lt; OrientedPlane3 &gt;</base>
    <base>Testable&lt; OrientedPlane3 &gt;</base>
  </compound>
  <compound kind="class">
    <name>Manifold&lt; PinholeCamera&lt; Calibration &gt; &gt;</name>
    <filename>a02119.html</filename>
    <base>ManifoldTraits&lt; PinholeCamera&lt; Calibration &gt; &gt;</base>
    <base>Testable&lt; PinholeCamera&lt; Calibration &gt; &gt;</base>
  </compound>
  <compound kind="class">
    <name>Manifold&lt; PinholePose&lt; CALIBRATION &gt; &gt;</name>
    <filename>a02119.html</filename>
    <base>ManifoldTraits&lt; PinholePose&lt; CALIBRATION &gt; &gt;</base>
    <base>Testable&lt; PinholePose&lt; CALIBRATION &gt; &gt;</base>
  </compound>
  <compound kind="class">
    <name>Manifold&lt; SimpleCamera &gt;</name>
    <filename>a02119.html</filename>
    <base>ManifoldTraits&lt; SimpleCamera &gt;</base>
    <base>Testable&lt; SimpleCamera &gt;</base>
  </compound>
  <compound kind="class">
    <name>Manifold&lt; StereoCamera &gt;</name>
    <filename>a02119.html</filename>
    <base>ManifoldTraits&lt; StereoCamera &gt;</base>
    <base>Testable&lt; StereoCamera &gt;</base>
  </compound>
  <compound kind="class">
    <name>Manifold&lt; Unit3 &gt;</name>
    <filename>a02119.html</filename>
    <base>ManifoldTraits&lt; Unit3 &gt;</base>
    <base>Testable&lt; Unit3 &gt;</base>
  </compound>
  <compound kind="struct">
    <name>gtsam::manifold_tag</name>
    <filename>a02099.html</filename>
  </compound>
  <compound kind="struct">
    <name>gtsam::internal::ManifoldImpl</name>
    <filename>a02107.html</filename>
    <templarg>Class</templarg>
    <templarg>N</templarg>
  </compound>
  <compound kind="class">
    <name>ManifoldImpl&lt; BearingRange&lt; A1, A2 &gt;, BearingRange&lt; A1, A2 &gt; ::dimension &gt;</name>
    <filename>a02107.html</filename>
  </compound>
  <compound kind="class">
    <name>ManifoldImpl&lt; Cal3_S2, Cal3_S2 ::dimension &gt;</name>
    <filename>a02107.html</filename>
  </compound>
  <compound kind="class">
    <name>ManifoldImpl&lt; Cal3_S2Stereo, Cal3_S2Stereo ::dimension &gt;</name>
    <filename>a02107.html</filename>
  </compound>
  <compound kind="class">
    <name>ManifoldImpl&lt; Cal3Bundler, Cal3Bundler ::dimension &gt;</name>
    <filename>a02107.html</filename>
  </compound>
  <compound kind="class">
    <name>ManifoldImpl&lt; Cal3DS2, Cal3DS2 ::dimension &gt;</name>
    <filename>a02107.html</filename>
  </compound>
  <compound kind="class">
    <name>ManifoldImpl&lt; Cal3Unified, Cal3Unified ::dimension &gt;</name>
    <filename>a02107.html</filename>
  </compound>
  <compound kind="class">
    <name>ManifoldImpl&lt; CalibratedCamera, CalibratedCamera ::dimension &gt;</name>
    <filename>a02107.html</filename>
  </compound>
  <compound kind="class">
    <name>ManifoldImpl&lt; Class, Class::dimension &gt;</name>
    <filename>a02107.html</filename>
  </compound>
  <compound kind="struct">
    <name>gtsam::internal::ManifoldImpl&lt; Class, Eigen::Dynamic &gt;</name>
    <filename>a02111.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="class">
    <name>ManifoldImpl&lt; EssentialMatrix, EssentialMatrix ::dimension &gt;</name>
    <filename>a02107.html</filename>
  </compound>
  <compound kind="class">
    <name>ManifoldImpl&lt; NavState, NavState ::dimension &gt;</name>
    <filename>a02107.html</filename>
  </compound>
  <compound kind="class">
    <name>ManifoldImpl&lt; OrientedPlane3, OrientedPlane3 ::dimension &gt;</name>
    <filename>a02107.html</filename>
  </compound>
  <compound kind="class">
    <name>ManifoldImpl&lt; PinholeCamera&lt; Calibration &gt;, PinholeCamera&lt; Calibration &gt; ::dimension &gt;</name>
    <filename>a02107.html</filename>
  </compound>
  <compound kind="class">
    <name>ManifoldImpl&lt; PinholePose&lt; CALIBRATION &gt;, PinholePose&lt; CALIBRATION &gt; ::dimension &gt;</name>
    <filename>a02107.html</filename>
  </compound>
  <compound kind="class">
    <name>ManifoldImpl&lt; SimpleCamera, SimpleCamera ::dimension &gt;</name>
    <filename>a02107.html</filename>
  </compound>
  <compound kind="class">
    <name>ManifoldImpl&lt; StereoCamera, StereoCamera ::dimension &gt;</name>
    <filename>a02107.html</filename>
  </compound>
  <compound kind="class">
    <name>ManifoldImpl&lt; Unit3, Unit3 ::dimension &gt;</name>
    <filename>a02107.html</filename>
  </compound>
  <compound kind="class">
    <name>gtsam::ManifoldPreintegration</name>
    <filename>a03503.html</filename>
    <base>gtsam::PreintegrationBase</base>
    <member kind="function">
      <type></type>
      <name>ManifoldPreintegration</name>
      <anchorfile>a03503.html</anchorfile>
      <anchor>a41ee2c0894d6b99c7d537530b57b2bce</anchor>
      <arglist>(const boost::shared_ptr&lt; Params &gt; &amp;p, const imuBias::ConstantBias &amp;biasHat=imuBias::ConstantBias())</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>update</name>
      <anchorfile>a03503.html</anchorfile>
      <anchor>a5634a540fa491ed01c0a84341d91d9ff</anchor>
      <arglist>(const Vector3 &amp;measuredAcc, const Vector3 &amp;measuredOmega, const double dt, Matrix9 *A, Matrix93 *B, Matrix93 *C) override</arglist>
    </member>
    <member kind="function">
      <type>Vector9</type>
      <name>biasCorrectedDelta</name>
      <anchorfile>a03503.html</anchorfile>
      <anchor>a8df1dd0307e9f0e4f840c4e169b296e9</anchor>
      <arglist>(const imuBias::ConstantBias &amp;bias_i, OptionalJacobian&lt; 9, 6 &gt; H=boost::none) const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual boost::shared_ptr&lt; ManifoldPreintegration &gt;</type>
      <name>clone</name>
      <anchorfile>a03503.html</anchorfile>
      <anchor>a8182fdd905a02e1fb81cd3fc7e817aae</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ManifoldPreintegration</name>
      <anchorfile>a03503.html</anchorfile>
      <anchor>a41ee2c0894d6b99c7d537530b57b2bce</anchor>
      <arglist>(const boost::shared_ptr&lt; Params &gt; &amp;p, const imuBias::ConstantBias &amp;biasHat=imuBias::ConstantBias())</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>update</name>
      <anchorfile>a03503.html</anchorfile>
      <anchor>a5634a540fa491ed01c0a84341d91d9ff</anchor>
      <arglist>(const Vector3 &amp;measuredAcc, const Vector3 &amp;measuredOmega, const double dt, Matrix9 *A, Matrix93 *B, Matrix93 *C) override</arglist>
    </member>
    <member kind="function">
      <type>Vector9</type>
      <name>biasCorrectedDelta</name>
      <anchorfile>a03503.html</anchorfile>
      <anchor>a8df1dd0307e9f0e4f840c4e169b296e9</anchor>
      <arglist>(const imuBias::ConstantBias &amp;bias_i, OptionalJacobian&lt; 9, 6 &gt; H=boost::none) const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual boost::shared_ptr&lt; ManifoldPreintegration &gt;</type>
      <name>clone</name>
      <anchorfile>a03503.html</anchorfile>
      <anchor>a8182fdd905a02e1fb81cd3fc7e817aae</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>ManifoldPreintegration</name>
      <anchorfile>a03503.html</anchorfile>
      <anchor>a4ece2b4ce023308fa06561e94309ea50</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>NavState</type>
      <name>deltaXij_</name>
      <anchorfile>a03503.html</anchorfile>
      <anchor>ad07a36d86d1aa1dd13df4eb7ae83670f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Matrix3</type>
      <name>delRdelBiasOmega_</name>
      <anchorfile>a03503.html</anchorfile>
      <anchor>a6e4e68542018e0a7e4637cdd276cb1f7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Matrix3</type>
      <name>delPdelBiasAcc_</name>
      <anchorfile>a03503.html</anchorfile>
      <anchor>a966a8f392b260b54a17e7e86b14debab</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Matrix3</type>
      <name>delPdelBiasOmega_</name>
      <anchorfile>a03503.html</anchorfile>
      <anchor>af95bfbf520cf98b71cb9773d0446915a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Matrix3</type>
      <name>delVdelBiasAcc_</name>
      <anchorfile>a03503.html</anchorfile>
      <anchor>a569f26b6e3f98cf370d4143d8cecb4a5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Matrix3</type>
      <name>delVdelBiasOmega_</name>
      <anchorfile>a03503.html</anchorfile>
      <anchor>afd1ae2fb12470f49f8c8454f17f3a453</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>boost::serialization::access</name>
      <anchorfile>a03503.html</anchorfile>
      <anchor>ac98d07dd8f7b70e16ccb9a01abf56b9c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>gtsam::internal::ManifoldTraits</name>
    <filename>a02115.html</filename>
    <templarg>Class</templarg>
    <base>ManifoldImpl&lt; Class, Class::dimension &gt;</base>
  </compound>
  <compound kind="class">
    <name>ManifoldTraits&lt; BearingRange&lt; A1, A2 &gt; &gt;</name>
    <filename>a02115.html</filename>
    <base>ManifoldImpl&lt; BearingRange&lt; A1, A2 &gt;, BearingRange&lt; A1, A2 &gt; ::dimension &gt;</base>
  </compound>
  <compound kind="class">
    <name>ManifoldTraits&lt; Cal3_S2 &gt;</name>
    <filename>a02115.html</filename>
    <base>ManifoldImpl&lt; Cal3_S2, Cal3_S2 ::dimension &gt;</base>
  </compound>
  <compound kind="class">
    <name>ManifoldTraits&lt; Cal3_S2Stereo &gt;</name>
    <filename>a02115.html</filename>
    <base>ManifoldImpl&lt; Cal3_S2Stereo, Cal3_S2Stereo ::dimension &gt;</base>
  </compound>
  <compound kind="class">
    <name>ManifoldTraits&lt; Cal3Bundler &gt;</name>
    <filename>a02115.html</filename>
    <base>ManifoldImpl&lt; Cal3Bundler, Cal3Bundler ::dimension &gt;</base>
  </compound>
  <compound kind="class">
    <name>ManifoldTraits&lt; Cal3DS2 &gt;</name>
    <filename>a02115.html</filename>
    <base>ManifoldImpl&lt; Cal3DS2, Cal3DS2 ::dimension &gt;</base>
  </compound>
  <compound kind="class">
    <name>ManifoldTraits&lt; Cal3Unified &gt;</name>
    <filename>a02115.html</filename>
    <base>ManifoldImpl&lt; Cal3Unified, Cal3Unified ::dimension &gt;</base>
  </compound>
  <compound kind="class">
    <name>ManifoldTraits&lt; CalibratedCamera &gt;</name>
    <filename>a02115.html</filename>
    <base>ManifoldImpl&lt; CalibratedCamera, CalibratedCamera ::dimension &gt;</base>
  </compound>
  <compound kind="class">
    <name>ManifoldTraits&lt; EssentialMatrix &gt;</name>
    <filename>a02115.html</filename>
    <base>ManifoldImpl&lt; EssentialMatrix, EssentialMatrix ::dimension &gt;</base>
  </compound>
  <compound kind="class">
    <name>ManifoldTraits&lt; NavState &gt;</name>
    <filename>a02115.html</filename>
    <base>ManifoldImpl&lt; NavState, NavState ::dimension &gt;</base>
  </compound>
  <compound kind="class">
    <name>ManifoldTraits&lt; OrientedPlane3 &gt;</name>
    <filename>a02115.html</filename>
    <base>ManifoldImpl&lt; OrientedPlane3, OrientedPlane3 ::dimension &gt;</base>
  </compound>
  <compound kind="class">
    <name>ManifoldTraits&lt; PinholeCamera&lt; Calibration &gt; &gt;</name>
    <filename>a02115.html</filename>
    <base>ManifoldImpl&lt; PinholeCamera&lt; Calibration &gt;, PinholeCamera&lt; Calibration &gt; ::dimension &gt;</base>
  </compound>
  <compound kind="class">
    <name>ManifoldTraits&lt; PinholePose&lt; CALIBRATION &gt; &gt;</name>
    <filename>a02115.html</filename>
    <base>ManifoldImpl&lt; PinholePose&lt; CALIBRATION &gt;, PinholePose&lt; CALIBRATION &gt; ::dimension &gt;</base>
  </compound>
  <compound kind="class">
    <name>ManifoldTraits&lt; SimpleCamera &gt;</name>
    <filename>a02115.html</filename>
    <base>ManifoldImpl&lt; SimpleCamera, SimpleCamera ::dimension &gt;</base>
  </compound>
  <compound kind="class">
    <name>ManifoldTraits&lt; StereoCamera &gt;</name>
    <filename>a02115.html</filename>
    <base>ManifoldImpl&lt; StereoCamera, StereoCamera ::dimension &gt;</base>
  </compound>
  <compound kind="class">
    <name>ManifoldTraits&lt; Unit3 &gt;</name>
    <filename>a02115.html</filename>
    <base>ManifoldImpl&lt; Unit3, Unit3 ::dimension &gt;</base>
  </compound>
  <compound kind="class">
    <name>gtsam::MarginalizeNonleafException</name>
    <filename>a03751.html</filename>
  </compound>
  <compound kind="class">
    <name>gtsam::Marginals</name>
    <filename>a03711.html</filename>
    <member kind="function">
      <type></type>
      <name>Marginals</name>
      <anchorfile>a03711.html</anchorfile>
      <anchor>a9b2936df991e163538fda5fee6801c82</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Marginals</name>
      <anchorfile>a03711.html</anchorfile>
      <anchor>ac5829b5b43587ab6316671def4a9d491</anchor>
      <arglist>(const NonlinearFactorGraph &amp;graph, const Values &amp;solution, Factorization factorization=CHOLESKY, EliminateableFactorGraph&lt; GaussianFactorGraph &gt;::OptionalOrdering ordering=boost::none)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>a03711.html</anchorfile>
      <anchor>a0a83af7a860020bf30cb03748fe93ecc</anchor>
      <arglist>(const std::string &amp;str=&quot;Marginals: &quot;, const KeyFormatter &amp;keyFormatter=DefaultKeyFormatter) const</arglist>
    </member>
    <member kind="function">
      <type>GaussianFactor::shared_ptr</type>
      <name>marginalFactor</name>
      <anchorfile>a03711.html</anchorfile>
      <anchor>afb12db81c7a8b6a845df288adfa8404b</anchor>
      <arglist>(Key variable) const</arglist>
    </member>
    <member kind="function">
      <type>Matrix</type>
      <name>marginalInformation</name>
      <anchorfile>a03711.html</anchorfile>
      <anchor>ac9d5bd3265575302931f1f25d7e4e903</anchor>
      <arglist>(Key variable) const</arglist>
    </member>
    <member kind="function">
      <type>Matrix</type>
      <name>marginalCovariance</name>
      <anchorfile>a03711.html</anchorfile>
      <anchor>a326cae38c0af8c1e0e9c11b7bd10e65b</anchor>
      <arglist>(Key variable) const</arglist>
    </member>
    <member kind="function">
      <type>JointMarginal</type>
      <name>jointMarginalCovariance</name>
      <anchorfile>a03711.html</anchorfile>
      <anchor>a79299e7bb9a34e93be69d07882d95133</anchor>
      <arglist>(const KeyVector &amp;variables) const</arglist>
    </member>
    <member kind="function">
      <type>JointMarginal</type>
      <name>jointMarginalInformation</name>
      <anchorfile>a03711.html</anchorfile>
      <anchor>a18949767da9858fbcc63268b4e28c24e</anchor>
      <arglist>(const KeyVector &amp;variables) const</arglist>
    </member>
    <member kind="function">
      <type>VectorValues</type>
      <name>optimize</name>
      <anchorfile>a03711.html</anchorfile>
      <anchor>af82762c57bfcf5cd8ae6d689245f52a1</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>Factorization</name>
      <anchorfile>a03711.html</anchorfile>
      <anchor>a201eb50ae0aed6ac636e32ebb5f5d833</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::Mechanization_bRn2</name>
    <filename>a04503.html</filename>
    <member kind="function">
      <type></type>
      <name>Mechanization_bRn2</name>
      <anchorfile>a04503.html</anchorfile>
      <anchor>ae600cdbf5e6bb7c0854eff7552d06f0a</anchor>
      <arglist>(const Rot3 &amp;initial_bRn=Rot3(), const Vector3 &amp;initial_x_g=Z_3x1, const Vector3 &amp;initial_x_a=Z_3x1)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Mechanization_bRn2</name>
      <anchorfile>a04503.html</anchorfile>
      <anchor>a067da54e2c94ac735e985ff1d2f23c9e</anchor>
      <arglist>(const Mechanization_bRn2 &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>Vector3</type>
      <name>b_g</name>
      <anchorfile>a04503.html</anchorfile>
      <anchor>ab31b64fdf01995eb3d3ffb25b9765b2d</anchor>
      <arglist>(double g_e) const</arglist>
    </member>
    <member kind="function">
      <type>Mechanization_bRn2</type>
      <name>correct</name>
      <anchorfile>a04503.html</anchorfile>
      <anchor>a4e21eb7cd1689e8a1b47d1dec5f7aa0c</anchor>
      <arglist>(const Vector9 &amp;dx) const</arglist>
    </member>
    <member kind="function">
      <type>Mechanization_bRn2</type>
      <name>integrate</name>
      <anchorfile>a04503.html</anchorfile>
      <anchor>ab01e93fa4d4885f5a899235463f54876</anchor>
      <arglist>(const Vector3 &amp;u, const double dt) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>a04503.html</anchorfile>
      <anchor>a6cbf56218ccbbc0a1da0d4a2049a9988</anchor>
      <arglist>(const std::string &amp;s=&quot;&quot;) const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Mechanization_bRn2</type>
      <name>initializeVector</name>
      <anchorfile>a04503.html</anchorfile>
      <anchor>a356446b60e10116679dfe65fc0e06bae</anchor>
      <arglist>(const std::list&lt; Vector &gt; &amp;U, const std::list&lt; Vector &gt; &amp;F, const double g_e=0, bool flat=false)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Mechanization_bRn2</type>
      <name>initialize</name>
      <anchorfile>a04503.html</anchorfile>
      <anchor>adcc8608ae50bbb183e8efc38ce1a7900</anchor>
      <arglist>(const Matrix &amp;U, const Matrix &amp;F, const double g_e=0, bool flat=false)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::MetisIndex</name>
    <filename>a03027.html</filename>
    <member kind="function">
      <type></type>
      <name>MetisIndex</name>
      <anchorfile>a03027.html</anchorfile>
      <anchor>a1969389ac1418955a2d2763fe3d49fd6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>augment</name>
      <anchorfile>a03027.html</anchorfile>
      <anchor>a6b967746dd481508a4ef054a56043df9</anchor>
      <arglist>(const FactorGraph&lt; FACTOR &gt; &amp;factors)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>gtsam::multiplicative_group_tag</name>
    <filename>a02051.html</filename>
  </compound>
  <compound kind="struct">
    <name>gtsam::MultiplyWithInverse</name>
    <filename>a02143.html</filename>
    <templarg>N</templarg>
    <member kind="function">
      <type>VectorN</type>
      <name>operator()</name>
      <anchorfile>a02143.html</anchorfile>
      <anchor>a45be31afb639bbb371651691d57818fe</anchor>
      <arglist>(const MatrixN &amp;A, const VectorN &amp;b, OptionalJacobian&lt; N, N *N &gt; H1=boost::none, OptionalJacobian&lt; N, N &gt; H2=boost::none) const</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>gtsam::MultiplyWithInverseFunction</name>
    <filename>a02147.html</filename>
    <templarg></templarg>
    <templarg>N</templarg>
    <member kind="function">
      <type></type>
      <name>MultiplyWithInverseFunction</name>
      <anchorfile>a02147.html</anchorfile>
      <anchor>af22fec3bfb7858ad0eb9bfe19bf1329e</anchor>
      <arglist>(const Operator &amp;phi)</arglist>
    </member>
    <member kind="function">
      <type>VectorN</type>
      <name>operator()</name>
      <anchorfile>a02147.html</anchorfile>
      <anchor>a8d632e9f7d98ecdcfb72a67ecfb4f103</anchor>
      <arglist>(const T &amp;a, const VectorN &amp;b, OptionalJacobian&lt; N, M &gt; H1=boost::none, OptionalJacobian&lt; N, N &gt; H2=boost::none) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::MultiProjectionFactor</name>
    <filename>a04507.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <base>gtsam::NoiseModelFactor</base>
    <member kind="function">
      <type></type>
      <name>MultiProjectionFactor</name>
      <anchorfile>a04507.html</anchorfile>
      <anchor>a3bc577127465810c9e1f9701a48ea9a6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MultiProjectionFactor</name>
      <anchorfile>a04507.html</anchorfile>
      <anchor>a7fc8d7c97680b073749a232998d10aae</anchor>
      <arglist>(const Vector &amp;measured, const SharedNoiseModel &amp;model, KeySet poseKeys, Key pointKey, const boost::shared_ptr&lt; CALIBRATION &gt; &amp;K, boost::optional&lt; POSE &gt; body_P_sensor=boost::none)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MultiProjectionFactor</name>
      <anchorfile>a04507.html</anchorfile>
      <anchor>a34e49a07ea3fda26a104d2ad56c4bac3</anchor>
      <arglist>(const Vector &amp;measured, const SharedNoiseModel &amp;model, KeySet poseKeys, Key pointKey, const boost::shared_ptr&lt; CALIBRATION &gt; &amp;K, bool throwCheirality, bool verboseCheirality, boost::optional&lt; POSE &gt; body_P_sensor=boost::none)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~MultiProjectionFactor</name>
      <anchorfile>a04507.html</anchorfile>
      <anchor>a8ca48b9680dc195f1d587f56d1fdbb72</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual NonlinearFactor::shared_ptr</type>
      <name>clone</name>
      <anchorfile>a04507.html</anchorfile>
      <anchor>ad47a177ea706c3bb20b6a7c2e3d2de8b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>a04507.html</anchorfile>
      <anchor>acde9d0458d32e63730ca2763867edad9</anchor>
      <arglist>(const std::string &amp;s=&quot;&quot;, const KeyFormatter &amp;keyFormatter=DefaultKeyFormatter) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>equals</name>
      <anchorfile>a04507.html</anchorfile>
      <anchor>a6ce4b5ab6ee4b02ff8ec285a1c33aab2</anchor>
      <arglist>(const NonlinearFactor &amp;p, double tol=1e-9) const</arglist>
    </member>
    <member kind="function">
      <type>Vector</type>
      <name>unwhitenedError</name>
      <anchorfile>a04507.html</anchorfile>
      <anchor>ad56b7c139e220f1205635b0a1e43fe0c</anchor>
      <arglist>(const Values &amp;x, boost::optional&lt; std::vector&lt; Matrix &gt; &amp; &gt; H=boost::none) const</arglist>
    </member>
    <member kind="function">
      <type>const Vector &amp;</type>
      <name>measured</name>
      <anchorfile>a04507.html</anchorfile>
      <anchor>a807d28de0f091835e6a3f1a61c6c1090</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const boost::shared_ptr&lt; CALIBRATION &gt;</type>
      <name>calibration</name>
      <anchorfile>a04507.html</anchorfile>
      <anchor>a56400a228b0125d5e4a06d7e2b9e867b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>verboseCheirality</name>
      <anchorfile>a04507.html</anchorfile>
      <anchor>ac0925c77fef8c616e6b9f526be629cdd</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>throwCheirality</name>
      <anchorfile>a04507.html</anchorfile>
      <anchor>a2b6c0646f1aa240251c6b37533629791</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="typedef">
      <type>NoiseModelFactor</type>
      <name>Base</name>
      <anchorfile>a04507.html</anchorfile>
      <anchor>a96a41b9891d16b6ce5f0bf80f505dd62</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>MultiProjectionFactor&lt; POSE, LANDMARK, CALIBRATION &gt;</type>
      <name>This</name>
      <anchorfile>a04507.html</anchorfile>
      <anchor>a2fd84aa829efcd0bcc1784ae62fc7f7a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; This &gt;</type>
      <name>shared_ptr</name>
      <anchorfile>a04507.html</anchorfile>
      <anchor>af5e79fe4c75bebb47cb7a742c2e2db8b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Vector</type>
      <name>measured_</name>
      <anchorfile>a04507.html</anchorfile>
      <anchor>aee577459b2f629f11adba5f97d834f98</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>boost::shared_ptr&lt; CALIBRATION &gt;</type>
      <name>K_</name>
      <anchorfile>a04507.html</anchorfile>
      <anchor>aa6ee9db44e0b3cf847f4985809eb8be0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>boost::optional&lt; POSE &gt;</type>
      <name>body_P_sensor_</name>
      <anchorfile>a04507.html</anchorfile>
      <anchor>a1cf9b7f12e7b5c4a18cdf0821ea39c3a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>throwCheirality_</name>
      <anchorfile>a04507.html</anchorfile>
      <anchor>a84554cb8d86304fb490899163288e78e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>verboseCheirality_</name>
      <anchorfile>a04507.html</anchorfile>
      <anchor>ab84a4cb5f008ffebbe4c38a01abfea12</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>boost::serialization::access</name>
      <anchorfile>a04507.html</anchorfile>
      <anchor>ac98d07dd8f7b70e16ccb9a01abf56b9c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::NavState</name>
    <filename>a03507.html</filename>
    <member kind="function">
      <type></type>
      <name>NavState</name>
      <anchorfile>a03507.html</anchorfile>
      <anchor>a071b7ef082393fab89cf6d80d19c0cd3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>NavState</name>
      <anchorfile>a03507.html</anchorfile>
      <anchor>a54a1a1b9c7946d32ae2aae70edff9d24</anchor>
      <arglist>(const Rot3 &amp;R, const Point3 &amp;t, const Velocity3 &amp;v)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>NavState</name>
      <anchorfile>a03507.html</anchorfile>
      <anchor>a6b70be99390c6bcd2acf6e4af81c79f6</anchor>
      <arglist>(const Pose3 &amp;pose, const Velocity3 &amp;v)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>NavState</name>
      <anchorfile>a03507.html</anchorfile>
      <anchor>a80391746cd4638fd8a104c6db8368b2f</anchor>
      <arglist>(const Matrix3 &amp;R, const Vector9 tv)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static NavState</type>
      <name>Create</name>
      <anchorfile>a03507.html</anchorfile>
      <anchor>a427fdcd1b121d4664b0cbed24ff91f30</anchor>
      <arglist>(const Rot3 &amp;R, const Point3 &amp;t, const Velocity3 &amp;v, OptionalJacobian&lt; 9, 3 &gt; H1, OptionalJacobian&lt; 9, 3 &gt; H2, OptionalJacobian&lt; 9, 3 &gt; H3)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static NavState</type>
      <name>FromPoseVelocity</name>
      <anchorfile>a03507.html</anchorfile>
      <anchor>af646c47e90caa49c8f87c39eeb83bb1e</anchor>
      <arglist>(const Pose3 &amp;pose, const Vector3 &amp;vel, OptionalJacobian&lt; 9, 6 &gt; H1, OptionalJacobian&lt; 9, 3 &gt; H2)</arglist>
    </member>
    <member kind="function">
      <type>Matrix3</type>
      <name>R</name>
      <anchorfile>a03507.html</anchorfile>
      <anchor>a5d380bc53c23a5ace7cf9536a9c7e171</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Quaternion</type>
      <name>quaternion</name>
      <anchorfile>a03507.html</anchorfile>
      <anchor>aa0bdee90f949dc61e8e9ce0c631b0809</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Vector3</type>
      <name>t</name>
      <anchorfile>a03507.html</anchorfile>
      <anchor>a70316c7d1f14ac7576af31da54da6065</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Vector3 &amp;</type>
      <name>v</name>
      <anchorfile>a03507.html</anchorfile>
      <anchor>af61b8ae7b1a6eb174e97803b40a4f5d4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Matrix7</type>
      <name>matrix</name>
      <anchorfile>a03507.html</anchorfile>
      <anchor>ac1d0d44a05b2f1f301cc0de223e9236d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="friend">
      <type>GTSAM_EXPORT friend std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a03507.html</anchorfile>
      <anchor>acab5321d805ff0954ec3b586977e4efb</anchor>
      <arglist>(std::ostream &amp;os, const NavState &amp;state)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>a03507.html</anchorfile>
      <anchor>a96e05e58d5a866fb5adb3733398bc865</anchor>
      <arglist>(const std::string &amp;s=&quot;&quot;) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>equals</name>
      <anchorfile>a03507.html</anchorfile>
      <anchor>a2f4d89924b733b8e38b48a63c35cae06</anchor>
      <arglist>(const NavState &amp;other, double tol=1e-8) const</arglist>
    </member>
    <member kind="function">
      <type>NavState</type>
      <name>retract</name>
      <anchorfile>a03507.html</anchorfile>
      <anchor>aa7b09432d17b90e204a7a70705033c35</anchor>
      <arglist>(const Vector9 &amp;v, OptionalJacobian&lt; 9, 9 &gt; H1=boost::none, OptionalJacobian&lt; 9, 9 &gt; H2=boost::none) const</arglist>
    </member>
    <member kind="function">
      <type>Vector9</type>
      <name>localCoordinates</name>
      <anchorfile>a03507.html</anchorfile>
      <anchor>a171cf3f73c659cce019a08f0945d4c7a</anchor>
      <arglist>(const NavState &amp;g, OptionalJacobian&lt; 9, 9 &gt; H1=boost::none, OptionalJacobian&lt; 9, 9 &gt; H2=boost::none) const</arglist>
    </member>
    <member kind="function">
      <type>NavState</type>
      <name>update</name>
      <anchorfile>a03507.html</anchorfile>
      <anchor>a5494db1f41c8a61acc2d63c32b9adc31</anchor>
      <arglist>(const Vector3 &amp;b_acceleration, const Vector3 &amp;b_omega, const double dt, OptionalJacobian&lt; 9, 9 &gt; F, OptionalJacobian&lt; 9, 3 &gt; G1, OptionalJacobian&lt; 9, 3 &gt; G2) const</arglist>
    </member>
    <member kind="function">
      <type>Vector9</type>
      <name>coriolis</name>
      <anchorfile>a03507.html</anchorfile>
      <anchor>ac5bb08fc702c2efb6e07b22ccce6f0c8</anchor>
      <arglist>(double dt, const Vector3 &amp;omega, bool secondOrder=false, OptionalJacobian&lt; 9, 9 &gt; H=boost::none) const</arglist>
    </member>
    <member kind="function">
      <type>Vector9</type>
      <name>correctPIM</name>
      <anchorfile>a03507.html</anchorfile>
      <anchor>acc621f24a423d613ceaad961429d4ce6</anchor>
      <arglist>(const Vector9 &amp;pim, double dt, const Vector3 &amp;n_gravity, const boost::optional&lt; Vector3 &gt; &amp;omegaCoriolis, bool use2ndOrderCoriolis=false, OptionalJacobian&lt; 9, 9 &gt; H1=boost::none, OptionalJacobian&lt; 9, 9 &gt; H2=boost::none) const</arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>boost::serialization::access</name>
      <anchorfile>a03507.html</anchorfile>
      <anchor>ac98d07dd8f7b70e16ccb9a01abf56b9c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>Matrix3</type>
      <name>R</name>
      <anchorfile>a03507.html</anchorfile>
      <anchor>a5d380bc53c23a5ace7cf9536a9c7e171</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Quaternion</type>
      <name>quaternion</name>
      <anchorfile>a03507.html</anchorfile>
      <anchor>aa0bdee90f949dc61e8e9ce0c631b0809</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Vector3</type>
      <name>t</name>
      <anchorfile>a03507.html</anchorfile>
      <anchor>a70316c7d1f14ac7576af31da54da6065</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Vector3 &amp;</type>
      <name>v</name>
      <anchorfile>a03507.html</anchorfile>
      <anchor>af61b8ae7b1a6eb174e97803b40a4f5d4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Matrix7</type>
      <name>matrix</name>
      <anchorfile>a03507.html</anchorfile>
      <anchor>ac1d0d44a05b2f1f301cc0de223e9236d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>NavState</type>
      <name>update</name>
      <anchorfile>a03507.html</anchorfile>
      <anchor>a5494db1f41c8a61acc2d63c32b9adc31</anchor>
      <arglist>(const Vector3 &amp;b_acceleration, const Vector3 &amp;b_omega, const double dt, OptionalJacobian&lt; 9, 9 &gt; F, OptionalJacobian&lt; 9, 3 &gt; G1, OptionalJacobian&lt; 9, 3 &gt; G2) const</arglist>
    </member>
    <member kind="function">
      <type>Vector9</type>
      <name>coriolis</name>
      <anchorfile>a03507.html</anchorfile>
      <anchor>ac5bb08fc702c2efb6e07b22ccce6f0c8</anchor>
      <arglist>(double dt, const Vector3 &amp;omega, bool secondOrder=false, OptionalJacobian&lt; 9, 9 &gt; H=boost::none) const</arglist>
    </member>
    <member kind="function">
      <type>Vector9</type>
      <name>correctPIM</name>
      <anchorfile>a03507.html</anchorfile>
      <anchor>acc621f24a423d613ceaad961429d4ce6</anchor>
      <arglist>(const Vector9 &amp;pim, double dt, const Vector3 &amp;n_gravity, const boost::optional&lt; Vector3 &gt; &amp;omegaCoriolis, bool use2ndOrderCoriolis=false, OptionalJacobian&lt; 9, 9 &gt; H1=boost::none, OptionalJacobian&lt; 9, 9 &gt; H2=boost::none) const</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>gtsam::EliminationTree::Node</name>
    <filename>a02947.html</filename>
    <member kind="variable">
      <type>Key</type>
      <name>key</name>
      <anchorfile>a02947.html</anchorfile>
      <anchor>a725807c0f6a2b62cea3626dec4d12d24</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Factors</type>
      <name>factors</name>
      <anchorfile>a02947.html</anchorfile>
      <anchor>ae4ed45ec77035fd0c0cc91696276ea8f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Children</type>
      <name>children</name>
      <anchorfile>a02947.html</anchorfile>
      <anchor>ad6730594a7070d7cc565e0bdfcc4d699</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::DecisionTree::Node</name>
    <filename>a02363.html</filename>
  </compound>
  <compound kind="class">
    <name>gtsam::NoiseModelFactor</name>
    <filename>a03763.html</filename>
    <base>gtsam::NonlinearFactor</base>
    <member kind="function">
      <type></type>
      <name>NoiseModelFactor</name>
      <anchorfile>a03763.html</anchorfile>
      <anchor>ad6e8ef3348e042d598617d1d55f20300</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~NoiseModelFactor</name>
      <anchorfile>a03763.html</anchorfile>
      <anchor>ae1ed5e0fa6c471b57172f7ebaf552187</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>NoiseModelFactor</name>
      <anchorfile>a03763.html</anchorfile>
      <anchor>a02cea97db30d27b51feaf1f0444d743c</anchor>
      <arglist>(const SharedNoiseModel &amp;noiseModel, const CONTAINER &amp;keys)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>print</name>
      <anchorfile>a03763.html</anchorfile>
      <anchor>a02a32f969ab52d738a7b0ed22c64ee20</anchor>
      <arglist>(const std::string &amp;s=&quot;&quot;, const KeyFormatter &amp;keyFormatter=DefaultKeyFormatter) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>equals</name>
      <anchorfile>a03763.html</anchorfile>
      <anchor>a2f30b47f7df8b9b35159615810c248d8</anchor>
      <arglist>(const NonlinearFactor &amp;f, double tol=1e-9) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual size_t</type>
      <name>dim</name>
      <anchorfile>a03763.html</anchorfile>
      <anchor>af3add8fb438303633310341ba5e1f170</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const SharedNoiseModel &amp;</type>
      <name>noiseModel</name>
      <anchorfile>a03763.html</anchorfile>
      <anchor>ab43ae9bf3555c690ad2ad384e0a6a348</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual Vector</type>
      <name>unwhitenedError</name>
      <anchorfile>a03763.html</anchorfile>
      <anchor>afd61874915a8076bf83f9d8311fc0e26</anchor>
      <arglist>(const Values &amp;x, boost::optional&lt; std::vector&lt; Matrix &gt; &amp; &gt; H=boost::none) const =0</arglist>
    </member>
    <member kind="function">
      <type>Vector</type>
      <name>whitenedError</name>
      <anchorfile>a03763.html</anchorfile>
      <anchor>addfc2a7b595961339be70ab10d51759a</anchor>
      <arglist>(const Values &amp;c) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>error</name>
      <anchorfile>a03763.html</anchorfile>
      <anchor>adc41b49855bea50b15ccd76ea9fa521e</anchor>
      <arglist>(const Values &amp;c) const</arglist>
    </member>
    <member kind="function">
      <type>boost::shared_ptr&lt; GaussianFactor &gt;</type>
      <name>linearize</name>
      <anchorfile>a03763.html</anchorfile>
      <anchor>ad4de3db1101321c142d11700d6edcf50</anchor>
      <arglist>(const Values &amp;x) const</arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; This &gt;</type>
      <name>shared_ptr</name>
      <anchorfile>a03763.html</anchorfile>
      <anchor>a762f6984cfd67b1e83cc530d71093dcf</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>NoiseModelFactor</name>
      <anchorfile>a03763.html</anchorfile>
      <anchor>a4605224417029e9dc58c5267efa9a46d</anchor>
      <arglist>(const SharedNoiseModel &amp;noiseModel)</arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>boost::serialization::access</name>
      <anchorfile>a03763.html</anchorfile>
      <anchor>ac98d07dd8f7b70e16ccb9a01abf56b9c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::NoiseModelFactor1</name>
    <filename>a03767.html</filename>
    <templarg>VALUE</templarg>
    <base>gtsam::NoiseModelFactor</base>
    <member kind="function">
      <type></type>
      <name>NoiseModelFactor1</name>
      <anchorfile>a03767.html</anchorfile>
      <anchor>a85c649f81b216f5b5d7e321febc7762c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>NoiseModelFactor1</name>
      <anchorfile>a03767.html</anchorfile>
      <anchor>a70a0b32dd5feba3631815614d8386c86</anchor>
      <arglist>(const SharedNoiseModel &amp;noiseModel, Key key1)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Vector</type>
      <name>unwhitenedError</name>
      <anchorfile>a03767.html</anchorfile>
      <anchor>a403200b408a8bb8ec0a5c06af8f2b20d</anchor>
      <arglist>(const Values &amp;x, boost::optional&lt; std::vector&lt; Matrix &gt; &amp; &gt; H=boost::none) const</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual Vector</type>
      <name>evaluateError</name>
      <anchorfile>a03767.html</anchorfile>
      <anchor>a42ed690bfeafe79ab396126886b05820</anchor>
      <arglist>(const X &amp;x, boost::optional&lt; Matrix &amp; &gt; H=boost::none) const =0</arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>boost::serialization::access</name>
      <anchorfile>a03767.html</anchorfile>
      <anchor>ac98d07dd8f7b70e16ccb9a01abf56b9c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>NoiseModelFactor1&lt; EssentialMatrix &gt;</name>
    <filename>a03767.html</filename>
    <base>gtsam::NoiseModelFactor</base>
    <member kind="function">
      <type></type>
      <name>NoiseModelFactor1</name>
      <anchorfile>a03767.html</anchorfile>
      <anchor>a85c649f81b216f5b5d7e321febc7762c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>NoiseModelFactor1</name>
      <anchorfile>a03767.html</anchorfile>
      <anchor>a70a0b32dd5feba3631815614d8386c86</anchor>
      <arglist>(const SharedNoiseModel &amp;noiseModel, Key key1)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Vector</type>
      <name>unwhitenedError</name>
      <anchorfile>a03767.html</anchorfile>
      <anchor>a403200b408a8bb8ec0a5c06af8f2b20d</anchor>
      <arglist>(const Values &amp;x, boost::optional&lt; std::vector&lt; Matrix &gt; &amp; &gt; H=boost::none) const</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual Vector</type>
      <name>evaluateError</name>
      <anchorfile>a03767.html</anchorfile>
      <anchor>a42ed690bfeafe79ab396126886b05820</anchor>
      <arglist>(const X &amp;x, boost::optional&lt; Matrix &amp; &gt; H=boost::none) const=0</arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>boost::serialization::access</name>
      <anchorfile>a03767.html</anchorfile>
      <anchor>ac98d07dd8f7b70e16ccb9a01abf56b9c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>NoiseModelFactor1&lt; NavState &gt;</name>
    <filename>a03767.html</filename>
    <base>gtsam::NoiseModelFactor</base>
    <member kind="function">
      <type></type>
      <name>NoiseModelFactor1</name>
      <anchorfile>a03767.html</anchorfile>
      <anchor>a85c649f81b216f5b5d7e321febc7762c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>NoiseModelFactor1</name>
      <anchorfile>a03767.html</anchorfile>
      <anchor>a70a0b32dd5feba3631815614d8386c86</anchor>
      <arglist>(const SharedNoiseModel &amp;noiseModel, Key key1)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Vector</type>
      <name>unwhitenedError</name>
      <anchorfile>a03767.html</anchorfile>
      <anchor>a403200b408a8bb8ec0a5c06af8f2b20d</anchor>
      <arglist>(const Values &amp;x, boost::optional&lt; std::vector&lt; Matrix &gt; &amp; &gt; H=boost::none) const</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual Vector</type>
      <name>evaluateError</name>
      <anchorfile>a03767.html</anchorfile>
      <anchor>a42ed690bfeafe79ab396126886b05820</anchor>
      <arglist>(const X &amp;x, boost::optional&lt; Matrix &amp; &gt; H=boost::none) const=0</arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>boost::serialization::access</name>
      <anchorfile>a03767.html</anchorfile>
      <anchor>ac98d07dd8f7b70e16ccb9a01abf56b9c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>NoiseModelFactor1&lt; OrientedPlane3 &gt;</name>
    <filename>a03767.html</filename>
    <base>gtsam::NoiseModelFactor</base>
    <member kind="function">
      <type></type>
      <name>NoiseModelFactor1</name>
      <anchorfile>a03767.html</anchorfile>
      <anchor>a85c649f81b216f5b5d7e321febc7762c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>NoiseModelFactor1</name>
      <anchorfile>a03767.html</anchorfile>
      <anchor>a70a0b32dd5feba3631815614d8386c86</anchor>
      <arglist>(const SharedNoiseModel &amp;noiseModel, Key key1)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Vector</type>
      <name>unwhitenedError</name>
      <anchorfile>a03767.html</anchorfile>
      <anchor>a403200b408a8bb8ec0a5c06af8f2b20d</anchor>
      <arglist>(const Values &amp;x, boost::optional&lt; std::vector&lt; Matrix &gt; &amp; &gt; H=boost::none) const</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual Vector</type>
      <name>evaluateError</name>
      <anchorfile>a03767.html</anchorfile>
      <anchor>a42ed690bfeafe79ab396126886b05820</anchor>
      <arglist>(const X &amp;x, boost::optional&lt; Matrix &amp; &gt; H=boost::none) const=0</arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>boost::serialization::access</name>
      <anchorfile>a03767.html</anchorfile>
      <anchor>ac98d07dd8f7b70e16ccb9a01abf56b9c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>NoiseModelFactor1&lt; Point3 &gt;</name>
    <filename>a03767.html</filename>
    <base>gtsam::NoiseModelFactor</base>
    <member kind="function">
      <type></type>
      <name>NoiseModelFactor1</name>
      <anchorfile>a03767.html</anchorfile>
      <anchor>a85c649f81b216f5b5d7e321febc7762c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>NoiseModelFactor1</name>
      <anchorfile>a03767.html</anchorfile>
      <anchor>a70a0b32dd5feba3631815614d8386c86</anchor>
      <arglist>(const SharedNoiseModel &amp;noiseModel, Key key1)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Vector</type>
      <name>unwhitenedError</name>
      <anchorfile>a03767.html</anchorfile>
      <anchor>a403200b408a8bb8ec0a5c06af8f2b20d</anchor>
      <arglist>(const Values &amp;x, boost::optional&lt; std::vector&lt; Matrix &gt; &amp; &gt; H=boost::none) const</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual Vector</type>
      <name>evaluateError</name>
      <anchorfile>a03767.html</anchorfile>
      <anchor>a42ed690bfeafe79ab396126886b05820</anchor>
      <arglist>(const X &amp;x, boost::optional&lt; Matrix &amp; &gt; H=boost::none) const=0</arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>boost::serialization::access</name>
      <anchorfile>a03767.html</anchorfile>
      <anchor>ac98d07dd8f7b70e16ccb9a01abf56b9c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>NoiseModelFactor1&lt; POSE &gt;</name>
    <filename>a03767.html</filename>
    <base>gtsam::NoiseModelFactor</base>
    <member kind="function">
      <type></type>
      <name>NoiseModelFactor1</name>
      <anchorfile>a03767.html</anchorfile>
      <anchor>a85c649f81b216f5b5d7e321febc7762c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>NoiseModelFactor1</name>
      <anchorfile>a03767.html</anchorfile>
      <anchor>a70a0b32dd5feba3631815614d8386c86</anchor>
      <arglist>(const SharedNoiseModel &amp;noiseModel, Key key1)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Vector</type>
      <name>unwhitenedError</name>
      <anchorfile>a03767.html</anchorfile>
      <anchor>a403200b408a8bb8ec0a5c06af8f2b20d</anchor>
      <arglist>(const Values &amp;x, boost::optional&lt; std::vector&lt; Matrix &gt; &amp; &gt; H=boost::none) const</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual Vector</type>
      <name>evaluateError</name>
      <anchorfile>a03767.html</anchorfile>
      <anchor>a42ed690bfeafe79ab396126886b05820</anchor>
      <arglist>(const X &amp;x, boost::optional&lt; Matrix &amp; &gt; H=boost::none) const=0</arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>boost::serialization::access</name>
      <anchorfile>a03767.html</anchorfile>
      <anchor>ac98d07dd8f7b70e16ccb9a01abf56b9c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>NoiseModelFactor1&lt; Pose3 &gt;</name>
    <filename>a03767.html</filename>
    <base>gtsam::NoiseModelFactor</base>
    <member kind="function">
      <type></type>
      <name>NoiseModelFactor1</name>
      <anchorfile>a03767.html</anchorfile>
      <anchor>a85c649f81b216f5b5d7e321febc7762c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>NoiseModelFactor1</name>
      <anchorfile>a03767.html</anchorfile>
      <anchor>a70a0b32dd5feba3631815614d8386c86</anchor>
      <arglist>(const SharedNoiseModel &amp;noiseModel, Key key1)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Vector</type>
      <name>unwhitenedError</name>
      <anchorfile>a03767.html</anchorfile>
      <anchor>a403200b408a8bb8ec0a5c06af8f2b20d</anchor>
      <arglist>(const Values &amp;x, boost::optional&lt; std::vector&lt; Matrix &gt; &amp; &gt; H=boost::none) const</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual Vector</type>
      <name>evaluateError</name>
      <anchorfile>a03767.html</anchorfile>
      <anchor>a42ed690bfeafe79ab396126886b05820</anchor>
      <arglist>(const X &amp;x, boost::optional&lt; Matrix &amp; &gt; H=boost::none) const=0</arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>boost::serialization::access</name>
      <anchorfile>a03767.html</anchorfile>
      <anchor>ac98d07dd8f7b70e16ccb9a01abf56b9c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>NoiseModelFactor1&lt; PoseRTV &gt;</name>
    <filename>a03767.html</filename>
    <base>gtsam::NoiseModelFactor</base>
    <member kind="function">
      <type></type>
      <name>NoiseModelFactor1</name>
      <anchorfile>a03767.html</anchorfile>
      <anchor>a85c649f81b216f5b5d7e321febc7762c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>NoiseModelFactor1</name>
      <anchorfile>a03767.html</anchorfile>
      <anchor>a70a0b32dd5feba3631815614d8386c86</anchor>
      <arglist>(const SharedNoiseModel &amp;noiseModel, Key key1)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Vector</type>
      <name>unwhitenedError</name>
      <anchorfile>a03767.html</anchorfile>
      <anchor>a403200b408a8bb8ec0a5c06af8f2b20d</anchor>
      <arglist>(const Values &amp;x, boost::optional&lt; std::vector&lt; Matrix &gt; &amp; &gt; H=boost::none) const</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual Vector</type>
      <name>evaluateError</name>
      <anchorfile>a03767.html</anchorfile>
      <anchor>a42ed690bfeafe79ab396126886b05820</anchor>
      <arglist>(const X &amp;x, boost::optional&lt; Matrix &amp; &gt; H=boost::none) const=0</arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>boost::serialization::access</name>
      <anchorfile>a03767.html</anchorfile>
      <anchor>ac98d07dd8f7b70e16ccb9a01abf56b9c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>NoiseModelFactor1&lt; Rot2 &gt;</name>
    <filename>a03767.html</filename>
    <base>gtsam::NoiseModelFactor</base>
    <member kind="function">
      <type></type>
      <name>NoiseModelFactor1</name>
      <anchorfile>a03767.html</anchorfile>
      <anchor>a85c649f81b216f5b5d7e321febc7762c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>NoiseModelFactor1</name>
      <anchorfile>a03767.html</anchorfile>
      <anchor>a70a0b32dd5feba3631815614d8386c86</anchor>
      <arglist>(const SharedNoiseModel &amp;noiseModel, Key key1)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Vector</type>
      <name>unwhitenedError</name>
      <anchorfile>a03767.html</anchorfile>
      <anchor>a403200b408a8bb8ec0a5c06af8f2b20d</anchor>
      <arglist>(const Values &amp;x, boost::optional&lt; std::vector&lt; Matrix &gt; &amp; &gt; H=boost::none) const</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual Vector</type>
      <name>evaluateError</name>
      <anchorfile>a03767.html</anchorfile>
      <anchor>a42ed690bfeafe79ab396126886b05820</anchor>
      <arglist>(const X &amp;x, boost::optional&lt; Matrix &amp; &gt; H=boost::none) const=0</arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>boost::serialization::access</name>
      <anchorfile>a03767.html</anchorfile>
      <anchor>ac98d07dd8f7b70e16ccb9a01abf56b9c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>NoiseModelFactor1&lt; Rot3 &gt;</name>
    <filename>a03767.html</filename>
    <base>gtsam::NoiseModelFactor</base>
    <member kind="function">
      <type></type>
      <name>NoiseModelFactor1</name>
      <anchorfile>a03767.html</anchorfile>
      <anchor>a85c649f81b216f5b5d7e321febc7762c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>NoiseModelFactor1</name>
      <anchorfile>a03767.html</anchorfile>
      <anchor>a70a0b32dd5feba3631815614d8386c86</anchor>
      <arglist>(const SharedNoiseModel &amp;noiseModel, Key key1)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Vector</type>
      <name>unwhitenedError</name>
      <anchorfile>a03767.html</anchorfile>
      <anchor>a403200b408a8bb8ec0a5c06af8f2b20d</anchor>
      <arglist>(const Values &amp;x, boost::optional&lt; std::vector&lt; Matrix &gt; &amp; &gt; H=boost::none) const</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual Vector</type>
      <name>evaluateError</name>
      <anchorfile>a03767.html</anchorfile>
      <anchor>a42ed690bfeafe79ab396126886b05820</anchor>
      <arglist>(const X &amp;x, boost::optional&lt; Matrix &amp; &gt; H=boost::none) const=0</arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>boost::serialization::access</name>
      <anchorfile>a03767.html</anchorfile>
      <anchor>ac98d07dd8f7b70e16ccb9a01abf56b9c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::NoiseModelFactor2</name>
    <filename>a03771.html</filename>
    <templarg>VALUE1</templarg>
    <templarg>VALUE2</templarg>
    <base>gtsam::NoiseModelFactor</base>
    <member kind="function">
      <type></type>
      <name>NoiseModelFactor2</name>
      <anchorfile>a03771.html</anchorfile>
      <anchor>a04f5873776c784cafd55b4ac05b4b757</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>NoiseModelFactor2</name>
      <anchorfile>a03771.html</anchorfile>
      <anchor>a35453b054509f5679a29a06b59340cf1</anchor>
      <arglist>(const SharedNoiseModel &amp;noiseModel, Key j1, Key j2)</arglist>
    </member>
    <member kind="function">
      <type>Key</type>
      <name>key1</name>
      <anchorfile>a03771.html</anchorfile>
      <anchor>a6fb96c2753a88e1e214b450cfda19e21</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Vector</type>
      <name>unwhitenedError</name>
      <anchorfile>a03771.html</anchorfile>
      <anchor>a5f2aec3026c4d017372be8faf25a5c03</anchor>
      <arglist>(const Values &amp;x, boost::optional&lt; std::vector&lt; Matrix &gt; &amp; &gt; H=boost::none) const</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual Vector</type>
      <name>evaluateError</name>
      <anchorfile>a03771.html</anchorfile>
      <anchor>a9aa6dcd7db6734479e2212213b021ec1</anchor>
      <arglist>(const X1 &amp;, const X2 &amp;, boost::optional&lt; Matrix &amp; &gt; H1=boost::none, boost::optional&lt; Matrix &amp; &gt; H2=boost::none) const =0</arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>boost::serialization::access</name>
      <anchorfile>a03771.html</anchorfile>
      <anchor>ac98d07dd8f7b70e16ccb9a01abf56b9c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>NoiseModelFactor2&lt; CAMERA, LANDMARK &gt;</name>
    <filename>a03771.html</filename>
    <base>gtsam::NoiseModelFactor</base>
    <member kind="function">
      <type></type>
      <name>NoiseModelFactor2</name>
      <anchorfile>a03771.html</anchorfile>
      <anchor>a04f5873776c784cafd55b4ac05b4b757</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>NoiseModelFactor2</name>
      <anchorfile>a03771.html</anchorfile>
      <anchor>a35453b054509f5679a29a06b59340cf1</anchor>
      <arglist>(const SharedNoiseModel &amp;noiseModel, Key j1, Key j2)</arglist>
    </member>
    <member kind="function">
      <type>Key</type>
      <name>key1</name>
      <anchorfile>a03771.html</anchorfile>
      <anchor>a6fb96c2753a88e1e214b450cfda19e21</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Vector</type>
      <name>unwhitenedError</name>
      <anchorfile>a03771.html</anchorfile>
      <anchor>a5f2aec3026c4d017372be8faf25a5c03</anchor>
      <arglist>(const Values &amp;x, boost::optional&lt; std::vector&lt; Matrix &gt; &amp; &gt; H=boost::none) const</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual Vector</type>
      <name>evaluateError</name>
      <anchorfile>a03771.html</anchorfile>
      <anchor>a9aa6dcd7db6734479e2212213b021ec1</anchor>
      <arglist>(const X1 &amp;, const X2 &amp;, boost::optional&lt; Matrix &amp; &gt; H1=boost::none, boost::optional&lt; Matrix &amp; &gt; H2=boost::none) const=0</arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>boost::serialization::access</name>
      <anchorfile>a03771.html</anchorfile>
      <anchor>ac98d07dd8f7b70e16ccb9a01abf56b9c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>NoiseModelFactor2&lt; EssentialMatrix, double &gt;</name>
    <filename>a03771.html</filename>
    <base>gtsam::NoiseModelFactor</base>
    <member kind="function">
      <type></type>
      <name>NoiseModelFactor2</name>
      <anchorfile>a03771.html</anchorfile>
      <anchor>a04f5873776c784cafd55b4ac05b4b757</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>NoiseModelFactor2</name>
      <anchorfile>a03771.html</anchorfile>
      <anchor>a35453b054509f5679a29a06b59340cf1</anchor>
      <arglist>(const SharedNoiseModel &amp;noiseModel, Key j1, Key j2)</arglist>
    </member>
    <member kind="function">
      <type>Key</type>
      <name>key1</name>
      <anchorfile>a03771.html</anchorfile>
      <anchor>a6fb96c2753a88e1e214b450cfda19e21</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Vector</type>
      <name>unwhitenedError</name>
      <anchorfile>a03771.html</anchorfile>
      <anchor>a5f2aec3026c4d017372be8faf25a5c03</anchor>
      <arglist>(const Values &amp;x, boost::optional&lt; std::vector&lt; Matrix &gt; &amp; &gt; H=boost::none) const</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual Vector</type>
      <name>evaluateError</name>
      <anchorfile>a03771.html</anchorfile>
      <anchor>a9aa6dcd7db6734479e2212213b021ec1</anchor>
      <arglist>(const X1 &amp;, const X2 &amp;, boost::optional&lt; Matrix &amp; &gt; H1=boost::none, boost::optional&lt; Matrix &amp; &gt; H2=boost::none) const=0</arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>boost::serialization::access</name>
      <anchorfile>a03771.html</anchorfile>
      <anchor>ac98d07dd8f7b70e16ccb9a01abf56b9c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>NoiseModelFactor2&lt; Point3, Point3 &gt;</name>
    <filename>a03771.html</filename>
    <base>gtsam::NoiseModelFactor</base>
    <member kind="function">
      <type></type>
      <name>NoiseModelFactor2</name>
      <anchorfile>a03771.html</anchorfile>
      <anchor>a04f5873776c784cafd55b4ac05b4b757</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>NoiseModelFactor2</name>
      <anchorfile>a03771.html</anchorfile>
      <anchor>a35453b054509f5679a29a06b59340cf1</anchor>
      <arglist>(const SharedNoiseModel &amp;noiseModel, Key j1, Key j2)</arglist>
    </member>
    <member kind="function">
      <type>Key</type>
      <name>key1</name>
      <anchorfile>a03771.html</anchorfile>
      <anchor>a6fb96c2753a88e1e214b450cfda19e21</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Vector</type>
      <name>unwhitenedError</name>
      <anchorfile>a03771.html</anchorfile>
      <anchor>a5f2aec3026c4d017372be8faf25a5c03</anchor>
      <arglist>(const Values &amp;x, boost::optional&lt; std::vector&lt; Matrix &gt; &amp; &gt; H=boost::none) const</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual Vector</type>
      <name>evaluateError</name>
      <anchorfile>a03771.html</anchorfile>
      <anchor>a9aa6dcd7db6734479e2212213b021ec1</anchor>
      <arglist>(const X1 &amp;, const X2 &amp;, boost::optional&lt; Matrix &amp; &gt; H1=boost::none, boost::optional&lt; Matrix &amp; &gt; H2=boost::none) const=0</arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>boost::serialization::access</name>
      <anchorfile>a03771.html</anchorfile>
      <anchor>ac98d07dd8f7b70e16ccb9a01abf56b9c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>NoiseModelFactor2&lt; POSE, LANDMARK &gt;</name>
    <filename>a03771.html</filename>
    <base>gtsam::NoiseModelFactor</base>
    <member kind="function">
      <type></type>
      <name>NoiseModelFactor2</name>
      <anchorfile>a03771.html</anchorfile>
      <anchor>a04f5873776c784cafd55b4ac05b4b757</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>NoiseModelFactor2</name>
      <anchorfile>a03771.html</anchorfile>
      <anchor>a35453b054509f5679a29a06b59340cf1</anchor>
      <arglist>(const SharedNoiseModel &amp;noiseModel, Key j1, Key j2)</arglist>
    </member>
    <member kind="function">
      <type>Key</type>
      <name>key1</name>
      <anchorfile>a03771.html</anchorfile>
      <anchor>a6fb96c2753a88e1e214b450cfda19e21</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Vector</type>
      <name>unwhitenedError</name>
      <anchorfile>a03771.html</anchorfile>
      <anchor>a5f2aec3026c4d017372be8faf25a5c03</anchor>
      <arglist>(const Values &amp;x, boost::optional&lt; std::vector&lt; Matrix &gt; &amp; &gt; H=boost::none) const</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual Vector</type>
      <name>evaluateError</name>
      <anchorfile>a03771.html</anchorfile>
      <anchor>a9aa6dcd7db6734479e2212213b021ec1</anchor>
      <arglist>(const X1 &amp;, const X2 &amp;, boost::optional&lt; Matrix &amp; &gt; H1=boost::none, boost::optional&lt; Matrix &amp; &gt; H2=boost::none) const=0</arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>boost::serialization::access</name>
      <anchorfile>a03771.html</anchorfile>
      <anchor>ac98d07dd8f7b70e16ccb9a01abf56b9c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>NoiseModelFactor2&lt; POSE, POSE &gt;</name>
    <filename>a03771.html</filename>
    <base>gtsam::NoiseModelFactor</base>
    <member kind="function">
      <type></type>
      <name>NoiseModelFactor2</name>
      <anchorfile>a03771.html</anchorfile>
      <anchor>a04f5873776c784cafd55b4ac05b4b757</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>NoiseModelFactor2</name>
      <anchorfile>a03771.html</anchorfile>
      <anchor>a35453b054509f5679a29a06b59340cf1</anchor>
      <arglist>(const SharedNoiseModel &amp;noiseModel, Key j1, Key j2)</arglist>
    </member>
    <member kind="function">
      <type>Key</type>
      <name>key1</name>
      <anchorfile>a03771.html</anchorfile>
      <anchor>a6fb96c2753a88e1e214b450cfda19e21</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Vector</type>
      <name>unwhitenedError</name>
      <anchorfile>a03771.html</anchorfile>
      <anchor>a5f2aec3026c4d017372be8faf25a5c03</anchor>
      <arglist>(const Values &amp;x, boost::optional&lt; std::vector&lt; Matrix &gt; &amp; &gt; H=boost::none) const</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual Vector</type>
      <name>evaluateError</name>
      <anchorfile>a03771.html</anchorfile>
      <anchor>a9aa6dcd7db6734479e2212213b021ec1</anchor>
      <arglist>(const X1 &amp;, const X2 &amp;, boost::optional&lt; Matrix &amp; &gt; H1=boost::none, boost::optional&lt; Matrix &amp; &gt; H2=boost::none) const=0</arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>boost::serialization::access</name>
      <anchorfile>a03771.html</anchorfile>
      <anchor>ac98d07dd8f7b70e16ccb9a01abf56b9c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>NoiseModelFactor2&lt; Pose2, Point2 &gt;</name>
    <filename>a03771.html</filename>
    <base>gtsam::NoiseModelFactor</base>
    <member kind="function">
      <type></type>
      <name>NoiseModelFactor2</name>
      <anchorfile>a03771.html</anchorfile>
      <anchor>a04f5873776c784cafd55b4ac05b4b757</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>NoiseModelFactor2</name>
      <anchorfile>a03771.html</anchorfile>
      <anchor>a35453b054509f5679a29a06b59340cf1</anchor>
      <arglist>(const SharedNoiseModel &amp;noiseModel, Key j1, Key j2)</arglist>
    </member>
    <member kind="function">
      <type>Key</type>
      <name>key1</name>
      <anchorfile>a03771.html</anchorfile>
      <anchor>a6fb96c2753a88e1e214b450cfda19e21</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Vector</type>
      <name>unwhitenedError</name>
      <anchorfile>a03771.html</anchorfile>
      <anchor>a5f2aec3026c4d017372be8faf25a5c03</anchor>
      <arglist>(const Values &amp;x, boost::optional&lt; std::vector&lt; Matrix &gt; &amp; &gt; H=boost::none) const</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual Vector</type>
      <name>evaluateError</name>
      <anchorfile>a03771.html</anchorfile>
      <anchor>a9aa6dcd7db6734479e2212213b021ec1</anchor>
      <arglist>(const X1 &amp;, const X2 &amp;, boost::optional&lt; Matrix &amp; &gt; H1=boost::none, boost::optional&lt; Matrix &amp; &gt; H2=boost::none) const=0</arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>boost::serialization::access</name>
      <anchorfile>a03771.html</anchorfile>
      <anchor>ac98d07dd8f7b70e16ccb9a01abf56b9c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>NoiseModelFactor2&lt; Pose3, OrientedPlane3 &gt;</name>
    <filename>a03771.html</filename>
    <base>gtsam::NoiseModelFactor</base>
    <member kind="function">
      <type></type>
      <name>NoiseModelFactor2</name>
      <anchorfile>a03771.html</anchorfile>
      <anchor>a04f5873776c784cafd55b4ac05b4b757</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>NoiseModelFactor2</name>
      <anchorfile>a03771.html</anchorfile>
      <anchor>a35453b054509f5679a29a06b59340cf1</anchor>
      <arglist>(const SharedNoiseModel &amp;noiseModel, Key j1, Key j2)</arglist>
    </member>
    <member kind="function">
      <type>Key</type>
      <name>key1</name>
      <anchorfile>a03771.html</anchorfile>
      <anchor>a6fb96c2753a88e1e214b450cfda19e21</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Vector</type>
      <name>unwhitenedError</name>
      <anchorfile>a03771.html</anchorfile>
      <anchor>a5f2aec3026c4d017372be8faf25a5c03</anchor>
      <arglist>(const Values &amp;x, boost::optional&lt; std::vector&lt; Matrix &gt; &amp; &gt; H=boost::none) const</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual Vector</type>
      <name>evaluateError</name>
      <anchorfile>a03771.html</anchorfile>
      <anchor>a9aa6dcd7db6734479e2212213b021ec1</anchor>
      <arglist>(const X1 &amp;, const X2 &amp;, boost::optional&lt; Matrix &amp; &gt; H1=boost::none, boost::optional&lt; Matrix &amp; &gt; H2=boost::none) const=0</arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>boost::serialization::access</name>
      <anchorfile>a03771.html</anchorfile>
      <anchor>ac98d07dd8f7b70e16ccb9a01abf56b9c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>NoiseModelFactor2&lt; Pose3, Point3 &gt;</name>
    <filename>a03771.html</filename>
    <base>gtsam::NoiseModelFactor</base>
    <member kind="function">
      <type></type>
      <name>NoiseModelFactor2</name>
      <anchorfile>a03771.html</anchorfile>
      <anchor>a04f5873776c784cafd55b4ac05b4b757</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>NoiseModelFactor2</name>
      <anchorfile>a03771.html</anchorfile>
      <anchor>a35453b054509f5679a29a06b59340cf1</anchor>
      <arglist>(const SharedNoiseModel &amp;noiseModel, Key j1, Key j2)</arglist>
    </member>
    <member kind="function">
      <type>Key</type>
      <name>key1</name>
      <anchorfile>a03771.html</anchorfile>
      <anchor>a6fb96c2753a88e1e214b450cfda19e21</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Vector</type>
      <name>unwhitenedError</name>
      <anchorfile>a03771.html</anchorfile>
      <anchor>a5f2aec3026c4d017372be8faf25a5c03</anchor>
      <arglist>(const Values &amp;x, boost::optional&lt; std::vector&lt; Matrix &gt; &amp; &gt; H=boost::none) const</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual Vector</type>
      <name>evaluateError</name>
      <anchorfile>a03771.html</anchorfile>
      <anchor>a9aa6dcd7db6734479e2212213b021ec1</anchor>
      <arglist>(const X1 &amp;, const X2 &amp;, boost::optional&lt; Matrix &amp; &gt; H1=boost::none, boost::optional&lt; Matrix &amp; &gt; H2=boost::none) const=0</arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>boost::serialization::access</name>
      <anchorfile>a03771.html</anchorfile>
      <anchor>ac98d07dd8f7b70e16ccb9a01abf56b9c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>NoiseModelFactor2&lt; Pose3, Pose3 &gt;</name>
    <filename>a03771.html</filename>
    <base>gtsam::NoiseModelFactor</base>
    <member kind="function">
      <type></type>
      <name>NoiseModelFactor2</name>
      <anchorfile>a03771.html</anchorfile>
      <anchor>a04f5873776c784cafd55b4ac05b4b757</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>NoiseModelFactor2</name>
      <anchorfile>a03771.html</anchorfile>
      <anchor>a35453b054509f5679a29a06b59340cf1</anchor>
      <arglist>(const SharedNoiseModel &amp;noiseModel, Key j1, Key j2)</arglist>
    </member>
    <member kind="function">
      <type>Key</type>
      <name>key1</name>
      <anchorfile>a03771.html</anchorfile>
      <anchor>a6fb96c2753a88e1e214b450cfda19e21</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Vector</type>
      <name>unwhitenedError</name>
      <anchorfile>a03771.html</anchorfile>
      <anchor>a5f2aec3026c4d017372be8faf25a5c03</anchor>
      <arglist>(const Values &amp;x, boost::optional&lt; std::vector&lt; Matrix &gt; &amp; &gt; H=boost::none) const</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual Vector</type>
      <name>evaluateError</name>
      <anchorfile>a03771.html</anchorfile>
      <anchor>a9aa6dcd7db6734479e2212213b021ec1</anchor>
      <arglist>(const X1 &amp;, const X2 &amp;, boost::optional&lt; Matrix &amp; &gt; H1=boost::none, boost::optional&lt; Matrix &amp; &gt; H2=boost::none) const=0</arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>boost::serialization::access</name>
      <anchorfile>a03771.html</anchorfile>
      <anchor>ac98d07dd8f7b70e16ccb9a01abf56b9c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>NoiseModelFactor2&lt; Pose3, Vector3 &gt;</name>
    <filename>a03771.html</filename>
    <base>gtsam::NoiseModelFactor</base>
    <member kind="function">
      <type></type>
      <name>NoiseModelFactor2</name>
      <anchorfile>a03771.html</anchorfile>
      <anchor>a04f5873776c784cafd55b4ac05b4b757</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>NoiseModelFactor2</name>
      <anchorfile>a03771.html</anchorfile>
      <anchor>a35453b054509f5679a29a06b59340cf1</anchor>
      <arglist>(const SharedNoiseModel &amp;noiseModel, Key j1, Key j2)</arglist>
    </member>
    <member kind="function">
      <type>Key</type>
      <name>key1</name>
      <anchorfile>a03771.html</anchorfile>
      <anchor>a6fb96c2753a88e1e214b450cfda19e21</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Vector</type>
      <name>unwhitenedError</name>
      <anchorfile>a03771.html</anchorfile>
      <anchor>a5f2aec3026c4d017372be8faf25a5c03</anchor>
      <arglist>(const Values &amp;x, boost::optional&lt; std::vector&lt; Matrix &gt; &amp; &gt; H=boost::none) const</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual Vector</type>
      <name>evaluateError</name>
      <anchorfile>a03771.html</anchorfile>
      <anchor>a9aa6dcd7db6734479e2212213b021ec1</anchor>
      <arglist>(const X1 &amp;, const X2 &amp;, boost::optional&lt; Matrix &amp; &gt; H1=boost::none, boost::optional&lt; Matrix &amp; &gt; H2=boost::none) const=0</arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>boost::serialization::access</name>
      <anchorfile>a03771.html</anchorfile>
      <anchor>ac98d07dd8f7b70e16ccb9a01abf56b9c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>NoiseModelFactor2&lt; Pose3, Vector6 &gt;</name>
    <filename>a03771.html</filename>
    <base>gtsam::NoiseModelFactor</base>
    <member kind="function">
      <type></type>
      <name>NoiseModelFactor2</name>
      <anchorfile>a03771.html</anchorfile>
      <anchor>a04f5873776c784cafd55b4ac05b4b757</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>NoiseModelFactor2</name>
      <anchorfile>a03771.html</anchorfile>
      <anchor>a35453b054509f5679a29a06b59340cf1</anchor>
      <arglist>(const SharedNoiseModel &amp;noiseModel, Key j1, Key j2)</arglist>
    </member>
    <member kind="function">
      <type>Key</type>
      <name>key1</name>
      <anchorfile>a03771.html</anchorfile>
      <anchor>a6fb96c2753a88e1e214b450cfda19e21</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Vector</type>
      <name>unwhitenedError</name>
      <anchorfile>a03771.html</anchorfile>
      <anchor>a5f2aec3026c4d017372be8faf25a5c03</anchor>
      <arglist>(const Values &amp;x, boost::optional&lt; std::vector&lt; Matrix &gt; &amp; &gt; H=boost::none) const</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual Vector</type>
      <name>evaluateError</name>
      <anchorfile>a03771.html</anchorfile>
      <anchor>a9aa6dcd7db6734479e2212213b021ec1</anchor>
      <arglist>(const X1 &amp;, const X2 &amp;, boost::optional&lt; Matrix &amp; &gt; H1=boost::none, boost::optional&lt; Matrix &amp; &gt; H2=boost::none) const=0</arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>boost::serialization::access</name>
      <anchorfile>a03771.html</anchorfile>
      <anchor>ac98d07dd8f7b70e16ccb9a01abf56b9c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>NoiseModelFactor2&lt; PoseRTV, PoseRTV &gt;</name>
    <filename>a03771.html</filename>
    <base>gtsam::NoiseModelFactor</base>
    <member kind="function">
      <type></type>
      <name>NoiseModelFactor2</name>
      <anchorfile>a03771.html</anchorfile>
      <anchor>a04f5873776c784cafd55b4ac05b4b757</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>NoiseModelFactor2</name>
      <anchorfile>a03771.html</anchorfile>
      <anchor>a35453b054509f5679a29a06b59340cf1</anchor>
      <arglist>(const SharedNoiseModel &amp;noiseModel, Key j1, Key j2)</arglist>
    </member>
    <member kind="function">
      <type>Key</type>
      <name>key1</name>
      <anchorfile>a03771.html</anchorfile>
      <anchor>a6fb96c2753a88e1e214b450cfda19e21</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Vector</type>
      <name>unwhitenedError</name>
      <anchorfile>a03771.html</anchorfile>
      <anchor>a5f2aec3026c4d017372be8faf25a5c03</anchor>
      <arglist>(const Values &amp;x, boost::optional&lt; std::vector&lt; Matrix &gt; &amp; &gt; H=boost::none) const</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual Vector</type>
      <name>evaluateError</name>
      <anchorfile>a03771.html</anchorfile>
      <anchor>a9aa6dcd7db6734479e2212213b021ec1</anchor>
      <arglist>(const X1 &amp;, const X2 &amp;, boost::optional&lt; Matrix &amp; &gt; H1=boost::none, boost::optional&lt; Matrix &amp; &gt; H2=boost::none) const=0</arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>boost::serialization::access</name>
      <anchorfile>a03771.html</anchorfile>
      <anchor>ac98d07dd8f7b70e16ccb9a01abf56b9c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>NoiseModelFactor2&lt; VALUE, VALUE &gt;</name>
    <filename>a03771.html</filename>
    <base>gtsam::NoiseModelFactor</base>
    <member kind="function">
      <type></type>
      <name>NoiseModelFactor2</name>
      <anchorfile>a03771.html</anchorfile>
      <anchor>a04f5873776c784cafd55b4ac05b4b757</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>NoiseModelFactor2</name>
      <anchorfile>a03771.html</anchorfile>
      <anchor>a35453b054509f5679a29a06b59340cf1</anchor>
      <arglist>(const SharedNoiseModel &amp;noiseModel, Key j1, Key j2)</arglist>
    </member>
    <member kind="function">
      <type>Key</type>
      <name>key1</name>
      <anchorfile>a03771.html</anchorfile>
      <anchor>a6fb96c2753a88e1e214b450cfda19e21</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Vector</type>
      <name>unwhitenedError</name>
      <anchorfile>a03771.html</anchorfile>
      <anchor>a5f2aec3026c4d017372be8faf25a5c03</anchor>
      <arglist>(const Values &amp;x, boost::optional&lt; std::vector&lt; Matrix &gt; &amp; &gt; H=boost::none) const</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual Vector</type>
      <name>evaluateError</name>
      <anchorfile>a03771.html</anchorfile>
      <anchor>a9aa6dcd7db6734479e2212213b021ec1</anchor>
      <arglist>(const X1 &amp;, const X2 &amp;, boost::optional&lt; Matrix &amp; &gt; H1=boost::none, boost::optional&lt; Matrix &amp; &gt; H2=boost::none) const=0</arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>boost::serialization::access</name>
      <anchorfile>a03771.html</anchorfile>
      <anchor>ac98d07dd8f7b70e16ccb9a01abf56b9c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::NoiseModelFactor3</name>
    <filename>a03775.html</filename>
    <templarg>VALUE1</templarg>
    <templarg>VALUE2</templarg>
    <templarg>VALUE3</templarg>
    <base>gtsam::NoiseModelFactor</base>
    <member kind="function">
      <type></type>
      <name>NoiseModelFactor3</name>
      <anchorfile>a03775.html</anchorfile>
      <anchor>a0bf4383cea2cdb0d263e570e98499ac7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>NoiseModelFactor3</name>
      <anchorfile>a03775.html</anchorfile>
      <anchor>ac2a8e8247e7d55768915fac27a4c078c</anchor>
      <arglist>(const SharedNoiseModel &amp;noiseModel, Key j1, Key j2, Key j3)</arglist>
    </member>
    <member kind="function">
      <type>Key</type>
      <name>key1</name>
      <anchorfile>a03775.html</anchorfile>
      <anchor>aaf8b02ae3b5cb2afb24c78620ca80537</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Vector</type>
      <name>unwhitenedError</name>
      <anchorfile>a03775.html</anchorfile>
      <anchor>aa4cd074c0b6f5c7fd6f07c6b85f17283</anchor>
      <arglist>(const Values &amp;x, boost::optional&lt; std::vector&lt; Matrix &gt; &amp; &gt; H=boost::none) const</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual Vector</type>
      <name>evaluateError</name>
      <anchorfile>a03775.html</anchorfile>
      <anchor>a78613881d348f96be1a158b9bb812950</anchor>
      <arglist>(const X1 &amp;, const X2 &amp;, const X3 &amp;, boost::optional&lt; Matrix &amp; &gt; H1=boost::none, boost::optional&lt; Matrix &amp; &gt; H2=boost::none, boost::optional&lt; Matrix &amp; &gt; H3=boost::none) const =0</arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>boost::serialization::access</name>
      <anchorfile>a03775.html</anchorfile>
      <anchor>ac98d07dd8f7b70e16ccb9a01abf56b9c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>NoiseModelFactor3&lt; double, double, double &gt;</name>
    <filename>a03775.html</filename>
    <base>gtsam::NoiseModelFactor</base>
    <member kind="function">
      <type></type>
      <name>NoiseModelFactor3</name>
      <anchorfile>a03775.html</anchorfile>
      <anchor>a0bf4383cea2cdb0d263e570e98499ac7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>NoiseModelFactor3</name>
      <anchorfile>a03775.html</anchorfile>
      <anchor>ac2a8e8247e7d55768915fac27a4c078c</anchor>
      <arglist>(const SharedNoiseModel &amp;noiseModel, Key j1, Key j2, Key j3)</arglist>
    </member>
    <member kind="function">
      <type>Key</type>
      <name>key1</name>
      <anchorfile>a03775.html</anchorfile>
      <anchor>aaf8b02ae3b5cb2afb24c78620ca80537</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Vector</type>
      <name>unwhitenedError</name>
      <anchorfile>a03775.html</anchorfile>
      <anchor>aa4cd074c0b6f5c7fd6f07c6b85f17283</anchor>
      <arglist>(const Values &amp;x, boost::optional&lt; std::vector&lt; Matrix &gt; &amp; &gt; H=boost::none) const</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual Vector</type>
      <name>evaluateError</name>
      <anchorfile>a03775.html</anchorfile>
      <anchor>a78613881d348f96be1a158b9bb812950</anchor>
      <arglist>(const X1 &amp;, const X2 &amp;, const X3 &amp;, boost::optional&lt; Matrix &amp; &gt; H1=boost::none, boost::optional&lt; Matrix &amp; &gt; H2=boost::none, boost::optional&lt; Matrix &amp; &gt; H3=boost::none) const=0</arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>boost::serialization::access</name>
      <anchorfile>a03775.html</anchorfile>
      <anchor>ac98d07dd8f7b70e16ccb9a01abf56b9c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>NoiseModelFactor3&lt; double, Unit3, Point3 &gt;</name>
    <filename>a03775.html</filename>
    <base>gtsam::NoiseModelFactor</base>
    <member kind="function">
      <type></type>
      <name>NoiseModelFactor3</name>
      <anchorfile>a03775.html</anchorfile>
      <anchor>a0bf4383cea2cdb0d263e570e98499ac7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>NoiseModelFactor3</name>
      <anchorfile>a03775.html</anchorfile>
      <anchor>ac2a8e8247e7d55768915fac27a4c078c</anchor>
      <arglist>(const SharedNoiseModel &amp;noiseModel, Key j1, Key j2, Key j3)</arglist>
    </member>
    <member kind="function">
      <type>Key</type>
      <name>key1</name>
      <anchorfile>a03775.html</anchorfile>
      <anchor>aaf8b02ae3b5cb2afb24c78620ca80537</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Vector</type>
      <name>unwhitenedError</name>
      <anchorfile>a03775.html</anchorfile>
      <anchor>aa4cd074c0b6f5c7fd6f07c6b85f17283</anchor>
      <arglist>(const Values &amp;x, boost::optional&lt; std::vector&lt; Matrix &gt; &amp; &gt; H=boost::none) const</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual Vector</type>
      <name>evaluateError</name>
      <anchorfile>a03775.html</anchorfile>
      <anchor>a78613881d348f96be1a158b9bb812950</anchor>
      <arglist>(const X1 &amp;, const X2 &amp;, const X3 &amp;, boost::optional&lt; Matrix &amp; &gt; H1=boost::none, boost::optional&lt; Matrix &amp; &gt; H2=boost::none, boost::optional&lt; Matrix &amp; &gt; H3=boost::none) const=0</arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>boost::serialization::access</name>
      <anchorfile>a03775.html</anchorfile>
      <anchor>ac98d07dd8f7b70e16ccb9a01abf56b9c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>NoiseModelFactor3&lt; NavState, NavState, imuBias::ConstantBias &gt;</name>
    <filename>a03775.html</filename>
    <base>gtsam::NoiseModelFactor</base>
    <member kind="function">
      <type></type>
      <name>NoiseModelFactor3</name>
      <anchorfile>a03775.html</anchorfile>
      <anchor>a0bf4383cea2cdb0d263e570e98499ac7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>NoiseModelFactor3</name>
      <anchorfile>a03775.html</anchorfile>
      <anchor>ac2a8e8247e7d55768915fac27a4c078c</anchor>
      <arglist>(const SharedNoiseModel &amp;noiseModel, Key j1, Key j2, Key j3)</arglist>
    </member>
    <member kind="function">
      <type>Key</type>
      <name>key1</name>
      <anchorfile>a03775.html</anchorfile>
      <anchor>aaf8b02ae3b5cb2afb24c78620ca80537</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Vector</type>
      <name>unwhitenedError</name>
      <anchorfile>a03775.html</anchorfile>
      <anchor>aa4cd074c0b6f5c7fd6f07c6b85f17283</anchor>
      <arglist>(const Values &amp;x, boost::optional&lt; std::vector&lt; Matrix &gt; &amp; &gt; H=boost::none) const</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual Vector</type>
      <name>evaluateError</name>
      <anchorfile>a03775.html</anchorfile>
      <anchor>a78613881d348f96be1a158b9bb812950</anchor>
      <arglist>(const X1 &amp;, const X2 &amp;, const X3 &amp;, boost::optional&lt; Matrix &amp; &gt; H1=boost::none, boost::optional&lt; Matrix &amp; &gt; H2=boost::none, boost::optional&lt; Matrix &amp; &gt; H3=boost::none) const=0</arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>boost::serialization::access</name>
      <anchorfile>a03775.html</anchorfile>
      <anchor>ac98d07dd8f7b70e16ccb9a01abf56b9c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>NoiseModelFactor3&lt; POINT, TRANSFORM, POINT &gt;</name>
    <filename>a03775.html</filename>
    <base>gtsam::NoiseModelFactor</base>
    <member kind="function">
      <type></type>
      <name>NoiseModelFactor3</name>
      <anchorfile>a03775.html</anchorfile>
      <anchor>a0bf4383cea2cdb0d263e570e98499ac7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>NoiseModelFactor3</name>
      <anchorfile>a03775.html</anchorfile>
      <anchor>ac2a8e8247e7d55768915fac27a4c078c</anchor>
      <arglist>(const SharedNoiseModel &amp;noiseModel, Key j1, Key j2, Key j3)</arglist>
    </member>
    <member kind="function">
      <type>Key</type>
      <name>key1</name>
      <anchorfile>a03775.html</anchorfile>
      <anchor>aaf8b02ae3b5cb2afb24c78620ca80537</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Vector</type>
      <name>unwhitenedError</name>
      <anchorfile>a03775.html</anchorfile>
      <anchor>aa4cd074c0b6f5c7fd6f07c6b85f17283</anchor>
      <arglist>(const Values &amp;x, boost::optional&lt; std::vector&lt; Matrix &gt; &amp; &gt; H=boost::none) const</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual Vector</type>
      <name>evaluateError</name>
      <anchorfile>a03775.html</anchorfile>
      <anchor>a78613881d348f96be1a158b9bb812950</anchor>
      <arglist>(const X1 &amp;, const X2 &amp;, const X3 &amp;, boost::optional&lt; Matrix &amp; &gt; H1=boost::none, boost::optional&lt; Matrix &amp; &gt; H2=boost::none, boost::optional&lt; Matrix &amp; &gt; H3=boost::none) const=0</arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>boost::serialization::access</name>
      <anchorfile>a03775.html</anchorfile>
      <anchor>ac98d07dd8f7b70e16ccb9a01abf56b9c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>NoiseModelFactor3&lt; POSE, LANDMARK, INVDEPTH &gt;</name>
    <filename>a03775.html</filename>
    <base>gtsam::NoiseModelFactor</base>
    <member kind="function">
      <type></type>
      <name>NoiseModelFactor3</name>
      <anchorfile>a03775.html</anchorfile>
      <anchor>a0bf4383cea2cdb0d263e570e98499ac7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>NoiseModelFactor3</name>
      <anchorfile>a03775.html</anchorfile>
      <anchor>ac2a8e8247e7d55768915fac27a4c078c</anchor>
      <arglist>(const SharedNoiseModel &amp;noiseModel, Key j1, Key j2, Key j3)</arglist>
    </member>
    <member kind="function">
      <type>Key</type>
      <name>key1</name>
      <anchorfile>a03775.html</anchorfile>
      <anchor>aaf8b02ae3b5cb2afb24c78620ca80537</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Vector</type>
      <name>unwhitenedError</name>
      <anchorfile>a03775.html</anchorfile>
      <anchor>aa4cd074c0b6f5c7fd6f07c6b85f17283</anchor>
      <arglist>(const Values &amp;x, boost::optional&lt; std::vector&lt; Matrix &gt; &amp; &gt; H=boost::none) const</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual Vector</type>
      <name>evaluateError</name>
      <anchorfile>a03775.html</anchorfile>
      <anchor>a78613881d348f96be1a158b9bb812950</anchor>
      <arglist>(const X1 &amp;, const X2 &amp;, const X3 &amp;, boost::optional&lt; Matrix &amp; &gt; H1=boost::none, boost::optional&lt; Matrix &amp; &gt; H2=boost::none, boost::optional&lt; Matrix &amp; &gt; H3=boost::none) const=0</arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>boost::serialization::access</name>
      <anchorfile>a03775.html</anchorfile>
      <anchor>ac98d07dd8f7b70e16ccb9a01abf56b9c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>NoiseModelFactor3&lt; POSE, POSE, LANDMARK &gt;</name>
    <filename>a03775.html</filename>
    <base>gtsam::NoiseModelFactor</base>
    <member kind="function">
      <type></type>
      <name>NoiseModelFactor3</name>
      <anchorfile>a03775.html</anchorfile>
      <anchor>a0bf4383cea2cdb0d263e570e98499ac7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>NoiseModelFactor3</name>
      <anchorfile>a03775.html</anchorfile>
      <anchor>ac2a8e8247e7d55768915fac27a4c078c</anchor>
      <arglist>(const SharedNoiseModel &amp;noiseModel, Key j1, Key j2, Key j3)</arglist>
    </member>
    <member kind="function">
      <type>Key</type>
      <name>key1</name>
      <anchorfile>a03775.html</anchorfile>
      <anchor>aaf8b02ae3b5cb2afb24c78620ca80537</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Vector</type>
      <name>unwhitenedError</name>
      <anchorfile>a03775.html</anchorfile>
      <anchor>aa4cd074c0b6f5c7fd6f07c6b85f17283</anchor>
      <arglist>(const Values &amp;x, boost::optional&lt; std::vector&lt; Matrix &gt; &amp; &gt; H=boost::none) const</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual Vector</type>
      <name>evaluateError</name>
      <anchorfile>a03775.html</anchorfile>
      <anchor>a78613881d348f96be1a158b9bb812950</anchor>
      <arglist>(const X1 &amp;, const X2 &amp;, const X3 &amp;, boost::optional&lt; Matrix &amp; &gt; H1=boost::none, boost::optional&lt; Matrix &amp; &gt; H2=boost::none, boost::optional&lt; Matrix &amp; &gt; H3=boost::none) const=0</arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>boost::serialization::access</name>
      <anchorfile>a03775.html</anchorfile>
      <anchor>ac98d07dd8f7b70e16ccb9a01abf56b9c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>NoiseModelFactor3&lt; Pose3, Point3, CALIBRATION &gt;</name>
    <filename>a03775.html</filename>
    <base>gtsam::NoiseModelFactor</base>
    <member kind="function">
      <type></type>
      <name>NoiseModelFactor3</name>
      <anchorfile>a03775.html</anchorfile>
      <anchor>a0bf4383cea2cdb0d263e570e98499ac7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>NoiseModelFactor3</name>
      <anchorfile>a03775.html</anchorfile>
      <anchor>ac2a8e8247e7d55768915fac27a4c078c</anchor>
      <arglist>(const SharedNoiseModel &amp;noiseModel, Key j1, Key j2, Key j3)</arglist>
    </member>
    <member kind="function">
      <type>Key</type>
      <name>key1</name>
      <anchorfile>a03775.html</anchorfile>
      <anchor>aaf8b02ae3b5cb2afb24c78620ca80537</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Vector</type>
      <name>unwhitenedError</name>
      <anchorfile>a03775.html</anchorfile>
      <anchor>aa4cd074c0b6f5c7fd6f07c6b85f17283</anchor>
      <arglist>(const Values &amp;x, boost::optional&lt; std::vector&lt; Matrix &gt; &amp; &gt; H=boost::none) const</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual Vector</type>
      <name>evaluateError</name>
      <anchorfile>a03775.html</anchorfile>
      <anchor>a78613881d348f96be1a158b9bb812950</anchor>
      <arglist>(const X1 &amp;, const X2 &amp;, const X3 &amp;, boost::optional&lt; Matrix &amp; &gt; H1=boost::none, boost::optional&lt; Matrix &amp; &gt; H2=boost::none, boost::optional&lt; Matrix &amp; &gt; H3=boost::none) const=0</arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>boost::serialization::access</name>
      <anchorfile>a03775.html</anchorfile>
      <anchor>ac98d07dd8f7b70e16ccb9a01abf56b9c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>NoiseModelFactor3&lt; Pose3, Pose3, Vector3 &gt;</name>
    <filename>a03775.html</filename>
    <base>gtsam::NoiseModelFactor</base>
    <member kind="function">
      <type></type>
      <name>NoiseModelFactor3</name>
      <anchorfile>a03775.html</anchorfile>
      <anchor>a0bf4383cea2cdb0d263e570e98499ac7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>NoiseModelFactor3</name>
      <anchorfile>a03775.html</anchorfile>
      <anchor>ac2a8e8247e7d55768915fac27a4c078c</anchor>
      <arglist>(const SharedNoiseModel &amp;noiseModel, Key j1, Key j2, Key j3)</arglist>
    </member>
    <member kind="function">
      <type>Key</type>
      <name>key1</name>
      <anchorfile>a03775.html</anchorfile>
      <anchor>aaf8b02ae3b5cb2afb24c78620ca80537</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Vector</type>
      <name>unwhitenedError</name>
      <anchorfile>a03775.html</anchorfile>
      <anchor>aa4cd074c0b6f5c7fd6f07c6b85f17283</anchor>
      <arglist>(const Values &amp;x, boost::optional&lt; std::vector&lt; Matrix &gt; &amp; &gt; H=boost::none) const</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual Vector</type>
      <name>evaluateError</name>
      <anchorfile>a03775.html</anchorfile>
      <anchor>a78613881d348f96be1a158b9bb812950</anchor>
      <arglist>(const X1 &amp;, const X2 &amp;, const X3 &amp;, boost::optional&lt; Matrix &amp; &gt; H1=boost::none, boost::optional&lt; Matrix &amp; &gt; H2=boost::none, boost::optional&lt; Matrix &amp; &gt; H3=boost::none) const=0</arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>boost::serialization::access</name>
      <anchorfile>a03775.html</anchorfile>
      <anchor>ac98d07dd8f7b70e16ccb9a01abf56b9c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>NoiseModelFactor3&lt; Pose3, Pose3, Vector6 &gt;</name>
    <filename>a03775.html</filename>
    <base>gtsam::NoiseModelFactor</base>
    <member kind="function">
      <type></type>
      <name>NoiseModelFactor3</name>
      <anchorfile>a03775.html</anchorfile>
      <anchor>a0bf4383cea2cdb0d263e570e98499ac7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>NoiseModelFactor3</name>
      <anchorfile>a03775.html</anchorfile>
      <anchor>ac2a8e8247e7d55768915fac27a4c078c</anchor>
      <arglist>(const SharedNoiseModel &amp;noiseModel, Key j1, Key j2, Key j3)</arglist>
    </member>
    <member kind="function">
      <type>Key</type>
      <name>key1</name>
      <anchorfile>a03775.html</anchorfile>
      <anchor>aaf8b02ae3b5cb2afb24c78620ca80537</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Vector</type>
      <name>unwhitenedError</name>
      <anchorfile>a03775.html</anchorfile>
      <anchor>aa4cd074c0b6f5c7fd6f07c6b85f17283</anchor>
      <arglist>(const Values &amp;x, boost::optional&lt; std::vector&lt; Matrix &gt; &amp; &gt; H=boost::none) const</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual Vector</type>
      <name>evaluateError</name>
      <anchorfile>a03775.html</anchorfile>
      <anchor>a78613881d348f96be1a158b9bb812950</anchor>
      <arglist>(const X1 &amp;, const X2 &amp;, const X3 &amp;, boost::optional&lt; Matrix &amp; &gt; H1=boost::none, boost::optional&lt; Matrix &amp; &gt; H2=boost::none, boost::optional&lt; Matrix &amp; &gt; H3=boost::none) const=0</arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>boost::serialization::access</name>
      <anchorfile>a03775.html</anchorfile>
      <anchor>ac98d07dd8f7b70e16ccb9a01abf56b9c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>NoiseModelFactor3&lt; Rot3, Rot3, Vector3 &gt;</name>
    <filename>a03775.html</filename>
    <base>gtsam::NoiseModelFactor</base>
    <member kind="function">
      <type></type>
      <name>NoiseModelFactor3</name>
      <anchorfile>a03775.html</anchorfile>
      <anchor>a0bf4383cea2cdb0d263e570e98499ac7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>NoiseModelFactor3</name>
      <anchorfile>a03775.html</anchorfile>
      <anchor>ac2a8e8247e7d55768915fac27a4c078c</anchor>
      <arglist>(const SharedNoiseModel &amp;noiseModel, Key j1, Key j2, Key j3)</arglist>
    </member>
    <member kind="function">
      <type>Key</type>
      <name>key1</name>
      <anchorfile>a03775.html</anchorfile>
      <anchor>aaf8b02ae3b5cb2afb24c78620ca80537</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Vector</type>
      <name>unwhitenedError</name>
      <anchorfile>a03775.html</anchorfile>
      <anchor>aa4cd074c0b6f5c7fd6f07c6b85f17283</anchor>
      <arglist>(const Values &amp;x, boost::optional&lt; std::vector&lt; Matrix &gt; &amp; &gt; H=boost::none) const</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual Vector</type>
      <name>evaluateError</name>
      <anchorfile>a03775.html</anchorfile>
      <anchor>a78613881d348f96be1a158b9bb812950</anchor>
      <arglist>(const X1 &amp;, const X2 &amp;, const X3 &amp;, boost::optional&lt; Matrix &amp; &gt; H1=boost::none, boost::optional&lt; Matrix &amp; &gt; H2=boost::none, boost::optional&lt; Matrix &amp; &gt; H3=boost::none) const=0</arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>boost::serialization::access</name>
      <anchorfile>a03775.html</anchorfile>
      <anchor>ac98d07dd8f7b70e16ccb9a01abf56b9c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>NoiseModelFactor3&lt; Vector6, Vector6, Pose3 &gt;</name>
    <filename>a03775.html</filename>
    <base>gtsam::NoiseModelFactor</base>
    <member kind="function">
      <type></type>
      <name>NoiseModelFactor3</name>
      <anchorfile>a03775.html</anchorfile>
      <anchor>a0bf4383cea2cdb0d263e570e98499ac7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>NoiseModelFactor3</name>
      <anchorfile>a03775.html</anchorfile>
      <anchor>ac2a8e8247e7d55768915fac27a4c078c</anchor>
      <arglist>(const SharedNoiseModel &amp;noiseModel, Key j1, Key j2, Key j3)</arglist>
    </member>
    <member kind="function">
      <type>Key</type>
      <name>key1</name>
      <anchorfile>a03775.html</anchorfile>
      <anchor>aaf8b02ae3b5cb2afb24c78620ca80537</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Vector</type>
      <name>unwhitenedError</name>
      <anchorfile>a03775.html</anchorfile>
      <anchor>aa4cd074c0b6f5c7fd6f07c6b85f17283</anchor>
      <arglist>(const Values &amp;x, boost::optional&lt; std::vector&lt; Matrix &gt; &amp; &gt; H=boost::none) const</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual Vector</type>
      <name>evaluateError</name>
      <anchorfile>a03775.html</anchorfile>
      <anchor>a78613881d348f96be1a158b9bb812950</anchor>
      <arglist>(const X1 &amp;, const X2 &amp;, const X3 &amp;, boost::optional&lt; Matrix &amp; &gt; H1=boost::none, boost::optional&lt; Matrix &amp; &gt; H2=boost::none, boost::optional&lt; Matrix &amp; &gt; H3=boost::none) const=0</arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>boost::serialization::access</name>
      <anchorfile>a03775.html</anchorfile>
      <anchor>ac98d07dd8f7b70e16ccb9a01abf56b9c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::NoiseModelFactor4</name>
    <filename>a03779.html</filename>
    <templarg>VALUE1</templarg>
    <templarg>VALUE2</templarg>
    <templarg>VALUE3</templarg>
    <templarg>VALUE4</templarg>
    <base>gtsam::NoiseModelFactor</base>
    <member kind="function">
      <type></type>
      <name>NoiseModelFactor4</name>
      <anchorfile>a03779.html</anchorfile>
      <anchor>a65adc8d1272df63390168b26f4f7bc70</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>NoiseModelFactor4</name>
      <anchorfile>a03779.html</anchorfile>
      <anchor>a8ce3daa05897e12db9e38a9c96043ce3</anchor>
      <arglist>(const SharedNoiseModel &amp;noiseModel, Key j1, Key j2, Key j3, Key j4)</arglist>
    </member>
    <member kind="function">
      <type>Key</type>
      <name>key1</name>
      <anchorfile>a03779.html</anchorfile>
      <anchor>afef69655d7981909b9f331f52c1e5378</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Vector</type>
      <name>unwhitenedError</name>
      <anchorfile>a03779.html</anchorfile>
      <anchor>a87be094e530ade67e5b49e3a35be0a96</anchor>
      <arglist>(const Values &amp;x, boost::optional&lt; std::vector&lt; Matrix &gt; &amp; &gt; H=boost::none) const</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual Vector</type>
      <name>evaluateError</name>
      <anchorfile>a03779.html</anchorfile>
      <anchor>a5e4197ee6a113e77d2abc1dbbebb0857</anchor>
      <arglist>(const X1 &amp;, const X2 &amp;, const X3 &amp;, const X4 &amp;, boost::optional&lt; Matrix &amp; &gt; H1=boost::none, boost::optional&lt; Matrix &amp; &gt; H2=boost::none, boost::optional&lt; Matrix &amp; &gt; H3=boost::none, boost::optional&lt; Matrix &amp; &gt; H4=boost::none) const =0</arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>boost::serialization::access</name>
      <anchorfile>a03779.html</anchorfile>
      <anchor>ac98d07dd8f7b70e16ccb9a01abf56b9c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>NoiseModelFactor4&lt; POSE, POSE, LANDMARK, CALIBRATION &gt;</name>
    <filename>a03779.html</filename>
    <base>gtsam::NoiseModelFactor</base>
    <member kind="function">
      <type></type>
      <name>NoiseModelFactor4</name>
      <anchorfile>a03779.html</anchorfile>
      <anchor>a65adc8d1272df63390168b26f4f7bc70</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>NoiseModelFactor4</name>
      <anchorfile>a03779.html</anchorfile>
      <anchor>a8ce3daa05897e12db9e38a9c96043ce3</anchor>
      <arglist>(const SharedNoiseModel &amp;noiseModel, Key j1, Key j2, Key j3, Key j4)</arglist>
    </member>
    <member kind="function">
      <type>Key</type>
      <name>key1</name>
      <anchorfile>a03779.html</anchorfile>
      <anchor>afef69655d7981909b9f331f52c1e5378</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Vector</type>
      <name>unwhitenedError</name>
      <anchorfile>a03779.html</anchorfile>
      <anchor>a87be094e530ade67e5b49e3a35be0a96</anchor>
      <arglist>(const Values &amp;x, boost::optional&lt; std::vector&lt; Matrix &gt; &amp; &gt; H=boost::none) const</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual Vector</type>
      <name>evaluateError</name>
      <anchorfile>a03779.html</anchorfile>
      <anchor>a5e4197ee6a113e77d2abc1dbbebb0857</anchor>
      <arglist>(const X1 &amp;, const X2 &amp;, const X3 &amp;, const X4 &amp;, boost::optional&lt; Matrix &amp; &gt; H1=boost::none, boost::optional&lt; Matrix &amp; &gt; H2=boost::none, boost::optional&lt; Matrix &amp; &gt; H3=boost::none, boost::optional&lt; Matrix &amp; &gt; H4=boost::none) const=0</arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>boost::serialization::access</name>
      <anchorfile>a03779.html</anchorfile>
      <anchor>ac98d07dd8f7b70e16ccb9a01abf56b9c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>NoiseModelFactor4&lt; POSE, VELOCITY, POSE, VELOCITY &gt;</name>
    <filename>a03779.html</filename>
    <base>gtsam::NoiseModelFactor</base>
    <member kind="function">
      <type></type>
      <name>NoiseModelFactor4</name>
      <anchorfile>a03779.html</anchorfile>
      <anchor>a65adc8d1272df63390168b26f4f7bc70</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>NoiseModelFactor4</name>
      <anchorfile>a03779.html</anchorfile>
      <anchor>a8ce3daa05897e12db9e38a9c96043ce3</anchor>
      <arglist>(const SharedNoiseModel &amp;noiseModel, Key j1, Key j2, Key j3, Key j4)</arglist>
    </member>
    <member kind="function">
      <type>Key</type>
      <name>key1</name>
      <anchorfile>a03779.html</anchorfile>
      <anchor>afef69655d7981909b9f331f52c1e5378</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Vector</type>
      <name>unwhitenedError</name>
      <anchorfile>a03779.html</anchorfile>
      <anchor>a87be094e530ade67e5b49e3a35be0a96</anchor>
      <arglist>(const Values &amp;x, boost::optional&lt; std::vector&lt; Matrix &gt; &amp; &gt; H=boost::none) const</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual Vector</type>
      <name>evaluateError</name>
      <anchorfile>a03779.html</anchorfile>
      <anchor>a5e4197ee6a113e77d2abc1dbbebb0857</anchor>
      <arglist>(const X1 &amp;, const X2 &amp;, const X3 &amp;, const X4 &amp;, boost::optional&lt; Matrix &amp; &gt; H1=boost::none, boost::optional&lt; Matrix &amp; &gt; H2=boost::none, boost::optional&lt; Matrix &amp; &gt; H3=boost::none, boost::optional&lt; Matrix &amp; &gt; H4=boost::none) const=0</arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>boost::serialization::access</name>
      <anchorfile>a03779.html</anchorfile>
      <anchor>ac98d07dd8f7b70e16ccb9a01abf56b9c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>NoiseModelFactor4&lt; Pose2, Pose2, Pose2, Point2 &gt;</name>
    <filename>a03779.html</filename>
    <base>gtsam::NoiseModelFactor</base>
    <member kind="function">
      <type></type>
      <name>NoiseModelFactor4</name>
      <anchorfile>a03779.html</anchorfile>
      <anchor>a65adc8d1272df63390168b26f4f7bc70</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>NoiseModelFactor4</name>
      <anchorfile>a03779.html</anchorfile>
      <anchor>a8ce3daa05897e12db9e38a9c96043ce3</anchor>
      <arglist>(const SharedNoiseModel &amp;noiseModel, Key j1, Key j2, Key j3, Key j4)</arglist>
    </member>
    <member kind="function">
      <type>Key</type>
      <name>key1</name>
      <anchorfile>a03779.html</anchorfile>
      <anchor>afef69655d7981909b9f331f52c1e5378</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Vector</type>
      <name>unwhitenedError</name>
      <anchorfile>a03779.html</anchorfile>
      <anchor>a87be094e530ade67e5b49e3a35be0a96</anchor>
      <arglist>(const Values &amp;x, boost::optional&lt; std::vector&lt; Matrix &gt; &amp; &gt; H=boost::none) const</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual Vector</type>
      <name>evaluateError</name>
      <anchorfile>a03779.html</anchorfile>
      <anchor>a5e4197ee6a113e77d2abc1dbbebb0857</anchor>
      <arglist>(const X1 &amp;, const X2 &amp;, const X3 &amp;, const X4 &amp;, boost::optional&lt; Matrix &amp; &gt; H1=boost::none, boost::optional&lt; Matrix &amp; &gt; H2=boost::none, boost::optional&lt; Matrix &amp; &gt; H3=boost::none, boost::optional&lt; Matrix &amp; &gt; H4=boost::none) const=0</arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>boost::serialization::access</name>
      <anchorfile>a03779.html</anchorfile>
      <anchor>ac98d07dd8f7b70e16ccb9a01abf56b9c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>NoiseModelFactor4&lt; Pose2, Pose2, Pose2, Pose2 &gt;</name>
    <filename>a03779.html</filename>
    <base>gtsam::NoiseModelFactor</base>
    <member kind="function">
      <type></type>
      <name>NoiseModelFactor4</name>
      <anchorfile>a03779.html</anchorfile>
      <anchor>a65adc8d1272df63390168b26f4f7bc70</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>NoiseModelFactor4</name>
      <anchorfile>a03779.html</anchorfile>
      <anchor>a8ce3daa05897e12db9e38a9c96043ce3</anchor>
      <arglist>(const SharedNoiseModel &amp;noiseModel, Key j1, Key j2, Key j3, Key j4)</arglist>
    </member>
    <member kind="function">
      <type>Key</type>
      <name>key1</name>
      <anchorfile>a03779.html</anchorfile>
      <anchor>afef69655d7981909b9f331f52c1e5378</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Vector</type>
      <name>unwhitenedError</name>
      <anchorfile>a03779.html</anchorfile>
      <anchor>a87be094e530ade67e5b49e3a35be0a96</anchor>
      <arglist>(const Values &amp;x, boost::optional&lt; std::vector&lt; Matrix &gt; &amp; &gt; H=boost::none) const</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual Vector</type>
      <name>evaluateError</name>
      <anchorfile>a03779.html</anchorfile>
      <anchor>a5e4197ee6a113e77d2abc1dbbebb0857</anchor>
      <arglist>(const X1 &amp;, const X2 &amp;, const X3 &amp;, const X4 &amp;, boost::optional&lt; Matrix &amp; &gt; H1=boost::none, boost::optional&lt; Matrix &amp; &gt; H2=boost::none, boost::optional&lt; Matrix &amp; &gt; H3=boost::none, boost::optional&lt; Matrix &amp; &gt; H4=boost::none) const=0</arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>boost::serialization::access</name>
      <anchorfile>a03779.html</anchorfile>
      <anchor>ac98d07dd8f7b70e16ccb9a01abf56b9c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::NoiseModelFactor5</name>
    <filename>a03783.html</filename>
    <templarg>VALUE1</templarg>
    <templarg>VALUE2</templarg>
    <templarg>VALUE3</templarg>
    <templarg>VALUE4</templarg>
    <templarg>VALUE5</templarg>
    <base>gtsam::NoiseModelFactor</base>
    <member kind="function">
      <type></type>
      <name>NoiseModelFactor5</name>
      <anchorfile>a03783.html</anchorfile>
      <anchor>a424c4633f6c1907d0dd3381cffbed82a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>NoiseModelFactor5</name>
      <anchorfile>a03783.html</anchorfile>
      <anchor>a01d2e8a5253a67ceac02320a719c5280</anchor>
      <arglist>(const SharedNoiseModel &amp;noiseModel, Key j1, Key j2, Key j3, Key j4, Key j5)</arglist>
    </member>
    <member kind="function">
      <type>Key</type>
      <name>key1</name>
      <anchorfile>a03783.html</anchorfile>
      <anchor>a6bad01a6ef7ceaa2a710450cd53db3e1</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Vector</type>
      <name>unwhitenedError</name>
      <anchorfile>a03783.html</anchorfile>
      <anchor>a407cba65e220708e32e5cc84bd4e072f</anchor>
      <arglist>(const Values &amp;x, boost::optional&lt; std::vector&lt; Matrix &gt; &amp; &gt; H=boost::none) const</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual Vector</type>
      <name>evaluateError</name>
      <anchorfile>a03783.html</anchorfile>
      <anchor>af0adaca3d551e42404aaf98c3053b009</anchor>
      <arglist>(const X1 &amp;, const X2 &amp;, const X3 &amp;, const X4 &amp;, const X5 &amp;, boost::optional&lt; Matrix &amp; &gt; H1=boost::none, boost::optional&lt; Matrix &amp; &gt; H2=boost::none, boost::optional&lt; Matrix &amp; &gt; H3=boost::none, boost::optional&lt; Matrix &amp; &gt; H4=boost::none, boost::optional&lt; Matrix &amp; &gt; H5=boost::none) const =0</arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>boost::serialization::access</name>
      <anchorfile>a03783.html</anchorfile>
      <anchor>ac98d07dd8f7b70e16ccb9a01abf56b9c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>NoiseModelFactor5&lt; POSE, VELOCITY, IMUBIAS, POSE, VELOCITY &gt;</name>
    <filename>a03783.html</filename>
    <base>gtsam::NoiseModelFactor</base>
    <member kind="function">
      <type></type>
      <name>NoiseModelFactor5</name>
      <anchorfile>a03783.html</anchorfile>
      <anchor>a424c4633f6c1907d0dd3381cffbed82a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>NoiseModelFactor5</name>
      <anchorfile>a03783.html</anchorfile>
      <anchor>a01d2e8a5253a67ceac02320a719c5280</anchor>
      <arglist>(const SharedNoiseModel &amp;noiseModel, Key j1, Key j2, Key j3, Key j4, Key j5)</arglist>
    </member>
    <member kind="function">
      <type>Key</type>
      <name>key1</name>
      <anchorfile>a03783.html</anchorfile>
      <anchor>a6bad01a6ef7ceaa2a710450cd53db3e1</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Vector</type>
      <name>unwhitenedError</name>
      <anchorfile>a03783.html</anchorfile>
      <anchor>a407cba65e220708e32e5cc84bd4e072f</anchor>
      <arglist>(const Values &amp;x, boost::optional&lt; std::vector&lt; Matrix &gt; &amp; &gt; H=boost::none) const</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual Vector</type>
      <name>evaluateError</name>
      <anchorfile>a03783.html</anchorfile>
      <anchor>af0adaca3d551e42404aaf98c3053b009</anchor>
      <arglist>(const X1 &amp;, const X2 &amp;, const X3 &amp;, const X4 &amp;, const X5 &amp;, boost::optional&lt; Matrix &amp; &gt; H1=boost::none, boost::optional&lt; Matrix &amp; &gt; H2=boost::none, boost::optional&lt; Matrix &amp; &gt; H3=boost::none, boost::optional&lt; Matrix &amp; &gt; H4=boost::none, boost::optional&lt; Matrix &amp; &gt; H5=boost::none) const=0</arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>boost::serialization::access</name>
      <anchorfile>a03783.html</anchorfile>
      <anchor>ac98d07dd8f7b70e16ccb9a01abf56b9c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>NoiseModelFactor5&lt; Pose3, Vector3, Pose3, Vector3, imuBias::ConstantBias &gt;</name>
    <filename>a03783.html</filename>
    <base>gtsam::NoiseModelFactor</base>
    <member kind="function">
      <type></type>
      <name>NoiseModelFactor5</name>
      <anchorfile>a03783.html</anchorfile>
      <anchor>a424c4633f6c1907d0dd3381cffbed82a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>NoiseModelFactor5</name>
      <anchorfile>a03783.html</anchorfile>
      <anchor>a01d2e8a5253a67ceac02320a719c5280</anchor>
      <arglist>(const SharedNoiseModel &amp;noiseModel, Key j1, Key j2, Key j3, Key j4, Key j5)</arglist>
    </member>
    <member kind="function">
      <type>Key</type>
      <name>key1</name>
      <anchorfile>a03783.html</anchorfile>
      <anchor>a6bad01a6ef7ceaa2a710450cd53db3e1</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Vector</type>
      <name>unwhitenedError</name>
      <anchorfile>a03783.html</anchorfile>
      <anchor>a407cba65e220708e32e5cc84bd4e072f</anchor>
      <arglist>(const Values &amp;x, boost::optional&lt; std::vector&lt; Matrix &gt; &amp; &gt; H=boost::none) const</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual Vector</type>
      <name>evaluateError</name>
      <anchorfile>a03783.html</anchorfile>
      <anchor>af0adaca3d551e42404aaf98c3053b009</anchor>
      <arglist>(const X1 &amp;, const X2 &amp;, const X3 &amp;, const X4 &amp;, const X5 &amp;, boost::optional&lt; Matrix &amp; &gt; H1=boost::none, boost::optional&lt; Matrix &amp; &gt; H2=boost::none, boost::optional&lt; Matrix &amp; &gt; H3=boost::none, boost::optional&lt; Matrix &amp; &gt; H4=boost::none, boost::optional&lt; Matrix &amp; &gt; H5=boost::none) const=0</arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>boost::serialization::access</name>
      <anchorfile>a03783.html</anchorfile>
      <anchor>ac98d07dd8f7b70e16ccb9a01abf56b9c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::NoiseModelFactor6</name>
    <filename>a03787.html</filename>
    <templarg>VALUE1</templarg>
    <templarg>VALUE2</templarg>
    <templarg>VALUE3</templarg>
    <templarg>VALUE4</templarg>
    <templarg>VALUE5</templarg>
    <templarg>VALUE6</templarg>
    <base>gtsam::NoiseModelFactor</base>
    <member kind="function">
      <type></type>
      <name>NoiseModelFactor6</name>
      <anchorfile>a03787.html</anchorfile>
      <anchor>a15bcca054e397e486fb9dda0d0436cdb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>NoiseModelFactor6</name>
      <anchorfile>a03787.html</anchorfile>
      <anchor>ad3d89a85f0c70d7a424f2060d514cab9</anchor>
      <arglist>(const SharedNoiseModel &amp;noiseModel, Key j1, Key j2, Key j3, Key j4, Key j5, Key j6)</arglist>
    </member>
    <member kind="function">
      <type>Key</type>
      <name>key1</name>
      <anchorfile>a03787.html</anchorfile>
      <anchor>ad54ff6215db19c9cd972705b26a9da0d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Vector</type>
      <name>unwhitenedError</name>
      <anchorfile>a03787.html</anchorfile>
      <anchor>aa0d169f11fc5b74989cc8d8c7a42f907</anchor>
      <arglist>(const Values &amp;x, boost::optional&lt; std::vector&lt; Matrix &gt; &amp; &gt; H=boost::none) const</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual Vector</type>
      <name>evaluateError</name>
      <anchorfile>a03787.html</anchorfile>
      <anchor>a896a223b88b621bfe9f45bf8e2cd9960</anchor>
      <arglist>(const X1 &amp;, const X2 &amp;, const X3 &amp;, const X4 &amp;, const X5 &amp;, const X6 &amp;, boost::optional&lt; Matrix &amp; &gt; H1=boost::none, boost::optional&lt; Matrix &amp; &gt; H2=boost::none, boost::optional&lt; Matrix &amp; &gt; H3=boost::none, boost::optional&lt; Matrix &amp; &gt; H4=boost::none, boost::optional&lt; Matrix &amp; &gt; H5=boost::none, boost::optional&lt; Matrix &amp; &gt; H6=boost::none) const =0</arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>boost::serialization::access</name>
      <anchorfile>a03787.html</anchorfile>
      <anchor>ac98d07dd8f7b70e16ccb9a01abf56b9c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>NoiseModelFactor6&lt; Pose3, Vector3, Pose3, Vector3, imuBias::ConstantBias, imuBias::ConstantBias &gt;</name>
    <filename>a03787.html</filename>
    <base>gtsam::NoiseModelFactor</base>
    <member kind="function">
      <type></type>
      <name>NoiseModelFactor6</name>
      <anchorfile>a03787.html</anchorfile>
      <anchor>a15bcca054e397e486fb9dda0d0436cdb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>NoiseModelFactor6</name>
      <anchorfile>a03787.html</anchorfile>
      <anchor>ad3d89a85f0c70d7a424f2060d514cab9</anchor>
      <arglist>(const SharedNoiseModel &amp;noiseModel, Key j1, Key j2, Key j3, Key j4, Key j5, Key j6)</arglist>
    </member>
    <member kind="function">
      <type>Key</type>
      <name>key1</name>
      <anchorfile>a03787.html</anchorfile>
      <anchor>ad54ff6215db19c9cd972705b26a9da0d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Vector</type>
      <name>unwhitenedError</name>
      <anchorfile>a03787.html</anchorfile>
      <anchor>aa0d169f11fc5b74989cc8d8c7a42f907</anchor>
      <arglist>(const Values &amp;x, boost::optional&lt; std::vector&lt; Matrix &gt; &amp; &gt; H=boost::none) const</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual Vector</type>
      <name>evaluateError</name>
      <anchorfile>a03787.html</anchorfile>
      <anchor>a896a223b88b621bfe9f45bf8e2cd9960</anchor>
      <arglist>(const X1 &amp;, const X2 &amp;, const X3 &amp;, const X4 &amp;, const X5 &amp;, const X6 &amp;, boost::optional&lt; Matrix &amp; &gt; H1=boost::none, boost::optional&lt; Matrix &amp; &gt; H2=boost::none, boost::optional&lt; Matrix &amp; &gt; H3=boost::none, boost::optional&lt; Matrix &amp; &gt; H4=boost::none, boost::optional&lt; Matrix &amp; &gt; H5=boost::none, boost::optional&lt; Matrix &amp; &gt; H6=boost::none) const=0</arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>boost::serialization::access</name>
      <anchorfile>a03787.html</anchorfile>
      <anchor>ac98d07dd8f7b70e16ccb9a01abf56b9c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::NoMatchFoundForFixed</name>
    <filename>a03899.html</filename>
  </compound>
  <compound kind="struct">
    <name>gtsam::NonlinearClusterTree::NonlinearCluster</name>
    <filename>a04439.html</filename>
  </compound>
  <compound kind="class">
    <name>gtsam::NonlinearClusterTree</name>
    <filename>a04435.html</filename>
    <base>ClusterTree&lt; NonlinearFactorGraph &gt;</base>
    <class kind="struct">gtsam::NonlinearClusterTree::NonlinearCluster</class>
  </compound>
  <compound kind="class">
    <name>gtsam::NonlinearConjugateGradientOptimizer</name>
    <filename>a03719.html</filename>
    <base>gtsam::NonlinearOptimizer</base>
    <member kind="function">
      <type></type>
      <name>NonlinearConjugateGradientOptimizer</name>
      <anchorfile>a03719.html</anchorfile>
      <anchor>afdd9a2c13cf10cd09e1631de75c04c70</anchor>
      <arglist>(const NonlinearFactorGraph &amp;graph, const Values &amp;initialValues, const Parameters &amp;params=Parameters())</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~NonlinearConjugateGradientOptimizer</name>
      <anchorfile>a03719.html</anchorfile>
      <anchor>a69d27d70d2e946d61d7dcb745e1ec81a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>GaussianFactorGraph::shared_ptr</type>
      <name>iterate</name>
      <anchorfile>a03719.html</anchorfile>
      <anchor>af3c7e05ebc6e57faf4b4754da4349131</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>const Values &amp;</type>
      <name>optimize</name>
      <anchorfile>a03719.html</anchorfile>
      <anchor>ac2c578988b04c1027ec8a8ce57c4adce</anchor>
      <arglist>() override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::NonlinearEquality</name>
    <filename>a03727.html</filename>
    <templarg></templarg>
    <base protection="private">gtsam::NoiseModelFactor</base>
    <base>gtsam::NoiseModelFactor1</base>
    <member kind="function">
      <type></type>
      <name>NonlinearEquality</name>
      <anchorfile>a03727.html</anchorfile>
      <anchor>ae4a3bd9075aa89f98df5fbd664f528d2</anchor>
      <arglist>(Key j, const T &amp;feasible, const CompareFunction &amp;_compare=boost::bind(traits&lt; T &gt;::Equals, _1, _2, 1e-9))</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>NonlinearEquality</name>
      <anchorfile>a03727.html</anchorfile>
      <anchor>a780524c37e0efc28596ed5192a0da562</anchor>
      <arglist>(Key j, const T &amp;feasible, double error_gain, const CompareFunction &amp;_compare=boost::bind(traits&lt; T &gt;::Equals, _1, _2, 1e-9))</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>print</name>
      <anchorfile>a03727.html</anchorfile>
      <anchor>a10cbbdf1e1d8957b25b9e453d5211989</anchor>
      <arglist>(const std::string &amp;s=&quot;&quot;, const KeyFormatter &amp;keyFormatter=DefaultKeyFormatter) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>equals</name>
      <anchorfile>a03727.html</anchorfile>
      <anchor>ae90471bb7b0632c8b276bac311cf6d45</anchor>
      <arglist>(const NonlinearFactor &amp;f, double tol=1e-9) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>error</name>
      <anchorfile>a03727.html</anchorfile>
      <anchor>a01669440d2d57dc76ca34368d3a33fa7</anchor>
      <arglist>(const Values &amp;c) const</arglist>
    </member>
    <member kind="function">
      <type>Vector</type>
      <name>evaluateError</name>
      <anchorfile>a03727.html</anchorfile>
      <anchor>a7824628e9e32ed0f1aea2403d9c7d7ba</anchor>
      <arglist>(const T &amp;xj, boost::optional&lt; Matrix &amp; &gt; H=boost::none) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual GaussianFactor::shared_ptr</type>
      <name>linearize</name>
      <anchorfile>a03727.html</anchorfile>
      <anchor>aec2a83aced7a05337d3ae04eb2626eca</anchor>
      <arglist>(const Values &amp;x) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual gtsam::NonlinearFactor::shared_ptr</type>
      <name>clone</name>
      <anchorfile>a03727.html</anchorfile>
      <anchor>a47f077eb7de267a0238b0eaffd6663a8</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>NonlinearEquality</name>
      <anchorfile>a03727.html</anchorfile>
      <anchor>a925972afca1aa82cf9efc736ef7a21d4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="typedef">
      <type>boost::function&lt; bool(const T &amp;, const T &amp;)&gt;</type>
      <name>CompareFunction</name>
      <anchorfile>a03727.html</anchorfile>
      <anchor>aef7528dbe534e08a3093a4681154a16d</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>boost::serialization::access</name>
      <anchorfile>a03727.html</anchorfile>
      <anchor>ac98d07dd8f7b70e16ccb9a01abf56b9c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::NonlinearEquality1</name>
    <filename>a03735.html</filename>
    <templarg></templarg>
    <base>gtsam::NoiseModelFactor1</base>
    <member kind="function">
      <type></type>
      <name>NonlinearEquality1</name>
      <anchorfile>a03735.html</anchorfile>
      <anchor>a86774b96d825d51f4946a54341dcef18</anchor>
      <arglist>(const X &amp;value, Key key, double mu=1000.0)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual gtsam::NonlinearFactor::shared_ptr</type>
      <name>clone</name>
      <anchorfile>a03735.html</anchorfile>
      <anchor>a369ac0e1f9ffd95bdc05c92451e09e5a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Vector</type>
      <name>evaluateError</name>
      <anchorfile>a03735.html</anchorfile>
      <anchor>a50fcc9a53fdf33d3588cbe552d255e99</anchor>
      <arglist>(const X &amp;x1, boost::optional&lt; Matrix &amp; &gt; H=boost::none) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>print</name>
      <anchorfile>a03735.html</anchorfile>
      <anchor>afb1aacf414fbe86970d5c48a97700a01</anchor>
      <arglist>(const std::string &amp;s=&quot;&quot;, const KeyFormatter &amp;keyFormatter=DefaultKeyFormatter) const</arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; NonlinearEquality1&lt; VALUE &gt; &gt;</type>
      <name>shared_ptr</name>
      <anchorfile>a03735.html</anchorfile>
      <anchor>a852d310c682c6e720a50dae759002fd1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>NonlinearEquality1</name>
      <anchorfile>a03735.html</anchorfile>
      <anchor>aa331a1cacd4c4c69f2d8386d3f8cd327</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>boost::serialization::access</name>
      <anchorfile>a03735.html</anchorfile>
      <anchor>ac98d07dd8f7b70e16ccb9a01abf56b9c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::NonlinearEquality2</name>
    <filename>a03743.html</filename>
    <templarg></templarg>
    <base>NoiseModelFactor2&lt; VALUE, VALUE &gt;</base>
    <member kind="function">
      <type></type>
      <name>NonlinearEquality2</name>
      <anchorfile>a03743.html</anchorfile>
      <anchor>a048b07dd50cb3980b1f5bab45c5666af</anchor>
      <arglist>(Key key1, Key key2, double mu=1000.0)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual gtsam::NonlinearFactor::shared_ptr</type>
      <name>clone</name>
      <anchorfile>a03743.html</anchorfile>
      <anchor>a7c4665730ecc7f1e3320641626910076</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Vector</type>
      <name>evaluateError</name>
      <anchorfile>a03743.html</anchorfile>
      <anchor>a0aedf24a7ddd53c749f4f840fe3ec5a6</anchor>
      <arglist>(const X &amp;x1, const X &amp;x2, boost::optional&lt; Matrix &amp; &gt; H1=boost::none, boost::optional&lt; Matrix &amp; &gt; H2=boost::none) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>NonlinearEquality2</name>
      <anchorfile>a03743.html</anchorfile>
      <anchor>a4241fc68993a6345b72ab34689822922</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>boost::serialization::access</name>
      <anchorfile>a03743.html</anchorfile>
      <anchor>ac98d07dd8f7b70e16ccb9a01abf56b9c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::NonlinearFactor</name>
    <filename>a03755.html</filename>
    <base>gtsam::Factor</base>
    <member kind="function">
      <type></type>
      <name>NonlinearFactor</name>
      <anchorfile>a03755.html</anchorfile>
      <anchor>a7c719ae67f222f66569ccb3b526cb9cb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>NonlinearFactor</name>
      <anchorfile>a03755.html</anchorfile>
      <anchor>a8a7610dba7e9a6f878268c2769ea0e04</anchor>
      <arglist>(const CONTAINER &amp;keys)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>print</name>
      <anchorfile>a03755.html</anchorfile>
      <anchor>a6dd081a48aef9084d657c9510964991b</anchor>
      <arglist>(const std::string &amp;s=&quot;&quot;, const KeyFormatter &amp;keyFormatter=DefaultKeyFormatter) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>equals</name>
      <anchorfile>a03755.html</anchorfile>
      <anchor>a7cdbb5d11658740a4e8a30f35ba0bc26</anchor>
      <arglist>(const NonlinearFactor &amp;f, double tol=1e-9) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~NonlinearFactor</name>
      <anchorfile>a03755.html</anchorfile>
      <anchor>ac457810c504de58732d51d61f715c2de</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual double</type>
      <name>error</name>
      <anchorfile>a03755.html</anchorfile>
      <anchor>a8e67e58ff0e4f9d58f07e5eb227adc52</anchor>
      <arglist>(const Values &amp;c) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual size_t</type>
      <name>dim</name>
      <anchorfile>a03755.html</anchorfile>
      <anchor>a5f0fcf1c93ded207d4a31e8ede07d797</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>active</name>
      <anchorfile>a03755.html</anchorfile>
      <anchor>a84901748b435ae9b39908abf57d5620c</anchor>
      <arglist>(const Values &amp;) const</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual boost::shared_ptr&lt; GaussianFactor &gt;</type>
      <name>linearize</name>
      <anchorfile>a03755.html</anchorfile>
      <anchor>a3b78e8d20d94c6f6945c2465f7fe3fee</anchor>
      <arglist>(const Values &amp;c) const =0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual shared_ptr</type>
      <name>clone</name>
      <anchorfile>a03755.html</anchorfile>
      <anchor>a9b1f311731e3344c33c376aa0f5f729c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>shared_ptr</type>
      <name>rekey</name>
      <anchorfile>a03755.html</anchorfile>
      <anchor>a21da54d0d30ad57c20bcef145f2f099b</anchor>
      <arglist>(const std::map&lt; Key, Key &gt; &amp;rekey_mapping) const</arglist>
    </member>
    <member kind="function">
      <type>shared_ptr</type>
      <name>rekey</name>
      <anchorfile>a03755.html</anchorfile>
      <anchor>ae8e5c42aa9eec2aa66d141f014040e01</anchor>
      <arglist>(const KeyVector &amp;new_keys) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::NonlinearFactorGraph</name>
    <filename>a03795.html</filename>
    <base>FactorGraph&lt; NonlinearFactor &gt;</base>
    <member kind="function">
      <type></type>
      <name>NonlinearFactorGraph</name>
      <anchorfile>a03795.html</anchorfile>
      <anchor>a08a2bceb4013a4ffe20c27f76aae7a96</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>NonlinearFactorGraph</name>
      <anchorfile>a03795.html</anchorfile>
      <anchor>ab1ca065994632164fe3986388d847604</anchor>
      <arglist>(ITERATOR firstFactor, ITERATOR lastFactor)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>NonlinearFactorGraph</name>
      <anchorfile>a03795.html</anchorfile>
      <anchor>a955686c166a967d8fc4884d65cd4ce56</anchor>
      <arglist>(const CONTAINER &amp;factors)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>NonlinearFactorGraph</name>
      <anchorfile>a03795.html</anchorfile>
      <anchor>acd147df7d707f0486daf2b9936b08d71</anchor>
      <arglist>(const FactorGraph&lt; DERIVEDFACTOR &gt; &amp;graph)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>a03795.html</anchorfile>
      <anchor>ada955e43c2e1ab447b54c7eaf9edcead</anchor>
      <arglist>(const std::string &amp;str=&quot;NonlinearFactorGraph: &quot;, const KeyFormatter &amp;keyFormatter=DefaultKeyFormatter) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>printErrors</name>
      <anchorfile>a03795.html</anchorfile>
      <anchor>a0c65b6074d4316626d7df9d84d74d2d9</anchor>
      <arglist>(const Values &amp;values, const std::string &amp;str=&quot;NonlinearFactorGraph: &quot;, const KeyFormatter &amp;keyFormatter=DefaultKeyFormatter) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>equals</name>
      <anchorfile>a03795.html</anchorfile>
      <anchor>a9d4aee2ca25c603b26c600041e337505</anchor>
      <arglist>(const NonlinearFactorGraph &amp;other, double tol=1e-9) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>saveGraph</name>
      <anchorfile>a03795.html</anchorfile>
      <anchor>a6d45c7c50ce30af0c9ab4b6158ff1c58</anchor>
      <arglist>(std::ostream &amp;stm, const Values &amp;values=Values(), const GraphvizFormatting &amp;graphvizFormatting=GraphvizFormatting(), const KeyFormatter &amp;keyFormatter=DefaultKeyFormatter) const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>error</name>
      <anchorfile>a03795.html</anchorfile>
      <anchor>ab7eff95b1c24699da4fd8f31080afb84</anchor>
      <arglist>(const Values &amp;values) const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>probPrime</name>
      <anchorfile>a03795.html</anchorfile>
      <anchor>ae69c68a86780b2a4d96cec127678dad4</anchor>
      <arglist>(const Values &amp;values) const</arglist>
    </member>
    <member kind="function">
      <type>boost::shared_ptr&lt; SymbolicFactorGraph &gt;</type>
      <name>symbolic</name>
      <anchorfile>a03795.html</anchorfile>
      <anchor>a77c8ab235e4bfe0dbe15122b201ef7d0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Ordering</type>
      <name>orderingCOLAMD</name>
      <anchorfile>a03795.html</anchorfile>
      <anchor>af1fbc30c54273417321df1d313022fa7</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Ordering</type>
      <name>orderingCOLAMDConstrained</name>
      <anchorfile>a03795.html</anchorfile>
      <anchor>aa8ba0c68e6ff1853aa548e1338f1890f</anchor>
      <arglist>(const FastMap&lt; Key, int &gt; &amp;constraints) const</arglist>
    </member>
    <member kind="function">
      <type>boost::shared_ptr&lt; GaussianFactorGraph &gt;</type>
      <name>linearize</name>
      <anchorfile>a03795.html</anchorfile>
      <anchor>ad864a2d53fea332c7ae042dda1bb3453</anchor>
      <arglist>(const Values &amp;linearizationPoint) const</arglist>
    </member>
    <member kind="function">
      <type>boost::shared_ptr&lt; HessianFactor &gt;</type>
      <name>linearizeToHessianFactor</name>
      <anchorfile>a03795.html</anchorfile>
      <anchor>afda0fed8436c1f814290de783b3abe8e</anchor>
      <arglist>(const Values &amp;values, boost::optional&lt; Ordering &amp; &gt; ordering=boost::none, const Dampen &amp;dampen=nullptr) const</arglist>
    </member>
    <member kind="function">
      <type>Values</type>
      <name>updateCholesky</name>
      <anchorfile>a03795.html</anchorfile>
      <anchor>a9844a126249eecce585677f42c4a8d36</anchor>
      <arglist>(const Values &amp;values, boost::optional&lt; Ordering &amp; &gt; ordering=boost::none, const Dampen &amp;dampen=nullptr) const</arglist>
    </member>
    <member kind="function">
      <type>NonlinearFactorGraph</type>
      <name>clone</name>
      <anchorfile>a03795.html</anchorfile>
      <anchor>a6475c83606a3e177d15037abfc531e77</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>NonlinearFactorGraph</type>
      <name>rekey</name>
      <anchorfile>a03795.html</anchorfile>
      <anchor>a5ef04effe8cd7b6461cb6bf58edabf45</anchor>
      <arglist>(const std::map&lt; Key, Key &gt; &amp;rekey_mapping) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addExpressionFactor</name>
      <anchorfile>a03795.html</anchorfile>
      <anchor>aa4fc387db1c9ef83536769a0fdc9bdaf</anchor>
      <arglist>(const SharedNoiseModel &amp;R, const T &amp;z, const Expression&lt; T &gt; &amp;h)</arglist>
    </member>
    <member kind="typedef">
      <type>std::function&lt; void(const boost::shared_ptr&lt; HessianFactor &gt; &amp;hessianFactor)&gt;</type>
      <name>Dampen</name>
      <anchorfile>a03795.html</anchorfile>
      <anchor>abb04d87a8f860dad18c1898a0f3da21d</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>boost::serialization::access</name>
      <anchorfile>a03795.html</anchorfile>
      <anchor>ac98d07dd8f7b70e16ccb9a01abf56b9c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::NonlinearISAM</name>
    <filename>a03803.html</filename>
    <member kind="function">
      <type></type>
      <name>NonlinearISAM</name>
      <anchorfile>a03803.html</anchorfile>
      <anchor>acce79d0a1cb22a2874f3b15c3a2bf0bc</anchor>
      <arglist>(int reorderInterval=1, const GaussianFactorGraph::Eliminate &amp;eliminationFunction=GaussianFactorGraph::EliminationTraitsType::DefaultEliminate)</arglist>
    </member>
    <member kind="function">
      <type>Values</type>
      <name>estimate</name>
      <anchorfile>a03803.html</anchorfile>
      <anchor>a3999448ba8a3ef4f032ae64c746b3598</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Matrix</type>
      <name>marginalCovariance</name>
      <anchorfile>a03803.html</anchorfile>
      <anchor>ab338ebc6fba1762d28d4907cbe95277d</anchor>
      <arglist>(Key key) const</arglist>
    </member>
    <member kind="function">
      <type>const GaussianISAM &amp;</type>
      <name>bayesTree</name>
      <anchorfile>a03803.html</anchorfile>
      <anchor>a7a45fb72f4fb3b153938fbc48e905199</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Values &amp;</type>
      <name>getLinearizationPoint</name>
      <anchorfile>a03803.html</anchorfile>
      <anchor>a20b273c10c0d68c8d985f64eed931381</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const NonlinearFactorGraph &amp;</type>
      <name>getFactorsUnsafe</name>
      <anchorfile>a03803.html</anchorfile>
      <anchor>a0c4e9f48e25bd644ccd5efc014192564</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>reorderInterval</name>
      <anchorfile>a03803.html</anchorfile>
      <anchor>a97c87450a87bff7fe29484ae254b938a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>reorderCounter</name>
      <anchorfile>a03803.html</anchorfile>
      <anchor>ad091cf1a8c2890cd041fb7f525ba8b7e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>a03803.html</anchorfile>
      <anchor>ac851a75e1cb16194629a9abab6c922c8</anchor>
      <arglist>(const std::string &amp;s=&quot;&quot;, const KeyFormatter &amp;keyFormatter=DefaultKeyFormatter) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>printStats</name>
      <anchorfile>a03803.html</anchorfile>
      <anchor>a5b2530a38683fd75be0a9ee8efd61caf</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>saveGraph</name>
      <anchorfile>a03803.html</anchorfile>
      <anchor>ad124da4c030e1139612ecb0f0d142685</anchor>
      <arglist>(const std::string &amp;s, const KeyFormatter &amp;keyFormatter=DefaultKeyFormatter) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>update</name>
      <anchorfile>a03803.html</anchorfile>
      <anchor>a11c6752e75625cd1532a5a6503c4d7cd</anchor>
      <arglist>(const NonlinearFactorGraph &amp;newFactors, const Values &amp;initialValues)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reorder_relinearize</name>
      <anchorfile>a03803.html</anchorfile>
      <anchor>a8098f317cbc91772e3988ae70d775b9c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>NonlinearISAM</name>
      <anchorfile>a03803.html</anchorfile>
      <anchor>acce79d0a1cb22a2874f3b15c3a2bf0bc</anchor>
      <arglist>(int reorderInterval=1, const GaussianFactorGraph::Eliminate &amp;eliminationFunction=GaussianFactorGraph::EliminationTraitsType::DefaultEliminate)</arglist>
    </member>
    <member kind="function">
      <type>Values</type>
      <name>estimate</name>
      <anchorfile>a03803.html</anchorfile>
      <anchor>a3999448ba8a3ef4f032ae64c746b3598</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Matrix</type>
      <name>marginalCovariance</name>
      <anchorfile>a03803.html</anchorfile>
      <anchor>ab338ebc6fba1762d28d4907cbe95277d</anchor>
      <arglist>(Key key) const</arglist>
    </member>
    <member kind="function">
      <type>const GaussianISAM &amp;</type>
      <name>bayesTree</name>
      <anchorfile>a03803.html</anchorfile>
      <anchor>a7a45fb72f4fb3b153938fbc48e905199</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Values &amp;</type>
      <name>getLinearizationPoint</name>
      <anchorfile>a03803.html</anchorfile>
      <anchor>a20b273c10c0d68c8d985f64eed931381</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const NonlinearFactorGraph &amp;</type>
      <name>getFactorsUnsafe</name>
      <anchorfile>a03803.html</anchorfile>
      <anchor>a0c4e9f48e25bd644ccd5efc014192564</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>reorderInterval</name>
      <anchorfile>a03803.html</anchorfile>
      <anchor>a97c87450a87bff7fe29484ae254b938a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>reorderCounter</name>
      <anchorfile>a03803.html</anchorfile>
      <anchor>ad091cf1a8c2890cd041fb7f525ba8b7e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>a03803.html</anchorfile>
      <anchor>ac851a75e1cb16194629a9abab6c922c8</anchor>
      <arglist>(const std::string &amp;s=&quot;&quot;, const KeyFormatter &amp;keyFormatter=DefaultKeyFormatter) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>printStats</name>
      <anchorfile>a03803.html</anchorfile>
      <anchor>a5b2530a38683fd75be0a9ee8efd61caf</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>saveGraph</name>
      <anchorfile>a03803.html</anchorfile>
      <anchor>ad124da4c030e1139612ecb0f0d142685</anchor>
      <arglist>(const std::string &amp;s, const KeyFormatter &amp;keyFormatter=DefaultKeyFormatter) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>update</name>
      <anchorfile>a03803.html</anchorfile>
      <anchor>a11c6752e75625cd1532a5a6503c4d7cd</anchor>
      <arglist>(const NonlinearFactorGraph &amp;newFactors, const Values &amp;initialValues)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reorder_relinearize</name>
      <anchorfile>a03803.html</anchorfile>
      <anchor>a8098f317cbc91772e3988ae70d775b9c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>gtsam::GaussianISAM</type>
      <name>isam_</name>
      <anchorfile>a03803.html</anchorfile>
      <anchor>afd3d7d897197b0a60a8e25dc68c588fd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Values</type>
      <name>linPoint_</name>
      <anchorfile>a03803.html</anchorfile>
      <anchor>aed05de793f4fde627a4c234bbc38a8f2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>NonlinearFactorGraph</type>
      <name>factors_</name>
      <anchorfile>a03803.html</anchorfile>
      <anchor>a3abd8344c16dc519209aec578a9f56df</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>reorderInterval_</name>
      <anchorfile>a03803.html</anchorfile>
      <anchor>ae53203f6b84dc0f29f9fb52afdc49fd9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>GaussianFactorGraph::Eliminate</type>
      <name>eliminationFunction_</name>
      <anchorfile>a03803.html</anchorfile>
      <anchor>a177189467b87cc41c92f03e3d73b283e</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::NonlinearOptimizer</name>
    <filename>a03807.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual const Values &amp;</type>
      <name>optimize</name>
      <anchorfile>a03807.html</anchorfile>
      <anchor>a6de9dab0f18ddb8766c3c5346f2aa711</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const Values &amp;</type>
      <name>optimizeSafely</name>
      <anchorfile>a03807.html</anchorfile>
      <anchor>a3f5f50cd14a0b2862b886f8eb9ffaeeb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>error</name>
      <anchorfile>a03807.html</anchorfile>
      <anchor>aae495c988fe69aec8ff0f4b4eba83bde</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>iterations</name>
      <anchorfile>a03807.html</anchorfile>
      <anchor>ad87eeae75b136c470a59df02ce3414aa</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Values &amp;</type>
      <name>values</name>
      <anchorfile>a03807.html</anchorfile>
      <anchor>ac7240fdeae0ca240e20e74ae593eb32c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~NonlinearOptimizer</name>
      <anchorfile>a03807.html</anchorfile>
      <anchor>ab852c8574086cacb316c579bcf19f294</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual VectorValues</type>
      <name>solve</name>
      <anchorfile>a03807.html</anchorfile>
      <anchor>a541e8b6b63d4bce95e56cf043416e10f</anchor>
      <arglist>(const GaussianFactorGraph &amp;gfg, const NonlinearOptimizerParams &amp;params) const</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual GaussianFactorGraph::shared_ptr</type>
      <name>iterate</name>
      <anchorfile>a03807.html</anchorfile>
      <anchor>ab238f0a58ca49edd63ad552baf852599</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Values &amp;</type>
      <name>optimize</name>
      <anchorfile>a03807.html</anchorfile>
      <anchor>a6de9dab0f18ddb8766c3c5346f2aa711</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const Values &amp;</type>
      <name>optimizeSafely</name>
      <anchorfile>a03807.html</anchorfile>
      <anchor>a3f5f50cd14a0b2862b886f8eb9ffaeeb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>error</name>
      <anchorfile>a03807.html</anchorfile>
      <anchor>aae495c988fe69aec8ff0f4b4eba83bde</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>iterations</name>
      <anchorfile>a03807.html</anchorfile>
      <anchor>ad87eeae75b136c470a59df02ce3414aa</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Values &amp;</type>
      <name>values</name>
      <anchorfile>a03807.html</anchorfile>
      <anchor>ac7240fdeae0ca240e20e74ae593eb32c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~NonlinearOptimizer</name>
      <anchorfile>a03807.html</anchorfile>
      <anchor>ab852c8574086cacb316c579bcf19f294</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual VectorValues</type>
      <name>solve</name>
      <anchorfile>a03807.html</anchorfile>
      <anchor>a541e8b6b63d4bce95e56cf043416e10f</anchor>
      <arglist>(const GaussianFactorGraph &amp;gfg, const NonlinearOptimizerParams &amp;params) const</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual GaussianFactorGraph::shared_ptr</type>
      <name>iterate</name>
      <anchorfile>a03807.html</anchorfile>
      <anchor>ab238f0a58ca49edd63ad552baf852599</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; const NonlinearOptimizer &gt;</type>
      <name>shared_ptr</name>
      <anchorfile>a03807.html</anchorfile>
      <anchor>a7f69fa0d65bb8cca6344f64b8552e47c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>defaultOptimize</name>
      <anchorfile>a03807.html</anchorfile>
      <anchor>acd13b9acb0d502edafac78c63815a9f1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>NonlinearOptimizer</name>
      <anchorfile>a03807.html</anchorfile>
      <anchor>ac6b7a069a596fda982cc4aa1ddc79324</anchor>
      <arglist>(const NonlinearFactorGraph &amp;graph, std::unique_ptr&lt; internal::NonlinearOptimizerState &gt; state)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>NonlinearFactorGraph</type>
      <name>graph_</name>
      <anchorfile>a03807.html</anchorfile>
      <anchor>a7142764a820ba039a610074f855bce13</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::unique_ptr&lt; internal::NonlinearOptimizerState &gt;</type>
      <name>state_</name>
      <anchorfile>a03807.html</anchorfile>
      <anchor>aa51bf89ae24b609a58201f224c36b7b8</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::NonlinearOptimizerParams</name>
    <filename>a03811.html</filename>
    <member kind="variable">
      <type>size_t</type>
      <name>maxIterations</name>
      <anchorfile>a03811.html</anchorfile>
      <anchor>a19a9e8d9b25df5abe12c41fc7e8b1075</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>relativeErrorTol</name>
      <anchorfile>a03811.html</anchorfile>
      <anchor>a9525e668e93fbb60ea4bffeab963629e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>absoluteErrorTol</name>
      <anchorfile>a03811.html</anchorfile>
      <anchor>a01f8529b9f7efdd818e0d75134f1ae8b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>errorTol</name>
      <anchorfile>a03811.html</anchorfile>
      <anchor>aaf5a44f1a3dfd67a8027a797641cc31c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Verbosity</type>
      <name>verbosity</name>
      <anchorfile>a03811.html</anchorfile>
      <anchor>a21971e7b985115acab326deeedcfe220</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Ordering::OrderingType</type>
      <name>orderingType</name>
      <anchorfile>a03811.html</anchorfile>
      <anchor>a9d851ffe0289f4dcd861b18bc6a05960</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>LinearSolverType</type>
      <name>linearSolverType</name>
      <anchorfile>a03811.html</anchorfile>
      <anchor>a4d103fcbdff857b83e748011a69490d2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>boost::optional&lt; Ordering &gt;</type>
      <name>ordering</name>
      <anchorfile>a03811.html</anchorfile>
      <anchor>af485749d046e54e52317b96311db3697</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>IterativeOptimizationParameters::shared_ptr</type>
      <name>iterativeParams</name>
      <anchorfile>a03811.html</anchorfile>
      <anchor>a22f0350290afc3b8f3731b67a4917ea6</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>Verbosity</name>
      <anchorfile>a03811.html</anchorfile>
      <anchor>a2b085d375ec6effa42e3deaaeab98694</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>LinearSolverType</name>
      <anchorfile>a03811.html</anchorfile>
      <anchor>a8eaa669b1681529cdc98d1e7b7b6203b</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::noiseModel::mEstimator::Null</name>
    <filename>a03247.html</filename>
    <base>gtsam::noiseModel::mEstimator::Base</base>
    <member kind="friend">
      <type>friend class</type>
      <name>boost::serialization::access</name>
      <anchorfile>a03247.html</anchorfile>
      <anchor>ac98d07dd8f7b70e16ccb9a01abf56b9c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::OdometryFactorBase</name>
    <filename>a04595.html</filename>
    <base protection="private">gtsam::NoiseModelFactor</base>
    <base>NoiseModelFactor4&lt; Pose2, Pose2, Pose2, Pose2 &gt;</base>
    <member kind="function">
      <type></type>
      <name>OdometryFactorBase</name>
      <anchorfile>a04595.html</anchorfile>
      <anchor>afa4700593035ff0275404fe79de725c4</anchor>
      <arglist>(Key b1, Key i, Key b2, Key j, const Pose2 &amp;measured, const SharedNoiseModel &amp;model)</arglist>
    </member>
    <member kind="function">
      <type>Vector</type>
      <name>evaluateError</name>
      <anchorfile>a04595.html</anchorfile>
      <anchor>a7ec2c743232a43a65d040b119d4aa09d</anchor>
      <arglist>(const Pose2 &amp;base1, const Pose2 &amp;pose1, const Pose2 &amp;base2, const Pose2 &amp;pose2, boost::optional&lt; Matrix &amp; &gt; H1=boost::none, boost::optional&lt; Matrix &amp; &gt; H2=boost::none, boost::optional&lt; Matrix &amp; &gt; H3=boost::none, boost::optional&lt; Matrix &amp; &gt; H4=boost::none) const</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>gtsam::internal::linearAlgorithms::OptimizeClique</name>
    <filename>a03199.html</filename>
    <templarg>CLIQUE</templarg>
  </compound>
  <compound kind="struct">
    <name>gtsam::internal::linearAlgorithms::OptimizeData</name>
    <filename>a03195.html</filename>
  </compound>
  <compound kind="class">
    <name>gtsam::OptionalJacobian</name>
    <filename>a02159.html</filename>
    <templarg>Rows</templarg>
    <templarg>Cols</templarg>
    <member kind="function">
      <type></type>
      <name>OptionalJacobian</name>
      <anchorfile>a02159.html</anchorfile>
      <anchor>a59115dc58b27a4d622d06f1a43deebe9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>OptionalJacobian</name>
      <anchorfile>a02159.html</anchorfile>
      <anchor>a672b19c6773109bb67a5e8e78e0fc7bb</anchor>
      <arglist>(Jacobian &amp;fixed)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>OptionalJacobian</name>
      <anchorfile>a02159.html</anchorfile>
      <anchor>ac2b2b0c5b95f654313726ccbf95e993d</anchor>
      <arglist>(Jacobian *fixedPtr)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>OptionalJacobian</name>
      <anchorfile>a02159.html</anchorfile>
      <anchor>a51b212c26f1b568bfedceadad052f3ad</anchor>
      <arglist>(Eigen::MatrixXd &amp;dynamic)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>OptionalJacobian</name>
      <anchorfile>a02159.html</anchorfile>
      <anchor>a2f2e381c633b5a8125ceaea77f2f3c51</anchor>
      <arglist>(boost::none_t)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>OptionalJacobian</name>
      <anchorfile>a02159.html</anchorfile>
      <anchor>a15fd73e523755b78f5ee6c994b0d584d</anchor>
      <arglist>(const boost::optional&lt; Eigen::MatrixXd &amp; &gt; optional)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator bool</name>
      <anchorfile>a02159.html</anchorfile>
      <anchor>a6686cfa51063175cc51326ce90d5f7b0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Eigen::Map&lt; Jacobian &gt; &amp;</type>
      <name>operator *</name>
      <anchorfile>a02159.html</anchorfile>
      <anchor>a719370e6dca764a190f41e19916e33f8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Eigen::Map&lt; Jacobian &gt; *</type>
      <name>operator-&gt;</name>
      <anchorfile>a02159.html</anchorfile>
      <anchor>affe411c99d440fef286ee867b4c278a8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>OptionalJacobian&lt; Rows, N &gt;</type>
      <name>cols</name>
      <anchorfile>a02159.html</anchorfile>
      <anchor>a93927df0b8341eddb5c6901781086357</anchor>
      <arglist>(int startCol)</arglist>
    </member>
    <member kind="typedef">
      <type>Eigen::Matrix&lt; double, Rows, Cols &gt;</type>
      <name>Jacobian</name>
      <anchorfile>a02159.html</anchorfile>
      <anchor>aad86e44b7f9c9327f166c01167c20f54</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>OptionalJacobian&lt; dim, dim &gt;</name>
    <filename>a02159.html</filename>
    <member kind="function">
      <type></type>
      <name>OptionalJacobian</name>
      <anchorfile>a02159.html</anchorfile>
      <anchor>a59115dc58b27a4d622d06f1a43deebe9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>OptionalJacobian</name>
      <anchorfile>a02159.html</anchorfile>
      <anchor>a672b19c6773109bb67a5e8e78e0fc7bb</anchor>
      <arglist>(Jacobian &amp;fixed)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>OptionalJacobian</name>
      <anchorfile>a02159.html</anchorfile>
      <anchor>ac2b2b0c5b95f654313726ccbf95e993d</anchor>
      <arglist>(Jacobian *fixedPtr)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>OptionalJacobian</name>
      <anchorfile>a02159.html</anchorfile>
      <anchor>a51b212c26f1b568bfedceadad052f3ad</anchor>
      <arglist>(Eigen::MatrixXd &amp;dynamic)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>OptionalJacobian</name>
      <anchorfile>a02159.html</anchorfile>
      <anchor>a2f2e381c633b5a8125ceaea77f2f3c51</anchor>
      <arglist>(boost::none_t)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>OptionalJacobian</name>
      <anchorfile>a02159.html</anchorfile>
      <anchor>a15fd73e523755b78f5ee6c994b0d584d</anchor>
      <arglist>(const boost::optional&lt; Eigen::MatrixXd &amp; &gt; optional)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator bool</name>
      <anchorfile>a02159.html</anchorfile>
      <anchor>a6686cfa51063175cc51326ce90d5f7b0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Eigen::Map&lt; Jacobian &gt; &amp;</type>
      <name>operator *</name>
      <anchorfile>a02159.html</anchorfile>
      <anchor>a719370e6dca764a190f41e19916e33f8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Eigen::Map&lt; Jacobian &gt; *</type>
      <name>operator-&gt;</name>
      <anchorfile>a02159.html</anchorfile>
      <anchor>affe411c99d440fef286ee867b4c278a8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>OptionalJacobian&lt; Rows, N &gt;</type>
      <name>cols</name>
      <anchorfile>a02159.html</anchorfile>
      <anchor>a93927df0b8341eddb5c6901781086357</anchor>
      <arglist>(int startCol)</arglist>
    </member>
    <member kind="typedef">
      <type>Eigen::Matrix&lt; double, Rows, Cols &gt;</type>
      <name>Jacobian</name>
      <anchorfile>a02159.html</anchorfile>
      <anchor>aad86e44b7f9c9327f166c01167c20f54</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::OptionalJacobian&lt; Eigen::Dynamic, Eigen::Dynamic &gt;</name>
    <filename>a02163.html</filename>
    <member kind="function">
      <type></type>
      <name>OptionalJacobian</name>
      <anchorfile>a02163.html</anchorfile>
      <anchor>a3009c0d094984c8b892f7573f3f722bf</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>OptionalJacobian</name>
      <anchorfile>a02163.html</anchorfile>
      <anchor>a79063009631f3b169b50c71c95976ccf</anchor>
      <arglist>(Eigen::MatrixXd &amp;dynamic)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>OptionalJacobian</name>
      <anchorfile>a02163.html</anchorfile>
      <anchor>a8c7596c4767e1254224e59c191a30486</anchor>
      <arglist>(boost::none_t)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>OptionalJacobian</name>
      <anchorfile>a02163.html</anchorfile>
      <anchor>a38f5ef78eef67e4ef45356adfef88da3</anchor>
      <arglist>(const boost::optional&lt; Eigen::MatrixXd &amp; &gt; optional)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator bool</name>
      <anchorfile>a02163.html</anchorfile>
      <anchor>aeac04b3e0d6bf65fe4d69b84709e657a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Jacobian &amp;</type>
      <name>operator *</name>
      <anchorfile>a02163.html</anchorfile>
      <anchor>a03bb94b911b97ea562e168fbf43a964d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Jacobian *</type>
      <name>operator-&gt;</name>
      <anchorfile>a02163.html</anchorfile>
      <anchor>a19a29bce160397886df2a0bd924976b8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="typedef">
      <type>Eigen::MatrixXd</type>
      <name>Jacobian</name>
      <anchorfile>a02163.html</anchorfile>
      <anchor>a4804b29dee9d045095431989ef71da6f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::Ordering</name>
    <filename>a03031.html</filename>
    <member kind="function" static="yes">
      <type>static Ordering</type>
      <name>Colamd</name>
      <anchorfile>a03031.html</anchorfile>
      <anchor>a39e84731eed0e57cb62dd2c21fa92851</anchor>
      <arglist>(const FACTOR_GRAPH &amp;graph)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static GTSAM_EXPORT Ordering</type>
      <name>Colamd</name>
      <anchorfile>a03031.html</anchorfile>
      <anchor>ab691d95771d14a1493786c9e71b4bf5a</anchor>
      <arglist>(const VariableIndex &amp;variableIndex)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Ordering</type>
      <name>ColamdConstrainedLast</name>
      <anchorfile>a03031.html</anchorfile>
      <anchor>a47d55b354a7f44790dd83c47cf5df5e5</anchor>
      <arglist>(const FACTOR_GRAPH &amp;graph, const KeyVector &amp;constrainLast, bool forceOrder=false)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static GTSAM_EXPORT Ordering</type>
      <name>ColamdConstrainedLast</name>
      <anchorfile>a03031.html</anchorfile>
      <anchor>ad04799ab8db19e9a382059e5ad12db44</anchor>
      <arglist>(const VariableIndex &amp;variableIndex, const KeyVector &amp;constrainLast, bool forceOrder=false)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Ordering</type>
      <name>ColamdConstrainedFirst</name>
      <anchorfile>a03031.html</anchorfile>
      <anchor>aa631456cdd28f8c8a735b1fb58604d84</anchor>
      <arglist>(const FACTOR_GRAPH &amp;graph, const KeyVector &amp;constrainFirst, bool forceOrder=false)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static GTSAM_EXPORT Ordering</type>
      <name>ColamdConstrainedFirst</name>
      <anchorfile>a03031.html</anchorfile>
      <anchor>a8876744fd7db49ce80c12f16666672a8</anchor>
      <arglist>(const VariableIndex &amp;variableIndex, const KeyVector &amp;constrainFirst, bool forceOrder=false)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Ordering</type>
      <name>ColamdConstrained</name>
      <anchorfile>a03031.html</anchorfile>
      <anchor>a0eaaa4e1bf99e2adef62867cc57ef531</anchor>
      <arglist>(const FACTOR_GRAPH &amp;graph, const FastMap&lt; Key, int &gt; &amp;groups)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static GTSAM_EXPORT Ordering</type>
      <name>ColamdConstrained</name>
      <anchorfile>a03031.html</anchorfile>
      <anchor>a317c72a02c46d8560817218e86d4255a</anchor>
      <arglist>(const VariableIndex &amp;variableIndex, const FastMap&lt; Key, int &gt; &amp;groups)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Ordering</type>
      <name>Natural</name>
      <anchorfile>a03031.html</anchorfile>
      <anchor>a02aaadeaaa80f88b654358d648ed7022</anchor>
      <arglist>(const FACTOR_GRAPH &amp;fg)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static GTSAM_EXPORT void</type>
      <name>CSRFormat</name>
      <anchorfile>a03031.html</anchorfile>
      <anchor>af93f2b27c190bd5d15e3aa426778a45e</anchor>
      <arglist>(std::vector&lt; int &gt; &amp;xadj, std::vector&lt; int &gt; &amp;adj, const FACTOR_GRAPH &amp;graph)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static GTSAM_EXPORT Ordering</type>
      <name>Metis</name>
      <anchorfile>a03031.html</anchorfile>
      <anchor>abed79593d0128b7dd45b66021b94b1d9</anchor>
      <arglist>(const MetisIndex &amp;met)</arglist>
    </member>
    <member kind="function">
      <type>GTSAM_EXPORT</type>
      <name>Ordering</name>
      <anchorfile>a03031.html</anchorfile>
      <anchor>aa7f3dd0f38b06fa10b7fe9dc1ee1c378</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Ordering</name>
      <anchorfile>a03031.html</anchorfile>
      <anchor>a0fdb342e68a74e19c25a1d3364233cde</anchor>
      <arglist>(const KEYS &amp;keys)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Ordering</name>
      <anchorfile>a03031.html</anchorfile>
      <anchor>a8e58b2de0eaa0f54f0a8790009abf39e</anchor>
      <arglist>(ITERATOR firstKey, ITERATOR lastKey)</arglist>
    </member>
    <member kind="function">
      <type>boost::assign::list_inserter&lt; boost::assign_detail::call_push_back&lt; This &gt; &gt;</type>
      <name>operator+=</name>
      <anchorfile>a03031.html</anchorfile>
      <anchor>aad3752a69f4a70d2ffce00a57402479c</anchor>
      <arglist>(Key key)</arglist>
    </member>
    <member kind="function">
      <type>FastMap&lt; Key, size_t &gt;</type>
      <name>invert</name>
      <anchorfile>a03031.html</anchorfile>
      <anchor>ac8590c3149674d3b05a8648fd01b97a2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Ordering</type>
      <name>Colamd</name>
      <anchorfile>a03031.html</anchorfile>
      <anchor>a39e84731eed0e57cb62dd2c21fa92851</anchor>
      <arglist>(const FACTOR_GRAPH &amp;graph)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static GTSAM_EXPORT Ordering</type>
      <name>Colamd</name>
      <anchorfile>a03031.html</anchorfile>
      <anchor>ab691d95771d14a1493786c9e71b4bf5a</anchor>
      <arglist>(const VariableIndex &amp;variableIndex)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Ordering</type>
      <name>ColamdConstrainedLast</name>
      <anchorfile>a03031.html</anchorfile>
      <anchor>a47d55b354a7f44790dd83c47cf5df5e5</anchor>
      <arglist>(const FACTOR_GRAPH &amp;graph, const KeyVector &amp;constrainLast, bool forceOrder=false)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static GTSAM_EXPORT Ordering</type>
      <name>ColamdConstrainedLast</name>
      <anchorfile>a03031.html</anchorfile>
      <anchor>ad04799ab8db19e9a382059e5ad12db44</anchor>
      <arglist>(const VariableIndex &amp;variableIndex, const KeyVector &amp;constrainLast, bool forceOrder=false)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Ordering</type>
      <name>ColamdConstrainedFirst</name>
      <anchorfile>a03031.html</anchorfile>
      <anchor>aa631456cdd28f8c8a735b1fb58604d84</anchor>
      <arglist>(const FACTOR_GRAPH &amp;graph, const KeyVector &amp;constrainFirst, bool forceOrder=false)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static GTSAM_EXPORT Ordering</type>
      <name>ColamdConstrainedFirst</name>
      <anchorfile>a03031.html</anchorfile>
      <anchor>a8876744fd7db49ce80c12f16666672a8</anchor>
      <arglist>(const VariableIndex &amp;variableIndex, const KeyVector &amp;constrainFirst, bool forceOrder=false)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Ordering</type>
      <name>ColamdConstrained</name>
      <anchorfile>a03031.html</anchorfile>
      <anchor>a0eaaa4e1bf99e2adef62867cc57ef531</anchor>
      <arglist>(const FACTOR_GRAPH &amp;graph, const FastMap&lt; Key, int &gt; &amp;groups)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static GTSAM_EXPORT Ordering</type>
      <name>ColamdConstrained</name>
      <anchorfile>a03031.html</anchorfile>
      <anchor>a317c72a02c46d8560817218e86d4255a</anchor>
      <arglist>(const VariableIndex &amp;variableIndex, const FastMap&lt; Key, int &gt; &amp;groups)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Ordering</type>
      <name>Natural</name>
      <anchorfile>a03031.html</anchorfile>
      <anchor>a02aaadeaaa80f88b654358d648ed7022</anchor>
      <arglist>(const FACTOR_GRAPH &amp;fg)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static GTSAM_EXPORT void</type>
      <name>CSRFormat</name>
      <anchorfile>a03031.html</anchorfile>
      <anchor>af93f2b27c190bd5d15e3aa426778a45e</anchor>
      <arglist>(std::vector&lt; int &gt; &amp;xadj, std::vector&lt; int &gt; &amp;adj, const FACTOR_GRAPH &amp;graph)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static GTSAM_EXPORT Ordering</type>
      <name>Metis</name>
      <anchorfile>a03031.html</anchorfile>
      <anchor>abed79593d0128b7dd45b66021b94b1d9</anchor>
      <arglist>(const MetisIndex &amp;met)</arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>OrderingType</name>
      <anchorfile>a03031.html</anchorfile>
      <anchor>a41194f31ec42052094cf91d81dcd796d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Ordering</type>
      <name>This</name>
      <anchorfile>a03031.html</anchorfile>
      <anchor>ad29de1a2966331f21b1fd88a18234091</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; This &gt;</type>
      <name>shared_ptr</name>
      <anchorfile>a03031.html</anchorfile>
      <anchor>a5389765361ecd73747234ac0a1fd9c62</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>boost::serialization::access</name>
      <anchorfile>a03031.html</anchorfile>
      <anchor>ac98d07dd8f7b70e16ccb9a01abf56b9c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::ordering_key_visitor</name>
    <filename>a02967.html</filename>
    <templarg>KEY</templarg>
  </compound>
  <compound kind="class">
    <name>gtsam::OrientedPlane3</name>
    <filename>a02607.html</filename>
    <member kind="function">
      <type></type>
      <name>OrientedPlane3</name>
      <anchorfile>a02607.html</anchorfile>
      <anchor>aabbde8eb3a3a90e7de6f036fd1dceae0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>OrientedPlane3</name>
      <anchorfile>a02607.html</anchorfile>
      <anchor>abb146a3dec9dc3039094c5398283c791</anchor>
      <arglist>(const Unit3 &amp;s, double d)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>OrientedPlane3</name>
      <anchorfile>a02607.html</anchorfile>
      <anchor>a9cfeab3cd026b150b1405f4e8d212f01</anchor>
      <arglist>(const Vector4 &amp;vec)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>OrientedPlane3</name>
      <anchorfile>a02607.html</anchorfile>
      <anchor>a293ad9e04b7b2c629cd764e8091e1ecd</anchor>
      <arglist>(double a, double b, double c, double d)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>a02607.html</anchorfile>
      <anchor>adae06dc5e2404d2f88dba94b3cd45b2e</anchor>
      <arglist>(const std::string &amp;s=std::string()) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>equals</name>
      <anchorfile>a02607.html</anchorfile>
      <anchor>a93f0b31776da67a551c77026039f671c</anchor>
      <arglist>(const OrientedPlane3 &amp;s, double tol=1e-9) const</arglist>
    </member>
    <member kind="function">
      <type>OrientedPlane3</type>
      <name>transform</name>
      <anchorfile>a02607.html</anchorfile>
      <anchor>a646c180545ff02291b42eb74f2715a91</anchor>
      <arglist>(const Pose3 &amp;xr, OptionalJacobian&lt; 3, 3 &gt; Hp=boost::none, OptionalJacobian&lt; 3, 6 &gt; Hr=boost::none) const</arglist>
    </member>
    <member kind="function">
      <type>Vector3</type>
      <name>error</name>
      <anchorfile>a02607.html</anchorfile>
      <anchor>a3e677a900af677530724e0ef77af1bb1</anchor>
      <arglist>(const OrientedPlane3 &amp;plane) const</arglist>
    </member>
    <member kind="function">
      <type>Vector3</type>
      <name>errorVector</name>
      <anchorfile>a02607.html</anchorfile>
      <anchor>a3cb324d48dd534ceab417db6a94a9a3a</anchor>
      <arglist>(const OrientedPlane3 &amp;other, OptionalJacobian&lt; 3, 3 &gt; H1=boost::none, OptionalJacobian&lt; 3, 3 &gt; H2=boost::none) const</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>dim</name>
      <anchorfile>a02607.html</anchorfile>
      <anchor>a83f544699aacfc65567316f5d66d0832</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>OrientedPlane3</type>
      <name>retract</name>
      <anchorfile>a02607.html</anchorfile>
      <anchor>a3d28d6bd13ad76bc592fc7ad8f0e4b72</anchor>
      <arglist>(const Vector3 &amp;v, OptionalJacobian&lt; 3, 3 &gt; H=boost::none) const</arglist>
    </member>
    <member kind="function">
      <type>Vector3</type>
      <name>localCoordinates</name>
      <anchorfile>a02607.html</anchorfile>
      <anchor>abe0d7a93b66fb6e0c41633a64b62d942</anchor>
      <arglist>(const OrientedPlane3 &amp;s) const</arglist>
    </member>
    <member kind="function">
      <type>Vector4</type>
      <name>planeCoefficients</name>
      <anchorfile>a02607.html</anchorfile>
      <anchor>a6803d86bef515eaaa4815f74b7f6e958</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Unit3</type>
      <name>normal</name>
      <anchorfile>a02607.html</anchorfile>
      <anchor>a3692427c5a81832bcecd6936113ae925</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>distance</name>
      <anchorfile>a02607.html</anchorfile>
      <anchor>ae27325e7964c49797f3338140bce08c6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>OrientedPlane3</name>
      <anchorfile>a02607.html</anchorfile>
      <anchor>aabbde8eb3a3a90e7de6f036fd1dceae0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>OrientedPlane3</name>
      <anchorfile>a02607.html</anchorfile>
      <anchor>abb146a3dec9dc3039094c5398283c791</anchor>
      <arglist>(const Unit3 &amp;s, double d)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>OrientedPlane3</name>
      <anchorfile>a02607.html</anchorfile>
      <anchor>a9cfeab3cd026b150b1405f4e8d212f01</anchor>
      <arglist>(const Vector4 &amp;vec)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>OrientedPlane3</name>
      <anchorfile>a02607.html</anchorfile>
      <anchor>a293ad9e04b7b2c629cd764e8091e1ecd</anchor>
      <arglist>(double a, double b, double c, double d)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>a02607.html</anchorfile>
      <anchor>adae06dc5e2404d2f88dba94b3cd45b2e</anchor>
      <arglist>(const std::string &amp;s=std::string()) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>equals</name>
      <anchorfile>a02607.html</anchorfile>
      <anchor>a93f0b31776da67a551c77026039f671c</anchor>
      <arglist>(const OrientedPlane3 &amp;s, double tol=1e-9) const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static OrientedPlane3</type>
      <name>Transform</name>
      <anchorfile>a02607.html</anchorfile>
      <anchor>aa63c9c132b2552feb009ef4968147f3d</anchor>
      <arglist>(const OrientedPlane3 &amp;plane, const Pose3 &amp;xr, OptionalJacobian&lt; 3, 6 &gt; Hr=boost::none, OptionalJacobian&lt; 3, 3 &gt; Hp=boost::none)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static size_t</type>
      <name>Dim</name>
      <anchorfile>a02607.html</anchorfile>
      <anchor>a9fb56e750fdd8a07783fed0958fde710</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::OrientedPlane3DirectionPrior</name>
    <filename>a04035.html</filename>
    <base>NoiseModelFactor1&lt; OrientedPlane3 &gt;</base>
    <member kind="function">
      <type></type>
      <name>OrientedPlane3DirectionPrior</name>
      <anchorfile>a04035.html</anchorfile>
      <anchor>a58474b01947fec6eb41ddb88161b95ea</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>OrientedPlane3DirectionPrior</name>
      <anchorfile>a04035.html</anchorfile>
      <anchor>a6d218e4db4cf698bd7b65de62535f1a6</anchor>
      <arglist>(Key key, const Vector &amp;z, const SharedGaussian &amp;noiseModel)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>print</name>
      <anchorfile>a04035.html</anchorfile>
      <anchor>a920029df5cd0da815fce2a7e67d94857</anchor>
      <arglist>(const std::string &amp;s=&quot;OrientedPlane3DirectionPrior&quot;, const KeyFormatter &amp;keyFormatter=DefaultKeyFormatter) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>equals</name>
      <anchorfile>a04035.html</anchorfile>
      <anchor>af1b9587a068d3217a06720bc75f7b795</anchor>
      <arglist>(const NonlinearFactor &amp;expected, double tol=1e-9) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Vector</type>
      <name>evaluateError</name>
      <anchorfile>a04035.html</anchorfile>
      <anchor>a027a34a7977121fd8248c48394ac91ce</anchor>
      <arglist>(const OrientedPlane3 &amp;plane, boost::optional&lt; Matrix &amp; &gt; H=boost::none) const</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Key</type>
      <name>landmarkKey_</name>
      <anchorfile>a04035.html</anchorfile>
      <anchor>ac611241c4d548b8b09a748c6a458939b</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::OrientedPlane3Factor</name>
    <filename>a04031.html</filename>
    <base>NoiseModelFactor2&lt; Pose3, OrientedPlane3 &gt;</base>
    <member kind="function">
      <type></type>
      <name>OrientedPlane3Factor</name>
      <anchorfile>a04031.html</anchorfile>
      <anchor>a8b12c19ade2fbcafc3dfbddeb5b84f85</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>OrientedPlane3Factor</name>
      <anchorfile>a04031.html</anchorfile>
      <anchor>aaf7bbb418fb68426805e24bf2834a269</anchor>
      <arglist>(const Vector &amp;z, const SharedGaussian &amp;noiseModel, const Key &amp;pose, const Key &amp;landmark)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>print</name>
      <anchorfile>a04031.html</anchorfile>
      <anchor>a09446a69d96f29870d3256f60492e4d8</anchor>
      <arglist>(const std::string &amp;s=&quot;OrientedPlane3Factor&quot;, const KeyFormatter &amp;keyFormatter=DefaultKeyFormatter) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Vector</type>
      <name>evaluateError</name>
      <anchorfile>a04031.html</anchorfile>
      <anchor>a8f4b5ebec847f901bed34f8643708853</anchor>
      <arglist>(const Pose3 &amp;pose, const OrientedPlane3 &amp;plane, boost::optional&lt; Matrix &amp; &gt; H1=boost::none, boost::optional&lt; Matrix &amp; &gt; H2=boost::none) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::OutOfRangeThreadsafe</name>
    <filename>a02215.html</filename>
    <base>ThreadsafeException&lt; OutOfRangeThreadsafe &gt;</base>
    <member kind="function">
      <type></type>
      <name>OutOfRangeThreadsafe</name>
      <anchorfile>a02215.html</anchorfile>
      <anchor>abc191cc95d1df7bb9e9fcf7edb857162</anchor>
      <arglist>(const std::string &amp;description)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>gtsam::PreintegratedCombinedMeasurements::Params</name>
    <filename>a03439.html</filename>
    <base>gtsam::PreintegrationParams</base>
    <member kind="function">
      <type></type>
      <name>Params</name>
      <anchorfile>a03439.html</anchorfile>
      <anchor>ad136280f27e56b172fccd11437b757b6</anchor>
      <arglist>(const Vector3 &amp;n_gravity)</arglist>
    </member>
    <member kind="variable">
      <type>Matrix3</type>
      <name>biasAccCovariance</name>
      <anchorfile>a03439.html</anchorfile>
      <anchor>a8ea3e3f39521fc5e9314fd19fa0481cd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Matrix3</type>
      <name>biasOmegaCovariance</name>
      <anchorfile>a03439.html</anchorfile>
      <anchor>a12804481b6e0a32d9746a72e4f92c222</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Matrix6</type>
      <name>biasAccOmegaInt</name>
      <anchorfile>a03439.html</anchorfile>
      <anchor>aaa05f969f12451beb95e0333cfbaac59</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>boost::serialization::access</name>
      <anchorfile>a03439.html</anchorfile>
      <anchor>ac98d07dd8f7b70e16ccb9a01abf56b9c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::PartialPriorFactor</name>
    <filename>a04511.html</filename>
    <templarg>VALUE</templarg>
    <base>gtsam::NoiseModelFactor1</base>
    <member kind="function">
      <type></type>
      <name>PartialPriorFactor</name>
      <anchorfile>a04511.html</anchorfile>
      <anchor>ad5a12a098a699df0b73429e6d3f871ac</anchor>
      <arglist>(Key key, size_t idx, double prior, const SharedNoiseModel &amp;model)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PartialPriorFactor</name>
      <anchorfile>a04511.html</anchorfile>
      <anchor>ab3f0ebe6ab11fd8c3e1db2c58343c7bc</anchor>
      <arglist>(Key key, const std::vector&lt; size_t &gt; &amp;mask, const Vector &amp;prior, const SharedNoiseModel &amp;model)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual gtsam::NonlinearFactor::shared_ptr</type>
      <name>clone</name>
      <anchorfile>a04511.html</anchorfile>
      <anchor>a88f0eefc67afaab1b54d98a9cd58c11a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>print</name>
      <anchorfile>a04511.html</anchorfile>
      <anchor>a2be6676aa4b4411be17f47602346ae39</anchor>
      <arglist>(const std::string &amp;s, const KeyFormatter &amp;keyFormatter=DefaultKeyFormatter) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>equals</name>
      <anchorfile>a04511.html</anchorfile>
      <anchor>aa1bf2bd47c20324d0fde1fdedf31fb5a</anchor>
      <arglist>(const NonlinearFactor &amp;expected, double tol=1e-9) const</arglist>
    </member>
    <member kind="function">
      <type>Vector</type>
      <name>evaluateError</name>
      <anchorfile>a04511.html</anchorfile>
      <anchor>a19d941c50516d09f5eb27db2eeebae14</anchor>
      <arglist>(const T &amp;p, boost::optional&lt; Matrix &amp; &gt; H=boost::none) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>PartialPriorFactor</name>
      <anchorfile>a04511.html</anchorfile>
      <anchor>a60cb0382a63e9b4f09464bb74799d88d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>PartialPriorFactor</name>
      <anchorfile>a04511.html</anchorfile>
      <anchor>a2af74d1a2b166d8009a484c0946593fe</anchor>
      <arglist>(Key key, const SharedNoiseModel &amp;model)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>fillH</name>
      <anchorfile>a04511.html</anchorfile>
      <anchor>adf09a62ac5d3541dacb9caaaa9bd7d32</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Vector</type>
      <name>prior_</name>
      <anchorfile>a04511.html</anchorfile>
      <anchor>a776b942489678b074b0e9a02b255a194</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; size_t &gt;</type>
      <name>mask_</name>
      <anchorfile>a04511.html</anchorfile>
      <anchor>a6d18ec378443af3f15d761612d4ffc40</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Matrix</type>
      <name>H_</name>
      <anchorfile>a04511.html</anchorfile>
      <anchor>a40ec89254b7f8ed1dbee74b850a172f0</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>boost::serialization::access</name>
      <anchorfile>a04511.html</anchorfile>
      <anchor>ac98d07dd8f7b70e16ccb9a01abf56b9c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>PartialPriorFactor&lt; PoseRTV &gt;</name>
    <filename>a04511.html</filename>
    <base>NoiseModelFactor1&lt; PoseRTV &gt;</base>
    <member kind="function">
      <type></type>
      <name>PartialPriorFactor</name>
      <anchorfile>a04511.html</anchorfile>
      <anchor>ad5a12a098a699df0b73429e6d3f871ac</anchor>
      <arglist>(Key key, size_t idx, double prior, const SharedNoiseModel &amp;model)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PartialPriorFactor</name>
      <anchorfile>a04511.html</anchorfile>
      <anchor>ab3f0ebe6ab11fd8c3e1db2c58343c7bc</anchor>
      <arglist>(Key key, const std::vector&lt; size_t &gt; &amp;mask, const Vector &amp;prior, const SharedNoiseModel &amp;model)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual gtsam::NonlinearFactor::shared_ptr</type>
      <name>clone</name>
      <anchorfile>a04511.html</anchorfile>
      <anchor>a88f0eefc67afaab1b54d98a9cd58c11a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>print</name>
      <anchorfile>a04511.html</anchorfile>
      <anchor>a2be6676aa4b4411be17f47602346ae39</anchor>
      <arglist>(const std::string &amp;s, const KeyFormatter &amp;keyFormatter=DefaultKeyFormatter) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>equals</name>
      <anchorfile>a04511.html</anchorfile>
      <anchor>aa1bf2bd47c20324d0fde1fdedf31fb5a</anchor>
      <arglist>(const NonlinearFactor &amp;expected, double tol=1e-9) const</arglist>
    </member>
    <member kind="function">
      <type>Vector</type>
      <name>evaluateError</name>
      <anchorfile>a04511.html</anchorfile>
      <anchor>a19d941c50516d09f5eb27db2eeebae14</anchor>
      <arglist>(const T &amp;p, boost::optional&lt; Matrix &amp; &gt; H=boost::none) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>PartialPriorFactor</name>
      <anchorfile>a04511.html</anchorfile>
      <anchor>a60cb0382a63e9b4f09464bb74799d88d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>PartialPriorFactor</name>
      <anchorfile>a04511.html</anchorfile>
      <anchor>a2af74d1a2b166d8009a484c0946593fe</anchor>
      <arglist>(Key key, const SharedNoiseModel &amp;model)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>fillH</name>
      <anchorfile>a04511.html</anchorfile>
      <anchor>adf09a62ac5d3541dacb9caaaa9bd7d32</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Vector</type>
      <name>prior_</name>
      <anchorfile>a04511.html</anchorfile>
      <anchor>a776b942489678b074b0e9a02b255a194</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; size_t &gt;</type>
      <name>mask_</name>
      <anchorfile>a04511.html</anchorfile>
      <anchor>a6d18ec378443af3f15d761612d4ffc40</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Matrix</type>
      <name>H_</name>
      <anchorfile>a04511.html</anchorfile>
      <anchor>a40ec89254b7f8ed1dbee74b850a172f0</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>boost::serialization::access</name>
      <anchorfile>a04511.html</anchorfile>
      <anchor>ac98d07dd8f7b70e16ccb9a01abf56b9c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>gtsam::ISAM2::PartialSolveResult</name>
    <filename>a03647.html</filename>
  </compound>
  <compound kind="class">
    <name>gtsam::PCGSolver</name>
    <filename>a03311.html</filename>
    <base>gtsam::IterativeSolver</base>
  </compound>
  <compound kind="struct">
    <name>gtsam::PCGSolverParameters</name>
    <filename>a03307.html</filename>
    <base>gtsam::ConjugateGradientParameters</base>
  </compound>
  <compound kind="class">
    <name>gtsam::PendulumFactor1</name>
    <filename>a04623.html</filename>
    <base protection="private">gtsam::NonlinearFactor</base>
    <base>NoiseModelFactor3&lt; double, double, double &gt;</base>
    <member kind="function">
      <type></type>
      <name>PendulumFactor1</name>
      <anchorfile>a04623.html</anchorfile>
      <anchor>ad0b6d537386c773e357b65c60b977eb3</anchor>
      <arglist>(Key k1, Key k, Key velKey, double h, double mu=1000.0)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual gtsam::NonlinearFactor::shared_ptr</type>
      <name>clone</name>
      <anchorfile>a04623.html</anchorfile>
      <anchor>a3f0e4d1bb0416a1b54b644c391e82313</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Vector</type>
      <name>evaluateError</name>
      <anchorfile>a04623.html</anchorfile>
      <anchor>a6e025b45ea3cb8d044e1af8a81c8a43a</anchor>
      <arglist>(const double &amp;qk1, const double &amp;qk, const double &amp;v, boost::optional&lt; Matrix &amp; &gt; H1=boost::none, boost::optional&lt; Matrix &amp; &gt; H2=boost::none, boost::optional&lt; Matrix &amp; &gt; H3=boost::none) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>PendulumFactor1</name>
      <anchorfile>a04623.html</anchorfile>
      <anchor>a399fcf321c25b51a4a1df2f7a5c70c6a</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::PendulumFactor2</name>
    <filename>a04627.html</filename>
    <base protection="private">gtsam::NonlinearFactor</base>
    <base>NoiseModelFactor3&lt; double, double, double &gt;</base>
    <member kind="function">
      <type></type>
      <name>PendulumFactor2</name>
      <anchorfile>a04627.html</anchorfile>
      <anchor>ac487b574f576f24d60ce763979ddffc2</anchor>
      <arglist>(Key vk1, Key vk, Key qkey, double h, double r=1.0, double g=9.81, double mu=1000.0)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual gtsam::NonlinearFactor::shared_ptr</type>
      <name>clone</name>
      <anchorfile>a04627.html</anchorfile>
      <anchor>aded4efcd58a63ad35054a4f6be535372</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Vector</type>
      <name>evaluateError</name>
      <anchorfile>a04627.html</anchorfile>
      <anchor>a28bcf4a0bd62de2440d06bdbae28ea11</anchor>
      <arglist>(const double &amp;vk1, const double &amp;vk, const double &amp;q, boost::optional&lt; Matrix &amp; &gt; H1=boost::none, boost::optional&lt; Matrix &amp; &gt; H2=boost::none, boost::optional&lt; Matrix &amp; &gt; H3=boost::none) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>PendulumFactor2</name>
      <anchorfile>a04627.html</anchorfile>
      <anchor>ad3ca918c4d0e2c6bfedb0b80cd4f7bf1</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::PendulumFactorPk</name>
    <filename>a04631.html</filename>
    <base protection="private">gtsam::NonlinearFactor</base>
    <base>NoiseModelFactor3&lt; double, double, double &gt;</base>
    <member kind="function">
      <type></type>
      <name>PendulumFactorPk</name>
      <anchorfile>a04631.html</anchorfile>
      <anchor>aaffbb4b8c92e113c31bd8c580b3cc874</anchor>
      <arglist>(Key pKey, Key qKey, Key qKey1, double h, double m=1.0, double r=1.0, double g=9.81, double alpha=0.0, double mu=1000.0)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual gtsam::NonlinearFactor::shared_ptr</type>
      <name>clone</name>
      <anchorfile>a04631.html</anchorfile>
      <anchor>a60b0833148b86afd32dfd70cc8faa81b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Vector</type>
      <name>evaluateError</name>
      <anchorfile>a04631.html</anchorfile>
      <anchor>a37aacb7a1975819ade3d84ce4a8debab</anchor>
      <arglist>(const double &amp;pk, const double &amp;qk, const double &amp;qk1, boost::optional&lt; Matrix &amp; &gt; H1=boost::none, boost::optional&lt; Matrix &amp; &gt; H2=boost::none, boost::optional&lt; Matrix &amp; &gt; H3=boost::none) const</arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; PendulumFactorPk &gt;</type>
      <name>shared_ptr</name>
      <anchorfile>a04631.html</anchorfile>
      <anchor>aa288f4a04b4342d7824621fb258b1560</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>PendulumFactorPk</name>
      <anchorfile>a04631.html</anchorfile>
      <anchor>a30a9744e8bbdc8633e4e7b8a803b5896</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>m_</name>
      <anchorfile>a04631.html</anchorfile>
      <anchor>acfabe67ca0df54173a25ef1587c75383</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>r_</name>
      <anchorfile>a04631.html</anchorfile>
      <anchor>ab89d4012430291fb8a83beef94324567</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>g_</name>
      <anchorfile>a04631.html</anchorfile>
      <anchor>a7e8e4429640b8ee294074cdd1148ed3c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>alpha_</name>
      <anchorfile>a04631.html</anchorfile>
      <anchor>a6e20ff7795b329216404fd72666112af</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::PendulumFactorPk1</name>
    <filename>a04635.html</filename>
    <base protection="private">gtsam::NonlinearFactor</base>
    <base>NoiseModelFactor3&lt; double, double, double &gt;</base>
    <member kind="function">
      <type></type>
      <name>PendulumFactorPk1</name>
      <anchorfile>a04635.html</anchorfile>
      <anchor>af2c9c405303ae5416a23be1ba14f3fc5</anchor>
      <arglist>(Key pKey1, Key qKey, Key qKey1, double h, double m=1.0, double r=1.0, double g=9.81, double alpha=0.0, double mu=1000.0)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual gtsam::NonlinearFactor::shared_ptr</type>
      <name>clone</name>
      <anchorfile>a04635.html</anchorfile>
      <anchor>a37555c51fb67b7b3837deec135928d5a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Vector</type>
      <name>evaluateError</name>
      <anchorfile>a04635.html</anchorfile>
      <anchor>a3df0e1164612fd0bb8ca9344e2eaeee2</anchor>
      <arglist>(const double &amp;pk1, const double &amp;qk, const double &amp;qk1, boost::optional&lt; Matrix &amp; &gt; H1=boost::none, boost::optional&lt; Matrix &amp; &gt; H2=boost::none, boost::optional&lt; Matrix &amp; &gt; H3=boost::none) const</arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; PendulumFactorPk1 &gt;</type>
      <name>shared_ptr</name>
      <anchorfile>a04635.html</anchorfile>
      <anchor>ad1efb166780c759a3bbfcdac61ddcde2</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>PendulumFactorPk1</name>
      <anchorfile>a04635.html</anchorfile>
      <anchor>a4ede43a361df1f1a114621d81a28a945</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>m_</name>
      <anchorfile>a04635.html</anchorfile>
      <anchor>a01b560d9fa72b5d296941aa83424d80a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>r_</name>
      <anchorfile>a04635.html</anchorfile>
      <anchor>a9054bf1b3146a12be984e30f18a43aea</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>g_</name>
      <anchorfile>a04635.html</anchorfile>
      <anchor>a4c5794563dcdd08958f81c9bf45acbec</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>alpha_</name>
      <anchorfile>a04635.html</anchorfile>
      <anchor>a157bb96120ca03e249f7f50aa40936bc</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::PinholeBase</name>
    <filename>a02551.html</filename>
    <member kind="function" protection="protected" static="yes">
      <type>static Matrix26</type>
      <name>Dpose</name>
      <anchorfile>a02551.html</anchorfile>
      <anchor>a1b8bc2bf7c2d619cebc1a957b0ba9207</anchor>
      <arglist>(const Point2 &amp;pn, double d)</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static Matrix23</type>
      <name>Dpoint</name>
      <anchorfile>a02551.html</anchorfile>
      <anchor>ab774b22d9bbb3b58e5a05f8fcadd981a</anchor>
      <arglist>(const Point2 &amp;pn, double d, const Matrix3 &amp;Rt)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Pose3</type>
      <name>LevelPose</name>
      <anchorfile>a02551.html</anchorfile>
      <anchor>a9f4fe91997b7fc6a928cac93c80e80f7</anchor>
      <arglist>(const Pose2 &amp;pose2, double height)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Pose3</type>
      <name>LookatPose</name>
      <anchorfile>a02551.html</anchorfile>
      <anchor>ae4e5ed1b27dceeabcb83c0f1c729adae</anchor>
      <arglist>(const Point3 &amp;eye, const Point3 &amp;target, const Point3 &amp;upVector)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PinholeBase</name>
      <anchorfile>a02551.html</anchorfile>
      <anchor>a0cc83392655c4906ab9840b126d63a0c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PinholeBase</name>
      <anchorfile>a02551.html</anchorfile>
      <anchor>a68dca334cf708ac9fd3935dc869b8808</anchor>
      <arglist>(const Pose3 &amp;pose)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>equals</name>
      <anchorfile>a02551.html</anchorfile>
      <anchor>ab01155d3124c3f50bb1239815029e5a7</anchor>
      <arglist>(const PinholeBase &amp;camera, double tol=1e-9) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>a02551.html</anchorfile>
      <anchor>a354034afc01c7db755000c0baed17205</anchor>
      <arglist>(const std::string &amp;s=&quot;PinholeBase&quot;) const</arglist>
    </member>
    <member kind="function">
      <type>const Pose3 &amp;</type>
      <name>pose</name>
      <anchorfile>a02551.html</anchorfile>
      <anchor>a7be8d66d246c887cb0e56e2e5a6efea1</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Rot3 &amp;</type>
      <name>rotation</name>
      <anchorfile>a02551.html</anchorfile>
      <anchor>a6fb3e097bb9bf5f10e247d9b91fffdda</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Point3 &amp;</type>
      <name>translation</name>
      <anchorfile>a02551.html</anchorfile>
      <anchor>af8b3b8e51f3e8fa8356dc1e7da09018d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Pose3 &amp;</type>
      <name>getPose</name>
      <anchorfile>a02551.html</anchorfile>
      <anchor>a08f39b2a0a59b1f4b59a74a631349df9</anchor>
      <arglist>(OptionalJacobian&lt; 6, 6 &gt; H) const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Point2</type>
      <name>Project</name>
      <anchorfile>a02551.html</anchorfile>
      <anchor>a1f8c70f7b2535d87c175fa62be7df074</anchor>
      <arglist>(const Point3 &amp;pc, OptionalJacobian&lt; 2, 3 &gt; Dpoint=boost::none)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Point2</type>
      <name>Project</name>
      <anchorfile>a02551.html</anchorfile>
      <anchor>a0441cb1da2f151488628e73e2d717a37</anchor>
      <arglist>(const Unit3 &amp;pc, OptionalJacobian&lt; 2, 2 &gt; Dpoint=boost::none)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Point3</type>
      <name>BackprojectFromCamera</name>
      <anchorfile>a02551.html</anchorfile>
      <anchor>ad966818e83a45253db0d95381764ead1</anchor>
      <arglist>(const Point2 &amp;p, const double depth, OptionalJacobian&lt; 3, 2 &gt; Dpoint=boost::none, OptionalJacobian&lt; 3, 1 &gt; Ddepth=boost::none)</arglist>
    </member>
    <member kind="function">
      <type>std::pair&lt; Point2, bool &gt;</type>
      <name>projectSafe</name>
      <anchorfile>a02551.html</anchorfile>
      <anchor>a494b5e93c6f577b2a2ef6a2517370429</anchor>
      <arglist>(const Point3 &amp;pw) const</arglist>
    </member>
    <member kind="function">
      <type>Point2</type>
      <name>project2</name>
      <anchorfile>a02551.html</anchorfile>
      <anchor>af5f782cab768cd810a44dabd47717ca7</anchor>
      <arglist>(const Point3 &amp;point, OptionalJacobian&lt; 2, 6 &gt; Dpose=boost::none, OptionalJacobian&lt; 2, 3 &gt; Dpoint=boost::none) const</arglist>
    </member>
    <member kind="function">
      <type>Point2</type>
      <name>project2</name>
      <anchorfile>a02551.html</anchorfile>
      <anchor>a0e3f4fd8319948cd68d442a3d5db94df</anchor>
      <arglist>(const Unit3 &amp;point, OptionalJacobian&lt; 2, 6 &gt; Dpose=boost::none, OptionalJacobian&lt; 2, 2 &gt; Dpoint=boost::none) const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::pair&lt; size_t, size_t &gt;</type>
      <name>translationInterval</name>
      <anchorfile>a02551.html</anchorfile>
      <anchor>a8ec2d5daa414da24c89449940424eca6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PinholeBase</name>
      <anchorfile>a02551.html</anchorfile>
      <anchor>a0cc83392655c4906ab9840b126d63a0c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PinholeBase</name>
      <anchorfile>a02551.html</anchorfile>
      <anchor>a68dca334cf708ac9fd3935dc869b8808</anchor>
      <arglist>(const Pose3 &amp;pose)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>equals</name>
      <anchorfile>a02551.html</anchorfile>
      <anchor>ab01155d3124c3f50bb1239815029e5a7</anchor>
      <arglist>(const PinholeBase &amp;camera, double tol=1e-9) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>a02551.html</anchorfile>
      <anchor>a354034afc01c7db755000c0baed17205</anchor>
      <arglist>(const std::string &amp;s=&quot;PinholeBase&quot;) const</arglist>
    </member>
    <member kind="function">
      <type>const Pose3 &amp;</type>
      <name>pose</name>
      <anchorfile>a02551.html</anchorfile>
      <anchor>a7be8d66d246c887cb0e56e2e5a6efea1</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Rot3 &amp;</type>
      <name>rotation</name>
      <anchorfile>a02551.html</anchorfile>
      <anchor>a6fb3e097bb9bf5f10e247d9b91fffdda</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Point3 &amp;</type>
      <name>translation</name>
      <anchorfile>a02551.html</anchorfile>
      <anchor>af8b3b8e51f3e8fa8356dc1e7da09018d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Pose3 &amp;</type>
      <name>getPose</name>
      <anchorfile>a02551.html</anchorfile>
      <anchor>a08f39b2a0a59b1f4b59a74a631349df9</anchor>
      <arglist>(OptionalJacobian&lt; 6, 6 &gt; H) const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Pose3</type>
      <name>LevelPose</name>
      <anchorfile>a02551.html</anchorfile>
      <anchor>a9f4fe91997b7fc6a928cac93c80e80f7</anchor>
      <arglist>(const Pose2 &amp;pose2, double height)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Pose3</type>
      <name>LookatPose</name>
      <anchorfile>a02551.html</anchorfile>
      <anchor>ae4e5ed1b27dceeabcb83c0f1c729adae</anchor>
      <arglist>(const Point3 &amp;eye, const Point3 &amp;target, const Point3 &amp;upVector)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::pair&lt; size_t, size_t &gt;</type>
      <name>translationInterval</name>
      <anchorfile>a02551.html</anchorfile>
      <anchor>a8ec2d5daa414da24c89449940424eca6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="typedef">
      <type>Rot3</type>
      <name>Rotation</name>
      <anchorfile>a02551.html</anchorfile>
      <anchor>ada38a77a8898dce412f93c8f097d656d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Point2</type>
      <name>Measurement</name>
      <anchorfile>a02551.html</anchorfile>
      <anchor>a83aa0bf26358e7e473a8e56a8ff88f97</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static Matrix26</type>
      <name>Dpose</name>
      <anchorfile>a02551.html</anchorfile>
      <anchor>a1b8bc2bf7c2d619cebc1a957b0ba9207</anchor>
      <arglist>(const Point2 &amp;pn, double d)</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static Matrix23</type>
      <name>Dpoint</name>
      <anchorfile>a02551.html</anchorfile>
      <anchor>ab774b22d9bbb3b58e5a05f8fcadd981a</anchor>
      <arglist>(const Point2 &amp;pn, double d, const Matrix3 &amp;Rt)</arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>boost::serialization::access</name>
      <anchorfile>a02551.html</anchorfile>
      <anchor>ac98d07dd8f7b70e16ccb9a01abf56b9c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::PinholeBaseK</name>
    <filename>a02635.html</filename>
    <templarg>CALIBRATION</templarg>
    <base>gtsam::PinholeBase</base>
    <member kind="function">
      <type></type>
      <name>PinholeBaseK</name>
      <anchorfile>a02635.html</anchorfile>
      <anchor>a270bc95972da02d583525d15259c3e92</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PinholeBaseK</name>
      <anchorfile>a02635.html</anchorfile>
      <anchor>a361c9de1b3397f8e80ee8c63841c0477</anchor>
      <arglist>(const Pose3 &amp;pose)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const CALIBRATION &amp;</type>
      <name>calibration</name>
      <anchorfile>a02635.html</anchorfile>
      <anchor>a090cb557ab46b1e5bb070fe4ac4f9d1b</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>boost::serialization::access</name>
      <anchorfile>a02635.html</anchorfile>
      <anchor>ac98d07dd8f7b70e16ccb9a01abf56b9c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>std::pair&lt; Point2, bool &gt;</type>
      <name>projectSafe</name>
      <anchorfile>a02635.html</anchorfile>
      <anchor>ac3dec125129ef01a38c426b12b814972</anchor>
      <arglist>(const Point3 &amp;pw) const</arglist>
    </member>
    <member kind="function">
      <type>Point2</type>
      <name>_project</name>
      <anchorfile>a02635.html</anchorfile>
      <anchor>acac57ed14a4ce11516655cde62a78a6e</anchor>
      <arglist>(const POINT &amp;pw, OptionalJacobian&lt; 2, 6 &gt; Dpose, OptionalJacobian&lt; 2, FixedDimension&lt; POINT &gt;::value &gt; Dpoint, OptionalJacobian&lt; 2, DimK &gt; Dcal) const</arglist>
    </member>
    <member kind="function">
      <type>Point2</type>
      <name>project</name>
      <anchorfile>a02635.html</anchorfile>
      <anchor>a23034ce37bc65be08a5e1ad942eacb5a</anchor>
      <arglist>(const Point3 &amp;pw, OptionalJacobian&lt; 2, 6 &gt; Dpose=boost::none, OptionalJacobian&lt; 2, 3 &gt; Dpoint=boost::none, OptionalJacobian&lt; 2, DimK &gt; Dcal=boost::none) const</arglist>
    </member>
    <member kind="function">
      <type>Point2</type>
      <name>project</name>
      <anchorfile>a02635.html</anchorfile>
      <anchor>a2098458d3817715320032666f146d9b3</anchor>
      <arglist>(const Unit3 &amp;pw, OptionalJacobian&lt; 2, 6 &gt; Dpose=boost::none, OptionalJacobian&lt; 2, 2 &gt; Dpoint=boost::none, OptionalJacobian&lt; 2, DimK &gt; Dcal=boost::none) const</arglist>
    </member>
    <member kind="function">
      <type>Point3</type>
      <name>backproject</name>
      <anchorfile>a02635.html</anchorfile>
      <anchor>a95424c329c9afbc47ead6181d6e662fb</anchor>
      <arglist>(const Point2 &amp;p, double depth, OptionalJacobian&lt; 3, 6 &gt; Dresult_dpose=boost::none, OptionalJacobian&lt; 3, 2 &gt; Dresult_dp=boost::none, OptionalJacobian&lt; 3, 1 &gt; Dresult_ddepth=boost::none, OptionalJacobian&lt; 3, DimK &gt; Dresult_dcal=boost::none) const</arglist>
    </member>
    <member kind="function">
      <type>Unit3</type>
      <name>backprojectPointAtInfinity</name>
      <anchorfile>a02635.html</anchorfile>
      <anchor>ac551b75b228e8716edc1a448e6356c60</anchor>
      <arglist>(const Point2 &amp;p) const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>range</name>
      <anchorfile>a02635.html</anchorfile>
      <anchor>a29aad57997b95a716f03dd8f13583413</anchor>
      <arglist>(const Point3 &amp;point, OptionalJacobian&lt; 1, 6 &gt; Dcamera=boost::none, OptionalJacobian&lt; 1, 3 &gt; Dpoint=boost::none) const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>range</name>
      <anchorfile>a02635.html</anchorfile>
      <anchor>ae9497d340bbe9582ee1ce018f28c0385</anchor>
      <arglist>(const Pose3 &amp;pose, OptionalJacobian&lt; 1, 6 &gt; Dcamera=boost::none, OptionalJacobian&lt; 1, 6 &gt; Dpose=boost::none) const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>range</name>
      <anchorfile>a02635.html</anchorfile>
      <anchor>a0b1a80eddb959ae1474cb5cbc730b5c4</anchor>
      <arglist>(const CalibratedCamera &amp;camera, OptionalJacobian&lt; 1, 6 &gt; Dcamera=boost::none, OptionalJacobian&lt; 1, 6 &gt; Dother=boost::none) const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>range</name>
      <anchorfile>a02635.html</anchorfile>
      <anchor>ab0d0614dc7838829690a78e7434268a1</anchor>
      <arglist>(const PinholeBaseK&lt; CalibrationB &gt; &amp;camera, OptionalJacobian&lt; 1, 6 &gt; Dcamera=boost::none, OptionalJacobian&lt; 1, 6 &gt; Dother=boost::none) const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PinholeBaseK</name>
      <anchorfile>a02635.html</anchorfile>
      <anchor>a270bc95972da02d583525d15259c3e92</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PinholeBaseK</name>
      <anchorfile>a02635.html</anchorfile>
      <anchor>a361c9de1b3397f8e80ee8c63841c0477</anchor>
      <arglist>(const Pose3 &amp;pose)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const CALIBRATION &amp;</type>
      <name>calibration</name>
      <anchorfile>a02635.html</anchorfile>
      <anchor>a090cb557ab46b1e5bb070fe4ac4f9d1b</anchor>
      <arglist>() const =0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>PinholeBaseK&lt; Calibration &gt;</name>
    <filename>a02635.html</filename>
    <base>gtsam::PinholeBase</base>
    <member kind="friend">
      <type>friend class</type>
      <name>boost::serialization::access</name>
      <anchorfile>a02635.html</anchorfile>
      <anchor>ac98d07dd8f7b70e16ccb9a01abf56b9c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>std::pair&lt; Point2, bool &gt;</type>
      <name>projectSafe</name>
      <anchorfile>a02635.html</anchorfile>
      <anchor>ac3dec125129ef01a38c426b12b814972</anchor>
      <arglist>(const Point3 &amp;pw) const</arglist>
    </member>
    <member kind="function">
      <type>Point2</type>
      <name>_project</name>
      <anchorfile>a02635.html</anchorfile>
      <anchor>acac57ed14a4ce11516655cde62a78a6e</anchor>
      <arglist>(const POINT &amp;pw, OptionalJacobian&lt; 2, 6 &gt; Dpose, OptionalJacobian&lt; 2, FixedDimension&lt; POINT &gt;::value &gt; Dpoint, OptionalJacobian&lt; 2, DimK &gt; Dcal) const</arglist>
    </member>
    <member kind="function">
      <type>Point2</type>
      <name>project</name>
      <anchorfile>a02635.html</anchorfile>
      <anchor>a23034ce37bc65be08a5e1ad942eacb5a</anchor>
      <arglist>(const Point3 &amp;pw, OptionalJacobian&lt; 2, 6 &gt; Dpose=boost::none, OptionalJacobian&lt; 2, 3 &gt; Dpoint=boost::none, OptionalJacobian&lt; 2, DimK &gt; Dcal=boost::none) const</arglist>
    </member>
    <member kind="function">
      <type>Point2</type>
      <name>project</name>
      <anchorfile>a02635.html</anchorfile>
      <anchor>a2098458d3817715320032666f146d9b3</anchor>
      <arglist>(const Unit3 &amp;pw, OptionalJacobian&lt; 2, 6 &gt; Dpose=boost::none, OptionalJacobian&lt; 2, 2 &gt; Dpoint=boost::none, OptionalJacobian&lt; 2, DimK &gt; Dcal=boost::none) const</arglist>
    </member>
    <member kind="function">
      <type>Point3</type>
      <name>backproject</name>
      <anchorfile>a02635.html</anchorfile>
      <anchor>a95424c329c9afbc47ead6181d6e662fb</anchor>
      <arglist>(const Point2 &amp;p, double depth, OptionalJacobian&lt; 3, 6 &gt; Dresult_dpose=boost::none, OptionalJacobian&lt; 3, 2 &gt; Dresult_dp=boost::none, OptionalJacobian&lt; 3, 1 &gt; Dresult_ddepth=boost::none, OptionalJacobian&lt; 3, DimK &gt; Dresult_dcal=boost::none) const</arglist>
    </member>
    <member kind="function">
      <type>Unit3</type>
      <name>backprojectPointAtInfinity</name>
      <anchorfile>a02635.html</anchorfile>
      <anchor>ac551b75b228e8716edc1a448e6356c60</anchor>
      <arglist>(const Point2 &amp;p) const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>range</name>
      <anchorfile>a02635.html</anchorfile>
      <anchor>a29aad57997b95a716f03dd8f13583413</anchor>
      <arglist>(const Point3 &amp;point, OptionalJacobian&lt; 1, 6 &gt; Dcamera=boost::none, OptionalJacobian&lt; 1, 3 &gt; Dpoint=boost::none) const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>range</name>
      <anchorfile>a02635.html</anchorfile>
      <anchor>ae9497d340bbe9582ee1ce018f28c0385</anchor>
      <arglist>(const Pose3 &amp;pose, OptionalJacobian&lt; 1, 6 &gt; Dcamera=boost::none, OptionalJacobian&lt; 1, 6 &gt; Dpose=boost::none) const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>range</name>
      <anchorfile>a02635.html</anchorfile>
      <anchor>a0b1a80eddb959ae1474cb5cbc730b5c4</anchor>
      <arglist>(const CalibratedCamera &amp;camera, OptionalJacobian&lt; 1, 6 &gt; Dcamera=boost::none, OptionalJacobian&lt; 1, 6 &gt; Dother=boost::none) const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>range</name>
      <anchorfile>a02635.html</anchorfile>
      <anchor>ab0d0614dc7838829690a78e7434268a1</anchor>
      <arglist>(const PinholeBaseK&lt; CalibrationB &gt; &amp;camera, OptionalJacobian&lt; 1, 6 &gt; Dcamera=boost::none, OptionalJacobian&lt; 1, 6 &gt; Dother=boost::none) const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PinholeBaseK</name>
      <anchorfile>a02635.html</anchorfile>
      <anchor>a270bc95972da02d583525d15259c3e92</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PinholeBaseK</name>
      <anchorfile>a02635.html</anchorfile>
      <anchor>a361c9de1b3397f8e80ee8c63841c0477</anchor>
      <arglist>(const Pose3 &amp;pose)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const Calibration &amp;</type>
      <name>calibration</name>
      <anchorfile>a02635.html</anchorfile>
      <anchor>a090cb557ab46b1e5bb070fe4ac4f9d1b</anchor>
      <arglist>() const=0</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PinholeBaseK</name>
      <anchorfile>a02635.html</anchorfile>
      <anchor>a270bc95972da02d583525d15259c3e92</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PinholeBaseK</name>
      <anchorfile>a02635.html</anchorfile>
      <anchor>a361c9de1b3397f8e80ee8c63841c0477</anchor>
      <arglist>(const Pose3 &amp;pose)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const Calibration &amp;</type>
      <name>calibration</name>
      <anchorfile>a02635.html</anchorfile>
      <anchor>a090cb557ab46b1e5bb070fe4ac4f9d1b</anchor>
      <arglist>() const=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::PinholeCamera</name>
    <filename>a02619.html</filename>
    <templarg>Calibration</templarg>
    <base>PinholeBaseK&lt; Calibration &gt;</base>
    <member kind="function">
      <type></type>
      <name>PinholeCamera</name>
      <anchorfile>a02619.html</anchorfile>
      <anchor>af2d439f6216b9f80e5dc38509caee6cb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PinholeCamera</name>
      <anchorfile>a02619.html</anchorfile>
      <anchor>a491f98259acec7e03e50e93c4e26a9bb</anchor>
      <arglist>(const Pose3 &amp;pose)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PinholeCamera</name>
      <anchorfile>a02619.html</anchorfile>
      <anchor>a4c5c98302819a067de838de6b17adaf0</anchor>
      <arglist>(const Pose3 &amp;pose, const Calibration &amp;K)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static PinholeCamera</type>
      <name>Level</name>
      <anchorfile>a02619.html</anchorfile>
      <anchor>a4fd70e98dd6aeb348052060a70253192</anchor>
      <arglist>(const Calibration &amp;K, const Pose2 &amp;pose2, double height)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static PinholeCamera</type>
      <name>Level</name>
      <anchorfile>a02619.html</anchorfile>
      <anchor>a4bd8045e10a47a2d036d83185bddae7a</anchor>
      <arglist>(const Pose2 &amp;pose2, double height)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static PinholeCamera</type>
      <name>Lookat</name>
      <anchorfile>a02619.html</anchorfile>
      <anchor>abb3ee13749b14276c08002c4e668e3dd</anchor>
      <arglist>(const Point3 &amp;eye, const Point3 &amp;target, const Point3 &amp;upVector, const Calibration &amp;K=Calibration())</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PinholeCamera</name>
      <anchorfile>a02619.html</anchorfile>
      <anchor>ad1c537e3934ddede949402b11416bb1f</anchor>
      <arglist>(const Vector &amp;v)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PinholeCamera</name>
      <anchorfile>a02619.html</anchorfile>
      <anchor>ab58ad82e7ebe548736e7fc04ba4433d6</anchor>
      <arglist>(const Vector &amp;v, const Vector &amp;K)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>equals</name>
      <anchorfile>a02619.html</anchorfile>
      <anchor>a84e6182a46e5866f91d1ad658d2f8560</anchor>
      <arglist>(const Base &amp;camera, double tol=1e-9) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>a02619.html</anchorfile>
      <anchor>ab969f1bcd4a26c5d327ced8658776d70</anchor>
      <arglist>(const std::string &amp;s=&quot;PinholeCamera&quot;) const</arglist>
    </member>
    <member kind="function">
      <type>const Pose3 &amp;</type>
      <name>pose</name>
      <anchorfile>a02619.html</anchorfile>
      <anchor>ab8c2969fa9ba9b6977fd4435ab51b9d1</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Pose3 &amp;</type>
      <name>getPose</name>
      <anchorfile>a02619.html</anchorfile>
      <anchor>ad84a401b9ad115682cca1233d708ce92</anchor>
      <arglist>(OptionalJacobian&lt; 6, dimension &gt; H) const</arglist>
    </member>
    <member kind="function">
      <type>const Calibration &amp;</type>
      <name>calibration</name>
      <anchorfile>a02619.html</anchorfile>
      <anchor>a0e000ca8e18759903458adb6dbc64ecd</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>dim</name>
      <anchorfile>a02619.html</anchorfile>
      <anchor>a6a29f766d77720bc389eb1e5fe99635b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>PinholeCamera</type>
      <name>retract</name>
      <anchorfile>a02619.html</anchorfile>
      <anchor>ac70b5b5b934344a5af23a15337cc02d7</anchor>
      <arglist>(const Vector &amp;d) const</arglist>
    </member>
    <member kind="function">
      <type>VectorK6</type>
      <name>localCoordinates</name>
      <anchorfile>a02619.html</anchorfile>
      <anchor>ac37ca91118e6beac5c5c334471ea261d</anchor>
      <arglist>(const PinholeCamera &amp;T2) const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static size_t</type>
      <name>Dim</name>
      <anchorfile>a02619.html</anchorfile>
      <anchor>a830247e12e520b09ec15897ddd7b95fc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static PinholeCamera</type>
      <name>identity</name>
      <anchorfile>a02619.html</anchorfile>
      <anchor>ab0fab3fd28880de1a4f6564b595511c7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>boost::serialization::access</name>
      <anchorfile>a02619.html</anchorfile>
      <anchor>ac98d07dd8f7b70e16ccb9a01abf56b9c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>Point2</type>
      <name>_project2</name>
      <anchorfile>a02619.html</anchorfile>
      <anchor>a1831d4028eb7d564b8ca412468fa32f0</anchor>
      <arglist>(const POINT &amp;pw, OptionalJacobian&lt; 2, dimension &gt; Dcamera, OptionalJacobian&lt; 2, FixedDimension&lt; POINT &gt;::value &gt; Dpoint) const</arglist>
    </member>
    <member kind="function">
      <type>Point2</type>
      <name>project2</name>
      <anchorfile>a02619.html</anchorfile>
      <anchor>a441980d0f04bfb4a4144f3af647602bf</anchor>
      <arglist>(const Point3 &amp;pw, OptionalJacobian&lt; 2, dimension &gt; Dcamera=boost::none, OptionalJacobian&lt; 2, 3 &gt; Dpoint=boost::none) const</arglist>
    </member>
    <member kind="function">
      <type>Point2</type>
      <name>project2</name>
      <anchorfile>a02619.html</anchorfile>
      <anchor>acc44b8ef143a9380d56872f8e6b71626</anchor>
      <arglist>(const Unit3 &amp;pw, OptionalJacobian&lt; 2, dimension &gt; Dcamera=boost::none, OptionalJacobian&lt; 2, 2 &gt; Dpoint=boost::none) const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>range</name>
      <anchorfile>a02619.html</anchorfile>
      <anchor>af87c42ad7a9f91ea00561fe6edc2679c</anchor>
      <arglist>(const Point3 &amp;point, OptionalJacobian&lt; 1, dimension &gt; Dcamera=boost::none, OptionalJacobian&lt; 1, 3 &gt; Dpoint=boost::none) const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>range</name>
      <anchorfile>a02619.html</anchorfile>
      <anchor>aa1b92a4f46a3fa94f998006c9b0c0f58</anchor>
      <arglist>(const Pose3 &amp;pose, OptionalJacobian&lt; 1, dimension &gt; Dcamera=boost::none, OptionalJacobian&lt; 1, 6 &gt; Dpose=boost::none) const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>range</name>
      <anchorfile>a02619.html</anchorfile>
      <anchor>aada0a64f2eacd47c83500511c00a6613</anchor>
      <arglist>(const PinholeCamera&lt; CalibrationB &gt; &amp;camera, OptionalJacobian&lt; 1, dimension &gt; Dcamera=boost::none, OptionalJacobian&lt; 1, 6+CalibrationB::dimension &gt; Dother=boost::none) const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>range</name>
      <anchorfile>a02619.html</anchorfile>
      <anchor>af6ad1d251f9454ed7e621441c14f71d9</anchor>
      <arglist>(const CalibratedCamera &amp;camera, OptionalJacobian&lt; 1, dimension &gt; Dcamera=boost::none, OptionalJacobian&lt; 1, 6 &gt; Dother=boost::none) const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PinholeCamera</name>
      <anchorfile>a02619.html</anchorfile>
      <anchor>af2d439f6216b9f80e5dc38509caee6cb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PinholeCamera</name>
      <anchorfile>a02619.html</anchorfile>
      <anchor>a491f98259acec7e03e50e93c4e26a9bb</anchor>
      <arglist>(const Pose3 &amp;pose)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PinholeCamera</name>
      <anchorfile>a02619.html</anchorfile>
      <anchor>a4c5c98302819a067de838de6b17adaf0</anchor>
      <arglist>(const Pose3 &amp;pose, const Calibration &amp;K)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PinholeCamera</name>
      <anchorfile>a02619.html</anchorfile>
      <anchor>ad1c537e3934ddede949402b11416bb1f</anchor>
      <arglist>(const Vector &amp;v)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PinholeCamera</name>
      <anchorfile>a02619.html</anchorfile>
      <anchor>ab58ad82e7ebe548736e7fc04ba4433d6</anchor>
      <arglist>(const Vector &amp;v, const Vector &amp;K)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>equals</name>
      <anchorfile>a02619.html</anchorfile>
      <anchor>a84e6182a46e5866f91d1ad658d2f8560</anchor>
      <arglist>(const Base &amp;camera, double tol=1e-9) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>a02619.html</anchorfile>
      <anchor>ab969f1bcd4a26c5d327ced8658776d70</anchor>
      <arglist>(const std::string &amp;s=&quot;PinholeCamera&quot;) const</arglist>
    </member>
    <member kind="function">
      <type>const Pose3 &amp;</type>
      <name>pose</name>
      <anchorfile>a02619.html</anchorfile>
      <anchor>ab8c2969fa9ba9b6977fd4435ab51b9d1</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Pose3 &amp;</type>
      <name>getPose</name>
      <anchorfile>a02619.html</anchorfile>
      <anchor>ad84a401b9ad115682cca1233d708ce92</anchor>
      <arglist>(OptionalJacobian&lt; 6, dimension &gt; H) const</arglist>
    </member>
    <member kind="function">
      <type>const Calibration &amp;</type>
      <name>calibration</name>
      <anchorfile>a02619.html</anchorfile>
      <anchor>a0e000ca8e18759903458adb6dbc64ecd</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static PinholeCamera</type>
      <name>Level</name>
      <anchorfile>a02619.html</anchorfile>
      <anchor>a4fd70e98dd6aeb348052060a70253192</anchor>
      <arglist>(const Calibration &amp;K, const Pose2 &amp;pose2, double height)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static PinholeCamera</type>
      <name>Level</name>
      <anchorfile>a02619.html</anchorfile>
      <anchor>a4bd8045e10a47a2d036d83185bddae7a</anchor>
      <arglist>(const Pose2 &amp;pose2, double height)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static PinholeCamera</type>
      <name>Lookat</name>
      <anchorfile>a02619.html</anchorfile>
      <anchor>abb3ee13749b14276c08002c4e668e3dd</anchor>
      <arglist>(const Point3 &amp;eye, const Point3 &amp;target, const Point3 &amp;upVector, const Calibration &amp;K=Calibration())</arglist>
    </member>
    <member kind="typedef">
      <type>Point2</type>
      <name>Measurement</name>
      <anchorfile>a02619.html</anchorfile>
      <anchor>af399d9d8f7df9814febd70928842ba60</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::PinholePose</name>
    <filename>a02639.html</filename>
    <templarg></templarg>
    <base>gtsam::PinholeBaseK</base>
    <member kind="function">
      <type></type>
      <name>PinholePose</name>
      <anchorfile>a02639.html</anchorfile>
      <anchor>a0f03ed9ab476d4fef2c5dc602e1081f7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PinholePose</name>
      <anchorfile>a02639.html</anchorfile>
      <anchor>ae8c10a4c38cf272931232cf2d2723de2</anchor>
      <arglist>(const Pose3 &amp;pose)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PinholePose</name>
      <anchorfile>a02639.html</anchorfile>
      <anchor>aadf627b6018a112d49f5d3649b5667ca</anchor>
      <arglist>(const Pose3 &amp;pose, const boost::shared_ptr&lt; CALIBRATION &gt; &amp;K)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static PinholePose</type>
      <name>Level</name>
      <anchorfile>a02639.html</anchorfile>
      <anchor>ae0e7364bd9eced44eb4ee081de10c336</anchor>
      <arglist>(const boost::shared_ptr&lt; CALIBRATION &gt; &amp;K, const Pose2 &amp;pose2, double height)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static PinholePose</type>
      <name>Level</name>
      <anchorfile>a02639.html</anchorfile>
      <anchor>ae9e4f3177ad0f29b2c955a88f2430ede</anchor>
      <arglist>(const Pose2 &amp;pose2, double height)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static PinholePose</type>
      <name>Lookat</name>
      <anchorfile>a02639.html</anchorfile>
      <anchor>a0936e707aaa93ae8c7b38fae33adcfb5</anchor>
      <arglist>(const Point3 &amp;eye, const Point3 &amp;target, const Point3 &amp;upVector, const boost::shared_ptr&lt; CALIBRATION &gt; &amp;K=boost::make_shared&lt; CALIBRATION &gt;())</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PinholePose</name>
      <anchorfile>a02639.html</anchorfile>
      <anchor>aad52e2f5639eba5fca2d1ea983e984af</anchor>
      <arglist>(const Vector &amp;v)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PinholePose</name>
      <anchorfile>a02639.html</anchorfile>
      <anchor>a6d953e746fa85d581282c70edef4677f</anchor>
      <arglist>(const Vector &amp;v, const Vector &amp;K)</arglist>
    </member>
    <member kind="friend">
      <type>friend std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a02639.html</anchorfile>
      <anchor>a21bb6975d66f07758b4816db805a262e</anchor>
      <arglist>(std::ostream &amp;os, const PinholePose &amp;camera)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>equals</name>
      <anchorfile>a02639.html</anchorfile>
      <anchor>ad129a0682b6b96172d39c918dc17b76d</anchor>
      <arglist>(const Base &amp;camera, double tol=1e-9) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>a02639.html</anchorfile>
      <anchor>a0a559e9d752dfd5f9f502526afc57847</anchor>
      <arglist>(const std::string &amp;s=&quot;PinholePose&quot;) const</arglist>
    </member>
    <member kind="function">
      <type>const boost::shared_ptr&lt; CALIBRATION &gt; &amp;</type>
      <name>sharedCalibration</name>
      <anchorfile>a02639.html</anchorfile>
      <anchor>aeac8919e22b4af4362e216de549fb037</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const CALIBRATION &amp;</type>
      <name>calibration</name>
      <anchorfile>a02639.html</anchorfile>
      <anchor>a17faf00781d47a902ef0c77352e81646</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Point2</type>
      <name>project2</name>
      <anchorfile>a02639.html</anchorfile>
      <anchor>a9e7a5edd54be46fd47ffe95ad5bda312</anchor>
      <arglist>(const Point3 &amp;pw, OptionalJacobian&lt; 2, 6 &gt; Dpose=boost::none, OptionalJacobian&lt; 2, 3 &gt; Dpoint=boost::none) const</arglist>
    </member>
    <member kind="function">
      <type>Point2</type>
      <name>project2</name>
      <anchorfile>a02639.html</anchorfile>
      <anchor>a2b4877980028e6b41ea39934e0fbbebe</anchor>
      <arglist>(const Unit3 &amp;pw, OptionalJacobian&lt; 2, 6 &gt; Dpose=boost::none, OptionalJacobian&lt; 2, 2 &gt; Dpoint=boost::none) const</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>dim</name>
      <anchorfile>a02639.html</anchorfile>
      <anchor>a8ccb4afc06d4e6103d2852c6ef21bbe0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>PinholePose</type>
      <name>retract</name>
      <anchorfile>a02639.html</anchorfile>
      <anchor>a9ee164dc395a79d050aa6b944532e291</anchor>
      <arglist>(const Vector6 &amp;d) const</arglist>
    </member>
    <member kind="function">
      <type>Vector6</type>
      <name>localCoordinates</name>
      <anchorfile>a02639.html</anchorfile>
      <anchor>aed8c543d3a6e2e81577475f9cad8188b</anchor>
      <arglist>(const PinholePose &amp;p) const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static size_t</type>
      <name>Dim</name>
      <anchorfile>a02639.html</anchorfile>
      <anchor>ac85db680765c0d0aeb9bbbe1b7f05a10</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static PinholePose</type>
      <name>identity</name>
      <anchorfile>a02639.html</anchorfile>
      <anchor>a115bd12796da4f8a7fe4f57d4e97bda0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PinholePose</name>
      <anchorfile>a02639.html</anchorfile>
      <anchor>a0f03ed9ab476d4fef2c5dc602e1081f7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PinholePose</name>
      <anchorfile>a02639.html</anchorfile>
      <anchor>ae8c10a4c38cf272931232cf2d2723de2</anchor>
      <arglist>(const Pose3 &amp;pose)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PinholePose</name>
      <anchorfile>a02639.html</anchorfile>
      <anchor>aadf627b6018a112d49f5d3649b5667ca</anchor>
      <arglist>(const Pose3 &amp;pose, const boost::shared_ptr&lt; CALIBRATION &gt; &amp;K)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PinholePose</name>
      <anchorfile>a02639.html</anchorfile>
      <anchor>aad52e2f5639eba5fca2d1ea983e984af</anchor>
      <arglist>(const Vector &amp;v)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PinholePose</name>
      <anchorfile>a02639.html</anchorfile>
      <anchor>a6d953e746fa85d581282c70edef4677f</anchor>
      <arglist>(const Vector &amp;v, const Vector &amp;K)</arglist>
    </member>
    <member kind="function">
      <type>const boost::shared_ptr&lt; CALIBRATION &gt; &amp;</type>
      <name>sharedCalibration</name>
      <anchorfile>a02639.html</anchorfile>
      <anchor>aeac8919e22b4af4362e216de549fb037</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const CALIBRATION &amp;</type>
      <name>calibration</name>
      <anchorfile>a02639.html</anchorfile>
      <anchor>a17faf00781d47a902ef0c77352e81646</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Point2</type>
      <name>project2</name>
      <anchorfile>a02639.html</anchorfile>
      <anchor>a9e7a5edd54be46fd47ffe95ad5bda312</anchor>
      <arglist>(const Point3 &amp;pw, OptionalJacobian&lt; 2, 6 &gt; Dpose=boost::none, OptionalJacobian&lt; 2, 3 &gt; Dpoint=boost::none) const</arglist>
    </member>
    <member kind="function">
      <type>Point2</type>
      <name>project2</name>
      <anchorfile>a02639.html</anchorfile>
      <anchor>a2b4877980028e6b41ea39934e0fbbebe</anchor>
      <arglist>(const Unit3 &amp;pw, OptionalJacobian&lt; 2, 6 &gt; Dpose=boost::none, OptionalJacobian&lt; 2, 2 &gt; Dpoint=boost::none) const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static PinholePose</type>
      <name>Level</name>
      <anchorfile>a02639.html</anchorfile>
      <anchor>ae0e7364bd9eced44eb4ee081de10c336</anchor>
      <arglist>(const boost::shared_ptr&lt; CALIBRATION &gt; &amp;K, const Pose2 &amp;pose2, double height)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static PinholePose</type>
      <name>Level</name>
      <anchorfile>a02639.html</anchorfile>
      <anchor>ae9e4f3177ad0f29b2c955a88f2430ede</anchor>
      <arglist>(const Pose2 &amp;pose2, double height)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static PinholePose</type>
      <name>Lookat</name>
      <anchorfile>a02639.html</anchorfile>
      <anchor>a0936e707aaa93ae8c7b38fae33adcfb5</anchor>
      <arglist>(const Point3 &amp;eye, const Point3 &amp;target, const Point3 &amp;upVector, const boost::shared_ptr&lt; CALIBRATION &gt; &amp;K=boost::make_shared&lt; CALIBRATION &gt;())</arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>boost::serialization::access</name>
      <anchorfile>a02639.html</anchorfile>
      <anchor>ac98d07dd8f7b70e16ccb9a01abf56b9c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::PinholeSet</name>
    <filename>a02651.html</filename>
    <templarg></templarg>
    <base>gtsam::CameraSet</base>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>print</name>
      <anchorfile>a02651.html</anchorfile>
      <anchor>aef107d43533f91347b15d46d48c479b9</anchor>
      <arglist>(const std::string &amp;s=&quot;&quot;) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>equals</name>
      <anchorfile>a02651.html</anchorfile>
      <anchor>a6b1c8e5f683d1e9bb704134f4ec038cf</anchor>
      <arglist>(const PinholeSet &amp;p, double tol=1e-9) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~PinholeSet</name>
      <anchorfile>a02651.html</anchorfile>
      <anchor>a7e8ddbbd82ec0b1c73a62bf8ce4af97a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>TriangulationResult</type>
      <name>triangulateSafe</name>
      <anchorfile>a02651.html</anchorfile>
      <anchor>a5fbe615d1bfd9e5c3a797e44297eea09</anchor>
      <arglist>(const typename CAMERA::MeasurementVector &amp;measured, const TriangulationParameters &amp;params) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>print</name>
      <anchorfile>a02651.html</anchorfile>
      <anchor>aef107d43533f91347b15d46d48c479b9</anchor>
      <arglist>(const std::string &amp;s=&quot;&quot;) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>equals</name>
      <anchorfile>a02651.html</anchorfile>
      <anchor>a6b1c8e5f683d1e9bb704134f4ec038cf</anchor>
      <arglist>(const PinholeSet &amp;p, double tol=1e-9) const</arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>boost::serialization::access</name>
      <anchorfile>a02651.html</anchorfile>
      <anchor>ac98d07dd8f7b70e16ccb9a01abf56b9c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::Point2</name>
    <filename>a02663.html</filename>
    <member kind="function">
      <type></type>
      <name>Point2</name>
      <anchorfile>a02663.html</anchorfile>
      <anchor>a23e1dc981729cfa354af8be2a7c4e6c8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Point2</name>
      <anchorfile>a02663.html</anchorfile>
      <anchor>a1f58a5dae8ee88fdbe2acb1fd7582369</anchor>
      <arglist>(const Vector2 &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>a02663.html</anchorfile>
      <anchor>a030e4515a8de5b8dba86170623ce413d</anchor>
      <arglist>(const std::string &amp;s=&quot;&quot;) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>equals</name>
      <anchorfile>a02663.html</anchorfile>
      <anchor>a60225b024315122df2a683f1bde3b64a</anchor>
      <arglist>(const Point2 &amp;q, double tol=1e-9) const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Point2</type>
      <name>identity</name>
      <anchorfile>a02663.html</anchorfile>
      <anchor>ae97f6facf15d612b879e02b1c5c86caa</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Point2</type>
      <name>unit</name>
      <anchorfile>a02663.html</anchorfile>
      <anchor>ac539859cedced50340480304b8f3df15</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>norm</name>
      <anchorfile>a02663.html</anchorfile>
      <anchor>aa26702eb24b761952e85e19da6df8e08</anchor>
      <arglist>(OptionalJacobian&lt; 1, 2 &gt; H=boost::none) const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>distance</name>
      <anchorfile>a02663.html</anchorfile>
      <anchor>af74f737c9de131e1e579b937c47cf177</anchor>
      <arglist>(const Point2 &amp;p2, OptionalJacobian&lt; 1, 2 &gt; H1=boost::none, OptionalJacobian&lt; 1, 2 &gt; H2=boost::none) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>a02663.html</anchorfile>
      <anchor>a0d0633c0fd2c642baff527796b947937</anchor>
      <arglist>(const Point2 &amp;q) const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>x</name>
      <anchorfile>a02663.html</anchorfile>
      <anchor>a1102ebe48fb808a6e4811c7cce85033b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>y</name>
      <anchorfile>a02663.html</anchorfile>
      <anchor>abdf6b052d6a6e13261c849504806e030</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Vector2 &amp;</type>
      <name>vector</name>
      <anchorfile>a02663.html</anchorfile>
      <anchor>ac5499de2e2a50e3eac974be7bdbb1ae4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>boost::serialization::access</name>
      <anchorfile>a02663.html</anchorfile>
      <anchor>ac98d07dd8f7b70e16ccb9a01abf56b9c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Point2</name>
      <anchorfile>a02663.html</anchorfile>
      <anchor>a23e1dc981729cfa354af8be2a7c4e6c8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Point2</name>
      <anchorfile>a02663.html</anchorfile>
      <anchor>a1f58a5dae8ee88fdbe2acb1fd7582369</anchor>
      <arglist>(const Vector2 &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>a02663.html</anchorfile>
      <anchor>a030e4515a8de5b8dba86170623ce413d</anchor>
      <arglist>(const std::string &amp;s=&quot;&quot;) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>equals</name>
      <anchorfile>a02663.html</anchorfile>
      <anchor>a60225b024315122df2a683f1bde3b64a</anchor>
      <arglist>(const Point2 &amp;q, double tol=1e-9) const</arglist>
    </member>
    <member kind="function">
      <type>Point2</type>
      <name>unit</name>
      <anchorfile>a02663.html</anchorfile>
      <anchor>ac539859cedced50340480304b8f3df15</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>norm</name>
      <anchorfile>a02663.html</anchorfile>
      <anchor>aa26702eb24b761952e85e19da6df8e08</anchor>
      <arglist>(OptionalJacobian&lt; 1, 2 &gt; H=boost::none) const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>distance</name>
      <anchorfile>a02663.html</anchorfile>
      <anchor>af74f737c9de131e1e579b937c47cf177</anchor>
      <arglist>(const Point2 &amp;p2, OptionalJacobian&lt; 1, 2 &gt; H1=boost::none, OptionalJacobian&lt; 1, 2 &gt; H2=boost::none) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>a02663.html</anchorfile>
      <anchor>a0d0633c0fd2c642baff527796b947937</anchor>
      <arglist>(const Point2 &amp;q) const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>x</name>
      <anchorfile>a02663.html</anchorfile>
      <anchor>a1102ebe48fb808a6e4811c7cce85033b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>y</name>
      <anchorfile>a02663.html</anchorfile>
      <anchor>abdf6b052d6a6e13261c849504806e030</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Vector2 &amp;</type>
      <name>vector</name>
      <anchorfile>a02663.html</anchorfile>
      <anchor>ac5499de2e2a50e3eac974be7bdbb1ae4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Point2</type>
      <name>identity</name>
      <anchorfile>a02663.html</anchorfile>
      <anchor>ae97f6facf15d612b879e02b1c5c86caa</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="friend">
      <type>GTSAM_EXPORT friend std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a02663.html</anchorfile>
      <anchor>abcc3001bdf3a3402179b7541e0f37c00</anchor>
      <arglist>(std::ostream &amp;os, const Point2 &amp;p)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::Point3</name>
    <filename>a02671.html</filename>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>a02671.html</anchorfile>
      <anchor>a0880cb071c3fe3c51a5be1c7fd805505</anchor>
      <arglist>(const std::string &amp;s=&quot;&quot;) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>equals</name>
      <anchorfile>a02671.html</anchorfile>
      <anchor>a17cd0527d8e1373983c9e87defdfbec0</anchor>
      <arglist>(const Point3 &amp;p, double tol=1e-9) const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Point3</type>
      <name>identity</name>
      <anchorfile>a02671.html</anchorfile>
      <anchor>ab917109e42abf9e59a1b435162a25d96</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>distance</name>
      <anchorfile>a02671.html</anchorfile>
      <anchor>aa93c3d5c8e1bf98c8a2e451a012cd792</anchor>
      <arglist>(const Point3 &amp;p2, OptionalJacobian&lt; 1, 3 &gt; H1=boost::none, OptionalJacobian&lt; 1, 3 &gt; H2=boost::none) const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>norm</name>
      <anchorfile>a02671.html</anchorfile>
      <anchor>a401e7e65df48c3324b7378752a367978</anchor>
      <arglist>(OptionalJacobian&lt; 1, 3 &gt; H=boost::none) const</arglist>
    </member>
    <member kind="function">
      <type>Point3</type>
      <name>normalized</name>
      <anchorfile>a02671.html</anchorfile>
      <anchor>aaa66f8d4a3982a4566bf9a9d273539ec</anchor>
      <arglist>(OptionalJacobian&lt; 3, 3 &gt; H=boost::none) const</arglist>
    </member>
    <member kind="function">
      <type>Point3</type>
      <name>cross</name>
      <anchorfile>a02671.html</anchorfile>
      <anchor>abca620a2e38d5ad30fa5ae14edd48c63</anchor>
      <arglist>(const Point3 &amp;q, OptionalJacobian&lt; 3, 3 &gt; H_p=boost::none, OptionalJacobian&lt; 3, 3 &gt; H_q=boost::none) const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>dot</name>
      <anchorfile>a02671.html</anchorfile>
      <anchor>a6d62eb91dec5dc62d3b7eadf7555b68e</anchor>
      <arglist>(const Point3 &amp;q, OptionalJacobian&lt; 1, 3 &gt; H_p=boost::none, OptionalJacobian&lt; 1, 3 &gt; H_q=boost::none) const</arglist>
    </member>
    <member kind="function">
      <type>const Vector3 &amp;</type>
      <name>vector</name>
      <anchorfile>a02671.html</anchorfile>
      <anchor>aebd5ccb2aee67986941c432b6a7f18cb</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>x</name>
      <anchorfile>a02671.html</anchorfile>
      <anchor>afdf7bfd8457f37cefe2511707e6d252f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>y</name>
      <anchorfile>a02671.html</anchorfile>
      <anchor>ae0826827ad318dfe51b230d37e755900</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>z</name>
      <anchorfile>a02671.html</anchorfile>
      <anchor>a33d2ff1aace530790b7ea8236c9e4580</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>a02671.html</anchorfile>
      <anchor>a0880cb071c3fe3c51a5be1c7fd805505</anchor>
      <arglist>(const std::string &amp;s=&quot;&quot;) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>equals</name>
      <anchorfile>a02671.html</anchorfile>
      <anchor>a17cd0527d8e1373983c9e87defdfbec0</anchor>
      <arglist>(const Point3 &amp;p, double tol=1e-9) const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>distance</name>
      <anchorfile>a02671.html</anchorfile>
      <anchor>aa93c3d5c8e1bf98c8a2e451a012cd792</anchor>
      <arglist>(const Point3 &amp;p2, OptionalJacobian&lt; 1, 3 &gt; H1=boost::none, OptionalJacobian&lt; 1, 3 &gt; H2=boost::none) const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>norm</name>
      <anchorfile>a02671.html</anchorfile>
      <anchor>a401e7e65df48c3324b7378752a367978</anchor>
      <arglist>(OptionalJacobian&lt; 1, 3 &gt; H=boost::none) const</arglist>
    </member>
    <member kind="function">
      <type>Point3</type>
      <name>normalized</name>
      <anchorfile>a02671.html</anchorfile>
      <anchor>aaa66f8d4a3982a4566bf9a9d273539ec</anchor>
      <arglist>(OptionalJacobian&lt; 3, 3 &gt; H=boost::none) const</arglist>
    </member>
    <member kind="function">
      <type>Point3</type>
      <name>cross</name>
      <anchorfile>a02671.html</anchorfile>
      <anchor>abca620a2e38d5ad30fa5ae14edd48c63</anchor>
      <arglist>(const Point3 &amp;q, OptionalJacobian&lt; 3, 3 &gt; H_p=boost::none, OptionalJacobian&lt; 3, 3 &gt; H_q=boost::none) const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>dot</name>
      <anchorfile>a02671.html</anchorfile>
      <anchor>a6d62eb91dec5dc62d3b7eadf7555b68e</anchor>
      <arglist>(const Point3 &amp;q, OptionalJacobian&lt; 1, 3 &gt; H_p=boost::none, OptionalJacobian&lt; 1, 3 &gt; H_q=boost::none) const</arglist>
    </member>
    <member kind="function">
      <type>const Vector3 &amp;</type>
      <name>vector</name>
      <anchorfile>a02671.html</anchorfile>
      <anchor>aebd5ccb2aee67986941c432b6a7f18cb</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>x</name>
      <anchorfile>a02671.html</anchorfile>
      <anchor>afdf7bfd8457f37cefe2511707e6d252f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>y</name>
      <anchorfile>a02671.html</anchorfile>
      <anchor>ae0826827ad318dfe51b230d37e755900</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>z</name>
      <anchorfile>a02671.html</anchorfile>
      <anchor>a33d2ff1aace530790b7ea8236c9e4580</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Point3</type>
      <name>identity</name>
      <anchorfile>a02671.html</anchorfile>
      <anchor>ab917109e42abf9e59a1b435162a25d96</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>boost::serialization::access</name>
      <anchorfile>a02671.html</anchorfile>
      <anchor>ac98d07dd8f7b70e16ccb9a01abf56b9c</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>GTSAM_EXPORT friend std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a02671.html</anchorfile>
      <anchor>ac4b9bae7be8e0277ee521c2a6b2fceb5</anchor>
      <arglist>(std::ostream &amp;os, const Point3 &amp;p)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::Pose2</name>
    <filename>a02687.html</filename>
    <base>LieGroup&lt; Pose2, 3 &gt;</base>
    <member kind="function">
      <type></type>
      <name>Pose2</name>
      <anchorfile>a02687.html</anchorfile>
      <anchor>ab9d2ac29304985d9ccfd66ef0f9a9aaf</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Pose2</name>
      <anchorfile>a02687.html</anchorfile>
      <anchor>aeed938448e4b42c715527831c1ddf57a</anchor>
      <arglist>(const Pose2 &amp;pose)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Pose2</name>
      <anchorfile>a02687.html</anchorfile>
      <anchor>a5d0b6d7bfebdf3f4478407160f480a1a</anchor>
      <arglist>(double x, double y, double theta)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Pose2</name>
      <anchorfile>a02687.html</anchorfile>
      <anchor>a698cbb45d2308207237e0a0ab6b27f2c</anchor>
      <arglist>(double theta, const Point2 &amp;t)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Pose2</name>
      <anchorfile>a02687.html</anchorfile>
      <anchor>ae857f3177acf6c8924aedeebafe10ede</anchor>
      <arglist>(const Rot2 &amp;r, const Point2 &amp;t)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Pose2</name>
      <anchorfile>a02687.html</anchorfile>
      <anchor>afcd35e3178b6b949cc6d5e1009c5e844</anchor>
      <arglist>(const Matrix &amp;T)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Pose2</name>
      <anchorfile>a02687.html</anchorfile>
      <anchor>a7c1a8decfc2de14e194e1f744b969525</anchor>
      <arglist>(const Vector &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>a02687.html</anchorfile>
      <anchor>a12d332c686d07c52f163da1307db90b0</anchor>
      <arglist>(const std::string &amp;s=&quot;&quot;) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>equals</name>
      <anchorfile>a02687.html</anchorfile>
      <anchor>aaf55bed292a098e2e2275157d1707b1b</anchor>
      <arglist>(const Pose2 &amp;pose, double tol=1e-9) const</arglist>
    </member>
    <member kind="function">
      <type>Pose2</type>
      <name>inverse</name>
      <anchorfile>a02687.html</anchorfile>
      <anchor>a438b73dbeda3e8c7818aeff5954f60b3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Pose2</type>
      <name>operator *</name>
      <anchorfile>a02687.html</anchorfile>
      <anchor>a108bf8eb39c05824fc52ba624d9aa752</anchor>
      <arglist>(const Pose2 &amp;p2) const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Pose2</type>
      <name>identity</name>
      <anchorfile>a02687.html</anchorfile>
      <anchor>a2466b7e884c66d680df22cc010934570</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Matrix3</type>
      <name>AdjointMap</name>
      <anchorfile>a02687.html</anchorfile>
      <anchor>a18b9d32432bf102feaa79876e21144b2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Vector3</type>
      <name>Adjoint</name>
      <anchorfile>a02687.html</anchorfile>
      <anchor>a7f8fdf9dc8060c51b3e2f8b45f56c2ab</anchor>
      <arglist>(const Vector3 &amp;xi) const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Pose2</type>
      <name>Expmap</name>
      <anchorfile>a02687.html</anchorfile>
      <anchor>ad7c8b920b4eb67784282b0be16b628b5</anchor>
      <arglist>(const Vector3 &amp;xi, ChartJacobian H=boost::none)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Vector3</type>
      <name>Logmap</name>
      <anchorfile>a02687.html</anchorfile>
      <anchor>a359665687e55048e5c8a774501ee6f38</anchor>
      <arglist>(const Pose2 &amp;p, ChartJacobian H=boost::none)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Matrix3</type>
      <name>adjointMap</name>
      <anchorfile>a02687.html</anchorfile>
      <anchor>aa63d9d4f5080b99b252fe5b4b3788d52</anchor>
      <arglist>(const Vector3 &amp;v)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Vector3</type>
      <name>adjoint</name>
      <anchorfile>a02687.html</anchorfile>
      <anchor>aebf426eee4f34bf41f9af9bfa694fd3f</anchor>
      <arglist>(const Vector3 &amp;xi, const Vector3 &amp;y)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Vector3</type>
      <name>adjointTranspose</name>
      <anchorfile>a02687.html</anchorfile>
      <anchor>ad5fa68cf06a58781b95ad44c4cee5e2e</anchor>
      <arglist>(const Vector3 &amp;xi, const Vector3 &amp;y)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Matrix3</type>
      <name>wedge</name>
      <anchorfile>a02687.html</anchorfile>
      <anchor>a83238c667ac924dabe99c03ae3ad427b</anchor>
      <arglist>(double vx, double vy, double w)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Matrix3</type>
      <name>ExpmapDerivative</name>
      <anchorfile>a02687.html</anchorfile>
      <anchor>aad85077d2e761a774cb3867ca58b6dbc</anchor>
      <arglist>(const Vector3 &amp;v)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Matrix3</type>
      <name>LogmapDerivative</name>
      <anchorfile>a02687.html</anchorfile>
      <anchor>a2217de338c4eed206bdfc15c6bd41006</anchor>
      <arglist>(const Pose2 &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>Point2</type>
      <name>transformTo</name>
      <anchorfile>a02687.html</anchorfile>
      <anchor>aa8c17b03157c2e9ba530df4e6d6cc5ba</anchor>
      <arglist>(const Point2 &amp;point, OptionalJacobian&lt; 2, 3 &gt; Dpose=boost::none, OptionalJacobian&lt; 2, 2 &gt; Dpoint=boost::none) const</arglist>
    </member>
    <member kind="function">
      <type>Point2</type>
      <name>transformFrom</name>
      <anchorfile>a02687.html</anchorfile>
      <anchor>ad0a9c33e172aa071a77233c7f593fed2</anchor>
      <arglist>(const Point2 &amp;point, OptionalJacobian&lt; 2, 3 &gt; Dpose=boost::none, OptionalJacobian&lt; 2, 2 &gt; Dpoint=boost::none) const</arglist>
    </member>
    <member kind="function">
      <type>Point2</type>
      <name>operator *</name>
      <anchorfile>a02687.html</anchorfile>
      <anchor>a66e6bc19527eb3721c8f7604b2aaa780</anchor>
      <arglist>(const Point2 &amp;point) const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>x</name>
      <anchorfile>a02687.html</anchorfile>
      <anchor>a7228f4c1503c94e90f5d5e5fdbd7fd5e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>y</name>
      <anchorfile>a02687.html</anchorfile>
      <anchor>a31c18f608276bec9877030ce8b1fe9c2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>theta</name>
      <anchorfile>a02687.html</anchorfile>
      <anchor>aab82b98ef745bb0f8f487ee83420f606</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Point2 &amp;</type>
      <name>t</name>
      <anchorfile>a02687.html</anchorfile>
      <anchor>a54e9efce7ce7ef01f67e133a3168acec</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Rot2 &amp;</type>
      <name>r</name>
      <anchorfile>a02687.html</anchorfile>
      <anchor>a94f39ca318ba5caebc17ab4aa3dce39a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Point2 &amp;</type>
      <name>translation</name>
      <anchorfile>a02687.html</anchorfile>
      <anchor>a9da77363a0430ac43dd967abe7417dbf</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Rot2 &amp;</type>
      <name>rotation</name>
      <anchorfile>a02687.html</anchorfile>
      <anchor>af4597b8ccb85413e03e27d8e04ddda4a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Rot2</type>
      <name>bearing</name>
      <anchorfile>a02687.html</anchorfile>
      <anchor>a042ecb4d4610474d807cca54845857a1</anchor>
      <arglist>(const Point2 &amp;point, OptionalJacobian&lt; 1, 3 &gt; H1=boost::none, OptionalJacobian&lt; 1, 2 &gt; H2=boost::none) const</arglist>
    </member>
    <member kind="function">
      <type>Rot2</type>
      <name>bearing</name>
      <anchorfile>a02687.html</anchorfile>
      <anchor>a5a2fce495bc99c18c585095e1d93777b</anchor>
      <arglist>(const Pose2 &amp;pose, OptionalJacobian&lt; 1, 3 &gt; H1=boost::none, OptionalJacobian&lt; 1, 3 &gt; H2=boost::none) const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>range</name>
      <anchorfile>a02687.html</anchorfile>
      <anchor>abf475c986fbabd94ff35601458c3ce8f</anchor>
      <arglist>(const Point2 &amp;point, OptionalJacobian&lt; 1, 3 &gt; H1=boost::none, OptionalJacobian&lt; 1, 2 &gt; H2=boost::none) const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>range</name>
      <anchorfile>a02687.html</anchorfile>
      <anchor>ac77e1c6bbb043077a5a09d4e71868da9</anchor>
      <arglist>(const Pose2 &amp;point, OptionalJacobian&lt; 1, 3 &gt; H1=boost::none, OptionalJacobian&lt; 1, 3 &gt; H2=boost::none) const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::pair&lt; size_t, size_t &gt;</type>
      <name>translationInterval</name>
      <anchorfile>a02687.html</anchorfile>
      <anchor>ac69ac99fd5c85695bd54ffa66a3b2c49</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::pair&lt; size_t, size_t &gt;</type>
      <name>rotationInterval</name>
      <anchorfile>a02687.html</anchorfile>
      <anchor>a7c03eba2951842a3be922d26e2acdcad</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Pose2</name>
      <anchorfile>a02687.html</anchorfile>
      <anchor>ab9d2ac29304985d9ccfd66ef0f9a9aaf</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Pose2</name>
      <anchorfile>a02687.html</anchorfile>
      <anchor>aeed938448e4b42c715527831c1ddf57a</anchor>
      <arglist>(const Pose2 &amp;pose)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Pose2</name>
      <anchorfile>a02687.html</anchorfile>
      <anchor>a5d0b6d7bfebdf3f4478407160f480a1a</anchor>
      <arglist>(double x, double y, double theta)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Pose2</name>
      <anchorfile>a02687.html</anchorfile>
      <anchor>a698cbb45d2308207237e0a0ab6b27f2c</anchor>
      <arglist>(double theta, const Point2 &amp;t)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Pose2</name>
      <anchorfile>a02687.html</anchorfile>
      <anchor>ae857f3177acf6c8924aedeebafe10ede</anchor>
      <arglist>(const Rot2 &amp;r, const Point2 &amp;t)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Pose2</name>
      <anchorfile>a02687.html</anchorfile>
      <anchor>afcd35e3178b6b949cc6d5e1009c5e844</anchor>
      <arglist>(const Matrix &amp;T)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Pose2</name>
      <anchorfile>a02687.html</anchorfile>
      <anchor>a7c1a8decfc2de14e194e1f744b969525</anchor>
      <arglist>(const Vector &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>a02687.html</anchorfile>
      <anchor>a12d332c686d07c52f163da1307db90b0</anchor>
      <arglist>(const std::string &amp;s=&quot;&quot;) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>equals</name>
      <anchorfile>a02687.html</anchorfile>
      <anchor>aaf55bed292a098e2e2275157d1707b1b</anchor>
      <arglist>(const Pose2 &amp;pose, double tol=1e-9) const</arglist>
    </member>
    <member kind="function">
      <type>Point2</type>
      <name>transformTo</name>
      <anchorfile>a02687.html</anchorfile>
      <anchor>aa8c17b03157c2e9ba530df4e6d6cc5ba</anchor>
      <arglist>(const Point2 &amp;point, OptionalJacobian&lt; 2, 3 &gt; Dpose=boost::none, OptionalJacobian&lt; 2, 2 &gt; Dpoint=boost::none) const</arglist>
    </member>
    <member kind="function">
      <type>Point2</type>
      <name>transformFrom</name>
      <anchorfile>a02687.html</anchorfile>
      <anchor>ad0a9c33e172aa071a77233c7f593fed2</anchor>
      <arglist>(const Point2 &amp;point, OptionalJacobian&lt; 2, 3 &gt; Dpose=boost::none, OptionalJacobian&lt; 2, 2 &gt; Dpoint=boost::none) const</arglist>
    </member>
    <member kind="function">
      <type>Point2</type>
      <name>operator *</name>
      <anchorfile>a02687.html</anchorfile>
      <anchor>a66e6bc19527eb3721c8f7604b2aaa780</anchor>
      <arglist>(const Point2 &amp;point) const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>x</name>
      <anchorfile>a02687.html</anchorfile>
      <anchor>a7228f4c1503c94e90f5d5e5fdbd7fd5e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>y</name>
      <anchorfile>a02687.html</anchorfile>
      <anchor>a31c18f608276bec9877030ce8b1fe9c2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>theta</name>
      <anchorfile>a02687.html</anchorfile>
      <anchor>aab82b98ef745bb0f8f487ee83420f606</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Point2 &amp;</type>
      <name>t</name>
      <anchorfile>a02687.html</anchorfile>
      <anchor>a54e9efce7ce7ef01f67e133a3168acec</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Rot2 &amp;</type>
      <name>r</name>
      <anchorfile>a02687.html</anchorfile>
      <anchor>a94f39ca318ba5caebc17ab4aa3dce39a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Point2 &amp;</type>
      <name>translation</name>
      <anchorfile>a02687.html</anchorfile>
      <anchor>a9da77363a0430ac43dd967abe7417dbf</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Rot2 &amp;</type>
      <name>rotation</name>
      <anchorfile>a02687.html</anchorfile>
      <anchor>af4597b8ccb85413e03e27d8e04ddda4a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Rot2</type>
      <name>bearing</name>
      <anchorfile>a02687.html</anchorfile>
      <anchor>a042ecb4d4610474d807cca54845857a1</anchor>
      <arglist>(const Point2 &amp;point, OptionalJacobian&lt; 1, 3 &gt; H1=boost::none, OptionalJacobian&lt; 1, 2 &gt; H2=boost::none) const</arglist>
    </member>
    <member kind="function">
      <type>Rot2</type>
      <name>bearing</name>
      <anchorfile>a02687.html</anchorfile>
      <anchor>a5a2fce495bc99c18c585095e1d93777b</anchor>
      <arglist>(const Pose2 &amp;pose, OptionalJacobian&lt; 1, 3 &gt; H1=boost::none, OptionalJacobian&lt; 1, 3 &gt; H2=boost::none) const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>range</name>
      <anchorfile>a02687.html</anchorfile>
      <anchor>abf475c986fbabd94ff35601458c3ce8f</anchor>
      <arglist>(const Point2 &amp;point, OptionalJacobian&lt; 1, 3 &gt; H1=boost::none, OptionalJacobian&lt; 1, 2 &gt; H2=boost::none) const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>range</name>
      <anchorfile>a02687.html</anchorfile>
      <anchor>ac77e1c6bbb043077a5a09d4e71868da9</anchor>
      <arglist>(const Pose2 &amp;point, OptionalJacobian&lt; 1, 3 &gt; H1=boost::none, OptionalJacobian&lt; 1, 3 &gt; H2=boost::none) const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::pair&lt; size_t, size_t &gt;</type>
      <name>translationInterval</name>
      <anchorfile>a02687.html</anchorfile>
      <anchor>ac69ac99fd5c85695bd54ffa66a3b2c49</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::pair&lt; size_t, size_t &gt;</type>
      <name>rotationInterval</name>
      <anchorfile>a02687.html</anchorfile>
      <anchor>a7c03eba2951842a3be922d26e2acdcad</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="typedef">
      <type>Rot2</type>
      <name>Rotation</name>
      <anchorfile>a02687.html</anchorfile>
      <anchor>ab75a2a0b67f731473b712ffea2ed1593</anchor>
      <arglist></arglist>
    </member>
    <class kind="struct">gtsam::Pose2::ChartAtOrigin</class>
  </compound>
  <compound kind="class">
    <name>gtsam::Pose3</name>
    <filename>a02711.html</filename>
    <base>LieGroup&lt; Pose3, 6 &gt;</base>
    <member kind="function">
      <type></type>
      <name>Pose3</name>
      <anchorfile>a02711.html</anchorfile>
      <anchor>a14eb4114ff69f17c5251ff147a75bff3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Pose3</name>
      <anchorfile>a02711.html</anchorfile>
      <anchor>a14c25a44db9aa7dfaf7e3121b47f04c0</anchor>
      <arglist>(const Pose3 &amp;pose)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Pose3</name>
      <anchorfile>a02711.html</anchorfile>
      <anchor>a2cdb58c69c0afbea2bf74af9798b523a</anchor>
      <arglist>(const Rot3 &amp;R, const Point3 &amp;t)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Pose3</name>
      <anchorfile>a02711.html</anchorfile>
      <anchor>a05842ee58d3e5b7998cdd84932b71738</anchor>
      <arglist>(const Pose2 &amp;pose2)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Pose3</name>
      <anchorfile>a02711.html</anchorfile>
      <anchor>a3d7ad3e9bd3ea0954d4b74959b8dab0a</anchor>
      <arglist>(const Matrix &amp;T)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Pose3</type>
      <name>Create</name>
      <anchorfile>a02711.html</anchorfile>
      <anchor>af8ea87ad307f6328053342a131d8313e</anchor>
      <arglist>(const Rot3 &amp;R, const Point3 &amp;t, OptionalJacobian&lt; 6, 3 &gt; H1=boost::none, OptionalJacobian&lt; 6, 3 &gt; H2=boost::none)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static boost::optional&lt; Pose3 &gt;</type>
      <name>Align</name>
      <anchorfile>a02711.html</anchorfile>
      <anchor>acd1fe00bcd9a6fca07c0bba8fb47d25a</anchor>
      <arglist>(const std::vector&lt; Point3Pair &gt; &amp;abPointPairs)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>a02711.html</anchorfile>
      <anchor>a6f26a83f13d69819fc35a7bfde311cbf</anchor>
      <arglist>(const std::string &amp;s=&quot;&quot;) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>equals</name>
      <anchorfile>a02711.html</anchorfile>
      <anchor>a61394e151281c274dc53cb45f219d371</anchor>
      <arglist>(const Pose3 &amp;pose, double tol=1e-9) const</arglist>
    </member>
    <member kind="function">
      <type>Pose3</type>
      <name>inverse</name>
      <anchorfile>a02711.html</anchorfile>
      <anchor>aef9cc3d8b23d0f93c763781a59b2b70a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Pose3</type>
      <name>operator *</name>
      <anchorfile>a02711.html</anchorfile>
      <anchor>a12aaefba8d139a2e8d6998409b56bb29</anchor>
      <arglist>(const Pose3 &amp;T) const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Pose3</type>
      <name>identity</name>
      <anchorfile>a02711.html</anchorfile>
      <anchor>ab3eed17c04ba8a1b6fcabc17e13151df</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Matrix6</type>
      <name>AdjointMap</name>
      <anchorfile>a02711.html</anchorfile>
      <anchor>a586ca175dcdf9e6db21ddb669f9d0317</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Vector6</type>
      <name>Adjoint</name>
      <anchorfile>a02711.html</anchorfile>
      <anchor>aaac7042e21271ec1dbe5ab1926ea2af8</anchor>
      <arglist>(const Vector6 &amp;xi_b) const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Pose3</type>
      <name>Expmap</name>
      <anchorfile>a02711.html</anchorfile>
      <anchor>a8872a514116bf4cb7b5d929cf092a136</anchor>
      <arglist>(const Vector6 &amp;xi, OptionalJacobian&lt; 6, 6 &gt; H=boost::none)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Vector6</type>
      <name>Logmap</name>
      <anchorfile>a02711.html</anchorfile>
      <anchor>ae0698013e77ca55314ee0a816074e8d0</anchor>
      <arglist>(const Pose3 &amp;p, OptionalJacobian&lt; 6, 6 &gt; H=boost::none)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Matrix6</type>
      <name>adjointMap</name>
      <anchorfile>a02711.html</anchorfile>
      <anchor>aafc615f37da7f1900677dbc639fcb8bd</anchor>
      <arglist>(const Vector6 &amp;xi)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Vector6</type>
      <name>adjoint</name>
      <anchorfile>a02711.html</anchorfile>
      <anchor>a4b1822d694cd9fdc0bef04dc1531593c</anchor>
      <arglist>(const Vector6 &amp;xi, const Vector6 &amp;y, OptionalJacobian&lt; 6, 6 &gt;=boost::none)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Vector6</type>
      <name>adjointTranspose</name>
      <anchorfile>a02711.html</anchorfile>
      <anchor>ab55737eecee90e3799aefaa6a99bec12</anchor>
      <arglist>(const Vector6 &amp;xi, const Vector6 &amp;y, OptionalJacobian&lt; 6, 6 &gt; H=boost::none)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Matrix6</type>
      <name>ExpmapDerivative</name>
      <anchorfile>a02711.html</anchorfile>
      <anchor>a5f01b380b0f935b61dea73a5ca4e14f5</anchor>
      <arglist>(const Vector6 &amp;xi)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Matrix6</type>
      <name>LogmapDerivative</name>
      <anchorfile>a02711.html</anchorfile>
      <anchor>a0824514b90d45a14131fb1d49ff349a5</anchor>
      <arglist>(const Pose3 &amp;xi)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Matrix</type>
      <name>wedge</name>
      <anchorfile>a02711.html</anchorfile>
      <anchor>a1eeb3016a5aefa1a986debf77c1a75ee</anchor>
      <arglist>(double wx, double wy, double wz, double vx, double vy, double vz)</arglist>
    </member>
    <member kind="function">
      <type>Point3</type>
      <name>transformFrom</name>
      <anchorfile>a02711.html</anchorfile>
      <anchor>af1c432402349b591cd9b6017066d7981</anchor>
      <arglist>(const Point3 &amp;p, OptionalJacobian&lt; 3, 6 &gt; Dpose=boost::none, OptionalJacobian&lt; 3, 3 &gt; Dpoint=boost::none) const</arglist>
    </member>
    <member kind="function">
      <type>Point3</type>
      <name>operator *</name>
      <anchorfile>a02711.html</anchorfile>
      <anchor>a794ca0f077e7eb5bbf60e18510cdc3ba</anchor>
      <arglist>(const Point3 &amp;p) const</arglist>
    </member>
    <member kind="function">
      <type>Point3</type>
      <name>transformTo</name>
      <anchorfile>a02711.html</anchorfile>
      <anchor>a2827cab32ff062f9e26a2a9cdc985d11</anchor>
      <arglist>(const Point3 &amp;p, OptionalJacobian&lt; 3, 6 &gt; Dpose=boost::none, OptionalJacobian&lt; 3, 3 &gt; Dpoint=boost::none) const</arglist>
    </member>
    <member kind="function">
      <type>const Rot3 &amp;</type>
      <name>rotation</name>
      <anchorfile>a02711.html</anchorfile>
      <anchor>a5ebb5c7ab36ded312c571dcb3a9067ad</anchor>
      <arglist>(OptionalJacobian&lt; 3, 6 &gt; H=boost::none) const</arglist>
    </member>
    <member kind="function">
      <type>const Point3 &amp;</type>
      <name>translation</name>
      <anchorfile>a02711.html</anchorfile>
      <anchor>ad75946f60f430ce77a7a5c07b26cc8b2</anchor>
      <arglist>(OptionalJacobian&lt; 3, 6 &gt; H=boost::none) const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>x</name>
      <anchorfile>a02711.html</anchorfile>
      <anchor>af4d73efffa95965276cd540d1289f2cc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>y</name>
      <anchorfile>a02711.html</anchorfile>
      <anchor>ada239a387d00eeffc204c8404f95ad93</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>z</name>
      <anchorfile>a02711.html</anchorfile>
      <anchor>a55dbf8aa130e078fdd0ebf9764d6a4f7</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Matrix4</type>
      <name>matrix</name>
      <anchorfile>a02711.html</anchorfile>
      <anchor>ab73eb5d52cb4140d768ac68790c8b73a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Pose3</type>
      <name>transformPoseFrom</name>
      <anchorfile>a02711.html</anchorfile>
      <anchor>a9c0b7c6f0e26c6bf0dbc25055777e363</anchor>
      <arglist>(const Pose3 &amp;pose) const</arglist>
    </member>
    <member kind="function">
      <type>Pose3</type>
      <name>transformPoseTo</name>
      <anchorfile>a02711.html</anchorfile>
      <anchor>a0caea0f5f8eb0f27a026463fe5df243c</anchor>
      <arglist>(const Pose3 &amp;pose, OptionalJacobian&lt; 6, 6 &gt; H1=boost::none, OptionalJacobian&lt; 6, 6 &gt; H2=boost::none) const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>range</name>
      <anchorfile>a02711.html</anchorfile>
      <anchor>a40b99f0dff44a10e269b650d6db1e1b1</anchor>
      <arglist>(const Point3 &amp;point, OptionalJacobian&lt; 1, 6 &gt; H1=boost::none, OptionalJacobian&lt; 1, 3 &gt; H2=boost::none) const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>range</name>
      <anchorfile>a02711.html</anchorfile>
      <anchor>a56c331ebd71dadcce5db8b686931c77f</anchor>
      <arglist>(const Pose3 &amp;pose, OptionalJacobian&lt; 1, 6 &gt; H1=boost::none, OptionalJacobian&lt; 1, 6 &gt; H2=boost::none) const</arglist>
    </member>
    <member kind="function">
      <type>Unit3</type>
      <name>bearing</name>
      <anchorfile>a02711.html</anchorfile>
      <anchor>a6d9b7cc4f41161c89893366dac01a72a</anchor>
      <arglist>(const Point3 &amp;point, OptionalJacobian&lt; 2, 6 &gt; H1=boost::none, OptionalJacobian&lt; 2, 3 &gt; H2=boost::none) const</arglist>
    </member>
    <member kind="function">
      <type>Unit3</type>
      <name>bearing</name>
      <anchorfile>a02711.html</anchorfile>
      <anchor>a994a2b052f732823faee505ff0d688d1</anchor>
      <arglist>(const Pose3 &amp;pose, OptionalJacobian&lt; 2, 6 &gt; H1=boost::none, OptionalJacobian&lt; 2, 6 &gt; H2=boost::none) const</arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>boost::serialization::access</name>
      <anchorfile>a02711.html</anchorfile>
      <anchor>ac98d07dd8f7b70e16ccb9a01abf56b9c</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>GTSAM_EXPORT friend std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a02711.html</anchorfile>
      <anchor>a1952042b79a324cd3ad38057aa26dee3</anchor>
      <arglist>(std::ostream &amp;os, const Pose3 &amp;p)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::pair&lt; size_t, size_t &gt;</type>
      <name>translationInterval</name>
      <anchorfile>a02711.html</anchorfile>
      <anchor>a5a3485ff3b25ae0ce2676b48773e1bed</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::pair&lt; size_t, size_t &gt;</type>
      <name>rotationInterval</name>
      <anchorfile>a02711.html</anchorfile>
      <anchor>a98841181519ca80742e6b2a3091c5b0e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>a02711.html</anchorfile>
      <anchor>a6f26a83f13d69819fc35a7bfde311cbf</anchor>
      <arglist>(const std::string &amp;s=&quot;&quot;) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>equals</name>
      <anchorfile>a02711.html</anchorfile>
      <anchor>a61394e151281c274dc53cb45f219d371</anchor>
      <arglist>(const Pose3 &amp;pose, double tol=1e-9) const</arglist>
    </member>
    <member kind="function">
      <type>Point3</type>
      <name>transformFrom</name>
      <anchorfile>a02711.html</anchorfile>
      <anchor>af1c432402349b591cd9b6017066d7981</anchor>
      <arglist>(const Point3 &amp;p, OptionalJacobian&lt; 3, 6 &gt; Dpose=boost::none, OptionalJacobian&lt; 3, 3 &gt; Dpoint=boost::none) const</arglist>
    </member>
    <member kind="function">
      <type>Point3</type>
      <name>operator *</name>
      <anchorfile>a02711.html</anchorfile>
      <anchor>a794ca0f077e7eb5bbf60e18510cdc3ba</anchor>
      <arglist>(const Point3 &amp;p) const</arglist>
    </member>
    <member kind="function">
      <type>Point3</type>
      <name>transformTo</name>
      <anchorfile>a02711.html</anchorfile>
      <anchor>a2827cab32ff062f9e26a2a9cdc985d11</anchor>
      <arglist>(const Point3 &amp;p, OptionalJacobian&lt; 3, 6 &gt; Dpose=boost::none, OptionalJacobian&lt; 3, 3 &gt; Dpoint=boost::none) const</arglist>
    </member>
    <member kind="function">
      <type>const Rot3 &amp;</type>
      <name>rotation</name>
      <anchorfile>a02711.html</anchorfile>
      <anchor>a5ebb5c7ab36ded312c571dcb3a9067ad</anchor>
      <arglist>(OptionalJacobian&lt; 3, 6 &gt; H=boost::none) const</arglist>
    </member>
    <member kind="function">
      <type>const Point3 &amp;</type>
      <name>translation</name>
      <anchorfile>a02711.html</anchorfile>
      <anchor>ad75946f60f430ce77a7a5c07b26cc8b2</anchor>
      <arglist>(OptionalJacobian&lt; 3, 6 &gt; H=boost::none) const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>x</name>
      <anchorfile>a02711.html</anchorfile>
      <anchor>af4d73efffa95965276cd540d1289f2cc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>y</name>
      <anchorfile>a02711.html</anchorfile>
      <anchor>ada239a387d00eeffc204c8404f95ad93</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>z</name>
      <anchorfile>a02711.html</anchorfile>
      <anchor>a55dbf8aa130e078fdd0ebf9764d6a4f7</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Matrix4</type>
      <name>matrix</name>
      <anchorfile>a02711.html</anchorfile>
      <anchor>ab73eb5d52cb4140d768ac68790c8b73a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Pose3</type>
      <name>transformPoseFrom</name>
      <anchorfile>a02711.html</anchorfile>
      <anchor>a9c0b7c6f0e26c6bf0dbc25055777e363</anchor>
      <arglist>(const Pose3 &amp;pose) const</arglist>
    </member>
    <member kind="function">
      <type>Pose3</type>
      <name>transformPoseTo</name>
      <anchorfile>a02711.html</anchorfile>
      <anchor>a0caea0f5f8eb0f27a026463fe5df243c</anchor>
      <arglist>(const Pose3 &amp;pose, OptionalJacobian&lt; 6, 6 &gt; H1=boost::none, OptionalJacobian&lt; 6, 6 &gt; H2=boost::none) const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>range</name>
      <anchorfile>a02711.html</anchorfile>
      <anchor>a40b99f0dff44a10e269b650d6db1e1b1</anchor>
      <arglist>(const Point3 &amp;point, OptionalJacobian&lt; 1, 6 &gt; H1=boost::none, OptionalJacobian&lt; 1, 3 &gt; H2=boost::none) const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>range</name>
      <anchorfile>a02711.html</anchorfile>
      <anchor>a56c331ebd71dadcce5db8b686931c77f</anchor>
      <arglist>(const Pose3 &amp;pose, OptionalJacobian&lt; 1, 6 &gt; H1=boost::none, OptionalJacobian&lt; 1, 6 &gt; H2=boost::none) const</arglist>
    </member>
    <member kind="function">
      <type>Unit3</type>
      <name>bearing</name>
      <anchorfile>a02711.html</anchorfile>
      <anchor>a6d9b7cc4f41161c89893366dac01a72a</anchor>
      <arglist>(const Point3 &amp;point, OptionalJacobian&lt; 2, 6 &gt; H1=boost::none, OptionalJacobian&lt; 2, 3 &gt; H2=boost::none) const</arglist>
    </member>
    <member kind="function">
      <type>Unit3</type>
      <name>bearing</name>
      <anchorfile>a02711.html</anchorfile>
      <anchor>a994a2b052f732823faee505ff0d688d1</anchor>
      <arglist>(const Pose3 &amp;pose, OptionalJacobian&lt; 2, 6 &gt; H1=boost::none, OptionalJacobian&lt; 2, 6 &gt; H2=boost::none) const</arglist>
    </member>
    <member kind="typedef">
      <type>Rot3</type>
      <name>Rotation</name>
      <anchorfile>a02711.html</anchorfile>
      <anchor>ab8bad91d0d31f7fe4858738e257917ca</anchor>
      <arglist></arglist>
    </member>
    <class kind="struct">gtsam::Pose3::ChartAtOrigin</class>
  </compound>
  <compound kind="class">
    <name>gtsam::Pose3AttitudeFactor</name>
    <filename>a03427.html</filename>
    <base>NoiseModelFactor1&lt; Pose3 &gt;</base>
    <base>gtsam::AttitudeFactor</base>
    <member kind="function">
      <type></type>
      <name>Pose3AttitudeFactor</name>
      <anchorfile>a03427.html</anchorfile>
      <anchor>a9d6daa9a5b6c9b0cc88178d524b55ab4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Pose3AttitudeFactor</name>
      <anchorfile>a03427.html</anchorfile>
      <anchor>aefde8d161d0c93a51f1cbf48a6d9d390</anchor>
      <arglist>(Key key, const Unit3 &amp;nZ, const SharedNoiseModel &amp;model, const Unit3 &amp;bRef=Unit3(0, 0, 1))</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual gtsam::NonlinearFactor::shared_ptr</type>
      <name>clone</name>
      <anchorfile>a03427.html</anchorfile>
      <anchor>a950114d5d78e3f63f84928e2c3650501</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>print</name>
      <anchorfile>a03427.html</anchorfile>
      <anchor>a96c1eaf196d9957675f3781eb261bae6</anchor>
      <arglist>(const std::string &amp;s, const KeyFormatter &amp;keyFormatter=DefaultKeyFormatter) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>equals</name>
      <anchorfile>a03427.html</anchorfile>
      <anchor>a42f1a274e47bf7cda90f4fcd017b9820</anchor>
      <arglist>(const NonlinearFactor &amp;expected, double tol=1e-9) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Vector</type>
      <name>evaluateError</name>
      <anchorfile>a03427.html</anchorfile>
      <anchor>aa891448bc04f325ee9370d02bbe07c6f</anchor>
      <arglist>(const Pose3 &amp;nTb, boost::optional&lt; Matrix &amp; &gt; H=boost::none) const</arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; Pose3AttitudeFactor &gt;</type>
      <name>shared_ptr</name>
      <anchorfile>a03427.html</anchorfile>
      <anchor>a730c43b4e39863d59615043c5dc3a232</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Pose3AttitudeFactor</type>
      <name>This</name>
      <anchorfile>a03427.html</anchorfile>
      <anchor>a806143353387330c0f423d0f2857ee7d</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>boost::serialization::access</name>
      <anchorfile>a03427.html</anchorfile>
      <anchor>ac98d07dd8f7b70e16ccb9a01abf56b9c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::Pose3Upright</name>
    <filename>a04667.html</filename>
  </compound>
  <compound kind="class">
    <name>gtsam::PoseBetweenFactor</name>
    <filename>a04515.html</filename>
    <templarg></templarg>
    <base>NoiseModelFactor2&lt; POSE, POSE &gt;</base>
    <member kind="function">
      <type></type>
      <name>PoseBetweenFactor</name>
      <anchorfile>a04515.html</anchorfile>
      <anchor>a40a9e9a7cdfe85a53de173ba1f318df9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PoseBetweenFactor</name>
      <anchorfile>a04515.html</anchorfile>
      <anchor>ab419b0fab0fe2ae47ab2dc0e92df510f</anchor>
      <arglist>(Key key1, Key key2, const POSE &amp;measured, const SharedNoiseModel &amp;model, boost::optional&lt; POSE &gt; body_P_sensor=boost::none)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual gtsam::NonlinearFactor::shared_ptr</type>
      <name>clone</name>
      <anchorfile>a04515.html</anchorfile>
      <anchor>ad74876e9b59c7b7d78dcbd33bf02eea6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>print</name>
      <anchorfile>a04515.html</anchorfile>
      <anchor>a3150836f6a19a043913788aa30e7bb7b</anchor>
      <arglist>(const std::string &amp;s, const KeyFormatter &amp;keyFormatter=DefaultKeyFormatter) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>equals</name>
      <anchorfile>a04515.html</anchorfile>
      <anchor>a7b94637675a83d1281df39decca3f4a4</anchor>
      <arglist>(const NonlinearFactor &amp;expected, double tol=1e-9) const</arglist>
    </member>
    <member kind="function">
      <type>Vector</type>
      <name>evaluateError</name>
      <anchorfile>a04515.html</anchorfile>
      <anchor>ad6caf2c2013e3c32870a725f75646e14</anchor>
      <arglist>(const POSE &amp;p1, const POSE &amp;p2, boost::optional&lt; Matrix &amp; &gt; H1=boost::none, boost::optional&lt; Matrix &amp; &gt; H2=boost::none) const</arglist>
    </member>
    <member kind="function">
      <type>const POSE &amp;</type>
      <name>measured</name>
      <anchorfile>a04515.html</anchorfile>
      <anchor>ad4e2b5016e7686eb34eba22a90e66d93</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; PoseBetweenFactor &gt;</type>
      <name>shared_ptr</name>
      <anchorfile>a04515.html</anchorfile>
      <anchor>a77e586abea4748946d0256b4d0a527bc</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>boost::serialization::access</name>
      <anchorfile>a04515.html</anchorfile>
      <anchor>ac98d07dd8f7b70e16ccb9a01abf56b9c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::PoseConcept</name>
    <filename>a02583.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="class">
    <name>gtsam::PosePriorFactor</name>
    <filename>a04519.html</filename>
    <templarg></templarg>
    <base>NoiseModelFactor1&lt; POSE &gt;</base>
    <member kind="function">
      <type></type>
      <name>PosePriorFactor</name>
      <anchorfile>a04519.html</anchorfile>
      <anchor>a37a5d7f641d57ca2e54d9aae05fb5778</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PosePriorFactor</name>
      <anchorfile>a04519.html</anchorfile>
      <anchor>ab719930cd800766a834c6ecf4c97495e</anchor>
      <arglist>(Key key, const POSE &amp;prior, const SharedNoiseModel &amp;model, boost::optional&lt; POSE &gt; body_P_sensor=boost::none)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual gtsam::NonlinearFactor::shared_ptr</type>
      <name>clone</name>
      <anchorfile>a04519.html</anchorfile>
      <anchor>a35cc785f9bd68090ed0c468b6ae5cf79</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>print</name>
      <anchorfile>a04519.html</anchorfile>
      <anchor>afd0871da7e85f3cd36f4f9a1bb966293</anchor>
      <arglist>(const std::string &amp;s, const KeyFormatter &amp;keyFormatter=DefaultKeyFormatter) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>equals</name>
      <anchorfile>a04519.html</anchorfile>
      <anchor>a9446c9a6d13d0b0081de7a60dd882978</anchor>
      <arglist>(const NonlinearFactor &amp;expected, double tol=1e-9) const</arglist>
    </member>
    <member kind="function">
      <type>Vector</type>
      <name>evaluateError</name>
      <anchorfile>a04519.html</anchorfile>
      <anchor>a9fc6238f1d52f738f541637e53c4f1d5</anchor>
      <arglist>(const POSE &amp;p, boost::optional&lt; Matrix &amp; &gt; H=boost::none) const</arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; PosePriorFactor&lt; POSE &gt; &gt;</type>
      <name>shared_ptr</name>
      <anchorfile>a04519.html</anchorfile>
      <anchor>a07cc4c30506fa3542d2faef52cc2a50d</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>boost::serialization::access</name>
      <anchorfile>a04519.html</anchorfile>
      <anchor>ac98d07dd8f7b70e16ccb9a01abf56b9c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::PoseRotationPrior</name>
    <filename>a04039.html</filename>
    <templarg></templarg>
    <base>NoiseModelFactor1&lt; POSE &gt;</base>
    <member kind="function">
      <type></type>
      <name>PoseRotationPrior</name>
      <anchorfile>a04039.html</anchorfile>
      <anchor>a33069d1c86da3e6c66d5feccb75c7a1b</anchor>
      <arglist>(Key key, const Rotation &amp;rot_z, const SharedNoiseModel &amp;model)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PoseRotationPrior</name>
      <anchorfile>a04039.html</anchorfile>
      <anchor>a400f290b75d021bd4852523fc19e0d06</anchor>
      <arglist>(Key key, const POSE &amp;pose_z, const SharedNoiseModel &amp;model)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual gtsam::NonlinearFactor::shared_ptr</type>
      <name>clone</name>
      <anchorfile>a04039.html</anchorfile>
      <anchor>a624123280a9db5459eca64d6f0d0053f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>equals</name>
      <anchorfile>a04039.html</anchorfile>
      <anchor>aded00acbd4055301a3b7fefa35959fd2</anchor>
      <arglist>(const NonlinearFactor &amp;expected, double tol=1e-9) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>a04039.html</anchorfile>
      <anchor>a3591216f754ce1f92ece76e826bc418c</anchor>
      <arglist>(const std::string &amp;s=&quot;&quot;, const KeyFormatter &amp;keyFormatter=DefaultKeyFormatter) const</arglist>
    </member>
    <member kind="function">
      <type>Vector</type>
      <name>evaluateError</name>
      <anchorfile>a04039.html</anchorfile>
      <anchor>a2551efc89fc200b99a36e945b29d6442</anchor>
      <arglist>(const Pose &amp;pose, boost::optional&lt; Matrix &amp; &gt; H=boost::none) const</arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>boost::serialization::access</name>
      <anchorfile>a04039.html</anchorfile>
      <anchor>ac98d07dd8f7b70e16ccb9a01abf56b9c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::PoseRTV</name>
    <filename>a04639.html</filename>
    <base>ProductLieGroup&lt; Pose3, Velocity3 &gt;</base>
    <member kind="function">
      <type>double</type>
      <name>range</name>
      <anchorfile>a04639.html</anchorfile>
      <anchor>ac045ea3808c230baeaf847ab5b06b11f</anchor>
      <arglist>(const PoseRTV &amp;other, OptionalJacobian&lt; 1, 9 &gt; H1=boost::none, OptionalJacobian&lt; 1, 9 &gt; H2=boost::none) const</arglist>
    </member>
    <member kind="function">
      <type>PoseRTV</type>
      <name>planarDynamics</name>
      <anchorfile>a04639.html</anchorfile>
      <anchor>a5e0ef41a0c454320e1f5b0bd786b99eb</anchor>
      <arglist>(double vel_rate, double heading_rate, double max_accel, double dt) const</arglist>
    </member>
    <member kind="function">
      <type>PoseRTV</type>
      <name>flyingDynamics</name>
      <anchorfile>a04639.html</anchorfile>
      <anchor>a48d10745a368079668364e9aa315719c</anchor>
      <arglist>(double pitch_rate, double heading_rate, double lift_control, double dt) const</arglist>
    </member>
    <member kind="function">
      <type>PoseRTV</type>
      <name>generalDynamics</name>
      <anchorfile>a04639.html</anchorfile>
      <anchor>a5eb06040cb415f1693c7ffc5dfda8d6e</anchor>
      <arglist>(const Vector &amp;accel, const Vector &amp;gyro, double dt) const</arglist>
    </member>
    <member kind="function">
      <type>Vector6</type>
      <name>imuPrediction</name>
      <anchorfile>a04639.html</anchorfile>
      <anchor>aaa8a9bdd9dea2e70eb844890c22dce7a</anchor>
      <arglist>(const PoseRTV &amp;x2, double dt) const</arglist>
    </member>
    <member kind="function">
      <type>Point3</type>
      <name>translationIntegration</name>
      <anchorfile>a04639.html</anchorfile>
      <anchor>a30dcd5811fbe68ef3d8097d250960580</anchor>
      <arglist>(const Rot3 &amp;r2, const Velocity3 &amp;v2, double dt) const</arglist>
    </member>
    <member kind="function">
      <type>Point3</type>
      <name>translationIntegration</name>
      <anchorfile>a04639.html</anchorfile>
      <anchor>af110dd152edd6fb41d918788e390d0f1</anchor>
      <arglist>(const PoseRTV &amp;x2, double dt) const</arglist>
    </member>
    <member kind="function">
      <type>Vector</type>
      <name>translationIntegrationVec</name>
      <anchorfile>a04639.html</anchorfile>
      <anchor>a451dcbcf269147948292486d3cb9626f</anchor>
      <arglist>(const PoseRTV &amp;x2, double dt) const</arglist>
    </member>
    <member kind="function">
      <type>PoseRTV</type>
      <name>transformed_from</name>
      <anchorfile>a04639.html</anchorfile>
      <anchor>a189334f48cb38cfa9895fcc5575418c1</anchor>
      <arglist>(const Pose3 &amp;trans, ChartJacobian Dglobal=boost::none, OptionalJacobian&lt; 9, 6 &gt; Dtrans=boost::none) const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Matrix</type>
      <name>RRTMbn</name>
      <anchorfile>a04639.html</anchorfile>
      <anchor>a89d18cfd01515e3c5743b09de43e8bd7</anchor>
      <arglist>(const Vector3 &amp;euler)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Matrix</type>
      <name>RRTMnb</name>
      <anchorfile>a04639.html</anchorfile>
      <anchor>ac520162c0446004ad0771e42c33903b0</anchor>
      <arglist>(const Vector3 &amp;euler)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PoseRTV</name>
      <anchorfile>a04639.html</anchorfile>
      <anchor>aedcae2852c2c9adcea4e5760e1ad2afc</anchor>
      <arglist>(double roll, double pitch, double yaw, double x, double y, double z, double vx, double vy, double vz)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PoseRTV</name>
      <anchorfile>a04639.html</anchorfile>
      <anchor>a25ad65cb06c27e0e6a2c618a75f3dd4a</anchor>
      <arglist>(const Vector &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>range</name>
      <anchorfile>a04639.html</anchorfile>
      <anchor>ac045ea3808c230baeaf847ab5b06b11f</anchor>
      <arglist>(const PoseRTV &amp;other, OptionalJacobian&lt; 1, 9 &gt; H1=boost::none, OptionalJacobian&lt; 1, 9 &gt; H2=boost::none) const</arglist>
    </member>
    <member kind="function">
      <type>PoseRTV</type>
      <name>planarDynamics</name>
      <anchorfile>a04639.html</anchorfile>
      <anchor>a5e0ef41a0c454320e1f5b0bd786b99eb</anchor>
      <arglist>(double vel_rate, double heading_rate, double max_accel, double dt) const</arglist>
    </member>
    <member kind="function">
      <type>PoseRTV</type>
      <name>flyingDynamics</name>
      <anchorfile>a04639.html</anchorfile>
      <anchor>a48d10745a368079668364e9aa315719c</anchor>
      <arglist>(double pitch_rate, double heading_rate, double lift_control, double dt) const</arglist>
    </member>
    <member kind="function">
      <type>PoseRTV</type>
      <name>generalDynamics</name>
      <anchorfile>a04639.html</anchorfile>
      <anchor>a5eb06040cb415f1693c7ffc5dfda8d6e</anchor>
      <arglist>(const Vector &amp;accel, const Vector &amp;gyro, double dt) const</arglist>
    </member>
    <member kind="function">
      <type>Vector6</type>
      <name>imuPrediction</name>
      <anchorfile>a04639.html</anchorfile>
      <anchor>aaa8a9bdd9dea2e70eb844890c22dce7a</anchor>
      <arglist>(const PoseRTV &amp;x2, double dt) const</arglist>
    </member>
    <member kind="function">
      <type>Point3</type>
      <name>translationIntegration</name>
      <anchorfile>a04639.html</anchorfile>
      <anchor>a30dcd5811fbe68ef3d8097d250960580</anchor>
      <arglist>(const Rot3 &amp;r2, const Velocity3 &amp;v2, double dt) const</arglist>
    </member>
    <member kind="function">
      <type>Point3</type>
      <name>translationIntegration</name>
      <anchorfile>a04639.html</anchorfile>
      <anchor>af110dd152edd6fb41d918788e390d0f1</anchor>
      <arglist>(const PoseRTV &amp;x2, double dt) const</arglist>
    </member>
    <member kind="function">
      <type>Vector</type>
      <name>translationIntegrationVec</name>
      <anchorfile>a04639.html</anchorfile>
      <anchor>a451dcbcf269147948292486d3cb9626f</anchor>
      <arglist>(const PoseRTV &amp;x2, double dt) const</arglist>
    </member>
    <member kind="function">
      <type>PoseRTV</type>
      <name>transformed_from</name>
      <anchorfile>a04639.html</anchorfile>
      <anchor>a189334f48cb38cfa9895fcc5575418c1</anchor>
      <arglist>(const Pose3 &amp;trans, ChartJacobian Dglobal=boost::none, OptionalJacobian&lt; 9, 6 &gt; Dtrans=boost::none) const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Matrix</type>
      <name>RRTMbn</name>
      <anchorfile>a04639.html</anchorfile>
      <anchor>a89d18cfd01515e3c5743b09de43e8bd7</anchor>
      <arglist>(const Vector3 &amp;euler)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Matrix</type>
      <name>RRTMnb</name>
      <anchorfile>a04639.html</anchorfile>
      <anchor>ac520162c0446004ad0771e42c33903b0</anchor>
      <arglist>(const Vector3 &amp;euler)</arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>boost::serialization::access</name>
      <anchorfile>a04639.html</anchorfile>
      <anchor>ac98d07dd8f7b70e16ccb9a01abf56b9c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::PoseTranslationPrior</name>
    <filename>a04043.html</filename>
    <templarg></templarg>
    <base>NoiseModelFactor1&lt; POSE &gt;</base>
    <member kind="function">
      <type></type>
      <name>PoseTranslationPrior</name>
      <anchorfile>a04043.html</anchorfile>
      <anchor>adad7eab23d69d2dec6ae4ad59e0a8c65</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PoseTranslationPrior</name>
      <anchorfile>a04043.html</anchorfile>
      <anchor>a1701c62175b4e30c8c1df8159764480c</anchor>
      <arglist>(Key key, const Translation &amp;measured, const noiseModel::Base::shared_ptr &amp;model)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PoseTranslationPrior</name>
      <anchorfile>a04043.html</anchorfile>
      <anchor>a204e0b877e117aabfe599ca247a195f8</anchor>
      <arglist>(Key key, const POSE &amp;pose_z, const noiseModel::Base::shared_ptr &amp;model)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual gtsam::NonlinearFactor::shared_ptr</type>
      <name>clone</name>
      <anchorfile>a04043.html</anchorfile>
      <anchor>ab354308500ebf9df653082952525cd6b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Vector</type>
      <name>evaluateError</name>
      <anchorfile>a04043.html</anchorfile>
      <anchor>a221b9b4ac7c546cd7e9ffc8c3165d73e</anchor>
      <arglist>(const Pose &amp;pose, boost::optional&lt; Matrix &amp; &gt; H=boost::none) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>equals</name>
      <anchorfile>a04043.html</anchorfile>
      <anchor>a3a26bd3ee4185540d6efcc9bb8cf17ab</anchor>
      <arglist>(const NonlinearFactor &amp;expected, double tol=1e-9) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>a04043.html</anchorfile>
      <anchor>acf6e17876a5702832b94bdd1025fc533</anchor>
      <arglist>(const std::string &amp;s=&quot;&quot;, const KeyFormatter &amp;keyFormatter=DefaultKeyFormatter) const</arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>boost::serialization::access</name>
      <anchorfile>a04043.html</anchorfile>
      <anchor>ac98d07dd8f7b70e16ccb9a01abf56b9c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::Potentials</name>
    <filename>a02439.html</filename>
    <base>AlgebraicDecisionTree&lt; Key &gt;</base>
    <member kind="function">
      <type>GTSAM_EXPORT</type>
      <name>Potentials</name>
      <anchorfile>a02439.html</anchorfile>
      <anchor>a3086f766807fdfdc53ba6e6b55451f48</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>GTSAM_EXPORT</type>
      <name>Potentials</name>
      <anchorfile>a02439.html</anchorfile>
      <anchor>a5aab8730c80a7070ac1f295b9ab66e5d</anchor>
      <arglist>(const DiscreteKeys &amp;keys, const ADT &amp;decisionTree)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Potentials</name>
      <anchorfile>a02439.html</anchorfile>
      <anchor>ada2ab8851536ff2373c2ec65653ef766</anchor>
      <arglist>(const DiscreteKeys &amp;keys, SOURCE table)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>Potentials</name>
      <anchorfile>a02439.html</anchorfile>
      <anchor>a9765260313d922c2b8feb976089f52ec</anchor>
      <arglist>(const ADT &amp;potentials)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::map&lt; Key, size_t &gt;</type>
      <name>cardinalities_</name>
      <anchorfile>a02439.html</anchorfile>
      <anchor>adaa8e2ca551588ed0b07aa0a20379338</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::Preconditioner</name>
    <filename>a03323.html</filename>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>solve</name>
      <anchorfile>a03323.html</anchorfile>
      <anchor>a1487b9feccdfff75cf25cff86affb81b</anchor>
      <arglist>(const Vector &amp;y, Vector &amp;x) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>transposeSolve</name>
      <anchorfile>a03323.html</anchorfile>
      <anchor>aae3d89e2b3e004d227e9fd28ff8dba64</anchor>
      <arglist>(const Vector &amp;y, Vector &amp;x) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>build</name>
      <anchorfile>a03323.html</anchorfile>
      <anchor>a2d978320d9036aa10dcb4cf4ae289739</anchor>
      <arglist>(const GaussianFactorGraph &amp;gfg, const KeyInfo &amp;info, const std::map&lt; Key, Vector &gt; &amp;lambda)=0</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>gtsam::PreconditionerParameters</name>
    <filename>a03319.html</filename>
  </compound>
  <compound kind="class">
    <name>gtsam::PredecessorMap</name>
    <filename>a02983.html</filename>
    <templarg>KEY</templarg>
    <member kind="function">
      <type>void</type>
      <name>insert</name>
      <anchorfile>a02983.html</anchorfile>
      <anchor>a682e34c430a538cf5792a49b2d4697e9</anchor>
      <arglist>(const KEY &amp;key, const KEY &amp;parent)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::PreintegratedAhrsMeasurements</name>
    <filename>a03407.html</filename>
    <base>gtsam::PreintegratedRotation</base>
    <member kind="function">
      <type></type>
      <name>PreintegratedAhrsMeasurements</name>
      <anchorfile>a03407.html</anchorfile>
      <anchor>ae37277d97a500ca9ae98682821e5eb61</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PreintegratedAhrsMeasurements</name>
      <anchorfile>a03407.html</anchorfile>
      <anchor>ab223cf8e404c688014e73154d551e85e</anchor>
      <arglist>(const boost::shared_ptr&lt; Params &gt; &amp;p, const Vector3 &amp;biasHat)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>a03407.html</anchorfile>
      <anchor>a2355d2f603e4ad6d5df418fac26d6579</anchor>
      <arglist>(const std::string &amp;s=&quot;Preintegrated Measurements: &quot;) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>equals</name>
      <anchorfile>a03407.html</anchorfile>
      <anchor>ae3b9f8f5d1d5f397f06e13c12d8ea75b</anchor>
      <arglist>(const PreintegratedAhrsMeasurements &amp;, double tol=1e-9) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resetIntegration</name>
      <anchorfile>a03407.html</anchorfile>
      <anchor>a6b18d19def1f97d5c4c2a3f5f33a9eb7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>integrateMeasurement</name>
      <anchorfile>a03407.html</anchorfile>
      <anchor>a051cbc796709f657c8988c0755aaaf6d</anchor>
      <arglist>(const Vector3 &amp;measuredOmega, double deltaT)</arglist>
    </member>
    <member kind="function">
      <type>Vector3</type>
      <name>predict</name>
      <anchorfile>a03407.html</anchorfile>
      <anchor>a89701c96e7d6cbff07900aa2c7bb2c95</anchor>
      <arglist>(const Vector3 &amp;bias, OptionalJacobian&lt; 3, 3 &gt; H=boost::none) const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PreintegratedAhrsMeasurements</name>
      <anchorfile>a03407.html</anchorfile>
      <anchor>a7b586af5a0ce47da8a64cbc6047216fe</anchor>
      <arglist>(const Vector3 &amp;biasHat, const Matrix3 &amp;measuredOmegaCovariance)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Vector3</type>
      <name>biasHat_</name>
      <anchorfile>a03407.html</anchorfile>
      <anchor>a2afdb871fd5690fe3017d26728714f18</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Matrix3</type>
      <name>preintMeasCov_</name>
      <anchorfile>a03407.html</anchorfile>
      <anchor>ac4e58456c03e2e2ed835d0455e6b591c</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>boost::serialization::access</name>
      <anchorfile>a03407.html</anchorfile>
      <anchor>ac98d07dd8f7b70e16ccb9a01abf56b9c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::PreintegratedCombinedMeasurements</name>
    <filename>a03435.html</filename>
    <base>gtsam::ManifoldPreintegration</base>
    <member kind="function">
      <type></type>
      <name>PreintegratedCombinedMeasurements</name>
      <anchorfile>a03435.html</anchorfile>
      <anchor>a8d86e0d37b74640d5ac6d7efc2f02c8e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PreintegratedCombinedMeasurements</name>
      <anchorfile>a03435.html</anchorfile>
      <anchor>af27a09b0665d2cdc0e598cfb56296e2c</anchor>
      <arglist>(const boost::shared_ptr&lt; Params &gt; &amp;p, const imuBias::ConstantBias &amp;biasHat=imuBias::ConstantBias())</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resetIntegration</name>
      <anchorfile>a03435.html</anchorfile>
      <anchor>afabc1d4fda08383f44b0d59967908f8f</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>Params &amp;</type>
      <name>p</name>
      <anchorfile>a03435.html</anchorfile>
      <anchor>a6222a233e1bde187e916f98d8106f112</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>integrateMeasurement</name>
      <anchorfile>a03435.html</anchorfile>
      <anchor>a9c9d6f736444eab5d49fa9a9b305c738</anchor>
      <arglist>(const Vector3 &amp;measuredAcc, const Vector3 &amp;measuredOmega, const double dt) override</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PreintegratedCombinedMeasurements</name>
      <anchorfile>a03435.html</anchorfile>
      <anchor>a8d86e0d37b74640d5ac6d7efc2f02c8e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PreintegratedCombinedMeasurements</name>
      <anchorfile>a03435.html</anchorfile>
      <anchor>af27a09b0665d2cdc0e598cfb56296e2c</anchor>
      <arglist>(const boost::shared_ptr&lt; Params &gt; &amp;p, const imuBias::ConstantBias &amp;biasHat=imuBias::ConstantBias())</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resetIntegration</name>
      <anchorfile>a03435.html</anchorfile>
      <anchor>afabc1d4fda08383f44b0d59967908f8f</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>Params &amp;</type>
      <name>p</name>
      <anchorfile>a03435.html</anchorfile>
      <anchor>a6222a233e1bde187e916f98d8106f112</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>integrateMeasurement</name>
      <anchorfile>a03435.html</anchorfile>
      <anchor>a9c9d6f736444eab5d49fa9a9b305c738</anchor>
      <arglist>(const Vector3 &amp;measuredAcc, const Vector3 &amp;measuredOmega, const double dt) override</arglist>
    </member>
    <class kind="struct">gtsam::PreintegratedCombinedMeasurements::Params</class>
    <member kind="friend">
      <type>friend class</type>
      <name>boost::serialization::access</name>
      <anchorfile>a03435.html</anchorfile>
      <anchor>ac98d07dd8f7b70e16ccb9a01abf56b9c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::PreintegratedImuMeasurements</name>
    <filename>a03463.html</filename>
    <base>gtsam::ManifoldPreintegration</base>
    <member kind="function">
      <type></type>
      <name>PreintegratedImuMeasurements</name>
      <anchorfile>a03463.html</anchorfile>
      <anchor>aa721d1492af019a1402e37a6de502332</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PreintegratedImuMeasurements</name>
      <anchorfile>a03463.html</anchorfile>
      <anchor>a5245d321c127ab974124b66a6bec2197</anchor>
      <arglist>(const boost::shared_ptr&lt; PreintegrationParams &gt; &amp;p, const imuBias::ConstantBias &amp;biasHat=imuBias::ConstantBias())</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PreintegratedImuMeasurements</name>
      <anchorfile>a03463.html</anchorfile>
      <anchor>a78557e146fcc85022f3f6b883b2dd55b</anchor>
      <arglist>(const PreintegrationType &amp;base, const Matrix9 &amp;preintMeasCov)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~PreintegratedImuMeasurements</name>
      <anchorfile>a03463.html</anchorfile>
      <anchor>af7738caa431a79843395f64268b32e10</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>a03463.html</anchorfile>
      <anchor>af23f75e0cfc8c3de5b7558d3ab5eeeac</anchor>
      <arglist>(const std::string &amp;s=&quot;Preintegrated Measurements:&quot;) const override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>equals</name>
      <anchorfile>a03463.html</anchorfile>
      <anchor>a707df59c5b8586455ebb5e1c0ebdc332</anchor>
      <arglist>(const PreintegratedImuMeasurements &amp;expected, double tol=1e-9) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resetIntegration</name>
      <anchorfile>a03463.html</anchorfile>
      <anchor>a32712ad644fb2990ebeb7e39a3b7d3ec</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>integrateMeasurement</name>
      <anchorfile>a03463.html</anchorfile>
      <anchor>a988e29fd66bb628c2f7669acb21e1eb8</anchor>
      <arglist>(const Vector3 &amp;measuredAcc, const Vector3 &amp;measuredOmega, const double dt) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>integrateMeasurements</name>
      <anchorfile>a03463.html</anchorfile>
      <anchor>a7be2b4be8f31b0da8d0ee791a3e18c42</anchor>
      <arglist>(const Matrix &amp;measuredAccs, const Matrix &amp;measuredOmegas, const Matrix &amp;dts)</arglist>
    </member>
    <member kind="function">
      <type>Matrix</type>
      <name>preintMeasCov</name>
      <anchorfile>a03463.html</anchorfile>
      <anchor>abe18ef369004d8789af398089920f908</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Matrix9</type>
      <name>preintMeasCov_</name>
      <anchorfile>a03463.html</anchorfile>
      <anchor>acb8eb38a2b6f4b6969636c213113343b</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>boost::serialization::access</name>
      <anchorfile>a03463.html</anchorfile>
      <anchor>ac98d07dd8f7b70e16ccb9a01abf56b9c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::PreintegratedRotation</name>
    <filename>a03519.html</filename>
    <member kind="function">
      <type></type>
      <name>PreintegratedRotation</name>
      <anchorfile>a03519.html</anchorfile>
      <anchor>aa1900dc3e0d71ae87a3cd149739493dc</anchor>
      <arglist>(const boost::shared_ptr&lt; Params &gt; &amp;p)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PreintegratedRotation</name>
      <anchorfile>a03519.html</anchorfile>
      <anchor>a845409e08ff8c2de417086eff14aac88</anchor>
      <arglist>(const boost::shared_ptr&lt; Params &gt; &amp;p, double deltaTij, const Rot3 &amp;deltaRij, const Matrix3 &amp;delRdelBiasOmega)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resetIntegration</name>
      <anchorfile>a03519.html</anchorfile>
      <anchor>afef7a62e383296931b88afe371ec8f3c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>matchesParamsWith</name>
      <anchorfile>a03519.html</anchorfile>
      <anchor>ad4a13c89dc8226456aaeef68736b9ae2</anchor>
      <arglist>(const PreintegratedRotation &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>Rot3</type>
      <name>incrementalRotation</name>
      <anchorfile>a03519.html</anchorfile>
      <anchor>a8ae1c42a1167736378498fb09d4a761a</anchor>
      <arglist>(const Vector3 &amp;measuredOmega, const Vector3 &amp;biasHat, double deltaT, OptionalJacobian&lt; 3, 3 &gt; D_incrR_integratedOmega) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>integrateMeasurement</name>
      <anchorfile>a03519.html</anchorfile>
      <anchor>ac3f08ff7738f84d49725a8b72b7a9af2</anchor>
      <arglist>(const Vector3 &amp;measuredOmega, const Vector3 &amp;biasHat, double deltaT, OptionalJacobian&lt; 3, 3 &gt; D_incrR_integratedOmega=boost::none, OptionalJacobian&lt; 3, 3 &gt; F=boost::none)</arglist>
    </member>
    <member kind="function">
      <type>Rot3</type>
      <name>biascorrectedDeltaRij</name>
      <anchorfile>a03519.html</anchorfile>
      <anchor>a10fbefa82ee213aba78f119fb5acafba</anchor>
      <arglist>(const Vector3 &amp;biasOmegaIncr, OptionalJacobian&lt; 3, 3 &gt; H=boost::none) const</arglist>
    </member>
    <member kind="function">
      <type>Vector3</type>
      <name>integrateCoriolis</name>
      <anchorfile>a03519.html</anchorfile>
      <anchor>ade1b314ed09d29bdcdaa677b202d9a65</anchor>
      <arglist>(const Rot3 &amp;rot_i) const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PreintegratedRotation</name>
      <anchorfile>a03519.html</anchorfile>
      <anchor>aa1900dc3e0d71ae87a3cd149739493dc</anchor>
      <arglist>(const boost::shared_ptr&lt; Params &gt; &amp;p)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PreintegratedRotation</name>
      <anchorfile>a03519.html</anchorfile>
      <anchor>a845409e08ff8c2de417086eff14aac88</anchor>
      <arglist>(const boost::shared_ptr&lt; Params &gt; &amp;p, double deltaTij, const Rot3 &amp;deltaRij, const Matrix3 &amp;delRdelBiasOmega)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resetIntegration</name>
      <anchorfile>a03519.html</anchorfile>
      <anchor>afef7a62e383296931b88afe371ec8f3c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>matchesParamsWith</name>
      <anchorfile>a03519.html</anchorfile>
      <anchor>ad4a13c89dc8226456aaeef68736b9ae2</anchor>
      <arglist>(const PreintegratedRotation &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>Rot3</type>
      <name>incrementalRotation</name>
      <anchorfile>a03519.html</anchorfile>
      <anchor>a8ae1c42a1167736378498fb09d4a761a</anchor>
      <arglist>(const Vector3 &amp;measuredOmega, const Vector3 &amp;biasHat, double deltaT, OptionalJacobian&lt; 3, 3 &gt; D_incrR_integratedOmega) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>integrateMeasurement</name>
      <anchorfile>a03519.html</anchorfile>
      <anchor>ac3f08ff7738f84d49725a8b72b7a9af2</anchor>
      <arglist>(const Vector3 &amp;measuredOmega, const Vector3 &amp;biasHat, double deltaT, OptionalJacobian&lt; 3, 3 &gt; D_incrR_integratedOmega=boost::none, OptionalJacobian&lt; 3, 3 &gt; F=boost::none)</arglist>
    </member>
    <member kind="function">
      <type>Rot3</type>
      <name>biascorrectedDeltaRij</name>
      <anchorfile>a03519.html</anchorfile>
      <anchor>a10fbefa82ee213aba78f119fb5acafba</anchor>
      <arglist>(const Vector3 &amp;biasOmegaIncr, OptionalJacobian&lt; 3, 3 &gt; H=boost::none) const</arglist>
    </member>
    <member kind="function">
      <type>Vector3</type>
      <name>integrateCoriolis</name>
      <anchorfile>a03519.html</anchorfile>
      <anchor>ade1b314ed09d29bdcdaa677b202d9a65</anchor>
      <arglist>(const Rot3 &amp;rot_i) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>PreintegratedRotation</name>
      <anchorfile>a03519.html</anchorfile>
      <anchor>ae744d5c7fcf27da650d08f65467f15e1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>boost::shared_ptr&lt; Params &gt;</type>
      <name>p_</name>
      <anchorfile>a03519.html</anchorfile>
      <anchor>a6a57eaeabb9d6144a8dff15e9b895a87</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>deltaTij_</name>
      <anchorfile>a03519.html</anchorfile>
      <anchor>ac290e4fa241ce8f6a7a1c94e6f2fccb8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Rot3</type>
      <name>deltaRij_</name>
      <anchorfile>a03519.html</anchorfile>
      <anchor>aead7cee1ef09b022ad4e2836c51c4cc0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Matrix3</type>
      <name>delRdelBiasOmega_</name>
      <anchorfile>a03519.html</anchorfile>
      <anchor>a44e2af0899009e3d0eb935bc411d14a1</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>boost::serialization::access</name>
      <anchorfile>a03519.html</anchorfile>
      <anchor>ac98d07dd8f7b70e16ccb9a01abf56b9c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>gtsam::PreintegratedRotationParams</name>
    <filename>a03515.html</filename>
    <member kind="variable">
      <type>Matrix3</type>
      <name>gyroscopeCovariance</name>
      <anchorfile>a03515.html</anchorfile>
      <anchor>a59e97f78c2725df39d3844e75d950fa8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>boost::optional&lt; Vector3 &gt;</type>
      <name>omegaCoriolis</name>
      <anchorfile>a03515.html</anchorfile>
      <anchor>a58b443499fde3879301ea6ef9604a130</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>boost::optional&lt; Pose3 &gt;</type>
      <name>body_P_sensor</name>
      <anchorfile>a03515.html</anchorfile>
      <anchor>a12119fb0a8727799308455777aeaadb6</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>boost::serialization::access</name>
      <anchorfile>a03515.html</anchorfile>
      <anchor>ac98d07dd8f7b70e16ccb9a01abf56b9c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::PreintegrationBase</name>
    <filename>a03527.html</filename>
    <member kind="function">
      <type></type>
      <name>PreintegrationBase</name>
      <anchorfile>a03527.html</anchorfile>
      <anchor>ab2d778943f9acd1126975f7133fa73c5</anchor>
      <arglist>(const boost::shared_ptr&lt; Params &gt; &amp;p, const imuBias::ConstantBias &amp;biasHat=imuBias::ConstantBias())</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>matchesParamsWith</name>
      <anchorfile>a03527.html</anchorfile>
      <anchor>a4d978fd06c9d44dfdcf2eee1e4b33e79</anchor>
      <arglist>(const PreintegrationBase &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>const boost::shared_ptr&lt; Params &gt; &amp;</type>
      <name>params</name>
      <anchorfile>a03527.html</anchorfile>
      <anchor>a6318ba0999e7d64dd960b9d1d7712c12</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Params &amp;</type>
      <name>p</name>
      <anchorfile>a03527.html</anchorfile>
      <anchor>a91c5998de464a9de15c6f23a3255dfa0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::pair&lt; Vector3, Vector3 &gt;</type>
      <name>correctMeasurementsBySensorPose</name>
      <anchorfile>a03527.html</anchorfile>
      <anchor>afd4f1d6e3b27cf02d8fb04642f01cf60</anchor>
      <arglist>(const Vector3 &amp;unbiasedAcc, const Vector3 &amp;unbiasedOmega, OptionalJacobian&lt; 3, 3 &gt; correctedAcc_H_unbiasedAcc=boost::none, OptionalJacobian&lt; 3, 3 &gt; correctedAcc_H_unbiasedOmega=boost::none, OptionalJacobian&lt; 3, 3 &gt; correctedOmega_H_unbiasedOmega=boost::none) const</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>update</name>
      <anchorfile>a03527.html</anchorfile>
      <anchor>af562d10048eb544a7057443feaefb8c6</anchor>
      <arglist>(const Vector3 &amp;measuredAcc, const Vector3 &amp;measuredOmega, const double dt, Matrix9 *A, Matrix93 *B, Matrix93 *C)=0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>integrateMeasurement</name>
      <anchorfile>a03527.html</anchorfile>
      <anchor>af81180bb6e01ac950d29784a43e8f18d</anchor>
      <arglist>(const Vector3 &amp;measuredAcc, const Vector3 &amp;measuredOmega, const double dt)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual Vector9</type>
      <name>biasCorrectedDelta</name>
      <anchorfile>a03527.html</anchorfile>
      <anchor>a60931119ee6fa92d208a0f2a57c86f44</anchor>
      <arglist>(const imuBias::ConstantBias &amp;bias_i, OptionalJacobian&lt; 9, 6 &gt; H=boost::none) const =0</arglist>
    </member>
    <member kind="function">
      <type>NavState</type>
      <name>predict</name>
      <anchorfile>a03527.html</anchorfile>
      <anchor>a7015fe8c3bca3f16cbb2cde2c0c0490e</anchor>
      <arglist>(const NavState &amp;state_i, const imuBias::ConstantBias &amp;bias_i, OptionalJacobian&lt; 9, 9 &gt; H1=boost::none, OptionalJacobian&lt; 9, 6 &gt; H2=boost::none) const</arglist>
    </member>
    <member kind="function">
      <type>Vector9</type>
      <name>computeError</name>
      <anchorfile>a03527.html</anchorfile>
      <anchor>a42d05558104ab6ff36d87502a0e90856</anchor>
      <arglist>(const NavState &amp;state_i, const NavState &amp;state_j, const imuBias::ConstantBias &amp;bias_i, OptionalJacobian&lt; 9, 9 &gt; H1, OptionalJacobian&lt; 9, 9 &gt; H2, OptionalJacobian&lt; 9, 6 &gt; H3) const</arglist>
    </member>
    <member kind="function">
      <type>Vector9</type>
      <name>computeErrorAndJacobians</name>
      <anchorfile>a03527.html</anchorfile>
      <anchor>a38d963567b8b346c38f86405f2964ef5</anchor>
      <arglist>(const Pose3 &amp;pose_i, const Vector3 &amp;vel_i, const Pose3 &amp;pose_j, const Vector3 &amp;vel_j, const imuBias::ConstantBias &amp;bias_i, OptionalJacobian&lt; 9, 6 &gt; H1=boost::none, OptionalJacobian&lt; 9, 3 &gt; H2=boost::none, OptionalJacobian&lt; 9, 6 &gt; H3=boost::none, OptionalJacobian&lt; 9, 3 &gt; H4=boost::none, OptionalJacobian&lt; 9, 6 &gt; H5=boost::none) const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PreintegrationBase</name>
      <anchorfile>a03527.html</anchorfile>
      <anchor>ab2d778943f9acd1126975f7133fa73c5</anchor>
      <arglist>(const boost::shared_ptr&lt; Params &gt; &amp;p, const imuBias::ConstantBias &amp;biasHat=imuBias::ConstantBias())</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>matchesParamsWith</name>
      <anchorfile>a03527.html</anchorfile>
      <anchor>a4d978fd06c9d44dfdcf2eee1e4b33e79</anchor>
      <arglist>(const PreintegrationBase &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>const boost::shared_ptr&lt; Params &gt; &amp;</type>
      <name>params</name>
      <anchorfile>a03527.html</anchorfile>
      <anchor>a6318ba0999e7d64dd960b9d1d7712c12</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Params &amp;</type>
      <name>p</name>
      <anchorfile>a03527.html</anchorfile>
      <anchor>a91c5998de464a9de15c6f23a3255dfa0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::pair&lt; Vector3, Vector3 &gt;</type>
      <name>correctMeasurementsBySensorPose</name>
      <anchorfile>a03527.html</anchorfile>
      <anchor>afd4f1d6e3b27cf02d8fb04642f01cf60</anchor>
      <arglist>(const Vector3 &amp;unbiasedAcc, const Vector3 &amp;unbiasedOmega, OptionalJacobian&lt; 3, 3 &gt; correctedAcc_H_unbiasedAcc=boost::none, OptionalJacobian&lt; 3, 3 &gt; correctedAcc_H_unbiasedOmega=boost::none, OptionalJacobian&lt; 3, 3 &gt; correctedOmega_H_unbiasedOmega=boost::none) const</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>update</name>
      <anchorfile>a03527.html</anchorfile>
      <anchor>af562d10048eb544a7057443feaefb8c6</anchor>
      <arglist>(const Vector3 &amp;measuredAcc, const Vector3 &amp;measuredOmega, const double dt, Matrix9 *A, Matrix93 *B, Matrix93 *C)=0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>integrateMeasurement</name>
      <anchorfile>a03527.html</anchorfile>
      <anchor>af81180bb6e01ac950d29784a43e8f18d</anchor>
      <arglist>(const Vector3 &amp;measuredAcc, const Vector3 &amp;measuredOmega, const double dt)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual Vector9</type>
      <name>biasCorrectedDelta</name>
      <anchorfile>a03527.html</anchorfile>
      <anchor>a60931119ee6fa92d208a0f2a57c86f44</anchor>
      <arglist>(const imuBias::ConstantBias &amp;bias_i, OptionalJacobian&lt; 9, 6 &gt; H=boost::none) const =0</arglist>
    </member>
    <member kind="function">
      <type>NavState</type>
      <name>predict</name>
      <anchorfile>a03527.html</anchorfile>
      <anchor>a7015fe8c3bca3f16cbb2cde2c0c0490e</anchor>
      <arglist>(const NavState &amp;state_i, const imuBias::ConstantBias &amp;bias_i, OptionalJacobian&lt; 9, 9 &gt; H1=boost::none, OptionalJacobian&lt; 9, 6 &gt; H2=boost::none) const</arglist>
    </member>
    <member kind="function">
      <type>Vector9</type>
      <name>computeError</name>
      <anchorfile>a03527.html</anchorfile>
      <anchor>a42d05558104ab6ff36d87502a0e90856</anchor>
      <arglist>(const NavState &amp;state_i, const NavState &amp;state_j, const imuBias::ConstantBias &amp;bias_i, OptionalJacobian&lt; 9, 9 &gt; H1, OptionalJacobian&lt; 9, 9 &gt; H2, OptionalJacobian&lt; 9, 6 &gt; H3) const</arglist>
    </member>
    <member kind="function">
      <type>Vector9</type>
      <name>computeErrorAndJacobians</name>
      <anchorfile>a03527.html</anchorfile>
      <anchor>a38d963567b8b346c38f86405f2964ef5</anchor>
      <arglist>(const Pose3 &amp;pose_i, const Vector3 &amp;vel_i, const Pose3 &amp;pose_j, const Vector3 &amp;vel_j, const imuBias::ConstantBias &amp;bias_i, OptionalJacobian&lt; 9, 6 &gt; H1=boost::none, OptionalJacobian&lt; 9, 3 &gt; H2=boost::none, OptionalJacobian&lt; 9, 6 &gt; H3=boost::none, OptionalJacobian&lt; 9, 3 &gt; H4=boost::none, OptionalJacobian&lt; 9, 6 &gt; H5=boost::none) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>PreintegrationBase</name>
      <anchorfile>a03527.html</anchorfile>
      <anchor>a85da47fc93662940e6bd38d02a3b3118</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~PreintegrationBase</name>
      <anchorfile>a03527.html</anchorfile>
      <anchor>a4d5ead934c4582183ddc8a7b415decef</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>boost::shared_ptr&lt; Params &gt;</type>
      <name>p_</name>
      <anchorfile>a03527.html</anchorfile>
      <anchor>af26ed74776f7048c9959da2708161d5d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Bias</type>
      <name>biasHat_</name>
      <anchorfile>a03527.html</anchorfile>
      <anchor>a774c243fcec68bbfcfc2c62db3ca2d2a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>deltaTij_</name>
      <anchorfile>a03527.html</anchorfile>
      <anchor>a05698caf670ddcd7a108505898a71134</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>gtsam::PreintegrationParams</name>
    <filename>a03531.html</filename>
    <base>gtsam::PreintegratedRotationParams</base>
    <member kind="function">
      <type></type>
      <name>PreintegrationParams</name>
      <anchorfile>a03531.html</anchorfile>
      <anchor>a4172ae9d785221171cf39c019547ba51</anchor>
      <arglist>(const Vector3 &amp;n_gravity)</arglist>
    </member>
    <member kind="variable">
      <type>Matrix3</type>
      <name>accelerometerCovariance</name>
      <anchorfile>a03531.html</anchorfile>
      <anchor>a1fb0a8f02d0568b27b2bd6a25c558935</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Matrix3</type>
      <name>integrationCovariance</name>
      <anchorfile>a03531.html</anchorfile>
      <anchor>a593988febdb8bbf93a2524f14b98d16a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>use2ndOrderCoriolis</name>
      <anchorfile>a03531.html</anchorfile>
      <anchor>a2732ec155327ae88f23a6b983c173162</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Vector3</type>
      <name>n_gravity</name>
      <anchorfile>a03531.html</anchorfile>
      <anchor>a355a21d1ad3b0ab250ab8596790eb387</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>PreintegrationParams</name>
      <anchorfile>a03531.html</anchorfile>
      <anchor>a2b734623439aeb465143f0ca4a918ad8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>boost::serialization::access</name>
      <anchorfile>a03531.html</anchorfile>
      <anchor>ac98d07dd8f7b70e16ccb9a01abf56b9c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::PriorFactor</name>
    <filename>a04047.html</filename>
    <templarg></templarg>
    <base protection="private">gtsam::NoiseModelFactor</base>
    <base>gtsam::NoiseModelFactor1</base>
    <member kind="function">
      <type></type>
      <name>PriorFactor</name>
      <anchorfile>a04047.html</anchorfile>
      <anchor>a17a6bb1e3cde61261a2e998d7869c74a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PriorFactor</name>
      <anchorfile>a04047.html</anchorfile>
      <anchor>abfaae06f4b11fa2ca13d9e7012558a8e</anchor>
      <arglist>(Key key, const VALUE &amp;prior, const SharedNoiseModel &amp;model=nullptr)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PriorFactor</name>
      <anchorfile>a04047.html</anchorfile>
      <anchor>a51256d9bd0f3d7842406157ca5485f35</anchor>
      <arglist>(Key key, const VALUE &amp;prior, const Matrix &amp;covariance)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual gtsam::NonlinearFactor::shared_ptr</type>
      <name>clone</name>
      <anchorfile>a04047.html</anchorfile>
      <anchor>aad1ceb43df8e06df9185c2164e747b71</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>print</name>
      <anchorfile>a04047.html</anchorfile>
      <anchor>aa6dc6bf045ce07fa16a7b760d8e6d0c9</anchor>
      <arglist>(const std::string &amp;s, const KeyFormatter &amp;keyFormatter=DefaultKeyFormatter) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>equals</name>
      <anchorfile>a04047.html</anchorfile>
      <anchor>a3902c0b5757beb46d6226c0ef219eb1d</anchor>
      <arglist>(const NonlinearFactor &amp;expected, double tol=1e-9) const</arglist>
    </member>
    <member kind="function">
      <type>Vector</type>
      <name>evaluateError</name>
      <anchorfile>a04047.html</anchorfile>
      <anchor>a3c5fc5c0afeba9b9395e7c5a5afd6448</anchor>
      <arglist>(const T &amp;x, boost::optional&lt; Matrix &amp; &gt; H=boost::none) const</arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; PriorFactor&lt; VALUE &gt; &gt;</type>
      <name>shared_ptr</name>
      <anchorfile>a04047.html</anchorfile>
      <anchor>a99936335b31d38f22c30f1f184396278</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>PriorFactor&lt; VALUE &gt;</type>
      <name>This</name>
      <anchorfile>a04047.html</anchorfile>
      <anchor>a08069e4df59458c6d65e91a9bd671c83</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>boost::serialization::access</name>
      <anchorfile>a04047.html</anchorfile>
      <anchor>ac98d07dd8f7b70e16ccb9a01abf56b9c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::ProductLieGroup</name>
    <filename>a02175.html</filename>
    <templarg>G</templarg>
    <templarg>H</templarg>
    <member kind="function">
      <type></type>
      <name>ProductLieGroup</name>
      <anchorfile>a02175.html</anchorfile>
      <anchor>aa25886a3e8642f111a265dec1045c6f3</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ProductLieGroup&lt; Pose3, Velocity3 &gt;</name>
    <filename>a02175.html</filename>
    <member kind="function">
      <type></type>
      <name>ProductLieGroup</name>
      <anchorfile>a02175.html</anchorfile>
      <anchor>aa25886a3e8642f111a265dec1045c6f3</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::ProjectionFactorPPP</name>
    <filename>a04523.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <base protection="private">gtsam::NoiseModelFactor</base>
    <base>NoiseModelFactor3&lt; POSE, POSE, LANDMARK &gt;</base>
    <member kind="function">
      <type></type>
      <name>ProjectionFactorPPP</name>
      <anchorfile>a04523.html</anchorfile>
      <anchor>a589c25761c57d14af73256cae5fadec2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ProjectionFactorPPP</name>
      <anchorfile>a04523.html</anchorfile>
      <anchor>a177ebd896e28da54d7082c59b81bdc0e</anchor>
      <arglist>(const Point2 &amp;measured, const SharedNoiseModel &amp;model, Key poseKey, Key transformKey, Key pointKey, const boost::shared_ptr&lt; CALIBRATION &gt; &amp;K)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ProjectionFactorPPP</name>
      <anchorfile>a04523.html</anchorfile>
      <anchor>aea0762713d7a9405d90526a0e142fb05</anchor>
      <arglist>(const Point2 &amp;measured, const SharedNoiseModel &amp;model, Key poseKey, Key transformKey, Key pointKey, const boost::shared_ptr&lt; CALIBRATION &gt; &amp;K, bool throwCheirality, bool verboseCheirality)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ProjectionFactorPPP</name>
      <anchorfile>a04523.html</anchorfile>
      <anchor>a0bc02f0d7716112729260c85c5ed8469</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual NonlinearFactor::shared_ptr</type>
      <name>clone</name>
      <anchorfile>a04523.html</anchorfile>
      <anchor>a2c67f8cb5ef926d3841be0e35140babb</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>a04523.html</anchorfile>
      <anchor>a338ad871446e44986b08855837e54316</anchor>
      <arglist>(const std::string &amp;s=&quot;&quot;, const KeyFormatter &amp;keyFormatter=DefaultKeyFormatter) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>equals</name>
      <anchorfile>a04523.html</anchorfile>
      <anchor>aa4a755c1cd975befc9f66363775e923c</anchor>
      <arglist>(const NonlinearFactor &amp;p, double tol=1e-9) const</arglist>
    </member>
    <member kind="function">
      <type>Vector</type>
      <name>evaluateError</name>
      <anchorfile>a04523.html</anchorfile>
      <anchor>a3aa7006acc785fb8dea6017ed544f9c6</anchor>
      <arglist>(const Pose3 &amp;pose, const Pose3 &amp;transform, const Point3 &amp;point, boost::optional&lt; Matrix &amp; &gt; H1=boost::none, boost::optional&lt; Matrix &amp; &gt; H2=boost::none, boost::optional&lt; Matrix &amp; &gt; H3=boost::none) const</arglist>
    </member>
    <member kind="function">
      <type>const Point2 &amp;</type>
      <name>measured</name>
      <anchorfile>a04523.html</anchorfile>
      <anchor>abfbc704600f1135fd45b28fa089d19cf</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const boost::shared_ptr&lt; CALIBRATION &gt;</type>
      <name>calibration</name>
      <anchorfile>a04523.html</anchorfile>
      <anchor>a81d4d28acbe7447c1e6f08309adcf9ca</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>verboseCheirality</name>
      <anchorfile>a04523.html</anchorfile>
      <anchor>afff13be68448debfb2f000b66d2122c7</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>throwCheirality</name>
      <anchorfile>a04523.html</anchorfile>
      <anchor>a44dec190fc18fac36c699efcecddc6d6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="typedef">
      <type>NoiseModelFactor3&lt; POSE, POSE, LANDMARK &gt;</type>
      <name>Base</name>
      <anchorfile>a04523.html</anchorfile>
      <anchor>af5b00561d31ef7e336860fc18be9cb02</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ProjectionFactorPPP&lt; POSE, LANDMARK, CALIBRATION &gt;</type>
      <name>This</name>
      <anchorfile>a04523.html</anchorfile>
      <anchor>a5d24ba7d314270d1d8c41ce03f2d68da</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; This &gt;</type>
      <name>shared_ptr</name>
      <anchorfile>a04523.html</anchorfile>
      <anchor>ac3e12d75639d43d2207f287ea5994df8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Point2</type>
      <name>measured_</name>
      <anchorfile>a04523.html</anchorfile>
      <anchor>a9e698f7757fac5f204c864f103d57aca</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>boost::shared_ptr&lt; CALIBRATION &gt;</type>
      <name>K_</name>
      <anchorfile>a04523.html</anchorfile>
      <anchor>aa73006508ebe7142eeeafa5cb404071d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>throwCheirality_</name>
      <anchorfile>a04523.html</anchorfile>
      <anchor>ac0f752b9c0383f5713707f255bcced6f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>verboseCheirality_</name>
      <anchorfile>a04523.html</anchorfile>
      <anchor>a1491acbd1b2524022c1306060ffe44b0</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>boost::serialization::access</name>
      <anchorfile>a04523.html</anchorfile>
      <anchor>ac98d07dd8f7b70e16ccb9a01abf56b9c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::ProjectionFactorPPPC</name>
    <filename>a04531.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <base protection="private">gtsam::NoiseModelFactor</base>
    <base>NoiseModelFactor4&lt; POSE, POSE, LANDMARK, CALIBRATION &gt;</base>
    <member kind="function">
      <type></type>
      <name>ProjectionFactorPPPC</name>
      <anchorfile>a04531.html</anchorfile>
      <anchor>a4a0656579705f1736865de1a947d7217</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ProjectionFactorPPPC</name>
      <anchorfile>a04531.html</anchorfile>
      <anchor>aebaf6d080d0a2dadee9e208f27cf2079</anchor>
      <arglist>(const Point2 &amp;measured, const SharedNoiseModel &amp;model, Key poseKey, Key transformKey, Key pointKey, Key calibKey)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ProjectionFactorPPPC</name>
      <anchorfile>a04531.html</anchorfile>
      <anchor>a6891b990aa68b652574949b54fea4bd6</anchor>
      <arglist>(const Point2 &amp;measured, const SharedNoiseModel &amp;model, Key poseKey, Key transformKey, Key pointKey, Key calibKey, bool throwCheirality, bool verboseCheirality)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ProjectionFactorPPPC</name>
      <anchorfile>a04531.html</anchorfile>
      <anchor>a25ec99b24473bce8edd4702590ef7ae0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual NonlinearFactor::shared_ptr</type>
      <name>clone</name>
      <anchorfile>a04531.html</anchorfile>
      <anchor>a661c737812379dda83fe720e0deeee1a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>a04531.html</anchorfile>
      <anchor>a345489c75a0ed96167c8d5ed6fe1739a</anchor>
      <arglist>(const std::string &amp;s=&quot;&quot;, const KeyFormatter &amp;keyFormatter=DefaultKeyFormatter) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>equals</name>
      <anchorfile>a04531.html</anchorfile>
      <anchor>a74a7daecbe6a2d68dc92a68798cd048c</anchor>
      <arglist>(const NonlinearFactor &amp;p, double tol=1e-9) const</arglist>
    </member>
    <member kind="function">
      <type>Vector</type>
      <name>evaluateError</name>
      <anchorfile>a04531.html</anchorfile>
      <anchor>a382a95956d808c7ca4704a34286a4807</anchor>
      <arglist>(const Pose3 &amp;pose, const Pose3 &amp;transform, const Point3 &amp;point, const CALIBRATION &amp;K, boost::optional&lt; Matrix &amp; &gt; H1=boost::none, boost::optional&lt; Matrix &amp; &gt; H2=boost::none, boost::optional&lt; Matrix &amp; &gt; H3=boost::none, boost::optional&lt; Matrix &amp; &gt; H4=boost::none) const</arglist>
    </member>
    <member kind="function">
      <type>const Point2 &amp;</type>
      <name>measured</name>
      <anchorfile>a04531.html</anchorfile>
      <anchor>a501f60de66d2e9f9fd2cc726400c87ff</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>verboseCheirality</name>
      <anchorfile>a04531.html</anchorfile>
      <anchor>a976ed3a887b0aa05d18fdcab03e40b14</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>throwCheirality</name>
      <anchorfile>a04531.html</anchorfile>
      <anchor>ab2f7f79705c8d6c7cdb070aaab8e411d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="typedef">
      <type>NoiseModelFactor4&lt; POSE, POSE, LANDMARK, CALIBRATION &gt;</type>
      <name>Base</name>
      <anchorfile>a04531.html</anchorfile>
      <anchor>a891b5bdb2014f6c1845c76cd0feb46d1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ProjectionFactorPPPC&lt; POSE, LANDMARK, CALIBRATION &gt;</type>
      <name>This</name>
      <anchorfile>a04531.html</anchorfile>
      <anchor>a132b45cc5b5bb701d02e9d18a903aa7f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; This &gt;</type>
      <name>shared_ptr</name>
      <anchorfile>a04531.html</anchorfile>
      <anchor>a3951c828e749aa83499b5f70674b54fa</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Point2</type>
      <name>measured_</name>
      <anchorfile>a04531.html</anchorfile>
      <anchor>a9077d49edc80d41f4548baa0ce3dfcf3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>throwCheirality_</name>
      <anchorfile>a04531.html</anchorfile>
      <anchor>a7f13081f4eb981ca6cf610a74f8b9e6d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>verboseCheirality_</name>
      <anchorfile>a04531.html</anchorfile>
      <anchor>a3c9a438838b0550ba4155e60c912eeff</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>boost::serialization::access</name>
      <anchorfile>a04531.html</anchorfile>
      <anchor>ac98d07dd8f7b70e16ccb9a01abf56b9c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>gtsam::QP</name>
    <filename>a04315.html</filename>
    <member kind="function">
      <type></type>
      <name>QP</name>
      <anchorfile>a04315.html</anchorfile>
      <anchor>ad544a37499ba9d678be25c0130b9378f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>QP</name>
      <anchorfile>a04315.html</anchorfile>
      <anchor>adf435b767063d6837b94cdcd94efc752</anchor>
      <arglist>(const GaussianFactorGraph &amp;_cost, const EqualityFactorGraph &amp;_linearEqualities, const InequalityFactorGraph &amp;_linearInequalities)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>a04315.html</anchorfile>
      <anchor>ab73ebe2b1b83af2151f6af8048a8f68a</anchor>
      <arglist>(const std::string &amp;s=&quot;&quot;)</arglist>
    </member>
    <member kind="variable">
      <type>GaussianFactorGraph</type>
      <name>cost</name>
      <anchorfile>a04315.html</anchorfile>
      <anchor>a1451f8006011f50382fac56e9bc201f7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>EqualityFactorGraph</type>
      <name>equalities</name>
      <anchorfile>a04315.html</anchorfile>
      <anchor>a057b647092792637cc6180852be1c2da</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>InequalityFactorGraph</type>
      <name>inequalities</name>
      <anchorfile>a04315.html</anchorfile>
      <anchor>a035aeb6d8eea0055ec191e14d3c1a2a0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::QPInitSolver</name>
    <filename>a04319.html</filename>
    <member kind="function">
      <type></type>
      <name>QPInitSolver</name>
      <anchorfile>a04319.html</anchorfile>
      <anchor>a707146397c7df386d3204a5cd7645fab</anchor>
      <arglist>(const QP &amp;qp)</arglist>
    </member>
    <member kind="function">
      <type>VectorValues</type>
      <name>solve</name>
      <anchorfile>a04319.html</anchorfile>
      <anchor>ab17e293a327b632ccfa90e624defebec</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>gtsam::QPPolicy</name>
    <filename>a04323.html</filename>
    <member kind="function" static="yes">
      <type>static const GaussianFactorGraph</type>
      <name>buildCostFunction</name>
      <anchorfile>a04323.html</anchorfile>
      <anchor>ac3cb9b8ac1ccff09b784c4239d3ba0b3</anchor>
      <arglist>(const QP &amp;qp, const VectorValues &amp;xk=VectorValues())</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr double</type>
      <name>maxAlpha</name>
      <anchorfile>a04323.html</anchorfile>
      <anchor>a3ea4225936addef99667e41f5a86d754</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::QPSParser</name>
    <filename>a04335.html</filename>
  </compound>
  <compound kind="class">
    <name>gtsam::QPSParserException</name>
    <filename>a04339.html</filename>
    <base>ThreadsafeException&lt; QPSParserException &gt;</base>
  </compound>
  <compound kind="struct">
    <name>gtsam::Range</name>
    <filename>a02463.html</filename>
    <templarg></templarg>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>gtsam::Range&lt; CalibratedCamera, T &gt;</name>
    <filename>a02567.html</filename>
    <templarg></templarg>
    <base>HasRange&lt; CalibratedCamera, T, double &gt;</base>
  </compound>
  <compound kind="struct">
    <name>gtsam::Range&lt; PinholeCamera&lt; Calibration &gt;, T &gt;</name>
    <filename>a02631.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <base>HasRange&lt; PinholeCamera&lt; Calibration &gt;, T, double &gt;</base>
  </compound>
  <compound kind="struct">
    <name>gtsam::Range&lt; Point3, Point3 &gt;</name>
    <filename>a02683.html</filename>
  </compound>
  <compound kind="struct">
    <name>gtsam::Range&lt; Pose2, T &gt;</name>
    <filename>a02707.html</filename>
    <templarg></templarg>
    <base>HasRange&lt; Pose2, T, double &gt;</base>
  </compound>
  <compound kind="struct">
    <name>gtsam::Range&lt; Pose3, T &gt;</name>
    <filename>a02735.html</filename>
    <templarg></templarg>
    <base>HasRange&lt; Pose3, T, double &gt;</base>
  </compound>
  <compound kind="struct">
    <name>gtsam::Range&lt; PoseRTV, PoseRTV &gt;</name>
    <filename>a04647.html</filename>
    <base>HasRange&lt; PoseRTV, PoseRTV, double &gt;</base>
  </compound>
  <compound kind="struct">
    <name>gtsam::Range&lt; SimpleCamera, T &gt;</name>
    <filename>a02791.html</filename>
    <templarg></templarg>
    <base>HasRange&lt; SimpleCamera, T, double &gt;</base>
  </compound>
  <compound kind="class">
    <name>gtsam::RangeFactor</name>
    <filename>a03927.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <base protection="private">gtsam::NoiseModelFactor</base>
    <base>gtsam::ExpressionFactor2</base>
    <member kind="function">
      <type></type>
      <name>RangeFactor</name>
      <anchorfile>a03927.html</anchorfile>
      <anchor>ac14920d2ec8d8ed84a30f42108a212ce</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual gtsam::NonlinearFactor::shared_ptr</type>
      <name>clone</name>
      <anchorfile>a03927.html</anchorfile>
      <anchor>ad97c4992cfb00392be4dab8a8b8ef6d6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Expression&lt; T &gt;</type>
      <name>expression</name>
      <anchorfile>a03927.html</anchorfile>
      <anchor>ad872fe75e5ee5ff251ca5a46d8c32ace</anchor>
      <arglist>(Key key1, Key key2) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>a03927.html</anchorfile>
      <anchor>ae1d789f37d08dc3d355d8088c58855e1</anchor>
      <arglist>(const std::string &amp;s=&quot;&quot;, const KeyFormatter &amp;kf=DefaultKeyFormatter) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::RangeFactorWithTransform</name>
    <filename>a03935.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <base>gtsam::ExpressionFactor2</base>
    <member kind="function" virtualness="virtual">
      <type>virtual gtsam::NonlinearFactor::shared_ptr</type>
      <name>clone</name>
      <anchorfile>a03935.html</anchorfile>
      <anchor>a62b3a0e9a94e4c3db62372d624a05826</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Expression&lt; T &gt;</type>
      <name>expression</name>
      <anchorfile>a03935.html</anchorfile>
      <anchor>acc4dd6dfd9447f846495a4d83ebb8859</anchor>
      <arglist>(Key key1, Key key2) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>a03935.html</anchorfile>
      <anchor>ac38c71f6b8ed45017a8c36d3b1fb2927</anchor>
      <arglist>(const std::string &amp;s=&quot;&quot;, const KeyFormatter &amp;keyFormatter=DefaultKeyFormatter) const</arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>boost::serialization::access</name>
      <anchorfile>a03935.html</anchorfile>
      <anchor>ac98d07dd8f7b70e16ccb9a01abf56b9c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::Reconstruction</name>
    <filename>a04651.html</filename>
    <base protection="private">gtsam::NoiseModelFactor</base>
    <base>NoiseModelFactor3&lt; Pose3, Pose3, Vector6 &gt;</base>
    <member kind="function" virtualness="virtual">
      <type>virtual gtsam::NonlinearFactor::shared_ptr</type>
      <name>clone</name>
      <anchorfile>a04651.html</anchorfile>
      <anchor>a81c582f837e8483347c950dc20287b62</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>gtsam::RedirectCout</name>
    <filename>a03815.html</filename>
    <member kind="function">
      <type></type>
      <name>RedirectCout</name>
      <anchorfile>a03815.html</anchorfile>
      <anchor>acea65ff66039691f574aea2894a255d8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>str</name>
      <anchorfile>a03815.html</anchorfile>
      <anchor>a65a98f77981bd096f65841afb0215747</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~RedirectCout</name>
      <anchorfile>a03815.html</anchorfile>
      <anchor>a37b3ac486d866219fe29f05bd0d742b2</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::RefCallPushBack</name>
    <filename>a02959.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="class">
    <name>gtsam::ReferenceFrameFactor</name>
    <filename>a04059.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <base>NoiseModelFactor3&lt; POINT, TRANSFORM, POINT &gt;</base>
    <member kind="function">
      <type></type>
      <name>ReferenceFrameFactor</name>
      <anchorfile>a04059.html</anchorfile>
      <anchor>a142d0dde9f42aa80e9b6c57d3c49cd58</anchor>
      <arglist>(Key globalKey, Key transKey, Key localKey, const noiseModel::Base::shared_ptr &amp;model)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ReferenceFrameFactor</name>
      <anchorfile>a04059.html</anchorfile>
      <anchor>ac48e1fa01565b66115b7faed7d132f89</anchor>
      <arglist>(double mu, Key globalKey, Key transKey, Key localKey)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ReferenceFrameFactor</name>
      <anchorfile>a04059.html</anchorfile>
      <anchor>abf5b0891b95e33c718560d86bb3ffc93</anchor>
      <arglist>(Key globalKey, Key transKey, Key localKey, double sigma=1e-2)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual NonlinearFactor::shared_ptr</type>
      <name>clone</name>
      <anchorfile>a04059.html</anchorfile>
      <anchor>aa114cca4ea89328fbe992d04af0d716d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Vector</type>
      <name>evaluateError</name>
      <anchorfile>a04059.html</anchorfile>
      <anchor>aadec6a1d20940610e791351724c03528</anchor>
      <arglist>(const Point &amp;global, const Transform &amp;trans, const Point &amp;local, boost::optional&lt; Matrix &amp; &gt; Dforeign=boost::none, boost::optional&lt; Matrix &amp; &gt; Dtrans=boost::none, boost::optional&lt; Matrix &amp; &gt; Dlocal=boost::none) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>print</name>
      <anchorfile>a04059.html</anchorfile>
      <anchor>a0a0210bf4d5863037074936282c6cb3e</anchor>
      <arglist>(const std::string &amp;s=&quot;&quot;, const gtsam::KeyFormatter &amp;keyFormatter=DefaultKeyFormatter) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>ReferenceFrameFactor</name>
      <anchorfile>a04059.html</anchorfile>
      <anchor>ae45ff48bf3b510669dbd0105c9970c30</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>boost::serialization::access</name>
      <anchorfile>a04059.html</anchorfile>
      <anchor>ac98d07dd8f7b70e16ccb9a01abf56b9c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::RegularHessianFactor</name>
    <filename>a03343.html</filename>
    <templarg>D</templarg>
    <base>gtsam::HessianFactor</base>
    <member kind="function">
      <type></type>
      <name>RegularHessianFactor</name>
      <anchorfile>a03343.html</anchorfile>
      <anchor>aceacc209ee0628bae0e7da7d6f03b15f</anchor>
      <arglist>(const KeyVector &amp;js, const std::vector&lt; Matrix &gt; &amp;Gs, const std::vector&lt; Vector &gt; &amp;gs, double f)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RegularHessianFactor</name>
      <anchorfile>a03343.html</anchorfile>
      <anchor>ae70fc62e57d66f8b30c082a74356b754</anchor>
      <arglist>(Key j1, Key j2, const MatrixD &amp;G11, const MatrixD &amp;G12, const VectorD &amp;g1, const MatrixD &amp;G22, const VectorD &amp;g2, double f)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RegularHessianFactor</name>
      <anchorfile>a03343.html</anchorfile>
      <anchor>a6bf59fdc2fcc8ef982a624866997e40d</anchor>
      <arglist>(Key j1, Key j2, Key j3, const MatrixD &amp;G11, const MatrixD &amp;G12, const MatrixD &amp;G13, const VectorD &amp;g1, const MatrixD &amp;G22, const MatrixD &amp;G23, const VectorD &amp;g2, const MatrixD &amp;G33, const VectorD &amp;g3, double f)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RegularHessianFactor</name>
      <anchorfile>a03343.html</anchorfile>
      <anchor>ab50690c5b18b531c590bf02777f48f97</anchor>
      <arglist>(const KEYS &amp;keys, const SymmetricBlockMatrix &amp;augmentedInformation)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RegularHessianFactor</name>
      <anchorfile>a03343.html</anchorfile>
      <anchor>aef13b780689c4a3e45dc9ae4e1154a25</anchor>
      <arglist>(const RegularJacobianFactor&lt; D &gt; &amp;jf)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RegularHessianFactor</name>
      <anchorfile>a03343.html</anchorfile>
      <anchor>a296e0fd73b4f3425c278985eeffb03de</anchor>
      <arglist>(const GaussianFactorGraph &amp;factors, boost::optional&lt; const Scatter &amp; &gt; scatter=boost::none)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>multiplyHessianAdd</name>
      <anchorfile>a03343.html</anchorfile>
      <anchor>abd07f3c3622dc6da2eeeae645a5b777a</anchor>
      <arglist>(double alpha, const VectorValues &amp;x, VectorValues &amp;y) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>multiplyHessianAdd</name>
      <anchorfile>a03343.html</anchorfile>
      <anchor>a86c8ed56f8dac11c6998d53e7fee7017</anchor>
      <arglist>(double alpha, const double *x, double *yvalues) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>multiplyHessianAdd</name>
      <anchorfile>a03343.html</anchorfile>
      <anchor>a7814cc156d32763235d6b42d3ed007fe</anchor>
      <arglist>(double alpha, const double *x, double *yvalues, std::vector&lt; size_t &gt; offsets) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>hessianDiagonal</name>
      <anchorfile>a03343.html</anchorfile>
      <anchor>a3836c1ab7a7cc3bc97de841142dec60b</anchor>
      <arglist>(double *d) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>gradientAtZero</name>
      <anchorfile>a03343.html</anchorfile>
      <anchor>a44f0035652046786fd25c1dcb5747b4a</anchor>
      <arglist>(double *d) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::RegularImplicitSchurFactor</name>
    <filename>a04067.html</filename>
    <templarg></templarg>
    <base>gtsam::GaussianFactor</base>
    <member kind="function">
      <type></type>
      <name>RegularImplicitSchurFactor</name>
      <anchorfile>a04067.html</anchorfile>
      <anchor>a3118fa6535b6cafacd6b2f07b6f7156c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RegularImplicitSchurFactor</name>
      <anchorfile>a04067.html</anchorfile>
      <anchor>a37fa26b7bffcf72f78711f3b8310f4b8</anchor>
      <arglist>(const KeyVector &amp;keys, const std::vector&lt; MatrixZD, Eigen::aligned_allocator&lt; MatrixZD &gt; &gt; &amp;FBlocks, const Matrix &amp;E, const Matrix &amp;P, const Vector &amp;b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~RegularImplicitSchurFactor</name>
      <anchorfile>a04067.html</anchorfile>
      <anchor>aa5ae1f4293e0f3b359c6494c3e12ccd3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>a04067.html</anchorfile>
      <anchor>a4e88aedf8988974a1c0558bdd5ab785b</anchor>
      <arglist>(const std::string &amp;s=&quot;&quot;, const KeyFormatter &amp;keyFormatter=DefaultKeyFormatter) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>equals</name>
      <anchorfile>a04067.html</anchorfile>
      <anchor>a41c9b7fc43a2dc3fc3c162e63edac760</anchor>
      <arglist>(const GaussianFactor &amp;lf, double tol) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual DenseIndex</type>
      <name>getDim</name>
      <anchorfile>a04067.html</anchorfile>
      <anchor>af76b5e1c93c7d418c681dd8db1eb4b7c</anchor>
      <arglist>(const_iterator variable) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>updateHessian</name>
      <anchorfile>a04067.html</anchorfile>
      <anchor>af85361616f45375217217ca4b1a33963</anchor>
      <arglist>(const KeyVector &amp;keys, SymmetricBlockMatrix *info) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Matrix</type>
      <name>augmentedJacobian</name>
      <anchorfile>a04067.html</anchorfile>
      <anchor>aa101e23fe840153a983a321c0b0d0715</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::pair&lt; Matrix, Vector &gt;</type>
      <name>jacobian</name>
      <anchorfile>a04067.html</anchorfile>
      <anchor>a044b5abd69a7733cc7934ed038585db3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Matrix</type>
      <name>augmentedInformation</name>
      <anchorfile>a04067.html</anchorfile>
      <anchor>a9d20bf79677e0cd9b0815731d38dc47c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Matrix</type>
      <name>information</name>
      <anchorfile>a04067.html</anchorfile>
      <anchor>ab91e3a14a9ca4b2f7c850783ce3104cc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual VectorValues</type>
      <name>hessianDiagonal</name>
      <anchorfile>a04067.html</anchorfile>
      <anchor>a5e534e08362b777ec1649d8752e22cff</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>hessianDiagonal</name>
      <anchorfile>a04067.html</anchorfile>
      <anchor>a06289df6423c6013ac68a4c964054d5d</anchor>
      <arglist>(double *d) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::map&lt; Key, Matrix &gt;</type>
      <name>hessianBlockDiagonal</name>
      <anchorfile>a04067.html</anchorfile>
      <anchor>a4bb33f66312bf218331b1a026dee45e1</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual GaussianFactor::shared_ptr</type>
      <name>clone</name>
      <anchorfile>a04067.html</anchorfile>
      <anchor>ab69b1dfa9356ab69966e1b01489af016</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>empty</name>
      <anchorfile>a04067.html</anchorfile>
      <anchor>adee5f45c799d6b12b1248334ee9a3cbe</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual GaussianFactor::shared_ptr</type>
      <name>negate</name>
      <anchorfile>a04067.html</anchorfile>
      <anchor>a9494967df6b261a6053453d2974c0690</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>projectError2</name>
      <anchorfile>a04067.html</anchorfile>
      <anchor>ae79b4ba309675ac2287a002251618516</anchor>
      <arglist>(const Error2s &amp;e1, Error2s &amp;e2) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>error</name>
      <anchorfile>a04067.html</anchorfile>
      <anchor>a1fe9fade4a065038484bcd180d32ba6d</anchor>
      <arglist>(const VectorValues &amp;x) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>projectError</name>
      <anchorfile>a04067.html</anchorfile>
      <anchor>a11d2626a8e429e4f783ff28bd51919d9</anchor>
      <arglist>(const Error2s &amp;e1, Error2s &amp;e2) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>multiplyHessianAdd</name>
      <anchorfile>a04067.html</anchorfile>
      <anchor>aee4903685ce186a9c0810212a27fec1e</anchor>
      <arglist>(double alpha, const double *x, double *y) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>multiplyHessianAdd</name>
      <anchorfile>a04067.html</anchorfile>
      <anchor>a5b4fb79a62a762fb1e58ff45218980c2</anchor>
      <arglist>(double alpha, const VectorValues &amp;x, VectorValues &amp;y) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>multiplyHessianDummy</name>
      <anchorfile>a04067.html</anchorfile>
      <anchor>af635715343e998cf75f58fca733ac21b</anchor>
      <arglist>(double alpha, const VectorValues &amp;x, VectorValues &amp;y) const</arglist>
    </member>
    <member kind="function">
      <type>VectorValues</type>
      <name>gradientAtZero</name>
      <anchorfile>a04067.html</anchorfile>
      <anchor>ad69160aa45e86bf6b423e2044e2668d9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>gradientAtZero</name>
      <anchorfile>a04067.html</anchorfile>
      <anchor>aa6c5f5dff4fa21145a26692d8a8efac9</anchor>
      <arglist>(double *d) const</arglist>
    </member>
    <member kind="function">
      <type>Vector</type>
      <name>gradient</name>
      <anchorfile>a04067.html</anchorfile>
      <anchor>a18fc8850e492a9728561ffaf761f4c7f</anchor>
      <arglist>(Key key, const VectorValues &amp;x) const</arglist>
    </member>
    <member kind="variable">
      <type>Error2s</type>
      <name>e1</name>
      <anchorfile>a04067.html</anchorfile>
      <anchor>aad5d33e3b6c90d6714e914e3761b2ad5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>RegularImplicitSchurFactor</type>
      <name>This</name>
      <anchorfile>a04067.html</anchorfile>
      <anchor>ae27c2d8b7b8fec95ba158611c13852a3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; This &gt;</type>
      <name>shared_ptr</name>
      <anchorfile>a04067.html</anchorfile>
      <anchor>aab9a813ad0f77e79b708d3b90342853e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>Eigen::Matrix&lt; double, ZDim, D &gt;</type>
      <name>MatrixZD</name>
      <anchorfile>a04067.html</anchorfile>
      <anchor>a777da647d82c1bcebc2ca98ce22f9e7e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>Eigen::Matrix&lt; double, D, D &gt;</type>
      <name>MatrixDD</name>
      <anchorfile>a04067.html</anchorfile>
      <anchor>a505e379475ff4d2234d928ebb1898346</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const std::vector&lt; MatrixZD, Eigen::aligned_allocator&lt; MatrixZD &gt; &gt;</type>
      <name>FBlocks_</name>
      <anchorfile>a04067.html</anchorfile>
      <anchor>a2abbd8f16ddb227cd86c1a5f0efbd64c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const Matrix</type>
      <name>PointCovariance_</name>
      <anchorfile>a04067.html</anchorfile>
      <anchor>a887d7170cefb1a72bf7576ff95237ed6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const Matrix</type>
      <name>E_</name>
      <anchorfile>a04067.html</anchorfile>
      <anchor>a06015828e1b9c3e2496e541f3a9deabb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const Vector</type>
      <name>b_</name>
      <anchorfile>a04067.html</anchorfile>
      <anchor>a40f26952b993e2e303ecbeb5696f0cd1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected" static="yes">
      <type>static const int</type>
      <name>D</name>
      <anchorfile>a04067.html</anchorfile>
      <anchor>ae663e89e83ac498f97f5847d714f7af0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected" static="yes">
      <type>static const int</type>
      <name>ZDim</name>
      <anchorfile>a04067.html</anchorfile>
      <anchor>a5ccb1beea0e12a8796f3aaaaf1855c47</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::RegularJacobianFactor</name>
    <filename>a03351.html</filename>
    <templarg>D</templarg>
    <base>gtsam::JacobianFactor</base>
    <member kind="function">
      <type></type>
      <name>RegularJacobianFactor</name>
      <anchorfile>a03351.html</anchorfile>
      <anchor>ae43bf2cf406f9b68d7aebce9cb7a025a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RegularJacobianFactor</name>
      <anchorfile>a03351.html</anchorfile>
      <anchor>ad915ad01a506fff9ef5cedc072bd70da</anchor>
      <arglist>(const TERMS &amp;terms, const Vector &amp;b, const SharedDiagonal &amp;model=SharedDiagonal())</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RegularJacobianFactor</name>
      <anchorfile>a03351.html</anchorfile>
      <anchor>aef8d95559114ea3a3a2ca912994bf923</anchor>
      <arglist>(const KEYS &amp;keys, const VerticalBlockMatrix &amp;augmentedMatrix, const SharedDiagonal &amp;sigmas=SharedDiagonal())</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>multiplyHessianAdd</name>
      <anchorfile>a03351.html</anchorfile>
      <anchor>a06444a56d6f0e94a2ace3f20a007aca7</anchor>
      <arglist>(double alpha, const VectorValues &amp;x, VectorValues &amp;y) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>multiplyHessianAdd</name>
      <anchorfile>a03351.html</anchorfile>
      <anchor>af9750ddbef0d1c2811726283f3d1e94d</anchor>
      <arglist>(double alpha, const double *x, double *y) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual VectorValues</type>
      <name>hessianDiagonal</name>
      <anchorfile>a03351.html</anchorfile>
      <anchor>a082c72f35145ff7c270644ec7a8bc1c5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>hessianDiagonal</name>
      <anchorfile>a03351.html</anchorfile>
      <anchor>a94d365da5c9c32278730a2eba3094c63</anchor>
      <arglist>(double *d) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual VectorValues</type>
      <name>gradientAtZero</name>
      <anchorfile>a03351.html</anchorfile>
      <anchor>a32e4a34b7e5e71770400496109d6fa9c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>gradientAtZero</name>
      <anchorfile>a03351.html</anchorfile>
      <anchor>a4d8ceeba227534059bd06e0d282ee5a9</anchor>
      <arglist>(double *d) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>transposeMultiplyAdd</name>
      <anchorfile>a03351.html</anchorfile>
      <anchor>a66275f36981f3c95ef15fd5638635b22</anchor>
      <arglist>(double alpha, const Vector &amp;e, double *x) const</arglist>
    </member>
    <member kind="function">
      <type>Vector</type>
      <name>operator *</name>
      <anchorfile>a03351.html</anchorfile>
      <anchor>aa6839006d7cc2183e15db046a8d8fe09</anchor>
      <arglist>(const double *x) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>multiplyHessianAdd</name>
      <anchorfile>a03351.html</anchorfile>
      <anchor>ac954268c148bae5e15eef17be71b0323</anchor>
      <arglist>(double alpha, const VectorValues &amp;x, VectorValues &amp;y) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>multiplyHessianAdd</name>
      <anchorfile>a03351.html</anchorfile>
      <anchor>a89568ca7957c90ebdd47dcdb4a1a6994</anchor>
      <arglist>(double alpha, const double *x, double *y, const std::vector&lt; size_t &gt; &amp;accumulatedDims) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::RelativeElevationFactor</name>
    <filename>a04539.html</filename>
    <base protection="private">gtsam::NoiseModelFactor</base>
    <base>NoiseModelFactor2&lt; Pose3, Point3 &gt;</base>
    <member kind="function" virtualness="virtual">
      <type>virtual gtsam::NonlinearFactor::shared_ptr</type>
      <name>clone</name>
      <anchorfile>a04539.html</anchorfile>
      <anchor>ad4e6c9230a6d0e679c5f666d80dcee0a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Vector</type>
      <name>evaluateError</name>
      <anchorfile>a04539.html</anchorfile>
      <anchor>ad121574bc7eec9170ce47b7b02d5e283</anchor>
      <arglist>(const Pose3 &amp;pose, const Point3 &amp;point, boost::optional&lt; Matrix &amp; &gt; H1=boost::none, boost::optional&lt; Matrix &amp; &gt; H2=boost::none) const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>measured</name>
      <anchorfile>a04539.html</anchorfile>
      <anchor>a398ffcaea8e6a84d1e285e5b9632cf2f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>equals</name>
      <anchorfile>a04539.html</anchorfile>
      <anchor>a8b7361bf971bd502d3f5e3b77e861231</anchor>
      <arglist>(const NonlinearFactor &amp;expected, double tol=1e-9) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>a04539.html</anchorfile>
      <anchor>aa34be0be09b7280739c2ac9bc96d1bed</anchor>
      <arglist>(const std::string &amp;s=&quot;&quot;, const KeyFormatter &amp;keyFormatter=DefaultKeyFormatter) const</arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>boost::serialization::access</name>
      <anchorfile>a04539.html</anchorfile>
      <anchor>ac98d07dd8f7b70e16ccb9a01abf56b9c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>gtsam::ISAM2::ReorderingMode</name>
    <filename>a03651.html</filename>
  </compound>
  <compound kind="struct">
    <name>gtsam::Reshape</name>
    <filename>a02127.html</filename>
    <templarg>OutM</templarg>
    <templarg>OutN</templarg>
    <templarg>OutOptions</templarg>
    <templarg>InM</templarg>
    <templarg>InN</templarg>
    <templarg>InOptions</templarg>
  </compound>
  <compound kind="struct">
    <name>gtsam::Reshape&lt; M, M, InOptions, M, M, InOptions &gt;</name>
    <filename>a02131.html</filename>
    <templarg>M</templarg>
    <templarg>InOptions</templarg>
  </compound>
  <compound kind="struct">
    <name>gtsam::Reshape&lt; M, N, InOptions, M, N, InOptions &gt;</name>
    <filename>a02135.html</filename>
    <templarg>M</templarg>
    <templarg>N</templarg>
    <templarg>InOptions</templarg>
  </compound>
  <compound kind="struct">
    <name>gtsam::Reshape&lt; N, M, InOptions, M, N, InOptions &gt;</name>
    <filename>a02139.html</filename>
    <templarg>M</templarg>
    <templarg>N</templarg>
    <templarg>InOptions</templarg>
  </compound>
  <compound kind="struct">
    <name>gtsam::ConcurrentBatchFilter::Result</name>
    <filename>a04351.html</filename>
    <member kind="function">
      <type></type>
      <name>Result</name>
      <anchorfile>a04351.html</anchorfile>
      <anchor>aea81f70ca0399c13a5e89d0a51e5a652</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>getIterations</name>
      <anchorfile>a04351.html</anchorfile>
      <anchor>ad9308a29688b9b298d539af7ca6a0535</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable">
      <type>size_t</type>
      <name>iterations</name>
      <anchorfile>a04351.html</anchorfile>
      <anchor>adfc3514d5b5adef4592a3f4315951090</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>size_t</type>
      <name>lambdas</name>
      <anchorfile>a04351.html</anchorfile>
      <anchor>a01e85f0e8c326defd589159fa7cd4749</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>size_t</type>
      <name>nonlinearVariables</name>
      <anchorfile>a04351.html</anchorfile>
      <anchor>a3c373018d7f079c4e832ff9a64843f18</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>size_t</type>
      <name>linearVariables</name>
      <anchorfile>a04351.html</anchorfile>
      <anchor>af8d5cefa24e5800190d787166445cb97</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; size_t &gt;</type>
      <name>newFactorsIndices</name>
      <anchorfile>a04351.html</anchorfile>
      <anchor>ad1bc4f8182a82aa740fe5484345fec54</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>error</name>
      <anchorfile>a04351.html</anchorfile>
      <anchor>a2d87c3908f0904a3446fc0e0e355f45f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>gtsam::ConcurrentBatchSmoother::Result</name>
    <filename>a04363.html</filename>
    <member kind="function">
      <type></type>
      <name>Result</name>
      <anchorfile>a04363.html</anchorfile>
      <anchor>a13a591a7e49fc5b6d047b5163c818807</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>getIterations</name>
      <anchorfile>a04363.html</anchorfile>
      <anchor>a9cf90353f76ea158904f4e9ab182a0a5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable">
      <type>size_t</type>
      <name>iterations</name>
      <anchorfile>a04363.html</anchorfile>
      <anchor>acb4926b09bdf3d4c5a09f9526cb435ce</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>size_t</type>
      <name>lambdas</name>
      <anchorfile>a04363.html</anchorfile>
      <anchor>acbaefc53b1b9b9a60439c1d2fe06d9c6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>size_t</type>
      <name>nonlinearVariables</name>
      <anchorfile>a04363.html</anchorfile>
      <anchor>a9510e3729b1962a85bb15016507e0f68</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>size_t</type>
      <name>linearVariables</name>
      <anchorfile>a04363.html</anchorfile>
      <anchor>a713e990c9168a07db8bc594406a84c71</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>error</name>
      <anchorfile>a04363.html</anchorfile>
      <anchor>ae8b33307acb0feffa4df92b6f3ab3f98</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>gtsam::ConcurrentIncrementalSmoother::Result</name>
    <filename>a04395.html</filename>
    <member kind="function">
      <type></type>
      <name>Result</name>
      <anchorfile>a04395.html</anchorfile>
      <anchor>a078a08a0b00b8dd9b5dcf0d187048992</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>getIterations</name>
      <anchorfile>a04395.html</anchorfile>
      <anchor>a89a0ded5460cf453ab60f5845f027470</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable">
      <type>size_t</type>
      <name>iterations</name>
      <anchorfile>a04395.html</anchorfile>
      <anchor>a968feb5cf718b0b06a13ae84f6ad7976</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>size_t</type>
      <name>nonlinearVariables</name>
      <anchorfile>a04395.html</anchorfile>
      <anchor>a5898919d92711e1ed30d46550dfa9be0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>size_t</type>
      <name>linearVariables</name>
      <anchorfile>a04395.html</anchorfile>
      <anchor>a0576bd4dbc58585f0714b3206a174b31</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>error</name>
      <anchorfile>a04395.html</anchorfile>
      <anchor>a615205ade22582c6aa30fe2ed5b0d713</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>gtsam::FixedLagSmoother::Result</name>
    <filename>a04407.html</filename>
    <member kind="function">
      <type>size_t</type>
      <name>getIterations</name>
      <anchorfile>a04407.html</anchorfile>
      <anchor>a8bc0b69e5e92c84b1ba7ebc656a20d1d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable">
      <type>size_t</type>
      <name>iterations</name>
      <anchorfile>a04407.html</anchorfile>
      <anchor>a033f08a7ba38504c13dd924a548508fd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>size_t</type>
      <name>intermediateSteps</name>
      <anchorfile>a04407.html</anchorfile>
      <anchor>a68c4d214b1904c6eaa3c1915f1661070</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>size_t</type>
      <name>nonlinearVariables</name>
      <anchorfile>a04407.html</anchorfile>
      <anchor>a71cbb6d1a9bbbbc2fcd84ff24ffb2631</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>size_t</type>
      <name>linearVariables</name>
      <anchorfile>a04407.html</anchorfile>
      <anchor>afd5396592531dacf86c7a0a480025999</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>error</name>
      <anchorfile>a04407.html</anchorfile>
      <anchor>a9536f78994092c233308b336f41272f8</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>gtsam::ConcurrentIncrementalFilter::Result</name>
    <filename>a04383.html</filename>
    <member kind="function">
      <type></type>
      <name>Result</name>
      <anchorfile>a04383.html</anchorfile>
      <anchor>a2d88a7a63d39d35f219eea57099bd483</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>getIterations</name>
      <anchorfile>a04383.html</anchorfile>
      <anchor>a6275c99b9db02ee7d2ad659acca18278</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable">
      <type>size_t</type>
      <name>iterations</name>
      <anchorfile>a04383.html</anchorfile>
      <anchor>aafa9f1c68e9c5c8c524d51985057cf91</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>size_t</type>
      <name>nonlinearVariables</name>
      <anchorfile>a04383.html</anchorfile>
      <anchor>ab3ae9f578bb91d4a84228cc64697b409</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>size_t</type>
      <name>linearVariables</name>
      <anchorfile>a04383.html</anchorfile>
      <anchor>ad0ed5b6d5757bf743ca52795e5e5bf4b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>FactorIndices</type>
      <name>newFactorsIndices</name>
      <anchorfile>a04383.html</anchorfile>
      <anchor>a4a40ecd23d1a1a31cf364b5d0f8b847c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>error</name>
      <anchorfile>a04383.html</anchorfile>
      <anchor>a8111967e71690ccad647b6ef23c6d1b5</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>gtsam::AlgebraicDecisionTree::Ring</name>
    <filename>a02343.html</filename>
  </compound>
  <compound kind="class">
    <name>gtsam::noiseModel::Robust</name>
    <filename>a03283.html</filename>
    <base>gtsam::noiseModel::Base</base>
    <member kind="function">
      <type></type>
      <name>Robust</name>
      <anchorfile>a03283.html</anchorfile>
      <anchor>a1ccfaa5e2bbe890d0a2a394053c6f8e0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Robust</name>
      <anchorfile>a03283.html</anchorfile>
      <anchor>a1fe3b2482f328c7c3ae26b30bef10945</anchor>
      <arglist>(const RobustModel::shared_ptr robust, const NoiseModel::shared_ptr noise)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Robust</name>
      <anchorfile>a03283.html</anchorfile>
      <anchor>a13ba0ca59782251fec4290969fe5f724</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const RobustModel::shared_ptr &amp;</type>
      <name>robust</name>
      <anchorfile>a03283.html</anchorfile>
      <anchor>a5ca19bb863d5da75e01fd14f4ed01368</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const NoiseModel::shared_ptr &amp;</type>
      <name>noise</name>
      <anchorfile>a03283.html</anchorfile>
      <anchor>a0b474a8489c97d77aa8e99bdd67df6a7</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Vector</type>
      <name>whiten</name>
      <anchorfile>a03283.html</anchorfile>
      <anchor>acc9310ca47afd6159d66a382c22a99ac</anchor>
      <arglist>(const Vector &amp;v) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Matrix</type>
      <name>Whiten</name>
      <anchorfile>a03283.html</anchorfile>
      <anchor>ad7361c608482eb8d65bb6b843d5448fd</anchor>
      <arglist>(const Matrix &amp;A) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Vector</type>
      <name>unwhiten</name>
      <anchorfile>a03283.html</anchorfile>
      <anchor>ae27e1cc505814f6352224626045811d7</anchor>
      <arglist>(const Vector &amp;) const</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const RobustModel::shared_ptr</type>
      <name>robust_</name>
      <anchorfile>a03283.html</anchorfile>
      <anchor>adbe38b28c96ab791af4c5539ad31aa04</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const NoiseModel::shared_ptr</type>
      <name>noise_</name>
      <anchorfile>a03283.html</anchorfile>
      <anchor>a62f108dcedf22a16571a290ecad62642</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>boost::serialization::access</name>
      <anchorfile>a03283.html</anchorfile>
      <anchor>ac98d07dd8f7b70e16ccb9a01abf56b9c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::Rot2</name>
    <filename>a02743.html</filename>
    <base>LieGroup&lt; Rot2, 1 &gt;</base>
    <member kind="function">
      <type></type>
      <name>Rot2</name>
      <anchorfile>a02743.html</anchorfile>
      <anchor>ae1383d61756e94cd2cbb837a00078ee2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Rot2</name>
      <anchorfile>a02743.html</anchorfile>
      <anchor>acda969716a9ad7e96bc817a22eefe83d</anchor>
      <arglist>(double theta)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Rot2</type>
      <name>fromAngle</name>
      <anchorfile>a02743.html</anchorfile>
      <anchor>afb35e14b4b02f27820711c8bcc37367a</anchor>
      <arglist>(double theta)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Rot2</type>
      <name>fromDegrees</name>
      <anchorfile>a02743.html</anchorfile>
      <anchor>ad5570449789e34060ee8117a35fc6904</anchor>
      <arglist>(double theta)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Rot2</type>
      <name>fromCosSin</name>
      <anchorfile>a02743.html</anchorfile>
      <anchor>a720c06bc182de5f11c25688bd3859584</anchor>
      <arglist>(double c, double s)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Rot2</type>
      <name>relativeBearing</name>
      <anchorfile>a02743.html</anchorfile>
      <anchor>a63d13689284fa19a2d0299b0b2529bfc</anchor>
      <arglist>(const Point2 &amp;d, OptionalJacobian&lt; 1, 2 &gt; H=boost::none)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Rot2</type>
      <name>atan2</name>
      <anchorfile>a02743.html</anchorfile>
      <anchor>afbd8489d8ff30a5acbc0c39d3e9c2040</anchor>
      <arglist>(double y, double x)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>a02743.html</anchorfile>
      <anchor>a812360a6966f3a1aef2293f85482dc9b</anchor>
      <arglist>(const std::string &amp;s=&quot;theta&quot;) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>equals</name>
      <anchorfile>a02743.html</anchorfile>
      <anchor>a71019bb67807f8013cd2d8fb9f84349d</anchor>
      <arglist>(const Rot2 &amp;R, double tol=1e-9) const</arglist>
    </member>
    <member kind="function">
      <type>Rot2</type>
      <name>inverse</name>
      <anchorfile>a02743.html</anchorfile>
      <anchor>a4c5d02fd84eb445e2275a67c31af8453</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Rot2</type>
      <name>operator *</name>
      <anchorfile>a02743.html</anchorfile>
      <anchor>a3f7f7e4d0d7a2e8ac969bb7451bc6dba</anchor>
      <arglist>(const Rot2 &amp;R) const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Rot2</type>
      <name>identity</name>
      <anchorfile>a02743.html</anchorfile>
      <anchor>a155d20b57edeebbd8c6dbb04b4d6ab1c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Matrix1</type>
      <name>AdjointMap</name>
      <anchorfile>a02743.html</anchorfile>
      <anchor>abc0cc11cb4231694ab806bed2c963749</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Rot2</type>
      <name>Expmap</name>
      <anchorfile>a02743.html</anchorfile>
      <anchor>a2426e879e750adc540529e6069401d1a</anchor>
      <arglist>(const Vector1 &amp;v, ChartJacobian H=boost::none)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Vector1</type>
      <name>Logmap</name>
      <anchorfile>a02743.html</anchorfile>
      <anchor>a285b68d0862794b9b1bedbd793c419b7</anchor>
      <arglist>(const Rot2 &amp;r, ChartJacobian H=boost::none)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Matrix</type>
      <name>ExpmapDerivative</name>
      <anchorfile>a02743.html</anchorfile>
      <anchor>a1c7e0139ddba7ebb91c851acc604de47</anchor>
      <arglist>(const Vector &amp;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Matrix</type>
      <name>LogmapDerivative</name>
      <anchorfile>a02743.html</anchorfile>
      <anchor>ab94601796e7aaaa59611cb4fa490e356</anchor>
      <arglist>(const Vector &amp;)</arglist>
    </member>
    <member kind="function">
      <type>Point2</type>
      <name>rotate</name>
      <anchorfile>a02743.html</anchorfile>
      <anchor>a2519597142ae3cb4c8dcedf11424bc69</anchor>
      <arglist>(const Point2 &amp;p, OptionalJacobian&lt; 2, 1 &gt; H1=boost::none, OptionalJacobian&lt; 2, 2 &gt; H2=boost::none) const</arglist>
    </member>
    <member kind="function">
      <type>Point2</type>
      <name>operator *</name>
      <anchorfile>a02743.html</anchorfile>
      <anchor>ae4b4f9fb23752e27b1e5276965cf96c0</anchor>
      <arglist>(const Point2 &amp;p) const</arglist>
    </member>
    <member kind="function">
      <type>Point2</type>
      <name>unrotate</name>
      <anchorfile>a02743.html</anchorfile>
      <anchor>a634aa257fde116ba3fd1bc6d9457c71a</anchor>
      <arglist>(const Point2 &amp;p, OptionalJacobian&lt; 2, 1 &gt; H1=boost::none, OptionalJacobian&lt; 2, 2 &gt; H2=boost::none) const</arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>boost::serialization::access</name>
      <anchorfile>a02743.html</anchorfile>
      <anchor>ac98d07dd8f7b70e16ccb9a01abf56b9c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>Point2</type>
      <name>unit</name>
      <anchorfile>a02743.html</anchorfile>
      <anchor>a430d64f851eeea05cce37fd62fb99a2b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>theta</name>
      <anchorfile>a02743.html</anchorfile>
      <anchor>a4647614b08d02297a48a2f8c8b4a8054</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>degrees</name>
      <anchorfile>a02743.html</anchorfile>
      <anchor>aae290dc0ffb1a0543c304edd177ad53a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>c</name>
      <anchorfile>a02743.html</anchorfile>
      <anchor>a19d35a5033fe0b7b1bb040f46a36fd78</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>s</name>
      <anchorfile>a02743.html</anchorfile>
      <anchor>a758035f915383e2583a5615477e25595</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Matrix2</type>
      <name>matrix</name>
      <anchorfile>a02743.html</anchorfile>
      <anchor>ac2ff90ed954479cf5ec7be19ffbf93cf</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Matrix2</type>
      <name>transpose</name>
      <anchorfile>a02743.html</anchorfile>
      <anchor>a112c97d1fed02e92a48ba42a78d93549</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>a02743.html</anchorfile>
      <anchor>a812360a6966f3a1aef2293f85482dc9b</anchor>
      <arglist>(const std::string &amp;s=&quot;theta&quot;) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>equals</name>
      <anchorfile>a02743.html</anchorfile>
      <anchor>a71019bb67807f8013cd2d8fb9f84349d</anchor>
      <arglist>(const Rot2 &amp;R, double tol=1e-9) const</arglist>
    </member>
    <member kind="function">
      <type>Point2</type>
      <name>rotate</name>
      <anchorfile>a02743.html</anchorfile>
      <anchor>a2519597142ae3cb4c8dcedf11424bc69</anchor>
      <arglist>(const Point2 &amp;p, OptionalJacobian&lt; 2, 1 &gt; H1=boost::none, OptionalJacobian&lt; 2, 2 &gt; H2=boost::none) const</arglist>
    </member>
    <member kind="function">
      <type>Point2</type>
      <name>operator *</name>
      <anchorfile>a02743.html</anchorfile>
      <anchor>ae4b4f9fb23752e27b1e5276965cf96c0</anchor>
      <arglist>(const Point2 &amp;p) const</arglist>
    </member>
    <member kind="function">
      <type>Point2</type>
      <name>unrotate</name>
      <anchorfile>a02743.html</anchorfile>
      <anchor>a634aa257fde116ba3fd1bc6d9457c71a</anchor>
      <arglist>(const Point2 &amp;p, OptionalJacobian&lt; 2, 1 &gt; H1=boost::none, OptionalJacobian&lt; 2, 2 &gt; H2=boost::none) const</arglist>
    </member>
    <class kind="struct">gtsam::Rot2::ChartAtOrigin</class>
  </compound>
  <compound kind="class">
    <name>gtsam::Rot3</name>
    <filename>a02759.html</filename>
    <base>LieGroup&lt; Rot3, 3 &gt;</base>
    <member kind="function">
      <type></type>
      <name>Rot3</name>
      <anchorfile>a02759.html</anchorfile>
      <anchor>a790096d9b3f1cd0d90a723915339d847</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Rot3</name>
      <anchorfile>a02759.html</anchorfile>
      <anchor>a5e063e8687e36f5dbaa3281b488a5f37</anchor>
      <arglist>(const Point3 &amp;col1, const Point3 &amp;col2, const Point3 &amp;col3)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Rot3</name>
      <anchorfile>a02759.html</anchorfile>
      <anchor>a933c42065af5ea1e1e3fdcd71451cd23</anchor>
      <arglist>(double R11, double R12, double R13, double R21, double R22, double R23, double R31, double R32, double R33)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Rot3</name>
      <anchorfile>a02759.html</anchorfile>
      <anchor>ae445466f4653469da9c2122f3ec34cd9</anchor>
      <arglist>(const Eigen::MatrixBase&lt; Derived &gt; &amp;R)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Rot3</name>
      <anchorfile>a02759.html</anchorfile>
      <anchor>a6b994c07306b4bd7b5e327d43826b750</anchor>
      <arglist>(const Matrix3 &amp;R)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Rot3</name>
      <anchorfile>a02759.html</anchorfile>
      <anchor>a439f4b2a000a5d1a1db1a493222ad2ec</anchor>
      <arglist>(const Quaternion &amp;q)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Rot3</name>
      <anchorfile>a02759.html</anchorfile>
      <anchor>a2609eade1ee0d77c6e680e7d06e6fb5c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Rot3</type>
      <name>Random</name>
      <anchorfile>a02759.html</anchorfile>
      <anchor>a1433ee24678d3e0524109436fd7c1fb7</anchor>
      <arglist>(boost::mt19937 &amp;rng)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Rot3</type>
      <name>Rx</name>
      <anchorfile>a02759.html</anchorfile>
      <anchor>aa575339f78d2aa7cf36f877120786541</anchor>
      <arglist>(double t)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Rot3</type>
      <name>Ry</name>
      <anchorfile>a02759.html</anchorfile>
      <anchor>a83da1dfe33a1a9c0ac2d10dda41a5de9</anchor>
      <arglist>(double t)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Rot3</type>
      <name>Rz</name>
      <anchorfile>a02759.html</anchorfile>
      <anchor>ad7b10d122b2f4647d03c5339478e7eb4</anchor>
      <arglist>(double t)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Rot3</type>
      <name>RzRyRx</name>
      <anchorfile>a02759.html</anchorfile>
      <anchor>a8b4b86cb3b33c56ca65249eae6f3020e</anchor>
      <arglist>(double x, double y, double z)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Rot3</type>
      <name>RzRyRx</name>
      <anchorfile>a02759.html</anchorfile>
      <anchor>a1c46dcafa6e96c82d5c9a3472fb6d963</anchor>
      <arglist>(const Vector &amp;xyz)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Rot3</type>
      <name>Yaw</name>
      <anchorfile>a02759.html</anchorfile>
      <anchor>a4c246f45dd2c3522aa137d6a7daa2c48</anchor>
      <arglist>(double t)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Rot3</type>
      <name>Pitch</name>
      <anchorfile>a02759.html</anchorfile>
      <anchor>a910f3e76bf0abda247eb9a8e496c6e27</anchor>
      <arglist>(double t)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Rot3</type>
      <name>Ypr</name>
      <anchorfile>a02759.html</anchorfile>
      <anchor>a262d3114e508bb987e0e245f66e86a68</anchor>
      <arglist>(double y, double p, double r)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Rot3</type>
      <name>Quaternion</name>
      <anchorfile>a02759.html</anchorfile>
      <anchor>a9f6c4e458645b64d2a38282ed7fdd825</anchor>
      <arglist>(double w, double x, double y, double z)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Rot3</type>
      <name>AxisAngle</name>
      <anchorfile>a02759.html</anchorfile>
      <anchor>a8667b13a8b05f6897884a1eb127faf9e</anchor>
      <arglist>(const Point3 &amp;axis, double angle)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Rot3</type>
      <name>AxisAngle</name>
      <anchorfile>a02759.html</anchorfile>
      <anchor>a63bcfbea65d533f3751ab15ad33a2e91</anchor>
      <arglist>(const Unit3 &amp;axis, double angle)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Rot3</type>
      <name>Rodrigues</name>
      <anchorfile>a02759.html</anchorfile>
      <anchor>a71b9f35dd204e3f3616e64b03146bfe1</anchor>
      <arglist>(const Vector3 &amp;w)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Rot3</type>
      <name>Rodrigues</name>
      <anchorfile>a02759.html</anchorfile>
      <anchor>ab02570988c454d513ea33f01b291d175</anchor>
      <arglist>(double wx, double wy, double wz)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Rot3</type>
      <name>AlignPair</name>
      <anchorfile>a02759.html</anchorfile>
      <anchor>aca7791d39f8aaccf4fbf5fa33fc17950</anchor>
      <arglist>(const Unit3 &amp;axis, const Unit3 &amp;a_p, const Unit3 &amp;b_p)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Rot3</type>
      <name>AlignTwoPairs</name>
      <anchorfile>a02759.html</anchorfile>
      <anchor>a5bc30180b7f2fecaa6f5a0abe25c5c09</anchor>
      <arglist>(const Unit3 &amp;a_p, const Unit3 &amp;b_p, const Unit3 &amp;a_q, const Unit3 &amp;b_q)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>a02759.html</anchorfile>
      <anchor>aaaa212d1d538e678cf312b798eea7c11</anchor>
      <arglist>(const std::string &amp;s=&quot;R&quot;) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>equals</name>
      <anchorfile>a02759.html</anchorfile>
      <anchor>a364e8e84b5a595b3bd236594130013d6</anchor>
      <arglist>(const Rot3 &amp;p, double tol=1e-9) const</arglist>
    </member>
    <member kind="function">
      <type>Rot3</type>
      <name>operator *</name>
      <anchorfile>a02759.html</anchorfile>
      <anchor>a949be6b44b378fac063c0e2819227321</anchor>
      <arglist>(const Rot3 &amp;R2) const</arglist>
    </member>
    <member kind="function">
      <type>Rot3</type>
      <name>inverse</name>
      <anchorfile>a02759.html</anchorfile>
      <anchor>ab5e9bf20c7a5dc294012debdbd4f7acb</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Rot3</type>
      <name>conjugate</name>
      <anchorfile>a02759.html</anchorfile>
      <anchor>aa809377e3681fa7a1a16d13e716d40fc</anchor>
      <arglist>(const Rot3 &amp;cRb) const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Rot3</type>
      <name>identity</name>
      <anchorfile>a02759.html</anchorfile>
      <anchor>aa1dba48999e8d2cd6bd39084ec87b28b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>CoordinatesMode</name>
      <anchorfile>a02759.html</anchorfile>
      <anchor>ae4277d914aedd191dabc95684484ca8d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>EXPMAP</name>
      <anchorfile>a02759.html</anchorfile>
      <anchor>ae4277d914aedd191dabc95684484ca8da8a660629652ff98b7da4185926534054</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CAYLEY</name>
      <anchorfile>a02759.html</anchorfile>
      <anchor>ae4277d914aedd191dabc95684484ca8da70572972f22e25d28c44626d43629d9f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>Rot3</type>
      <name>retractCayley</name>
      <anchorfile>a02759.html</anchorfile>
      <anchor>a13c38b259a72671589bc8a25a5477d43</anchor>
      <arglist>(const Vector &amp;omega) const</arglist>
    </member>
    <member kind="function">
      <type>Vector3</type>
      <name>localCayley</name>
      <anchorfile>a02759.html</anchorfile>
      <anchor>a9e39d4d4f3de8c13420a3bbecfe8b97a</anchor>
      <arglist>(const Rot3 &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>Matrix3</type>
      <name>AdjointMap</name>
      <anchorfile>a02759.html</anchorfile>
      <anchor>a25619f49eea7ab16bc40bab6ea82b3b9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Rot3</type>
      <name>Expmap</name>
      <anchorfile>a02759.html</anchorfile>
      <anchor>abb5ec33c245b0df9455d55fd0689c9d2</anchor>
      <arglist>(const Vector3 &amp;v, OptionalJacobian&lt; 3, 3 &gt; H=boost::none)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Vector3</type>
      <name>Logmap</name>
      <anchorfile>a02759.html</anchorfile>
      <anchor>aa5501d5c5344170d9ccbea59468c2763</anchor>
      <arglist>(const Rot3 &amp;R, OptionalJacobian&lt; 3, 3 &gt; H=boost::none)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Matrix3</type>
      <name>ExpmapDerivative</name>
      <anchorfile>a02759.html</anchorfile>
      <anchor>abf20b8d8216c557e88647063c5fb2218</anchor>
      <arglist>(const Vector3 &amp;x)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Matrix3</type>
      <name>LogmapDerivative</name>
      <anchorfile>a02759.html</anchorfile>
      <anchor>af8930a51cb70977b3d4671f4094ca2e8</anchor>
      <arglist>(const Vector3 &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>Point3</type>
      <name>rotate</name>
      <anchorfile>a02759.html</anchorfile>
      <anchor>a89483be3c6be7b7aca15eea0be0f2bdd</anchor>
      <arglist>(const Point3 &amp;p, OptionalJacobian&lt; 3, 3 &gt; H1=boost::none, OptionalJacobian&lt; 3, 3 &gt; H2=boost::none) const</arglist>
    </member>
    <member kind="function">
      <type>Point3</type>
      <name>operator *</name>
      <anchorfile>a02759.html</anchorfile>
      <anchor>a01a6fce39fcc2a76574228f2b742ed67</anchor>
      <arglist>(const Point3 &amp;p) const</arglist>
    </member>
    <member kind="function">
      <type>Point3</type>
      <name>unrotate</name>
      <anchorfile>a02759.html</anchorfile>
      <anchor>a39890aed76e02db7071b3989358cddae</anchor>
      <arglist>(const Point3 &amp;p, OptionalJacobian&lt; 3, 3 &gt; H1=boost::none, OptionalJacobian&lt; 3, 3 &gt; H2=boost::none) const</arglist>
    </member>
    <member kind="function">
      <type>Unit3</type>
      <name>rotate</name>
      <anchorfile>a02759.html</anchorfile>
      <anchor>acb55146464dbf21a89e4cce324a2ae62</anchor>
      <arglist>(const Unit3 &amp;p, OptionalJacobian&lt; 2, 3 &gt; HR=boost::none, OptionalJacobian&lt; 2, 2 &gt; Hp=boost::none) const</arglist>
    </member>
    <member kind="function">
      <type>Unit3</type>
      <name>unrotate</name>
      <anchorfile>a02759.html</anchorfile>
      <anchor>a631de745b256300931949188fc44d32e</anchor>
      <arglist>(const Unit3 &amp;p, OptionalJacobian&lt; 2, 3 &gt; HR=boost::none, OptionalJacobian&lt; 2, 2 &gt; Hp=boost::none) const</arglist>
    </member>
    <member kind="function">
      <type>Unit3</type>
      <name>operator *</name>
      <anchorfile>a02759.html</anchorfile>
      <anchor>ab2eda3f602cda50c109da174135c34f0</anchor>
      <arglist>(const Unit3 &amp;p) const</arglist>
    </member>
    <member kind="function">
      <type>Matrix3</type>
      <name>matrix</name>
      <anchorfile>a02759.html</anchorfile>
      <anchor>aece3904d5ef70057da19943b10cb8fd0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Matrix3</type>
      <name>transpose</name>
      <anchorfile>a02759.html</anchorfile>
      <anchor>a34b31466e7f777ca2ff550ec2cf804c7</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Point3</type>
      <name>column</name>
      <anchorfile>a02759.html</anchorfile>
      <anchor>a441f639f252ff5c5aec31e56ce9bcda9</anchor>
      <arglist>(int index) const</arglist>
    </member>
    <member kind="function">
      <type>Point3</type>
      <name>r1</name>
      <anchorfile>a02759.html</anchorfile>
      <anchor>a4a9d8ce0731b4cf165f6fac05759581c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Point3</type>
      <name>r2</name>
      <anchorfile>a02759.html</anchorfile>
      <anchor>a59383116fba2a9b28e576b6b9b987bc0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Point3</type>
      <name>r3</name>
      <anchorfile>a02759.html</anchorfile>
      <anchor>aa422cf8342ce6cb73783a71a79e1b506</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Vector3</type>
      <name>xyz</name>
      <anchorfile>a02759.html</anchorfile>
      <anchor>a838eaaf4cddf0e8e6e4feb7735a61b5e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Vector3</type>
      <name>ypr</name>
      <anchorfile>a02759.html</anchorfile>
      <anchor>afbd7492b9b4cb391243f6b6523e319c1</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Vector3</type>
      <name>rpy</name>
      <anchorfile>a02759.html</anchorfile>
      <anchor>afecdc07651a799caf54cc05a9588111f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>roll</name>
      <anchorfile>a02759.html</anchorfile>
      <anchor>ae22843141f146b94b91d9aa092cc74fa</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>pitch</name>
      <anchorfile>a02759.html</anchorfile>
      <anchor>a842e22a90f22e9e7a789ab5a6431b97b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>yaw</name>
      <anchorfile>a02759.html</anchorfile>
      <anchor>a954197bba17810037b3365780543a658</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="friend">
      <type>GTSAM_EXPORT friend std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a02759.html</anchorfile>
      <anchor>a2fdec56434f204eb5d258379b104c9a8</anchor>
      <arglist>(std::ostream &amp;os, const Rot3 &amp;p)</arglist>
    </member>
    <member kind="function">
      <type>gtsam::Quaternion</type>
      <name>toQuaternion</name>
      <anchorfile>a02759.html</anchorfile>
      <anchor>a61088cbea39ce3dd5a634004ff16683e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Vector</type>
      <name>quaternion</name>
      <anchorfile>a02759.html</anchorfile>
      <anchor>a7041a1a90992a5a9cfe1ed85a729608c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Rot3</type>
      <name>slerp</name>
      <anchorfile>a02759.html</anchorfile>
      <anchor>a20cf6b0207651b09a891e8af6e9cd24b</anchor>
      <arglist>(double t, const Rot3 &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>a02759.html</anchorfile>
      <anchor>aaaa212d1d538e678cf312b798eea7c11</anchor>
      <arglist>(const std::string &amp;s=&quot;R&quot;) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>equals</name>
      <anchorfile>a02759.html</anchorfile>
      <anchor>a364e8e84b5a595b3bd236594130013d6</anchor>
      <arglist>(const Rot3 &amp;p, double tol=1e-9) const</arglist>
    </member>
    <member kind="function">
      <type>Point3</type>
      <name>rotate</name>
      <anchorfile>a02759.html</anchorfile>
      <anchor>a89483be3c6be7b7aca15eea0be0f2bdd</anchor>
      <arglist>(const Point3 &amp;p, OptionalJacobian&lt; 3, 3 &gt; H1=boost::none, OptionalJacobian&lt; 3, 3 &gt; H2=boost::none) const</arglist>
    </member>
    <member kind="function">
      <type>Point3</type>
      <name>operator *</name>
      <anchorfile>a02759.html</anchorfile>
      <anchor>a01a6fce39fcc2a76574228f2b742ed67</anchor>
      <arglist>(const Point3 &amp;p) const</arglist>
    </member>
    <member kind="function">
      <type>Point3</type>
      <name>unrotate</name>
      <anchorfile>a02759.html</anchorfile>
      <anchor>a39890aed76e02db7071b3989358cddae</anchor>
      <arglist>(const Point3 &amp;p, OptionalJacobian&lt; 3, 3 &gt; H1=boost::none, OptionalJacobian&lt; 3, 3 &gt; H2=boost::none) const</arglist>
    </member>
    <member kind="function">
      <type>Unit3</type>
      <name>rotate</name>
      <anchorfile>a02759.html</anchorfile>
      <anchor>acb55146464dbf21a89e4cce324a2ae62</anchor>
      <arglist>(const Unit3 &amp;p, OptionalJacobian&lt; 2, 3 &gt; HR=boost::none, OptionalJacobian&lt; 2, 2 &gt; Hp=boost::none) const</arglist>
    </member>
    <member kind="function">
      <type>Unit3</type>
      <name>unrotate</name>
      <anchorfile>a02759.html</anchorfile>
      <anchor>a631de745b256300931949188fc44d32e</anchor>
      <arglist>(const Unit3 &amp;p, OptionalJacobian&lt; 2, 3 &gt; HR=boost::none, OptionalJacobian&lt; 2, 2 &gt; Hp=boost::none) const</arglist>
    </member>
    <member kind="function">
      <type>Unit3</type>
      <name>operator *</name>
      <anchorfile>a02759.html</anchorfile>
      <anchor>ab2eda3f602cda50c109da174135c34f0</anchor>
      <arglist>(const Unit3 &amp;p) const</arglist>
    </member>
    <member kind="function">
      <type>Matrix3</type>
      <name>matrix</name>
      <anchorfile>a02759.html</anchorfile>
      <anchor>aece3904d5ef70057da19943b10cb8fd0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Matrix3</type>
      <name>transpose</name>
      <anchorfile>a02759.html</anchorfile>
      <anchor>a34b31466e7f777ca2ff550ec2cf804c7</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Point3</type>
      <name>column</name>
      <anchorfile>a02759.html</anchorfile>
      <anchor>a441f639f252ff5c5aec31e56ce9bcda9</anchor>
      <arglist>(int index) const</arglist>
    </member>
    <member kind="function">
      <type>Point3</type>
      <name>r1</name>
      <anchorfile>a02759.html</anchorfile>
      <anchor>a4a9d8ce0731b4cf165f6fac05759581c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Point3</type>
      <name>r2</name>
      <anchorfile>a02759.html</anchorfile>
      <anchor>a59383116fba2a9b28e576b6b9b987bc0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Point3</type>
      <name>r3</name>
      <anchorfile>a02759.html</anchorfile>
      <anchor>aa422cf8342ce6cb73783a71a79e1b506</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Vector3</type>
      <name>xyz</name>
      <anchorfile>a02759.html</anchorfile>
      <anchor>a838eaaf4cddf0e8e6e4feb7735a61b5e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Vector3</type>
      <name>ypr</name>
      <anchorfile>a02759.html</anchorfile>
      <anchor>afbd7492b9b4cb391243f6b6523e319c1</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Vector3</type>
      <name>rpy</name>
      <anchorfile>a02759.html</anchorfile>
      <anchor>afecdc07651a799caf54cc05a9588111f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>roll</name>
      <anchorfile>a02759.html</anchorfile>
      <anchor>ae22843141f146b94b91d9aa092cc74fa</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>pitch</name>
      <anchorfile>a02759.html</anchorfile>
      <anchor>a842e22a90f22e9e7a789ab5a6431b97b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>yaw</name>
      <anchorfile>a02759.html</anchorfile>
      <anchor>a954197bba17810037b3365780543a658</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="enumvalue">
      <name>EXPMAP</name>
      <anchorfile>a02759.html</anchorfile>
      <anchor>ae4277d914aedd191dabc95684484ca8da8a660629652ff98b7da4185926534054</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CAYLEY</name>
      <anchorfile>a02759.html</anchorfile>
      <anchor>ae4277d914aedd191dabc95684484ca8da70572972f22e25d28c44626d43629d9f</anchor>
      <arglist></arglist>
    </member>
    <class kind="struct">gtsam::Rot3::CayleyChart</class>
    <class kind="struct">gtsam::Rot3::ChartAtOrigin</class>
    <member kind="friend">
      <type>friend class</type>
      <name>boost::serialization::access</name>
      <anchorfile>a02759.html</anchorfile>
      <anchor>ac98d07dd8f7b70e16ccb9a01abf56b9c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::Rot3AttitudeFactor</name>
    <filename>a03419.html</filename>
    <base>NoiseModelFactor1&lt; Rot3 &gt;</base>
    <base>gtsam::AttitudeFactor</base>
    <member kind="function">
      <type></type>
      <name>Rot3AttitudeFactor</name>
      <anchorfile>a03419.html</anchorfile>
      <anchor>a4e4f004110e20207646c5ed97065910f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Rot3AttitudeFactor</name>
      <anchorfile>a03419.html</anchorfile>
      <anchor>a6cf360ba0e94862339fadb61ce232c49</anchor>
      <arglist>(Key key, const Unit3 &amp;nZ, const SharedNoiseModel &amp;model, const Unit3 &amp;bRef=Unit3(0, 0, 1))</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual gtsam::NonlinearFactor::shared_ptr</type>
      <name>clone</name>
      <anchorfile>a03419.html</anchorfile>
      <anchor>a439f28666629ae30a6f4f3620f05b6c3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>print</name>
      <anchorfile>a03419.html</anchorfile>
      <anchor>aa4eec8f0555fc72cb2fa9c08551d6ea4</anchor>
      <arglist>(const std::string &amp;s, const KeyFormatter &amp;keyFormatter=DefaultKeyFormatter) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>equals</name>
      <anchorfile>a03419.html</anchorfile>
      <anchor>a2245a70b72f58cc1786589cc9e22d4e6</anchor>
      <arglist>(const NonlinearFactor &amp;expected, double tol=1e-9) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Vector</type>
      <name>evaluateError</name>
      <anchorfile>a03419.html</anchorfile>
      <anchor>a6344e02c40864d2a06f18882ceefc91f</anchor>
      <arglist>(const Rot3 &amp;nRb, boost::optional&lt; Matrix &amp; &gt; H=boost::none) const</arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; Rot3AttitudeFactor &gt;</type>
      <name>shared_ptr</name>
      <anchorfile>a03419.html</anchorfile>
      <anchor>a6b910391b1ed4a20413232fe4336cc51</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Rot3AttitudeFactor</type>
      <name>This</name>
      <anchorfile>a03419.html</anchorfile>
      <anchor>a7d12dd56719f608d202fcdf9b8dbdb2d</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>boost::serialization::access</name>
      <anchorfile>a03419.html</anchorfile>
      <anchor>ac98d07dd8f7b70e16ccb9a01abf56b9c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::RotateDirectionsFactor</name>
    <filename>a04079.html</filename>
    <base>NoiseModelFactor1&lt; Rot3 &gt;</base>
    <member kind="function">
      <type></type>
      <name>RotateDirectionsFactor</name>
      <anchorfile>a04079.html</anchorfile>
      <anchor>a2b5ada837b7cc3b3c6d0c175535eb330</anchor>
      <arglist>(Key key, const Unit3 &amp;i_p, const Unit3 &amp;c_z, const SharedNoiseModel &amp;model)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual gtsam::NonlinearFactor::shared_ptr</type>
      <name>clone</name>
      <anchorfile>a04079.html</anchorfile>
      <anchor>a37d59fb3163075d528c5021cc4a8495a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>print</name>
      <anchorfile>a04079.html</anchorfile>
      <anchor>a65ff40181aff5822add26385456a45a5</anchor>
      <arglist>(const std::string &amp;s=&quot;&quot;, const KeyFormatter &amp;keyFormatter=DefaultKeyFormatter) const</arglist>
    </member>
    <member kind="function">
      <type>Vector</type>
      <name>evaluateError</name>
      <anchorfile>a04079.html</anchorfile>
      <anchor>af95bb8ef6986b35daf8972fb74116389</anchor>
      <arglist>(const Rot3 &amp;iRc, boost::optional&lt; Matrix &amp; &gt; H=boost::none) const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Rot3</type>
      <name>Initialize</name>
      <anchorfile>a04079.html</anchorfile>
      <anchor>a85c5981614f80245fbba7ebb05fa2442</anchor>
      <arglist>(const Unit3 &amp;i_p, const Unit3 &amp;c_z)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::RotateFactor</name>
    <filename>a04075.html</filename>
    <base>NoiseModelFactor1&lt; Rot3 &gt;</base>
    <member kind="function">
      <type></type>
      <name>RotateFactor</name>
      <anchorfile>a04075.html</anchorfile>
      <anchor>a27b0b48d60af56c8849a51e450e45718</anchor>
      <arglist>(Key key, const Rot3 &amp;P, const Rot3 &amp;Z, const SharedNoiseModel &amp;model)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual gtsam::NonlinearFactor::shared_ptr</type>
      <name>clone</name>
      <anchorfile>a04075.html</anchorfile>
      <anchor>aeb117ea565e0735eb56c32357415f59c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>print</name>
      <anchorfile>a04075.html</anchorfile>
      <anchor>aeed58c26b2aa2b9ca45ac913681c9d2d</anchor>
      <arglist>(const std::string &amp;s=&quot;&quot;, const KeyFormatter &amp;keyFormatter=DefaultKeyFormatter) const</arglist>
    </member>
    <member kind="function">
      <type>Vector</type>
      <name>evaluateError</name>
      <anchorfile>a04075.html</anchorfile>
      <anchor>a64f987b8533ac235f6f3f0af7f7bbf38</anchor>
      <arglist>(const Rot3 &amp;R, boost::optional&lt; Matrix &amp; &gt; H=boost::none) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::RuntimeErrorThreadsafe</name>
    <filename>a02211.html</filename>
    <base>ThreadsafeException&lt; RuntimeErrorThreadsafe &gt;</base>
    <member kind="function">
      <type></type>
      <name>RuntimeErrorThreadsafe</name>
      <anchorfile>a02211.html</anchorfile>
      <anchor>aa618fffc79e001904f7d53e0f27a29fd</anchor>
      <arglist>(const std::string &amp;description)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::Sampler</name>
    <filename>a03355.html</filename>
    <member kind="function">
      <type></type>
      <name>Sampler</name>
      <anchorfile>a03355.html</anchorfile>
      <anchor>a8897148865655341dfe5d6100921bf2d</anchor>
      <arglist>(const noiseModel::Diagonal::shared_ptr &amp;model, int32_t seed=42u)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Sampler</name>
      <anchorfile>a03355.html</anchorfile>
      <anchor>abaa73809a6420c7679dd68e38d14a501</anchor>
      <arglist>(const Vector &amp;sigmas, int32_t seed=42u)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Sampler</name>
      <anchorfile>a03355.html</anchorfile>
      <anchor>ad9a7af7941d978a69f4e2014347acc10</anchor>
      <arglist>(int32_t seed=42u)</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>dim</name>
      <anchorfile>a03355.html</anchorfile>
      <anchor>ab2396634b783843d3b49d41280972043</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Vector</type>
      <name>sample</name>
      <anchorfile>a03355.html</anchorfile>
      <anchor>a1cf882386b14989258a1eb711f407770</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Vector</type>
      <name>sampleNewModel</name>
      <anchorfile>a03355.html</anchorfile>
      <anchor>a164d26245de683401725aee0899753f8</anchor>
      <arglist>(const noiseModel::Diagonal::shared_ptr &amp;model)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>Vector</type>
      <name>sampleDiagonal</name>
      <anchorfile>a03355.html</anchorfile>
      <anchor>ae3155eabe44a06b77caa7883b46810bf</anchor>
      <arglist>(const Vector &amp;sigmas)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>noiseModel::Diagonal::shared_ptr</type>
      <name>model_</name>
      <anchorfile>a03355.html</anchorfile>
      <anchor>a715947053d2c801444799e4ce00e6118</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>boost::mt19937_64</type>
      <name>generator_</name>
      <anchorfile>a03355.html</anchorfile>
      <anchor>ab6c341b72cba378c4ad34185e0519089</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::ScalarMultiplyExpression</name>
    <filename>a03611.html</filename>
    <templarg></templarg>
    <base>gtsam::Expression</base>
  </compound>
  <compound kind="struct">
    <name>gtsam::internal::ScalarTraits</name>
    <filename>a02299.html</filename>
    <templarg>Scalar</templarg>
    <base>VectorSpaceImpl&lt; Scalar, 1 &gt;</base>
  </compound>
  <compound kind="class">
    <name>ScalarTraits&lt; double &gt;</name>
    <filename>a02299.html</filename>
    <base>VectorSpaceImpl&lt; double, 1 &gt;</base>
  </compound>
  <compound kind="class">
    <name>ScalarTraits&lt; float &gt;</name>
    <filename>a02299.html</filename>
    <base>VectorSpaceImpl&lt; float, 1 &gt;</base>
  </compound>
  <compound kind="class">
    <name>gtsam::Scatter</name>
    <filename>a03363.html</filename>
    <member kind="function">
      <type></type>
      <name>Scatter</name>
      <anchorfile>a03363.html</anchorfile>
      <anchor>a4f9b98a20fec6bd9e90a5434baf7479c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Scatter</name>
      <anchorfile>a03363.html</anchorfile>
      <anchor>a531b57a34284e5cf12a3a87c4c04fe23</anchor>
      <arglist>(const GaussianFactorGraph &amp;gfg, boost::optional&lt; const Ordering &amp; &gt; ordering=boost::none)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add</name>
      <anchorfile>a03363.html</anchorfile>
      <anchor>a513b73f7ed08f72f79c1362d8959eb9a</anchor>
      <arglist>(Key key, size_t dim)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::Scenario</name>
    <filename>a03535.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Scenario</name>
      <anchorfile>a03535.html</anchorfile>
      <anchor>ae8038fa841d5344145b545a150e9ff67</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual Pose3</type>
      <name>pose</name>
      <anchorfile>a03535.html</anchorfile>
      <anchor>a6463a26287f7e5d3ec6792f05f81211e</anchor>
      <arglist>(double t) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual Vector3</type>
      <name>omega_b</name>
      <anchorfile>a03535.html</anchorfile>
      <anchor>af820f44e5f5d6916856e21eee855d3ff</anchor>
      <arglist>(double t) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual Vector3</type>
      <name>velocity_n</name>
      <anchorfile>a03535.html</anchorfile>
      <anchor>ad696947e9da2987f0913113957b64162</anchor>
      <arglist>(double t) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual Vector3</type>
      <name>acceleration_n</name>
      <anchorfile>a03535.html</anchorfile>
      <anchor>ad590b2a67dc6c674d25cf39638849655</anchor>
      <arglist>(double t) const =0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::ScenarioRunner</name>
    <filename>a03547.html</filename>
    <member kind="function">
      <type>PreintegratedImuMeasurements</type>
      <name>integrate</name>
      <anchorfile>a03547.html</anchorfile>
      <anchor>a7018ff10b2c41e14df95200d25d87730</anchor>
      <arglist>(double T, const Bias &amp;estimatedBias=Bias(), bool corrupted=false) const</arglist>
    </member>
    <member kind="function">
      <type>NavState</type>
      <name>predict</name>
      <anchorfile>a03547.html</anchorfile>
      <anchor>a921c0bae7d51d2e613b767d2719e4ec5</anchor>
      <arglist>(const PreintegratedImuMeasurements &amp;pim, const Bias &amp;estimatedBias=Bias()) const</arglist>
    </member>
    <member kind="function">
      <type>Matrix9</type>
      <name>estimateCovariance</name>
      <anchorfile>a03547.html</anchorfile>
      <anchor>a7416290bec81103b2acde2962753fb45</anchor>
      <arglist>(double T, size_t N=1000, const Bias &amp;estimatedBias=Bias()) const</arglist>
    </member>
    <member kind="function">
      <type>Matrix6</type>
      <name>estimateNoiseCovariance</name>
      <anchorfile>a03547.html</anchorfile>
      <anchor>a4dc8a7308cf72e5ecea732570a5f84ec</anchor>
      <arglist>(size_t N=1000) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::Scheduler</name>
    <filename>a04231.html</filename>
    <base>gtsam::CSP</base>
    <member kind="function">
      <type></type>
      <name>Scheduler</name>
      <anchorfile>a04231.html</anchorfile>
      <anchor>a36761905f1f1c3187747226051ff0c5d</anchor>
      <arglist>(size_t maxNrStudents)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setAvailability</name>
      <anchorfile>a04231.html</anchorfile>
      <anchor>aa7133cdf3fdf88d1698e1e9d1f6406d2</anchor>
      <arglist>(const std::string &amp;available)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSlotsAvailable</name>
      <anchorfile>a04231.html</anchorfile>
      <anchor>a23d902eb0978fadec33cf71307dbae46</anchor>
      <arglist>(const std::vector&lt; double &gt; &amp;slotsAvailable)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Scheduler</name>
      <anchorfile>a04231.html</anchorfile>
      <anchor>a2280899b03244b6f6201defafb913a0b</anchor>
      <arglist>(size_t maxNrStudents, const std::string &amp;filename)</arglist>
    </member>
    <member kind="function">
      <type>const DiscreteKey &amp;</type>
      <name>key</name>
      <anchorfile>a04231.html</anchorfile>
      <anchor>a1d1bcdea94ffab129b4772fb78467bf9</anchor>
      <arglist>(size_t s, boost::optional&lt; size_t &gt; area=boost::none) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addStudent</name>
      <anchorfile>a04231.html</anchorfile>
      <anchor>ae9a9df7cb2cd893513707adb11557d3f</anchor>
      <arglist>(const std::string &amp;studentName, const std::string &amp;area1, const std::string &amp;area2, const std::string &amp;area3, const std::string &amp;advisor)</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>nrStudents</name>
      <anchorfile>a04231.html</anchorfile>
      <anchor>a7c71970a7f4311d26c572c072880e65d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addStudentSpecificConstraints</name>
      <anchorfile>a04231.html</anchorfile>
      <anchor>ad6aa6f9ff70d702fbdf36ca7cd03cdd7</anchor>
      <arglist>(size_t i, boost::optional&lt; size_t &gt; slot=boost::none)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>buildGraph</name>
      <anchorfile>a04231.html</anchorfile>
      <anchor>a921d55920a3c9649c0dee4abf780dad8</anchor>
      <arglist>(size_t mutexBound=7)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>a04231.html</anchorfile>
      <anchor>ab905cac0060875ff6fe9016b380482cb</anchor>
      <arglist>(const std::string &amp;s=&quot;Scheduler&quot;) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>printAssignment</name>
      <anchorfile>a04231.html</anchorfile>
      <anchor>ad377a75c9e70faa28d22cfdf640ab3f7</anchor>
      <arglist>(sharedValues assignment) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>printSpecial</name>
      <anchorfile>a04231.html</anchorfile>
      <anchor>aa86a12f820cb37cbae334cc59898bfb5</anchor>
      <arglist>(sharedValues assignment) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>accumulateStats</name>
      <anchorfile>a04231.html</anchorfile>
      <anchor>a6ba3138db8245f3c5e01c9769d01f3e9</anchor>
      <arglist>(sharedValues assignment, std::vector&lt; size_t &gt; &amp;stats) const</arglist>
    </member>
    <member kind="function">
      <type>DiscreteBayesNet::shared_ptr</type>
      <name>eliminate</name>
      <anchorfile>a04231.html</anchorfile>
      <anchor>a80147d73f0869ce751cafc0294e6a7e3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>sharedValues</type>
      <name>optimalAssignment</name>
      <anchorfile>a04231.html</anchorfile>
      <anchor>a7fddf54a28e9b1555500b15d2d0ffc8d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>sharedValues</type>
      <name>bestSchedule</name>
      <anchorfile>a04231.html</anchorfile>
      <anchor>ad9ed323020955936e3f9ed11696ee9dc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>sharedValues</type>
      <name>bestAssignment</name>
      <anchorfile>a04231.html</anchorfile>
      <anchor>a47ee777599bfbcd97f72cecbe2698f19</anchor>
      <arglist>(sharedValues bestSchedule) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::SDGraph</name>
    <filename>a02975.html</filename>
    <templarg>KEY</templarg>
  </compound>
  <compound kind="struct">
    <name>gtsam::SfM_data</name>
    <filename>a03975.html</filename>
    <member kind="function">
      <type>size_t</type>
      <name>number_cameras</name>
      <anchorfile>a03975.html</anchorfile>
      <anchor>a549131216e22d2be6007d0cfd8882924</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>number_tracks</name>
      <anchorfile>a03975.html</anchorfile>
      <anchor>a5a1d379fd559b311b0f080fa21b6c564</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; SfM_Camera &gt;</type>
      <name>cameras</name>
      <anchorfile>a03975.html</anchorfile>
      <anchor>a55347b51c4b7dd02f59f171fd2dcbcb8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; SfM_Track &gt;</type>
      <name>tracks</name>
      <anchorfile>a03975.html</anchorfile>
      <anchor>a2e55cfa83dd822a61fdfd2fd4ae47ed4</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>gtsam::SfM_Track</name>
    <filename>a03971.html</filename>
    <member kind="variable">
      <type>Point3</type>
      <name>p</name>
      <anchorfile>a03971.html</anchorfile>
      <anchor>a3b0749667c1a501b3864877e48a5ae00</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>float</type>
      <name>b</name>
      <anchorfile>a03971.html</anchorfile>
      <anchor>aab5f19d4369af681c38fd338f8292c86</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; SfM_Measurement &gt;</type>
      <name>measurements</name>
      <anchorfile>a03971.html</anchorfile>
      <anchor>ae34699ce69a1ecaafb014daf95616da6</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::SGraph</name>
    <filename>a02979.html</filename>
    <templarg>KEY</templarg>
  </compound>
  <compound kind="class">
    <name>gtsam::Signature</name>
    <filename>a02455.html</filename>
    <member kind="function">
      <type></type>
      <name>Signature</name>
      <anchorfile>a02455.html</anchorfile>
      <anchor>a3ad921ac92454eb5397709294082ce8c</anchor>
      <arglist>(const DiscreteKey &amp;key)</arglist>
    </member>
    <member kind="function">
      <type>const DiscreteKey &amp;</type>
      <name>key</name>
      <anchorfile>a02455.html</anchorfile>
      <anchor>a4667d2806935478068b28f2da5126aa3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const DiscreteKeys &amp;</type>
      <name>parents</name>
      <anchorfile>a02455.html</anchorfile>
      <anchor>a8304d79d74ff589e9f9233cead4817e2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>DiscreteKeys</type>
      <name>discreteKeysParentsFirst</name>
      <anchorfile>a02455.html</anchorfile>
      <anchor>ab6cf3e2e729c618ceb89df50b1e033fa</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>KeyVector</type>
      <name>indices</name>
      <anchorfile>a02455.html</anchorfile>
      <anchor>adbe99487fcc5aed360e16ea58599ad0c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Signature &amp;</type>
      <name>operator,</name>
      <anchorfile>a02455.html</anchorfile>
      <anchor>a7c6858868dbc60a707ec686b14263a7a</anchor>
      <arglist>(const DiscreteKey &amp;parent)</arglist>
    </member>
    <member kind="function">
      <type>Signature &amp;</type>
      <name>operator=</name>
      <anchorfile>a02455.html</anchorfile>
      <anchor>a7f92248d9f002bbc34942db22580ed76</anchor>
      <arglist>(const std::string &amp;spec)</arglist>
    </member>
    <member kind="function">
      <type>Signature &amp;</type>
      <name>operator=</name>
      <anchorfile>a02455.html</anchorfile>
      <anchor>a9ec0c17cbe7f60e4497e5eace4d254cb</anchor>
      <arglist>(const Table &amp;table)</arglist>
    </member>
    <member kind="typedef">
      <type>std::vector&lt; double &gt;</type>
      <name>Row</name>
      <anchorfile>a02455.html</anchorfile>
      <anchor>a058b129adfd1cdb887c88efedf2c8ca3</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>GTSAM_EXPORT friend std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a02455.html</anchorfile>
      <anchor>a0fc340cc571b6ee412af16e488ba62f5</anchor>
      <arglist>(std::ostream &amp;os, const Signature &amp;s)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::SimpleCamera</name>
    <filename>a02779.html</filename>
    <base>gtsam::PinholeCamera</base>
    <member kind="function">
      <type></type>
      <name>SimpleCamera</name>
      <anchorfile>a02779.html</anchorfile>
      <anchor>ac96a264cb6c1127b69347e08e62dedfd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SimpleCamera</name>
      <anchorfile>a02779.html</anchorfile>
      <anchor>a94d6c9f631bb6bc5f05617161abe14a4</anchor>
      <arglist>(const Pose3 &amp;pose)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SimpleCamera</name>
      <anchorfile>a02779.html</anchorfile>
      <anchor>a4d43dbc0d5e5a037024369c5d25ab178</anchor>
      <arglist>(const Pose3 &amp;pose, const Cal3_S2 &amp;K)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static SimpleCamera</type>
      <name>Level</name>
      <anchorfile>a02779.html</anchorfile>
      <anchor>a4253c833235eb8271180cb7166cacfa2</anchor>
      <arglist>(const Cal3_S2 &amp;K, const Pose2 &amp;pose2, double height)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static SimpleCamera</type>
      <name>Level</name>
      <anchorfile>a02779.html</anchorfile>
      <anchor>a981a0b9c2401ae9ccf95ca72634ad658</anchor>
      <arglist>(const Pose2 &amp;pose2, double height)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static SimpleCamera</type>
      <name>Lookat</name>
      <anchorfile>a02779.html</anchorfile>
      <anchor>aa882a5c6cacf9fe71e1822e5dcbd8c74</anchor>
      <arglist>(const Point3 &amp;eye, const Point3 &amp;target, const Point3 &amp;upVector, const Cal3_S2 &amp;K=Cal3_S2())</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SimpleCamera</name>
      <anchorfile>a02779.html</anchorfile>
      <anchor>ad042a9674d892bd4d09ac5d8f13bea91</anchor>
      <arglist>(const Vector &amp;v)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SimpleCamera</name>
      <anchorfile>a02779.html</anchorfile>
      <anchor>a0d237f97688f53473c880af7f2c42bd0</anchor>
      <arglist>(const Vector &amp;v, const Vector &amp;K)</arglist>
    </member>
    <member kind="function">
      <type>SimpleCamera::shared_ptr</type>
      <name>clone</name>
      <anchorfile>a02779.html</anchorfile>
      <anchor>af0b28c2a5237b156dd21231b14ca78d5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>SimpleCamera</type>
      <name>retract</name>
      <anchorfile>a02779.html</anchorfile>
      <anchor>a3a21869c64bd304ac14ffb603c6462c5</anchor>
      <arglist>(const Vector &amp;d) const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SimpleCamera</name>
      <anchorfile>a02779.html</anchorfile>
      <anchor>ac96a264cb6c1127b69347e08e62dedfd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SimpleCamera</name>
      <anchorfile>a02779.html</anchorfile>
      <anchor>a94d6c9f631bb6bc5f05617161abe14a4</anchor>
      <arglist>(const Pose3 &amp;pose)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SimpleCamera</name>
      <anchorfile>a02779.html</anchorfile>
      <anchor>a4d43dbc0d5e5a037024369c5d25ab178</anchor>
      <arglist>(const Pose3 &amp;pose, const Cal3_S2 &amp;K)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SimpleCamera</name>
      <anchorfile>a02779.html</anchorfile>
      <anchor>ad042a9674d892bd4d09ac5d8f13bea91</anchor>
      <arglist>(const Vector &amp;v)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SimpleCamera</name>
      <anchorfile>a02779.html</anchorfile>
      <anchor>a0d237f97688f53473c880af7f2c42bd0</anchor>
      <arglist>(const Vector &amp;v, const Vector &amp;K)</arglist>
    </member>
    <member kind="function">
      <type>SimpleCamera::shared_ptr</type>
      <name>clone</name>
      <anchorfile>a02779.html</anchorfile>
      <anchor>af0b28c2a5237b156dd21231b14ca78d5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>SimpleCamera</type>
      <name>retract</name>
      <anchorfile>a02779.html</anchorfile>
      <anchor>a3a21869c64bd304ac14ffb603c6462c5</anchor>
      <arglist>(const Vector &amp;d) const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static SimpleCamera</type>
      <name>Level</name>
      <anchorfile>a02779.html</anchorfile>
      <anchor>a4253c833235eb8271180cb7166cacfa2</anchor>
      <arglist>(const Cal3_S2 &amp;K, const Pose2 &amp;pose2, double height)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static SimpleCamera</type>
      <name>Level</name>
      <anchorfile>a02779.html</anchorfile>
      <anchor>a981a0b9c2401ae9ccf95ca72634ad658</anchor>
      <arglist>(const Pose2 &amp;pose2, double height)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static SimpleCamera</type>
      <name>Lookat</name>
      <anchorfile>a02779.html</anchorfile>
      <anchor>aa882a5c6cacf9fe71e1822e5dcbd8c74</anchor>
      <arglist>(const Point3 &amp;eye, const Point3 &amp;target, const Point3 &amp;upVector, const Cal3_S2 &amp;K=Cal3_S2())</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::SimPolygon2D</name>
    <filename>a04679.html</filename>
  </compound>
  <compound kind="class">
    <name>gtsam::SimPolygon2DVector</name>
    <filename>a04687.html</filename>
  </compound>
  <compound kind="class">
    <name>gtsam::SimWall2D</name>
    <filename>a04675.html</filename>
  </compound>
  <compound kind="class">
    <name>gtsam::SimWall2DVector</name>
    <filename>a04683.html</filename>
  </compound>
  <compound kind="class">
    <name>gtsam::SingleValue</name>
    <filename>a04239.html</filename>
    <base>gtsam::Constraint</base>
    <member kind="function">
      <type></type>
      <name>SingleValue</name>
      <anchorfile>a04239.html</anchorfile>
      <anchor>a2acd3b9fa0cd3477a5798635897faf42</anchor>
      <arglist>(Key key, size_t n, size_t value)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SingleValue</name>
      <anchorfile>a04239.html</anchorfile>
      <anchor>a5ebc0644c4e787c77db513e4d803564b</anchor>
      <arglist>(const DiscreteKey &amp;dkey, size_t value)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>equals</name>
      <anchorfile>a04239.html</anchorfile>
      <anchor>a2d2ed2cb983a2aae7034d12ec0b8519a</anchor>
      <arglist>(const DiscreteFactor &amp;other, double tol) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>operator()</name>
      <anchorfile>a04239.html</anchorfile>
      <anchor>a34ec67ced9ed8872dd2d23b5dffa15e6</anchor>
      <arglist>(const Values &amp;values) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual DecisionTreeFactor</type>
      <name>toDecisionTreeFactor</name>
      <anchorfile>a04239.html</anchorfile>
      <anchor>ac946cf8d2ab9468d66df134b3f70e432</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual DecisionTreeFactor</type>
      <name>operator *</name>
      <anchorfile>a04239.html</anchorfile>
      <anchor>a30a0dda7363638a21d85d1b66e60c02a</anchor>
      <arglist>(const DecisionTreeFactor &amp;f) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Constraint::shared_ptr</type>
      <name>partiallyApply</name>
      <anchorfile>a04239.html</anchorfile>
      <anchor>a3100ea99b790986118d291a7b3968dc8</anchor>
      <arglist>(const Values &amp;values) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Constraint::shared_ptr</type>
      <name>partiallyApply</name>
      <anchorfile>a04239.html</anchorfile>
      <anchor>aff0660ac1291ddf3e25e3bb398990a45</anchor>
      <arglist>(const std::vector&lt; Domain &gt; &amp;domains) const</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>gtsam::SlotEntry</name>
    <filename>a03359.html</filename>
  </compound>
  <compound kind="class">
    <name>gtsam::SmartFactorBase</name>
    <filename>a04083.html</filename>
    <templarg>CAMERA</templarg>
    <base>gtsam::NonlinearFactor</base>
    <member kind="variable" protection="protected">
      <type>boost::optional&lt; Pose3 &gt;</type>
      <name>body_P_sensor_</name>
      <anchorfile>a04083.html</anchorfile>
      <anchor>ad8b373cb10b9a3e4c13a37925821e64a</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SmartFactorBase</name>
      <anchorfile>a04083.html</anchorfile>
      <anchor>a9e455b56e44697ae925f0d1e7569e5c6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SmartFactorBase</name>
      <anchorfile>a04083.html</anchorfile>
      <anchor>ab0b82f1117c0a27386839f27366833cb</anchor>
      <arglist>(const SharedNoiseModel &amp;sharedNoiseModel, boost::optional&lt; Pose3 &gt; body_P_sensor=boost::none, size_t expectedNumberCameras=10)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~SmartFactorBase</name>
      <anchorfile>a04083.html</anchorfile>
      <anchor>afa6e99a72a71830f143dd33ce0534c23</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add</name>
      <anchorfile>a04083.html</anchorfile>
      <anchor>aa74388749b1bd85b9bb24325d34fdbaf</anchor>
      <arglist>(const Z &amp;measured_i, const Key &amp;cameraKey_i)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add</name>
      <anchorfile>a04083.html</anchorfile>
      <anchor>a4433b8a8ef836d13e2f569bbf88fb2be</anchor>
      <arglist>(ZVector &amp;measurements, KeyVector &amp;cameraKeys)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add</name>
      <anchorfile>a04083.html</anchorfile>
      <anchor>ab3eccd6bab18b357661119a76e98db0a</anchor>
      <arglist>(const SFM_TRACK &amp;trackToAdd)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual size_t</type>
      <name>dim</name>
      <anchorfile>a04083.html</anchorfile>
      <anchor>a3987ed13870d27ee91e9fd001c41090e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const ZVector &amp;</type>
      <name>measured</name>
      <anchorfile>a04083.html</anchorfile>
      <anchor>a9aee3ac05e1b78119038bcd8c53bb14f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Cameras</type>
      <name>cameras</name>
      <anchorfile>a04083.html</anchorfile>
      <anchor>a5ffab1f3006c13bdc7efe7ce9a2d7d2f</anchor>
      <arglist>(const Values &amp;values) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>a04083.html</anchorfile>
      <anchor>a110a25fac9ce512b7ad00b239a5adbe8</anchor>
      <arglist>(const std::string &amp;s=&quot;&quot;, const KeyFormatter &amp;keyFormatter=DefaultKeyFormatter) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>equals</name>
      <anchorfile>a04083.html</anchorfile>
      <anchor>aa0e036e2bea31f8a47ed3253f57f47b7</anchor>
      <arglist>(const NonlinearFactor &amp;p, double tol=1e-9) const</arglist>
    </member>
    <member kind="function">
      <type>Vector</type>
      <name>unwhitenedError</name>
      <anchorfile>a04083.html</anchorfile>
      <anchor>a9cd9089c763cae145fb0643f406a13b2</anchor>
      <arglist>(const Cameras &amp;cameras, const POINT &amp;point, boost::optional&lt; typename Cameras::FBlocks &amp; &gt; Fs=boost::none, boost::optional&lt; Matrix &amp; &gt; E=boost::none) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>correctForMissingMeasurements</name>
      <anchorfile>a04083.html</anchorfile>
      <anchor>adbf55b456c9d393f5fa8066fd6f5cebe</anchor>
      <arglist>(const Cameras &amp;cameras, Vector &amp;ue, boost::optional&lt; typename Cameras::FBlocks &amp; &gt; Fs=boost::none, boost::optional&lt; Matrix &amp; &gt; E=boost::none) const</arglist>
    </member>
    <member kind="function">
      <type>Vector</type>
      <name>whitenedError</name>
      <anchorfile>a04083.html</anchorfile>
      <anchor>a528b1a2f154f65657c264d9e265dc3f3</anchor>
      <arglist>(const Cameras &amp;cameras, const POINT &amp;point) const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>totalReprojectionError</name>
      <anchorfile>a04083.html</anchorfile>
      <anchor>a882db94ae4f6d76b2ead0d9218676bc5</anchor>
      <arglist>(const Cameras &amp;cameras, const POINT &amp;point) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>computeJacobians</name>
      <anchorfile>a04083.html</anchorfile>
      <anchor>a0191de8c3795fce5a202b8205f842337</anchor>
      <arglist>(FBlocks &amp;Fs, Matrix &amp;E, Vector &amp;b, const Cameras &amp;cameras, const POINT &amp;point) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>computeJacobiansSVD</name>
      <anchorfile>a04083.html</anchorfile>
      <anchor>a9531551659920656c1c2c350b901af9a</anchor>
      <arglist>(FBlocks &amp;Fs, Matrix &amp;Enull, Vector &amp;b, const Cameras &amp;cameras, const POINT &amp;point) const</arglist>
    </member>
    <member kind="function">
      <type>boost::shared_ptr&lt; RegularHessianFactor&lt; Dim &gt; &gt;</type>
      <name>createHessianFactor</name>
      <anchorfile>a04083.html</anchorfile>
      <anchor>a7bf59d2255ffbe15ddbc2f9ba3e4790d</anchor>
      <arglist>(const Cameras &amp;cameras, const Point3 &amp;point, const double lambda=0.0, bool diagonalDamping=false) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>updateAugmentedHessian</name>
      <anchorfile>a04083.html</anchorfile>
      <anchor>a2718e23a31d4df8d3bcdc80472a2f64e</anchor>
      <arglist>(const Cameras &amp;cameras, const Point3 &amp;point, const double lambda, bool diagonalDamping, SymmetricBlockMatrix &amp;augmentedHessian, const KeyVector allKeys) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>whitenJacobians</name>
      <anchorfile>a04083.html</anchorfile>
      <anchor>aa7cacb92b9bf0af24c701d11aa6c6255</anchor>
      <arglist>(FBlocks &amp;F, Matrix &amp;E, Vector &amp;b) const</arglist>
    </member>
    <member kind="function">
      <type>boost::shared_ptr&lt; RegularImplicitSchurFactor&lt; CAMERA &gt; &gt;</type>
      <name>createRegularImplicitSchurFactor</name>
      <anchorfile>a04083.html</anchorfile>
      <anchor>abe9ec0642634075835523cba75bc0fec</anchor>
      <arglist>(const Cameras &amp;cameras, const Point3 &amp;point, double lambda=0.0, bool diagonalDamping=false) const</arglist>
    </member>
    <member kind="function">
      <type>boost::shared_ptr&lt; JacobianFactorQ&lt; Dim, ZDim &gt; &gt;</type>
      <name>createJacobianQFactor</name>
      <anchorfile>a04083.html</anchorfile>
      <anchor>a93d8f28d2115d31ca762a315c16e9606</anchor>
      <arglist>(const Cameras &amp;cameras, const Point3 &amp;point, double lambda=0.0, bool diagonalDamping=false) const</arglist>
    </member>
    <member kind="function">
      <type>boost::shared_ptr&lt; JacobianFactor &gt;</type>
      <name>createJacobianSVDFactor</name>
      <anchorfile>a04083.html</anchorfile>
      <anchor>aecb1ec46b35fecbdbe6d4d844c34af02</anchor>
      <arglist>(const Cameras &amp;cameras, const Point3 &amp;point, double lambda=0.0) const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Matrix</type>
      <name>PointCov</name>
      <anchorfile>a04083.html</anchorfile>
      <anchor>abd92a0662759d0ecf69a8749c88b9798</anchor>
      <arglist>(Matrix &amp;E)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>FillDiagonalF</name>
      <anchorfile>a04083.html</anchorfile>
      <anchor>a69e2d616ed38d08c1ce16150e95475c0</anchor>
      <arglist>(const FBlocks &amp;Fs, Matrix &amp;F)</arglist>
    </member>
    <member kind="variable">
      <type>EIGEN_MAKE_ALIGNED_OPERATOR_NEW typedef boost::shared_ptr&lt; This &gt;</type>
      <name>shared_ptr</name>
      <anchorfile>a04083.html</anchorfile>
      <anchor>affead32289c802516860047d57fd74d2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>Dim</name>
      <anchorfile>a04083.html</anchorfile>
      <anchor>a407fa000777864d9142f3e3742f7e9cd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>ZDim</name>
      <anchorfile>a04083.html</anchorfile>
      <anchor>ae3609b3615ce18038ddcbf979f8f13df</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>CameraSet&lt; CAMERA &gt;</type>
      <name>Cameras</name>
      <anchorfile>a04083.html</anchorfile>
      <anchor>af404fbccc4a4d53232f67a98d0e5a61b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>SharedIsotropic</type>
      <name>noiseModel_</name>
      <anchorfile>a04083.html</anchorfile>
      <anchor>a39a7aa087ac63512c5cccf828b90b516</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ZVector</type>
      <name>measured_</name>
      <anchorfile>a04083.html</anchorfile>
      <anchor>a9560247c976b32599247fb7f738a9211</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>boost::optional&lt; Pose3 &gt;</type>
      <name>body_P_sensor_</name>
      <anchorfile>a04083.html</anchorfile>
      <anchor>ad8b373cb10b9a3e4c13a37925821e64a</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>boost::serialization::access</name>
      <anchorfile>a04083.html</anchorfile>
      <anchor>ac98d07dd8f7b70e16ccb9a01abf56b9c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SmartFactorBase&lt; PinholePose&lt; CALIBRATION &gt; &gt;</name>
    <filename>a04083.html</filename>
    <base>gtsam::NonlinearFactor</base>
    <member kind="variable" protection="protected">
      <type>boost::optional&lt; Pose3 &gt;</type>
      <name>body_P_sensor_</name>
      <anchorfile>a04083.html</anchorfile>
      <anchor>ad8b373cb10b9a3e4c13a37925821e64a</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SmartFactorBase</name>
      <anchorfile>a04083.html</anchorfile>
      <anchor>a9e455b56e44697ae925f0d1e7569e5c6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SmartFactorBase</name>
      <anchorfile>a04083.html</anchorfile>
      <anchor>ab0b82f1117c0a27386839f27366833cb</anchor>
      <arglist>(const SharedNoiseModel &amp;sharedNoiseModel, boost::optional&lt; Pose3 &gt; body_P_sensor=boost::none, size_t expectedNumberCameras=10)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~SmartFactorBase</name>
      <anchorfile>a04083.html</anchorfile>
      <anchor>afa6e99a72a71830f143dd33ce0534c23</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add</name>
      <anchorfile>a04083.html</anchorfile>
      <anchor>aa74388749b1bd85b9bb24325d34fdbaf</anchor>
      <arglist>(const Z &amp;measured_i, const Key &amp;cameraKey_i)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add</name>
      <anchorfile>a04083.html</anchorfile>
      <anchor>a4433b8a8ef836d13e2f569bbf88fb2be</anchor>
      <arglist>(ZVector &amp;measurements, KeyVector &amp;cameraKeys)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add</name>
      <anchorfile>a04083.html</anchorfile>
      <anchor>ab3eccd6bab18b357661119a76e98db0a</anchor>
      <arglist>(const SFM_TRACK &amp;trackToAdd)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual size_t</type>
      <name>dim</name>
      <anchorfile>a04083.html</anchorfile>
      <anchor>a3987ed13870d27ee91e9fd001c41090e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const ZVector &amp;</type>
      <name>measured</name>
      <anchorfile>a04083.html</anchorfile>
      <anchor>a9aee3ac05e1b78119038bcd8c53bb14f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Cameras</type>
      <name>cameras</name>
      <anchorfile>a04083.html</anchorfile>
      <anchor>a5ffab1f3006c13bdc7efe7ce9a2d7d2f</anchor>
      <arglist>(const Values &amp;values) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>a04083.html</anchorfile>
      <anchor>a110a25fac9ce512b7ad00b239a5adbe8</anchor>
      <arglist>(const std::string &amp;s=&quot;&quot;, const KeyFormatter &amp;keyFormatter=DefaultKeyFormatter) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>equals</name>
      <anchorfile>a04083.html</anchorfile>
      <anchor>aa0e036e2bea31f8a47ed3253f57f47b7</anchor>
      <arglist>(const NonlinearFactor &amp;p, double tol=1e-9) const</arglist>
    </member>
    <member kind="function">
      <type>Vector</type>
      <name>unwhitenedError</name>
      <anchorfile>a04083.html</anchorfile>
      <anchor>a9cd9089c763cae145fb0643f406a13b2</anchor>
      <arglist>(const Cameras &amp;cameras, const POINT &amp;point, boost::optional&lt; typename Cameras::FBlocks &amp; &gt; Fs=boost::none, boost::optional&lt; Matrix &amp; &gt; E=boost::none) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>correctForMissingMeasurements</name>
      <anchorfile>a04083.html</anchorfile>
      <anchor>adbf55b456c9d393f5fa8066fd6f5cebe</anchor>
      <arglist>(const Cameras &amp;cameras, Vector &amp;ue, boost::optional&lt; typename Cameras::FBlocks &amp; &gt; Fs=boost::none, boost::optional&lt; Matrix &amp; &gt; E=boost::none) const</arglist>
    </member>
    <member kind="function">
      <type>Vector</type>
      <name>whitenedError</name>
      <anchorfile>a04083.html</anchorfile>
      <anchor>a528b1a2f154f65657c264d9e265dc3f3</anchor>
      <arglist>(const Cameras &amp;cameras, const POINT &amp;point) const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>totalReprojectionError</name>
      <anchorfile>a04083.html</anchorfile>
      <anchor>a882db94ae4f6d76b2ead0d9218676bc5</anchor>
      <arglist>(const Cameras &amp;cameras, const POINT &amp;point) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>computeJacobians</name>
      <anchorfile>a04083.html</anchorfile>
      <anchor>a0191de8c3795fce5a202b8205f842337</anchor>
      <arglist>(FBlocks &amp;Fs, Matrix &amp;E, Vector &amp;b, const Cameras &amp;cameras, const POINT &amp;point) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>computeJacobiansSVD</name>
      <anchorfile>a04083.html</anchorfile>
      <anchor>a9531551659920656c1c2c350b901af9a</anchor>
      <arglist>(FBlocks &amp;Fs, Matrix &amp;Enull, Vector &amp;b, const Cameras &amp;cameras, const POINT &amp;point) const</arglist>
    </member>
    <member kind="function">
      <type>boost::shared_ptr&lt; RegularHessianFactor&lt; Dim &gt; &gt;</type>
      <name>createHessianFactor</name>
      <anchorfile>a04083.html</anchorfile>
      <anchor>a7bf59d2255ffbe15ddbc2f9ba3e4790d</anchor>
      <arglist>(const Cameras &amp;cameras, const Point3 &amp;point, const double lambda=0.0, bool diagonalDamping=false) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>updateAugmentedHessian</name>
      <anchorfile>a04083.html</anchorfile>
      <anchor>a2718e23a31d4df8d3bcdc80472a2f64e</anchor>
      <arglist>(const Cameras &amp;cameras, const Point3 &amp;point, const double lambda, bool diagonalDamping, SymmetricBlockMatrix &amp;augmentedHessian, const KeyVector allKeys) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>whitenJacobians</name>
      <anchorfile>a04083.html</anchorfile>
      <anchor>aa7cacb92b9bf0af24c701d11aa6c6255</anchor>
      <arglist>(FBlocks &amp;F, Matrix &amp;E, Vector &amp;b) const</arglist>
    </member>
    <member kind="function">
      <type>boost::shared_ptr&lt; RegularImplicitSchurFactor&lt; PinholePose&lt; CALIBRATION &gt; &gt; &gt;</type>
      <name>createRegularImplicitSchurFactor</name>
      <anchorfile>a04083.html</anchorfile>
      <anchor>abe9ec0642634075835523cba75bc0fec</anchor>
      <arglist>(const Cameras &amp;cameras, const Point3 &amp;point, double lambda=0.0, bool diagonalDamping=false) const</arglist>
    </member>
    <member kind="function">
      <type>boost::shared_ptr&lt; JacobianFactorQ&lt; Dim, ZDim &gt; &gt;</type>
      <name>createJacobianQFactor</name>
      <anchorfile>a04083.html</anchorfile>
      <anchor>a93d8f28d2115d31ca762a315c16e9606</anchor>
      <arglist>(const Cameras &amp;cameras, const Point3 &amp;point, double lambda=0.0, bool diagonalDamping=false) const</arglist>
    </member>
    <member kind="function">
      <type>boost::shared_ptr&lt; JacobianFactor &gt;</type>
      <name>createJacobianSVDFactor</name>
      <anchorfile>a04083.html</anchorfile>
      <anchor>aecb1ec46b35fecbdbe6d4d844c34af02</anchor>
      <arglist>(const Cameras &amp;cameras, const Point3 &amp;point, double lambda=0.0) const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Matrix</type>
      <name>PointCov</name>
      <anchorfile>a04083.html</anchorfile>
      <anchor>abd92a0662759d0ecf69a8749c88b9798</anchor>
      <arglist>(Matrix &amp;E)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>FillDiagonalF</name>
      <anchorfile>a04083.html</anchorfile>
      <anchor>a69e2d616ed38d08c1ce16150e95475c0</anchor>
      <arglist>(const FBlocks &amp;Fs, Matrix &amp;F)</arglist>
    </member>
    <member kind="variable">
      <type>EIGEN_MAKE_ALIGNED_OPERATOR_NEW typedef boost::shared_ptr&lt; This &gt;</type>
      <name>shared_ptr</name>
      <anchorfile>a04083.html</anchorfile>
      <anchor>affead32289c802516860047d57fd74d2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>Dim</name>
      <anchorfile>a04083.html</anchorfile>
      <anchor>a407fa000777864d9142f3e3742f7e9cd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>ZDim</name>
      <anchorfile>a04083.html</anchorfile>
      <anchor>ae3609b3615ce18038ddcbf979f8f13df</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>CameraSet&lt; PinholePose&lt; CALIBRATION &gt; &gt;</type>
      <name>Cameras</name>
      <anchorfile>a04083.html</anchorfile>
      <anchor>af404fbccc4a4d53232f67a98d0e5a61b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>SharedIsotropic</type>
      <name>noiseModel_</name>
      <anchorfile>a04083.html</anchorfile>
      <anchor>a39a7aa087ac63512c5cccf828b90b516</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ZVector</type>
      <name>measured_</name>
      <anchorfile>a04083.html</anchorfile>
      <anchor>a9560247c976b32599247fb7f738a9211</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>boost::optional&lt; Pose3 &gt;</type>
      <name>body_P_sensor_</name>
      <anchorfile>a04083.html</anchorfile>
      <anchor>ad8b373cb10b9a3e4c13a37925821e64a</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>boost::serialization::access</name>
      <anchorfile>a04083.html</anchorfile>
      <anchor>ac98d07dd8f7b70e16ccb9a01abf56b9c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SmartFactorBase&lt; StereoCamera &gt;</name>
    <filename>a04083.html</filename>
    <base>gtsam::NonlinearFactor</base>
    <member kind="variable" protection="protected">
      <type>boost::optional&lt; Pose3 &gt;</type>
      <name>body_P_sensor_</name>
      <anchorfile>a04083.html</anchorfile>
      <anchor>ad8b373cb10b9a3e4c13a37925821e64a</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SmartFactorBase</name>
      <anchorfile>a04083.html</anchorfile>
      <anchor>a9e455b56e44697ae925f0d1e7569e5c6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SmartFactorBase</name>
      <anchorfile>a04083.html</anchorfile>
      <anchor>ab0b82f1117c0a27386839f27366833cb</anchor>
      <arglist>(const SharedNoiseModel &amp;sharedNoiseModel, boost::optional&lt; Pose3 &gt; body_P_sensor=boost::none, size_t expectedNumberCameras=10)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~SmartFactorBase</name>
      <anchorfile>a04083.html</anchorfile>
      <anchor>afa6e99a72a71830f143dd33ce0534c23</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add</name>
      <anchorfile>a04083.html</anchorfile>
      <anchor>aa74388749b1bd85b9bb24325d34fdbaf</anchor>
      <arglist>(const Z &amp;measured_i, const Key &amp;cameraKey_i)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add</name>
      <anchorfile>a04083.html</anchorfile>
      <anchor>a4433b8a8ef836d13e2f569bbf88fb2be</anchor>
      <arglist>(ZVector &amp;measurements, KeyVector &amp;cameraKeys)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add</name>
      <anchorfile>a04083.html</anchorfile>
      <anchor>ab3eccd6bab18b357661119a76e98db0a</anchor>
      <arglist>(const SFM_TRACK &amp;trackToAdd)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual size_t</type>
      <name>dim</name>
      <anchorfile>a04083.html</anchorfile>
      <anchor>a3987ed13870d27ee91e9fd001c41090e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const ZVector &amp;</type>
      <name>measured</name>
      <anchorfile>a04083.html</anchorfile>
      <anchor>a9aee3ac05e1b78119038bcd8c53bb14f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Cameras</type>
      <name>cameras</name>
      <anchorfile>a04083.html</anchorfile>
      <anchor>a5ffab1f3006c13bdc7efe7ce9a2d7d2f</anchor>
      <arglist>(const Values &amp;values) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>a04083.html</anchorfile>
      <anchor>a110a25fac9ce512b7ad00b239a5adbe8</anchor>
      <arglist>(const std::string &amp;s=&quot;&quot;, const KeyFormatter &amp;keyFormatter=DefaultKeyFormatter) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>equals</name>
      <anchorfile>a04083.html</anchorfile>
      <anchor>aa0e036e2bea31f8a47ed3253f57f47b7</anchor>
      <arglist>(const NonlinearFactor &amp;p, double tol=1e-9) const</arglist>
    </member>
    <member kind="function">
      <type>Vector</type>
      <name>unwhitenedError</name>
      <anchorfile>a04083.html</anchorfile>
      <anchor>a9cd9089c763cae145fb0643f406a13b2</anchor>
      <arglist>(const Cameras &amp;cameras, const POINT &amp;point, boost::optional&lt; typename Cameras::FBlocks &amp; &gt; Fs=boost::none, boost::optional&lt; Matrix &amp; &gt; E=boost::none) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>correctForMissingMeasurements</name>
      <anchorfile>a04083.html</anchorfile>
      <anchor>adbf55b456c9d393f5fa8066fd6f5cebe</anchor>
      <arglist>(const Cameras &amp;cameras, Vector &amp;ue, boost::optional&lt; typename Cameras::FBlocks &amp; &gt; Fs=boost::none, boost::optional&lt; Matrix &amp; &gt; E=boost::none) const</arglist>
    </member>
    <member kind="function">
      <type>Vector</type>
      <name>whitenedError</name>
      <anchorfile>a04083.html</anchorfile>
      <anchor>a528b1a2f154f65657c264d9e265dc3f3</anchor>
      <arglist>(const Cameras &amp;cameras, const POINT &amp;point) const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>totalReprojectionError</name>
      <anchorfile>a04083.html</anchorfile>
      <anchor>a882db94ae4f6d76b2ead0d9218676bc5</anchor>
      <arglist>(const Cameras &amp;cameras, const POINT &amp;point) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>computeJacobians</name>
      <anchorfile>a04083.html</anchorfile>
      <anchor>a0191de8c3795fce5a202b8205f842337</anchor>
      <arglist>(FBlocks &amp;Fs, Matrix &amp;E, Vector &amp;b, const Cameras &amp;cameras, const POINT &amp;point) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>computeJacobiansSVD</name>
      <anchorfile>a04083.html</anchorfile>
      <anchor>a9531551659920656c1c2c350b901af9a</anchor>
      <arglist>(FBlocks &amp;Fs, Matrix &amp;Enull, Vector &amp;b, const Cameras &amp;cameras, const POINT &amp;point) const</arglist>
    </member>
    <member kind="function">
      <type>boost::shared_ptr&lt; RegularHessianFactor&lt; Dim &gt; &gt;</type>
      <name>createHessianFactor</name>
      <anchorfile>a04083.html</anchorfile>
      <anchor>a7bf59d2255ffbe15ddbc2f9ba3e4790d</anchor>
      <arglist>(const Cameras &amp;cameras, const Point3 &amp;point, const double lambda=0.0, bool diagonalDamping=false) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>updateAugmentedHessian</name>
      <anchorfile>a04083.html</anchorfile>
      <anchor>a2718e23a31d4df8d3bcdc80472a2f64e</anchor>
      <arglist>(const Cameras &amp;cameras, const Point3 &amp;point, const double lambda, bool diagonalDamping, SymmetricBlockMatrix &amp;augmentedHessian, const KeyVector allKeys) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>whitenJacobians</name>
      <anchorfile>a04083.html</anchorfile>
      <anchor>aa7cacb92b9bf0af24c701d11aa6c6255</anchor>
      <arglist>(FBlocks &amp;F, Matrix &amp;E, Vector &amp;b) const</arglist>
    </member>
    <member kind="function">
      <type>boost::shared_ptr&lt; RegularImplicitSchurFactor&lt; StereoCamera &gt; &gt;</type>
      <name>createRegularImplicitSchurFactor</name>
      <anchorfile>a04083.html</anchorfile>
      <anchor>abe9ec0642634075835523cba75bc0fec</anchor>
      <arglist>(const Cameras &amp;cameras, const Point3 &amp;point, double lambda=0.0, bool diagonalDamping=false) const</arglist>
    </member>
    <member kind="function">
      <type>boost::shared_ptr&lt; JacobianFactorQ&lt; Dim, ZDim &gt; &gt;</type>
      <name>createJacobianQFactor</name>
      <anchorfile>a04083.html</anchorfile>
      <anchor>a93d8f28d2115d31ca762a315c16e9606</anchor>
      <arglist>(const Cameras &amp;cameras, const Point3 &amp;point, double lambda=0.0, bool diagonalDamping=false) const</arglist>
    </member>
    <member kind="function">
      <type>boost::shared_ptr&lt; JacobianFactor &gt;</type>
      <name>createJacobianSVDFactor</name>
      <anchorfile>a04083.html</anchorfile>
      <anchor>aecb1ec46b35fecbdbe6d4d844c34af02</anchor>
      <arglist>(const Cameras &amp;cameras, const Point3 &amp;point, double lambda=0.0) const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Matrix</type>
      <name>PointCov</name>
      <anchorfile>a04083.html</anchorfile>
      <anchor>abd92a0662759d0ecf69a8749c88b9798</anchor>
      <arglist>(Matrix &amp;E)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>FillDiagonalF</name>
      <anchorfile>a04083.html</anchorfile>
      <anchor>a69e2d616ed38d08c1ce16150e95475c0</anchor>
      <arglist>(const FBlocks &amp;Fs, Matrix &amp;F)</arglist>
    </member>
    <member kind="variable">
      <type>EIGEN_MAKE_ALIGNED_OPERATOR_NEW typedef boost::shared_ptr&lt; This &gt;</type>
      <name>shared_ptr</name>
      <anchorfile>a04083.html</anchorfile>
      <anchor>affead32289c802516860047d57fd74d2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>Dim</name>
      <anchorfile>a04083.html</anchorfile>
      <anchor>a407fa000777864d9142f3e3742f7e9cd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>ZDim</name>
      <anchorfile>a04083.html</anchorfile>
      <anchor>ae3609b3615ce18038ddcbf979f8f13df</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>CameraSet&lt; StereoCamera &gt;</type>
      <name>Cameras</name>
      <anchorfile>a04083.html</anchorfile>
      <anchor>af404fbccc4a4d53232f67a98d0e5a61b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>SharedIsotropic</type>
      <name>noiseModel_</name>
      <anchorfile>a04083.html</anchorfile>
      <anchor>a39a7aa087ac63512c5cccf828b90b516</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ZVector</type>
      <name>measured_</name>
      <anchorfile>a04083.html</anchorfile>
      <anchor>a9560247c976b32599247fb7f738a9211</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>boost::optional&lt; Pose3 &gt;</type>
      <name>body_P_sensor_</name>
      <anchorfile>a04083.html</anchorfile>
      <anchor>ad8b373cb10b9a3e4c13a37925821e64a</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>boost::serialization::access</name>
      <anchorfile>a04083.html</anchorfile>
      <anchor>ac98d07dd8f7b70e16ccb9a01abf56b9c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::SmartProjectionFactor</name>
    <filename>a04091.html</filename>
    <templarg>CAMERA</templarg>
    <base>gtsam::SmartFactorBase</base>
    <member kind="variable" protection="protected">
      <type>TriangulationResult</type>
      <name>result_</name>
      <anchorfile>a04091.html</anchorfile>
      <anchor>a659be9a9d83e420af8637d58c9ea9cf1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; Pose3, Eigen::aligned_allocator&lt; Pose3 &gt; &gt;</type>
      <name>cameraPosesTriangulation_</name>
      <anchorfile>a04091.html</anchorfile>
      <anchor>a9a1250608b5eefaaec2a4e455a68f850</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SmartProjectionFactor</name>
      <anchorfile>a04091.html</anchorfile>
      <anchor>afc54313a5ae848bd36184c969fbda36b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SmartProjectionFactor</name>
      <anchorfile>a04091.html</anchorfile>
      <anchor>acd76f8144d81e5a8696c01ffefe599d1</anchor>
      <arglist>(const SharedNoiseModel &amp;sharedNoiseModel, const boost::optional&lt; Pose3 &gt; body_P_sensor=boost::none, const SmartProjectionParams &amp;params=SmartProjectionParams())</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~SmartProjectionFactor</name>
      <anchorfile>a04091.html</anchorfile>
      <anchor>aca9072261f296cf32f0f698cbcd7895d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>a04091.html</anchorfile>
      <anchor>ac3d2fc588fd36e6de0d3691ec1e839fd</anchor>
      <arglist>(const std::string &amp;s=&quot;&quot;, const KeyFormatter &amp;keyFormatter=DefaultKeyFormatter) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>equals</name>
      <anchorfile>a04091.html</anchorfile>
      <anchor>adac2730880b5a406b12cbc2ec066730a</anchor>
      <arglist>(const NonlinearFactor &amp;p, double tol=1e-9) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>decideIfTriangulate</name>
      <anchorfile>a04091.html</anchorfile>
      <anchor>a13b6cc6b17c4de6ed2a254c18b01931d</anchor>
      <arglist>(const Cameras &amp;cameras) const</arglist>
    </member>
    <member kind="function">
      <type>TriangulationResult</type>
      <name>triangulateSafe</name>
      <anchorfile>a04091.html</anchorfile>
      <anchor>a689089b7db400d88f95ef8cdb6b8a653</anchor>
      <arglist>(const Cameras &amp;cameras) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>triangulateForLinearize</name>
      <anchorfile>a04091.html</anchorfile>
      <anchor>aeb22b08db97a4bdb4e9ce22d37f3565d</anchor>
      <arglist>(const Cameras &amp;cameras) const</arglist>
    </member>
    <member kind="function">
      <type>boost::shared_ptr&lt; RegularHessianFactor&lt; Base::Dim &gt; &gt;</type>
      <name>createHessianFactor</name>
      <anchorfile>a04091.html</anchorfile>
      <anchor>ae87b73afac8c6dd20e42e9bad8909b7d</anchor>
      <arglist>(const Cameras &amp;cameras, const double lambda=0.0, bool diagonalDamping=false) const</arglist>
    </member>
    <member kind="function">
      <type>boost::shared_ptr&lt; JacobianFactorQ&lt; Base::Dim, 2 &gt; &gt;</type>
      <name>createJacobianQFactor</name>
      <anchorfile>a04091.html</anchorfile>
      <anchor>a7ed9f5278c3b89320485fbf2ccdbcd27</anchor>
      <arglist>(const Cameras &amp;cameras, double lambda) const</arglist>
    </member>
    <member kind="function">
      <type>boost::shared_ptr&lt; JacobianFactorQ&lt; Base::Dim, 2 &gt; &gt;</type>
      <name>createJacobianQFactor</name>
      <anchorfile>a04091.html</anchorfile>
      <anchor>ae7be13a4b35db09870427d0a6ae2bf10</anchor>
      <arglist>(const Values &amp;values, double lambda) const</arglist>
    </member>
    <member kind="function">
      <type>boost::shared_ptr&lt; JacobianFactor &gt;</type>
      <name>createJacobianSVDFactor</name>
      <anchorfile>a04091.html</anchorfile>
      <anchor>a5c9d7ee5a899c5f39f3ddc552742ea73</anchor>
      <arglist>(const Cameras &amp;cameras, double lambda) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual boost::shared_ptr&lt; RegularHessianFactor&lt; Base::Dim &gt; &gt;</type>
      <name>linearizeToHessian</name>
      <anchorfile>a04091.html</anchorfile>
      <anchor>ae3cb3a77fef61324b5abd90b9671f3dd</anchor>
      <arglist>(const Values &amp;values, double lambda=0.0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual boost::shared_ptr&lt; RegularImplicitSchurFactor&lt; CAMERA &gt; &gt;</type>
      <name>linearizeToImplicit</name>
      <anchorfile>a04091.html</anchorfile>
      <anchor>a2852958550903d0f40780daa6a38816c</anchor>
      <arglist>(const Values &amp;values, double lambda=0.0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual boost::shared_ptr&lt; JacobianFactorQ&lt; Base::Dim, 2 &gt; &gt;</type>
      <name>linearizeToJacobian</name>
      <anchorfile>a04091.html</anchorfile>
      <anchor>aaeb894ee42331ea8e9c0dfb5fdc29b5a</anchor>
      <arglist>(const Values &amp;values, double lambda=0.0) const</arglist>
    </member>
    <member kind="function">
      <type>boost::shared_ptr&lt; GaussianFactor &gt;</type>
      <name>linearizeDamped</name>
      <anchorfile>a04091.html</anchorfile>
      <anchor>a7da3f13063abf87bcaa0f504636ffaef</anchor>
      <arglist>(const Cameras &amp;cameras, const double lambda=0.0) const</arglist>
    </member>
    <member kind="function">
      <type>boost::shared_ptr&lt; GaussianFactor &gt;</type>
      <name>linearizeDamped</name>
      <anchorfile>a04091.html</anchorfile>
      <anchor>a8f1ae812261262a518ca4c25477d71e1</anchor>
      <arglist>(const Values &amp;values, const double lambda=0.0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual boost::shared_ptr&lt; GaussianFactor &gt;</type>
      <name>linearize</name>
      <anchorfile>a04091.html</anchorfile>
      <anchor>ad1b808f99b3a3df35913e1a3916eb880</anchor>
      <arglist>(const Values &amp;values) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>triangulateAndComputeE</name>
      <anchorfile>a04091.html</anchorfile>
      <anchor>a9a36c36080404db5e58cdc487ff68da4</anchor>
      <arglist>(Matrix &amp;E, const Cameras &amp;cameras) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>triangulateAndComputeE</name>
      <anchorfile>a04091.html</anchorfile>
      <anchor>a5688a031e48a5e09e3c09b8bf46606c3</anchor>
      <arglist>(Matrix &amp;E, const Values &amp;values) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>computeJacobiansWithTriangulatedPoint</name>
      <anchorfile>a04091.html</anchorfile>
      <anchor>a3684ba802069de975f569c6ca16db738</anchor>
      <arglist>(std::vector&lt; typename Base::MatrixZD, Eigen::aligned_allocator&lt; typename Base::MatrixZD &gt; &gt; &amp;Fblocks, Matrix &amp;E, Vector &amp;b, const Cameras &amp;cameras) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>triangulateAndComputeJacobians</name>
      <anchorfile>a04091.html</anchorfile>
      <anchor>a3e5bf539857fd0d5ffa31df9fc7efe80</anchor>
      <arglist>(std::vector&lt; typename Base::MatrixZD, Eigen::aligned_allocator&lt; typename Base::MatrixZD &gt; &gt; &amp;Fblocks, Matrix &amp;E, Vector &amp;b, const Values &amp;values) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>triangulateAndComputeJacobiansSVD</name>
      <anchorfile>a04091.html</anchorfile>
      <anchor>a121dea7b110dda699c3395e4635dc4dd</anchor>
      <arglist>(std::vector&lt; typename Base::MatrixZD, Eigen::aligned_allocator&lt; typename Base::MatrixZD &gt; &gt; &amp;Fblocks, Matrix &amp;Enull, Vector &amp;b, const Values &amp;values) const</arglist>
    </member>
    <member kind="function">
      <type>Vector</type>
      <name>reprojectionErrorAfterTriangulation</name>
      <anchorfile>a04091.html</anchorfile>
      <anchor>ae6fc7b0bc3ee4173a7980b04fc501c22</anchor>
      <arglist>(const Values &amp;values) const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>totalReprojectionError</name>
      <anchorfile>a04091.html</anchorfile>
      <anchor>aa30166ceca524f30644895be41d56e0e</anchor>
      <arglist>(const Cameras &amp;cameras, boost::optional&lt; Point3 &gt; externalPoint=boost::none) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>error</name>
      <anchorfile>a04091.html</anchorfile>
      <anchor>a51a03a863f760118ede3be68cee7abdb</anchor>
      <arglist>(const Values &amp;values) const</arglist>
    </member>
    <member kind="function">
      <type>TriangulationResult</type>
      <name>point</name>
      <anchorfile>a04091.html</anchorfile>
      <anchor>ae8d5d0e25ef5798020097fbc4c2d5102</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>TriangulationResult</type>
      <name>point</name>
      <anchorfile>a04091.html</anchorfile>
      <anchor>ad11aa682fdff0190763ed3c33eec3985</anchor>
      <arglist>(const Values &amp;values) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isValid</name>
      <anchorfile>a04091.html</anchorfile>
      <anchor>a968160b61e38601f91e0dcae88521841</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isDegenerate</name>
      <anchorfile>a04091.html</anchorfile>
      <anchor>aac6d6bde4d1591b7f0bc7051c46a0eb3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isPointBehindCamera</name>
      <anchorfile>a04091.html</anchorfile>
      <anchor>adcc2d224d60f4aec4e0efe150097db2c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isOutlier</name>
      <anchorfile>a04091.html</anchorfile>
      <anchor>a3ef991d19b08d78f25b2bd078e294460</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isFarPoint</name>
      <anchorfile>a04091.html</anchorfile>
      <anchor>a61f5b43bba56b82ab12d1d006e90f19f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; This &gt;</type>
      <name>shared_ptr</name>
      <anchorfile>a04091.html</anchorfile>
      <anchor>af14bb9ba7f4664d710079353501204a1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>CameraSet&lt; CAMERA &gt;</type>
      <name>Cameras</name>
      <anchorfile>a04091.html</anchorfile>
      <anchor>a7041e4dbb3ba6a2adb91e598d155adae</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>TriangulationResult</type>
      <name>result_</name>
      <anchorfile>a04091.html</anchorfile>
      <anchor>a659be9a9d83e420af8637d58c9ea9cf1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; Pose3, Eigen::aligned_allocator&lt; Pose3 &gt; &gt;</type>
      <name>cameraPosesTriangulation_</name>
      <anchorfile>a04091.html</anchorfile>
      <anchor>a9a1250608b5eefaaec2a4e455a68f850</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>boost::serialization::access</name>
      <anchorfile>a04091.html</anchorfile>
      <anchor>ac98d07dd8f7b70e16ccb9a01abf56b9c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SmartProjectionFactor&lt; PinholePose&lt; CALIBRATION &gt; &gt;</name>
    <filename>a04091.html</filename>
    <base>SmartFactorBase&lt; PinholePose&lt; CALIBRATION &gt; &gt;</base>
    <member kind="variable" protection="protected">
      <type>TriangulationResult</type>
      <name>result_</name>
      <anchorfile>a04091.html</anchorfile>
      <anchor>a659be9a9d83e420af8637d58c9ea9cf1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; Pose3, Eigen::aligned_allocator&lt; Pose3 &gt; &gt;</type>
      <name>cameraPosesTriangulation_</name>
      <anchorfile>a04091.html</anchorfile>
      <anchor>a9a1250608b5eefaaec2a4e455a68f850</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SmartProjectionFactor</name>
      <anchorfile>a04091.html</anchorfile>
      <anchor>afc54313a5ae848bd36184c969fbda36b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SmartProjectionFactor</name>
      <anchorfile>a04091.html</anchorfile>
      <anchor>acd76f8144d81e5a8696c01ffefe599d1</anchor>
      <arglist>(const SharedNoiseModel &amp;sharedNoiseModel, const boost::optional&lt; Pose3 &gt; body_P_sensor=boost::none, const SmartProjectionParams &amp;params=SmartProjectionParams())</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~SmartProjectionFactor</name>
      <anchorfile>a04091.html</anchorfile>
      <anchor>aca9072261f296cf32f0f698cbcd7895d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>a04091.html</anchorfile>
      <anchor>ac3d2fc588fd36e6de0d3691ec1e839fd</anchor>
      <arglist>(const std::string &amp;s=&quot;&quot;, const KeyFormatter &amp;keyFormatter=DefaultKeyFormatter) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>equals</name>
      <anchorfile>a04091.html</anchorfile>
      <anchor>adac2730880b5a406b12cbc2ec066730a</anchor>
      <arglist>(const NonlinearFactor &amp;p, double tol=1e-9) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>decideIfTriangulate</name>
      <anchorfile>a04091.html</anchorfile>
      <anchor>a13b6cc6b17c4de6ed2a254c18b01931d</anchor>
      <arglist>(const Cameras &amp;cameras) const</arglist>
    </member>
    <member kind="function">
      <type>TriangulationResult</type>
      <name>triangulateSafe</name>
      <anchorfile>a04091.html</anchorfile>
      <anchor>a689089b7db400d88f95ef8cdb6b8a653</anchor>
      <arglist>(const Cameras &amp;cameras) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>triangulateForLinearize</name>
      <anchorfile>a04091.html</anchorfile>
      <anchor>aeb22b08db97a4bdb4e9ce22d37f3565d</anchor>
      <arglist>(const Cameras &amp;cameras) const</arglist>
    </member>
    <member kind="function">
      <type>boost::shared_ptr&lt; RegularHessianFactor&lt; Base::Dim &gt; &gt;</type>
      <name>createHessianFactor</name>
      <anchorfile>a04091.html</anchorfile>
      <anchor>ae87b73afac8c6dd20e42e9bad8909b7d</anchor>
      <arglist>(const Cameras &amp;cameras, const double lambda=0.0, bool diagonalDamping=false) const</arglist>
    </member>
    <member kind="function">
      <type>boost::shared_ptr&lt; JacobianFactorQ&lt; Base::Dim, 2 &gt; &gt;</type>
      <name>createJacobianQFactor</name>
      <anchorfile>a04091.html</anchorfile>
      <anchor>a7ed9f5278c3b89320485fbf2ccdbcd27</anchor>
      <arglist>(const Cameras &amp;cameras, double lambda) const</arglist>
    </member>
    <member kind="function">
      <type>boost::shared_ptr&lt; JacobianFactorQ&lt; Base::Dim, 2 &gt; &gt;</type>
      <name>createJacobianQFactor</name>
      <anchorfile>a04091.html</anchorfile>
      <anchor>ae7be13a4b35db09870427d0a6ae2bf10</anchor>
      <arglist>(const Values &amp;values, double lambda) const</arglist>
    </member>
    <member kind="function">
      <type>boost::shared_ptr&lt; JacobianFactor &gt;</type>
      <name>createJacobianSVDFactor</name>
      <anchorfile>a04091.html</anchorfile>
      <anchor>a5c9d7ee5a899c5f39f3ddc552742ea73</anchor>
      <arglist>(const Cameras &amp;cameras, double lambda) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual boost::shared_ptr&lt; RegularHessianFactor&lt; Base::Dim &gt; &gt;</type>
      <name>linearizeToHessian</name>
      <anchorfile>a04091.html</anchorfile>
      <anchor>ae3cb3a77fef61324b5abd90b9671f3dd</anchor>
      <arglist>(const Values &amp;values, double lambda=0.0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual boost::shared_ptr&lt; RegularImplicitSchurFactor&lt; PinholePose&lt; CALIBRATION &gt; &gt; &gt;</type>
      <name>linearizeToImplicit</name>
      <anchorfile>a04091.html</anchorfile>
      <anchor>a2852958550903d0f40780daa6a38816c</anchor>
      <arglist>(const Values &amp;values, double lambda=0.0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual boost::shared_ptr&lt; JacobianFactorQ&lt; Base::Dim, 2 &gt; &gt;</type>
      <name>linearizeToJacobian</name>
      <anchorfile>a04091.html</anchorfile>
      <anchor>aaeb894ee42331ea8e9c0dfb5fdc29b5a</anchor>
      <arglist>(const Values &amp;values, double lambda=0.0) const</arglist>
    </member>
    <member kind="function">
      <type>boost::shared_ptr&lt; GaussianFactor &gt;</type>
      <name>linearizeDamped</name>
      <anchorfile>a04091.html</anchorfile>
      <anchor>a7da3f13063abf87bcaa0f504636ffaef</anchor>
      <arglist>(const Cameras &amp;cameras, const double lambda=0.0) const</arglist>
    </member>
    <member kind="function">
      <type>boost::shared_ptr&lt; GaussianFactor &gt;</type>
      <name>linearizeDamped</name>
      <anchorfile>a04091.html</anchorfile>
      <anchor>a8f1ae812261262a518ca4c25477d71e1</anchor>
      <arglist>(const Values &amp;values, const double lambda=0.0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual boost::shared_ptr&lt; GaussianFactor &gt;</type>
      <name>linearize</name>
      <anchorfile>a04091.html</anchorfile>
      <anchor>ad1b808f99b3a3df35913e1a3916eb880</anchor>
      <arglist>(const Values &amp;values) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>triangulateAndComputeE</name>
      <anchorfile>a04091.html</anchorfile>
      <anchor>a9a36c36080404db5e58cdc487ff68da4</anchor>
      <arglist>(Matrix &amp;E, const Cameras &amp;cameras) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>triangulateAndComputeE</name>
      <anchorfile>a04091.html</anchorfile>
      <anchor>a5688a031e48a5e09e3c09b8bf46606c3</anchor>
      <arglist>(Matrix &amp;E, const Values &amp;values) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>computeJacobiansWithTriangulatedPoint</name>
      <anchorfile>a04091.html</anchorfile>
      <anchor>a3684ba802069de975f569c6ca16db738</anchor>
      <arglist>(std::vector&lt; typename Base::MatrixZD, Eigen::aligned_allocator&lt; typename Base::MatrixZD &gt; &gt; &amp;Fblocks, Matrix &amp;E, Vector &amp;b, const Cameras &amp;cameras) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>triangulateAndComputeJacobians</name>
      <anchorfile>a04091.html</anchorfile>
      <anchor>a3e5bf539857fd0d5ffa31df9fc7efe80</anchor>
      <arglist>(std::vector&lt; typename Base::MatrixZD, Eigen::aligned_allocator&lt; typename Base::MatrixZD &gt; &gt; &amp;Fblocks, Matrix &amp;E, Vector &amp;b, const Values &amp;values) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>triangulateAndComputeJacobiansSVD</name>
      <anchorfile>a04091.html</anchorfile>
      <anchor>a121dea7b110dda699c3395e4635dc4dd</anchor>
      <arglist>(std::vector&lt; typename Base::MatrixZD, Eigen::aligned_allocator&lt; typename Base::MatrixZD &gt; &gt; &amp;Fblocks, Matrix &amp;Enull, Vector &amp;b, const Values &amp;values) const</arglist>
    </member>
    <member kind="function">
      <type>Vector</type>
      <name>reprojectionErrorAfterTriangulation</name>
      <anchorfile>a04091.html</anchorfile>
      <anchor>ae6fc7b0bc3ee4173a7980b04fc501c22</anchor>
      <arglist>(const Values &amp;values) const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>totalReprojectionError</name>
      <anchorfile>a04091.html</anchorfile>
      <anchor>aa30166ceca524f30644895be41d56e0e</anchor>
      <arglist>(const Cameras &amp;cameras, boost::optional&lt; Point3 &gt; externalPoint=boost::none) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>error</name>
      <anchorfile>a04091.html</anchorfile>
      <anchor>a51a03a863f760118ede3be68cee7abdb</anchor>
      <arglist>(const Values &amp;values) const</arglist>
    </member>
    <member kind="function">
      <type>TriangulationResult</type>
      <name>point</name>
      <anchorfile>a04091.html</anchorfile>
      <anchor>ae8d5d0e25ef5798020097fbc4c2d5102</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>TriangulationResult</type>
      <name>point</name>
      <anchorfile>a04091.html</anchorfile>
      <anchor>ad11aa682fdff0190763ed3c33eec3985</anchor>
      <arglist>(const Values &amp;values) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isValid</name>
      <anchorfile>a04091.html</anchorfile>
      <anchor>a968160b61e38601f91e0dcae88521841</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isDegenerate</name>
      <anchorfile>a04091.html</anchorfile>
      <anchor>aac6d6bde4d1591b7f0bc7051c46a0eb3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isPointBehindCamera</name>
      <anchorfile>a04091.html</anchorfile>
      <anchor>adcc2d224d60f4aec4e0efe150097db2c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isOutlier</name>
      <anchorfile>a04091.html</anchorfile>
      <anchor>a3ef991d19b08d78f25b2bd078e294460</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isFarPoint</name>
      <anchorfile>a04091.html</anchorfile>
      <anchor>a61f5b43bba56b82ab12d1d006e90f19f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; This &gt;</type>
      <name>shared_ptr</name>
      <anchorfile>a04091.html</anchorfile>
      <anchor>af14bb9ba7f4664d710079353501204a1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>CameraSet&lt; PinholePose&lt; CALIBRATION &gt; &gt;</type>
      <name>Cameras</name>
      <anchorfile>a04091.html</anchorfile>
      <anchor>a7041e4dbb3ba6a2adb91e598d155adae</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>TriangulationResult</type>
      <name>result_</name>
      <anchorfile>a04091.html</anchorfile>
      <anchor>a659be9a9d83e420af8637d58c9ea9cf1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; Pose3, Eigen::aligned_allocator&lt; Pose3 &gt; &gt;</type>
      <name>cameraPosesTriangulation_</name>
      <anchorfile>a04091.html</anchorfile>
      <anchor>a9a1250608b5eefaaec2a4e455a68f850</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>boost::serialization::access</name>
      <anchorfile>a04091.html</anchorfile>
      <anchor>ac98d07dd8f7b70e16ccb9a01abf56b9c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>gtsam::SmartProjectionParams</name>
    <filename>a04087.html</filename>
    <member kind="variable">
      <type>double</type>
      <name>retriangulationThreshold</name>
      <anchorfile>a04087.html</anchorfile>
      <anchor>a5b1fa239a2827c833e2d6c035392d7d5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>throwCheirality</name>
      <anchorfile>a04087.html</anchorfile>
      <anchor>a11f8b823fcb922edff9bc2847e5fe36c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>verboseCheirality</name>
      <anchorfile>a04087.html</anchorfile>
      <anchor>ab8353996f6c8ea607c213c854b6b0bc1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>LinearizationMode</type>
      <name>linearizationMode</name>
      <anchorfile>a04087.html</anchorfile>
      <anchor>a4afa132d1f394b6256605752b3b8aab0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>DegeneracyMode</type>
      <name>degeneracyMode</name>
      <anchorfile>a04087.html</anchorfile>
      <anchor>a695982b029b814dffdd8a34bae523575</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>retriangulationThreshold</name>
      <anchorfile>a04087.html</anchorfile>
      <anchor>a5b1fa239a2827c833e2d6c035392d7d5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>throwCheirality</name>
      <anchorfile>a04087.html</anchorfile>
      <anchor>a11f8b823fcb922edff9bc2847e5fe36c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>verboseCheirality</name>
      <anchorfile>a04087.html</anchorfile>
      <anchor>ab8353996f6c8ea607c213c854b6b0bc1</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>boost::serialization::access</name>
      <anchorfile>a04087.html</anchorfile>
      <anchor>ac98d07dd8f7b70e16ccb9a01abf56b9c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::SmartProjectionPoseFactor</name>
    <filename>a04099.html</filename>
    <templarg></templarg>
    <base>SmartProjectionFactor&lt; PinholePose&lt; CALIBRATION &gt; &gt;</base>
    <member kind="function">
      <type></type>
      <name>SmartProjectionPoseFactor</name>
      <anchorfile>a04099.html</anchorfile>
      <anchor>aceb2d76933a58312e2ddd0ef64f12cfd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SmartProjectionPoseFactor</name>
      <anchorfile>a04099.html</anchorfile>
      <anchor>a1a2c0ee680bc849056dbd8cc7ed9d77a</anchor>
      <arglist>(const SharedNoiseModel &amp;sharedNoiseModel, const boost::shared_ptr&lt; CALIBRATION &gt; K, const boost::optional&lt; Pose3 &gt; body_P_sensor=boost::none, const SmartProjectionParams &amp;params=SmartProjectionParams())</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~SmartProjectionPoseFactor</name>
      <anchorfile>a04099.html</anchorfile>
      <anchor>aa228113646066a1da84681e150393c6e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>a04099.html</anchorfile>
      <anchor>a69ec885a90f65c23e7032ca938126fe8</anchor>
      <arglist>(const std::string &amp;s=&quot;&quot;, const KeyFormatter &amp;keyFormatter=DefaultKeyFormatter) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>equals</name>
      <anchorfile>a04099.html</anchorfile>
      <anchor>a24c4ba00dd567c334b556251a8b03b61</anchor>
      <arglist>(const NonlinearFactor &amp;p, double tol=1e-9) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>error</name>
      <anchorfile>a04099.html</anchorfile>
      <anchor>a968775efed95b22256a46c04307fb01e</anchor>
      <arglist>(const Values &amp;values) const</arglist>
    </member>
    <member kind="function">
      <type>const boost::shared_ptr&lt; CALIBRATION &gt;</type>
      <name>calibration</name>
      <anchorfile>a04099.html</anchorfile>
      <anchor>abdf55daa47c8306bd64281e6d56cc438</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Base::Cameras</type>
      <name>cameras</name>
      <anchorfile>a04099.html</anchorfile>
      <anchor>a216dfb211cf3c01d32e4075b71cd38a9</anchor>
      <arglist>(const Values &amp;values) const</arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; This &gt;</type>
      <name>shared_ptr</name>
      <anchorfile>a04099.html</anchorfile>
      <anchor>a28d8d11331b16d38d35f40d63bcb2853</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>boost::shared_ptr&lt; CALIBRATION &gt;</type>
      <name>K_</name>
      <anchorfile>a04099.html</anchorfile>
      <anchor>a38878009ca4060a870b45f46184656dd</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>boost::serialization::access</name>
      <anchorfile>a04099.html</anchorfile>
      <anchor>ac98d07dd8f7b70e16ccb9a01abf56b9c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::SmartRangeFactor</name>
    <filename>a04543.html</filename>
    <base protection="private">gtsam::NoiseModelFactor</base>
    <base>gtsam::NoiseModelFactor</base>
    <member kind="function">
      <type></type>
      <name>SmartRangeFactor</name>
      <anchorfile>a04543.html</anchorfile>
      <anchor>a967eff304760d96c11bbd0ce3691ef51</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SmartRangeFactor</name>
      <anchorfile>a04543.html</anchorfile>
      <anchor>abdaba35fa6f47cb53becdd488b89613a</anchor>
      <arglist>(double s)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addRange</name>
      <anchorfile>a04543.html</anchorfile>
      <anchor>a060e12501ebbbbf6a0296cff48432b05</anchor>
      <arglist>(Key key, double measuredRange)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>print</name>
      <anchorfile>a04543.html</anchorfile>
      <anchor>a0a4c98c8d1d4f89954cbed64336172f1</anchor>
      <arglist>(const std::string &amp;s=&quot;&quot;, const KeyFormatter &amp;keyFormatter=DefaultKeyFormatter) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>equals</name>
      <anchorfile>a04543.html</anchorfile>
      <anchor>a14f8346608cc16075f0931adc512c3a0</anchor>
      <arglist>(const NonlinearFactor &amp;f, double tol=1e-9) const</arglist>
    </member>
    <member kind="function">
      <type>Point2</type>
      <name>triangulate</name>
      <anchorfile>a04543.html</anchorfile>
      <anchor>af3bb4dd60919948c7f11532f3110e31e</anchor>
      <arglist>(const Values &amp;x) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Vector</type>
      <name>unwhitenedError</name>
      <anchorfile>a04543.html</anchorfile>
      <anchor>a9b3861c07c668faa8e141d4faa8d14ae</anchor>
      <arglist>(const Values &amp;x, boost::optional&lt; std::vector&lt; Matrix &gt; &amp; &gt; H=boost::none) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual gtsam::NonlinearFactor::shared_ptr</type>
      <name>clone</name>
      <anchorfile>a04543.html</anchorfile>
      <anchor>adec92ae9b5ab919d4fcd09495ae1d914</anchor>
      <arglist>() const</arglist>
    </member>
    <class kind="struct">gtsam::SmartRangeFactor::Circle2</class>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; double &gt;</type>
      <name>measurements_</name>
      <anchorfile>a04543.html</anchorfile>
      <anchor>a213e7ec468287436f6c61365a5f5cbd2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>variance_</name>
      <anchorfile>a04543.html</anchorfile>
      <anchor>a66591ef12015e8f746191295a36edffc</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::SmartStereoProjectionFactor</name>
    <filename>a04551.html</filename>
    <base>SmartFactorBase&lt; StereoCamera &gt;</base>
    <member kind="variable" protection="protected">
      <type>TriangulationResult</type>
      <name>result_</name>
      <anchorfile>a04551.html</anchorfile>
      <anchor>a7723f7ed159174a646771591045e203b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; Pose3 &gt;</type>
      <name>cameraPosesTriangulation_</name>
      <anchorfile>a04551.html</anchorfile>
      <anchor>a50d56a4a7b3528e6e8a1449c71b4acbe</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SmartStereoProjectionFactor</name>
      <anchorfile>a04551.html</anchorfile>
      <anchor>ac4923f2a1d591548968f4c3ec1a6b855</anchor>
      <arglist>(const SharedNoiseModel &amp;sharedNoiseModel, const SmartStereoProjectionParams &amp;params=SmartStereoProjectionParams(), const boost::optional&lt; Pose3 &gt; body_P_sensor=boost::none)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~SmartStereoProjectionFactor</name>
      <anchorfile>a04551.html</anchorfile>
      <anchor>a737ad459b62a6077033c3477030f916d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>a04551.html</anchorfile>
      <anchor>a1d7542fc5daf48ae1c070b419bc7b166</anchor>
      <arglist>(const std::string &amp;s=&quot;&quot;, const KeyFormatter &amp;keyFormatter=DefaultKeyFormatter) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>equals</name>
      <anchorfile>a04551.html</anchorfile>
      <anchor>a2f0763fe385f9f4b343f09090f047e3d</anchor>
      <arglist>(const NonlinearFactor &amp;p, double tol=1e-9) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>decideIfTriangulate</name>
      <anchorfile>a04551.html</anchorfile>
      <anchor>a1a10cf31d5521959d2a381a7c63df4ae</anchor>
      <arglist>(const Cameras &amp;cameras) const</arglist>
    </member>
    <member kind="function">
      <type>TriangulationResult</type>
      <name>triangulateSafe</name>
      <anchorfile>a04551.html</anchorfile>
      <anchor>a4179790921a2da421d366b9434b71b1c</anchor>
      <arglist>(const Cameras &amp;cameras) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>triangulateForLinearize</name>
      <anchorfile>a04551.html</anchorfile>
      <anchor>ae8b275234f9b1963b3c9c5dfe7ed7efd</anchor>
      <arglist>(const Cameras &amp;cameras) const</arglist>
    </member>
    <member kind="function">
      <type>boost::shared_ptr&lt; RegularHessianFactor&lt; Base::Dim &gt; &gt;</type>
      <name>createHessianFactor</name>
      <anchorfile>a04551.html</anchorfile>
      <anchor>ab19490e451cc48d1526c68a02cb5488c</anchor>
      <arglist>(const Cameras &amp;cameras, const double lambda=0.0, bool diagonalDamping=false) const</arglist>
    </member>
    <member kind="function">
      <type>boost::shared_ptr&lt; JacobianFactor &gt;</type>
      <name>createJacobianSVDFactor</name>
      <anchorfile>a04551.html</anchorfile>
      <anchor>a7920a8772b60a49cdbd3a1af1587e5d8</anchor>
      <arglist>(const Cameras &amp;cameras, double lambda) const</arglist>
    </member>
    <member kind="function">
      <type>boost::shared_ptr&lt; GaussianFactor &gt;</type>
      <name>linearizeDamped</name>
      <anchorfile>a04551.html</anchorfile>
      <anchor>ad351347073d4918288d2a5fb1e0aba31</anchor>
      <arglist>(const Cameras &amp;cameras, const double lambda=0.0) const</arglist>
    </member>
    <member kind="function">
      <type>boost::shared_ptr&lt; GaussianFactor &gt;</type>
      <name>linearizeDamped</name>
      <anchorfile>a04551.html</anchorfile>
      <anchor>a446dc0a9443a870988827411da9df591</anchor>
      <arglist>(const Values &amp;values, const double lambda=0.0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual boost::shared_ptr&lt; GaussianFactor &gt;</type>
      <name>linearize</name>
      <anchorfile>a04551.html</anchorfile>
      <anchor>a4a065eecd0f93471d8ab4d337dae0630</anchor>
      <arglist>(const Values &amp;values) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>triangulateAndComputeE</name>
      <anchorfile>a04551.html</anchorfile>
      <anchor>ae77088d4231271ccbcc79355712fb841</anchor>
      <arglist>(Matrix &amp;E, const Cameras &amp;cameras) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>triangulateAndComputeE</name>
      <anchorfile>a04551.html</anchorfile>
      <anchor>ab42190d9c1934e8b711f52f9da689426</anchor>
      <arglist>(Matrix &amp;E, const Values &amp;values) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>computeJacobiansWithTriangulatedPoint</name>
      <anchorfile>a04551.html</anchorfile>
      <anchor>a10bca2ac8404a94719973766f743a0bb</anchor>
      <arglist>(FBlocks &amp;Fs, Matrix &amp;E, Vector &amp;b, const Cameras &amp;cameras) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>triangulateAndComputeJacobians</name>
      <anchorfile>a04551.html</anchorfile>
      <anchor>ac49a2e7562df37dc875a493bd64b7f50</anchor>
      <arglist>(FBlocks &amp;Fs, Matrix &amp;E, Vector &amp;b, const Values &amp;values) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>triangulateAndComputeJacobiansSVD</name>
      <anchorfile>a04551.html</anchorfile>
      <anchor>ae39124d8d131b6857130ce38a019c470</anchor>
      <arglist>(FBlocks &amp;Fs, Matrix &amp;Enull, Vector &amp;b, const Values &amp;values) const</arglist>
    </member>
    <member kind="function">
      <type>Vector</type>
      <name>reprojectionErrorAfterTriangulation</name>
      <anchorfile>a04551.html</anchorfile>
      <anchor>a41fb2474b9bd42ff88aed0066e90a6d5</anchor>
      <arglist>(const Values &amp;values) const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>totalReprojectionError</name>
      <anchorfile>a04551.html</anchorfile>
      <anchor>a5aa7b40f05b31b382f63ecc5dab1edb3</anchor>
      <arglist>(const Cameras &amp;cameras, boost::optional&lt; Point3 &gt; externalPoint=boost::none) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>error</name>
      <anchorfile>a04551.html</anchorfile>
      <anchor>a93c84a275b398d55797f4d921835f23e</anchor>
      <arglist>(const Values &amp;values) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>correctForMissingMeasurements</name>
      <anchorfile>a04551.html</anchorfile>
      <anchor>acbd43416c06e599149c078b4198a1596</anchor>
      <arglist>(const Cameras &amp;cameras, Vector &amp;ue, boost::optional&lt; typename Cameras::FBlocks &amp; &gt; Fs=boost::none, boost::optional&lt; Matrix &amp; &gt; E=boost::none) const</arglist>
    </member>
    <member kind="function">
      <type>TriangulationResult</type>
      <name>point</name>
      <anchorfile>a04551.html</anchorfile>
      <anchor>ae21cdcf967169fa7238b9927ce50ed81</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>TriangulationResult</type>
      <name>point</name>
      <anchorfile>a04551.html</anchorfile>
      <anchor>af78f923873950be30cab451c7c8904c8</anchor>
      <arglist>(const Values &amp;values) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isValid</name>
      <anchorfile>a04551.html</anchorfile>
      <anchor>af6075b0c49a59c1f7857520dbef0646c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isDegenerate</name>
      <anchorfile>a04551.html</anchorfile>
      <anchor>ad828bbe70d68da368a1ce60ed4b56439</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isPointBehindCamera</name>
      <anchorfile>a04551.html</anchorfile>
      <anchor>ae53f6579078f8a514e97378406c22752</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isOutlier</name>
      <anchorfile>a04551.html</anchorfile>
      <anchor>a7f94285211ae50c8a9cb3483df937c1d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isFarPoint</name>
      <anchorfile>a04551.html</anchorfile>
      <anchor>aef8c19adda92adfb8d83e9391dee3564</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; SmartStereoProjectionFactor &gt;</type>
      <name>shared_ptr</name>
      <anchorfile>a04551.html</anchorfile>
      <anchor>a2e6e04648d38ca2c7bbba974bf44f280</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>CameraSet&lt; StereoCamera &gt;</type>
      <name>Cameras</name>
      <anchorfile>a04551.html</anchorfile>
      <anchor>acac8e2ab6eefe4239f72b3ba3f2a63c5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>PinholeCamera&lt; Cal3_S2 &gt;</type>
      <name>MonoCamera</name>
      <anchorfile>a04551.html</anchorfile>
      <anchor>a7df2041114a622c117971951e6d4f144</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>TriangulationResult</type>
      <name>result_</name>
      <anchorfile>a04551.html</anchorfile>
      <anchor>a7723f7ed159174a646771591045e203b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; Pose3 &gt;</type>
      <name>cameraPosesTriangulation_</name>
      <anchorfile>a04551.html</anchorfile>
      <anchor>a50d56a4a7b3528e6e8a1449c71b4acbe</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>boost::serialization::access</name>
      <anchorfile>a04551.html</anchorfile>
      <anchor>ac98d07dd8f7b70e16ccb9a01abf56b9c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::SmartStereoProjectionPoseFactor</name>
    <filename>a04559.html</filename>
    <base>gtsam::SmartStereoProjectionFactor</base>
    <member kind="function">
      <type></type>
      <name>SmartStereoProjectionPoseFactor</name>
      <anchorfile>a04559.html</anchorfile>
      <anchor>a24041fdca1e1b33e498ca2ef0fff1ce9</anchor>
      <arglist>(const SharedNoiseModel &amp;sharedNoiseModel, const SmartStereoProjectionParams &amp;params=SmartStereoProjectionParams(), const boost::optional&lt; Pose3 &gt; body_P_sensor=boost::none)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~SmartStereoProjectionPoseFactor</name>
      <anchorfile>a04559.html</anchorfile>
      <anchor>aaefe3af11044e6a7c362e055772d99a8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add</name>
      <anchorfile>a04559.html</anchorfile>
      <anchor>a1c26aa0d821d4d3d88366bcc57ed6457</anchor>
      <arglist>(const StereoPoint2 measured, const Key poseKey, const boost::shared_ptr&lt; Cal3_S2Stereo &gt; K)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add</name>
      <anchorfile>a04559.html</anchorfile>
      <anchor>ab8110579dd2dd921950893e5523c3646</anchor>
      <arglist>(std::vector&lt; StereoPoint2 &gt; measurements, KeyVector poseKeys, std::vector&lt; boost::shared_ptr&lt; Cal3_S2Stereo &gt; &gt; Ks)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add</name>
      <anchorfile>a04559.html</anchorfile>
      <anchor>af3b9ec02c711a285c20b84d61dc190df</anchor>
      <arglist>(std::vector&lt; StereoPoint2 &gt; measurements, KeyVector poseKeys, const boost::shared_ptr&lt; Cal3_S2Stereo &gt; K)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>a04559.html</anchorfile>
      <anchor>a097fecc03fdc6022d646b8f20b9bc937</anchor>
      <arglist>(const std::string &amp;s=&quot;&quot;, const KeyFormatter &amp;keyFormatter=DefaultKeyFormatter) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>equals</name>
      <anchorfile>a04559.html</anchorfile>
      <anchor>ab899c4b6911f16e20b88046aef18b4f3</anchor>
      <arglist>(const NonlinearFactor &amp;p, double tol=1e-9) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>error</name>
      <anchorfile>a04559.html</anchorfile>
      <anchor>a1c70a56215349d1a345437a5d3d2746d</anchor>
      <arglist>(const Values &amp;values) const</arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; boost::shared_ptr&lt; Cal3_S2Stereo &gt; &gt;</type>
      <name>calibration</name>
      <anchorfile>a04559.html</anchorfile>
      <anchor>a2ae2c5ffbb2c5dd84c350e847acf8ecd</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Base::Cameras</type>
      <name>cameras</name>
      <anchorfile>a04559.html</anchorfile>
      <anchor>a68a194f1222280224196296385045432</anchor>
      <arglist>(const Values &amp;values) const</arglist>
    </member>
    <member kind="variable">
      <type>EIGEN_MAKE_ALIGNED_OPERATOR_NEW typedef SmartStereoProjectionFactor</type>
      <name>Base</name>
      <anchorfile>a04559.html</anchorfile>
      <anchor>aa51d7b642dddb1a83f02f4b6decca7cd</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SmartStereoProjectionPoseFactor</type>
      <name>This</name>
      <anchorfile>a04559.html</anchorfile>
      <anchor>a13a5dea170b9722e83168f5b56c406ac</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; This &gt;</type>
      <name>shared_ptr</name>
      <anchorfile>a04559.html</anchorfile>
      <anchor>aac62c258da3b17c84017f2f09f97c095</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; boost::shared_ptr&lt; Cal3_S2Stereo &gt; &gt;</type>
      <name>K_all_</name>
      <anchorfile>a04559.html</anchorfile>
      <anchor>acf970e63a3a8b2daf9d05ebebc273637</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>boost::serialization::access</name>
      <anchorfile>a04559.html</anchorfile>
      <anchor>ac98d07dd8f7b70e16ccb9a01abf56b9c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::SO3</name>
    <filename>a02795.html</filename>
    <base>LieGroup&lt; SO3, 3 &gt;</base>
    <member kind="function">
      <type></type>
      <name>SO3</name>
      <anchorfile>a02795.html</anchorfile>
      <anchor>a695b74e1ca5c6c075c74df62937046db</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SO3</name>
      <anchorfile>a02795.html</anchorfile>
      <anchor>a7309d9f963808801ce8271102936b818</anchor>
      <arglist>(const MatrixBase&lt; Derived &gt; &amp;R)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SO3</name>
      <anchorfile>a02795.html</anchorfile>
      <anchor>ac493c4cf0d9f0291cc062459726ef3de</anchor>
      <arglist>(const Eigen::AngleAxisd &amp;angleAxis)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static SO3</type>
      <name>AxisAngle</name>
      <anchorfile>a02795.html</anchorfile>
      <anchor>ad7c3c95f82092fe0fa5e73f3dc3c9e88</anchor>
      <arglist>(const Vector3 &amp;axis, double theta)</arglist>
    </member>
    <member kind="function">
      <type>SO3</type>
      <name>inverse</name>
      <anchorfile>a02795.html</anchorfile>
      <anchor>a905c27767c9514d840c7a01967921268</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static SO3</type>
      <name>identity</name>
      <anchorfile>a02795.html</anchorfile>
      <anchor>ad400be1763031384e3069e1196703b80</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static SO3</type>
      <name>Expmap</name>
      <anchorfile>a02795.html</anchorfile>
      <anchor>aa5d96acdc974cd1659879a4f2076de05</anchor>
      <arglist>(const Vector3 &amp;omega, ChartJacobian H=boost::none)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Matrix3</type>
      <name>ExpmapDerivative</name>
      <anchorfile>a02795.html</anchorfile>
      <anchor>a38e5b832bbbeb36fb9a48acb28a4d04c</anchor>
      <arglist>(const Vector3 &amp;omega)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Vector3</type>
      <name>Logmap</name>
      <anchorfile>a02795.html</anchorfile>
      <anchor>aba2cf00b3ee0ffafa334883a11571649</anchor>
      <arglist>(const SO3 &amp;R, ChartJacobian H=boost::none)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Matrix3</type>
      <name>LogmapDerivative</name>
      <anchorfile>a02795.html</anchorfile>
      <anchor>a8c5622ccb8701bab350554721a739cf4</anchor>
      <arglist>(const Vector3 &amp;omega)</arglist>
    </member>
    <class kind="struct">gtsam::SO3::ChartAtOrigin</class>
  </compound>
  <compound kind="struct">
    <name>gtsam::ActiveSetSolver::State</name>
    <filename>a04247.html</filename>
    <member kind="function">
      <type></type>
      <name>State</name>
      <anchorfile>a04247.html</anchorfile>
      <anchor>a6cc42c96140dd03cbba161c241b5bd83</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>State</name>
      <anchorfile>a04247.html</anchorfile>
      <anchor>a4ca89320b907d84a0491e699398d0721</anchor>
      <arglist>(const VectorValues &amp;initialValues, const VectorValues &amp;initialDuals, const InequalityFactorGraph &amp;initialWorkingSet, bool _converged, size_t _iterations)</arglist>
    </member>
    <member kind="variable">
      <type>VectorValues</type>
      <name>values</name>
      <anchorfile>a04247.html</anchorfile>
      <anchor>a68ff516d3772c84f66a3eea941c3c926</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>VectorValues</type>
      <name>duals</name>
      <anchorfile>a04247.html</anchorfile>
      <anchor>af742d04869bbdbe9a5aae75fb9c5efc2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>InequalityFactorGraph</type>
      <name>workingSet</name>
      <anchorfile>a04247.html</anchorfile>
      <anchor>a9585d6011f0a9fd77c82bc4629a55a34</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>converged</name>
      <anchorfile>a04247.html</anchorfile>
      <anchor>a377825e8d2099cf34a0707a24e6fb27c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>size_t</type>
      <name>iterations</name>
      <anchorfile>a04247.html</anchorfile>
      <anchor>a647c39c5186b87355e99f63c33bfa377</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::StereoCamera</name>
    <filename>a02823.html</filename>
    <member kind="function">
      <type></type>
      <name>StereoCamera</name>
      <anchorfile>a02823.html</anchorfile>
      <anchor>a0f564c53fc04f67cd6d801f53fd83050</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>StereoCamera</name>
      <anchorfile>a02823.html</anchorfile>
      <anchor>a8e6d34f7069c0c7e0caa6359d1b8aafe</anchor>
      <arglist>(const Pose3 &amp;leftCamPose, const Cal3_S2Stereo::shared_ptr K)</arglist>
    </member>
    <member kind="function">
      <type>const Cal3_S2Stereo &amp;</type>
      <name>calibration</name>
      <anchorfile>a02823.html</anchorfile>
      <anchor>a0362efffc66ee40f5c961ba03686cf60</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>a02823.html</anchorfile>
      <anchor>a1dbb6420724b6649b871b06fbe8c2696</anchor>
      <arglist>(const std::string &amp;s=&quot;&quot;) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>equals</name>
      <anchorfile>a02823.html</anchorfile>
      <anchor>a2cd29824e3bab5b6468aa4d897629b04</anchor>
      <arglist>(const StereoCamera &amp;camera, double tol=1e-9) const</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>dim</name>
      <anchorfile>a02823.html</anchorfile>
      <anchor>a36d3e0cee1635544adfbf7dc0be188ee</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>StereoCamera</type>
      <name>retract</name>
      <anchorfile>a02823.html</anchorfile>
      <anchor>a37c85bfef85af4eaeeff0a501b2290cb</anchor>
      <arglist>(const Vector &amp;v) const</arglist>
    </member>
    <member kind="function">
      <type>Vector6</type>
      <name>localCoordinates</name>
      <anchorfile>a02823.html</anchorfile>
      <anchor>a24b860fb6a80d4773466a744c21530ac</anchor>
      <arglist>(const StereoCamera &amp;t2) const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static size_t</type>
      <name>Dim</name>
      <anchorfile>a02823.html</anchorfile>
      <anchor>a158dd137f09cfb8f041de46bd4a47851</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const Pose3 &amp;</type>
      <name>pose</name>
      <anchorfile>a02823.html</anchorfile>
      <anchor>a036e5c4e89535cb8a92aa14fa3c534d7</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>baseline</name>
      <anchorfile>a02823.html</anchorfile>
      <anchor>aa3b9da0154ae3757285ce95c92e56b69</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>StereoPoint2</type>
      <name>project</name>
      <anchorfile>a02823.html</anchorfile>
      <anchor>a58351937581d58a9e5308a4fc7cebfba</anchor>
      <arglist>(const Point3 &amp;point) const</arglist>
    </member>
    <member kind="function">
      <type>StereoPoint2</type>
      <name>project2</name>
      <anchorfile>a02823.html</anchorfile>
      <anchor>ac5bf29b33c56dd0ee0e8ba35f5bf7d38</anchor>
      <arglist>(const Point3 &amp;point, OptionalJacobian&lt; 3, 6 &gt; H1=boost::none, OptionalJacobian&lt; 3, 3 &gt; H2=boost::none) const</arglist>
    </member>
    <member kind="function">
      <type>Point3</type>
      <name>backproject</name>
      <anchorfile>a02823.html</anchorfile>
      <anchor>aac8dee12b601fa444680b0d073f1cd6c</anchor>
      <arglist>(const StereoPoint2 &amp;z) const</arglist>
    </member>
    <member kind="function">
      <type>Point3</type>
      <name>backproject2</name>
      <anchorfile>a02823.html</anchorfile>
      <anchor>ae500e74d037214861c667b7b020690a3</anchor>
      <arglist>(const StereoPoint2 &amp;z, OptionalJacobian&lt; 3, 6 &gt; H1=boost::none, OptionalJacobian&lt; 3, 3 &gt; H2=boost::none) const</arglist>
    </member>
    <member kind="function">
      <type>StereoPoint2</type>
      <name>project</name>
      <anchorfile>a02823.html</anchorfile>
      <anchor>a534e5ca4946b76b93c7e278a067ea65a</anchor>
      <arglist>(const Point3 &amp;point, OptionalJacobian&lt; 3, 6 &gt; H1, OptionalJacobian&lt; 3, 3 &gt; H2=boost::none, OptionalJacobian&lt; 3, 0 &gt; H3=boost::none) const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>StereoCamera</name>
      <anchorfile>a02823.html</anchorfile>
      <anchor>a0f564c53fc04f67cd6d801f53fd83050</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>StereoCamera</name>
      <anchorfile>a02823.html</anchorfile>
      <anchor>a8e6d34f7069c0c7e0caa6359d1b8aafe</anchor>
      <arglist>(const Pose3 &amp;leftCamPose, const Cal3_S2Stereo::shared_ptr K)</arglist>
    </member>
    <member kind="function">
      <type>const Cal3_S2Stereo &amp;</type>
      <name>calibration</name>
      <anchorfile>a02823.html</anchorfile>
      <anchor>a0362efffc66ee40f5c961ba03686cf60</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>a02823.html</anchorfile>
      <anchor>a1dbb6420724b6649b871b06fbe8c2696</anchor>
      <arglist>(const std::string &amp;s=&quot;&quot;) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>equals</name>
      <anchorfile>a02823.html</anchorfile>
      <anchor>a2cd29824e3bab5b6468aa4d897629b04</anchor>
      <arglist>(const StereoCamera &amp;camera, double tol=1e-9) const</arglist>
    </member>
    <member kind="function">
      <type>const Pose3 &amp;</type>
      <name>pose</name>
      <anchorfile>a02823.html</anchorfile>
      <anchor>a036e5c4e89535cb8a92aa14fa3c534d7</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>baseline</name>
      <anchorfile>a02823.html</anchorfile>
      <anchor>aa3b9da0154ae3757285ce95c92e56b69</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>StereoPoint2</type>
      <name>project</name>
      <anchorfile>a02823.html</anchorfile>
      <anchor>a58351937581d58a9e5308a4fc7cebfba</anchor>
      <arglist>(const Point3 &amp;point) const</arglist>
    </member>
    <member kind="function">
      <type>StereoPoint2</type>
      <name>project2</name>
      <anchorfile>a02823.html</anchorfile>
      <anchor>ac5bf29b33c56dd0ee0e8ba35f5bf7d38</anchor>
      <arglist>(const Point3 &amp;point, OptionalJacobian&lt; 3, 6 &gt; H1=boost::none, OptionalJacobian&lt; 3, 3 &gt; H2=boost::none) const</arglist>
    </member>
    <member kind="function">
      <type>Point3</type>
      <name>backproject</name>
      <anchorfile>a02823.html</anchorfile>
      <anchor>aac8dee12b601fa444680b0d073f1cd6c</anchor>
      <arglist>(const StereoPoint2 &amp;z) const</arglist>
    </member>
    <member kind="function">
      <type>Point3</type>
      <name>backproject2</name>
      <anchorfile>a02823.html</anchorfile>
      <anchor>ae500e74d037214861c667b7b020690a3</anchor>
      <arglist>(const StereoPoint2 &amp;z, OptionalJacobian&lt; 3, 6 &gt; H1=boost::none, OptionalJacobian&lt; 3, 3 &gt; H2=boost::none) const</arglist>
    </member>
    <member kind="function">
      <type>StereoPoint2</type>
      <name>project</name>
      <anchorfile>a02823.html</anchorfile>
      <anchor>a534e5ca4946b76b93c7e278a067ea65a</anchor>
      <arglist>(const Point3 &amp;point, OptionalJacobian&lt; 3, 6 &gt; H1, OptionalJacobian&lt; 3, 3 &gt; H2=boost::none, OptionalJacobian&lt; 3, 0 &gt; H3=boost::none) const</arglist>
    </member>
    <member kind="typedef">
      <type>StereoPoint2</type>
      <name>Measurement</name>
      <anchorfile>a02823.html</anchorfile>
      <anchor>a39e88f1ffa6e0850820453ef44675b94</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::StereoCheiralityException</name>
    <filename>a02819.html</filename>
  </compound>
  <compound kind="class">
    <name>gtsam::StereoPoint2</name>
    <filename>a02835.html</filename>
    <member kind="function">
      <type></type>
      <name>StereoPoint2</name>
      <anchorfile>a02835.html</anchorfile>
      <anchor>af91933798181ce1bb4759a7f78900ed8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>StereoPoint2</name>
      <anchorfile>a02835.html</anchorfile>
      <anchor>a6e78d04be7be5824277957b807f29a67</anchor>
      <arglist>(double uL, double uR, double v)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>StereoPoint2</name>
      <anchorfile>a02835.html</anchorfile>
      <anchor>a127f5a9bc07d0f81dc30f67d4eb6e3bd</anchor>
      <arglist>(const Vector3 &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>a02835.html</anchorfile>
      <anchor>a7a0cac6ecc475313cd1d250dde4cfcc3</anchor>
      <arglist>(const std::string &amp;s=&quot;&quot;) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>equals</name>
      <anchorfile>a02835.html</anchorfile>
      <anchor>a74e0c6868b8d058dc7d49f12da34e483</anchor>
      <arglist>(const StereoPoint2 &amp;q, double tol=1e-9) const</arglist>
    </member>
    <member kind="function">
      <type>StereoPoint2</type>
      <name>operator-</name>
      <anchorfile>a02835.html</anchorfile>
      <anchor>a8be0cca494701e375ca31db902f66fe1</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>StereoPoint2</type>
      <name>operator+</name>
      <anchorfile>a02835.html</anchorfile>
      <anchor>a6720f98d02fa76cfdd7b70e5f0f0dffd</anchor>
      <arglist>(const Vector3 &amp;v) const</arglist>
    </member>
    <member kind="function">
      <type>StereoPoint2</type>
      <name>operator+</name>
      <anchorfile>a02835.html</anchorfile>
      <anchor>ab0f193e3fbc9fc811051dfcd4c394891</anchor>
      <arglist>(const StereoPoint2 &amp;b) const</arglist>
    </member>
    <member kind="function">
      <type>StereoPoint2</type>
      <name>operator -</name>
      <anchorfile>a02835.html</anchorfile>
      <anchor>a75d77fd14ff15d2373a79e30acccf00b</anchor>
      <arglist>(const StereoPoint2 &amp;b) const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static StereoPoint2</type>
      <name>identity</name>
      <anchorfile>a02835.html</anchorfile>
      <anchor>a01e660dedfc05491b619d428b9556824</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>a02835.html</anchorfile>
      <anchor>af0b47bceeb7d432730ef9627e03b085a</anchor>
      <arglist>(const StereoPoint2 &amp;q) const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>uL</name>
      <anchorfile>a02835.html</anchorfile>
      <anchor>a680b14f2e0bd0621c551d33c9b60f1c2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>uR</name>
      <anchorfile>a02835.html</anchorfile>
      <anchor>a0394939c8b77b2e3b594873ca007dc42</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>v</name>
      <anchorfile>a02835.html</anchorfile>
      <anchor>addb15c987185fd446d94f4495d1ecbae</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Vector3</type>
      <name>vector</name>
      <anchorfile>a02835.html</anchorfile>
      <anchor>a576452db11da6ff1c022e7d6ca2f605b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Point2</type>
      <name>point2</name>
      <anchorfile>a02835.html</anchorfile>
      <anchor>aebca28e1dc3f495c873fd01de7ff0778</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Point2</type>
      <name>right</name>
      <anchorfile>a02835.html</anchorfile>
      <anchor>a1a7990b315e51976dce3ab9b9fb54ad2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>boost::serialization::access</name>
      <anchorfile>a02835.html</anchorfile>
      <anchor>ac98d07dd8f7b70e16ccb9a01abf56b9c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>StereoPoint2</name>
      <anchorfile>a02835.html</anchorfile>
      <anchor>af91933798181ce1bb4759a7f78900ed8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>StereoPoint2</name>
      <anchorfile>a02835.html</anchorfile>
      <anchor>a6e78d04be7be5824277957b807f29a67</anchor>
      <arglist>(double uL, double uR, double v)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>StereoPoint2</name>
      <anchorfile>a02835.html</anchorfile>
      <anchor>a127f5a9bc07d0f81dc30f67d4eb6e3bd</anchor>
      <arglist>(const Vector3 &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>a02835.html</anchorfile>
      <anchor>a7a0cac6ecc475313cd1d250dde4cfcc3</anchor>
      <arglist>(const std::string &amp;s=&quot;&quot;) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>equals</name>
      <anchorfile>a02835.html</anchorfile>
      <anchor>a74e0c6868b8d058dc7d49f12da34e483</anchor>
      <arglist>(const StereoPoint2 &amp;q, double tol=1e-9) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>a02835.html</anchorfile>
      <anchor>af0b47bceeb7d432730ef9627e03b085a</anchor>
      <arglist>(const StereoPoint2 &amp;q) const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>uL</name>
      <anchorfile>a02835.html</anchorfile>
      <anchor>a680b14f2e0bd0621c551d33c9b60f1c2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>uR</name>
      <anchorfile>a02835.html</anchorfile>
      <anchor>a0394939c8b77b2e3b594873ca007dc42</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>v</name>
      <anchorfile>a02835.html</anchorfile>
      <anchor>addb15c987185fd446d94f4495d1ecbae</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Vector3</type>
      <name>vector</name>
      <anchorfile>a02835.html</anchorfile>
      <anchor>a576452db11da6ff1c022e7d6ca2f605b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Point2</type>
      <name>point2</name>
      <anchorfile>a02835.html</anchorfile>
      <anchor>aebca28e1dc3f495c873fd01de7ff0778</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Point2</type>
      <name>right</name>
      <anchorfile>a02835.html</anchorfile>
      <anchor>a1a7990b315e51976dce3ab9b9fb54ad2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="friend">
      <type>GTSAM_EXPORT friend std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a02835.html</anchorfile>
      <anchor>a6aec31fd92d44026492db831a31cc627</anchor>
      <arglist>(std::ostream &amp;os, const StereoPoint2 &amp;p)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::Subgraph</name>
    <filename>a03367.html</filename>
    <class kind="struct">gtsam::Subgraph::Edge</class>
  </compound>
  <compound kind="class">
    <name>gtsam::SubgraphBuilder</name>
    <filename>a03379.html</filename>
  </compound>
  <compound kind="struct">
    <name>gtsam::SubgraphBuilderParameters</name>
    <filename>a03375.html</filename>
    <member kind="variable">
      <type>double</type>
      <name>augmentationFactor</name>
      <anchorfile>a03375.html</anchorfile>
      <anchor>a927dc3d350c0cf449755cb5f491c0af7</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::SubgraphPreconditioner</name>
    <filename>a03387.html</filename>
    <base>gtsam::Preconditioner</base>
    <member kind="function">
      <type></type>
      <name>SubgraphPreconditioner</name>
      <anchorfile>a03387.html</anchorfile>
      <anchor>af49b5c9b405926fb8f53216d3b6518a3</anchor>
      <arglist>(const sharedFG &amp;Ab2, const sharedBayesNet &amp;Rc1, const sharedValues &amp;xbar, const SubgraphPreconditionerParameters &amp;p=SubgraphPreconditionerParameters())</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>a03387.html</anchorfile>
      <anchor>a5f7352c1f061e18e920aeea14da0af8b</anchor>
      <arglist>(const std::string &amp;s=&quot;SubgraphPreconditioner&quot;) const</arglist>
    </member>
    <member kind="function">
      <type>const sharedFG &amp;</type>
      <name>Ab2</name>
      <anchorfile>a03387.html</anchorfile>
      <anchor>a92a71218e4f3b80657f9df2bf13be71e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const sharedBayesNet &amp;</type>
      <name>Rc1</name>
      <anchorfile>a03387.html</anchorfile>
      <anchor>ab319635b88dd480b92ce6ee2a33a0688</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const sharedErrors</type>
      <name>b2bar</name>
      <anchorfile>a03387.html</anchorfile>
      <anchor>a7daacd2acb8a289aa3fe9523af4eba39</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>VectorValues</type>
      <name>x</name>
      <anchorfile>a03387.html</anchorfile>
      <anchor>a1042338665fdf670282045691cc22722</anchor>
      <arglist>(const VectorValues &amp;y) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>transposeMultiplyAdd2</name>
      <anchorfile>a03387.html</anchorfile>
      <anchor>a55355948d9ed5c429a840a28d01c55bc</anchor>
      <arglist>(double alpha, Errors::const_iterator begin, Errors::const_iterator end, VectorValues &amp;y) const</arglist>
    </member>
    <member kind="function">
      <type>VectorValues</type>
      <name>gradient</name>
      <anchorfile>a03387.html</anchorfile>
      <anchor>a47d02462ad1133814145111e01559b10</anchor>
      <arglist>(const VectorValues &amp;y) const</arglist>
    </member>
    <member kind="function">
      <type>Errors</type>
      <name>operator *</name>
      <anchorfile>a03387.html</anchorfile>
      <anchor>af7ca9181548e5cf6ff9cc2c4a5a2da1a</anchor>
      <arglist>(const VectorValues &amp;y) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>multiplyInPlace</name>
      <anchorfile>a03387.html</anchorfile>
      <anchor>a328000e608567efcf9b46eb40679a4ed</anchor>
      <arglist>(const VectorValues &amp;y, Errors &amp;e) const</arglist>
    </member>
    <member kind="function">
      <type>VectorValues</type>
      <name>operator^</name>
      <anchorfile>a03387.html</anchorfile>
      <anchor>a4b58a532d8fb462c1b51d3d1f9b1fe98</anchor>
      <arglist>(const Errors &amp;e) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>transposeMultiplyAdd</name>
      <anchorfile>a03387.html</anchorfile>
      <anchor>a299ff473b4cf2119e55f03536e9dcef0</anchor>
      <arglist>(double alpha, const Errors &amp;e, VectorValues &amp;y) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>solve</name>
      <anchorfile>a03387.html</anchorfile>
      <anchor>a02992340072f87fb8b52404cef2ac08d</anchor>
      <arglist>(const Vector &amp;y, Vector &amp;x) const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>transposeSolve</name>
      <anchorfile>a03387.html</anchorfile>
      <anchor>a509b2683de1972e47b982a97a5bb4fb1</anchor>
      <arglist>(const Vector &amp;y, Vector &amp;x) const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>build</name>
      <anchorfile>a03387.html</anchorfile>
      <anchor>a7b30d8181eb2f3fc13a325b70e83817f</anchor>
      <arglist>(const GaussianFactorGraph &amp;gfg, const KeyInfo &amp;info, const std::map&lt; Key, Vector &gt; &amp;lambda) override</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>gtsam::SubgraphPreconditionerParameters</name>
    <filename>a03383.html</filename>
    <base>gtsam::PreconditionerParameters</base>
  </compound>
  <compound kind="class">
    <name>gtsam::SubgraphSolver</name>
    <filename>a03395.html</filename>
    <base>gtsam::IterativeSolver</base>
    <member kind="function">
      <type></type>
      <name>SubgraphSolver</name>
      <anchorfile>a03395.html</anchorfile>
      <anchor>aaa164e4b6a6b1c5601f6d2873409bcd7</anchor>
      <arglist>(const GaussianFactorGraph &amp;A, const Parameters &amp;parameters, const Ordering &amp;ordering)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SubgraphSolver</name>
      <anchorfile>a03395.html</anchorfile>
      <anchor>a9e09ff872a092e06e544c878c7f238ae</anchor>
      <arglist>(const GaussianFactorGraph &amp;Ab1, const boost::shared_ptr&lt; GaussianFactorGraph &gt; &amp;Ab2, const Parameters &amp;parameters, const Ordering &amp;ordering)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SubgraphSolver</name>
      <anchorfile>a03395.html</anchorfile>
      <anchor>ae200c73c7194bb41b9c213b18bb5a976</anchor>
      <arglist>(const boost::shared_ptr&lt; GaussianBayesNet &gt; &amp;Rc1, const boost::shared_ptr&lt; GaussianFactorGraph &gt; &amp;Ab2, const Parameters &amp;parameters)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~SubgraphSolver</name>
      <anchorfile>a03395.html</anchorfile>
      <anchor>a2009838c9715cf4b251a1cc8012d9457</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>VectorValues</type>
      <name>optimize</name>
      <anchorfile>a03395.html</anchorfile>
      <anchor>a18e4f45f60c3a2e4338ab2776a295b4b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>VectorValues</type>
      <name>optimize</name>
      <anchorfile>a03395.html</anchorfile>
      <anchor>a3bb3fc4c5063a8bac80cdd6d40df745e</anchor>
      <arglist>(const GaussianFactorGraph &amp;gfg, const KeyInfo &amp;keyInfo, const std::map&lt; Key, Vector &gt; &amp;lambda, const VectorValues &amp;initial) override</arglist>
    </member>
    <member kind="function">
      <type>std::pair&lt; boost::shared_ptr&lt; GaussianFactorGraph &gt;, boost::shared_ptr&lt; GaussianFactorGraph &gt; &gt;</type>
      <name>splitGraph</name>
      <anchorfile>a03395.html</anchorfile>
      <anchor>a0f1e381bfda11ab74c9a4f252c63165e</anchor>
      <arglist>(const GaussianFactorGraph &amp;gfg)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>boost::shared_ptr&lt; SubgraphPreconditioner &gt;</type>
      <name>pc_</name>
      <anchorfile>a03395.html</anchorfile>
      <anchor>ade9c0e75a53cc84a283c0b19c6965ceb</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>gtsam::SubgraphSolverParameters</name>
    <filename>a03391.html</filename>
    <base>gtsam::ConjugateGradientParameters</base>
  </compound>
  <compound kind="class">
    <name>gtsam::Symbol</name>
    <filename>a03039.html</filename>
    <member kind="function">
      <type></type>
      <name>Symbol</name>
      <anchorfile>a03039.html</anchorfile>
      <anchor>a70b4c41b784455578c4798dd6b3b3028</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Symbol</name>
      <anchorfile>a03039.html</anchorfile>
      <anchor>a6c9854ad92d889022fb2fc837efc0b36</anchor>
      <arglist>(const Symbol &amp;key)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Symbol</name>
      <anchorfile>a03039.html</anchorfile>
      <anchor>a88bf5e78e1e38834c95c4626b904b991</anchor>
      <arglist>(unsigned char c, std::uint64_t j)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Symbol</name>
      <anchorfile>a03039.html</anchorfile>
      <anchor>a39830bf361caf4ed4d1ef0a613dc8179</anchor>
      <arglist>(Key key)</arglist>
    </member>
    <member kind="function">
      <type>Key</type>
      <name>key</name>
      <anchorfile>a03039.html</anchorfile>
      <anchor>a4a868793721b14d64c1e36e6f3745b1a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator Key</name>
      <anchorfile>a03039.html</anchorfile>
      <anchor>ab1eda4ab6f81742c9cebc465e8ea13c5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>a03039.html</anchorfile>
      <anchor>af7e1d49febc5aa2b7444aad842a8af0f</anchor>
      <arglist>(const std::string &amp;s=&quot;&quot;) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>equals</name>
      <anchorfile>a03039.html</anchorfile>
      <anchor>a51cbe8a465cc4091975a280bca26f7ba</anchor>
      <arglist>(const Symbol &amp;expected, double tol=0.0) const</arglist>
    </member>
    <member kind="function">
      <type>unsigned char</type>
      <name>chr</name>
      <anchorfile>a03039.html</anchorfile>
      <anchor>a0cc103be1e2795373e0d637e5cd11e11</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::uint64_t</type>
      <name>index</name>
      <anchorfile>a03039.html</anchorfile>
      <anchor>adeffd2de250c396fdbebd5d2b92118f3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator std::string</name>
      <anchorfile>a03039.html</anchorfile>
      <anchor>af9feea2863c9992eeb699aaad248a59c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;</name>
      <anchorfile>a03039.html</anchorfile>
      <anchor>ade82814bbddfcd40598f47fcdaf62514</anchor>
      <arglist>(const Symbol &amp;comp) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>a03039.html</anchorfile>
      <anchor>a3076bbe7a5bd7410c6d9474238fdd060</anchor>
      <arglist>(const Symbol &amp;comp) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>a03039.html</anchorfile>
      <anchor>a13611874b7b76972cdda343dc62d139d</anchor>
      <arglist>(Key comp) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>a03039.html</anchorfile>
      <anchor>a25122adbd459b677817974df4c5a566f</anchor>
      <arglist>(const Symbol &amp;comp) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>a03039.html</anchorfile>
      <anchor>afaa7c5da56b53119ce4d9f5a65081515</anchor>
      <arglist>(Key comp) const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static boost::function&lt; bool(Key)&gt;</type>
      <name>ChrTest</name>
      <anchorfile>a03039.html</anchorfile>
      <anchor>a467f10597c7d0bd091213d5991c2a976</anchor>
      <arglist>(unsigned char c)</arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>boost::serialization::access</name>
      <anchorfile>a03039.html</anchorfile>
      <anchor>ac98d07dd8f7b70e16ccb9a01abf56b9c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::SymbolicBayesNet</name>
    <filename>a04119.html</filename>
    <base>FactorGraph&lt; SymbolicConditional &gt;</base>
    <member kind="function">
      <type></type>
      <name>SymbolicBayesNet</name>
      <anchorfile>a04119.html</anchorfile>
      <anchor>a6bbc46aa18458037ff7d50567d19c4f6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SymbolicBayesNet</name>
      <anchorfile>a04119.html</anchorfile>
      <anchor>a2be792589f4fcffb80276d5bdbd12b7b</anchor>
      <arglist>(ITERATOR firstConditional, ITERATOR lastConditional)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SymbolicBayesNet</name>
      <anchorfile>a04119.html</anchorfile>
      <anchor>a34708a62aafcaded4541d3bd4989fc52</anchor>
      <arglist>(const CONTAINER &amp;conditionals)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SymbolicBayesNet</name>
      <anchorfile>a04119.html</anchorfile>
      <anchor>afc548bc1dcc40725de7424c80eebb839</anchor>
      <arglist>(const FactorGraph&lt; DERIVEDCONDITIONAL &gt; &amp;graph)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>equals</name>
      <anchorfile>a04119.html</anchorfile>
      <anchor>a05b35a0cb73d6c1a021a8a8dc613ddd8</anchor>
      <arglist>(const This &amp;bn, double tol=1e-9) const</arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>boost::serialization::access</name>
      <anchorfile>a04119.html</anchorfile>
      <anchor>ac98d07dd8f7b70e16ccb9a01abf56b9c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::SymbolicBayesTree</name>
    <filename>a04131.html</filename>
    <base>BayesTree&lt; SymbolicBayesTreeClique &gt;</base>
    <member kind="function">
      <type></type>
      <name>SymbolicBayesTree</name>
      <anchorfile>a04131.html</anchorfile>
      <anchor>ac3ed7fda6fb7d46fdfe0d064d8a473bc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>equals</name>
      <anchorfile>a04131.html</anchorfile>
      <anchor>a9cd09c0159c0ed63ebe33f91d7a97abb</anchor>
      <arglist>(const This &amp;other, double tol=1e-9) const</arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>boost::serialization::access</name>
      <anchorfile>a04131.html</anchorfile>
      <anchor>ac98d07dd8f7b70e16ccb9a01abf56b9c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::SymbolicBayesTreeClique</name>
    <filename>a04127.html</filename>
    <base>BayesTreeCliqueBase&lt; SymbolicBayesTreeClique, SymbolicFactorGraph &gt;</base>
  </compound>
  <compound kind="class">
    <name>gtsam::SymbolicConditional</name>
    <filename>a04143.html</filename>
    <base>gtsam::SymbolicFactor</base>
    <base>Conditional&lt; SymbolicFactor, SymbolicConditional &gt;</base>
    <member kind="function">
      <type></type>
      <name>SymbolicConditional</name>
      <anchorfile>a04143.html</anchorfile>
      <anchor>a3d5f37af8e07fc3cb93d9df0f611ab29</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SymbolicConditional</name>
      <anchorfile>a04143.html</anchorfile>
      <anchor>a811ebc4f9eefbcf25fc2f40f66db8e39</anchor>
      <arglist>(Key j)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SymbolicConditional</name>
      <anchorfile>a04143.html</anchorfile>
      <anchor>a77133cf0e119b7e0b0105c49f9677f59</anchor>
      <arglist>(Key j, Key parent)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SymbolicConditional</name>
      <anchorfile>a04143.html</anchorfile>
      <anchor>a8215e2229254269e71210cb4b5d2cd60</anchor>
      <arglist>(Key j, Key parent1, Key parent2)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SymbolicConditional</name>
      <anchorfile>a04143.html</anchorfile>
      <anchor>a0d9e9d5af1a6a10390b923f0cc8efe52</anchor>
      <arglist>(Key j, Key parent1, Key parent2, Key parent3)</arglist>
    </member>
    <member kind="function">
      <type>SymbolicFactor::shared_ptr</type>
      <name>clone</name>
      <anchorfile>a04143.html</anchorfile>
      <anchor>a913447e3cd824e3ceaceaa860c62dc19</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static SymbolicConditional</type>
      <name>FromIterators</name>
      <anchorfile>a04143.html</anchorfile>
      <anchor>a7614a76d9494f2f856ef7829e6ebc3fa</anchor>
      <arglist>(ITERATOR firstKey, ITERATOR lastKey, size_t nrFrontals)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static SymbolicConditional::shared_ptr</type>
      <name>FromIteratorsShared</name>
      <anchorfile>a04143.html</anchorfile>
      <anchor>a677f3741e63b6cd351f292e0016b0b2d</anchor>
      <arglist>(ITERATOR firstKey, ITERATOR lastKey, size_t nrFrontals)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static SymbolicConditional</type>
      <name>FromKeys</name>
      <anchorfile>a04143.html</anchorfile>
      <anchor>a44248a7922ecaf5e4d7421f18aaf22f8</anchor>
      <arglist>(const CONTAINER &amp;keys, size_t nrFrontals)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static SymbolicConditional::shared_ptr</type>
      <name>FromKeysShared</name>
      <anchorfile>a04143.html</anchorfile>
      <anchor>ad58aecba408464f68fbd159bb228d917</anchor>
      <arglist>(const CONTAINER &amp;keys, size_t nrFrontals)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>a04143.html</anchorfile>
      <anchor>a4b894f4a0c5ae27d623a0abaa8cc9075</anchor>
      <arglist>(const std::string &amp;str=&quot;&quot;, const KeyFormatter &amp;keyFormatter=DefaultKeyFormatter) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>equals</name>
      <anchorfile>a04143.html</anchorfile>
      <anchor>afd2e36c1d56f2dbbf1e42de686f00039</anchor>
      <arglist>(const This &amp;c, double tol=1e-9) const</arglist>
    </member>
    <member kind="typedef">
      <type>SymbolicFactor</type>
      <name>BaseFactor</name>
      <anchorfile>a04143.html</anchorfile>
      <anchor>aa2e0cb404e5a4c2b9739a3ac68eead88</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Conditional&lt; BaseFactor, This &gt;</type>
      <name>BaseConditional</name>
      <anchorfile>a04143.html</anchorfile>
      <anchor>a56432938db9b4a1f9d8d712f4128cd8d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; This &gt;</type>
      <name>shared_ptr</name>
      <anchorfile>a04143.html</anchorfile>
      <anchor>a539228349dc5255cd587044d7106bf44</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>BaseFactor::iterator</type>
      <name>iterator</name>
      <anchorfile>a04143.html</anchorfile>
      <anchor>a9cf431cc004298a77735cf3d51c04629</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>BaseFactor::const_iterator</type>
      <name>const_iterator</name>
      <anchorfile>a04143.html</anchorfile>
      <anchor>a4bbf077adf4021b966f398f551b0ce5e</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>boost::serialization::access</name>
      <anchorfile>a04143.html</anchorfile>
      <anchor>ac98d07dd8f7b70e16ccb9a01abf56b9c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::SymbolicEliminationTree</name>
    <filename>a04151.html</filename>
    <base>EliminationTree&lt; SymbolicBayesNet, SymbolicFactorGraph &gt;</base>
    <member kind="function">
      <type></type>
      <name>SymbolicEliminationTree</name>
      <anchorfile>a04151.html</anchorfile>
      <anchor>ad3172bf79260aa8bafae35b4e052beda</anchor>
      <arglist>(const SymbolicFactorGraph &amp;factorGraph, const VariableIndex &amp;structure, const Ordering &amp;order)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SymbolicEliminationTree</name>
      <anchorfile>a04151.html</anchorfile>
      <anchor>a4b0d5a605d743a626c20b3c77975fb26</anchor>
      <arglist>(const SymbolicFactorGraph &amp;factorGraph, const Ordering &amp;order)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>equals</name>
      <anchorfile>a04151.html</anchorfile>
      <anchor>a7a66b013eace5c432ce72e6b1ed6479f</anchor>
      <arglist>(const This &amp;other, double tol=1e-9) const</arglist>
    </member>
    <member kind="typedef">
      <type>EliminationTree&lt; SymbolicBayesNet, SymbolicFactorGraph &gt;</type>
      <name>Base</name>
      <anchorfile>a04151.html</anchorfile>
      <anchor>a9b39f5aabd1eb8bcee75e9ea6049bc4d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SymbolicEliminationTree</type>
      <name>This</name>
      <anchorfile>a04151.html</anchorfile>
      <anchor>aafb66dd970ffa3b4fb7d6f49f45fd643</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; This &gt;</type>
      <name>shared_ptr</name>
      <anchorfile>a04151.html</anchorfile>
      <anchor>a8f2e544d15c932a58dd830641679c715</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::SymbolicFactor</name>
    <filename>a04159.html</filename>
    <base>gtsam::Factor</base>
    <member kind="function">
      <type></type>
      <name>SymbolicFactor</name>
      <anchorfile>a04159.html</anchorfile>
      <anchor>ad5559a2e10e8ae2552ef91f3d8340849</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SymbolicFactor</name>
      <anchorfile>a04159.html</anchorfile>
      <anchor>a9caf912ac889d5bb06f56e748d9aa71b</anchor>
      <arglist>(Key j)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SymbolicFactor</name>
      <anchorfile>a04159.html</anchorfile>
      <anchor>a629eccda3484b6e69877e0be2cda1c6a</anchor>
      <arglist>(Key j1, Key j2)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SymbolicFactor</name>
      <anchorfile>a04159.html</anchorfile>
      <anchor>a99571a93b54a2e6b9659781777f29e80</anchor>
      <arglist>(Key j1, Key j2, Key j3)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SymbolicFactor</name>
      <anchorfile>a04159.html</anchorfile>
      <anchor>a4dd708fdef64f6d583d8d428c52d1927</anchor>
      <arglist>(Key j1, Key j2, Key j3, Key j4)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SymbolicFactor</name>
      <anchorfile>a04159.html</anchorfile>
      <anchor>a9fe89884fa91b96be1629188d5f14b7e</anchor>
      <arglist>(Key j1, Key j2, Key j3, Key j4, Key j5)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SymbolicFactor</name>
      <anchorfile>a04159.html</anchorfile>
      <anchor>a139996934bf8b51a68bfd9fe2dfca77c</anchor>
      <arglist>(Key j1, Key j2, Key j3, Key j4, Key j5, Key j6)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SymbolicFactor</name>
      <anchorfile>a04159.html</anchorfile>
      <anchor>a3adb78452c43c569e8be957a27b68321</anchor>
      <arglist>(const Factor &amp;factor)</arglist>
    </member>
    <member kind="function">
      <type>SymbolicFactor::shared_ptr</type>
      <name>clone</name>
      <anchorfile>a04159.html</anchorfile>
      <anchor>ae8e93ea84ccce6f98940b40c9cff3d70</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>empty</name>
      <anchorfile>a04159.html</anchorfile>
      <anchor>a08b5e7a84ab4808fbbef0a8e2d9195bd</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::pair&lt; boost::shared_ptr&lt; SymbolicConditional &gt;, boost::shared_ptr&lt; SymbolicFactor &gt; &gt;</type>
      <name>eliminate</name>
      <anchorfile>a04159.html</anchorfile>
      <anchor>a4a1b2d5945e526faedb439595e1842cb</anchor>
      <arglist>(const Ordering &amp;keys) const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static SymbolicFactor</type>
      <name>FromIterators</name>
      <anchorfile>a04159.html</anchorfile>
      <anchor>a6ab153faa7dd5337407731c0c4ec9678</anchor>
      <arglist>(KEYITERATOR beginKey, KEYITERATOR endKey)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static SymbolicFactor::shared_ptr</type>
      <name>FromIteratorsShared</name>
      <anchorfile>a04159.html</anchorfile>
      <anchor>aa7f3add34e99945f8f92632dd54afc6e</anchor>
      <arglist>(KEYITERATOR beginKey, KEYITERATOR endKey)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static SymbolicFactor</type>
      <name>FromKeys</name>
      <anchorfile>a04159.html</anchorfile>
      <anchor>a39bac348e7f6f44dc16b83bfb82acf19</anchor>
      <arglist>(const CONTAINER &amp;keys)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static SymbolicFactor::shared_ptr</type>
      <name>FromKeysShared</name>
      <anchorfile>a04159.html</anchorfile>
      <anchor>a9833052a7f34dc6a35eb7c840492847d</anchor>
      <arglist>(const CONTAINER &amp;keys)</arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; This &gt;</type>
      <name>shared_ptr</name>
      <anchorfile>a04159.html</anchorfile>
      <anchor>a1a13ba25abc2aaf00cec2fe24449ef4b</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>boost::serialization::access</name>
      <anchorfile>a04159.html</anchorfile>
      <anchor>ac98d07dd8f7b70e16ccb9a01abf56b9c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::SymbolicFactorGraph</name>
    <filename>a04171.html</filename>
    <base>FactorGraph&lt; SymbolicFactor &gt;</base>
    <base>EliminateableFactorGraph&lt; SymbolicFactorGraph &gt;</base>
    <member kind="function">
      <type></type>
      <name>SymbolicFactorGraph</name>
      <anchorfile>a04171.html</anchorfile>
      <anchor>a338bedd4fba5574653271c1c8ced52b7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SymbolicFactorGraph</name>
      <anchorfile>a04171.html</anchorfile>
      <anchor>acf44afb4ee8e78716fa02e9a3e678722</anchor>
      <arglist>(ITERATOR firstFactor, ITERATOR lastFactor)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SymbolicFactorGraph</name>
      <anchorfile>a04171.html</anchorfile>
      <anchor>af5e0ba26014cb8429f771c065e7959eb</anchor>
      <arglist>(const CONTAINER &amp;factors)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SymbolicFactorGraph</name>
      <anchorfile>a04171.html</anchorfile>
      <anchor>a5ab82f082c3be929fcf44796de70b4f0</anchor>
      <arglist>(const FactorGraph&lt; DERIVEDFACTOR &gt; &amp;graph)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>push_factor</name>
      <anchorfile>a04171.html</anchorfile>
      <anchor>adceaa0fcfafa04f644f3b1c50ff32f7b</anchor>
      <arglist>(Key key)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>push_factor</name>
      <anchorfile>a04171.html</anchorfile>
      <anchor>a9a1df5c7471d9621c11dfdd6f587942c</anchor>
      <arglist>(Key key1, Key key2)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>push_factor</name>
      <anchorfile>a04171.html</anchorfile>
      <anchor>a21d9a49522d685b26ffa2cbe4499ebf5</anchor>
      <arglist>(Key key1, Key key2, Key key3)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>push_factor</name>
      <anchorfile>a04171.html</anchorfile>
      <anchor>a36ec7717261908c9c9963b1879761f92</anchor>
      <arglist>(Key key1, Key key2, Key key3, Key key4)</arglist>
    </member>
    <member kind="typedef">
      <type>SymbolicFactorGraph</type>
      <name>This</name>
      <anchorfile>a04171.html</anchorfile>
      <anchor>aac2ebef55b8787de5d790061b22974e8</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>FactorGraph&lt; SymbolicFactor &gt;</type>
      <name>Base</name>
      <anchorfile>a04171.html</anchorfile>
      <anchor>ae1aa66b5d45343c5fc6dd98716fc07b5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>EliminateableFactorGraph&lt; This &gt;</type>
      <name>BaseEliminateable</name>
      <anchorfile>a04171.html</anchorfile>
      <anchor>a85538ad365ab6e9d2495bac092dc78a1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; This &gt;</type>
      <name>shared_ptr</name>
      <anchorfile>a04171.html</anchorfile>
      <anchor>a976e9e8a8ad7f51096a4e616468cc3ec</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>boost::serialization::access</name>
      <anchorfile>a04171.html</anchorfile>
      <anchor>ac98d07dd8f7b70e16ccb9a01abf56b9c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::ConstructorTraversalData::SymbolicFactors</name>
    <filename>a03007.html</filename>
    <base>FactorGraph&lt; Factor &gt;</base>
  </compound>
  <compound kind="class">
    <name>gtsam::SymbolicISAM</name>
    <filename>a04179.html</filename>
    <base>ISAM&lt; SymbolicBayesTree &gt;</base>
    <member kind="function">
      <type></type>
      <name>SymbolicISAM</name>
      <anchorfile>a04179.html</anchorfile>
      <anchor>a3a6dc13df150778e90b5182d85633d95</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SymbolicISAM</name>
      <anchorfile>a04179.html</anchorfile>
      <anchor>a0c67633b7ba09d0fcf146e0c8bcfaf1e</anchor>
      <arglist>(const SymbolicBayesTree &amp;bayesTree)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SymbolicISAM</name>
      <anchorfile>a04179.html</anchorfile>
      <anchor>a3a6dc13df150778e90b5182d85633d95</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SymbolicISAM</name>
      <anchorfile>a04179.html</anchorfile>
      <anchor>a0c67633b7ba09d0fcf146e0c8bcfaf1e</anchor>
      <arglist>(const SymbolicBayesTree &amp;bayesTree)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::SymbolicJunctionTree</name>
    <filename>a04183.html</filename>
    <base>JunctionTree&lt; SymbolicBayesTree, SymbolicFactorGraph &gt;</base>
    <member kind="function">
      <type></type>
      <name>SymbolicJunctionTree</name>
      <anchorfile>a04183.html</anchorfile>
      <anchor>a61ae085cb8f50804dbb387b7136f3cff</anchor>
      <arglist>(const SymbolicEliminationTree &amp;eliminationTree)</arglist>
    </member>
    <member kind="typedef">
      <type>JunctionTree&lt; SymbolicBayesTree, SymbolicFactorGraph &gt;</type>
      <name>Base</name>
      <anchorfile>a04183.html</anchorfile>
      <anchor>a8d788f9f667575595528c4dfb3425ca8</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SymbolicJunctionTree</type>
      <name>This</name>
      <anchorfile>a04183.html</anchorfile>
      <anchor>ae16a13eef6463ec7c973e40d5874e864</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; This &gt;</type>
      <name>shared_ptr</name>
      <anchorfile>a04183.html</anchorfile>
      <anchor>a61ff4d9b29ccdbec88e999136287759c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::SymmetricBlockMatrix</name>
    <filename>a02183.html</filename>
    <member kind="function">
      <type>Matrix</type>
      <name>block</name>
      <anchorfile>a02183.html</anchorfile>
      <anchor>a977ea5f8ace56cdfd9f1afd6f0ecbf30</anchor>
      <arglist>(DenseIndex I, DenseIndex J) const</arglist>
    </member>
    <member kind="function">
      <type>Eigen::SelfAdjointView&lt; Block, Eigen::Upper &gt;</type>
      <name>diagonalBlock</name>
      <anchorfile>a02183.html</anchorfile>
      <anchor>a2849592cc8b14bb5f442a544da948a21</anchor>
      <arglist>(DenseIndex J)</arglist>
    </member>
    <member kind="function">
      <type>Eigen::SelfAdjointView&lt; constBlock, Eigen::Upper &gt;</type>
      <name>diagonalBlock</name>
      <anchorfile>a02183.html</anchorfile>
      <anchor>a0241485ff8f0ecb9ac8ac56b9f026c3a</anchor>
      <arglist>(DenseIndex J) const</arglist>
    </member>
    <member kind="function">
      <type>Vector</type>
      <name>diagonal</name>
      <anchorfile>a02183.html</anchorfile>
      <anchor>a18248dd8856d89f5182e759f3020c0b5</anchor>
      <arglist>(DenseIndex J) const</arglist>
    </member>
    <member kind="function">
      <type>constBlock</type>
      <name>aboveDiagonalBlock</name>
      <anchorfile>a02183.html</anchorfile>
      <anchor>a607f1a581086c66fea14bdb2baaa1b94</anchor>
      <arglist>(DenseIndex I, DenseIndex J) const</arglist>
    </member>
    <member kind="function">
      <type>Eigen::SelfAdjointView&lt; constBlock, Eigen::Upper &gt;</type>
      <name>selfadjointView</name>
      <anchorfile>a02183.html</anchorfile>
      <anchor>a975c488cf923390c17aa8d811ce419ef</anchor>
      <arglist>(DenseIndex I, DenseIndex J) const</arglist>
    </member>
    <member kind="function">
      <type>Eigen::TriangularView&lt; constBlock, Eigen::Upper &gt;</type>
      <name>triangularView</name>
      <anchorfile>a02183.html</anchorfile>
      <anchor>aa4961bf5cefd1fe7daf59d10c393953e</anchor>
      <arglist>(DenseIndex I, DenseIndex J) const</arglist>
    </member>
    <member kind="function">
      <type>constBlock</type>
      <name>aboveDiagonalRange</name>
      <anchorfile>a02183.html</anchorfile>
      <anchor>aba226a3e544fdfb9b1d3af53f7989bc2</anchor>
      <arglist>(DenseIndex i_startBlock, DenseIndex i_endBlock, DenseIndex j_startBlock, DenseIndex j_endBlock) const</arglist>
    </member>
    <member kind="function">
      <type>Block</type>
      <name>aboveDiagonalRange</name>
      <anchorfile>a02183.html</anchorfile>
      <anchor>a8bc04ad6ae19a7bc25f428f68f7e6e0d</anchor>
      <arglist>(DenseIndex i_startBlock, DenseIndex i_endBlock, DenseIndex j_startBlock, DenseIndex j_endBlock)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setDiagonalBlock</name>
      <anchorfile>a02183.html</anchorfile>
      <anchor>a0f151c8fd3e24ebdc42cb301d79e9bd6</anchor>
      <arglist>(DenseIndex I, const XprType &amp;xpr)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setOffDiagonalBlock</name>
      <anchorfile>a02183.html</anchorfile>
      <anchor>a3888b53242390163a4601182a85d1028</anchor>
      <arglist>(DenseIndex I, DenseIndex J, const XprType &amp;xpr)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>updateDiagonalBlock</name>
      <anchorfile>a02183.html</anchorfile>
      <anchor>ac238889d9c141c538f6381619d0c39a4</anchor>
      <arglist>(DenseIndex I, const XprType &amp;xpr)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>updateOffDiagonalBlock</name>
      <anchorfile>a02183.html</anchorfile>
      <anchor>aa199f2600852b106241c1084291d79b5</anchor>
      <arglist>(DenseIndex I, DenseIndex J, const XprType &amp;xpr)</arglist>
    </member>
    <member kind="function">
      <type>Eigen::SelfAdjointView&lt; Block, Eigen::Upper &gt;</type>
      <name>selfadjointView</name>
      <anchorfile>a02183.html</anchorfile>
      <anchor>a9f1116e0c944d27adf0aff70af3a5af2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Eigen::SelfAdjointView&lt; constBlock, Eigen::Upper &gt;</type>
      <name>selfadjointView</name>
      <anchorfile>a02183.html</anchorfile>
      <anchor>a4bc0fd2022cdeb691401c6fd60c40bf5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setFullMatrix</name>
      <anchorfile>a02183.html</anchorfile>
      <anchor>a55ef264a249ecc2f041b53557990ec02</anchor>
      <arglist>(const XprType &amp;xpr)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setZero</name>
      <anchorfile>a02183.html</anchorfile>
      <anchor>a35e66b194fff325549ff61c615381706</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>negate</name>
      <anchorfile>a02183.html</anchorfile>
      <anchor>a3c0ac82b5094f15eb6627ef1f64906fd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>invertInPlace</name>
      <anchorfile>a02183.html</anchorfile>
      <anchor>a709ab14aa6dc7ca078b3765aac4f2843</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SymmetricBlockMatrix</name>
      <anchorfile>a02183.html</anchorfile>
      <anchor>aba9a0daa86b53c16e36653a816328672</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SymmetricBlockMatrix</name>
      <anchorfile>a02183.html</anchorfile>
      <anchor>aa4cfb90a88b42bfab8c7f2c1a73d6f32</anchor>
      <arglist>(const CONTAINER &amp;dimensions, bool appendOneDimension=false)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SymmetricBlockMatrix</name>
      <anchorfile>a02183.html</anchorfile>
      <anchor>ab8db4e43a8c4ab7a16a7131b2546ea3f</anchor>
      <arglist>(ITERATOR firstBlockDim, ITERATOR lastBlockDim, bool appendOneDimension=false)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SymmetricBlockMatrix</name>
      <anchorfile>a02183.html</anchorfile>
      <anchor>a90f73296bb635ad9bc431949446a33f2</anchor>
      <arglist>(const CONTAINER &amp;dimensions, const Matrix &amp;matrix, bool appendOneDimension=false)</arglist>
    </member>
    <member kind="function">
      <type>DenseIndex</type>
      <name>rows</name>
      <anchorfile>a02183.html</anchorfile>
      <anchor>a810c55648086ce18223948ee68200207</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>DenseIndex</type>
      <name>cols</name>
      <anchorfile>a02183.html</anchorfile>
      <anchor>a26470060971a35498640235f56f235c2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>DenseIndex</type>
      <name>nBlocks</name>
      <anchorfile>a02183.html</anchorfile>
      <anchor>acbbb5bd424e0427ef4672b40e31ffa85</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>DenseIndex</type>
      <name>getDim</name>
      <anchorfile>a02183.html</anchorfile>
      <anchor>a2a410e1316e131f5d3e095ef20a6fb29</anchor>
      <arglist>(DenseIndex block) const</arglist>
    </member>
    <member kind="function">
      <type>DenseIndex &amp;</type>
      <name>blockStart</name>
      <anchorfile>a02183.html</anchorfile>
      <anchor>a0f64f9587604cc79af5880a47d4301a2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>DenseIndex</type>
      <name>blockStart</name>
      <anchorfile>a02183.html</anchorfile>
      <anchor>a93b97cad7a1e7ec1db9b209b786e2bdb</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>choleskyPartial</name>
      <anchorfile>a02183.html</anchorfile>
      <anchor>aaf6e0c34bcb0bfc6af21b58ad9f66e79</anchor>
      <arglist>(DenseIndex nFrontals)</arglist>
    </member>
    <member kind="function">
      <type>VerticalBlockMatrix</type>
      <name>split</name>
      <anchorfile>a02183.html</anchorfile>
      <anchor>ae32a049470045f6dad02b91de2648e2d</anchor>
      <arglist>(DenseIndex nFrontals)</arglist>
    </member>
    <member kind="function">
      <type>Matrix</type>
      <name>block</name>
      <anchorfile>a02183.html</anchorfile>
      <anchor>a977ea5f8ace56cdfd9f1afd6f0ecbf30</anchor>
      <arglist>(DenseIndex I, DenseIndex J) const</arglist>
    </member>
    <member kind="function">
      <type>Eigen::SelfAdjointView&lt; Block, Eigen::Upper &gt;</type>
      <name>diagonalBlock</name>
      <anchorfile>a02183.html</anchorfile>
      <anchor>a2849592cc8b14bb5f442a544da948a21</anchor>
      <arglist>(DenseIndex J)</arglist>
    </member>
    <member kind="function">
      <type>Eigen::SelfAdjointView&lt; constBlock, Eigen::Upper &gt;</type>
      <name>diagonalBlock</name>
      <anchorfile>a02183.html</anchorfile>
      <anchor>a0241485ff8f0ecb9ac8ac56b9f026c3a</anchor>
      <arglist>(DenseIndex J) const</arglist>
    </member>
    <member kind="function">
      <type>Vector</type>
      <name>diagonal</name>
      <anchorfile>a02183.html</anchorfile>
      <anchor>a18248dd8856d89f5182e759f3020c0b5</anchor>
      <arglist>(DenseIndex J) const</arglist>
    </member>
    <member kind="function">
      <type>constBlock</type>
      <name>aboveDiagonalBlock</name>
      <anchorfile>a02183.html</anchorfile>
      <anchor>a607f1a581086c66fea14bdb2baaa1b94</anchor>
      <arglist>(DenseIndex I, DenseIndex J) const</arglist>
    </member>
    <member kind="function">
      <type>Eigen::SelfAdjointView&lt; constBlock, Eigen::Upper &gt;</type>
      <name>selfadjointView</name>
      <anchorfile>a02183.html</anchorfile>
      <anchor>a975c488cf923390c17aa8d811ce419ef</anchor>
      <arglist>(DenseIndex I, DenseIndex J) const</arglist>
    </member>
    <member kind="function">
      <type>Eigen::TriangularView&lt; constBlock, Eigen::Upper &gt;</type>
      <name>triangularView</name>
      <anchorfile>a02183.html</anchorfile>
      <anchor>aa4961bf5cefd1fe7daf59d10c393953e</anchor>
      <arglist>(DenseIndex I, DenseIndex J) const</arglist>
    </member>
    <member kind="function">
      <type>constBlock</type>
      <name>aboveDiagonalRange</name>
      <anchorfile>a02183.html</anchorfile>
      <anchor>aba226a3e544fdfb9b1d3af53f7989bc2</anchor>
      <arglist>(DenseIndex i_startBlock, DenseIndex i_endBlock, DenseIndex j_startBlock, DenseIndex j_endBlock) const</arglist>
    </member>
    <member kind="function">
      <type>Block</type>
      <name>aboveDiagonalRange</name>
      <anchorfile>a02183.html</anchorfile>
      <anchor>a8bc04ad6ae19a7bc25f428f68f7e6e0d</anchor>
      <arglist>(DenseIndex i_startBlock, DenseIndex i_endBlock, DenseIndex j_startBlock, DenseIndex j_endBlock)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setDiagonalBlock</name>
      <anchorfile>a02183.html</anchorfile>
      <anchor>a0f151c8fd3e24ebdc42cb301d79e9bd6</anchor>
      <arglist>(DenseIndex I, const XprType &amp;xpr)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setOffDiagonalBlock</name>
      <anchorfile>a02183.html</anchorfile>
      <anchor>a3888b53242390163a4601182a85d1028</anchor>
      <arglist>(DenseIndex I, DenseIndex J, const XprType &amp;xpr)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>updateDiagonalBlock</name>
      <anchorfile>a02183.html</anchorfile>
      <anchor>ac238889d9c141c538f6381619d0c39a4</anchor>
      <arglist>(DenseIndex I, const XprType &amp;xpr)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>updateOffDiagonalBlock</name>
      <anchorfile>a02183.html</anchorfile>
      <anchor>aa199f2600852b106241c1084291d79b5</anchor>
      <arglist>(DenseIndex I, DenseIndex J, const XprType &amp;xpr)</arglist>
    </member>
    <member kind="function">
      <type>Eigen::SelfAdjointView&lt; Block, Eigen::Upper &gt;</type>
      <name>selfadjointView</name>
      <anchorfile>a02183.html</anchorfile>
      <anchor>a9f1116e0c944d27adf0aff70af3a5af2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Eigen::SelfAdjointView&lt; constBlock, Eigen::Upper &gt;</type>
      <name>selfadjointView</name>
      <anchorfile>a02183.html</anchorfile>
      <anchor>a4bc0fd2022cdeb691401c6fd60c40bf5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setFullMatrix</name>
      <anchorfile>a02183.html</anchorfile>
      <anchor>a55ef264a249ecc2f041b53557990ec02</anchor>
      <arglist>(const XprType &amp;xpr)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setZero</name>
      <anchorfile>a02183.html</anchorfile>
      <anchor>a35e66b194fff325549ff61c615381706</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>negate</name>
      <anchorfile>a02183.html</anchorfile>
      <anchor>a3c0ac82b5094f15eb6627ef1f64906fd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>invertInPlace</name>
      <anchorfile>a02183.html</anchorfile>
      <anchor>a709ab14aa6dc7ca078b3765aac4f2843</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static SymmetricBlockMatrix</type>
      <name>LikeActiveViewOf</name>
      <anchorfile>a02183.html</anchorfile>
      <anchor>ad28c4699e481a4b6db09067f420b925a</anchor>
      <arglist>(const SymmetricBlockMatrix &amp;other)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static SymmetricBlockMatrix</type>
      <name>LikeActiveViewOf</name>
      <anchorfile>a02183.html</anchorfile>
      <anchor>a6d9d6334c117ed8800872198172986ec</anchor>
      <arglist>(const VerticalBlockMatrix &amp;other)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>DenseIndex</type>
      <name>nOffsets</name>
      <anchorfile>a02183.html</anchorfile>
      <anchor>ac574291800a39eddcc1aceaa61ca7377</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>DenseIndex</type>
      <name>nActualBlocks</name>
      <anchorfile>a02183.html</anchorfile>
      <anchor>a122c641db73c5a2545effba62a5d0cfe</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>DenseIndex</type>
      <name>offset</name>
      <anchorfile>a02183.html</anchorfile>
      <anchor>afb0a6a4bade21e114b2358ce63b45dcc</anchor>
      <arglist>(DenseIndex block) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>constBlock</type>
      <name>block_</name>
      <anchorfile>a02183.html</anchorfile>
      <anchor>a61a4529858319aa96e0bf093f11e9b14</anchor>
      <arglist>(DenseIndex iBlock, DenseIndex jBlock, DenseIndex blockRows=1, DenseIndex blockCols=1) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>Block</type>
      <name>block_</name>
      <anchorfile>a02183.html</anchorfile>
      <anchor>ac1633a70e3e2491ab5ac8186074e4eca</anchor>
      <arglist>(DenseIndex iBlock, DenseIndex jBlock, DenseIndex blockRows=1, DenseIndex blockCols=1)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>constBlock</type>
      <name>full</name>
      <anchorfile>a02183.html</anchorfile>
      <anchor>a740bb45f04368963ee4f870259bb0196</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>Block</type>
      <name>full</name>
      <anchorfile>a02183.html</anchorfile>
      <anchor>a03e5eba7102a7206182589369819a52c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>std::array&lt; DenseIndex, 4 &gt;</type>
      <name>calcIndices</name>
      <anchorfile>a02183.html</anchorfile>
      <anchor>ae86076f8b694e858d6f0b4cd79f91986</anchor>
      <arglist>(DenseIndex iBlock, DenseIndex jBlock, DenseIndex blockRows, DenseIndex blockCols) const</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Matrix</type>
      <name>matrix_</name>
      <anchorfile>a02183.html</anchorfile>
      <anchor>a1df0e505b1794511838609da2d5ea712</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>FastVector&lt; DenseIndex &gt;</type>
      <name>variableColOffsets_</name>
      <anchorfile>a02183.html</anchorfile>
      <anchor>ae2d97054785689660b75c3a1f6d5a552</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>DenseIndex</type>
      <name>blockStart_</name>
      <anchorfile>a02183.html</anchorfile>
      <anchor>a060d00933c1f670fa1d4ac50592b79a4</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>boost::serialization::access</name>
      <anchorfile>a02183.html</anchorfile>
      <anchor>ac98d07dd8f7b70e16ccb9a01abf56b9c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::System</name>
    <filename>a03163.html</filename>
    <member kind="function">
      <type>const Matrix &amp;</type>
      <name>A</name>
      <anchorfile>a03163.html</anchorfile>
      <anchor>ae6f6f9c89fe140c04b50014411e0a17a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Vector &amp;</type>
      <name>b</name>
      <anchorfile>a03163.html</anchorfile>
      <anchor>a5dc1d7240d1b872a673cc7ffe4e57b82</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Vector</type>
      <name>operator^</name>
      <anchorfile>a03163.html</anchorfile>
      <anchor>ae9b8a03088b3e2177470bb22482d769f</anchor>
      <arglist>(const Vector &amp;e) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>a03163.html</anchorfile>
      <anchor>aad648316d2580be67e6031a9673d8bb1</anchor>
      <arglist>(const std::string &amp;s=&quot;System&quot;) const</arglist>
    </member>
    <member kind="function">
      <type>Vector</type>
      <name>gradient</name>
      <anchorfile>a03163.html</anchorfile>
      <anchor>a8f944ee551d3aa5fbc31319ef1bc2617</anchor>
      <arglist>(const Vector &amp;x) const</arglist>
    </member>
    <member kind="function">
      <type>Vector</type>
      <name>operator *</name>
      <anchorfile>a03163.html</anchorfile>
      <anchor>a3f55411bf324cae2a711fc0c9c07f3c6</anchor>
      <arglist>(const Vector &amp;x) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>multiplyInPlace</name>
      <anchorfile>a03163.html</anchorfile>
      <anchor>a3bd868666bc6f9fe0336132e2217f45a</anchor>
      <arglist>(const Vector &amp;x, Vector &amp;e) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>transposeMultiplyAdd</name>
      <anchorfile>a03163.html</anchorfile>
      <anchor>a9defe89aaaa6cd3695dfebbb0cbf9781</anchor>
      <arglist>(double alpha, const Vector &amp;e, Vector &amp;x) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::TangentPreintegration</name>
    <filename>a03551.html</filename>
    <base>gtsam::PreintegrationBase</base>
    <member kind="function">
      <type></type>
      <name>TangentPreintegration</name>
      <anchorfile>a03551.html</anchorfile>
      <anchor>a89bb513c2d0998f424d9ff41afbd69ea</anchor>
      <arglist>(const boost::shared_ptr&lt; Params &gt; &amp;p, const imuBias::ConstantBias &amp;biasHat=imuBias::ConstantBias())</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~TangentPreintegration</name>
      <anchorfile>a03551.html</anchorfile>
      <anchor>a51d99f2eeee8982b57a2a3c386aa71a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>update</name>
      <anchorfile>a03551.html</anchorfile>
      <anchor>a29246e35a8351b6e9f66039401f445e8</anchor>
      <arglist>(const Vector3 &amp;measuredAcc, const Vector3 &amp;measuredOmega, const double dt, Matrix9 *A, Matrix93 *B, Matrix93 *C) override</arglist>
    </member>
    <member kind="function">
      <type>Vector9</type>
      <name>biasCorrectedDelta</name>
      <anchorfile>a03551.html</anchorfile>
      <anchor>af3a153da456c86a9de922cb7ce142c32</anchor>
      <arglist>(const imuBias::ConstantBias &amp;bias_i, OptionalJacobian&lt; 9, 6 &gt; H=boost::none) const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>mergeWith</name>
      <anchorfile>a03551.html</anchorfile>
      <anchor>a47d5b5a9a0695d464b70a1674db3d5f8</anchor>
      <arglist>(const TangentPreintegration &amp;pim, Matrix9 *H1, Matrix9 *H2)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual boost::shared_ptr&lt; TangentPreintegration &gt;</type>
      <name>clone</name>
      <anchorfile>a03551.html</anchorfile>
      <anchor>a3c016f7f82f2e65b3e3902ac91dfeb49</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TangentPreintegration</name>
      <anchorfile>a03551.html</anchorfile>
      <anchor>a89bb513c2d0998f424d9ff41afbd69ea</anchor>
      <arglist>(const boost::shared_ptr&lt; Params &gt; &amp;p, const imuBias::ConstantBias &amp;biasHat=imuBias::ConstantBias())</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~TangentPreintegration</name>
      <anchorfile>a03551.html</anchorfile>
      <anchor>a51d99f2eeee8982b57a2a3c386aa71a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>TangentPreintegration</name>
      <anchorfile>a03551.html</anchorfile>
      <anchor>ab0683675722a4b8774b08f4f23538a33</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Vector9</type>
      <name>preintegrated_</name>
      <anchorfile>a03551.html</anchorfile>
      <anchor>aa35dd8359cdcc5adf12b79602f6f1f11</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Matrix93</type>
      <name>preintegrated_H_biasAcc_</name>
      <anchorfile>a03551.html</anchorfile>
      <anchor>ace8fc0be6d82355b59de1376708185af</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Matrix93</type>
      <name>preintegrated_H_biasOmega_</name>
      <anchorfile>a03551.html</anchorfile>
      <anchor>a610e8d7b5615146efd0ae18fe984f1a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>boost::serialization::access</name>
      <anchorfile>a03551.html</anchorfile>
      <anchor>ac98d07dd8f7b70e16ccb9a01abf56b9c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::TbbOpenMPMixedScope</name>
    <filename>a02267.html</filename>
  </compound>
  <compound kind="struct">
    <name>gtsam::Expression::TernaryFunction</name>
    <filename>a03607.html</filename>
    <templarg>A1</templarg>
    <templarg>A2</templarg>
    <templarg>A3</templarg>
  </compound>
  <compound kind="struct">
    <name>gtsam::Testable</name>
    <filename>a02203.html</filename>
    <templarg>T</templarg>
  </compound>
  <compound kind="class">
    <name>Testable&lt; BearingFactor&lt; A1, A2, T &gt; &gt;</name>
    <filename>a02203.html</filename>
  </compound>
  <compound kind="class">
    <name>Testable&lt; BearingRange&lt; A1, A2 &gt; &gt;</name>
    <filename>a02203.html</filename>
  </compound>
  <compound kind="class">
    <name>Testable&lt; BearingRangeFactor&lt; A1, A2, B, R &gt; &gt;</name>
    <filename>a02203.html</filename>
  </compound>
  <compound kind="class">
    <name>Testable&lt; BetweenConstraint&lt; VALUE &gt; &gt;</name>
    <filename>a02203.html</filename>
  </compound>
  <compound kind="class">
    <name>Testable&lt; BetweenFactor&lt; VALUE &gt; &gt;</name>
    <filename>a02203.html</filename>
  </compound>
  <compound kind="class">
    <name>Testable&lt; BinaryJacobianFactor&lt; M, N1, N2 &gt; &gt;</name>
    <filename>a02203.html</filename>
  </compound>
  <compound kind="class">
    <name>Testable&lt; Cal3_S2 &gt;</name>
    <filename>a02203.html</filename>
  </compound>
  <compound kind="class">
    <name>Testable&lt; Cal3_S2Stereo &gt;</name>
    <filename>a02203.html</filename>
  </compound>
  <compound kind="class">
    <name>Testable&lt; Cal3Bundler &gt;</name>
    <filename>a02203.html</filename>
  </compound>
  <compound kind="class">
    <name>Testable&lt; Cal3DS2 &gt;</name>
    <filename>a02203.html</filename>
  </compound>
  <compound kind="class">
    <name>Testable&lt; Cal3Unified &gt;</name>
    <filename>a02203.html</filename>
  </compound>
  <compound kind="class">
    <name>Testable&lt; CalibratedCamera &gt;</name>
    <filename>a02203.html</filename>
  </compound>
  <compound kind="class">
    <name>Testable&lt; CameraSet&lt; CAMERA &gt; &gt;</name>
    <filename>a02203.html</filename>
  </compound>
  <compound kind="class">
    <name>Testable&lt; Class &gt;</name>
    <filename>a02203.html</filename>
  </compound>
  <compound kind="class">
    <name>Testable&lt; ConcurrentBatchFilter &gt;</name>
    <filename>a02203.html</filename>
  </compound>
  <compound kind="class">
    <name>Testable&lt; ConcurrentBatchSmoother &gt;</name>
    <filename>a02203.html</filename>
  </compound>
  <compound kind="class">
    <name>Testable&lt; ConcurrentIncrementalFilter &gt;</name>
    <filename>a02203.html</filename>
  </compound>
  <compound kind="class">
    <name>Testable&lt; ConcurrentIncrementalSmoother &gt;</name>
    <filename>a02203.html</filename>
  </compound>
  <compound kind="class">
    <name>Testable&lt; Cyclic&lt; N &gt; &gt;</name>
    <filename>a02203.html</filename>
  </compound>
  <compound kind="class">
    <name>Testable&lt; DecisionTreeFactor &gt;</name>
    <filename>a02203.html</filename>
  </compound>
  <compound kind="class">
    <name>Testable&lt; DiscreteBayesNet &gt;</name>
    <filename>a02203.html</filename>
  </compound>
  <compound kind="class">
    <name>Testable&lt; DiscreteConditional &gt;</name>
    <filename>a02203.html</filename>
  </compound>
  <compound kind="class">
    <name>Testable&lt; DiscreteFactor &gt;</name>
    <filename>a02203.html</filename>
  </compound>
  <compound kind="class">
    <name>Testable&lt; DiscreteFactor::Values &gt;</name>
    <filename>a02203.html</filename>
  </compound>
  <compound kind="class">
    <name>Testable&lt; DiscreteFactorGraph &gt;</name>
    <filename>a02203.html</filename>
  </compound>
  <compound kind="class">
    <name>Testable&lt; EqualityFactorGraph &gt;</name>
    <filename>a02203.html</filename>
  </compound>
  <compound kind="class">
    <name>Testable&lt; Errors &gt;</name>
    <filename>a02203.html</filename>
  </compound>
  <compound kind="class">
    <name>Testable&lt; EssentialMatrix &gt;</name>
    <filename>a02203.html</filename>
  </compound>
  <compound kind="class">
    <name>Testable&lt; ExpressionFactor&lt; T &gt; &gt;</name>
    <filename>a02203.html</filename>
  </compound>
  <compound kind="class">
    <name>Testable&lt; GaussianBayesNet &gt;</name>
    <filename>a02203.html</filename>
  </compound>
  <compound kind="class">
    <name>Testable&lt; GaussianBayesTree &gt;</name>
    <filename>a02203.html</filename>
  </compound>
  <compound kind="class">
    <name>Testable&lt; GaussianConditional &gt;</name>
    <filename>a02203.html</filename>
  </compound>
  <compound kind="class">
    <name>Testable&lt; GaussianFactor &gt;</name>
    <filename>a02203.html</filename>
  </compound>
  <compound kind="class">
    <name>Testable&lt; GaussianFactorGraph &gt;</name>
    <filename>a02203.html</filename>
  </compound>
  <compound kind="class">
    <name>Testable&lt; GaussMarkov1stOrderFactor&lt; VALUE &gt; &gt;</name>
    <filename>a02203.html</filename>
  </compound>
  <compound kind="class">
    <name>Testable&lt; GeneralSFMFactor2&lt; CALIBRATION &gt; &gt;</name>
    <filename>a02203.html</filename>
  </compound>
  <compound kind="class">
    <name>Testable&lt; GeneralSFMFactor&lt; CAMERA, LANDMARK &gt; &gt;</name>
    <filename>a02203.html</filename>
  </compound>
  <compound kind="class">
    <name>Testable&lt; GenericProjectionFactor&lt; POSE, LANDMARK, CALIBRATION &gt; &gt;</name>
    <filename>a02203.html</filename>
  </compound>
  <compound kind="class">
    <name>Testable&lt; GenericStereoFactor&lt; T1, T2 &gt; &gt;</name>
    <filename>a02203.html</filename>
  </compound>
  <compound kind="class">
    <name>Testable&lt; GenericValue&lt; ValueType &gt; &gt;</name>
    <filename>a02203.html</filename>
  </compound>
  <compound kind="class">
    <name>Testable&lt; HessianFactor &gt;</name>
    <filename>a02203.html</filename>
  </compound>
  <compound kind="class">
    <name>Testable&lt; imuBias::ConstantBias &gt;</name>
    <filename>a02203.html</filename>
  </compound>
  <compound kind="class">
    <name>Testable&lt; ImuFactor &gt;</name>
    <filename>a02203.html</filename>
  </compound>
  <compound kind="class">
    <name>Testable&lt; ImuFactor2 &gt;</name>
    <filename>a02203.html</filename>
  </compound>
  <compound kind="class">
    <name>Testable&lt; InequalityFactorGraph &gt;</name>
    <filename>a02203.html</filename>
  </compound>
  <compound kind="class">
    <name>Testable&lt; InertialNavFactor_GlobalVelocity&lt; POSE, VELOCITY, IMUBIAS &gt; &gt;</name>
    <filename>a02203.html</filename>
  </compound>
  <compound kind="class">
    <name>Testable&lt; ISAM2 &gt;</name>
    <filename>a02203.html</filename>
  </compound>
  <compound kind="class">
    <name>Testable&lt; JacobianFactor &gt;</name>
    <filename>a02203.html</filename>
  </compound>
  <compound kind="class">
    <name>Testable&lt; JacobianFactorQ&lt; D, ZDim &gt; &gt;</name>
    <filename>a02203.html</filename>
  </compound>
  <compound kind="class">
    <name>Testable&lt; LabeledSymbol &gt;</name>
    <filename>a02203.html</filename>
  </compound>
  <compound kind="class">
    <name>Testable&lt; LinearContainerFactor &gt;</name>
    <filename>a02203.html</filename>
  </compound>
  <compound kind="class">
    <name>Testable&lt; LinearCost &gt;</name>
    <filename>a02203.html</filename>
  </compound>
  <compound kind="class">
    <name>Testable&lt; LinearEquality &gt;</name>
    <filename>a02203.html</filename>
  </compound>
  <compound kind="class">
    <name>Testable&lt; LinearInequality &gt;</name>
    <filename>a02203.html</filename>
  </compound>
  <compound kind="class">
    <name>Testable&lt; LinearizedHessianFactor &gt;</name>
    <filename>a02203.html</filename>
  </compound>
  <compound kind="class">
    <name>Testable&lt; LinearizedJacobianFactor &gt;</name>
    <filename>a02203.html</filename>
  </compound>
  <compound kind="class">
    <name>Testable&lt; LP &gt;</name>
    <filename>a02203.html</filename>
  </compound>
  <compound kind="class">
    <name>Testable&lt; NavState &gt;</name>
    <filename>a02203.html</filename>
  </compound>
  <compound kind="class">
    <name>Testable&lt; noiseModel::Constrained &gt;</name>
    <filename>a02203.html</filename>
  </compound>
  <compound kind="class">
    <name>Testable&lt; noiseModel::Diagonal &gt;</name>
    <filename>a02203.html</filename>
  </compound>
  <compound kind="class">
    <name>Testable&lt; noiseModel::Gaussian &gt;</name>
    <filename>a02203.html</filename>
  </compound>
  <compound kind="class">
    <name>Testable&lt; noiseModel::Isotropic &gt;</name>
    <filename>a02203.html</filename>
  </compound>
  <compound kind="class">
    <name>Testable&lt; noiseModel::Unit &gt;</name>
    <filename>a02203.html</filename>
  </compound>
  <compound kind="class">
    <name>Testable&lt; NonlinearEquality1&lt; VALUE &gt; &gt;</name>
    <filename>a02203.html</filename>
  </compound>
  <compound kind="class">
    <name>Testable&lt; NonlinearEquality2&lt; VALUE &gt; &gt;</name>
    <filename>a02203.html</filename>
  </compound>
  <compound kind="class">
    <name>Testable&lt; NonlinearEquality&lt; VALUE &gt; &gt;</name>
    <filename>a02203.html</filename>
  </compound>
  <compound kind="class">
    <name>Testable&lt; NonlinearFactor &gt;</name>
    <filename>a02203.html</filename>
  </compound>
  <compound kind="class">
    <name>Testable&lt; NonlinearFactorGraph &gt;</name>
    <filename>a02203.html</filename>
  </compound>
  <compound kind="class">
    <name>Testable&lt; Ordering &gt;</name>
    <filename>a02203.html</filename>
  </compound>
  <compound kind="class">
    <name>Testable&lt; OrientedPlane3 &gt;</name>
    <filename>a02203.html</filename>
  </compound>
  <compound kind="class">
    <name>Testable&lt; PinholeCamera&lt; Calibration &gt; &gt;</name>
    <filename>a02203.html</filename>
  </compound>
  <compound kind="class">
    <name>Testable&lt; PinholePose&lt; CALIBRATION &gt; &gt;</name>
    <filename>a02203.html</filename>
  </compound>
  <compound kind="class">
    <name>Testable&lt; PinholeSet&lt; CAMERA &gt; &gt;</name>
    <filename>a02203.html</filename>
  </compound>
  <compound kind="class">
    <name>Testable&lt; Point2 &gt;</name>
    <filename>a02203.html</filename>
  </compound>
  <compound kind="class">
    <name>Testable&lt; Point3 &gt;</name>
    <filename>a02203.html</filename>
  </compound>
  <compound kind="class">
    <name>Testable&lt; Pose2 &gt;</name>
    <filename>a02203.html</filename>
  </compound>
  <compound kind="class">
    <name>Testable&lt; Pose3 &gt;</name>
    <filename>a02203.html</filename>
  </compound>
  <compound kind="class">
    <name>Testable&lt; Pose3AttitudeFactor &gt;</name>
    <filename>a02203.html</filename>
  </compound>
  <compound kind="class">
    <name>Testable&lt; PoseRTV &gt;</name>
    <filename>a02203.html</filename>
  </compound>
  <compound kind="class">
    <name>Testable&lt; Potentials &gt;</name>
    <filename>a02203.html</filename>
  </compound>
  <compound kind="class">
    <name>Testable&lt; Potentials::ADT &gt;</name>
    <filename>a02203.html</filename>
  </compound>
  <compound kind="class">
    <name>Testable&lt; PreintegratedImuMeasurements &gt;</name>
    <filename>a02203.html</filename>
  </compound>
  <compound kind="class">
    <name>Testable&lt; PreintegratedRotation &gt;</name>
    <filename>a02203.html</filename>
  </compound>
  <compound kind="class">
    <name>Testable&lt; ProjectionFactorPPP&lt; POSE, LANDMARK, CALIBRATION &gt; &gt;</name>
    <filename>a02203.html</filename>
  </compound>
  <compound kind="class">
    <name>Testable&lt; ProjectionFactorPPPC&lt; POSE, LANDMARK, CALIBRATION &gt; &gt;</name>
    <filename>a02203.html</filename>
  </compound>
  <compound kind="class">
    <name>Testable&lt; RangeFactor&lt; A1, A2, T &gt; &gt;</name>
    <filename>a02203.html</filename>
  </compound>
  <compound kind="class">
    <name>Testable&lt; RangeFactorWithTransform&lt; A1, A2, T &gt; &gt;</name>
    <filename>a02203.html</filename>
  </compound>
  <compound kind="class">
    <name>Testable&lt; ReferenceFrameFactor&lt; T1, T2 &gt; &gt;</name>
    <filename>a02203.html</filename>
  </compound>
  <compound kind="class">
    <name>Testable&lt; RegularHessianFactor&lt; D &gt; &gt;</name>
    <filename>a02203.html</filename>
  </compound>
  <compound kind="class">
    <name>Testable&lt; RegularImplicitSchurFactor&lt; CAMERA &gt; &gt;</name>
    <filename>a02203.html</filename>
  </compound>
  <compound kind="class">
    <name>Testable&lt; Rot2 &gt;</name>
    <filename>a02203.html</filename>
  </compound>
  <compound kind="class">
    <name>Testable&lt; Rot3 &gt;</name>
    <filename>a02203.html</filename>
  </compound>
  <compound kind="class">
    <name>Testable&lt; Rot3AttitudeFactor &gt;</name>
    <filename>a02203.html</filename>
  </compound>
  <compound kind="class">
    <name>Testable&lt; SimpleCamera &gt;</name>
    <filename>a02203.html</filename>
  </compound>
  <compound kind="class">
    <name>Testable&lt; SmartProjectionFactor&lt; CAMERA &gt; &gt;</name>
    <filename>a02203.html</filename>
  </compound>
  <compound kind="class">
    <name>Testable&lt; SmartProjectionPoseFactor&lt; CALIBRATION &gt; &gt;</name>
    <filename>a02203.html</filename>
  </compound>
  <compound kind="class">
    <name>Testable&lt; SmartStereoProjectionFactor &gt;</name>
    <filename>a02203.html</filename>
  </compound>
  <compound kind="class">
    <name>Testable&lt; SmartStereoProjectionPoseFactor &gt;</name>
    <filename>a02203.html</filename>
  </compound>
  <compound kind="class">
    <name>Testable&lt; SO3 &gt;</name>
    <filename>a02203.html</filename>
  </compound>
  <compound kind="class">
    <name>Testable&lt; StereoCamera &gt;</name>
    <filename>a02203.html</filename>
  </compound>
  <compound kind="class">
    <name>Testable&lt; StereoPoint2 &gt;</name>
    <filename>a02203.html</filename>
  </compound>
  <compound kind="class">
    <name>Testable&lt; Symbol &gt;</name>
    <filename>a02203.html</filename>
  </compound>
  <compound kind="class">
    <name>Testable&lt; SymbolicBayesNet &gt;</name>
    <filename>a02203.html</filename>
  </compound>
  <compound kind="class">
    <name>Testable&lt; SymbolicBayesTree &gt;</name>
    <filename>a02203.html</filename>
  </compound>
  <compound kind="class">
    <name>Testable&lt; SymbolicBayesTreeClique &gt;</name>
    <filename>a02203.html</filename>
  </compound>
  <compound kind="class">
    <name>Testable&lt; SymbolicConditional &gt;</name>
    <filename>a02203.html</filename>
  </compound>
  <compound kind="class">
    <name>Testable&lt; SymbolicEliminationTree &gt;</name>
    <filename>a02203.html</filename>
  </compound>
  <compound kind="class">
    <name>Testable&lt; SymbolicFactor &gt;</name>
    <filename>a02203.html</filename>
  </compound>
  <compound kind="class">
    <name>Testable&lt; SymbolicFactorGraph &gt;</name>
    <filename>a02203.html</filename>
  </compound>
  <compound kind="class">
    <name>Testable&lt; TransformBtwRobotsUnaryFactor&lt; VALUE &gt; &gt;</name>
    <filename>a02203.html</filename>
  </compound>
  <compound kind="class">
    <name>Testable&lt; TransformBtwRobotsUnaryFactorEM&lt; VALUE &gt; &gt;</name>
    <filename>a02203.html</filename>
  </compound>
  <compound kind="class">
    <name>Testable&lt; Unit3 &gt;</name>
    <filename>a02203.html</filename>
  </compound>
  <compound kind="class">
    <name>Testable&lt; Values &gt;</name>
    <filename>a02203.html</filename>
  </compound>
  <compound kind="class">
    <name>Testable&lt; VariableIndex &gt;</name>
    <filename>a02203.html</filename>
  </compound>
  <compound kind="class">
    <name>Testable&lt; VariableSlots &gt;</name>
    <filename>a02203.html</filename>
  </compound>
  <compound kind="class">
    <name>Testable&lt; VectorValues &gt;</name>
    <filename>a02203.html</filename>
  </compound>
  <compound kind="class">
    <name>gtsam::ThreadsafeException</name>
    <filename>a02207.html</filename>
    <templarg>DERIVED</templarg>
    <member kind="function" protection="protected">
      <type></type>
      <name>ThreadsafeException</name>
      <anchorfile>a02207.html</anchorfile>
      <anchor>a5e422f39c89802be3c5aaaf65dbfd862</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>ThreadsafeException</name>
      <anchorfile>a02207.html</anchorfile>
      <anchor>a71fe75b345e277c800fb6b5ddba217de</anchor>
      <arglist>(const ThreadsafeException &amp;other)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>ThreadsafeException</name>
      <anchorfile>a02207.html</anchorfile>
      <anchor>a730172f56582e5a56d1fcb93d230d1de</anchor>
      <arglist>(const std::string &amp;description)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~ThreadsafeException</name>
      <anchorfile>a02207.html</anchorfile>
      <anchor>aa538d973cd55ec66a73c3b3b8f70b2ca</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>dynamic_</name>
      <anchorfile>a02207.html</anchorfile>
      <anchor>a4efc6de8e5ea1810c3d32f29a00714c0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>boost::optional&lt; String &gt;</type>
      <name>description_</name>
      <anchorfile>a02207.html</anchorfile>
      <anchor>a8f7ec9cccffe7d666e3a025546377c32</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ThreadsafeException&lt; CheiralityException &gt;</name>
    <filename>a02207.html</filename>
    <member kind="function" protection="protected">
      <type></type>
      <name>ThreadsafeException</name>
      <anchorfile>a02207.html</anchorfile>
      <anchor>a5e422f39c89802be3c5aaaf65dbfd862</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>ThreadsafeException</name>
      <anchorfile>a02207.html</anchorfile>
      <anchor>a71fe75b345e277c800fb6b5ddba217de</anchor>
      <arglist>(const ThreadsafeException &amp;other)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>ThreadsafeException</name>
      <anchorfile>a02207.html</anchorfile>
      <anchor>a730172f56582e5a56d1fcb93d230d1de</anchor>
      <arglist>(const std::string &amp;description)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~ThreadsafeException</name>
      <anchorfile>a02207.html</anchorfile>
      <anchor>aa538d973cd55ec66a73c3b3b8f70b2ca</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>dynamic_</name>
      <anchorfile>a02207.html</anchorfile>
      <anchor>a4efc6de8e5ea1810c3d32f29a00714c0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>boost::optional&lt; String &gt;</type>
      <name>description_</name>
      <anchorfile>a02207.html</anchorfile>
      <anchor>a8f7ec9cccffe7d666e3a025546377c32</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ThreadsafeException&lt; CholeskyFailed &gt;</name>
    <filename>a02207.html</filename>
    <member kind="function" protection="protected">
      <type></type>
      <name>ThreadsafeException</name>
      <anchorfile>a02207.html</anchorfile>
      <anchor>a5e422f39c89802be3c5aaaf65dbfd862</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>ThreadsafeException</name>
      <anchorfile>a02207.html</anchorfile>
      <anchor>a71fe75b345e277c800fb6b5ddba217de</anchor>
      <arglist>(const ThreadsafeException &amp;other)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>ThreadsafeException</name>
      <anchorfile>a02207.html</anchorfile>
      <anchor>a730172f56582e5a56d1fcb93d230d1de</anchor>
      <arglist>(const std::string &amp;description)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~ThreadsafeException</name>
      <anchorfile>a02207.html</anchorfile>
      <anchor>aa538d973cd55ec66a73c3b3b8f70b2ca</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>dynamic_</name>
      <anchorfile>a02207.html</anchorfile>
      <anchor>a4efc6de8e5ea1810c3d32f29a00714c0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>boost::optional&lt; String &gt;</type>
      <name>description_</name>
      <anchorfile>a02207.html</anchorfile>
      <anchor>a8f7ec9cccffe7d666e3a025546377c32</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ThreadsafeException&lt; IndeterminantLinearSystemException &gt;</name>
    <filename>a02207.html</filename>
    <member kind="function" protection="protected">
      <type></type>
      <name>ThreadsafeException</name>
      <anchorfile>a02207.html</anchorfile>
      <anchor>a5e422f39c89802be3c5aaaf65dbfd862</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>ThreadsafeException</name>
      <anchorfile>a02207.html</anchorfile>
      <anchor>a71fe75b345e277c800fb6b5ddba217de</anchor>
      <arglist>(const ThreadsafeException &amp;other)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>ThreadsafeException</name>
      <anchorfile>a02207.html</anchorfile>
      <anchor>a730172f56582e5a56d1fcb93d230d1de</anchor>
      <arglist>(const std::string &amp;description)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~ThreadsafeException</name>
      <anchorfile>a02207.html</anchorfile>
      <anchor>aa538d973cd55ec66a73c3b3b8f70b2ca</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>dynamic_</name>
      <anchorfile>a02207.html</anchorfile>
      <anchor>a4efc6de8e5ea1810c3d32f29a00714c0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>boost::optional&lt; String &gt;</type>
      <name>description_</name>
      <anchorfile>a02207.html</anchorfile>
      <anchor>a8f7ec9cccffe7d666e3a025546377c32</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ThreadsafeException&lt; InfeasibleInitialValues &gt;</name>
    <filename>a02207.html</filename>
    <member kind="function" protection="protected">
      <type></type>
      <name>ThreadsafeException</name>
      <anchorfile>a02207.html</anchorfile>
      <anchor>a5e422f39c89802be3c5aaaf65dbfd862</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>ThreadsafeException</name>
      <anchorfile>a02207.html</anchorfile>
      <anchor>a71fe75b345e277c800fb6b5ddba217de</anchor>
      <arglist>(const ThreadsafeException &amp;other)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>ThreadsafeException</name>
      <anchorfile>a02207.html</anchorfile>
      <anchor>a730172f56582e5a56d1fcb93d230d1de</anchor>
      <arglist>(const std::string &amp;description)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~ThreadsafeException</name>
      <anchorfile>a02207.html</anchorfile>
      <anchor>aa538d973cd55ec66a73c3b3b8f70b2ca</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>dynamic_</name>
      <anchorfile>a02207.html</anchorfile>
      <anchor>a4efc6de8e5ea1810c3d32f29a00714c0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>boost::optional&lt; String &gt;</type>
      <name>description_</name>
      <anchorfile>a02207.html</anchorfile>
      <anchor>a8f7ec9cccffe7d666e3a025546377c32</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ThreadsafeException&lt; InfeasibleOrUnboundedProblem &gt;</name>
    <filename>a02207.html</filename>
    <member kind="function" protection="protected">
      <type></type>
      <name>ThreadsafeException</name>
      <anchorfile>a02207.html</anchorfile>
      <anchor>a5e422f39c89802be3c5aaaf65dbfd862</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>ThreadsafeException</name>
      <anchorfile>a02207.html</anchorfile>
      <anchor>a71fe75b345e277c800fb6b5ddba217de</anchor>
      <arglist>(const ThreadsafeException &amp;other)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>ThreadsafeException</name>
      <anchorfile>a02207.html</anchorfile>
      <anchor>a730172f56582e5a56d1fcb93d230d1de</anchor>
      <arglist>(const std::string &amp;description)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~ThreadsafeException</name>
      <anchorfile>a02207.html</anchorfile>
      <anchor>aa538d973cd55ec66a73c3b3b8f70b2ca</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>dynamic_</name>
      <anchorfile>a02207.html</anchorfile>
      <anchor>a4efc6de8e5ea1810c3d32f29a00714c0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>boost::optional&lt; String &gt;</type>
      <name>description_</name>
      <anchorfile>a02207.html</anchorfile>
      <anchor>a8f7ec9cccffe7d666e3a025546377c32</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ThreadsafeException&lt; InvalidArgumentThreadsafe &gt;</name>
    <filename>a02207.html</filename>
    <member kind="function" protection="protected">
      <type></type>
      <name>ThreadsafeException</name>
      <anchorfile>a02207.html</anchorfile>
      <anchor>a5e422f39c89802be3c5aaaf65dbfd862</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>ThreadsafeException</name>
      <anchorfile>a02207.html</anchorfile>
      <anchor>a71fe75b345e277c800fb6b5ddba217de</anchor>
      <arglist>(const ThreadsafeException &amp;other)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>ThreadsafeException</name>
      <anchorfile>a02207.html</anchorfile>
      <anchor>a730172f56582e5a56d1fcb93d230d1de</anchor>
      <arglist>(const std::string &amp;description)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~ThreadsafeException</name>
      <anchorfile>a02207.html</anchorfile>
      <anchor>aa538d973cd55ec66a73c3b3b8f70b2ca</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>dynamic_</name>
      <anchorfile>a02207.html</anchorfile>
      <anchor>a4efc6de8e5ea1810c3d32f29a00714c0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>boost::optional&lt; String &gt;</type>
      <name>description_</name>
      <anchorfile>a02207.html</anchorfile>
      <anchor>a8f7ec9cccffe7d666e3a025546377c32</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ThreadsafeException&lt; InvalidDenseElimination &gt;</name>
    <filename>a02207.html</filename>
    <member kind="function" protection="protected">
      <type></type>
      <name>ThreadsafeException</name>
      <anchorfile>a02207.html</anchorfile>
      <anchor>a5e422f39c89802be3c5aaaf65dbfd862</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>ThreadsafeException</name>
      <anchorfile>a02207.html</anchorfile>
      <anchor>a71fe75b345e277c800fb6b5ddba217de</anchor>
      <arglist>(const ThreadsafeException &amp;other)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>ThreadsafeException</name>
      <anchorfile>a02207.html</anchorfile>
      <anchor>a730172f56582e5a56d1fcb93d230d1de</anchor>
      <arglist>(const std::string &amp;description)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~ThreadsafeException</name>
      <anchorfile>a02207.html</anchorfile>
      <anchor>aa538d973cd55ec66a73c3b3b8f70b2ca</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>dynamic_</name>
      <anchorfile>a02207.html</anchorfile>
      <anchor>a4efc6de8e5ea1810c3d32f29a00714c0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>boost::optional&lt; String &gt;</type>
      <name>description_</name>
      <anchorfile>a02207.html</anchorfile>
      <anchor>a8f7ec9cccffe7d666e3a025546377c32</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ThreadsafeException&lt; InvalidMatrixBlock &gt;</name>
    <filename>a02207.html</filename>
    <member kind="function" protection="protected">
      <type></type>
      <name>ThreadsafeException</name>
      <anchorfile>a02207.html</anchorfile>
      <anchor>a5e422f39c89802be3c5aaaf65dbfd862</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>ThreadsafeException</name>
      <anchorfile>a02207.html</anchorfile>
      <anchor>a71fe75b345e277c800fb6b5ddba217de</anchor>
      <arglist>(const ThreadsafeException &amp;other)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>ThreadsafeException</name>
      <anchorfile>a02207.html</anchorfile>
      <anchor>a730172f56582e5a56d1fcb93d230d1de</anchor>
      <arglist>(const std::string &amp;description)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~ThreadsafeException</name>
      <anchorfile>a02207.html</anchorfile>
      <anchor>aa538d973cd55ec66a73c3b3b8f70b2ca</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>dynamic_</name>
      <anchorfile>a02207.html</anchorfile>
      <anchor>a4efc6de8e5ea1810c3d32f29a00714c0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>boost::optional&lt; String &gt;</type>
      <name>description_</name>
      <anchorfile>a02207.html</anchorfile>
      <anchor>a8f7ec9cccffe7d666e3a025546377c32</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ThreadsafeException&lt; InvalidNoiseModel &gt;</name>
    <filename>a02207.html</filename>
    <member kind="function" protection="protected">
      <type></type>
      <name>ThreadsafeException</name>
      <anchorfile>a02207.html</anchorfile>
      <anchor>a5e422f39c89802be3c5aaaf65dbfd862</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>ThreadsafeException</name>
      <anchorfile>a02207.html</anchorfile>
      <anchor>a71fe75b345e277c800fb6b5ddba217de</anchor>
      <arglist>(const ThreadsafeException &amp;other)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>ThreadsafeException</name>
      <anchorfile>a02207.html</anchorfile>
      <anchor>a730172f56582e5a56d1fcb93d230d1de</anchor>
      <arglist>(const std::string &amp;description)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~ThreadsafeException</name>
      <anchorfile>a02207.html</anchorfile>
      <anchor>aa538d973cd55ec66a73c3b3b8f70b2ca</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>dynamic_</name>
      <anchorfile>a02207.html</anchorfile>
      <anchor>a4efc6de8e5ea1810c3d32f29a00714c0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>boost::optional&lt; String &gt;</type>
      <name>description_</name>
      <anchorfile>a02207.html</anchorfile>
      <anchor>a8f7ec9cccffe7d666e3a025546377c32</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ThreadsafeException&lt; OutOfRangeThreadsafe &gt;</name>
    <filename>a02207.html</filename>
    <member kind="function" protection="protected">
      <type></type>
      <name>ThreadsafeException</name>
      <anchorfile>a02207.html</anchorfile>
      <anchor>a5e422f39c89802be3c5aaaf65dbfd862</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>ThreadsafeException</name>
      <anchorfile>a02207.html</anchorfile>
      <anchor>a71fe75b345e277c800fb6b5ddba217de</anchor>
      <arglist>(const ThreadsafeException &amp;other)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>ThreadsafeException</name>
      <anchorfile>a02207.html</anchorfile>
      <anchor>a730172f56582e5a56d1fcb93d230d1de</anchor>
      <arglist>(const std::string &amp;description)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~ThreadsafeException</name>
      <anchorfile>a02207.html</anchorfile>
      <anchor>aa538d973cd55ec66a73c3b3b8f70b2ca</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>dynamic_</name>
      <anchorfile>a02207.html</anchorfile>
      <anchor>a4efc6de8e5ea1810c3d32f29a00714c0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>boost::optional&lt; String &gt;</type>
      <name>description_</name>
      <anchorfile>a02207.html</anchorfile>
      <anchor>a8f7ec9cccffe7d666e3a025546377c32</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ThreadsafeException&lt; QPSParserException &gt;</name>
    <filename>a02207.html</filename>
    <member kind="function" protection="protected">
      <type></type>
      <name>ThreadsafeException</name>
      <anchorfile>a02207.html</anchorfile>
      <anchor>a5e422f39c89802be3c5aaaf65dbfd862</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>ThreadsafeException</name>
      <anchorfile>a02207.html</anchorfile>
      <anchor>a71fe75b345e277c800fb6b5ddba217de</anchor>
      <arglist>(const ThreadsafeException &amp;other)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>ThreadsafeException</name>
      <anchorfile>a02207.html</anchorfile>
      <anchor>a730172f56582e5a56d1fcb93d230d1de</anchor>
      <arglist>(const std::string &amp;description)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~ThreadsafeException</name>
      <anchorfile>a02207.html</anchorfile>
      <anchor>aa538d973cd55ec66a73c3b3b8f70b2ca</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>dynamic_</name>
      <anchorfile>a02207.html</anchorfile>
      <anchor>a4efc6de8e5ea1810c3d32f29a00714c0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>boost::optional&lt; String &gt;</type>
      <name>description_</name>
      <anchorfile>a02207.html</anchorfile>
      <anchor>a8f7ec9cccffe7d666e3a025546377c32</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ThreadsafeException&lt; RuntimeErrorThreadsafe &gt;</name>
    <filename>a02207.html</filename>
    <member kind="function" protection="protected">
      <type></type>
      <name>ThreadsafeException</name>
      <anchorfile>a02207.html</anchorfile>
      <anchor>a5e422f39c89802be3c5aaaf65dbfd862</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>ThreadsafeException</name>
      <anchorfile>a02207.html</anchorfile>
      <anchor>a71fe75b345e277c800fb6b5ddba217de</anchor>
      <arglist>(const ThreadsafeException &amp;other)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>ThreadsafeException</name>
      <anchorfile>a02207.html</anchorfile>
      <anchor>a730172f56582e5a56d1fcb93d230d1de</anchor>
      <arglist>(const std::string &amp;description)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual</type>
      <name>~ThreadsafeException</name>
      <anchorfile>a02207.html</anchorfile>
      <anchor>aa538d973cd55ec66a73c3b3b8f70b2ca</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>dynamic_</name>
      <anchorfile>a02207.html</anchorfile>
      <anchor>a4efc6de8e5ea1810c3d32f29a00714c0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>boost::optional&lt; String &gt;</type>
      <name>description_</name>
      <anchorfile>a02207.html</anchorfile>
      <anchor>a8f7ec9cccffe7d666e3a025546377c32</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::internal::TimingOutline</name>
    <filename>a02227.html</filename>
    <member kind="function">
      <type></type>
      <name>TimingOutline</name>
      <anchorfile>a02227.html</anchorfile>
      <anchor>aaf71bcd586bc33bd38e9db2a8f59614a</anchor>
      <arglist>(const std::string &amp;label, size_t myId)</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>time</name>
      <anchorfile>a02227.html</anchorfile>
      <anchor>ae6e021b0b7b9d4e4e95aa65ac5b95637</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>secs</name>
      <anchorfile>a02227.html</anchorfile>
      <anchor>a5f6bd0d92720bb07ead3c590b7483fb9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>self</name>
      <anchorfile>a02227.html</anchorfile>
      <anchor>a8c699a69c7d0708ffa2047f78c3c5ba4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>wall</name>
      <anchorfile>a02227.html</anchorfile>
      <anchor>a49254714ef87b36c03442065c9ca557c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>min</name>
      <anchorfile>a02227.html</anchorfile>
      <anchor>acdeff50555c404cfaed4d9e49722e673</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>max</name>
      <anchorfile>a02227.html</anchorfile>
      <anchor>a259f57a09ca2012a5987cabe35514604</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>mean</name>
      <anchorfile>a02227.html</anchorfile>
      <anchor>adfd8ce6ab7a1b7b8f844ef9fc1337d41</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>t2_</name>
      <anchorfile>a02227.html</anchorfile>
      <anchor>a10bc532260daa8d7372c289c1c2ecb17</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>boost::weak_ptr&lt; TimingOutline &gt;</type>
      <name>parent_</name>
      <anchorfile>a02227.html</anchorfile>
      <anchor>abec6041cac884177b3345c59c4b875b3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ChildMap</type>
      <name>children_</name>
      <anchorfile>a02227.html</anchorfile>
      <anchor>a1cbcbaea2438a8c1f36f19c46c7ca69b</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::TOAFactor</name>
    <filename>a04567.html</filename>
    <base>ExpressionFactor&lt; double &gt;</base>
    <member kind="function">
      <type></type>
      <name>TOAFactor</name>
      <anchorfile>a04567.html</anchorfile>
      <anchor>a996c6c1b53d56846504637d93a583934</anchor>
      <arglist>(const Expression&lt; Event &gt; &amp;eventExpression, const Expression&lt; Point3 &gt; &amp;microphone_, double toaMeasurement, const SharedNoiseModel &amp;model)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>gtsam::traits</name>
    <filename>a01987.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>gtsam::traits&lt; BearingFactor&lt; A1, A2, T &gt; &gt;</name>
    <filename>a03915.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <base>Testable&lt; BearingFactor&lt; A1, A2, T &gt; &gt;</base>
  </compound>
  <compound kind="struct">
    <name>gtsam::traits&lt; BearingRange&lt; A1, A2 &gt; &gt;</name>
    <filename>a02471.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <base>Testable&lt; BearingRange&lt; A1, A2 &gt; &gt;</base>
    <base>ManifoldTraits&lt; BearingRange&lt; A1, A2 &gt; &gt;</base>
  </compound>
  <compound kind="struct">
    <name>gtsam::traits&lt; BearingRangeFactor&lt; A1, A2, B, R &gt; &gt;</name>
    <filename>a03923.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <base>Testable&lt; BearingRangeFactor&lt; A1, A2, B, R &gt; &gt;</base>
  </compound>
  <compound kind="struct">
    <name>gtsam::traits&lt; BetweenConstraint&lt; VALUE &gt; &gt;</name>
    <filename>a03959.html</filename>
    <templarg></templarg>
    <base>Testable&lt; BetweenConstraint&lt; VALUE &gt; &gt;</base>
  </compound>
  <compound kind="struct">
    <name>gtsam::traits&lt; BetweenFactor&lt; VALUE &gt; &gt;</name>
    <filename>a03951.html</filename>
    <templarg></templarg>
    <base>Testable&lt; BetweenFactor&lt; VALUE &gt; &gt;</base>
  </compound>
  <compound kind="struct">
    <name>gtsam::traits&lt; BinaryJacobianFactor&lt; M, N1, N2 &gt; &gt;</name>
    <filename>a03067.html</filename>
    <templarg>M</templarg>
    <templarg>N1</templarg>
    <templarg>N2</templarg>
    <base>Testable&lt; BinaryJacobianFactor&lt; M, N1, N2 &gt; &gt;</base>
  </compound>
  <compound kind="struct">
    <name>gtsam::traits&lt; Cal3_S2 &gt;</name>
    <filename>a02487.html</filename>
    <base>Manifold&lt; Cal3_S2 &gt;</base>
  </compound>
  <compound kind="struct">
    <name>gtsam::traits&lt; Cal3_S2Stereo &gt;</name>
    <filename>a02499.html</filename>
    <base>Manifold&lt; Cal3_S2Stereo &gt;</base>
  </compound>
  <compound kind="struct">
    <name>gtsam::traits&lt; Cal3Bundler &gt;</name>
    <filename>a02511.html</filename>
    <base>Manifold&lt; Cal3Bundler &gt;</base>
  </compound>
  <compound kind="struct">
    <name>gtsam::traits&lt; Cal3DS2 &gt;</name>
    <filename>a02523.html</filename>
    <base>Manifold&lt; Cal3DS2 &gt;</base>
  </compound>
  <compound kind="struct">
    <name>gtsam::traits&lt; Cal3Unified &gt;</name>
    <filename>a02539.html</filename>
    <base>Manifold&lt; Cal3Unified &gt;</base>
  </compound>
  <compound kind="struct">
    <name>gtsam::traits&lt; CalibratedCamera &gt;</name>
    <filename>a02559.html</filename>
    <base>Manifold&lt; CalibratedCamera &gt;</base>
  </compound>
  <compound kind="struct">
    <name>gtsam::traits&lt; CameraSet&lt; CAMERA &gt; &gt;</name>
    <filename>a02575.html</filename>
    <templarg></templarg>
    <base>Testable&lt; CameraSet&lt; CAMERA &gt; &gt;</base>
  </compound>
  <compound kind="struct">
    <name>gtsam::traits&lt; ConcurrentBatchFilter &gt;</name>
    <filename>a04355.html</filename>
    <base>Testable&lt; ConcurrentBatchFilter &gt;</base>
  </compound>
  <compound kind="struct">
    <name>gtsam::traits&lt; ConcurrentBatchSmoother &gt;</name>
    <filename>a04367.html</filename>
    <base>Testable&lt; ConcurrentBatchSmoother &gt;</base>
  </compound>
  <compound kind="struct">
    <name>gtsam::traits&lt; ConcurrentIncrementalFilter &gt;</name>
    <filename>a04387.html</filename>
    <base>Testable&lt; ConcurrentIncrementalFilter &gt;</base>
  </compound>
  <compound kind="struct">
    <name>gtsam::traits&lt; ConcurrentIncrementalSmoother &gt;</name>
    <filename>a04399.html</filename>
    <base>Testable&lt; ConcurrentIncrementalSmoother &gt;</base>
  </compound>
  <compound kind="struct">
    <name>gtsam::traits&lt; const Cal3_S2 &gt;</name>
    <filename>a02491.html</filename>
    <base>Manifold&lt; Cal3_S2 &gt;</base>
  </compound>
  <compound kind="struct">
    <name>gtsam::traits&lt; const Cal3_S2Stereo &gt;</name>
    <filename>a02503.html</filename>
    <base>Manifold&lt; Cal3_S2Stereo &gt;</base>
  </compound>
  <compound kind="struct">
    <name>gtsam::traits&lt; const Cal3Bundler &gt;</name>
    <filename>a02515.html</filename>
    <base>Manifold&lt; Cal3Bundler &gt;</base>
  </compound>
  <compound kind="struct">
    <name>gtsam::traits&lt; const Cal3DS2 &gt;</name>
    <filename>a02527.html</filename>
    <base>Manifold&lt; Cal3DS2 &gt;</base>
  </compound>
  <compound kind="struct">
    <name>gtsam::traits&lt; const Cal3Unified &gt;</name>
    <filename>a02543.html</filename>
    <base>Manifold&lt; Cal3Unified &gt;</base>
  </compound>
  <compound kind="struct">
    <name>gtsam::traits&lt; const CalibratedCamera &gt;</name>
    <filename>a02563.html</filename>
    <base>Manifold&lt; CalibratedCamera &gt;</base>
  </compound>
  <compound kind="struct">
    <name>gtsam::traits&lt; const CameraSet&lt; CAMERA &gt; &gt;</name>
    <filename>a02579.html</filename>
    <templarg></templarg>
    <base>Testable&lt; CameraSet&lt; CAMERA &gt; &gt;</base>
  </compound>
  <compound kind="struct">
    <name>gtsam::traits&lt; const EssentialMatrix &gt;</name>
    <filename>a02603.html</filename>
    <base>Manifold&lt; EssentialMatrix &gt;</base>
  </compound>
  <compound kind="struct">
    <name>gtsam::traits&lt; const OrientedPlane3 &gt;</name>
    <filename>a02615.html</filename>
    <base>Manifold&lt; OrientedPlane3 &gt;</base>
  </compound>
  <compound kind="struct">
    <name>gtsam::traits&lt; const PinholeCamera&lt; Calibration &gt; &gt;</name>
    <filename>a02627.html</filename>
    <templarg></templarg>
    <base>Manifold&lt; PinholeCamera&lt; Calibration &gt; &gt;</base>
  </compound>
  <compound kind="struct">
    <name>gtsam::traits&lt; const PinholePose&lt; CALIBRATION &gt; &gt;</name>
    <filename>a02647.html</filename>
    <templarg></templarg>
    <base>Manifold&lt; PinholePose&lt; CALIBRATION &gt; &gt;</base>
  </compound>
  <compound kind="struct">
    <name>gtsam::traits&lt; const PinholeSet&lt; CAMERA &gt; &gt;</name>
    <filename>a02659.html</filename>
    <templarg></templarg>
    <base>Testable&lt; PinholeSet&lt; CAMERA &gt; &gt;</base>
  </compound>
  <compound kind="struct">
    <name>gtsam::traits&lt; const Point3 &gt;</name>
    <filename>a02679.html</filename>
    <base>VectorSpace&lt; Point3 &gt;</base>
  </compound>
  <compound kind="struct">
    <name>gtsam::traits&lt; const Pose2 &gt;</name>
    <filename>a02699.html</filename>
    <base>LieGroup&lt; Pose2 &gt;</base>
  </compound>
  <compound kind="struct">
    <name>gtsam::traits&lt; const Pose3 &gt;</name>
    <filename>a02723.html</filename>
    <base>LieGroup&lt; Pose3 &gt;</base>
  </compound>
  <compound kind="struct">
    <name>gtsam::traits&lt; const Rot2 &gt;</name>
    <filename>a02755.html</filename>
    <base>LieGroup&lt; Rot2 &gt;</base>
  </compound>
  <compound kind="struct">
    <name>gtsam::traits&lt; const Rot3 &gt;</name>
    <filename>a02775.html</filename>
    <base>LieGroup&lt; Rot3 &gt;</base>
  </compound>
  <compound kind="struct">
    <name>gtsam::traits&lt; const SimpleCamera &gt;</name>
    <filename>a02787.html</filename>
    <base>Manifold&lt; SimpleCamera &gt;</base>
  </compound>
  <compound kind="struct">
    <name>gtsam::traits&lt; const SO3 &gt;</name>
    <filename>a02815.html</filename>
    <base>LieGroup&lt; SO3 &gt;</base>
  </compound>
  <compound kind="struct">
    <name>gtsam::traits&lt; const StereoCamera &gt;</name>
    <filename>a02831.html</filename>
    <base>Manifold&lt; StereoCamera &gt;</base>
  </compound>
  <compound kind="struct">
    <name>gtsam::traits&lt; const StereoPoint2 &gt;</name>
    <filename>a02843.html</filename>
    <base>VectorSpace&lt; StereoPoint2 &gt;</base>
  </compound>
  <compound kind="struct">
    <name>gtsam::traits&lt; const Unit3 &gt;</name>
    <filename>a02875.html</filename>
    <base>Manifold&lt; Unit3 &gt;</base>
  </compound>
  <compound kind="struct">
    <name>gtsam::traits&lt; Cyclic&lt; N &gt; &gt;</name>
    <filename>a02591.html</filename>
    <templarg>N</templarg>
    <base>Testable&lt; Cyclic&lt; N &gt; &gt;</base>
  </compound>
  <compound kind="struct">
    <name>gtsam::traits&lt; DecisionTreeFactor &gt;</name>
    <filename>a02371.html</filename>
    <base>Testable&lt; DecisionTreeFactor &gt;</base>
  </compound>
  <compound kind="struct">
    <name>gtsam::traits&lt; DirectProduct&lt; G, H &gt; &gt;</name>
    <filename>a02067.html</filename>
    <templarg></templarg>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>gtsam::traits&lt; DirectSum&lt; G, H &gt; &gt;</name>
    <filename>a02075.html</filename>
    <templarg></templarg>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>gtsam::traits&lt; DiscreteBayesNet &gt;</name>
    <filename>a02379.html</filename>
    <base>Testable&lt; DiscreteBayesNet &gt;</base>
  </compound>
  <compound kind="struct">
    <name>gtsam::traits&lt; DiscreteConditional &gt;</name>
    <filename>a02395.html</filename>
    <base>Testable&lt; DiscreteConditional &gt;</base>
  </compound>
  <compound kind="struct">
    <name>gtsam::traits&lt; DiscreteFactor &gt;</name>
    <filename>a02407.html</filename>
    <base>Testable&lt; DiscreteFactor &gt;</base>
  </compound>
  <compound kind="struct">
    <name>gtsam::traits&lt; DiscreteFactor::Values &gt;</name>
    <filename>a02411.html</filename>
    <base>Testable&lt; DiscreteFactor::Values &gt;</base>
  </compound>
  <compound kind="struct">
    <name>gtsam::traits&lt; DiscreteFactorGraph &gt;</name>
    <filename>a02423.html</filename>
    <base>Testable&lt; DiscreteFactorGraph &gt;</base>
  </compound>
  <compound kind="struct">
    <name>gtsam::traits&lt; double &gt;</name>
    <filename>a02303.html</filename>
    <base>ScalarTraits&lt; double &gt;</base>
  </compound>
  <compound kind="struct">
    <name>gtsam::traits&lt; Eigen::Matrix&lt; double, -1, -1, Options, MaxRows, MaxCols &gt; &gt;</name>
    <filename>a02319.html</filename>
    <templarg>Options</templarg>
    <templarg>MaxRows</templarg>
    <templarg>MaxCols</templarg>
    <base>DynamicTraits&lt;-1, -1, Options, MaxRows, MaxCols &gt;</base>
  </compound>
  <compound kind="struct">
    <name>gtsam::traits&lt; Eigen::Matrix&lt; double, -1, 1, Options, MaxRows, MaxCols &gt; &gt;</name>
    <filename>a02323.html</filename>
    <templarg>Options</templarg>
    <templarg>MaxRows</templarg>
    <templarg>MaxCols</templarg>
    <base>DynamicTraits&lt;-1, 1, Options, MaxRows, MaxCols &gt;</base>
  </compound>
  <compound kind="struct">
    <name>gtsam::traits&lt; Eigen::Matrix&lt; double, 1, -1, Options, MaxRows, MaxCols &gt; &gt;</name>
    <filename>a02327.html</filename>
    <templarg>Options</templarg>
    <templarg>MaxRows</templarg>
    <templarg>MaxCols</templarg>
    <base>DynamicTraits&lt; 1, -1, Options, MaxRows, MaxCols &gt;</base>
  </compound>
  <compound kind="struct">
    <name>gtsam::traits&lt; Eigen::Matrix&lt; double, M, N, Options, MaxRows, MaxCols &gt; &gt;</name>
    <filename>a02311.html</filename>
    <templarg>M</templarg>
    <templarg>N</templarg>
    <templarg>Options</templarg>
    <templarg>MaxRows</templarg>
    <templarg>MaxCols</templarg>
    <base>VectorSpaceImpl&lt; Eigen::Matrix&lt; double, M, N, Options, MaxRows, MaxCols &gt;, M *N &gt;</base>
  </compound>
  <compound kind="struct">
    <name>gtsam::traits&lt; EqualityFactorGraph &gt;</name>
    <filename>a04255.html</filename>
    <base>Testable&lt; EqualityFactorGraph &gt;</base>
  </compound>
  <compound kind="struct">
    <name>gtsam::traits&lt; Errors &gt;</name>
    <filename>a03083.html</filename>
    <base>Testable&lt; Errors &gt;</base>
  </compound>
  <compound kind="struct">
    <name>gtsam::traits&lt; EssentialMatrix &gt;</name>
    <filename>a02599.html</filename>
    <base>Manifold&lt; EssentialMatrix &gt;</base>
  </compound>
  <compound kind="struct">
    <name>gtsam::traits&lt; ExpressionFactor&lt; T &gt; &gt;</name>
    <filename>a03619.html</filename>
    <templarg></templarg>
    <base>Testable&lt; ExpressionFactor&lt; T &gt; &gt;</base>
  </compound>
  <compound kind="struct">
    <name>gtsam::traits&lt; float &gt;</name>
    <filename>a02307.html</filename>
    <base>ScalarTraits&lt; float &gt;</base>
  </compound>
  <compound kind="class">
    <name>traits&lt; G &gt;</name>
    <filename>a01987.html</filename>
  </compound>
  <compound kind="struct">
    <name>gtsam::traits&lt; GaussianBayesNet &gt;</name>
    <filename>a03091.html</filename>
    <base>Testable&lt; GaussianBayesNet &gt;</base>
  </compound>
  <compound kind="struct">
    <name>gtsam::traits&lt; GaussianBayesTree &gt;</name>
    <filename>a03103.html</filename>
    <base>Testable&lt; GaussianBayesTree &gt;</base>
  </compound>
  <compound kind="struct">
    <name>gtsam::traits&lt; GaussianConditional &gt;</name>
    <filename>a03111.html</filename>
    <base>Testable&lt; GaussianConditional &gt;</base>
  </compound>
  <compound kind="struct">
    <name>gtsam::traits&lt; GaussianFactor &gt;</name>
    <filename>a03127.html</filename>
    <base>Testable&lt; GaussianFactor &gt;</base>
  </compound>
  <compound kind="struct">
    <name>gtsam::traits&lt; GaussianFactorGraph &gt;</name>
    <filename>a03139.html</filename>
    <base>Testable&lt; GaussianFactorGraph &gt;</base>
  </compound>
  <compound kind="struct">
    <name>gtsam::traits&lt; GaussMarkov1stOrderFactor&lt; VALUE &gt; &gt;</name>
    <filename>a04471.html</filename>
    <templarg></templarg>
    <base>Testable&lt; GaussMarkov1stOrderFactor&lt; VALUE &gt; &gt;</base>
  </compound>
  <compound kind="struct">
    <name>gtsam::traits&lt; GeneralSFMFactor2&lt; CALIBRATION &gt; &gt;</name>
    <filename>a04007.html</filename>
    <templarg></templarg>
    <base>Testable&lt; GeneralSFMFactor2&lt; CALIBRATION &gt; &gt;</base>
  </compound>
  <compound kind="struct">
    <name>gtsam::traits&lt; GeneralSFMFactor&lt; CAMERA, LANDMARK &gt; &gt;</name>
    <filename>a03999.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <base>Testable&lt; GeneralSFMFactor&lt; CAMERA, LANDMARK &gt; &gt;</base>
  </compound>
  <compound kind="struct">
    <name>gtsam::traits&lt; GenericProjectionFactor&lt; POSE, LANDMARK, CALIBRATION &gt; &gt;</name>
    <filename>a04055.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <base>Testable&lt; GenericProjectionFactor&lt; POSE, LANDMARK, CALIBRATION &gt; &gt;</base>
  </compound>
  <compound kind="struct">
    <name>gtsam::traits&lt; GenericStereoFactor&lt; T1, T2 &gt; &gt;</name>
    <filename>a04111.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <base>Testable&lt; GenericStereoFactor&lt; T1, T2 &gt; &gt;</base>
  </compound>
  <compound kind="struct">
    <name>gtsam::traits&lt; GenericValue&lt; ValueType &gt; &gt;</name>
    <filename>a02043.html</filename>
    <templarg></templarg>
    <base>Testable&lt; GenericValue&lt; ValueType &gt; &gt;</base>
  </compound>
  <compound kind="struct">
    <name>gtsam::traits&lt; HessianFactor &gt;</name>
    <filename>a03155.html</filename>
    <base>Testable&lt; HessianFactor &gt;</base>
  </compound>
  <compound kind="struct">
    <name>gtsam::traits&lt; imuBias::ConstantBias &gt;</name>
    <filename>a03459.html</filename>
    <base>VectorSpace&lt; imuBias::ConstantBias &gt;</base>
  </compound>
  <compound kind="struct">
    <name>gtsam::traits&lt; ImuFactor &gt;</name>
    <filename>a03479.html</filename>
    <base>Testable&lt; ImuFactor &gt;</base>
  </compound>
  <compound kind="struct">
    <name>gtsam::traits&lt; ImuFactor2 &gt;</name>
    <filename>a03483.html</filename>
    <base>Testable&lt; ImuFactor2 &gt;</base>
  </compound>
  <compound kind="struct">
    <name>gtsam::traits&lt; InequalityFactorGraph &gt;</name>
    <filename>a04263.html</filename>
    <base>Testable&lt; InequalityFactorGraph &gt;</base>
  </compound>
  <compound kind="struct">
    <name>gtsam::traits&lt; InertialNavFactor_GlobalVelocity&lt; POSE, VELOCITY, IMUBIAS &gt; &gt;</name>
    <filename>a04479.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <base>Testable&lt; InertialNavFactor_GlobalVelocity&lt; POSE, VELOCITY, IMUBIAS &gt; &gt;</base>
  </compound>
  <compound kind="struct">
    <name>gtsam::traits&lt; ISAM2 &gt;</name>
    <filename>a03663.html</filename>
    <base>Testable&lt; ISAM2 &gt;</base>
  </compound>
  <compound kind="struct">
    <name>gtsam::traits&lt; JacobianFactor &gt;</name>
    <filename>a03187.html</filename>
    <base>Testable&lt; JacobianFactor &gt;</base>
  </compound>
  <compound kind="struct">
    <name>gtsam::traits&lt; JacobianFactorQ&lt; D, ZDim &gt; &gt;</name>
    <filename>a04019.html</filename>
    <templarg>D</templarg>
    <templarg>ZDim</templarg>
    <base>Testable&lt; JacobianFactorQ&lt; D, ZDim &gt; &gt;</base>
  </compound>
  <compound kind="struct">
    <name>gtsam::traits&lt; Key &gt;</name>
    <filename>a03015.html</filename>
  </compound>
  <compound kind="struct">
    <name>gtsam::traits&lt; LabeledSymbol &gt;</name>
    <filename>a03023.html</filename>
    <base>Testable&lt; LabeledSymbol &gt;</base>
  </compound>
  <compound kind="struct">
    <name>gtsam::traits&lt; LinearContainerFactor &gt;</name>
    <filename>a03707.html</filename>
    <base>Testable&lt; LinearContainerFactor &gt;</base>
  </compound>
  <compound kind="struct">
    <name>gtsam::traits&lt; LinearCost &gt;</name>
    <filename>a04279.html</filename>
    <base>Testable&lt; LinearCost &gt;</base>
  </compound>
  <compound kind="struct">
    <name>gtsam::traits&lt; LinearEquality &gt;</name>
    <filename>a04287.html</filename>
    <base>Testable&lt; LinearEquality &gt;</base>
  </compound>
  <compound kind="struct">
    <name>gtsam::traits&lt; LinearInequality &gt;</name>
    <filename>a04295.html</filename>
    <base>Testable&lt; LinearInequality &gt;</base>
  </compound>
  <compound kind="struct">
    <name>gtsam::traits&lt; LinearizedHessianFactor &gt;</name>
    <filename>a04431.html</filename>
    <base>Testable&lt; LinearizedHessianFactor &gt;</base>
  </compound>
  <compound kind="struct">
    <name>gtsam::traits&lt; LinearizedJacobianFactor &gt;</name>
    <filename>a04423.html</filename>
    <base>Testable&lt; LinearizedJacobianFactor &gt;</base>
  </compound>
  <compound kind="struct">
    <name>gtsam::traits&lt; LP &gt;</name>
    <filename>a04303.html</filename>
    <base>Testable&lt; LP &gt;</base>
  </compound>
  <compound kind="struct">
    <name>gtsam::traits&lt; NavState &gt;</name>
    <filename>a03511.html</filename>
    <base>Manifold&lt; NavState &gt;</base>
  </compound>
  <compound kind="struct">
    <name>gtsam::traits&lt; noiseModel::Constrained &gt;</name>
    <filename>a03295.html</filename>
    <base>Testable&lt; noiseModel::Constrained &gt;</base>
  </compound>
  <compound kind="struct">
    <name>gtsam::traits&lt; noiseModel::Diagonal &gt;</name>
    <filename>a03291.html</filename>
    <base>Testable&lt; noiseModel::Diagonal &gt;</base>
  </compound>
  <compound kind="struct">
    <name>gtsam::traits&lt; noiseModel::Gaussian &gt;</name>
    <filename>a03287.html</filename>
    <base>Testable&lt; noiseModel::Gaussian &gt;</base>
  </compound>
  <compound kind="struct">
    <name>gtsam::traits&lt; noiseModel::Isotropic &gt;</name>
    <filename>a03299.html</filename>
    <base>Testable&lt; noiseModel::Isotropic &gt;</base>
  </compound>
  <compound kind="struct">
    <name>gtsam::traits&lt; noiseModel::Unit &gt;</name>
    <filename>a03303.html</filename>
    <base>Testable&lt; noiseModel::Unit &gt;</base>
  </compound>
  <compound kind="struct">
    <name>gtsam::traits&lt; NonlinearEquality1&lt; VALUE &gt; &gt;</name>
    <filename>a03739.html</filename>
    <templarg></templarg>
    <base>Testable&lt; NonlinearEquality1&lt; VALUE &gt; &gt;</base>
  </compound>
  <compound kind="struct">
    <name>gtsam::traits&lt; NonlinearEquality2&lt; VALUE &gt; &gt;</name>
    <filename>a03747.html</filename>
    <templarg></templarg>
    <base>Testable&lt; NonlinearEquality2&lt; VALUE &gt; &gt;</base>
  </compound>
  <compound kind="struct">
    <name>gtsam::traits&lt; NonlinearEquality&lt; VALUE &gt; &gt;</name>
    <filename>a03731.html</filename>
    <templarg></templarg>
    <base>Testable&lt; NonlinearEquality&lt; VALUE &gt; &gt;</base>
  </compound>
  <compound kind="struct">
    <name>gtsam::traits&lt; NonlinearFactor &gt;</name>
    <filename>a03759.html</filename>
    <base>Testable&lt; NonlinearFactor &gt;</base>
  </compound>
  <compound kind="struct">
    <name>gtsam::traits&lt; NonlinearFactorGraph &gt;</name>
    <filename>a03799.html</filename>
    <base>Testable&lt; NonlinearFactorGraph &gt;</base>
  </compound>
  <compound kind="struct">
    <name>gtsam::traits&lt; Ordering &gt;</name>
    <filename>a03035.html</filename>
    <base>Testable&lt; Ordering &gt;</base>
  </compound>
  <compound kind="struct">
    <name>gtsam::traits&lt; OrientedPlane3 &gt;</name>
    <filename>a02611.html</filename>
    <base>Manifold&lt; OrientedPlane3 &gt;</base>
  </compound>
  <compound kind="struct">
    <name>gtsam::traits&lt; PinholeCamera&lt; Calibration &gt; &gt;</name>
    <filename>a02623.html</filename>
    <templarg></templarg>
    <base>Manifold&lt; PinholeCamera&lt; Calibration &gt; &gt;</base>
  </compound>
  <compound kind="struct">
    <name>gtsam::traits&lt; PinholePose&lt; CALIBRATION &gt; &gt;</name>
    <filename>a02643.html</filename>
    <templarg></templarg>
    <base>Manifold&lt; PinholePose&lt; CALIBRATION &gt; &gt;</base>
  </compound>
  <compound kind="struct">
    <name>gtsam::traits&lt; PinholeSet&lt; CAMERA &gt; &gt;</name>
    <filename>a02655.html</filename>
    <templarg></templarg>
    <base>Testable&lt; PinholeSet&lt; CAMERA &gt; &gt;</base>
  </compound>
  <compound kind="struct">
    <name>gtsam::traits&lt; Point2 &gt;</name>
    <filename>a02667.html</filename>
    <base>VectorSpace&lt; Point2 &gt;</base>
  </compound>
  <compound kind="struct">
    <name>gtsam::traits&lt; Point3 &gt;</name>
    <filename>a02675.html</filename>
    <base>VectorSpace&lt; Point3 &gt;</base>
  </compound>
  <compound kind="struct">
    <name>gtsam::traits&lt; Pose2 &gt;</name>
    <filename>a02695.html</filename>
    <base>LieGroup&lt; Pose2 &gt;</base>
  </compound>
  <compound kind="struct">
    <name>gtsam::traits&lt; Pose3 &gt;</name>
    <filename>a02719.html</filename>
    <base>LieGroup&lt; Pose3 &gt;</base>
  </compound>
  <compound kind="struct">
    <name>gtsam::traits&lt; Pose3AttitudeFactor &gt;</name>
    <filename>a03431.html</filename>
    <base>Testable&lt; Pose3AttitudeFactor &gt;</base>
  </compound>
  <compound kind="struct">
    <name>gtsam::traits&lt; PoseRTV &gt;</name>
    <filename>a04643.html</filename>
    <base>LieGroup&lt; PoseRTV &gt;</base>
  </compound>
  <compound kind="struct">
    <name>gtsam::traits&lt; Potentials &gt;</name>
    <filename>a02443.html</filename>
    <base>Testable&lt; Potentials &gt;</base>
  </compound>
  <compound kind="struct">
    <name>gtsam::traits&lt; Potentials::ADT &gt;</name>
    <filename>a02447.html</filename>
    <base>Testable&lt; Potentials::ADT &gt;</base>
  </compound>
  <compound kind="struct">
    <name>gtsam::traits&lt; PreintegratedImuMeasurements &gt;</name>
    <filename>a03475.html</filename>
    <base>Testable&lt; PreintegratedImuMeasurements &gt;</base>
  </compound>
  <compound kind="struct">
    <name>gtsam::traits&lt; PreintegratedRotation &gt;</name>
    <filename>a03523.html</filename>
    <base>Testable&lt; PreintegratedRotation &gt;</base>
  </compound>
  <compound kind="struct">
    <name>gtsam::traits&lt; ProductLieGroup&lt; G, H &gt; &gt;</name>
    <filename>a02179.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <base>LieGroupTraits&lt; ProductLieGroup&lt; G, H &gt; &gt;</base>
  </compound>
  <compound kind="struct">
    <name>gtsam::traits&lt; ProjectionFactorPPP&lt; POSE, LANDMARK, CALIBRATION &gt; &gt;</name>
    <filename>a04527.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <base>Testable&lt; ProjectionFactorPPP&lt; POSE, LANDMARK, CALIBRATION &gt; &gt;</base>
  </compound>
  <compound kind="struct">
    <name>gtsam::traits&lt; ProjectionFactorPPPC&lt; POSE, LANDMARK, CALIBRATION &gt; &gt;</name>
    <filename>a04535.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <base>Testable&lt; ProjectionFactorPPPC&lt; POSE, LANDMARK, CALIBRATION &gt; &gt;</base>
  </compound>
  <compound kind="struct">
    <name>gtsam::traits&lt; QUATERNION_TYPE &gt;</name>
    <filename>a02739.html</filename>
    <templarg></templarg>
    <templarg>_Options</templarg>
    <member kind="function" static="yes">
      <type>static Q</type>
      <name>Expmap</name>
      <anchorfile>a02739.html</anchorfile>
      <anchor>a12c076407b71b70e1a23523fcbc3047d</anchor>
      <arglist>(const Eigen::Ref&lt; const TangentVector &gt; &amp;omega, ChartJacobian H=boost::none)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static TangentVector</type>
      <name>Logmap</name>
      <anchorfile>a02739.html</anchorfile>
      <anchor>a7a9af0389c59ee4a516b2ce0bbc31d46</anchor>
      <arglist>(const Q &amp;q, ChartJacobian H=boost::none)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Q</type>
      <name>Expmap</name>
      <anchorfile>a02739.html</anchorfile>
      <anchor>a12c076407b71b70e1a23523fcbc3047d</anchor>
      <arglist>(const Eigen::Ref&lt; const TangentVector &gt; &amp;omega, ChartJacobian H=boost::none)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static TangentVector</type>
      <name>Logmap</name>
      <anchorfile>a02739.html</anchorfile>
      <anchor>a7a9af0389c59ee4a516b2ce0bbc31d46</anchor>
      <arglist>(const Q &amp;q, ChartJacobian H=boost::none)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>gtsam::traits&lt; RangeFactor&lt; A1, A2, T &gt; &gt;</name>
    <filename>a03931.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <base>Testable&lt; RangeFactor&lt; A1, A2, T &gt; &gt;</base>
  </compound>
  <compound kind="struct">
    <name>gtsam::traits&lt; RangeFactorWithTransform&lt; A1, A2, T &gt; &gt;</name>
    <filename>a03939.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <base>Testable&lt; RangeFactorWithTransform&lt; A1, A2, T &gt; &gt;</base>
  </compound>
  <compound kind="struct">
    <name>gtsam::traits&lt; ReferenceFrameFactor&lt; T1, T2 &gt; &gt;</name>
    <filename>a04063.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <base>Testable&lt; ReferenceFrameFactor&lt; T1, T2 &gt; &gt;</base>
  </compound>
  <compound kind="struct">
    <name>gtsam::traits&lt; RegularHessianFactor&lt; D &gt; &gt;</name>
    <filename>a03347.html</filename>
    <templarg>D</templarg>
    <base>Testable&lt; RegularHessianFactor&lt; D &gt; &gt;</base>
  </compound>
  <compound kind="struct">
    <name>gtsam::traits&lt; RegularImplicitSchurFactor&lt; CAMERA &gt; &gt;</name>
    <filename>a04071.html</filename>
    <templarg></templarg>
    <base>Testable&lt; RegularImplicitSchurFactor&lt; CAMERA &gt; &gt;</base>
  </compound>
  <compound kind="struct">
    <name>gtsam::traits&lt; Rot2 &gt;</name>
    <filename>a02751.html</filename>
    <base>LieGroup&lt; Rot2 &gt;</base>
  </compound>
  <compound kind="struct">
    <name>gtsam::traits&lt; Rot3 &gt;</name>
    <filename>a02771.html</filename>
    <base>LieGroup&lt; Rot3 &gt;</base>
  </compound>
  <compound kind="struct">
    <name>gtsam::traits&lt; Rot3AttitudeFactor &gt;</name>
    <filename>a03423.html</filename>
    <base>Testable&lt; Rot3AttitudeFactor &gt;</base>
  </compound>
  <compound kind="struct">
    <name>gtsam::traits&lt; SimpleCamera &gt;</name>
    <filename>a02783.html</filename>
    <base>Manifold&lt; SimpleCamera &gt;</base>
  </compound>
  <compound kind="struct">
    <name>gtsam::traits&lt; SmartProjectionFactor&lt; CAMERA &gt; &gt;</name>
    <filename>a04095.html</filename>
    <templarg></templarg>
    <base>Testable&lt; SmartProjectionFactor&lt; CAMERA &gt; &gt;</base>
  </compound>
  <compound kind="struct">
    <name>gtsam::traits&lt; SmartProjectionPoseFactor&lt; CALIBRATION &gt; &gt;</name>
    <filename>a04103.html</filename>
    <templarg></templarg>
    <base>Testable&lt; SmartProjectionPoseFactor&lt; CALIBRATION &gt; &gt;</base>
  </compound>
  <compound kind="struct">
    <name>gtsam::traits&lt; SmartStereoProjectionFactor &gt;</name>
    <filename>a04555.html</filename>
    <base>Testable&lt; SmartStereoProjectionFactor &gt;</base>
  </compound>
  <compound kind="struct">
    <name>gtsam::traits&lt; SmartStereoProjectionPoseFactor &gt;</name>
    <filename>a04563.html</filename>
    <base>Testable&lt; SmartStereoProjectionPoseFactor &gt;</base>
  </compound>
  <compound kind="struct">
    <name>gtsam::traits&lt; SO3 &gt;</name>
    <filename>a02811.html</filename>
    <base>LieGroup&lt; SO3 &gt;</base>
  </compound>
  <compound kind="struct">
    <name>gtsam::traits&lt; StereoCamera &gt;</name>
    <filename>a02827.html</filename>
    <base>Manifold&lt; StereoCamera &gt;</base>
  </compound>
  <compound kind="struct">
    <name>gtsam::traits&lt; StereoPoint2 &gt;</name>
    <filename>a02839.html</filename>
    <base>VectorSpace&lt; StereoPoint2 &gt;</base>
  </compound>
  <compound kind="struct">
    <name>gtsam::traits&lt; Symbol &gt;</name>
    <filename>a03043.html</filename>
    <base>Testable&lt; Symbol &gt;</base>
  </compound>
  <compound kind="struct">
    <name>gtsam::traits&lt; SymbolicBayesNet &gt;</name>
    <filename>a04123.html</filename>
    <base>Testable&lt; SymbolicBayesNet &gt;</base>
  </compound>
  <compound kind="struct">
    <name>gtsam::traits&lt; SymbolicBayesTree &gt;</name>
    <filename>a04139.html</filename>
    <base>Testable&lt; SymbolicBayesTree &gt;</base>
  </compound>
  <compound kind="struct">
    <name>gtsam::traits&lt; SymbolicBayesTreeClique &gt;</name>
    <filename>a04135.html</filename>
    <base>Testable&lt; SymbolicBayesTreeClique &gt;</base>
  </compound>
  <compound kind="struct">
    <name>gtsam::traits&lt; SymbolicConditional &gt;</name>
    <filename>a04147.html</filename>
    <base>Testable&lt; SymbolicConditional &gt;</base>
  </compound>
  <compound kind="struct">
    <name>gtsam::traits&lt; SymbolicEliminationTree &gt;</name>
    <filename>a04155.html</filename>
    <base>Testable&lt; SymbolicEliminationTree &gt;</base>
  </compound>
  <compound kind="struct">
    <name>gtsam::traits&lt; SymbolicFactor &gt;</name>
    <filename>a04163.html</filename>
    <base>Testable&lt; SymbolicFactor &gt;</base>
  </compound>
  <compound kind="struct">
    <name>gtsam::traits&lt; SymbolicFactorGraph &gt;</name>
    <filename>a04175.html</filename>
    <base>Testable&lt; SymbolicFactorGraph &gt;</base>
  </compound>
  <compound kind="struct">
    <name>gtsam::traits&lt; TransformBtwRobotsUnaryFactor&lt; VALUE &gt; &gt;</name>
    <filename>a04575.html</filename>
    <templarg></templarg>
    <base>Testable&lt; TransformBtwRobotsUnaryFactor&lt; VALUE &gt; &gt;</base>
  </compound>
  <compound kind="struct">
    <name>gtsam::traits&lt; TransformBtwRobotsUnaryFactorEM&lt; VALUE &gt; &gt;</name>
    <filename>a04583.html</filename>
    <templarg></templarg>
    <base>Testable&lt; TransformBtwRobotsUnaryFactorEM&lt; VALUE &gt; &gt;</base>
  </compound>
  <compound kind="struct">
    <name>gtsam::traits&lt; Unit3 &gt;</name>
    <filename>a02871.html</filename>
    <base>Manifold&lt; Unit3 &gt;</base>
  </compound>
  <compound kind="struct">
    <name>gtsam::traits&lt; Values &gt;</name>
    <filename>a03903.html</filename>
    <base>Testable&lt; Values &gt;</base>
  </compound>
  <compound kind="struct">
    <name>gtsam::traits&lt; VariableIndex &gt;</name>
    <filename>a03051.html</filename>
    <base>Testable&lt; VariableIndex &gt;</base>
  </compound>
  <compound kind="struct">
    <name>gtsam::traits&lt; VariableSlots &gt;</name>
    <filename>a03059.html</filename>
    <base>Testable&lt; VariableSlots &gt;</base>
  </compound>
  <compound kind="struct">
    <name>gtsam::traits&lt; VectorValues &gt;</name>
    <filename>a03403.html</filename>
    <base>Testable&lt; VectorValues &gt;</base>
  </compound>
  <compound kind="class">
    <name>gtsam::TransformBtwRobotsUnaryFactor</name>
    <filename>a04571.html</filename>
    <templarg></templarg>
    <base protection="private">gtsam::NonlinearFactor</base>
    <base>gtsam::NonlinearFactor</base>
    <member kind="function">
      <type></type>
      <name>TransformBtwRobotsUnaryFactor</name>
      <anchorfile>a04571.html</anchorfile>
      <anchor>adfe06c3392749cef2332f9fbfd0c8ee4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TransformBtwRobotsUnaryFactor</name>
      <anchorfile>a04571.html</anchorfile>
      <anchor>a6d5f39dec452b04a8be333c516517190</anchor>
      <arglist>(Key key, const VALUE &amp;measured, Key keyA, Key keyB, const gtsam::Values &amp;valA, const gtsam::Values &amp;valB, const SharedGaussian &amp;model)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual gtsam::NonlinearFactor::shared_ptr</type>
      <name>clone</name>
      <anchorfile>a04571.html</anchorfile>
      <anchor>a4bda867841a1796d69f8c867d2582b2d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>print</name>
      <anchorfile>a04571.html</anchorfile>
      <anchor>a27e28c81393a57cc3423bb8408e8f74b</anchor>
      <arglist>(const std::string &amp;s, const KeyFormatter &amp;keyFormatter=DefaultKeyFormatter) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>equals</name>
      <anchorfile>a04571.html</anchorfile>
      <anchor>aadcc5d8247dd8e67cd3d9551cc57d790</anchor>
      <arglist>(const NonlinearFactor &amp;f, double tol=1e-9) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setValAValB</name>
      <anchorfile>a04571.html</anchorfile>
      <anchor>a05ce6f5c293ea4e55466bc49c73d7938</anchor>
      <arglist>(const gtsam::Values &amp;valA, const gtsam::Values &amp;valB)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>error</name>
      <anchorfile>a04571.html</anchorfile>
      <anchor>ab4960686ceb83e78bf3fc8baee3ad434</anchor>
      <arglist>(const gtsam::Values &amp;x) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual boost::shared_ptr&lt; gtsam::GaussianFactor &gt;</type>
      <name>linearize</name>
      <anchorfile>a04571.html</anchorfile>
      <anchor>a906bcbc8cc373e67edc8c53f0ebe9102</anchor>
      <arglist>(const gtsam::Values &amp;x) const</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>size</name>
      <anchorfile>a04571.html</anchorfile>
      <anchor>ad5e1d9f0ce19d5a6c5f8c7283fefc027</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual size_t</type>
      <name>dim</name>
      <anchorfile>a04571.html</anchorfile>
      <anchor>ae81f54f473f085a6f3bb2cefec840d36</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; TransformBtwRobotsUnaryFactor &gt;</type>
      <name>shared_ptr</name>
      <anchorfile>a04571.html</anchorfile>
      <anchor>ad1f0dea6990a8c7aed904e6737a36f61</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>boost::serialization::access</name>
      <anchorfile>a04571.html</anchorfile>
      <anchor>ac98d07dd8f7b70e16ccb9a01abf56b9c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::TransformBtwRobotsUnaryFactorEM</name>
    <filename>a04579.html</filename>
    <templarg></templarg>
    <base protection="private">gtsam::NonlinearFactor</base>
    <base>gtsam::NonlinearFactor</base>
    <member kind="function">
      <type></type>
      <name>TransformBtwRobotsUnaryFactorEM</name>
      <anchorfile>a04579.html</anchorfile>
      <anchor>a43b328f5e7a765b9c5a99c8f3ef600d4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TransformBtwRobotsUnaryFactorEM</name>
      <anchorfile>a04579.html</anchorfile>
      <anchor>ae9d499e95f35c6b6b5d36d8686358896</anchor>
      <arglist>(Key key, const VALUE &amp;measured, Key keyA, Key keyB, const Values &amp;valA, const Values &amp;valB, const SharedGaussian &amp;model_inlier, const SharedGaussian &amp;model_outlier, const double prior_inlier, const double prior_outlier, const bool flag_bump_up_near_zero_probs=false, const bool start_with_M_step=false)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual NonlinearFactor::shared_ptr</type>
      <name>clone</name>
      <anchorfile>a04579.html</anchorfile>
      <anchor>ab576fde9f7007b0d33b6b33f0b1f9464</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>print</name>
      <anchorfile>a04579.html</anchorfile>
      <anchor>a51b7d4e582dfcec4cea47a1200fb6e56</anchor>
      <arglist>(const std::string &amp;s, const KeyFormatter &amp;keyFormatter=DefaultKeyFormatter) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>equals</name>
      <anchorfile>a04579.html</anchorfile>
      <anchor>afc9120a886083f9f6c4e59e166cd0716</anchor>
      <arglist>(const NonlinearFactor &amp;f, double tol=1e-9) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setValAValB</name>
      <anchorfile>a04579.html</anchorfile>
      <anchor>a46a9fdf2eba4da7d181db8bd004317a2</anchor>
      <arglist>(const Values &amp;valA, const Values &amp;valB)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>error</name>
      <anchorfile>a04579.html</anchorfile>
      <anchor>a0f624d4fb23d2ed185e3678cfa18c2af</anchor>
      <arglist>(const Values &amp;x) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual boost::shared_ptr&lt; GaussianFactor &gt;</type>
      <name>linearize</name>
      <anchorfile>a04579.html</anchorfile>
      <anchor>af26d620e4013271e5577f8b88ebc289b</anchor>
      <arglist>(const Values &amp;x) const</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>size</name>
      <anchorfile>a04579.html</anchorfile>
      <anchor>aab9a6b48834fe10542896d53b3437069</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual size_t</type>
      <name>dim</name>
      <anchorfile>a04579.html</anchorfile>
      <anchor>a39aa4177c377a8ed7f2b09b948be45d5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; TransformBtwRobotsUnaryFactorEM &gt;</type>
      <name>shared_ptr</name>
      <anchorfile>a04579.html</anchorfile>
      <anchor>a8f939545c901d3ed8d1b7b3960e79af8</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>boost::serialization::access</name>
      <anchorfile>a04579.html</anchorfile>
      <anchor>ac98d07dd8f7b70e16ccb9a01abf56b9c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::TriangulationCheiralityException</name>
    <filename>a02851.html</filename>
  </compound>
  <compound kind="class">
    <name>gtsam::TriangulationFactor</name>
    <filename>a04115.html</filename>
    <templarg>CAMERA</templarg>
    <base>NoiseModelFactor1&lt; Point3 &gt;</base>
    <member kind="function">
      <type></type>
      <name>TriangulationFactor</name>
      <anchorfile>a04115.html</anchorfile>
      <anchor>ae02b051f95339acc3e410d5352b985d2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TriangulationFactor</name>
      <anchorfile>a04115.html</anchorfile>
      <anchor>a73cd66af4faf4400cffe370d803ee223</anchor>
      <arglist>(const CAMERA &amp;camera, const Measurement &amp;measured, const SharedNoiseModel &amp;model, Key pointKey, bool throwCheirality=false, bool verboseCheirality=false)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~TriangulationFactor</name>
      <anchorfile>a04115.html</anchorfile>
      <anchor>ab49a01f542e7ac8c87cb9df6c51502f8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual gtsam::NonlinearFactor::shared_ptr</type>
      <name>clone</name>
      <anchorfile>a04115.html</anchorfile>
      <anchor>a11b523c1bfd05d6292dcf20758f2d14f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>a04115.html</anchorfile>
      <anchor>a800a9e6f2d64f184d6fcbe8ef2d8d52e</anchor>
      <arglist>(const std::string &amp;s=&quot;&quot;, const KeyFormatter &amp;keyFormatter=DefaultKeyFormatter) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>equals</name>
      <anchorfile>a04115.html</anchorfile>
      <anchor>ac5dfbc236ea52ab64a325cd72408d024</anchor>
      <arglist>(const NonlinearFactor &amp;p, double tol=1e-9) const</arglist>
    </member>
    <member kind="function">
      <type>Vector</type>
      <name>evaluateError</name>
      <anchorfile>a04115.html</anchorfile>
      <anchor>ad550703adb7642097c27838b997535f7</anchor>
      <arglist>(const Point3 &amp;point, boost::optional&lt; Matrix &amp; &gt; H2=boost::none) const</arglist>
    </member>
    <member kind="function">
      <type>boost::shared_ptr&lt; GaussianFactor &gt;</type>
      <name>linearize</name>
      <anchorfile>a04115.html</anchorfile>
      <anchor>a7526ad9d2b32fa7fefc9c5df57d0028e</anchor>
      <arglist>(const Values &amp;x) const</arglist>
    </member>
    <member kind="function">
      <type>const Measurement &amp;</type>
      <name>measured</name>
      <anchorfile>a04115.html</anchorfile>
      <anchor>a5bcfe732324f7d9210e4b8cebd7e0771</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>verboseCheirality</name>
      <anchorfile>a04115.html</anchorfile>
      <anchor>aaa3d5c65f9d098bf8e5fa1292c54e159</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>throwCheirality</name>
      <anchorfile>a04115.html</anchorfile>
      <anchor>a229cf2e42a61da1974a3d2f2ed9aa426</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable">
      <type>VerticalBlockMatrix</type>
      <name>Ab</name>
      <anchorfile>a04115.html</anchorfile>
      <anchor>a01fd8804ee553d17953facec54253c35</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>CAMERA</type>
      <name>Camera</name>
      <anchorfile>a04115.html</anchorfile>
      <anchor>a71f0aa57a44325f458f4d8694a40cde7</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; This &gt;</type>
      <name>shared_ptr</name>
      <anchorfile>a04115.html</anchorfile>
      <anchor>a8359a5fece7cfa2cf307d5f31401bbb4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>NoiseModelFactor1&lt; Point3 &gt;</type>
      <name>Base</name>
      <anchorfile>a04115.html</anchorfile>
      <anchor>ad70ed3b6038ed926740cb9858dfb49cf</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>TriangulationFactor&lt; CAMERA &gt;</type>
      <name>This</name>
      <anchorfile>a04115.html</anchorfile>
      <anchor>a2d19ceeb6615d2ae5b649792fb0ee93b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>CAMERA::Measurement</type>
      <name>Measurement</name>
      <anchorfile>a04115.html</anchorfile>
      <anchor>a0c26a357ed0a2e7e967cd3a6f9dffcb5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const CAMERA</type>
      <name>camera_</name>
      <anchorfile>a04115.html</anchorfile>
      <anchor>afe3ec00477435bf000943670d27a15b2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const Measurement</type>
      <name>measured_</name>
      <anchorfile>a04115.html</anchorfile>
      <anchor>af5260f93ab73cc09b483c08b318f7889</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const bool</type>
      <name>throwCheirality_</name>
      <anchorfile>a04115.html</anchorfile>
      <anchor>a0fe8550e6416afd3405bd9cfaea87a5c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const bool</type>
      <name>verboseCheirality_</name>
      <anchorfile>a04115.html</anchorfile>
      <anchor>ac7e1e1c9da6242b95c6da60d59953600</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>boost::serialization::access</name>
      <anchorfile>a04115.html</anchorfile>
      <anchor>ac98d07dd8f7b70e16ccb9a01abf56b9c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>gtsam::TriangulationParameters</name>
    <filename>a02859.html</filename>
    <member kind="function">
      <type></type>
      <name>TriangulationParameters</name>
      <anchorfile>a02859.html</anchorfile>
      <anchor>a67fe8647cd4b82144e61e1b03f0c1a5c</anchor>
      <arglist>(const double _rankTolerance=1.0, const bool _enableEPI=false, double _landmarkDistanceThreshold=-1, double _dynamicOutlierRejectionThreshold=-1)</arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>rankTolerance</name>
      <anchorfile>a02859.html</anchorfile>
      <anchor>a6bc48052dd695ad190eeb3de24abbdca</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>enableEPI</name>
      <anchorfile>a02859.html</anchorfile>
      <anchor>a84cf135d41ab91ce9957a77ef43284e6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>landmarkDistanceThreshold</name>
      <anchorfile>a02859.html</anchorfile>
      <anchor>a80c1a1257cd5603cfc8710be0a2dbde0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>dynamicOutlierRejectionThreshold</name>
      <anchorfile>a02859.html</anchorfile>
      <anchor>a64046ca36c4e21f7a805b31728317deb</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>boost::serialization::access</name>
      <anchorfile>a02859.html</anchorfile>
      <anchor>ac98d07dd8f7b70e16ccb9a01abf56b9c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::TriangulationResult</name>
    <filename>a02863.html</filename>
    <member kind="function">
      <type></type>
      <name>TriangulationResult</name>
      <anchorfile>a02863.html</anchorfile>
      <anchor>a8a88d57aeb7792059c275066d5368026</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TriangulationResult</name>
      <anchorfile>a02863.html</anchorfile>
      <anchor>ab6ca79f81f2cb6d1e0ebde66577304b6</anchor>
      <arglist>(const Point3 &amp;p)</arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>boost::serialization::access</name>
      <anchorfile>a02863.html</anchorfile>
      <anchor>ac98d07dd8f7b70e16ccb9a01abf56b9c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::TriangulationUnderconstrainedException</name>
    <filename>a02847.html</filename>
  </compound>
  <compound kind="class">
    <name>gtsam::noiseModel::mEstimator::Tukey</name>
    <filename>a03263.html</filename>
    <base>gtsam::noiseModel::mEstimator::Base</base>
    <member kind="friend">
      <type>friend class</type>
      <name>boost::serialization::access</name>
      <anchorfile>a03263.html</anchorfile>
      <anchor>ac98d07dd8f7b70e16ccb9a01abf56b9c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>gtsam::Expression::UnaryFunction</name>
    <filename>a03599.html</filename>
    <templarg>A1</templarg>
  </compound>
  <compound kind="class">
    <name>gtsam::noiseModel::Unit</name>
    <filename>a03239.html</filename>
    <base>gtsam::noiseModel::Isotropic</base>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isUnit</name>
      <anchorfile>a03239.html</anchorfile>
      <anchor>a4057f1eb152f0b75f74bce09a6382c29</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>Mahalanobis</name>
      <anchorfile>a03239.html</anchorfile>
      <anchor>a9f5e38e57beaa2af45ed2050f57461e1</anchor>
      <arglist>(const Vector &amp;v) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Vector</type>
      <name>whiten</name>
      <anchorfile>a03239.html</anchorfile>
      <anchor>a47b8cf7ec46c206fdb2dbc10461699d9</anchor>
      <arglist>(const Vector &amp;v) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Vector</type>
      <name>unwhiten</name>
      <anchorfile>a03239.html</anchorfile>
      <anchor>a131039cdfa94442d6b33faa08f6ff2fc</anchor>
      <arglist>(const Vector &amp;v) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Matrix</type>
      <name>Whiten</name>
      <anchorfile>a03239.html</anchorfile>
      <anchor>a41643b67bcc11ace21427063f7319658</anchor>
      <arglist>(const Matrix &amp;H) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>WhitenInPlace</name>
      <anchorfile>a03239.html</anchorfile>
      <anchor>aa69719e5af822047186a7318be34c572</anchor>
      <arglist>(Matrix &amp;) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>WhitenInPlace</name>
      <anchorfile>a03239.html</anchorfile>
      <anchor>a6cfea980ff25c6929d17635d5694786b</anchor>
      <arglist>(Eigen::Block&lt; Matrix &gt;) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>whitenInPlace</name>
      <anchorfile>a03239.html</anchorfile>
      <anchor>a154930125b56ecbdcc2d03bf28189408</anchor>
      <arglist>(Vector &amp;) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>unwhitenInPlace</name>
      <anchorfile>a03239.html</anchorfile>
      <anchor>aa8b059bb97f75b85b43f6df355746d12</anchor>
      <arglist>(Vector &amp;) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>whitenInPlace</name>
      <anchorfile>a03239.html</anchorfile>
      <anchor>ab8614dcd46bb36c0384ab915933ad0c1</anchor>
      <arglist>(Eigen::Block&lt; Vector &gt; &amp;) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>unwhitenInPlace</name>
      <anchorfile>a03239.html</anchorfile>
      <anchor>a343fa0380d239dd0fe5e70f9be7594e5</anchor>
      <arglist>(Eigen::Block&lt; Vector &gt; &amp;) const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static shared_ptr</type>
      <name>Create</name>
      <anchorfile>a03239.html</anchorfile>
      <anchor>a61fda7a7390d3fc40f5618185e801bfe</anchor>
      <arglist>(size_t dim)</arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>boost::serialization::access</name>
      <anchorfile>a03239.html</anchorfile>
      <anchor>ac98d07dd8f7b70e16ccb9a01abf56b9c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::Unit3</name>
    <filename>a02867.html</filename>
    <member kind="function">
      <type></type>
      <name>Unit3</name>
      <anchorfile>a02867.html</anchorfile>
      <anchor>a358877500acd48b9a26b1f0cba6843ee</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Unit3</name>
      <anchorfile>a02867.html</anchorfile>
      <anchor>a69d3130f7387ce063b50aa38eca4f1d8</anchor>
      <arglist>(const Vector3 &amp;p)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Unit3</name>
      <anchorfile>a02867.html</anchorfile>
      <anchor>a21e2638a4e3257976366623da0a06d52</anchor>
      <arglist>(double x, double y, double z)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Unit3</name>
      <anchorfile>a02867.html</anchorfile>
      <anchor>a2fc016f2abf93b5a37cf063959638e52</anchor>
      <arglist>(const Point2 &amp;p, double f)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Unit3</name>
      <anchorfile>a02867.html</anchorfile>
      <anchor>a300388d8221e0642c687b24a9b9585d5</anchor>
      <arglist>(const Unit3 &amp;u)</arglist>
    </member>
    <member kind="function">
      <type>Unit3 &amp;</type>
      <name>operator=</name>
      <anchorfile>a02867.html</anchorfile>
      <anchor>a66d0ccbe89f1e1f5f66e457bec856e49</anchor>
      <arglist>(const Unit3 &amp;u)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Unit3</type>
      <name>FromPoint3</name>
      <anchorfile>a02867.html</anchorfile>
      <anchor>a5f4578a0612c6bcc9b5dc9e5d94e2802</anchor>
      <arglist>(const Point3 &amp;point, OptionalJacobian&lt; 2, 3 &gt; H=boost::none)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Unit3</type>
      <name>Random</name>
      <anchorfile>a02867.html</anchorfile>
      <anchor>a2bfe352c0070695fb03c5e2461ce14a6</anchor>
      <arglist>(boost::mt19937 &amp;rng)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>a02867.html</anchorfile>
      <anchor>a5a1656717bce00025a07dd1ec8377f15</anchor>
      <arglist>(const std::string &amp;s=std::string()) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>equals</name>
      <anchorfile>a02867.html</anchorfile>
      <anchor>a773ac8762708dcbe2afc665ddcce765c</anchor>
      <arglist>(const Unit3 &amp;s, double tol=1e-9) const</arglist>
    </member>
    <member kind="friend">
      <type>friend Point3</type>
      <name>operator *</name>
      <anchorfile>a02867.html</anchorfile>
      <anchor>a01a0dfaf8ed6a0ea3944268aee0114ad</anchor>
      <arglist>(double s, const Unit3 &amp;d)</arglist>
    </member>
    <member kind="function">
      <type>const Matrix32 &amp;</type>
      <name>basis</name>
      <anchorfile>a02867.html</anchorfile>
      <anchor>a25c12531e20ee69bc7b87bd632c38381</anchor>
      <arglist>(OptionalJacobian&lt; 6, 2 &gt; H=boost::none) const</arglist>
    </member>
    <member kind="function">
      <type>Matrix3</type>
      <name>skew</name>
      <anchorfile>a02867.html</anchorfile>
      <anchor>af57523f54c23f1e9fb3130a58a2ca68b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Point3</type>
      <name>point3</name>
      <anchorfile>a02867.html</anchorfile>
      <anchor>a4564930d54700b7cb2cabf83112c8e33</anchor>
      <arglist>(OptionalJacobian&lt; 3, 2 &gt; H=boost::none) const</arglist>
    </member>
    <member kind="function">
      <type>Vector3</type>
      <name>unitVector</name>
      <anchorfile>a02867.html</anchorfile>
      <anchor>a0b97a5763f74c939ba1fa941af9fff14</anchor>
      <arglist>(OptionalJacobian&lt; 3, 2 &gt; H=boost::none) const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>dot</name>
      <anchorfile>a02867.html</anchorfile>
      <anchor>a17dc4597e8ce33bc9eff7f138f884885</anchor>
      <arglist>(const Unit3 &amp;q, OptionalJacobian&lt; 1, 2 &gt; H1=boost::none, OptionalJacobian&lt; 1, 2 &gt; H2=boost::none) const</arglist>
    </member>
    <member kind="function">
      <type>Vector2</type>
      <name>error</name>
      <anchorfile>a02867.html</anchorfile>
      <anchor>a60cac5c8f8dd0bb716f0f73088164f82</anchor>
      <arglist>(const Unit3 &amp;q, OptionalJacobian&lt; 2, 2 &gt; H_q=boost::none) const</arglist>
    </member>
    <member kind="function">
      <type>Vector2</type>
      <name>errorVector</name>
      <anchorfile>a02867.html</anchorfile>
      <anchor>a8ae32a1c6ae64cf51bcfa8257df1088c</anchor>
      <arglist>(const Unit3 &amp;q, OptionalJacobian&lt; 2, 2 &gt; H_p=boost::none, OptionalJacobian&lt; 2, 2 &gt; H_q=boost::none) const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>distance</name>
      <anchorfile>a02867.html</anchorfile>
      <anchor>a8f7e20bc7681d983449c8ab8e8d7760a</anchor>
      <arglist>(const Unit3 &amp;q, OptionalJacobian&lt; 1, 2 &gt; H=boost::none) const</arglist>
    </member>
    <member kind="function">
      <type>Unit3</type>
      <name>cross</name>
      <anchorfile>a02867.html</anchorfile>
      <anchor>a99fd6adaa54d5d6af774291142af4c2c</anchor>
      <arglist>(const Unit3 &amp;q) const</arglist>
    </member>
    <member kind="function">
      <type>Point3</type>
      <name>cross</name>
      <anchorfile>a02867.html</anchorfile>
      <anchor>ae4e5b6623b9e7b39640f97be26f8d918</anchor>
      <arglist>(const Point3 &amp;q) const</arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>CoordinatesMode</name>
      <anchorfile>a02867.html</anchorfile>
      <anchor>a7df7fcee1896717df85a470b130859de</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>EXPMAP</name>
      <anchorfile>a02867.html</anchorfile>
      <anchor>a7df7fcee1896717df85a470b130859dea4ca2211bee749e662b2bf8556dc849d0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>RENORM</name>
      <anchorfile>a02867.html</anchorfile>
      <anchor>a7df7fcee1896717df85a470b130859dea66a862c12af15a2dde78cd16a3a4ba4f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>dim</name>
      <anchorfile>a02867.html</anchorfile>
      <anchor>a5cf9ee18166bb59b9ce142ce39e5bb7f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Unit3</type>
      <name>retract</name>
      <anchorfile>a02867.html</anchorfile>
      <anchor>a12f1fc402dbebf9a1f6f3efda2c59360</anchor>
      <arglist>(const Vector2 &amp;v, OptionalJacobian&lt; 2, 2 &gt; H=boost::none) const</arglist>
    </member>
    <member kind="function">
      <type>Vector2</type>
      <name>localCoordinates</name>
      <anchorfile>a02867.html</anchorfile>
      <anchor>aebea602cfa8afcd3ac8066da17f63c1c</anchor>
      <arglist>(const Unit3 &amp;s) const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static size_t</type>
      <name>Dim</name>
      <anchorfile>a02867.html</anchorfile>
      <anchor>a3c282b5d93814bebc62000ea50629ed5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>boost::serialization::access</name>
      <anchorfile>a02867.html</anchorfile>
      <anchor>ac98d07dd8f7b70e16ccb9a01abf56b9c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>EXPMAP</name>
      <anchorfile>a02867.html</anchorfile>
      <anchor>a7df7fcee1896717df85a470b130859dea4ca2211bee749e662b2bf8556dc849d0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>RENORM</name>
      <anchorfile>a02867.html</anchorfile>
      <anchor>a7df7fcee1896717df85a470b130859dea66a862c12af15a2dde78cd16a3a4ba4f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::Value</name>
    <filename>a02271.html</filename>
    <member kind="function" virtualness="pure">
      <type>virtual Value *</type>
      <name>clone_</name>
      <anchorfile>a02271.html</anchorfile>
      <anchor>a9b578b29ce7b2872ca532cdf96854920</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>deallocate_</name>
      <anchorfile>a02271.html</anchorfile>
      <anchor>a5a0554b9e0758f370073ea3cc5cf1c9f</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual boost::shared_ptr&lt; Value &gt;</type>
      <name>clone</name>
      <anchorfile>a02271.html</anchorfile>
      <anchor>aa3ec8ef9fa4bc6f9590bfb2151012a3c</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>equals_</name>
      <anchorfile>a02271.html</anchorfile>
      <anchor>a74edb2709fe745b6d09087f6aacf507f</anchor>
      <arglist>(const Value &amp;other, double tol=1e-9) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>print</name>
      <anchorfile>a02271.html</anchorfile>
      <anchor>ac338307bb9f00cd29a70a48058069458</anchor>
      <arglist>(const std::string &amp;str=&quot;&quot;) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual size_t</type>
      <name>dim</name>
      <anchorfile>a02271.html</anchorfile>
      <anchor>a21e0a839ddaabd4c56559684ff887efe</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual Value *</type>
      <name>retract_</name>
      <anchorfile>a02271.html</anchorfile>
      <anchor>aca2f044f9b44143168f6ff7bcc6da56a</anchor>
      <arglist>(const Vector &amp;delta) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual Vector</type>
      <name>localCoordinates_</name>
      <anchorfile>a02271.html</anchorfile>
      <anchor>a83429f15b4f68ed92e976649ea52da97</anchor>
      <arglist>(const Value &amp;value) const =0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Value &amp;</type>
      <name>operator=</name>
      <anchorfile>a02271.html</anchorfile>
      <anchor>afe6bdaf9469effb18abcc9ce5044cbe8</anchor>
      <arglist>(const Value &amp;)</arglist>
    </member>
    <member kind="function">
      <type>const ValueType &amp;</type>
      <name>cast</name>
      <anchorfile>a02271.html</anchorfile>
      <anchor>a3572aa15e1db4d995796f4354d926d49</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Value</name>
      <anchorfile>a02271.html</anchorfile>
      <anchor>a616a94e2ce8e99e732d5ceb9af00632c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>boost::serialization::access</name>
      <anchorfile>a02271.html</anchorfile>
      <anchor>ac98d07dd8f7b70e16ccb9a01abf56b9c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::ValueCloneAllocator</name>
    <filename>a03867.html</filename>
  </compound>
  <compound kind="class">
    <name>gtsam::Values</name>
    <filename>a03871.html</filename>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>a03871.html</anchorfile>
      <anchor>a046f4df94f53d9db536b2e0e57ffe6f3</anchor>
      <arglist>(const std::string &amp;str=&quot;&quot;, const KeyFormatter &amp;keyFormatter=DefaultKeyFormatter) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>equals</name>
      <anchorfile>a03871.html</anchorfile>
      <anchor>a920e8f63ea4bd5fc9f0818842e508556</anchor>
      <arglist>(const Values &amp;other, double tol=1e-9) const</arglist>
    </member>
    <member kind="function">
      <type>Values</type>
      <name>retract</name>
      <anchorfile>a03871.html</anchorfile>
      <anchor>a9b256edadb21fd362c185781e734a9f9</anchor>
      <arglist>(const VectorValues &amp;delta) const</arglist>
    </member>
    <member kind="function">
      <type>VectorValues</type>
      <name>localCoordinates</name>
      <anchorfile>a03871.html</anchorfile>
      <anchor>a32fc6f408d625df658f4b14124b73d1b</anchor>
      <arglist>(const Values &amp;cp) const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Values</name>
      <anchorfile>a03871.html</anchorfile>
      <anchor>ac89ea920394cd12d23ef576745351ee5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Values</name>
      <anchorfile>a03871.html</anchorfile>
      <anchor>a42d680607104698e3ec00c50bdb2021e</anchor>
      <arglist>(const Values &amp;other)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Values</name>
      <anchorfile>a03871.html</anchorfile>
      <anchor>ac5c8b8dc8da9bef437922f3bbe183dc4</anchor>
      <arglist>(Values &amp;&amp;other)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Values</name>
      <anchorfile>a03871.html</anchorfile>
      <anchor>afe14ed7307bdca1c4fe410e44f0edda2</anchor>
      <arglist>(const Values &amp;other, const VectorValues &amp;delta)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Values</name>
      <anchorfile>a03871.html</anchorfile>
      <anchor>adb659e595951677d69b6f2f4f88b6b57</anchor>
      <arglist>(const Filtered&lt; ValueType &gt; &amp;view)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Values</name>
      <anchorfile>a03871.html</anchorfile>
      <anchor>ac698795ad2e3bd3d5acfd92bfea20ae7</anchor>
      <arglist>(const ConstFiltered&lt; ValueType &gt; &amp;view)</arglist>
    </member>
    <member kind="function">
      <type>ValueType</type>
      <name>at</name>
      <anchorfile>a03871.html</anchorfile>
      <anchor>a153acec7a12c8b351c7c1a5d57e42bad</anchor>
      <arglist>(Key j) const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>atDouble</name>
      <anchorfile>a03871.html</anchorfile>
      <anchor>aee1cbebdc16aff872a1827762ebd80be</anchor>
      <arglist>(size_t key) const</arglist>
    </member>
    <member kind="function">
      <type>const Value &amp;</type>
      <name>at</name>
      <anchorfile>a03871.html</anchorfile>
      <anchor>a119d98d50afe1031c823c14945623bd6</anchor>
      <arglist>(Key j) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>exists</name>
      <anchorfile>a03871.html</anchorfile>
      <anchor>aa98aa2ca89fcc97792a9f8e9257abf5a</anchor>
      <arglist>(Key j) const</arglist>
    </member>
    <member kind="function">
      <type>boost::optional&lt; const ValueType &amp; &gt;</type>
      <name>exists</name>
      <anchorfile>a03871.html</anchorfile>
      <anchor>ad02437de30deb4608d6f6bb2fbc7ae77</anchor>
      <arglist>(Key j) const</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>find</name>
      <anchorfile>a03871.html</anchorfile>
      <anchor>a981545f725c25709db8f2cb394b190a6</anchor>
      <arglist>(Key j)</arglist>
    </member>
    <member kind="function">
      <type>const_iterator</type>
      <name>find</name>
      <anchorfile>a03871.html</anchorfile>
      <anchor>a66cd05ac88320e2c229b1307c9466936</anchor>
      <arglist>(Key j) const</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>lower_bound</name>
      <anchorfile>a03871.html</anchorfile>
      <anchor>adc3ab6193944103355a4e71b6b2a9a63</anchor>
      <arglist>(Key j)</arglist>
    </member>
    <member kind="function">
      <type>const_iterator</type>
      <name>lower_bound</name>
      <anchorfile>a03871.html</anchorfile>
      <anchor>a6c0e1e9f7fe8abfe3470cb11b2436bbe</anchor>
      <arglist>(Key j) const</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>upper_bound</name>
      <anchorfile>a03871.html</anchorfile>
      <anchor>a106a1809a5e32684aaf1ea7b6cdfe6d3</anchor>
      <arglist>(Key j)</arglist>
    </member>
    <member kind="function">
      <type>const_iterator</type>
      <name>upper_bound</name>
      <anchorfile>a03871.html</anchorfile>
      <anchor>a2622ce485b061210d91a1e6ac81de99c</anchor>
      <arglist>(Key j) const</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>size</name>
      <anchorfile>a03871.html</anchorfile>
      <anchor>a7a174b26fa9c7fa5ad7fbfadae99390a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>empty</name>
      <anchorfile>a03871.html</anchorfile>
      <anchor>a0a6b67fe6491eb4a14d3470b0869eb76</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>insert</name>
      <anchorfile>a03871.html</anchorfile>
      <anchor>a79059464a7c6ed07fc862acc9e7b57ce</anchor>
      <arglist>(Key j, const Value &amp;val)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>insert</name>
      <anchorfile>a03871.html</anchorfile>
      <anchor>ac9e64bbe570c986d3d31c43813f78df1</anchor>
      <arglist>(const Values &amp;values)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>insert</name>
      <anchorfile>a03871.html</anchorfile>
      <anchor>acea3a5fcb82973569717724de756ed4c</anchor>
      <arglist>(Key j, const ValueType &amp;val)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>insertDouble</name>
      <anchorfile>a03871.html</anchorfile>
      <anchor>a75203d418b4b3ab001d600e96654aceb</anchor>
      <arglist>(Key j, double c)</arglist>
    </member>
    <member kind="function">
      <type>std::pair&lt; iterator, bool &gt;</type>
      <name>tryInsert</name>
      <anchorfile>a03871.html</anchorfile>
      <anchor>a47bf2a64ee131889b02049b242640226</anchor>
      <arglist>(Key j, const Value &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>update</name>
      <anchorfile>a03871.html</anchorfile>
      <anchor>ae6ebf1135353767eb2e2d93b14103a73</anchor>
      <arglist>(Key j, const Value &amp;val)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>update</name>
      <anchorfile>a03871.html</anchorfile>
      <anchor>a0200bffce697c286e3b25423cd6d2dc6</anchor>
      <arglist>(Key j, const T &amp;val)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>update</name>
      <anchorfile>a03871.html</anchorfile>
      <anchor>a72c58892f5f8f79ee8c7e117266be625</anchor>
      <arglist>(const Values &amp;values)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>erase</name>
      <anchorfile>a03871.html</anchorfile>
      <anchor>ad75147b6a76d80763b02150eeb6b3c67</anchor>
      <arglist>(Key j)</arglist>
    </member>
    <member kind="function">
      <type>KeyVector</type>
      <name>keys</name>
      <anchorfile>a03871.html</anchorfile>
      <anchor>a6e14bd05d2fd3b923d6f3197f4b04f7e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Values &amp;</type>
      <name>operator=</name>
      <anchorfile>a03871.html</anchorfile>
      <anchor>a58cb43149f15172352bf89f05405609e</anchor>
      <arglist>(const Values &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>swap</name>
      <anchorfile>a03871.html</anchorfile>
      <anchor>a70892957dca2e0587692b6a9de5086c3</anchor>
      <arglist>(Values &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>a03871.html</anchorfile>
      <anchor>a5e547bfb256c5df17398d3ef9eed183e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>dim</name>
      <anchorfile>a03871.html</anchorfile>
      <anchor>a73275fc0c6593ddb0eac05d665976ed0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>VectorValues</type>
      <name>zeroVectors</name>
      <anchorfile>a03871.html</anchorfile>
      <anchor>a352f0be2f8a3e1386ee5c9254d347019</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Filtered&lt; Value &gt;</type>
      <name>filter</name>
      <anchorfile>a03871.html</anchorfile>
      <anchor>ace5cb7db8a66073f35a770ab40fc441c</anchor>
      <arglist>(const boost::function&lt; bool(Key)&gt; &amp;filterFcn)</arglist>
    </member>
    <member kind="function">
      <type>Filtered&lt; ValueType &gt;</type>
      <name>filter</name>
      <anchorfile>a03871.html</anchorfile>
      <anchor>ac691613be89563e421df81e29b393b4d</anchor>
      <arglist>(const boost::function&lt; bool(Key)&gt; &amp;filterFcn=&amp;_truePredicate&lt; Key &gt;)</arglist>
    </member>
    <member kind="function">
      <type>ConstFiltered&lt; Value &gt;</type>
      <name>filter</name>
      <anchorfile>a03871.html</anchorfile>
      <anchor>a01cc925f64530def92e79088d2475816</anchor>
      <arglist>(const boost::function&lt; bool(Key)&gt; &amp;filterFcn) const</arglist>
    </member>
    <member kind="function">
      <type>ConstFiltered&lt; ValueType &gt;</type>
      <name>filter</name>
      <anchorfile>a03871.html</anchorfile>
      <anchor>abb99ec3f713dbd72c5584a4db574fb38</anchor>
      <arglist>(const boost::function&lt; bool(Key)&gt; &amp;filterFcn=&amp;_truePredicate&lt; Key &gt;) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>a03871.html</anchorfile>
      <anchor>a046f4df94f53d9db536b2e0e57ffe6f3</anchor>
      <arglist>(const std::string &amp;str=&quot;&quot;, const KeyFormatter &amp;keyFormatter=DefaultKeyFormatter) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>equals</name>
      <anchorfile>a03871.html</anchorfile>
      <anchor>a920e8f63ea4bd5fc9f0818842e508556</anchor>
      <arglist>(const Values &amp;other, double tol=1e-9) const</arglist>
    </member>
    <member kind="function">
      <type>Values</type>
      <name>retract</name>
      <anchorfile>a03871.html</anchorfile>
      <anchor>a9b256edadb21fd362c185781e734a9f9</anchor>
      <arglist>(const VectorValues &amp;delta) const</arglist>
    </member>
    <member kind="function">
      <type>VectorValues</type>
      <name>localCoordinates</name>
      <anchorfile>a03871.html</anchorfile>
      <anchor>a32fc6f408d625df658f4b14124b73d1b</anchor>
      <arglist>(const Values &amp;cp) const</arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; Values &gt;</type>
      <name>shared_ptr</name>
      <anchorfile>a03871.html</anchorfile>
      <anchor>a5b2f07b6054d9ea06b28876a057938d1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; const Values &gt;</type>
      <name>const_shared_ptr</name>
      <anchorfile>a03871.html</anchorfile>
      <anchor>ab252aa072e35ebbbb614ebc51167f7d5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::transform_iterator&lt; boost::function1&lt; KeyValuePair, const KeyValuePtrPair &amp; &gt;, KeyValueMap::iterator &gt;</type>
      <name>iterator</name>
      <anchorfile>a03871.html</anchorfile>
      <anchor>a7930d8671f25a0604e84a134380846e2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::transform_iterator&lt; boost::function1&lt; ConstKeyValuePair, const ConstKeyValuePtrPair &amp; &gt;, KeyValueMap::const_iterator &gt;</type>
      <name>const_iterator</name>
      <anchorfile>a03871.html</anchorfile>
      <anchor>abfc9e250c5454e0063b75a9c3fe9d4ef</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::transform_iterator&lt; boost::function1&lt; KeyValuePair, const KeyValuePtrPair &amp; &gt;, KeyValueMap::reverse_iterator &gt;</type>
      <name>reverse_iterator</name>
      <anchorfile>a03871.html</anchorfile>
      <anchor>a497df9fe2469204066c9dd56b28b7ed8</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::transform_iterator&lt; boost::function1&lt; ConstKeyValuePair, const ConstKeyValuePtrPair &amp; &gt;, KeyValueMap::const_reverse_iterator &gt;</type>
      <name>const_reverse_iterator</name>
      <anchorfile>a03871.html</anchorfile>
      <anchor>aa2ede6ab4018b3bd9e66b0b18cc1887c</anchor>
      <arglist></arglist>
    </member>
    <class kind="class">gtsam::Values::ConstFiltered</class>
    <class kind="struct">gtsam::Values::ConstKeyValuePair</class>
    <class kind="class">gtsam::Values::Filtered</class>
    <class kind="struct">gtsam::Values::KeyValuePair</class>
    <member kind="friend">
      <type>friend class</type>
      <name>boost::serialization::access</name>
      <anchorfile>a03871.html</anchorfile>
      <anchor>ac98d07dd8f7b70e16ccb9a01abf56b9c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>gtsam::ValuesCastHelper</name>
    <filename>a03827.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>gtsam::ValuesCastHelper&lt; const Value, CastedKeyValuePairType, KeyValuePairType &gt;</name>
    <filename>a03835.html</filename>
    <templarg></templarg>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>gtsam::ValuesCastHelper&lt; Value, CastedKeyValuePairType, KeyValuePairType &gt;</name>
    <filename>a03831.html</filename>
    <templarg></templarg>
    <templarg></templarg>
  </compound>
  <compound kind="class">
    <name>gtsam::ValuesIncorrectType</name>
    <filename>a03891.html</filename>
    <member kind="function">
      <type></type>
      <name>ValuesIncorrectType</name>
      <anchorfile>a03891.html</anchorfile>
      <anchor>a0fa552c7792b4f90fdfe36e4d73a2189</anchor>
      <arglist>(Key key, const std::type_info &amp;storedTypeId, const std::type_info &amp;requestedTypeId)</arglist>
    </member>
    <member kind="function">
      <type>Key</type>
      <name>key</name>
      <anchorfile>a03891.html</anchorfile>
      <anchor>aaf6dc432d926165efa245120e228a51c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const std::type_info &amp;</type>
      <name>storedTypeId</name>
      <anchorfile>a03891.html</anchorfile>
      <anchor>ae9ec2ba3a72bad124ff7ffc9ee55ab86</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const std::type_info &amp;</type>
      <name>requestedTypeId</name>
      <anchorfile>a03891.html</anchorfile>
      <anchor>ae2abc02ed5e410fc34d7ed0de9c1e80a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>what</name>
      <anchorfile>a03891.html</anchorfile>
      <anchor>a973fddc04910ed8118ba5755123f70cf</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const Key</type>
      <name>key_</name>
      <anchorfile>a03891.html</anchorfile>
      <anchor>a6303f8c7ce66e97c3107fd4f6cf24d28</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::ValuesKeyAlreadyExists</name>
    <filename>a03883.html</filename>
    <member kind="function">
      <type></type>
      <name>ValuesKeyAlreadyExists</name>
      <anchorfile>a03883.html</anchorfile>
      <anchor>a6e0a29a56b47b914825e48922ffccf98</anchor>
      <arglist>(Key key)</arglist>
    </member>
    <member kind="function">
      <type>Key</type>
      <name>key</name>
      <anchorfile>a03883.html</anchorfile>
      <anchor>acc8368cd12e33fe07f416fa67ecebe94</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>what</name>
      <anchorfile>a03883.html</anchorfile>
      <anchor>a52f50083b85301bcee0113848db42bcb</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const Key</type>
      <name>key_</name>
      <anchorfile>a03883.html</anchorfile>
      <anchor>a5c2ccda4c15caefd91d0308d8b76eb53</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::ValuesKeyDoesNotExist</name>
    <filename>a03887.html</filename>
    <member kind="function">
      <type></type>
      <name>ValuesKeyDoesNotExist</name>
      <anchorfile>a03887.html</anchorfile>
      <anchor>a649684a7beaa8e3a8984bf647d2d8711</anchor>
      <arglist>(const char *operation, Key key)</arglist>
    </member>
    <member kind="function">
      <type>Key</type>
      <name>key</name>
      <anchorfile>a03887.html</anchorfile>
      <anchor>a4515d57abe0399ab9815714dc27afec8</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>what</name>
      <anchorfile>a03887.html</anchorfile>
      <anchor>a9c0593a6da942a35ef46055dc52ef82e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const char *</type>
      <name>operation_</name>
      <anchorfile>a03887.html</anchorfile>
      <anchor>afe3dbeaa3cc012754d8359a1e517a5a2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const Key</type>
      <name>key_</name>
      <anchorfile>a03887.html</anchorfile>
      <anchor>a433f387db342dfb0b25c7438fa42f58c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>gtsam::ValueWithDefault</name>
    <filename>a02259.html</filename>
    <templarg>T</templarg>
    <templarg>defaultValue</templarg>
    <member kind="function">
      <type></type>
      <name>ValueWithDefault</name>
      <anchorfile>a02259.html</anchorfile>
      <anchor>a530bf5ddc21562989ee4427ef44e520b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ValueWithDefault</name>
      <anchorfile>a02259.html</anchorfile>
      <anchor>a54bbbf7380c6a54aa696a8a7fe803f0e</anchor>
      <arglist>(const T &amp;_value)</arglist>
    </member>
    <member kind="function">
      <type>T &amp;</type>
      <name>operator *</name>
      <anchorfile>a02259.html</anchorfile>
      <anchor>a12c91c22b9980fad7ef63ce551c9c010</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const T &amp;</type>
      <name>operator *</name>
      <anchorfile>a02259.html</anchorfile>
      <anchor>a54ef08735115e3ded44ad6ec267007ae</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator T</name>
      <anchorfile>a02259.html</anchorfile>
      <anchor>a1d5b519ce1a722e763407563a39dfdd3</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ValueWithDefault&lt; bool, false &gt;</name>
    <filename>a02259.html</filename>
    <member kind="function">
      <type></type>
      <name>ValueWithDefault</name>
      <anchorfile>a02259.html</anchorfile>
      <anchor>a530bf5ddc21562989ee4427ef44e520b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ValueWithDefault</name>
      <anchorfile>a02259.html</anchorfile>
      <anchor>a54bbbf7380c6a54aa696a8a7fe803f0e</anchor>
      <arglist>(const bool &amp;_value)</arglist>
    </member>
    <member kind="function">
      <type>bool &amp;</type>
      <name>operator *</name>
      <anchorfile>a02259.html</anchorfile>
      <anchor>a12c91c22b9980fad7ef63ce551c9c010</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const bool &amp;</type>
      <name>operator *</name>
      <anchorfile>a02259.html</anchorfile>
      <anchor>a54ef08735115e3ded44ad6ec267007ae</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator bool</name>
      <anchorfile>a02259.html</anchorfile>
      <anchor>a1d5b519ce1a722e763407563a39dfdd3</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::VariableIndex</name>
    <filename>a03047.html</filename>
    <member kind="function">
      <type></type>
      <name>VariableIndex</name>
      <anchorfile>a03047.html</anchorfile>
      <anchor>af85147163ce24cb4db4505471440402c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>VariableIndex</name>
      <anchorfile>a03047.html</anchorfile>
      <anchor>a79bebdf9292c00135d5605fe38319142</anchor>
      <arglist>(const FG &amp;factorGraph)</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>size</name>
      <anchorfile>a03047.html</anchorfile>
      <anchor>a7e83a7dee6daaa33da9d69b34e5426f4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>nFactors</name>
      <anchorfile>a03047.html</anchorfile>
      <anchor>aff88eee65d8bcf51062cd99a1ae90977</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>nEntries</name>
      <anchorfile>a03047.html</anchorfile>
      <anchor>a2af38862502064df2169a7d5b623a8c3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Factors &amp;</type>
      <name>operator[]</name>
      <anchorfile>a03047.html</anchorfile>
      <anchor>a221fedce9dd28b006c4b1e5b43208cef</anchor>
      <arglist>(Key variable) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>equals</name>
      <anchorfile>a03047.html</anchorfile>
      <anchor>a792ee68c3840fb9cc8019841c7e9e677</anchor>
      <arglist>(const VariableIndex &amp;other, double tol=0.0) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>a03047.html</anchorfile>
      <anchor>a5a0b5d62298677a730c179c8837f0834</anchor>
      <arglist>(const std::string &amp;str=&quot;VariableIndex: &quot;, const KeyFormatter &amp;keyFormatter=DefaultKeyFormatter) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>outputMetisFormat</name>
      <anchorfile>a03047.html</anchorfile>
      <anchor>a191a7a81a1bb41196315a5889cb7e820</anchor>
      <arglist>(std::ostream &amp;os) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>augment</name>
      <anchorfile>a03047.html</anchorfile>
      <anchor>aedf0942d75479fc6ce0ed9166c9a3f82</anchor>
      <arglist>(const FG &amp;factors, boost::optional&lt; const FactorIndices &amp; &gt; newFactorIndices=boost::none)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>remove</name>
      <anchorfile>a03047.html</anchorfile>
      <anchor>a4094920c9d0ce534ff3d8a953730f09b</anchor>
      <arglist>(ITERATOR firstFactor, ITERATOR lastFactor, const FG &amp;factors)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeUnusedVariables</name>
      <anchorfile>a03047.html</anchorfile>
      <anchor>adba150211d074457621ace80632a0267</anchor>
      <arglist>(ITERATOR firstKey, ITERATOR lastKey)</arglist>
    </member>
    <member kind="function">
      <type>const_iterator</type>
      <name>begin</name>
      <anchorfile>a03047.html</anchorfile>
      <anchor>a50a87dee69788ba684075cdee8d09719</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const_iterator</type>
      <name>end</name>
      <anchorfile>a03047.html</anchorfile>
      <anchor>ad09ff18e34330ec023386a8d46dc6caf</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const_iterator</type>
      <name>find</name>
      <anchorfile>a03047.html</anchorfile>
      <anchor>a56ed25e46e57f984ff70554371bc6bf9</anchor>
      <arglist>(Key key) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>const Factors &amp;</type>
      <name>internalAt</name>
      <anchorfile>a03047.html</anchorfile>
      <anchor>ac1cc24409892833e3005c2f161dcba9f</anchor>
      <arglist>(Key variable) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>Factors &amp;</type>
      <name>internalAt</name>
      <anchorfile>a03047.html</anchorfile>
      <anchor>a41b6c572acc1422ccd31e1da5749af27</anchor>
      <arglist>(Key variable)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::VariableSlots</name>
    <filename>a03055.html</filename>
    <base>FastMap&lt; Key, FastVector&lt; size_t &gt; &gt;</base>
    <member kind="function">
      <type></type>
      <name>VariableSlots</name>
      <anchorfile>a03055.html</anchorfile>
      <anchor>acd98bd86878e8c5c9596c929439c0a4c</anchor>
      <arglist>(const FG &amp;factorGraph)</arglist>
    </member>
    <member kind="function">
      <type>GTSAM_EXPORT void</type>
      <name>print</name>
      <anchorfile>a03055.html</anchorfile>
      <anchor>a6dff67f5fe6b5d92e2a8f57f71afaee0</anchor>
      <arglist>(const std::string &amp;str=&quot;VariableSlots: &quot;) const</arglist>
    </member>
    <member kind="function">
      <type>GTSAM_EXPORT bool</type>
      <name>equals</name>
      <anchorfile>a03055.html</anchorfile>
      <anchor>a814f82c979a1b5f3b93339d17e86d145</anchor>
      <arglist>(const VariableSlots &amp;rhs, double tol=0.0) const</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>gtsam::ISAM2Result::DetailedResults::VariableStatus</name>
    <filename>a03691.html</filename>
    <member kind="variable">
      <type>bool</type>
      <name>isReeliminated</name>
      <anchorfile>a03691.html</anchorfile>
      <anchor>a67d788b600237f67b188f30e8f4fd124</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>isAboveRelinThreshold</name>
      <anchorfile>a03691.html</anchorfile>
      <anchor>a56611177d7b321070f779f35cb63cd16</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>isRelinearizeInvolved</name>
      <anchorfile>a03691.html</anchorfile>
      <anchor>a32f8f901efa181cc9afd45e6b3739f05</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>isObserved</name>
      <anchorfile>a03691.html</anchorfile>
      <anchor>a3bc9383714196de8f55921f11114f0ee</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>isNew</name>
      <anchorfile>a03691.html</anchorfile>
      <anchor>a4b92b1d5ff516b37acfbc42d619579bb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>inRootClique</name>
      <anchorfile>a03691.html</anchorfile>
      <anchor>a7318063c0257369484ba51e21c90b86f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>gtsam::vector_space_tag</name>
    <filename>a02275.html</filename>
    <base>gtsam::lie_group_tag</base>
  </compound>
  <compound kind="struct">
    <name>gtsam::internal::VectorSpace</name>
    <filename>a02295.html</filename>
    <templarg>Class</templarg>
    <base>Testable&lt; Class &gt;</base>
    <base>gtsam::internal::VectorSpaceTraits</base>
  </compound>
  <compound kind="class">
    <name>VectorSpace&lt; imuBias::ConstantBias &gt;</name>
    <filename>a02295.html</filename>
    <base>Testable&lt; imuBias::ConstantBias &gt;</base>
    <base>VectorSpaceTraits&lt; imuBias::ConstantBias &gt;</base>
  </compound>
  <compound kind="class">
    <name>VectorSpace&lt; Point2 &gt;</name>
    <filename>a02295.html</filename>
    <base>Testable&lt; Point2 &gt;</base>
    <base>VectorSpaceTraits&lt; Point2 &gt;</base>
  </compound>
  <compound kind="class">
    <name>VectorSpace&lt; Point3 &gt;</name>
    <filename>a02295.html</filename>
    <base>Testable&lt; Point3 &gt;</base>
    <base>VectorSpaceTraits&lt; Point3 &gt;</base>
  </compound>
  <compound kind="class">
    <name>VectorSpace&lt; StereoPoint2 &gt;</name>
    <filename>a02295.html</filename>
    <base>Testable&lt; StereoPoint2 &gt;</base>
    <base>VectorSpaceTraits&lt; StereoPoint2 &gt;</base>
  </compound>
  <compound kind="struct">
    <name>gtsam::internal::VectorSpaceImpl</name>
    <filename>a02279.html</filename>
    <templarg>Class</templarg>
    <templarg>N</templarg>
  </compound>
  <compound kind="class">
    <name>VectorSpaceImpl&lt; Class, Class::dimension &gt;</name>
    <filename>a02279.html</filename>
  </compound>
  <compound kind="struct">
    <name>gtsam::internal::VectorSpaceImpl&lt; Class, Eigen::Dynamic &gt;</name>
    <filename>a02283.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="class">
    <name>VectorSpaceImpl&lt; double, 1 &gt;</name>
    <filename>a02279.html</filename>
  </compound>
  <compound kind="class">
    <name>VectorSpaceImpl&lt; Eigen::Matrix&lt; double, M, N, Options, MaxRows, MaxCols &gt;, M *N &gt;</name>
    <filename>a02279.html</filename>
  </compound>
  <compound kind="class">
    <name>VectorSpaceImpl&lt; float, 1 &gt;</name>
    <filename>a02279.html</filename>
  </compound>
  <compound kind="class">
    <name>VectorSpaceImpl&lt; imuBias::ConstantBias, imuBias::ConstantBias ::dimension &gt;</name>
    <filename>a02279.html</filename>
  </compound>
  <compound kind="class">
    <name>VectorSpaceImpl&lt; Point2, Point2 ::dimension &gt;</name>
    <filename>a02279.html</filename>
  </compound>
  <compound kind="class">
    <name>VectorSpaceImpl&lt; Point3, Point3 ::dimension &gt;</name>
    <filename>a02279.html</filename>
  </compound>
  <compound kind="class">
    <name>VectorSpaceImpl&lt; Scalar, 1 &gt;</name>
    <filename>a02279.html</filename>
  </compound>
  <compound kind="class">
    <name>VectorSpaceImpl&lt; StereoPoint2, StereoPoint2 ::dimension &gt;</name>
    <filename>a02279.html</filename>
  </compound>
  <compound kind="struct">
    <name>gtsam::internal::VectorSpaceTraits</name>
    <filename>a02291.html</filename>
    <templarg>Class</templarg>
    <base>VectorSpaceImpl&lt; Class, Class::dimension &gt;</base>
  </compound>
  <compound kind="class">
    <name>VectorSpaceTraits&lt; imuBias::ConstantBias &gt;</name>
    <filename>a02291.html</filename>
    <base>VectorSpaceImpl&lt; imuBias::ConstantBias, imuBias::ConstantBias ::dimension &gt;</base>
  </compound>
  <compound kind="class">
    <name>VectorSpaceTraits&lt; Point2 &gt;</name>
    <filename>a02291.html</filename>
    <base>VectorSpaceImpl&lt; Point2, Point2 ::dimension &gt;</base>
  </compound>
  <compound kind="class">
    <name>VectorSpaceTraits&lt; Point3 &gt;</name>
    <filename>a02291.html</filename>
    <base>VectorSpaceImpl&lt; Point3, Point3 ::dimension &gt;</base>
  </compound>
  <compound kind="class">
    <name>VectorSpaceTraits&lt; StereoPoint2 &gt;</name>
    <filename>a02291.html</filename>
    <base>VectorSpaceImpl&lt; StereoPoint2, StereoPoint2 ::dimension &gt;</base>
  </compound>
  <compound kind="class">
    <name>gtsam::VectorValues</name>
    <filename>a03399.html</filename>
    <member kind="function">
      <type></type>
      <name>VectorValues</name>
      <anchorfile>a03399.html</anchorfile>
      <anchor>a988c508cc8d20e1939860c8aaaaa3a0a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>VectorValues</name>
      <anchorfile>a03399.html</anchorfile>
      <anchor>a0330aaf355483e6a33fdaa94e12c0e10</anchor>
      <arglist>(const VectorValues &amp;first, const VectorValues &amp;second)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>VectorValues</name>
      <anchorfile>a03399.html</anchorfile>
      <anchor>a40f31513b621026fec7510392c26e724</anchor>
      <arglist>(const CONTAINER &amp;c)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>VectorValues</name>
      <anchorfile>a03399.html</anchorfile>
      <anchor>af8e3b85870636b1d50e7c08d1dbbbf8e</anchor>
      <arglist>(const VectorValues &amp;c)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>VectorValues</name>
      <anchorfile>a03399.html</anchorfile>
      <anchor>aa3b5d6aef3889375037a3d5ef62810ba</anchor>
      <arglist>(ITERATOR first, ITERATOR last)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>VectorValues</name>
      <anchorfile>a03399.html</anchorfile>
      <anchor>ab1c34a94fe8c328d8457cef3f89f0aab</anchor>
      <arglist>(const Vector &amp;c, const Dims &amp;dims)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>VectorValues</name>
      <anchorfile>a03399.html</anchorfile>
      <anchor>a7a6089cb667920a7362a9d6e9163e692</anchor>
      <arglist>(const Vector &amp;c, const Scatter &amp;scatter)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static VectorValues</type>
      <name>Zero</name>
      <anchorfile>a03399.html</anchorfile>
      <anchor>a885faf91eb7f07439e5451f04a4e5a06</anchor>
      <arglist>(const VectorValues &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>size</name>
      <anchorfile>a03399.html</anchorfile>
      <anchor>a6c3f7a36fa68c97d2917864dff20b1c6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>dim</name>
      <anchorfile>a03399.html</anchorfile>
      <anchor>a677694d125aaa594bfb6f6140937eb9a</anchor>
      <arglist>(Key j) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>exists</name>
      <anchorfile>a03399.html</anchorfile>
      <anchor>a8e544106b444d50692f71b9af5e2fc0b</anchor>
      <arglist>(Key j) const</arglist>
    </member>
    <member kind="function">
      <type>Vector &amp;</type>
      <name>at</name>
      <anchorfile>a03399.html</anchorfile>
      <anchor>ab03d1f12932588561be2355626f230ed</anchor>
      <arglist>(Key j)</arglist>
    </member>
    <member kind="function">
      <type>const Vector &amp;</type>
      <name>at</name>
      <anchorfile>a03399.html</anchorfile>
      <anchor>a5fb203a21b4fc8c3178d65153ad342cb</anchor>
      <arglist>(Key j) const</arglist>
    </member>
    <member kind="function">
      <type>Vector &amp;</type>
      <name>operator[]</name>
      <anchorfile>a03399.html</anchorfile>
      <anchor>ad71a3d9b8298374ed9abf94d6083e048</anchor>
      <arglist>(Key j)</arglist>
    </member>
    <member kind="function">
      <type>const Vector &amp;</type>
      <name>operator[]</name>
      <anchorfile>a03399.html</anchorfile>
      <anchor>a0c59d6215c029c1d1ad988e42079d7ed</anchor>
      <arglist>(Key j) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>update</name>
      <anchorfile>a03399.html</anchorfile>
      <anchor>ae4c1243d76f1afd38159ef1a2a83efac</anchor>
      <arglist>(const VectorValues &amp;values)</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>insert</name>
      <anchorfile>a03399.html</anchorfile>
      <anchor>ab61f86ba410bf0e56154f8e05a07150e</anchor>
      <arglist>(const std::pair&lt; Key, Vector &gt; &amp;key_value)</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>emplace</name>
      <anchorfile>a03399.html</anchorfile>
      <anchor>a7cadb6a733ca2d52f17004275cb1bcf8</anchor>
      <arglist>(Key j, const Vector &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>insert</name>
      <anchorfile>a03399.html</anchorfile>
      <anchor>a20f660c72a5a9102103f4063034f6ed8</anchor>
      <arglist>(Key j, const Vector &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>insert</name>
      <anchorfile>a03399.html</anchorfile>
      <anchor>af6c435542f491fd89b51b7ac561a5d6b</anchor>
      <arglist>(const VectorValues &amp;values)</arglist>
    </member>
    <member kind="function">
      <type>std::pair&lt; iterator, bool &gt;</type>
      <name>tryInsert</name>
      <anchorfile>a03399.html</anchorfile>
      <anchor>af593167bf32f7295e207165f6c7fad90</anchor>
      <arglist>(Key j, const Vector &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>erase</name>
      <anchorfile>a03399.html</anchorfile>
      <anchor>af1014395c6fc9e2e20bc75032a9060d2</anchor>
      <arglist>(Key var)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setZero</name>
      <anchorfile>a03399.html</anchorfile>
      <anchor>a7a6c7c7af4d7459d2927ab0e137bd1cc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>begin</name>
      <anchorfile>a03399.html</anchorfile>
      <anchor>afe41ec06f1b4f6d7cb2a6236f9d872f8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const_iterator</type>
      <name>begin</name>
      <anchorfile>a03399.html</anchorfile>
      <anchor>ae15b59729aa65d6466c512dcd157c7f1</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>end</name>
      <anchorfile>a03399.html</anchorfile>
      <anchor>a168c3a8ee35c956ccb3b46103393919d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const_iterator</type>
      <name>end</name>
      <anchorfile>a03399.html</anchorfile>
      <anchor>a0dc9a42438eb7076061e08121ce6e9b0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>find</name>
      <anchorfile>a03399.html</anchorfile>
      <anchor>a6128bde222279e86c8848887d7f75ee5</anchor>
      <arglist>(Key j)</arglist>
    </member>
    <member kind="function">
      <type>const_iterator</type>
      <name>find</name>
      <anchorfile>a03399.html</anchorfile>
      <anchor>a9a8baa0999f2318af8b481ddc1d784f2</anchor>
      <arglist>(Key j) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>a03399.html</anchorfile>
      <anchor>aa483cfa1471288234b93075f032fe010</anchor>
      <arglist>(const std::string &amp;str=&quot;VectorValues: &quot;, const KeyFormatter &amp;formatter=DefaultKeyFormatter) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>equals</name>
      <anchorfile>a03399.html</anchorfile>
      <anchor>a038e0afd59e854664d41017fe631110d</anchor>
      <arglist>(const VectorValues &amp;x, double tol=1e-9) const</arglist>
    </member>
    <member kind="function">
      <type>Vector</type>
      <name>vector</name>
      <anchorfile>a03399.html</anchorfile>
      <anchor>aa1dfa554f1807e8e8fb2cf9d2ed0eeb3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Vector</type>
      <name>vector</name>
      <anchorfile>a03399.html</anchorfile>
      <anchor>aca8ead127e0c9017b4b8861339e5998f</anchor>
      <arglist>(const CONTAINER &amp;keys) const</arglist>
    </member>
    <member kind="function">
      <type>Vector</type>
      <name>vector</name>
      <anchorfile>a03399.html</anchorfile>
      <anchor>a45ae5421566c9ce89e2d576f4e1e8fee</anchor>
      <arglist>(const Dims &amp;dims) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>swap</name>
      <anchorfile>a03399.html</anchorfile>
      <anchor>a9d8e415b1824a37b2af45806f82a64a8</anchor>
      <arglist>(VectorValues &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasSameStructure</name>
      <anchorfile>a03399.html</anchorfile>
      <anchor>a564d4890a902db6c3b87236926a40395</anchor>
      <arglist>(const VectorValues other) const</arglist>
    </member>
    <member kind="friend">
      <type>friend GTSAM_EXPORT VectorValues</type>
      <name>operator *</name>
      <anchorfile>a03399.html</anchorfile>
      <anchor>af814c8c39ff6a70659e83897ba472e83</anchor>
      <arglist>(const double a, const VectorValues &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>dot</name>
      <anchorfile>a03399.html</anchorfile>
      <anchor>aec8866877ad4757a3392f0159ba9da24</anchor>
      <arglist>(const VectorValues &amp;v) const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>norm</name>
      <anchorfile>a03399.html</anchorfile>
      <anchor>a89ed96f26a7d2db25c0a0e072650f913</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>squaredNorm</name>
      <anchorfile>a03399.html</anchorfile>
      <anchor>a9b92791d5a3e2ef255193268166157fc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>VectorValues</type>
      <name>operator+</name>
      <anchorfile>a03399.html</anchorfile>
      <anchor>a03529640c47352fe4849d04cb1134f97</anchor>
      <arglist>(const VectorValues &amp;c) const</arglist>
    </member>
    <member kind="function">
      <type>VectorValues</type>
      <name>add</name>
      <anchorfile>a03399.html</anchorfile>
      <anchor>ae6c9f9dd27e186342fbadbb1216948fb</anchor>
      <arglist>(const VectorValues &amp;c) const</arglist>
    </member>
    <member kind="function">
      <type>VectorValues &amp;</type>
      <name>operator+=</name>
      <anchorfile>a03399.html</anchorfile>
      <anchor>a35cd083b28f1ac519b4d8560cd1c7c01</anchor>
      <arglist>(const VectorValues &amp;c)</arglist>
    </member>
    <member kind="function">
      <type>VectorValues &amp;</type>
      <name>addInPlace</name>
      <anchorfile>a03399.html</anchorfile>
      <anchor>a5b7e8caf95ecc54f401bb15b44b31163</anchor>
      <arglist>(const VectorValues &amp;c)</arglist>
    </member>
    <member kind="function">
      <type>VectorValues &amp;</type>
      <name>addInPlace_</name>
      <anchorfile>a03399.html</anchorfile>
      <anchor>a113286dd175a65f67732cd46c0badf66</anchor>
      <arglist>(const VectorValues &amp;c)</arglist>
    </member>
    <member kind="function">
      <type>VectorValues</type>
      <name>operator-</name>
      <anchorfile>a03399.html</anchorfile>
      <anchor>a8c20fbe7e79f6979d490ad6c7c02e66b</anchor>
      <arglist>(const VectorValues &amp;c) const</arglist>
    </member>
    <member kind="function">
      <type>VectorValues</type>
      <name>subtract</name>
      <anchorfile>a03399.html</anchorfile>
      <anchor>ace23a89b9dc189f3c80da2f84bcaf7df</anchor>
      <arglist>(const VectorValues &amp;c) const</arglist>
    </member>
    <member kind="function">
      <type>VectorValues</type>
      <name>scale</name>
      <anchorfile>a03399.html</anchorfile>
      <anchor>a104e20177494bc33628479d6b86f2c0e</anchor>
      <arglist>(const double a) const</arglist>
    </member>
    <member kind="function">
      <type>VectorValues &amp;</type>
      <name>operator *=</name>
      <anchorfile>a03399.html</anchorfile>
      <anchor>a4ff8c92d0860f89a987f1e79c0d65c11</anchor>
      <arglist>(double alpha)</arglist>
    </member>
    <member kind="function">
      <type>VectorValues &amp;</type>
      <name>scaleInPlace</name>
      <anchorfile>a03399.html</anchorfile>
      <anchor>a946bfadd17cef38dc4dc02361276ead0</anchor>
      <arglist>(double alpha)</arglist>
    </member>
    <member kind="typedef">
      <type>Values::iterator</type>
      <name>iterator</name>
      <anchorfile>a03399.html</anchorfile>
      <anchor>a1fb5672c19dff9542baa9375393fb3d8</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Values::const_iterator</type>
      <name>const_iterator</name>
      <anchorfile>a03399.html</anchorfile>
      <anchor>a0e8f05ac17c5ae99687b52f2e79a5ac8</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::shared_ptr&lt; This &gt;</type>
      <name>shared_ptr</name>
      <anchorfile>a03399.html</anchorfile>
      <anchor>afb2faec1f48011bb0b6c6a3d1d8c900c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Values::value_type</type>
      <name>value_type</name>
      <anchorfile>a03399.html</anchorfile>
      <anchor>a0e85b51f4c41dfd5226ec68bd7dac767</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>value_type</type>
      <name>KeyValuePair</name>
      <anchorfile>a03399.html</anchorfile>
      <anchor>a0b66147bf3245ff1d0ad75acddc3e116</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::map&lt; Key, size_t &gt;</type>
      <name>Dims</name>
      <anchorfile>a03399.html</anchorfile>
      <anchor>a4d220e303b7ac4c26c602ff7075c336c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>ConcurrentMap&lt; Key, Vector &gt;</type>
      <name>Values</name>
      <anchorfile>a03399.html</anchorfile>
      <anchor>a51de7f0e81eeb8f1bf2fc59a3cc6d8d3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Values</type>
      <name>values_</name>
      <anchorfile>a03399.html</anchorfile>
      <anchor>a4d03169b0c16543a56924123f33850c4</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>boost::serialization::access</name>
      <anchorfile>a03399.html</anchorfile>
      <anchor>ac98d07dd8f7b70e16ccb9a01abf56b9c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::VelocityConstraint</name>
    <filename>a04659.html</filename>
    <base>NoiseModelFactor2&lt; PoseRTV, PoseRTV &gt;</base>
    <member kind="function">
      <type></type>
      <name>VelocityConstraint</name>
      <anchorfile>a04659.html</anchorfile>
      <anchor>a972888ded7ddd8fb6edd843fb753d59e</anchor>
      <arglist>(Key key1, Key key2, const dynamics::IntegrationMode &amp;mode, double dt, double mu=1000)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>VelocityConstraint</name>
      <anchorfile>a04659.html</anchorfile>
      <anchor>a77dc9a7d44e75a71b4501990e8678c1a</anchor>
      <arglist>(Key key1, Key key2, double dt, double mu=1000)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>VelocityConstraint</name>
      <anchorfile>a04659.html</anchorfile>
      <anchor>aa448f3d558aea42f8576020ce48b425e</anchor>
      <arglist>(Key key1, Key key2, const dynamics::IntegrationMode &amp;mode, double dt, const gtsam::SharedNoiseModel &amp;model)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>VelocityConstraint</name>
      <anchorfile>a04659.html</anchorfile>
      <anchor>a720d96b79dbe5f0f6f39a3ab12a3b7de</anchor>
      <arglist>(Key key1, Key key2, double dt, const gtsam::SharedNoiseModel &amp;model)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual gtsam::NonlinearFactor::shared_ptr</type>
      <name>clone</name>
      <anchorfile>a04659.html</anchorfile>
      <anchor>affb07c69c77b9f3437376914c246308c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual gtsam::Vector</type>
      <name>evaluateError</name>
      <anchorfile>a04659.html</anchorfile>
      <anchor>a03a0a47af74d89ae1c4e265f44249403</anchor>
      <arglist>(const PoseRTV &amp;x1, const PoseRTV &amp;x2, boost::optional&lt; gtsam::Matrix &amp; &gt; H1=boost::none, boost::optional&lt; gtsam::Matrix &amp; &gt; H2=boost::none) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>print</name>
      <anchorfile>a04659.html</anchorfile>
      <anchor>a2d4717357aece0777dceef146a1ef475</anchor>
      <arglist>(const std::string &amp;s=&quot;&quot;, const gtsam::KeyFormatter &amp;formatter=gtsam::DefaultKeyFormatter) const</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>dynamics::IntegrationMode</type>
      <name>integration_mode_</name>
      <anchorfile>a04659.html</anchorfile>
      <anchor>a706dce535ba5c9e247a35c18b0b5d7c4</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::VelocityConstraint3</name>
    <filename>a04663.html</filename>
    <base protection="private">gtsam::NonlinearFactor</base>
    <base>NoiseModelFactor3&lt; double, double, double &gt;</base>
    <member kind="function">
      <type></type>
      <name>VelocityConstraint3</name>
      <anchorfile>a04663.html</anchorfile>
      <anchor>a0643f6139df77f50cf4087693c447b69</anchor>
      <arglist>(Key key1, Key key2, Key velKey, double dt, double mu=1000.0)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual gtsam::NonlinearFactor::shared_ptr</type>
      <name>clone</name>
      <anchorfile>a04663.html</anchorfile>
      <anchor>a2183392fc28b8024f604f82f858cccba</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Vector</type>
      <name>evaluateError</name>
      <anchorfile>a04663.html</anchorfile>
      <anchor>a82a464e00080b08a8675dd8dab08e805</anchor>
      <arglist>(const double &amp;x1, const double &amp;x2, const double &amp;v, boost::optional&lt; Matrix &amp; &gt; H1=boost::none, boost::optional&lt; Matrix &amp; &gt; H2=boost::none, boost::optional&lt; Matrix &amp; &gt; H3=boost::none) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>VelocityConstraint3</name>
      <anchorfile>a04663.html</anchorfile>
      <anchor>a011a70fff5aef9779e4bdd8b3aafd4b1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>boost::serialization::access</name>
      <anchorfile>a04663.html</anchorfile>
      <anchor>ac98d07dd8f7b70e16ccb9a01abf56b9c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::VelocityPrior</name>
    <filename>a04607.html</filename>
    <base protection="private">gtsam::NonlinearFactor</base>
    <base>PartialPriorFactor&lt; PoseRTV &gt;</base>
  </compound>
  <compound kind="class">
    <name>gtsam::VerticalBlockMatrix</name>
    <filename>a02335.html</filename>
    <member kind="function">
      <type></type>
      <name>VerticalBlockMatrix</name>
      <anchorfile>a02335.html</anchorfile>
      <anchor>a04d12c23c8c6a3179416ca49da794c86</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>VerticalBlockMatrix</name>
      <anchorfile>a02335.html</anchorfile>
      <anchor>a20f3454d88ad93367250ea900c84c53d</anchor>
      <arglist>(const CONTAINER &amp;dimensions, DenseIndex height, bool appendOneDimension=false)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>VerticalBlockMatrix</name>
      <anchorfile>a02335.html</anchorfile>
      <anchor>ac3d367af21c05dca883a91cf5c24a243</anchor>
      <arglist>(const CONTAINER &amp;dimensions, const Eigen::MatrixBase&lt; DERIVED &gt; &amp;matrix, bool appendOneDimension=false)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>VerticalBlockMatrix</name>
      <anchorfile>a02335.html</anchorfile>
      <anchor>a78d48e3b5eb2fc89705be918eb25652e</anchor>
      <arglist>(ITERATOR firstBlockDim, ITERATOR lastBlockDim, DenseIndex height, bool appendOneDimension=false)</arglist>
    </member>
    <member kind="function">
      <type>DenseIndex</type>
      <name>rows</name>
      <anchorfile>a02335.html</anchorfile>
      <anchor>a503a682bd3ec153c92d274b7b60db5c8</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>DenseIndex</type>
      <name>cols</name>
      <anchorfile>a02335.html</anchorfile>
      <anchor>a643d937b08596158d61440c5d8407ddf</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>DenseIndex</type>
      <name>nBlocks</name>
      <anchorfile>a02335.html</anchorfile>
      <anchor>aae2077898052464a33b9af7244c82f87</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Block</type>
      <name>operator()</name>
      <anchorfile>a02335.html</anchorfile>
      <anchor>a57657389622cd5e1b6e377dfecf7cbfa</anchor>
      <arglist>(DenseIndex block)</arglist>
    </member>
    <member kind="function">
      <type>const constBlock</type>
      <name>operator()</name>
      <anchorfile>a02335.html</anchorfile>
      <anchor>a90f238c763567b8f6f7c24372857de75</anchor>
      <arglist>(DenseIndex block) const</arglist>
    </member>
    <member kind="function">
      <type>Block</type>
      <name>range</name>
      <anchorfile>a02335.html</anchorfile>
      <anchor>a0a7317cdb1c8e0fc2d2dcb3e02dd651b</anchor>
      <arglist>(DenseIndex startBlock, DenseIndex endBlock)</arglist>
    </member>
    <member kind="function">
      <type>Block</type>
      <name>full</name>
      <anchorfile>a02335.html</anchorfile>
      <anchor>a09283eb4c95f331eae17164dd632d089</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const constBlock</type>
      <name>full</name>
      <anchorfile>a02335.html</anchorfile>
      <anchor>abcb19e8883d335b21113d50eb5f37e95</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const DenseIndex &amp;</type>
      <name>rowStart</name>
      <anchorfile>a02335.html</anchorfile>
      <anchor>a38860b28b3a2249ea4f30ac51bb125a6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>DenseIndex &amp;</type>
      <name>rowStart</name>
      <anchorfile>a02335.html</anchorfile>
      <anchor>a41f491da8f2960c56e8227874e6b8775</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const DenseIndex &amp;</type>
      <name>rowEnd</name>
      <anchorfile>a02335.html</anchorfile>
      <anchor>ac0e3073f0332df7e5b15602a7f999c93</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>DenseIndex &amp;</type>
      <name>rowEnd</name>
      <anchorfile>a02335.html</anchorfile>
      <anchor>a758a9979e567d6d4508d2176f3ce9f25</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const DenseIndex &amp;</type>
      <name>firstBlock</name>
      <anchorfile>a02335.html</anchorfile>
      <anchor>af586ab5e4b6a216b1a11b97ba87d17bf</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>DenseIndex &amp;</type>
      <name>firstBlock</name>
      <anchorfile>a02335.html</anchorfile>
      <anchor>a65aeaadcfdc0b3bbee817a0c11b998e7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const Matrix &amp;</type>
      <name>matrix</name>
      <anchorfile>a02335.html</anchorfile>
      <anchor>a367fee5aad499f2893a1682acbf7f1cd</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Matrix &amp;</type>
      <name>matrix</name>
      <anchorfile>a02335.html</anchorfile>
      <anchor>ae6fee4b1b2759b92da62acfc041a6a37</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static VerticalBlockMatrix</type>
      <name>LikeActiveViewOf</name>
      <anchorfile>a02335.html</anchorfile>
      <anchor>ae5ca2474a54f3212d7e73b3e904b8692</anchor>
      <arglist>(const VerticalBlockMatrix &amp;rhs)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static VerticalBlockMatrix</type>
      <name>LikeActiveViewOf</name>
      <anchorfile>a02335.html</anchorfile>
      <anchor>ad36f9b381dc3876995eb06c03e8667fd</anchor>
      <arglist>(const SymmetricBlockMatrix &amp;rhs, DenseIndex height)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Matrix</type>
      <name>matrix_</name>
      <anchorfile>a02335.html</anchorfile>
      <anchor>aaac69a1919d004647db02fab5b0cb0eb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>FastVector&lt; DenseIndex &gt;</type>
      <name>variableColOffsets_</name>
      <anchorfile>a02335.html</anchorfile>
      <anchor>ae7ec144e787509009c3fb0f284b94a22</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>DenseIndex</type>
      <name>rowStart_</name>
      <anchorfile>a02335.html</anchorfile>
      <anchor>ac17eb9545a5eb49245a4ed598c3cfbd1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>DenseIndex</type>
      <name>rowEnd_</name>
      <anchorfile>a02335.html</anchorfile>
      <anchor>a30f8297f16323a7471154f7eb9f2828a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>DenseIndex</type>
      <name>blockStart_</name>
      <anchorfile>a02335.html</anchorfile>
      <anchor>ac6d96c30337e9378bcc7ac223b9d0d5c</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>boost::serialization::access</name>
      <anchorfile>a02335.html</anchorfile>
      <anchor>ac98d07dd8f7b70e16ccb9a01abf56b9c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::noiseModel::mEstimator::Welsh</name>
    <filename>a03267.html</filename>
    <base>gtsam::noiseModel::mEstimator::Base</base>
    <member kind="friend">
      <type>friend class</type>
      <name>boost::serialization::access</name>
      <anchorfile>a03267.html</anchorfile>
      <anchor>ac98d07dd8f7b70e16ccb9a01abf56b9c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>gtsam::WhiteNoiseFactor</name>
    <filename>a03907.html</filename>
    <base>gtsam::NonlinearFactor</base>
    <member kind="function">
      <type></type>
      <name>WhiteNoiseFactor</name>
      <anchorfile>a03907.html</anchorfile>
      <anchor>a92b88afb4ef2a76302f9ad7694636bce</anchor>
      <arglist>(double z, Key meanKey, Key precisionKey)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~WhiteNoiseFactor</name>
      <anchorfile>a03907.html</anchorfile>
      <anchor>a02c5c42b104e4495ebe7872667025c27</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>a03907.html</anchorfile>
      <anchor>a520ee30acf7a048fe90eda6ab058c020</anchor>
      <arglist>(const std::string &amp;p=&quot;WhiteNoiseFactor&quot;, const KeyFormatter &amp;keyFormatter=DefaultKeyFormatter) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual size_t</type>
      <name>dim</name>
      <anchorfile>a03907.html</anchorfile>
      <anchor>ab6d4f1428006fc8c9184102e9a78d24c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>error</name>
      <anchorfile>a03907.html</anchorfile>
      <anchor>a886455fb2bb2ee505c728f8fea602a2e</anchor>
      <arglist>(const Values &amp;x) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Vector</type>
      <name>unwhitenedError</name>
      <anchorfile>a03907.html</anchorfile>
      <anchor>a9ac20b0036f3d1823e121979409e7535</anchor>
      <arglist>(const Values &amp;x) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual boost::shared_ptr&lt; GaussianFactor &gt;</type>
      <name>linearize</name>
      <anchorfile>a03907.html</anchorfile>
      <anchor>a5fe7a8077046dd310aee5ff27ff8fec6</anchor>
      <arglist>(const Values &amp;x) const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static double</type>
      <name>f</name>
      <anchorfile>a03907.html</anchorfile>
      <anchor>aaeee41e0aa000bcf053826fec43f2086</anchor>
      <arglist>(double z, double u, double p)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static HessianFactor::shared_ptr</type>
      <name>linearize</name>
      <anchorfile>a03907.html</anchorfile>
      <anchor>a66ac8a770883fec0b220cdd4c2b1446b</anchor>
      <arglist>(double z, double u, double p, Key j1, Key j2)</arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>gtsam</name>
    <filename>a01405.html</filename>
    <namespace>gtsam::imuBias</namespace>
    <namespace>gtsam::noiseModel</namespace>
    <namespace>gtsam::treeTraversal</namespace>
    <class kind="struct">gtsam::_ValuesConstKeyValuePair</class>
    <class kind="struct">gtsam::_ValuesKeyValuePair</class>
    <class kind="class">gtsam::AcceleratingScenario</class>
    <class kind="class">gtsam::ActiveSetSolver</class>
    <class kind="class">gtsam::AdaptAutoDiff</class>
    <class kind="struct">gtsam::additive_group_tag</class>
    <class kind="class">gtsam::AHRS</class>
    <class kind="class">gtsam::AHRSFactor</class>
    <class kind="class">gtsam::AlgebraicDecisionTree</class>
    <class kind="class">gtsam::AllDiff</class>
    <class kind="class">gtsam::AntiFactor</class>
    <class kind="class">gtsam::Assignment</class>
    <class kind="class">gtsam::AttitudeFactor</class>
    <class kind="class">gtsam::BatchFixedLagSmoother</class>
    <class kind="class">gtsam::BayesNet</class>
    <class kind="class">gtsam::BayesTree</class>
    <class kind="class">gtsam::BayesTreeCliqueBase</class>
    <class kind="struct">gtsam::BayesTreeCliqueData</class>
    <class kind="struct">gtsam::BayesTreeCliqueStats</class>
    <class kind="class">gtsam::BayesTreeOrphanWrapper</class>
    <class kind="struct">gtsam::Bearing</class>
    <class kind="struct">gtsam::Bearing&lt; Pose2, T &gt;</class>
    <class kind="struct">gtsam::Bearing&lt; Pose3, Point3 &gt;</class>
    <class kind="struct">gtsam::Bearing&lt; Pose3, Pose3 &gt;</class>
    <class kind="struct">gtsam::BearingFactor</class>
    <class kind="struct">gtsam::BearingRange</class>
    <class kind="class">gtsam::BearingRangeFactor</class>
    <class kind="class">gtsam::BearingS2</class>
    <class kind="class">gtsam::BetweenConstraint</class>
    <class kind="class">gtsam::BetweenFactor</class>
    <class kind="class">gtsam::BetweenFactorEM</class>
    <class kind="class">gtsam::BiasedGPSFactor</class>
    <class kind="class">gtsam::BinaryAllDiff</class>
    <class kind="struct">gtsam::BinaryJacobianFactor</class>
    <class kind="class">gtsam::BinarySumExpression</class>
    <class kind="class">gtsam::BlockJacobiPreconditioner</class>
    <class kind="struct">gtsam::BlockJacobiPreconditionerParameters</class>
    <class kind="struct">gtsam::BoundingConstraint1</class>
    <class kind="struct">gtsam::BoundingConstraint2</class>
    <class kind="class">gtsam::BTree</class>
    <class kind="class">gtsam::Cal3_S2</class>
    <class kind="class">gtsam::Cal3_S2Stereo</class>
    <class kind="class">gtsam::Cal3Bundler</class>
    <class kind="class">gtsam::Cal3DS2</class>
    <class kind="class">gtsam::Cal3DS2_Base</class>
    <class kind="class">gtsam::Cal3Unified</class>
    <class kind="class">gtsam::CalibratedCamera</class>
    <class kind="struct">gtsam::CameraProjectionMatrix</class>
    <class kind="class">gtsam::CameraSet</class>
    <class kind="struct">gtsam::CGState</class>
    <class kind="class">gtsam::CheiralityException</class>
    <class kind="class">gtsam::CholeskyFailed</class>
    <class kind="class">gtsam::ClusterTree</class>
    <class kind="class">gtsam::CombinedImuFactor</class>
    <class kind="class">gtsam::compose_key_visitor</class>
    <class kind="class">gtsam::ConcurrentBatchFilter</class>
    <class kind="class">gtsam::ConcurrentBatchFilterResult</class>
    <class kind="class">gtsam::ConcurrentBatchSmoother</class>
    <class kind="class">gtsam::ConcurrentBatchSmootherResult</class>
    <class kind="class">gtsam::ConcurrentFilter</class>
    <class kind="class">gtsam::ConcurrentIncrementalFilter</class>
    <class kind="class">gtsam::ConcurrentIncrementalSmoother</class>
    <class kind="class">gtsam::ConcurrentMap</class>
    <class kind="class">gtsam::ConcurrentSmoother</class>
    <class kind="class">gtsam::Conditional</class>
    <class kind="class">gtsam::ConjugateGradientParameters</class>
    <class kind="struct">gtsam::const_selector</class>
    <class kind="struct">gtsam::const_selector&lt; BASIC_TYPE, BASIC_TYPE, AS_NON_CONST, AS_CONST &gt;</class>
    <class kind="struct">gtsam::const_selector&lt; const BASIC_TYPE, BASIC_TYPE, AS_NON_CONST, AS_CONST &gt;</class>
    <class kind="class">gtsam::ConstantTwistScenario</class>
    <class kind="class">gtsam::Constraint</class>
    <class kind="struct">gtsam::ConstructorTraversalData</class>
    <class kind="class">gtsam::CRefCallAddCopy</class>
    <class kind="class">gtsam::CRefCallPushBack</class>
    <class kind="class">gtsam::CSP</class>
    <class kind="class">gtsam::Cyclic</class>
    <class kind="class">gtsam::DecisionTree</class>
    <class kind="class">gtsam::DecisionTreeFactor</class>
    <class kind="class">gtsam::DeltaFactor</class>
    <class kind="class">gtsam::DeltaFactorBase</class>
    <class kind="class">gtsam::DGroundConstraint</class>
    <class kind="class">gtsam::DHeightPrior</class>
    <class kind="class">gtsam::DirectProduct</class>
    <class kind="class">gtsam::DirectSum</class>
    <class kind="class">gtsam::DiscreteBayesNet</class>
    <class kind="class">gtsam::DiscreteBayesTree</class>
    <class kind="class">gtsam::DiscreteBayesTreeClique</class>
    <class kind="class">gtsam::DiscreteConditional</class>
    <class kind="class">gtsam::DiscreteEliminationTree</class>
    <class kind="class">gtsam::DiscreteEulerPoincareHelicopter</class>
    <class kind="class">gtsam::DiscreteFactor</class>
    <class kind="class">gtsam::DiscreteFactorGraph</class>
    <class kind="class">gtsam::DiscreteJunctionTree</class>
    <class kind="struct">gtsam::DiscreteKeys</class>
    <class kind="class">gtsam::DiscreteMarginals</class>
    <class kind="class">gtsam::DoglegOptimizer</class>
    <class kind="struct">gtsam::DoglegOptimizerImpl</class>
    <class kind="class">gtsam::DoglegParams</class>
    <class kind="class">gtsam::Domain</class>
    <class kind="class">gtsam::DRollPrior</class>
    <class kind="class">gtsam::DSF</class>
    <class kind="class">gtsam::DSFBase</class>
    <class kind="class">gtsam::DSFMap</class>
    <class kind="class">gtsam::DSFVector</class>
    <class kind="class">gtsam::Dummy</class>
    <class kind="class">gtsam::DummyFactor</class>
    <class kind="class">gtsam::DummyPreconditioner</class>
    <class kind="struct">gtsam::DummyPreconditionerParameters</class>
    <class kind="class">gtsam::DynamicValuesMismatched</class>
    <class kind="class">gtsam::EliminatableClusterTree</class>
    <class kind="class">gtsam::EliminateableFactorGraph</class>
    <class kind="struct">gtsam::EliminationData</class>
    <class kind="struct">gtsam::EliminationTraits</class>
    <class kind="struct">gtsam::EliminationTraits&lt; DiscreteFactorGraph &gt;</class>
    <class kind="struct">gtsam::EliminationTraits&lt; GaussianFactorGraph &gt;</class>
    <class kind="struct">gtsam::EliminationTraits&lt; SymbolicFactorGraph &gt;</class>
    <class kind="class">gtsam::EliminationTree</class>
    <class kind="class">gtsam::EqualityFactorGraph</class>
    <class kind="struct">gtsam::equals</class>
    <class kind="struct">gtsam::equals_star</class>
    <class kind="class">gtsam::EquivInertialNavFactor_GlobalVel</class>
    <class kind="class">gtsam::EquivInertialNavFactor_GlobalVel_NoBias</class>
    <class kind="class">gtsam::Errors</class>
    <class kind="class">gtsam::EssentialMatrix</class>
    <class kind="class">gtsam::EssentialMatrixConstraint</class>
    <class kind="class">gtsam::EssentialMatrixFactor</class>
    <class kind="class">gtsam::EssentialMatrixFactor2</class>
    <class kind="class">gtsam::EssentialMatrixFactor3</class>
    <class kind="class">gtsam::Expression</class>
    <class kind="class">gtsam::ExpressionFactor</class>
    <class kind="class">gtsam::ExpressionFactor2</class>
    <class kind="class">gtsam::ExpressionFactorGraph</class>
    <class kind="class">gtsam::ExtendedKalmanFilter</class>
    <class kind="class">gtsam::Factor</class>
    <class kind="class">gtsam::FactorGraph</class>
    <class kind="class">gtsam::FastList</class>
    <class kind="class">gtsam::FastMap</class>
    <class kind="class">gtsam::FastSet</class>
    <class kind="struct">gtsam::FixedDimension</class>
    <class kind="class">gtsam::FixedLagSmoother</class>
    <class kind="class">gtsam::FixedLagSmootherKeyTimestampMap</class>
    <class kind="class">gtsam::FixedLagSmootherKeyTimestampMapValue</class>
    <class kind="class">gtsam::FixedLagSmootherResult</class>
    <class kind="class">gtsam::FixedVector</class>
    <class kind="class">gtsam::FullIMUFactor</class>
    <class kind="class">gtsam::G_x1</class>
    <class kind="class">gtsam::GaussianBayesNet</class>
    <class kind="class">gtsam::GaussianBayesTree</class>
    <class kind="class">gtsam::GaussianBayesTreeClique</class>
    <class kind="class">gtsam::GaussianConditional</class>
    <class kind="class">gtsam::GaussianDensity</class>
    <class kind="class">gtsam::GaussianEliminationTree</class>
    <class kind="class">gtsam::GaussianFactor</class>
    <class kind="class">gtsam::GaussianFactorGraph</class>
    <class kind="class">gtsam::GaussianFactorGraphSystem</class>
    <class kind="class">gtsam::GaussianISAM</class>
    <class kind="class">gtsam::GaussianJunctionTree</class>
    <class kind="class">gtsam::GaussMarkov1stOrderFactor</class>
    <class kind="class">gtsam::GaussNewtonOptimizer</class>
    <class kind="class">gtsam::GaussNewtonParams</class>
    <class kind="class">gtsam::GeneralSFMFactor</class>
    <class kind="class">gtsam::GeneralSFMFactor2</class>
    <class kind="class">gtsam::GenericProjectionFactor</class>
    <class kind="class">gtsam::GenericStereoFactor</class>
    <class kind="class">gtsam::GenericValue</class>
    <class kind="class">gtsam::GPSFactor</class>
    <class kind="class">gtsam::GPSFactor2</class>
    <class kind="struct">gtsam::GraphvizFormatting</class>
    <class kind="struct">gtsam::group_tag</class>
    <class kind="struct">gtsam::HasBearing</class>
    <class kind="struct">gtsam::HasRange</class>
    <class kind="struct">gtsam::HasTestablePrereqs</class>
    <class kind="class">gtsam::HessianFactor</class>
    <class kind="class">gtsam::IMUFactor</class>
    <class kind="class">gtsam::ImuFactor</class>
    <class kind="class">gtsam::ImuFactor2</class>
    <class kind="class">gtsam::InconsistentEliminationRequested</class>
    <class kind="class">gtsam::IncrementalFixedLagSmoother</class>
    <class kind="class">gtsam::IndeterminantLinearSystemException</class>
    <class kind="class">gtsam::IndexPair</class>
    <class kind="class">gtsam::InequalityFactorGraph</class>
    <class kind="class">gtsam::InertialNavFactor_GlobalVelocity</class>
    <class kind="class">gtsam::InfeasibleInitialValues</class>
    <class kind="class">gtsam::InfeasibleOrUnboundedProblem</class>
    <class kind="struct">gtsam::InitializePose3</class>
    <class kind="class">gtsam::InvalidArgumentThreadsafe</class>
    <class kind="class">gtsam::InvalidDenseElimination</class>
    <class kind="class">gtsam::InvalidMatrixBlock</class>
    <class kind="class">gtsam::InvalidNoiseModel</class>
    <class kind="class">gtsam::InvDepthFactor3</class>
    <class kind="class">gtsam::InvDepthFactorVariant1</class>
    <class kind="class">gtsam::InvDepthFactorVariant2</class>
    <class kind="class">gtsam::InvDepthFactorVariant3a</class>
    <class kind="class">gtsam::InvDepthFactorVariant3b</class>
    <class kind="class">gtsam::ISAM</class>
    <class kind="class">gtsam::ISAM2</class>
    <class kind="class">gtsam::ISAM2Clique</class>
    <class kind="struct">gtsam::ISAM2DoglegParams</class>
    <class kind="struct">gtsam::ISAM2GaussNewtonParams</class>
    <class kind="struct">gtsam::ISAM2Params</class>
    <class kind="struct">gtsam::ISAM2Result</class>
    <class kind="class">gtsam::IsGroup</class>
    <class kind="class">gtsam::IsLieGroup</class>
    <class kind="class">gtsam::IsTestable</class>
    <class kind="class">gtsam::IsVectorSpace</class>
    <class kind="class">gtsam::IterativeOptimizationParameters</class>
    <class kind="class">gtsam::IterativeSolver</class>
    <class kind="class">gtsam::JacobianFactor</class>
    <class kind="class">gtsam::JacobianFactorQ</class>
    <class kind="class">gtsam::JacobianFactorQR</class>
    <class kind="class">gtsam::JacobianFactorSVD</class>
    <class kind="class">gtsam::JointMarginal</class>
    <class kind="class">gtsam::JunctionTree</class>
    <class kind="class">gtsam::KalmanFilter</class>
    <class kind="class">gtsam::KeyInfo</class>
    <class kind="struct">gtsam::KeyInfoEntry</class>
    <class kind="class">gtsam::LabeledSymbol</class>
    <class kind="class">gtsam::LevenbergMarquardtOptimizer</class>
    <class kind="class">gtsam::LevenbergMarquardtParams</class>
    <class kind="struct">gtsam::lie_group_tag</class>
    <class kind="struct">gtsam::LieGroup</class>
    <class kind="class">gtsam::LinearContainerFactor</class>
    <class kind="class">gtsam::LinearCost</class>
    <class kind="class">gtsam::LinearEquality</class>
    <class kind="class">gtsam::LinearInequality</class>
    <class kind="class">gtsam::LinearizedGaussianFactor</class>
    <class kind="class">gtsam::LinearizedHessianFactor</class>
    <class kind="class">gtsam::LinearizedJacobianFactor</class>
    <class kind="class">gtsam::ListOfOneContainer</class>
    <class kind="struct">gtsam::LP</class>
    <class kind="class">gtsam::LPInitSolver</class>
    <class kind="struct">gtsam::LPPolicy</class>
    <class kind="class">gtsam::MagFactor</class>
    <class kind="class">gtsam::MagFactor1</class>
    <class kind="class">gtsam::MagFactor2</class>
    <class kind="class">gtsam::MagFactor3</class>
    <class kind="struct">gtsam::MakeJacobian</class>
    <class kind="struct">gtsam::MakeOptionalJacobian</class>
    <class kind="struct">gtsam::manifold_tag</class>
    <class kind="class">gtsam::ManifoldPreintegration</class>
    <class kind="class">gtsam::MarginalizeNonleafException</class>
    <class kind="class">gtsam::Marginals</class>
    <class kind="class">gtsam::Mechanization_bRn2</class>
    <class kind="class">gtsam::MetisIndex</class>
    <class kind="struct">gtsam::multiplicative_group_tag</class>
    <class kind="struct">gtsam::MultiplyWithInverse</class>
    <class kind="struct">gtsam::MultiplyWithInverseFunction</class>
    <class kind="class">gtsam::MultiProjectionFactor</class>
    <class kind="class">gtsam::NavState</class>
    <class kind="class">gtsam::NoiseModelFactor</class>
    <class kind="class">gtsam::NoiseModelFactor1</class>
    <class kind="class">gtsam::NoiseModelFactor2</class>
    <class kind="class">gtsam::NoiseModelFactor3</class>
    <class kind="class">gtsam::NoiseModelFactor4</class>
    <class kind="class">gtsam::NoiseModelFactor5</class>
    <class kind="class">gtsam::NoiseModelFactor6</class>
    <class kind="class">gtsam::NoMatchFoundForFixed</class>
    <class kind="class">gtsam::NonlinearClusterTree</class>
    <class kind="class">gtsam::NonlinearConjugateGradientOptimizer</class>
    <class kind="class">gtsam::NonlinearEquality</class>
    <class kind="class">gtsam::NonlinearEquality1</class>
    <class kind="class">gtsam::NonlinearEquality2</class>
    <class kind="class">gtsam::NonlinearFactor</class>
    <class kind="class">gtsam::NonlinearFactorGraph</class>
    <class kind="class">gtsam::NonlinearISAM</class>
    <class kind="class">gtsam::NonlinearOptimizer</class>
    <class kind="class">gtsam::NonlinearOptimizerParams</class>
    <class kind="class">gtsam::OdometryFactorBase</class>
    <class kind="class">gtsam::OptionalJacobian</class>
    <class kind="class">gtsam::OptionalJacobian&lt; Eigen::Dynamic, Eigen::Dynamic &gt;</class>
    <class kind="class">gtsam::Ordering</class>
    <class kind="class">gtsam::ordering_key_visitor</class>
    <class kind="class">gtsam::OrientedPlane3</class>
    <class kind="class">gtsam::OrientedPlane3DirectionPrior</class>
    <class kind="class">gtsam::OrientedPlane3Factor</class>
    <class kind="class">gtsam::OutOfRangeThreadsafe</class>
    <class kind="class">gtsam::PartialPriorFactor</class>
    <class kind="class">gtsam::PCGSolver</class>
    <class kind="struct">gtsam::PCGSolverParameters</class>
    <class kind="class">gtsam::PendulumFactor1</class>
    <class kind="class">gtsam::PendulumFactor2</class>
    <class kind="class">gtsam::PendulumFactorPk</class>
    <class kind="class">gtsam::PendulumFactorPk1</class>
    <class kind="class">gtsam::PinholeBase</class>
    <class kind="class">gtsam::PinholeBaseK</class>
    <class kind="class">gtsam::PinholeCamera</class>
    <class kind="class">gtsam::PinholePose</class>
    <class kind="class">gtsam::PinholeSet</class>
    <class kind="class">gtsam::Point2</class>
    <class kind="class">gtsam::Point3</class>
    <class kind="class">gtsam::Pose2</class>
    <class kind="class">gtsam::Pose3</class>
    <class kind="class">gtsam::Pose3AttitudeFactor</class>
    <class kind="class">gtsam::Pose3Upright</class>
    <class kind="class">gtsam::PoseBetweenFactor</class>
    <class kind="class">gtsam::PoseConcept</class>
    <class kind="class">gtsam::PosePriorFactor</class>
    <class kind="class">gtsam::PoseRotationPrior</class>
    <class kind="class">gtsam::PoseRTV</class>
    <class kind="class">gtsam::PoseTranslationPrior</class>
    <class kind="class">gtsam::Potentials</class>
    <class kind="class">gtsam::Preconditioner</class>
    <class kind="struct">gtsam::PreconditionerParameters</class>
    <class kind="class">gtsam::PredecessorMap</class>
    <class kind="class">gtsam::PreintegratedAhrsMeasurements</class>
    <class kind="class">gtsam::PreintegratedCombinedMeasurements</class>
    <class kind="class">gtsam::PreintegratedImuMeasurements</class>
    <class kind="class">gtsam::PreintegratedRotation</class>
    <class kind="struct">gtsam::PreintegratedRotationParams</class>
    <class kind="class">gtsam::PreintegrationBase</class>
    <class kind="struct">gtsam::PreintegrationParams</class>
    <class kind="class">gtsam::PriorFactor</class>
    <class kind="class">gtsam::ProductLieGroup</class>
    <class kind="class">gtsam::ProjectionFactorPPP</class>
    <class kind="class">gtsam::ProjectionFactorPPPC</class>
    <class kind="struct">gtsam::QP</class>
    <class kind="class">gtsam::QPInitSolver</class>
    <class kind="struct">gtsam::QPPolicy</class>
    <class kind="class">gtsam::QPSParser</class>
    <class kind="class">gtsam::QPSParserException</class>
    <class kind="struct">gtsam::Range</class>
    <class kind="struct">gtsam::Range&lt; CalibratedCamera, T &gt;</class>
    <class kind="struct">gtsam::Range&lt; PinholeCamera&lt; Calibration &gt;, T &gt;</class>
    <class kind="struct">gtsam::Range&lt; Point3, Point3 &gt;</class>
    <class kind="struct">gtsam::Range&lt; Pose2, T &gt;</class>
    <class kind="struct">gtsam::Range&lt; Pose3, T &gt;</class>
    <class kind="struct">gtsam::Range&lt; PoseRTV, PoseRTV &gt;</class>
    <class kind="struct">gtsam::Range&lt; SimpleCamera, T &gt;</class>
    <class kind="class">gtsam::RangeFactor</class>
    <class kind="class">gtsam::RangeFactorWithTransform</class>
    <class kind="class">gtsam::Reconstruction</class>
    <class kind="struct">gtsam::RedirectCout</class>
    <class kind="class">gtsam::RefCallPushBack</class>
    <class kind="class">gtsam::ReferenceFrameFactor</class>
    <class kind="class">gtsam::RegularHessianFactor</class>
    <class kind="class">gtsam::RegularImplicitSchurFactor</class>
    <class kind="class">gtsam::RegularJacobianFactor</class>
    <class kind="class">gtsam::RelativeElevationFactor</class>
    <class kind="struct">gtsam::Reshape</class>
    <class kind="struct">gtsam::Reshape&lt; M, M, InOptions, M, M, InOptions &gt;</class>
    <class kind="struct">gtsam::Reshape&lt; M, N, InOptions, M, N, InOptions &gt;</class>
    <class kind="struct">gtsam::Reshape&lt; N, M, InOptions, M, N, InOptions &gt;</class>
    <class kind="class">gtsam::Rot2</class>
    <class kind="class">gtsam::Rot3</class>
    <class kind="class">gtsam::Rot3AttitudeFactor</class>
    <class kind="class">gtsam::RotateDirectionsFactor</class>
    <class kind="class">gtsam::RotateFactor</class>
    <class kind="class">gtsam::RuntimeErrorThreadsafe</class>
    <class kind="class">gtsam::Sampler</class>
    <class kind="class">gtsam::ScalarMultiplyExpression</class>
    <class kind="class">gtsam::Scatter</class>
    <class kind="class">gtsam::Scenario</class>
    <class kind="class">gtsam::ScenarioRunner</class>
    <class kind="class">gtsam::Scheduler</class>
    <class kind="class">gtsam::SDGraph</class>
    <class kind="struct">gtsam::SfM_data</class>
    <class kind="struct">gtsam::SfM_Track</class>
    <class kind="class">gtsam::SGraph</class>
    <class kind="class">gtsam::Signature</class>
    <class kind="class">gtsam::SimpleCamera</class>
    <class kind="class">gtsam::SimPolygon2D</class>
    <class kind="class">gtsam::SimPolygon2DVector</class>
    <class kind="class">gtsam::SimWall2D</class>
    <class kind="class">gtsam::SimWall2DVector</class>
    <class kind="class">gtsam::SingleValue</class>
    <class kind="struct">gtsam::SlotEntry</class>
    <class kind="class">gtsam::SmartFactorBase</class>
    <class kind="class">gtsam::SmartProjectionFactor</class>
    <class kind="struct">gtsam::SmartProjectionParams</class>
    <class kind="class">gtsam::SmartProjectionPoseFactor</class>
    <class kind="class">gtsam::SmartRangeFactor</class>
    <class kind="class">gtsam::SmartStereoProjectionFactor</class>
    <class kind="class">gtsam::SmartStereoProjectionPoseFactor</class>
    <class kind="class">gtsam::SO3</class>
    <class kind="class">gtsam::StereoCamera</class>
    <class kind="class">gtsam::StereoCheiralityException</class>
    <class kind="class">gtsam::StereoPoint2</class>
    <class kind="class">gtsam::Subgraph</class>
    <class kind="class">gtsam::SubgraphBuilder</class>
    <class kind="struct">gtsam::SubgraphBuilderParameters</class>
    <class kind="class">gtsam::SubgraphPreconditioner</class>
    <class kind="struct">gtsam::SubgraphPreconditionerParameters</class>
    <class kind="class">gtsam::SubgraphSolver</class>
    <class kind="struct">gtsam::SubgraphSolverParameters</class>
    <class kind="class">gtsam::Symbol</class>
    <class kind="class">gtsam::SymbolicBayesNet</class>
    <class kind="class">gtsam::SymbolicBayesTree</class>
    <class kind="class">gtsam::SymbolicBayesTreeClique</class>
    <class kind="class">gtsam::SymbolicConditional</class>
    <class kind="class">gtsam::SymbolicEliminationTree</class>
    <class kind="class">gtsam::SymbolicFactor</class>
    <class kind="class">gtsam::SymbolicFactorGraph</class>
    <class kind="class">gtsam::SymbolicISAM</class>
    <class kind="class">gtsam::SymbolicJunctionTree</class>
    <class kind="class">gtsam::SymmetricBlockMatrix</class>
    <class kind="class">gtsam::System</class>
    <class kind="class">gtsam::TangentPreintegration</class>
    <class kind="class">gtsam::TbbOpenMPMixedScope</class>
    <class kind="struct">gtsam::Testable</class>
    <class kind="class">gtsam::ThreadsafeException</class>
    <class kind="class">gtsam::TOAFactor</class>
    <class kind="struct">gtsam::traits</class>
    <class kind="struct">gtsam::traits&lt; BearingFactor&lt; A1, A2, T &gt; &gt;</class>
    <class kind="struct">gtsam::traits&lt; BearingRange&lt; A1, A2 &gt; &gt;</class>
    <class kind="struct">gtsam::traits&lt; BearingRangeFactor&lt; A1, A2, B, R &gt; &gt;</class>
    <class kind="struct">gtsam::traits&lt; BetweenConstraint&lt; VALUE &gt; &gt;</class>
    <class kind="struct">gtsam::traits&lt; BetweenFactor&lt; VALUE &gt; &gt;</class>
    <class kind="struct">gtsam::traits&lt; BinaryJacobianFactor&lt; M, N1, N2 &gt; &gt;</class>
    <class kind="struct">gtsam::traits&lt; Cal3_S2 &gt;</class>
    <class kind="struct">gtsam::traits&lt; Cal3_S2Stereo &gt;</class>
    <class kind="struct">gtsam::traits&lt; Cal3Bundler &gt;</class>
    <class kind="struct">gtsam::traits&lt; Cal3DS2 &gt;</class>
    <class kind="struct">gtsam::traits&lt; Cal3Unified &gt;</class>
    <class kind="struct">gtsam::traits&lt; CalibratedCamera &gt;</class>
    <class kind="struct">gtsam::traits&lt; CameraSet&lt; CAMERA &gt; &gt;</class>
    <class kind="struct">gtsam::traits&lt; ConcurrentBatchFilter &gt;</class>
    <class kind="struct">gtsam::traits&lt; ConcurrentBatchSmoother &gt;</class>
    <class kind="struct">gtsam::traits&lt; ConcurrentIncrementalFilter &gt;</class>
    <class kind="struct">gtsam::traits&lt; ConcurrentIncrementalSmoother &gt;</class>
    <class kind="struct">gtsam::traits&lt; const Cal3_S2 &gt;</class>
    <class kind="struct">gtsam::traits&lt; const Cal3_S2Stereo &gt;</class>
    <class kind="struct">gtsam::traits&lt; const Cal3Bundler &gt;</class>
    <class kind="struct">gtsam::traits&lt; const Cal3DS2 &gt;</class>
    <class kind="struct">gtsam::traits&lt; const Cal3Unified &gt;</class>
    <class kind="struct">gtsam::traits&lt; const CalibratedCamera &gt;</class>
    <class kind="struct">gtsam::traits&lt; const CameraSet&lt; CAMERA &gt; &gt;</class>
    <class kind="struct">gtsam::traits&lt; const EssentialMatrix &gt;</class>
    <class kind="struct">gtsam::traits&lt; const OrientedPlane3 &gt;</class>
    <class kind="struct">gtsam::traits&lt; const PinholeCamera&lt; Calibration &gt; &gt;</class>
    <class kind="struct">gtsam::traits&lt; const PinholePose&lt; CALIBRATION &gt; &gt;</class>
    <class kind="struct">gtsam::traits&lt; const PinholeSet&lt; CAMERA &gt; &gt;</class>
    <class kind="struct">gtsam::traits&lt; const Point3 &gt;</class>
    <class kind="struct">gtsam::traits&lt; const Pose2 &gt;</class>
    <class kind="struct">gtsam::traits&lt; const Pose3 &gt;</class>
    <class kind="struct">gtsam::traits&lt; const Rot2 &gt;</class>
    <class kind="struct">gtsam::traits&lt; const Rot3 &gt;</class>
    <class kind="struct">gtsam::traits&lt; const SimpleCamera &gt;</class>
    <class kind="struct">gtsam::traits&lt; const SO3 &gt;</class>
    <class kind="struct">gtsam::traits&lt; const StereoCamera &gt;</class>
    <class kind="struct">gtsam::traits&lt; const StereoPoint2 &gt;</class>
    <class kind="struct">gtsam::traits&lt; const Unit3 &gt;</class>
    <class kind="struct">gtsam::traits&lt; Cyclic&lt; N &gt; &gt;</class>
    <class kind="struct">gtsam::traits&lt; DecisionTreeFactor &gt;</class>
    <class kind="struct">gtsam::traits&lt; DirectProduct&lt; G, H &gt; &gt;</class>
    <class kind="struct">gtsam::traits&lt; DirectSum&lt; G, H &gt; &gt;</class>
    <class kind="struct">gtsam::traits&lt; DiscreteBayesNet &gt;</class>
    <class kind="struct">gtsam::traits&lt; DiscreteConditional &gt;</class>
    <class kind="struct">gtsam::traits&lt; DiscreteFactor &gt;</class>
    <class kind="struct">gtsam::traits&lt; DiscreteFactor::Values &gt;</class>
    <class kind="struct">gtsam::traits&lt; DiscreteFactorGraph &gt;</class>
    <class kind="struct">gtsam::traits&lt; double &gt;</class>
    <class kind="struct">gtsam::traits&lt; Eigen::Matrix&lt; double, -1, -1, Options, MaxRows, MaxCols &gt; &gt;</class>
    <class kind="struct">gtsam::traits&lt; Eigen::Matrix&lt; double, -1, 1, Options, MaxRows, MaxCols &gt; &gt;</class>
    <class kind="struct">gtsam::traits&lt; Eigen::Matrix&lt; double, 1, -1, Options, MaxRows, MaxCols &gt; &gt;</class>
    <class kind="struct">gtsam::traits&lt; Eigen::Matrix&lt; double, M, N, Options, MaxRows, MaxCols &gt; &gt;</class>
    <class kind="struct">gtsam::traits&lt; EqualityFactorGraph &gt;</class>
    <class kind="struct">gtsam::traits&lt; Errors &gt;</class>
    <class kind="struct">gtsam::traits&lt; EssentialMatrix &gt;</class>
    <class kind="struct">gtsam::traits&lt; ExpressionFactor&lt; T &gt; &gt;</class>
    <class kind="struct">gtsam::traits&lt; float &gt;</class>
    <class kind="struct">gtsam::traits&lt; GaussianBayesNet &gt;</class>
    <class kind="struct">gtsam::traits&lt; GaussianBayesTree &gt;</class>
    <class kind="struct">gtsam::traits&lt; GaussianConditional &gt;</class>
    <class kind="struct">gtsam::traits&lt; GaussianFactor &gt;</class>
    <class kind="struct">gtsam::traits&lt; GaussianFactorGraph &gt;</class>
    <class kind="struct">gtsam::traits&lt; GaussMarkov1stOrderFactor&lt; VALUE &gt; &gt;</class>
    <class kind="struct">gtsam::traits&lt; GeneralSFMFactor2&lt; CALIBRATION &gt; &gt;</class>
    <class kind="struct">gtsam::traits&lt; GeneralSFMFactor&lt; CAMERA, LANDMARK &gt; &gt;</class>
    <class kind="struct">gtsam::traits&lt; GenericProjectionFactor&lt; POSE, LANDMARK, CALIBRATION &gt; &gt;</class>
    <class kind="struct">gtsam::traits&lt; GenericStereoFactor&lt; T1, T2 &gt; &gt;</class>
    <class kind="struct">gtsam::traits&lt; GenericValue&lt; ValueType &gt; &gt;</class>
    <class kind="struct">gtsam::traits&lt; HessianFactor &gt;</class>
    <class kind="struct">gtsam::traits&lt; imuBias::ConstantBias &gt;</class>
    <class kind="struct">gtsam::traits&lt; ImuFactor &gt;</class>
    <class kind="struct">gtsam::traits&lt; ImuFactor2 &gt;</class>
    <class kind="struct">gtsam::traits&lt; InequalityFactorGraph &gt;</class>
    <class kind="struct">gtsam::traits&lt; InertialNavFactor_GlobalVelocity&lt; POSE, VELOCITY, IMUBIAS &gt; &gt;</class>
    <class kind="struct">gtsam::traits&lt; ISAM2 &gt;</class>
    <class kind="struct">gtsam::traits&lt; JacobianFactor &gt;</class>
    <class kind="struct">gtsam::traits&lt; JacobianFactorQ&lt; D, ZDim &gt; &gt;</class>
    <class kind="struct">gtsam::traits&lt; Key &gt;</class>
    <class kind="struct">gtsam::traits&lt; LabeledSymbol &gt;</class>
    <class kind="struct">gtsam::traits&lt; LinearContainerFactor &gt;</class>
    <class kind="struct">gtsam::traits&lt; LinearCost &gt;</class>
    <class kind="struct">gtsam::traits&lt; LinearEquality &gt;</class>
    <class kind="struct">gtsam::traits&lt; LinearInequality &gt;</class>
    <class kind="struct">gtsam::traits&lt; LinearizedHessianFactor &gt;</class>
    <class kind="struct">gtsam::traits&lt; LinearizedJacobianFactor &gt;</class>
    <class kind="struct">gtsam::traits&lt; LP &gt;</class>
    <class kind="struct">gtsam::traits&lt; NavState &gt;</class>
    <class kind="struct">gtsam::traits&lt; noiseModel::Constrained &gt;</class>
    <class kind="struct">gtsam::traits&lt; noiseModel::Diagonal &gt;</class>
    <class kind="struct">gtsam::traits&lt; noiseModel::Gaussian &gt;</class>
    <class kind="struct">gtsam::traits&lt; noiseModel::Isotropic &gt;</class>
    <class kind="struct">gtsam::traits&lt; noiseModel::Unit &gt;</class>
    <class kind="struct">gtsam::traits&lt; NonlinearEquality1&lt; VALUE &gt; &gt;</class>
    <class kind="struct">gtsam::traits&lt; NonlinearEquality2&lt; VALUE &gt; &gt;</class>
    <class kind="struct">gtsam::traits&lt; NonlinearEquality&lt; VALUE &gt; &gt;</class>
    <class kind="struct">gtsam::traits&lt; NonlinearFactor &gt;</class>
    <class kind="struct">gtsam::traits&lt; NonlinearFactorGraph &gt;</class>
    <class kind="struct">gtsam::traits&lt; Ordering &gt;</class>
    <class kind="struct">gtsam::traits&lt; OrientedPlane3 &gt;</class>
    <class kind="struct">gtsam::traits&lt; PinholeCamera&lt; Calibration &gt; &gt;</class>
    <class kind="struct">gtsam::traits&lt; PinholePose&lt; CALIBRATION &gt; &gt;</class>
    <class kind="struct">gtsam::traits&lt; PinholeSet&lt; CAMERA &gt; &gt;</class>
    <class kind="struct">gtsam::traits&lt; Point2 &gt;</class>
    <class kind="struct">gtsam::traits&lt; Point3 &gt;</class>
    <class kind="struct">gtsam::traits&lt; Pose2 &gt;</class>
    <class kind="struct">gtsam::traits&lt; Pose3 &gt;</class>
    <class kind="struct">gtsam::traits&lt; Pose3AttitudeFactor &gt;</class>
    <class kind="struct">gtsam::traits&lt; PoseRTV &gt;</class>
    <class kind="struct">gtsam::traits&lt; Potentials &gt;</class>
    <class kind="struct">gtsam::traits&lt; Potentials::ADT &gt;</class>
    <class kind="struct">gtsam::traits&lt; PreintegratedImuMeasurements &gt;</class>
    <class kind="struct">gtsam::traits&lt; PreintegratedRotation &gt;</class>
    <class kind="struct">gtsam::traits&lt; ProductLieGroup&lt; G, H &gt; &gt;</class>
    <class kind="struct">gtsam::traits&lt; ProjectionFactorPPP&lt; POSE, LANDMARK, CALIBRATION &gt; &gt;</class>
    <class kind="struct">gtsam::traits&lt; ProjectionFactorPPPC&lt; POSE, LANDMARK, CALIBRATION &gt; &gt;</class>
    <class kind="struct">gtsam::traits&lt; QUATERNION_TYPE &gt;</class>
    <class kind="struct">gtsam::traits&lt; RangeFactor&lt; A1, A2, T &gt; &gt;</class>
    <class kind="struct">gtsam::traits&lt; RangeFactorWithTransform&lt; A1, A2, T &gt; &gt;</class>
    <class kind="struct">gtsam::traits&lt; ReferenceFrameFactor&lt; T1, T2 &gt; &gt;</class>
    <class kind="struct">gtsam::traits&lt; RegularHessianFactor&lt; D &gt; &gt;</class>
    <class kind="struct">gtsam::traits&lt; RegularImplicitSchurFactor&lt; CAMERA &gt; &gt;</class>
    <class kind="struct">gtsam::traits&lt; Rot2 &gt;</class>
    <class kind="struct">gtsam::traits&lt; Rot3 &gt;</class>
    <class kind="struct">gtsam::traits&lt; Rot3AttitudeFactor &gt;</class>
    <class kind="struct">gtsam::traits&lt; SimpleCamera &gt;</class>
    <class kind="struct">gtsam::traits&lt; SmartProjectionFactor&lt; CAMERA &gt; &gt;</class>
    <class kind="struct">gtsam::traits&lt; SmartProjectionPoseFactor&lt; CALIBRATION &gt; &gt;</class>
    <class kind="struct">gtsam::traits&lt; SmartStereoProjectionFactor &gt;</class>
    <class kind="struct">gtsam::traits&lt; SmartStereoProjectionPoseFactor &gt;</class>
    <class kind="struct">gtsam::traits&lt; SO3 &gt;</class>
    <class kind="struct">gtsam::traits&lt; StereoCamera &gt;</class>
    <class kind="struct">gtsam::traits&lt; StereoPoint2 &gt;</class>
    <class kind="struct">gtsam::traits&lt; Symbol &gt;</class>
    <class kind="struct">gtsam::traits&lt; SymbolicBayesNet &gt;</class>
    <class kind="struct">gtsam::traits&lt; SymbolicBayesTree &gt;</class>
    <class kind="struct">gtsam::traits&lt; SymbolicBayesTreeClique &gt;</class>
    <class kind="struct">gtsam::traits&lt; SymbolicConditional &gt;</class>
    <class kind="struct">gtsam::traits&lt; SymbolicEliminationTree &gt;</class>
    <class kind="struct">gtsam::traits&lt; SymbolicFactor &gt;</class>
    <class kind="struct">gtsam::traits&lt; SymbolicFactorGraph &gt;</class>
    <class kind="struct">gtsam::traits&lt; TransformBtwRobotsUnaryFactor&lt; VALUE &gt; &gt;</class>
    <class kind="struct">gtsam::traits&lt; TransformBtwRobotsUnaryFactorEM&lt; VALUE &gt; &gt;</class>
    <class kind="struct">gtsam::traits&lt; Unit3 &gt;</class>
    <class kind="struct">gtsam::traits&lt; Values &gt;</class>
    <class kind="struct">gtsam::traits&lt; VariableIndex &gt;</class>
    <class kind="struct">gtsam::traits&lt; VariableSlots &gt;</class>
    <class kind="struct">gtsam::traits&lt; VectorValues &gt;</class>
    <class kind="class">gtsam::TransformBtwRobotsUnaryFactor</class>
    <class kind="class">gtsam::TransformBtwRobotsUnaryFactorEM</class>
    <class kind="class">gtsam::TriangulationCheiralityException</class>
    <class kind="class">gtsam::TriangulationFactor</class>
    <class kind="struct">gtsam::TriangulationParameters</class>
    <class kind="class">gtsam::TriangulationResult</class>
    <class kind="class">gtsam::TriangulationUnderconstrainedException</class>
    <class kind="class">gtsam::Unit3</class>
    <class kind="class">gtsam::Value</class>
    <class kind="class">gtsam::ValueCloneAllocator</class>
    <class kind="class">gtsam::Values</class>
    <class kind="struct">gtsam::ValuesCastHelper</class>
    <class kind="struct">gtsam::ValuesCastHelper&lt; const Value, CastedKeyValuePairType, KeyValuePairType &gt;</class>
    <class kind="struct">gtsam::ValuesCastHelper&lt; Value, CastedKeyValuePairType, KeyValuePairType &gt;</class>
    <class kind="class">gtsam::ValuesIncorrectType</class>
    <class kind="class">gtsam::ValuesKeyAlreadyExists</class>
    <class kind="class">gtsam::ValuesKeyDoesNotExist</class>
    <class kind="struct">gtsam::ValueWithDefault</class>
    <class kind="class">gtsam::VariableIndex</class>
    <class kind="class">gtsam::VariableSlots</class>
    <class kind="struct">gtsam::vector_space_tag</class>
    <class kind="class">gtsam::VectorValues</class>
    <class kind="class">gtsam::VelocityConstraint</class>
    <class kind="class">gtsam::VelocityConstraint3</class>
    <class kind="class">gtsam::VelocityPrior</class>
    <class kind="class">gtsam::VerticalBlockMatrix</class>
    <class kind="class">gtsam::WhiteNoiseFactor</class>
    <member kind="typedef">
      <type>std::uint64_t</type>
      <name>Key</name>
      <anchorfile>a01405.html</anchorfile>
      <anchor>adad029f5f6ffce610428b5fe768b0df2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::uint64_t</type>
      <name>FactorIndex</name>
      <anchorfile>a01405.html</anchorfile>
      <anchor>a19c53f2faabb0f4b4b78ce2f7168cc14</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ptrdiff_t</type>
      <name>DenseIndex</name>
      <anchorfile>a01405.html</anchorfile>
      <anchor>a21006f326f57cdf7d3f35fec40f43e40</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::pair&lt; Key, size_t &gt;</type>
      <name>DiscreteKey</name>
      <anchorfile>a01405.html</anchorfile>
      <anchor>acd19e5d1e5d06c37246d4c15af38ee67</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::pair&lt; Point2, Point2 &gt;</type>
      <name>Point2Pair</name>
      <anchorfile>a01405.html</anchorfile>
      <anchor>aea758f150791443afe1191868963b4e1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>gtsam::PinholeCamera&lt; gtsam::Cal3_S2 &gt;</type>
      <name>PinholeCameraCal3_S2</name>
      <anchorfile>a01405.html</anchorfile>
      <anchor>ab314b48e64ff3d3be5f45aa214370438</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>FastVector&lt; FactorIndex &gt;</type>
      <name>FactorIndices</name>
      <anchorfile>a01405.html</anchorfile>
      <anchor>a3691936bb30a93d5dfe6b7119e9f6a9b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>boost::function&lt; std::string(Key)&gt;</type>
      <name>KeyFormatter</name>
      <anchorfile>a01405.html</anchorfile>
      <anchor>a29dee574fe60f586d71b2c0d957dc8bb</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>FastVector&lt; Key &gt;</type>
      <name>KeyVector</name>
      <anchorfile>a01405.html</anchorfile>
      <anchor>a18932dfd5dba41c0574e6db16cdb5932</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>noiseModel::Base::shared_ptr</type>
      <name>SharedNoiseModel</name>
      <anchorfile>a01405.html</anchorfile>
      <anchor>ab6e5a4884342656e0837ef07008ec03f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Vector3</type>
      <name>Velocity3</name>
      <anchorfile>a01405.html</anchorfile>
      <anchor>ad6ba0a40d5dd8936f4ca53f7bb3ef53b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::pair&lt; Key, Pose2 &gt;</type>
      <name>IndexedPose</name>
      <anchorfile>a01405.html</anchorfile>
      <anchor>ab6ca51d10a8bb267d45bb4198946abca</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::pair&lt; NonlinearFactorGraph::shared_ptr, Values::shared_ptr &gt;</type>
      <name>GraphAndValues</name>
      <anchorfile>a01405.html</anchorfile>
      <anchor>a62b6d8d9df4bb6e0add77af1ffd41c04</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::vector&lt; gtsam::BetweenFactor&lt; Pose3 &gt;::shared_ptr &gt;</type>
      <name>BetweenFactorPose3s</name>
      <anchorfile>a01405.html</anchorfile>
      <anchor>a5e0039fe3dd9ae90ff7bc7b92e5027d4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::pair&lt; size_t, Point2 &gt;</type>
      <name>SfM_Measurement</name>
      <anchorfile>a01405.html</anchorfile>
      <anchor>a424cd75273f459332d71dcf59d8e6157</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::pair&lt; size_t, size_t &gt;</type>
      <name>SIFT_Index</name>
      <anchorfile>a01405.html</anchorfile>
      <anchor>ac12eee83ad5171a32831a44ceb216d7c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>PinholeCamera&lt; Cal3Bundler &gt;</type>
      <name>SfM_Camera</name>
      <anchorfile>a01405.html</anchorfile>
      <anchor>a57df85ec453d878a568bc619734af335</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::map&lt; Key, size_t &gt;</type>
      <name>KeyDimMap</name>
      <anchorfile>a01405.html</anchorfile>
      <anchor>a56e7423b122a2ac2a9ba1a07546516a5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ConcurrentBatchFilter::Result</type>
      <name>ConcurrentBatchFilterResult</name>
      <anchorfile>a01405.html</anchorfile>
      <anchor>a48e3e10fd7b2e4e28d57370b8ee63c75</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ConcurrentBatchSmoother::Result</type>
      <name>ConcurrentBatchSmootherResult</name>
      <anchorfile>a01405.html</anchorfile>
      <anchor>a630a70c8307aedd4cca4556d751581ff</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ConcurrentIncrementalFilter::Result</type>
      <name>ConcurrentIncrementalFilterResult</name>
      <anchorfile>a01405.html</anchorfile>
      <anchor>a86ade83ffa0c2e87948350a487bc986a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ConcurrentIncrementalSmoother::Result</type>
      <name>ConcurrentIncrementalSmootherResult</name>
      <anchorfile>a01405.html</anchorfile>
      <anchor>ab1c68e081eba4a337a9e97a11cfb1bdc</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>FixedLagSmoother::KeyTimestampMap</type>
      <name>FixedLagSmootherKeyTimestampMap</name>
      <anchorfile>a01405.html</anchorfile>
      <anchor>aa2a302ee683dae9b50409588c07669d7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>NoiseFormat</name>
      <anchorfile>a01405.html</anchorfile>
      <anchor>a90552b70a2da9c74595cae4b05c2ce18</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NoiseFormatG2O</name>
      <anchorfile>a01405.html</anchorfile>
      <anchor>a90552b70a2da9c74595cae4b05c2ce18ad0aaa5c51a45cb7c9151aae60a603209</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NoiseFormatTORO</name>
      <anchorfile>a01405.html</anchorfile>
      <anchor>a90552b70a2da9c74595cae4b05c2ce18a3790bc2c6f11cd7da84730b33173de5a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NoiseFormatGRAPH</name>
      <anchorfile>a01405.html</anchorfile>
      <anchor>a90552b70a2da9c74595cae4b05c2ce18a1f8edeb25c58a249789556c686265a4c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NoiseFormatCOV</name>
      <anchorfile>a01405.html</anchorfile>
      <anchor>a90552b70a2da9c74595cae4b05c2ce18a5450a16f3522214ccdfa23c461e7d05a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NoiseFormatAUTO</name>
      <anchorfile>a01405.html</anchorfile>
      <anchor>a90552b70a2da9c74595cae4b05c2ce18a2f9067b8f5bd2d0dd38c49326a4c070e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>KernelFunctionType</name>
      <anchorfile>a01405.html</anchorfile>
      <anchor>a8be373f34edc0a9d28b1bfab5dd62ba0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>LinearizationMode</name>
      <anchorfile>a01405.html</anchorfile>
      <anchor>adf2020f3f6087064dde501c99794aac3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>DegeneracyMode</name>
      <anchorfile>a01405.html</anchorfile>
      <anchor>ac3d021280c8a8b84903a8ce81f73ea0f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>pair&lt; size_t, bool &gt;</type>
      <name>choleskyCareful</name>
      <anchorfile>a01405.html</anchorfile>
      <anchor>a747683f736c50bca16b3aab0e95b1b76</anchor>
      <arglist>(Matrix &amp;ATA, int order=-1)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>choleskyPartial</name>
      <anchorfile>a01405.html</anchorfile>
      <anchor>abe82fa6aceccfa2360cf314ab44f39ad</anchor>
      <arglist>(Matrix &amp;ABC, size_t nFrontal, size_t topleft=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BOOST_CONCEPT_REQUIRES</name>
      <anchorfile>a01405.html</anchorfile>
      <anchor>a2e95b5b5508cf3284107e979401bd1a4</anchor>
      <arglist>(((IsGroup&lt; G &gt;)),(bool)) check_group_invariants(const G &amp;a</arglist>
    </member>
    <member kind="function">
      <type>Class</type>
      <name>between_default</name>
      <anchorfile>a01405.html</anchorfile>
      <anchor>abd92914d0822d42584d46f31fb500048</anchor>
      <arglist>(const Class &amp;l1, const Class &amp;l2)</arglist>
    </member>
    <member kind="function">
      <type>Vector</type>
      <name>logmap_default</name>
      <anchorfile>a01405.html</anchorfile>
      <anchor>a5c6ccec4a3ea452361c0956766bccef5</anchor>
      <arglist>(const Class &amp;l0, const Class &amp;lp)</arglist>
    </member>
    <member kind="function">
      <type>Class</type>
      <name>expmap_default</name>
      <anchorfile>a01405.html</anchorfile>
      <anchor>af5a7c0a7422c38a0baa131c073e233ac</anchor>
      <arglist>(const Class &amp;t, const Vector &amp;d)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>BCH</name>
      <anchorfile>a01405.html</anchorfile>
      <anchor>adbd55c711e6ceee791b595558eb3ec8a</anchor>
      <arglist>(const T &amp;X, const T &amp;Y)</arglist>
    </member>
    <member kind="function">
      <type>Matrix</type>
      <name>wedge</name>
      <anchorfile>a01405.html</anchorfile>
      <anchor>afe28b7f8e3592fb9f5cf9ebae09497ba</anchor>
      <arglist>(const Vector &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>expm</name>
      <anchorfile>a01405.html</anchorfile>
      <anchor>a3041816208c79ef76d3ef2e0991d90b2</anchor>
      <arglist>(const Vector &amp;x, int K=7)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>interpolate</name>
      <anchorfile>a01405.html</anchorfile>
      <anchor>a38c24f15506355b416f2d680dd6b61e1</anchor>
      <arglist>(const T &amp;X, const T &amp;Y, double t)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BOOST_CONCEPT_REQUIRES</name>
      <anchorfile>a01405.html</anchorfile>
      <anchor>ae03a6aedf0a82f67c2f3e987fb3aacba</anchor>
      <arglist>(((IsTestable&lt; T &gt;)),(bool)) check_manifold_invariants(const T &amp;a</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>assert_equal</name>
      <anchorfile>a01405.html</anchorfile>
      <anchor>a3f9622226dfe06908f11b42bf0bdd22d</anchor>
      <arglist>(const Matrix &amp;A, const Matrix &amp;B, double tol=1e-9)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>assert_inequal</name>
      <anchorfile>a01405.html</anchorfile>
      <anchor>a7a116d0643f123ef3b15d91056506492</anchor>
      <arglist>(const Matrix &amp;A, const Matrix &amp;B, double tol=1e-9)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>assert_equal</name>
      <anchorfile>a01405.html</anchorfile>
      <anchor>abb0e19bbbeaca95843e8161b89a12fda</anchor>
      <arglist>(const std::list&lt; Matrix &gt; &amp;As, const std::list&lt; Matrix &gt; &amp;Bs, double tol=1e-9)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>linear_independent</name>
      <anchorfile>a01405.html</anchorfile>
      <anchor>ad8f0349471464c1fb515819d9503849a</anchor>
      <arglist>(const Matrix &amp;A, const Matrix &amp;B, double tol=1e-9)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>linear_dependent</name>
      <anchorfile>a01405.html</anchorfile>
      <anchor>a4b81794af72954abafbb726fc712f5db</anchor>
      <arglist>(const Matrix &amp;A, const Matrix &amp;B, double tol=1e-9)</arglist>
    </member>
    <member kind="function">
      <type>Vector</type>
      <name>operator^</name>
      <anchorfile>a01405.html</anchorfile>
      <anchor>a2218e53a2b99c449e70aa5b7805895fc</anchor>
      <arglist>(const Matrix &amp;A, const Vector &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>a01405.html</anchorfile>
      <anchor>a54fa43c89c5334314c8c75939dd5c2d7</anchor>
      <arglist>(const Matrix &amp;A, const std::string &amp;s, std::ostream &amp;stream)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>a01405.html</anchorfile>
      <anchor>a44ead03912d5dcf094d8421e1702ee71</anchor>
      <arglist>(const Matrix &amp;A, const std::string &amp;s=&quot;&quot;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>save</name>
      <anchorfile>a01405.html</anchorfile>
      <anchor>a3eb7eed9019d3fda8fcf74fbf85b85c9</anchor>
      <arglist>(const Matrix &amp;A, const std::string &amp;s, const std::string &amp;filename)</arglist>
    </member>
    <member kind="function">
      <type>istream &amp;</type>
      <name>operator&gt;&gt;</name>
      <anchorfile>a01405.html</anchorfile>
      <anchor>a7d85957bab2d18cf56ab9aaf95a106de</anchor>
      <arglist>(std::istream &amp;inputStream, Matrix &amp;destinationMatrix)</arglist>
    </member>
    <member kind="function">
      <type>Matrix</type>
      <name>diag</name>
      <anchorfile>a01405.html</anchorfile>
      <anchor>af1c32907adce74cf9edd6ee5bba5a085</anchor>
      <arglist>(const std::vector&lt; Matrix &gt; &amp;Hs)</arglist>
    </member>
    <member kind="function">
      <type>pair&lt; Matrix, Matrix &gt;</type>
      <name>qr</name>
      <anchorfile>a01405.html</anchorfile>
      <anchor>ae32c295e2c40c1e85f146a8a6266eaa8</anchor>
      <arglist>(const Matrix &amp;A)</arglist>
    </member>
    <member kind="function">
      <type>list&lt; boost::tuple&lt; Vector, double, double &gt; &gt;</type>
      <name>weighted_eliminate</name>
      <anchorfile>a01405.html</anchorfile>
      <anchor>a60019a03f26b92c6b2a08e43d153d4c0</anchor>
      <arglist>(Matrix &amp;A, Vector &amp;b, const Vector &amp;sigmas)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>householder_</name>
      <anchorfile>a01405.html</anchorfile>
      <anchor>abdd1ab05e8ac90b340fbd8f3b322dc6d</anchor>
      <arglist>(Matrix &amp;A, size_t k, bool copy_vectors)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>householder</name>
      <anchorfile>a01405.html</anchorfile>
      <anchor>a7baa2f3184a444adce108633c0265e0c</anchor>
      <arglist>(Matrix &amp;A, size_t k)</arglist>
    </member>
    <member kind="function">
      <type>Vector</type>
      <name>backSubstituteLower</name>
      <anchorfile>a01405.html</anchorfile>
      <anchor>a0d998e1b770c9864946ddb031b1c4522</anchor>
      <arglist>(const Matrix &amp;L, const Vector &amp;b, bool unit=false)</arglist>
    </member>
    <member kind="function">
      <type>Vector</type>
      <name>backSubstituteUpper</name>
      <anchorfile>a01405.html</anchorfile>
      <anchor>a6c4876cbe85d5651a52eda0e97c60f2f</anchor>
      <arglist>(const Matrix &amp;U, const Vector &amp;b, bool unit=false)</arglist>
    </member>
    <member kind="function">
      <type>Vector</type>
      <name>backSubstituteUpper</name>
      <anchorfile>a01405.html</anchorfile>
      <anchor>a8b0bf332d52b333dab2b20d763c8925b</anchor>
      <arglist>(const Vector &amp;b, const Matrix &amp;U, bool unit=false)</arglist>
    </member>
    <member kind="function">
      <type>Matrix</type>
      <name>stack</name>
      <anchorfile>a01405.html</anchorfile>
      <anchor>a5c82884a356ddd09229a5283aed04df9</anchor>
      <arglist>(size_t nrMatrices,...)</arglist>
    </member>
    <member kind="function">
      <type>Matrix</type>
      <name>collect</name>
      <anchorfile>a01405.html</anchorfile>
      <anchor>ad8b524ba6c9aed0d21a020999c9b5d88</anchor>
      <arglist>(const std::vector&lt; const Matrix * &gt; &amp;matrices, size_t m=0, size_t n=0)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>vector_scale_inplace</name>
      <anchorfile>a01405.html</anchorfile>
      <anchor>a24d3ad0252f91f0ec301593c45cf5af7</anchor>
      <arglist>(const Vector &amp;v, Matrix &amp;A, bool inf_mask=false)</arglist>
    </member>
    <member kind="function">
      <type>Matrix</type>
      <name>cholesky_inverse</name>
      <anchorfile>a01405.html</anchorfile>
      <anchor>aba542e2cd85f08b76f80a0871a4ea713</anchor>
      <arglist>(const Matrix &amp;A)</arglist>
    </member>
    <member kind="function">
      <type>Matrix</type>
      <name>inverse_square_root</name>
      <anchorfile>a01405.html</anchorfile>
      <anchor>aff78dee59ac0250432081f39deb5f6d1</anchor>
      <arglist>(const Matrix &amp;A)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>svd</name>
      <anchorfile>a01405.html</anchorfile>
      <anchor>a8d7e46204d953f64a39445599dbd7eee</anchor>
      <arglist>(const Matrix &amp;A, Matrix &amp;U, Vector &amp;S, Matrix &amp;V)</arglist>
    </member>
    <member kind="function">
      <type>boost::tuple&lt; int, double, Vector &gt;</type>
      <name>DLT</name>
      <anchorfile>a01405.html</anchorfile>
      <anchor>ab2c65f1a69009a306b6a5f9ef31dcee2</anchor>
      <arglist>(const Matrix &amp;A, double rank_tol=1e-9)</arglist>
    </member>
    <member kind="function">
      <type>Matrix</type>
      <name>expm</name>
      <anchorfile>a01405.html</anchorfile>
      <anchor>ab15462d8c16813d0a7a5b1f76a2f64b7</anchor>
      <arglist>(const Matrix &amp;A, size_t K=7)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>inplace_QR</name>
      <anchorfile>a01405.html</anchorfile>
      <anchor>a5554cb2735894b901f4dc72b9f61041d</anchor>
      <arglist>(Matrix &amp;A)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>equal_with_abs_tol</name>
      <anchorfile>a01405.html</anchorfile>
      <anchor>af31e657258505b2e5148846ebbaa3195</anchor>
      <arglist>(const Eigen::DenseBase&lt; MATRIX &gt; &amp;A, const Eigen::DenseBase&lt; MATRIX &gt; &amp;B, double tol=1e-9)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>a01405.html</anchorfile>
      <anchor>afd5b3cf3f54adcbdd6d9e7403f1a792f</anchor>
      <arglist>(const Matrix &amp;A, const Matrix &amp;B)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>a01405.html</anchorfile>
      <anchor>ab235abf7505b634be2165e0db58239dd</anchor>
      <arglist>(const Matrix &amp;A, const Matrix &amp;B)</arglist>
    </member>
    <member kind="function">
      <type>MATRIX</type>
      <name>prod</name>
      <anchorfile>a01405.html</anchorfile>
      <anchor>abc29e3164ed30e785a3c48dfd1aa6ca5</anchor>
      <arglist>(const MATRIX &amp;A, const MATRIX &amp;B)</arglist>
    </member>
    <member kind="function">
      <type>Eigen::Block&lt; const MATRIX &gt;</type>
      <name>sub</name>
      <anchorfile>a01405.html</anchorfile>
      <anchor>aed6673ca73bb7ab59f46f08e3a5cc284</anchor>
      <arglist>(const MATRIX &amp;A, size_t i1, size_t i2, size_t j1, size_t j2)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>insertSub</name>
      <anchorfile>a01405.html</anchorfile>
      <anchor>ad1088fa2d1494e6a4123a6bc3f5c2d7e</anchor>
      <arglist>(Eigen::MatrixBase&lt; Derived1 &gt; &amp;fullMatrix, const Eigen::MatrixBase&lt; Derived2 &gt; &amp;subMatrix, size_t i, size_t j)</arglist>
    </member>
    <member kind="function">
      <type>const MATRIX::ConstColXpr</type>
      <name>column</name>
      <anchorfile>a01405.html</anchorfile>
      <anchor>a559dba69e2854eb66e34222f60f55722</anchor>
      <arglist>(const MATRIX &amp;A, size_t j)</arglist>
    </member>
    <member kind="function">
      <type>const MATRIX::ConstRowXpr</type>
      <name>row</name>
      <anchorfile>a01405.html</anchorfile>
      <anchor>a2754f325c8600303d627d9e8cf1f9949</anchor>
      <arglist>(const MATRIX &amp;A, size_t j)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>zeroBelowDiagonal</name>
      <anchorfile>a01405.html</anchorfile>
      <anchor>a57edf6ed7312f63d35f73233665c334d</anchor>
      <arglist>(MATRIX &amp;A, size_t cols=0)</arglist>
    </member>
    <member kind="function">
      <type>Matrix</type>
      <name>trans</name>
      <anchorfile>a01405.html</anchorfile>
      <anchor>aa2e36d7ab63000feddaeb61bbfcf2db1</anchor>
      <arglist>(const Matrix &amp;A)</arglist>
    </member>
    <member kind="function">
      <type>Matrix3</type>
      <name>skewSymmetric</name>
      <anchorfile>a01405.html</anchorfile>
      <anchor>a97f108d19e52c83c331c55d35b23796e</anchor>
      <arglist>(double wx, double wy, double wz)</arglist>
    </member>
    <member kind="function">
      <type>Eigen::Matrix&lt; double, N, 1 &gt;</type>
      <name>numericalGradient</name>
      <anchorfile>a01405.html</anchorfile>
      <anchor>a7104a97b496796bb2adedf9adcb7d613</anchor>
      <arglist>(boost::function&lt; double(const X &amp;)&gt; h, const X &amp;x, double delta=1e-5)</arglist>
    </member>
    <member kind="function">
      <type>internal::FixedSizeMatrix&lt; Y, X &gt;::type</type>
      <name>numericalDerivative11</name>
      <anchorfile>a01405.html</anchorfile>
      <anchor>a51e2ca23db34b647b6928ce23bb04e8a</anchor>
      <arglist>(boost::function&lt; Y(const X &amp;)&gt; h, const X &amp;x, double delta=1e-5)</arglist>
    </member>
    <member kind="function">
      <type>internal::FixedSizeMatrix&lt; Y, X &gt;::type</type>
      <name>numericalDerivative11</name>
      <anchorfile>a01405.html</anchorfile>
      <anchor>ad45cc8dad99ef6a1eefd0e15887dc9ec</anchor>
      <arglist>(Y(*h)(const X &amp;), const X &amp;x, double delta=1e-5)</arglist>
    </member>
    <member kind="function">
      <type>internal::FixedSizeMatrix&lt; Y, X1 &gt;::type</type>
      <name>numericalDerivative21</name>
      <anchorfile>a01405.html</anchorfile>
      <anchor>a1b86019fe968fdc636edf34bbf504cd5</anchor>
      <arglist>(const boost::function&lt; Y(const X1 &amp;, const X2 &amp;)&gt; &amp;h, const X1 &amp;x1, const X2 &amp;x2, double delta=1e-5)</arglist>
    </member>
    <member kind="function">
      <type>internal::FixedSizeMatrix&lt; Y, X1 &gt;::type</type>
      <name>numericalDerivative21</name>
      <anchorfile>a01405.html</anchorfile>
      <anchor>ab38d9689510396b82d59e503dd9cbe7a</anchor>
      <arglist>(Y(*h)(const X1 &amp;, const X2 &amp;), const X1 &amp;x1, const X2 &amp;x2, double delta=1e-5)</arglist>
    </member>
    <member kind="function">
      <type>internal::FixedSizeMatrix&lt; Y, X2 &gt;::type</type>
      <name>numericalDerivative22</name>
      <anchorfile>a01405.html</anchorfile>
      <anchor>a811e5bea9feb408267509d3d4d150923</anchor>
      <arglist>(boost::function&lt; Y(const X1 &amp;, const X2 &amp;)&gt; h, const X1 &amp;x1, const X2 &amp;x2, double delta=1e-5)</arglist>
    </member>
    <member kind="function">
      <type>internal::FixedSizeMatrix&lt; Y, X2 &gt;::type</type>
      <name>numericalDerivative22</name>
      <anchorfile>a01405.html</anchorfile>
      <anchor>a00d2845cb1dbc7484215c01e5c3d0261</anchor>
      <arglist>(Y(*h)(const X1 &amp;, const X2 &amp;), const X1 &amp;x1, const X2 &amp;x2, double delta=1e-5)</arglist>
    </member>
    <member kind="function">
      <type>internal::FixedSizeMatrix&lt; Y, X1 &gt;::type</type>
      <name>numericalDerivative31</name>
      <anchorfile>a01405.html</anchorfile>
      <anchor>a5c5d1cf9863c31ab10accbceda591a29</anchor>
      <arglist>(boost::function&lt; Y(const X1 &amp;, const X2 &amp;, const X3 &amp;)&gt; h, const X1 &amp;x1, const X2 &amp;x2, const X3 &amp;x3, double delta=1e-5)</arglist>
    </member>
    <member kind="function">
      <type>internal::FixedSizeMatrix&lt; Y, X2 &gt;::type</type>
      <name>numericalDerivative32</name>
      <anchorfile>a01405.html</anchorfile>
      <anchor>ae3a165abf55b39a1146dbb0c64f38df7</anchor>
      <arglist>(boost::function&lt; Y(const X1 &amp;, const X2 &amp;, const X3 &amp;)&gt; h, const X1 &amp;x1, const X2 &amp;x2, const X3 &amp;x3, double delta=1e-5)</arglist>
    </member>
    <member kind="function">
      <type>internal::FixedSizeMatrix&lt; Y, X3 &gt;::type</type>
      <name>numericalDerivative33</name>
      <anchorfile>a01405.html</anchorfile>
      <anchor>af025c148363317c715495a275c7326e5</anchor>
      <arglist>(boost::function&lt; Y(const X1 &amp;, const X2 &amp;, const X3 &amp;)&gt; h, const X1 &amp;x1, const X2 &amp;x2, const X3 &amp;x3, double delta=1e-5)</arglist>
    </member>
    <member kind="function">
      <type>internal::FixedSizeMatrix&lt; Y, X1 &gt;::type</type>
      <name>numericalDerivative41</name>
      <anchorfile>a01405.html</anchorfile>
      <anchor>a3b3a148c9c82b1b916fad1a5e0e4148b</anchor>
      <arglist>(boost::function&lt; Y(const X1 &amp;, const X2 &amp;, const X3 &amp;, const X4 &amp;)&gt; h, const X1 &amp;x1, const X2 &amp;x2, const X3 &amp;x3, const X4 &amp;x4, double delta=1e-5)</arglist>
    </member>
    <member kind="function">
      <type>internal::FixedSizeMatrix&lt; Y, X2 &gt;::type</type>
      <name>numericalDerivative42</name>
      <anchorfile>a01405.html</anchorfile>
      <anchor>acc4da7057faa7da0ff58658293590f5d</anchor>
      <arglist>(boost::function&lt; Y(const X1 &amp;, const X2 &amp;, const X3 &amp;, const X4 &amp;)&gt; h, const X1 &amp;x1, const X2 &amp;x2, const X3 &amp;x3, const X4 &amp;x4, double delta=1e-5)</arglist>
    </member>
    <member kind="function">
      <type>internal::FixedSizeMatrix&lt; Y, X3 &gt;::type</type>
      <name>numericalDerivative43</name>
      <anchorfile>a01405.html</anchorfile>
      <anchor>a2b61c2de49bec057000cb622b3ceeee4</anchor>
      <arglist>(boost::function&lt; Y(const X1 &amp;, const X2 &amp;, const X3 &amp;, const X4 &amp;)&gt; h, const X1 &amp;x1, const X2 &amp;x2, const X3 &amp;x3, const X4 &amp;x4, double delta=1e-5)</arglist>
    </member>
    <member kind="function">
      <type>internal::FixedSizeMatrix&lt; Y, X4 &gt;::type</type>
      <name>numericalDerivative44</name>
      <anchorfile>a01405.html</anchorfile>
      <anchor>ae52c82e38fb34ee0e6cd674cefc6e0a4</anchor>
      <arglist>(boost::function&lt; Y(const X1 &amp;, const X2 &amp;, const X3 &amp;, const X4 &amp;)&gt; h, const X1 &amp;x1, const X2 &amp;x2, const X3 &amp;x3, const X4 &amp;x4, double delta=1e-5)</arglist>
    </member>
    <member kind="function">
      <type>internal::FixedSizeMatrix&lt; Y, X1 &gt;::type</type>
      <name>numericalDerivative51</name>
      <anchorfile>a01405.html</anchorfile>
      <anchor>a2419f7b13289a8d7d794ef18bc97242f</anchor>
      <arglist>(boost::function&lt; Y(const X1 &amp;, const X2 &amp;, const X3 &amp;, const X4 &amp;, const X5 &amp;)&gt; h, const X1 &amp;x1, const X2 &amp;x2, const X3 &amp;x3, const X4 &amp;x4, const X5 &amp;x5, double delta=1e-5)</arglist>
    </member>
    <member kind="function">
      <type>internal::FixedSizeMatrix&lt; Y, X2 &gt;::type</type>
      <name>numericalDerivative52</name>
      <anchorfile>a01405.html</anchorfile>
      <anchor>ac6e12cef913504662b259cc716ffa556</anchor>
      <arglist>(boost::function&lt; Y(const X1 &amp;, const X2 &amp;, const X3 &amp;, const X4 &amp;, const X5 &amp;)&gt; h, const X1 &amp;x1, const X2 &amp;x2, const X3 &amp;x3, const X4 &amp;x4, const X5 &amp;x5, double delta=1e-5)</arglist>
    </member>
    <member kind="function">
      <type>internal::FixedSizeMatrix&lt; Y, X3 &gt;::type</type>
      <name>numericalDerivative53</name>
      <anchorfile>a01405.html</anchorfile>
      <anchor>a9a02672e1a81537fd5d0d634573b96df</anchor>
      <arglist>(boost::function&lt; Y(const X1 &amp;, const X2 &amp;, const X3 &amp;, const X4 &amp;, const X5 &amp;)&gt; h, const X1 &amp;x1, const X2 &amp;x2, const X3 &amp;x3, const X4 &amp;x4, const X5 &amp;x5, double delta=1e-5)</arglist>
    </member>
    <member kind="function">
      <type>internal::FixedSizeMatrix&lt; Y, X4 &gt;::type</type>
      <name>numericalDerivative54</name>
      <anchorfile>a01405.html</anchorfile>
      <anchor>a7665497905bb485e9273ada3b506ade2</anchor>
      <arglist>(boost::function&lt; Y(const X1 &amp;, const X2 &amp;, const X3 &amp;, const X4 &amp;, const X5 &amp;)&gt; h, const X1 &amp;x1, const X2 &amp;x2, const X3 &amp;x3, const X4 &amp;x4, const X5 &amp;x5, double delta=1e-5)</arglist>
    </member>
    <member kind="function">
      <type>internal::FixedSizeMatrix&lt; Y, X5 &gt;::type</type>
      <name>numericalDerivative55</name>
      <anchorfile>a01405.html</anchorfile>
      <anchor>acfa0fdee5759b195b4672e5079f2aaa5</anchor>
      <arglist>(boost::function&lt; Y(const X1 &amp;, const X2 &amp;, const X3 &amp;, const X4 &amp;, const X5 &amp;)&gt; h, const X1 &amp;x1, const X2 &amp;x2, const X3 &amp;x3, const X4 &amp;x4, const X5 &amp;x5, double delta=1e-5)</arglist>
    </member>
    <member kind="function">
      <type>internal::FixedSizeMatrix&lt; X, X &gt;::type</type>
      <name>numericalHessian</name>
      <anchorfile>a01405.html</anchorfile>
      <anchor>acd55c782bdf2c7288eb07142e4c5372d</anchor>
      <arglist>(boost::function&lt; double(const X &amp;)&gt; f, const X &amp;x, double delta=1e-5)</arglist>
    </member>
    <member kind="function">
      <type>internal::FixedSizeMatrix&lt; X1, X1 &gt;::type</type>
      <name>numericalHessian311</name>
      <anchorfile>a01405.html</anchorfile>
      <anchor>ad15b3f8cdf758871fb12e79824561de8</anchor>
      <arglist>(boost::function&lt; double(const X1 &amp;, const X2 &amp;, const X3 &amp;)&gt; f, const X1 &amp;x1, const X2 &amp;x2, const X3 &amp;x3, double delta=1e-5)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>equal</name>
      <anchorfile>a01405.html</anchorfile>
      <anchor>ad2dbee4a72127938c79162cc8b6d5152</anchor>
      <arglist>(const T &amp;obj1, const T &amp;obj2, double tol)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>equal</name>
      <anchorfile>a01405.html</anchorfile>
      <anchor>a1f3dc67ad88b799c469088e428c583b1</anchor>
      <arglist>(const T &amp;obj1, const T &amp;obj2)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>assert_equal</name>
      <anchorfile>a01405.html</anchorfile>
      <anchor>a659619cca082d1c10b07c033d48c54da</anchor>
      <arglist>(const V &amp;expected, const V &amp;actual, double tol=1e-9)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>assert_equal</name>
      <anchorfile>a01405.html</anchorfile>
      <anchor>a982034802415eb6e9bd02355257ed96a</anchor>
      <arglist>(const Key &amp;expected, const Key &amp;actual, double tol=0.0)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>assert_equal</name>
      <anchorfile>a01405.html</anchorfile>
      <anchor>add6d6575582314cc9b5dbdbe2a86374d</anchor>
      <arglist>(const boost::optional&lt; V &gt; &amp;expected, const boost::optional&lt; V &gt; &amp;actual, double tol=1e-9)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>assert_equal</name>
      <anchorfile>a01405.html</anchorfile>
      <anchor>a0931276a9406dfc1bcff6d265704ee39</anchor>
      <arglist>(const std::vector&lt; V &gt; &amp;expected, const std::vector&lt; V &gt; &amp;actual, double tol=1e-9)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>assert_container_equal</name>
      <anchorfile>a01405.html</anchorfile>
      <anchor>a254be27d6d4b416fa2b546c77ae783fc</anchor>
      <arglist>(const std::map&lt; V1, V2 &gt; &amp;expected, const std::map&lt; V1, V2 &gt; &amp;actual, double tol=1e-9)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>assert_container_equal</name>
      <anchorfile>a01405.html</anchorfile>
      <anchor>a2f509195ea2180d0f7dbd3a99a088ff4</anchor>
      <arglist>(const std::map&lt; size_t, V2 &gt; &amp;expected, const std::map&lt; size_t, V2 &gt; &amp;actual, double tol=1e-9)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>assert_container_equal</name>
      <anchorfile>a01405.html</anchorfile>
      <anchor>a0eec17f894b358dd9f30d7af28082ba5</anchor>
      <arglist>(const std::vector&lt; std::pair&lt; V1, V2 &gt; &gt; &amp;expected, const std::vector&lt; std::pair&lt; V1, V2 &gt; &gt; &amp;actual, double tol=1e-9)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>assert_container_equal</name>
      <anchorfile>a01405.html</anchorfile>
      <anchor>a6d6b2964354593f69848f6bf5d3e0ca1</anchor>
      <arglist>(const V &amp;expected, const V &amp;actual, double tol=1e-9)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>assert_container_equality</name>
      <anchorfile>a01405.html</anchorfile>
      <anchor>a59ba6a7db27344c5cb021f1421905020</anchor>
      <arglist>(const std::map&lt; size_t, V2 &gt; &amp;expected, const std::map&lt; size_t, V2 &gt; &amp;actual)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>assert_container_equality</name>
      <anchorfile>a01405.html</anchorfile>
      <anchor>aa0926a5d779171bd8e1d30fb5982b5c0</anchor>
      <arglist>(const V &amp;expected, const V &amp;actual)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>assert_equal</name>
      <anchorfile>a01405.html</anchorfile>
      <anchor>a21e760bc75888053afd86a27d56b6148</anchor>
      <arglist>(const std::string &amp;expected, const std::string &amp;actual)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>assert_inequal</name>
      <anchorfile>a01405.html</anchorfile>
      <anchor>a2f19ba6625a264457805513fefcb5c32</anchor>
      <arglist>(const V &amp;expected, const V &amp;actual, double tol=1e-9)</arglist>
    </member>
    <member kind="function">
      <type>ListOfOneContainer&lt; T &gt;</type>
      <name>ListOfOne</name>
      <anchorfile>a01405.html</anchorfile>
      <anchor>ac3ed0dcde6a0084d7f1792c396e5dbaf</anchor>
      <arglist>(const T &amp;element)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>a01405.html</anchorfile>
      <anchor>a760cc36e9009b23cf564c436294b3504</anchor>
      <arglist>(const Vector &amp;v, const std::string &amp;s, std::ostream &amp;stream)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>a01405.html</anchorfile>
      <anchor>a5e5d8018a0f44a6a299406aeda27d44b</anchor>
      <arglist>(const Vector &amp;v, const std::string &amp;s=&quot;&quot;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>save</name>
      <anchorfile>a01405.html</anchorfile>
      <anchor>a09f2bbdb9f9d633542362dbe8d79f9ab</anchor>
      <arglist>(const Vector &amp;A, const std::string &amp;s, const std::string &amp;filename)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>a01405.html</anchorfile>
      <anchor>a64988014ab746343803620dc42513646</anchor>
      <arglist>(const Vector &amp;vec1, const Vector &amp;vec2)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>greaterThanOrEqual</name>
      <anchorfile>a01405.html</anchorfile>
      <anchor>a368ee40bd9c0124d572d2e49bcb077bf</anchor>
      <arglist>(const Vector &amp;v1, const Vector &amp;v2)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>equal_with_abs_tol</name>
      <anchorfile>a01405.html</anchorfile>
      <anchor>a8bdced1844ffd6a53af0396d82eaa6da</anchor>
      <arglist>(const Vector &amp;vec1, const Vector &amp;vec2, double tol=1e-9)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>assert_equal</name>
      <anchorfile>a01405.html</anchorfile>
      <anchor>a9f3ee662d25ffb8c04b4e35c4b02e90b</anchor>
      <arglist>(const Vector &amp;vec1, const Vector &amp;vec2, double tol=1e-9)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>assert_inequal</name>
      <anchorfile>a01405.html</anchorfile>
      <anchor>a2ca3db47b15350977c1f03c5560ab332</anchor>
      <arglist>(const Vector &amp;vec1, const Vector &amp;vec2, double tol=1e-9)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>assert_equal</name>
      <anchorfile>a01405.html</anchorfile>
      <anchor>ac3cf8e8e70cd696d9c789c31bc1e89a7</anchor>
      <arglist>(const SubVector &amp;vec1, const SubVector &amp;vec2, double tol=1e-9)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>linear_dependent</name>
      <anchorfile>a01405.html</anchorfile>
      <anchor>a2a0cfd7908b06491df49b6a9c9186775</anchor>
      <arglist>(const Vector &amp;vec1, const Vector &amp;vec2, double tol=1e-9)</arglist>
    </member>
    <member kind="function">
      <type>Vector</type>
      <name>ediv_</name>
      <anchorfile>a01405.html</anchorfile>
      <anchor>a14844c96706dc362917e0d5e76d65fbe</anchor>
      <arglist>(const Vector &amp;a, const Vector &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>houseInPlace</name>
      <anchorfile>a01405.html</anchorfile>
      <anchor>ac9c0c05b0198ec0fb6e4115edb755910</anchor>
      <arglist>(Vector &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>pair&lt; double, Vector &gt;</type>
      <name>house</name>
      <anchorfile>a01405.html</anchorfile>
      <anchor>afb77eefc25dea0fb3e0fcc8f246b617a</anchor>
      <arglist>(const Vector &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>pair&lt; Vector, double &gt;</type>
      <name>weightedPseudoinverse</name>
      <anchorfile>a01405.html</anchorfile>
      <anchor>aca1c56d11a05464a7a5458dc32ccc777</anchor>
      <arglist>(const Vector &amp;v, const Vector &amp;weights)</arglist>
    </member>
    <member kind="function">
      <type>Vector</type>
      <name>concatVectors</name>
      <anchorfile>a01405.html</anchorfile>
      <anchor>ae1c88acfa9575bcea3f2e738cb637a85</anchor>
      <arglist>(const std::list&lt; Vector &gt; &amp;vs)</arglist>
    </member>
    <member kind="function">
      <type>Vector</type>
      <name>concatVectors</name>
      <anchorfile>a01405.html</anchorfile>
      <anchor>a09610ec69a8b3f3a00399bb378eda9cf</anchor>
      <arglist>(size_t nrVectors,...)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>equal</name>
      <anchorfile>a01405.html</anchorfile>
      <anchor>aa7ed1d4fe2dd6828cfeb2d8f488b818d</anchor>
      <arglist>(const Vector &amp;vec1, const Vector &amp;vec2, double tol)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>equal</name>
      <anchorfile>a01405.html</anchorfile>
      <anchor>a3d1cad2313f69f9fa5008fdc348d1526</anchor>
      <arglist>(const Vector &amp;vec1, const Vector &amp;vec2)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>dot</name>
      <anchorfile>a01405.html</anchorfile>
      <anchor>ad80249acf12bbea741e755cd8fc73042</anchor>
      <arglist>(const V1 &amp;a, const V2 &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>inner_prod</name>
      <anchorfile>a01405.html</anchorfile>
      <anchor>a4ca41ba9ec9d6d21a2b9f5e00f9f25ed</anchor>
      <arglist>(const V1 &amp;a, const V2 &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>scal</name>
      <anchorfile>a01405.html</anchorfile>
      <anchor>ad371582718b5e685ace31c176f2a9abc</anchor>
      <arglist>(double alpha, Vector &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>axpy</name>
      <anchorfile>a01405.html</anchorfile>
      <anchor>a30a89a0147943428129e2cb3683988be</anchor>
      <arglist>(double alpha, const V1 &amp;x, V2 &amp;y)</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; Assignment&lt; L &gt; &gt;</type>
      <name>cartesianProduct</name>
      <anchorfile>a01405.html</anchorfile>
      <anchor>a35831074a7aab15d463acddc7767bfe8</anchor>
      <arglist>(const std::vector&lt; std::pair&lt; L, size_t &gt; &gt; &amp;keys)</arglist>
    </member>
    <member kind="function">
      <type>DecisionTree&lt; L, Y &gt;</type>
      <name>apply</name>
      <anchorfile>a01405.html</anchorfile>
      <anchor>abf36c31dcf9f45f5bbdfd2b80f07cd1f</anchor>
      <arglist>(const DecisionTree&lt; L, Y &gt; &amp;f, const typename DecisionTree&lt; L, Y &gt;::Unary &amp;op)</arglist>
    </member>
    <member kind="function">
      <type>std::pair&lt; DiscreteConditional::shared_ptr, DecisionTreeFactor::shared_ptr &gt;</type>
      <name>EliminateDiscrete</name>
      <anchorfile>a01405.html</anchorfile>
      <anchor>a0767417e558bbac14f3b27bc54d033e9</anchor>
      <arglist>(const DiscreteFactorGraph &amp;factors, const Ordering &amp;keys)</arglist>
    </member>
    <member kind="function">
      <type>DiscreteKeys</type>
      <name>operator &amp;</name>
      <anchorfile>a01405.html</anchorfile>
      <anchor>a4a2fe0b6ea0287622d3126cea91c6ebd</anchor>
      <arglist>(const DiscreteKey &amp;key1, const DiscreteKey &amp;key2)</arglist>
    </member>
    <member kind="function">
      <type>Signature</type>
      <name>operator|</name>
      <anchorfile>a01405.html</anchorfile>
      <anchor>aa6c58dfb2fc9398a026e3268ba2edfad</anchor>
      <arglist>(const DiscreteKey &amp;key, const DiscreteKey &amp;parent)</arglist>
    </member>
    <member kind="function">
      <type>Signature</type>
      <name>operator%</name>
      <anchorfile>a01405.html</anchorfile>
      <anchor>ab98cf2a4777006c28d6983db5d8ec574</anchor>
      <arglist>(const DiscreteKey &amp;key, const std::string &amp;parent)</arglist>
    </member>
    <member kind="function">
      <type>Signature</type>
      <name>operator%</name>
      <anchorfile>a01405.html</anchorfile>
      <anchor>ae4856250df52ce4b9b4b16c7a833408c</anchor>
      <arglist>(const DiscreteKey &amp;key, const Signature::Table &amp;parent)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>norm2</name>
      <anchorfile>a01405.html</anchorfile>
      <anchor>afee4e6aa4aba9b6a6b421ddd75b52dfc</anchor>
      <arglist>(const Point2 &amp;p, OptionalJacobian&lt; 1, 2 &gt; H=boost::none)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>distance2</name>
      <anchorfile>a01405.html</anchorfile>
      <anchor>afd1282dfb080cb393ae60188b4582cb2</anchor>
      <arglist>(const Point2 &amp;p1, const Point2 &amp;q, OptionalJacobian&lt; 1, 2 &gt; H1=boost::none, OptionalJacobian&lt; 1, 2 &gt; H2=boost::none)</arglist>
    </member>
    <member kind="function">
      <type>list&lt; Point2 &gt;</type>
      <name>circleCircleIntersection</name>
      <anchorfile>a01405.html</anchorfile>
      <anchor>a93d4e38a582b6f32fc4f301df10721d5</anchor>
      <arglist>(Point2 c1, double r1, Point2 c2, double r2, double tol=1e-9)</arglist>
    </member>
    <member kind="function">
      <type>Point2</type>
      <name>operator *</name>
      <anchorfile>a01405.html</anchorfile>
      <anchor>aad0ea5ed2ef42b81b4320e1edce387b0</anchor>
      <arglist>(double s, const Point2 &amp;p)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>distance3</name>
      <anchorfile>a01405.html</anchorfile>
      <anchor>aa42f7ec660b7353de39f9c86a26711cc</anchor>
      <arglist>(const Point3 &amp;p1, const Point3 &amp;q, OptionalJacobian&lt; 1, 3 &gt; H1=boost::none, OptionalJacobian&lt; 1, 3 &gt; H2=boost::none)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>norm3</name>
      <anchorfile>a01405.html</anchorfile>
      <anchor>ac37b6f807985ffd25217e33f6136fe58</anchor>
      <arglist>(const Point3 &amp;p, OptionalJacobian&lt; 1, 3 &gt; H=boost::none)</arglist>
    </member>
    <member kind="function">
      <type>Point3</type>
      <name>normalize</name>
      <anchorfile>a01405.html</anchorfile>
      <anchor>abb52bb00c68909fc1147e5d112e8c2ae</anchor>
      <arglist>(const Point3 &amp;p, OptionalJacobian&lt; 3, 3 &gt; H=boost::none)</arglist>
    </member>
    <member kind="function">
      <type>Point3</type>
      <name>cross</name>
      <anchorfile>a01405.html</anchorfile>
      <anchor>a86bf6ed2ffb0ecc42a7deb8922f4ca4f</anchor>
      <arglist>(const Point3 &amp;p, const Point3 &amp;q, OptionalJacobian&lt; 3, 3 &gt; H_p=boost::none, OptionalJacobian&lt; 3, 3 &gt; H_q=boost::none)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>dot</name>
      <anchorfile>a01405.html</anchorfile>
      <anchor>a7dc820e4e47218768f104b43a184a1bd</anchor>
      <arglist>(const Point3 &amp;p, const Point3 &amp;q, OptionalJacobian&lt; 1, 3 &gt; H_p=boost::none, OptionalJacobian&lt; 1, 3 &gt; H_q=boost::none)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GTSAM_CONCEPT_POSE_INST</name>
      <anchorfile>a01405.html</anchorfile>
      <anchor>ad6efe09721c5221b12b7a3437f0a2bee</anchor>
      <arglist>(Pose2)</arglist>
    </member>
    <member kind="function">
      <type>Matrix</type>
      <name>wedge&lt; Pose2 &gt;</name>
      <anchorfile>a01405.html</anchorfile>
      <anchor>a4b78f4db0e05f3ca838ee4da6187710e</anchor>
      <arglist>(const Vector &amp;xi)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GTSAM_CONCEPT_POSE_INST</name>
      <anchorfile>a01405.html</anchorfile>
      <anchor>a10a8e9793b8e0d234fb0c83b17a2f5bc</anchor>
      <arglist>(Pose3)</arglist>
    </member>
    <member kind="function">
      <type>Matrix</type>
      <name>wedge&lt; Pose3 &gt;</name>
      <anchorfile>a01405.html</anchorfile>
      <anchor>aefb606eb24889c0f418acf1515a2c723</anchor>
      <arglist>(const Vector &amp;xi)</arglist>
    </member>
    <member kind="function">
      <type>pair&lt; Matrix3, Vector3 &gt;</type>
      <name>RQ</name>
      <anchorfile>a01405.html</anchorfile>
      <anchor>a59e7b1c395b14af00409d9ca3ee4a687</anchor>
      <arglist>(const Matrix3 &amp;A)</arglist>
    </member>
    <member kind="function">
      <type>SimpleCamera</type>
      <name>simpleCamera</name>
      <anchorfile>a01405.html</anchorfile>
      <anchor>a436ecbd806af9fb8665657f1b4b01ed6</anchor>
      <arglist>(const Matrix34 &amp;P)</arglist>
    </member>
    <member kind="function">
      <type>Vector4</type>
      <name>triangulateHomogeneousDLT</name>
      <anchorfile>a01405.html</anchorfile>
      <anchor>a9a1b9142d14816177bd75ae73b3f51af</anchor>
      <arglist>(const std::vector&lt; Matrix34, Eigen::aligned_allocator&lt; Matrix34 &gt;&gt; &amp;projection_matrices, const Point2Vector &amp;measurements, double rank_tol=1e-9)</arglist>
    </member>
    <member kind="function">
      <type>Point3</type>
      <name>triangulateDLT</name>
      <anchorfile>a01405.html</anchorfile>
      <anchor>a693d050510d4b6eb17c2026871f388cf</anchor>
      <arglist>(const std::vector&lt; Matrix34, Eigen::aligned_allocator&lt; Matrix34 &gt;&gt; &amp;projection_matrices, const Point2Vector &amp;measurements, double rank_tol=1e-9)</arglist>
    </member>
    <member kind="function">
      <type>Point3</type>
      <name>optimize</name>
      <anchorfile>a01405.html</anchorfile>
      <anchor>a4b0057879b0c5f323185452b0d1a4232</anchor>
      <arglist>(const NonlinearFactorGraph &amp;graph, const Values &amp;values, Key landmarkKey)</arglist>
    </member>
    <member kind="function">
      <type>std::pair&lt; NonlinearFactorGraph, Values &gt;</type>
      <name>triangulationGraph</name>
      <anchorfile>a01405.html</anchorfile>
      <anchor>a668fff4982774156e2377961e6c88076</anchor>
      <arglist>(const std::vector&lt; Pose3 &gt; &amp;poses, boost::shared_ptr&lt; CALIBRATION &gt; sharedCal, const Point2Vector &amp;measurements, Key landmarkKey, const Point3 &amp;initialEstimate)</arglist>
    </member>
    <member kind="function">
      <type>std::pair&lt; NonlinearFactorGraph, Values &gt;</type>
      <name>triangulationGraph</name>
      <anchorfile>a01405.html</anchorfile>
      <anchor>ac899a47d8956881aea8b3fe594839d60</anchor>
      <arglist>(const CameraSet&lt; CAMERA &gt; &amp;cameras, const typename CAMERA::MeasurementVector &amp;measurements, Key landmarkKey, const Point3 &amp;initialEstimate)</arglist>
    </member>
    <member kind="function">
      <type>std::pair&lt; NonlinearFactorGraph, Values &gt;</type>
      <name>triangulationGraph</name>
      <anchorfile>a01405.html</anchorfile>
      <anchor>a411dabe6c9ac15c22af2a31f313c8476</anchor>
      <arglist>(const CameraSet&lt; PinholeCamera&lt; CALIBRATION &gt; &gt; &amp;cameras, const Point2Vector &amp;measurements, Key landmarkKey, const Point3 &amp;initialEstimate)</arglist>
    </member>
    <member kind="function">
      <type>Point3</type>
      <name>triangulateNonlinear</name>
      <anchorfile>a01405.html</anchorfile>
      <anchor>afd76f4999d5ac79b85c4271943e9251f</anchor>
      <arglist>(const std::vector&lt; Pose3 &gt; &amp;poses, boost::shared_ptr&lt; CALIBRATION &gt; sharedCal, const Point2Vector &amp;measurements, const Point3 &amp;initialEstimate)</arglist>
    </member>
    <member kind="function">
      <type>Point3</type>
      <name>triangulateNonlinear</name>
      <anchorfile>a01405.html</anchorfile>
      <anchor>a2fa35400ef37861ce74067b6a38884ba</anchor>
      <arglist>(const CameraSet&lt; CAMERA &gt; &amp;cameras, const typename CAMERA::MeasurementVector &amp;measurements, const Point3 &amp;initialEstimate)</arglist>
    </member>
    <member kind="function">
      <type>Point3</type>
      <name>triangulateNonlinear</name>
      <anchorfile>a01405.html</anchorfile>
      <anchor>aaa4438c0bf582abf1b5d7aab882eb55f</anchor>
      <arglist>(const CameraSet&lt; PinholeCamera&lt; CALIBRATION &gt; &gt; &amp;cameras, const Point2Vector &amp;measurements, const Point3 &amp;initialEstimate)</arglist>
    </member>
    <member kind="function">
      <type>Point3</type>
      <name>triangulatePoint3</name>
      <anchorfile>a01405.html</anchorfile>
      <anchor>ae7b725c367246edb1beea32060fd50f7</anchor>
      <arglist>(const std::vector&lt; Pose3 &gt; &amp;poses, boost::shared_ptr&lt; CALIBRATION &gt; sharedCal, const Point2Vector &amp;measurements, double rank_tol=1e-9, bool optimize=false)</arglist>
    </member>
    <member kind="function">
      <type>Point3</type>
      <name>triangulatePoint3</name>
      <anchorfile>a01405.html</anchorfile>
      <anchor>a0493526601a58e173f8c0646ed302739</anchor>
      <arglist>(const CameraSet&lt; CAMERA &gt; &amp;cameras, const typename CAMERA::MeasurementVector &amp;measurements, double rank_tol=1e-9, bool optimize=false)</arglist>
    </member>
    <member kind="function">
      <type>Point3</type>
      <name>triangulatePoint3</name>
      <anchorfile>a01405.html</anchorfile>
      <anchor>a22a9a20bbbd347f4cf2a7153a5d43ec4</anchor>
      <arglist>(const CameraSet&lt; PinholeCamera&lt; CALIBRATION &gt; &gt; &amp;cameras, const Point2Vector &amp;measurements, double rank_tol=1e-9, bool optimize=false)</arglist>
    </member>
    <member kind="function">
      <type>TriangulationResult</type>
      <name>triangulateSafe</name>
      <anchorfile>a01405.html</anchorfile>
      <anchor>a8d52d7d8a5e5c8d7318ce95ee57e9cfa</anchor>
      <arglist>(const CameraSet&lt; CAMERA &gt; &amp;cameras, const typename CAMERA::MeasurementVector &amp;measured, const TriangulationParameters &amp;params)</arglist>
    </member>
    <member kind="function">
      <type>std::list&lt; KEY &gt;</type>
      <name>predecessorMap2Keys</name>
      <anchorfile>a01405.html</anchorfile>
      <anchor>a18a265afdea057ea54be10262396be12</anchor>
      <arglist>(const PredecessorMap&lt; KEY &gt; &amp;p_map)</arglist>
    </member>
    <member kind="function">
      <type>SDGraph&lt; KEY &gt;</type>
      <name>toBoostGraph</name>
      <anchorfile>a01405.html</anchorfile>
      <anchor>a6c0319a6ebcc83d4a5cf9ff51729bb80</anchor>
      <arglist>(const G &amp;graph)</arglist>
    </member>
    <member kind="function">
      <type>boost::tuple&lt; G, V, std::map&lt; KEY, V &gt; &gt;</type>
      <name>predecessorMap2Graph</name>
      <anchorfile>a01405.html</anchorfile>
      <anchor>ae67d0d86c4e55b175859967a70b36983</anchor>
      <arglist>(const PredecessorMap&lt; KEY &gt; &amp;p_map)</arglist>
    </member>
    <member kind="function">
      <type>boost::shared_ptr&lt; Values &gt;</type>
      <name>composePoses</name>
      <anchorfile>a01405.html</anchorfile>
      <anchor>a62b34d6038ccdfa84d8a5bb0c15328b1</anchor>
      <arglist>(const G &amp;graph, const PredecessorMap&lt; KEY &gt; &amp;tree, const POSE &amp;rootPose)</arglist>
    </member>
    <member kind="function">
      <type>PredecessorMap&lt; KEY &gt;</type>
      <name>findMinimumSpanningTree</name>
      <anchorfile>a01405.html</anchorfile>
      <anchor>a7771a103b41708e88763ff67059ff01d</anchor>
      <arglist>(const G &amp;g)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>split</name>
      <anchorfile>a01405.html</anchorfile>
      <anchor>a3453247aec1d8b4642947ffd4bca426b</anchor>
      <arglist>(const G &amp;g, const PredecessorMap&lt; KEY &gt; &amp;tree, G &amp;Ab1, G &amp;Ab2)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>PrintKey</name>
      <anchorfile>a01405.html</anchorfile>
      <anchor>a4f9e295c4f7086ce05cbe37aeeca47fe</anchor>
      <arglist>(Key key, const std::string &amp;s=&quot;&quot;, const KeyFormatter &amp;keyFormatter=DefaultKeyFormatter)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>PrintKeyList</name>
      <anchorfile>a01405.html</anchorfile>
      <anchor>aab7ddea9b0bc36f296327e0ec08c4ef0</anchor>
      <arglist>(const KeyList &amp;keys, const std::string &amp;s=&quot;&quot;, const KeyFormatter &amp;keyFormatter=DefaultKeyFormatter)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>PrintKeyVector</name>
      <anchorfile>a01405.html</anchorfile>
      <anchor>a4c14be406d50f65bd404429a7b1d3af0</anchor>
      <arglist>(const KeyVector &amp;keys, const std::string &amp;s=&quot;&quot;, const KeyFormatter &amp;keyFormatter=DefaultKeyFormatter)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>PrintKeySet</name>
      <anchorfile>a01405.html</anchorfile>
      <anchor>aac25d6c8afb07054416ba6727685bf55</anchor>
      <arglist>(const KeySet &amp;keys, const std::string &amp;s=&quot;&quot;, const KeyFormatter &amp;keyFormatter=DefaultKeyFormatter)</arglist>
    </member>
    <member kind="function">
      <type>Key</type>
      <name>mrsymbol</name>
      <anchorfile>a01405.html</anchorfile>
      <anchor>ae9a7dceb0a85c356062b55f6939b1419</anchor>
      <arglist>(unsigned char c, unsigned char label, size_t j)</arglist>
    </member>
    <member kind="function">
      <type>unsigned char</type>
      <name>mrsymbolChr</name>
      <anchorfile>a01405.html</anchorfile>
      <anchor>a37995b0d0610e5fb29c6bd0715151d67</anchor>
      <arglist>(Key key)</arglist>
    </member>
    <member kind="function">
      <type>unsigned char</type>
      <name>mrsymbolLabel</name>
      <anchorfile>a01405.html</anchorfile>
      <anchor>a4e4c133c4fd0d9d73593f601be2248a6</anchor>
      <arglist>(Key key)</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>mrsymbolIndex</name>
      <anchorfile>a01405.html</anchorfile>
      <anchor>a4adc1bb606fa4a14d5dbd246f95cecd3</anchor>
      <arglist>(Key key)</arglist>
    </member>
    <member kind="function">
      <type>Key</type>
      <name>symbol</name>
      <anchorfile>a01405.html</anchorfile>
      <anchor>a3bfdb8456463015b2dda092a5805a745</anchor>
      <arglist>(unsigned char c, std::uint64_t j)</arglist>
    </member>
    <member kind="function">
      <type>unsigned char</type>
      <name>symbolChr</name>
      <anchorfile>a01405.html</anchorfile>
      <anchor>a9ca9499e881d22361b4833c2854d941f</anchor>
      <arglist>(Key key)</arglist>
    </member>
    <member kind="function">
      <type>std::uint64_t</type>
      <name>symbolIndex</name>
      <anchorfile>a01405.html</anchorfile>
      <anchor>a2f4d98c5186046db873a6c05aebbdf9c</anchor>
      <arglist>(Key key)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>dot</name>
      <anchorfile>a01405.html</anchorfile>
      <anchor>a106ec458ddb425604809da93346af55d</anchor>
      <arglist>(const Errors &amp;a, const Errors &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>axpy&lt; Errors, Errors &gt;</name>
      <anchorfile>a01405.html</anchorfile>
      <anchor>af191b77091843947b9ae5c413d8caf27</anchor>
      <arglist>(double alpha, const Errors &amp;x, Errors &amp;y)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>a01405.html</anchorfile>
      <anchor>a9528f84279a6f9c18d7d5a444735e57a</anchor>
      <arglist>(const Errors &amp;a, const std::string &amp;s=&quot;Error&quot;)</arglist>
    </member>
    <member kind="function">
      <type>GTSAM_EXPORT void</type>
      <name>axpy&lt; Errors, Errors &gt;</name>
      <anchorfile>a01405.html</anchorfile>
      <anchor>a939e1342568a5072310bc7995d3cf383</anchor>
      <arglist>(double alpha, const Errors &amp;x, Errors &amp;y)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasConstraints</name>
      <anchorfile>a01405.html</anchorfile>
      <anchor>a35c269c3243cab16a7475239a9c91021</anchor>
      <arglist>(const GaussianFactorGraph &amp;factors)</arglist>
    </member>
    <member kind="function">
      <type>V</type>
      <name>conjugateGradients</name>
      <anchorfile>a01405.html</anchorfile>
      <anchor>a6516ea957c3a22ddf429cefef1fe9486</anchor>
      <arglist>(const S &amp;Ab, V x, const ConjugateGradientParameters &amp;parameters, bool steepest=false)</arglist>
    </member>
    <member kind="function">
      <type>Vector</type>
      <name>conjugateGradientDescent</name>
      <anchorfile>a01405.html</anchorfile>
      <anchor>ad2b587fde5d35a27d6c88feb4432e785</anchor>
      <arglist>(const System &amp;Ab, const Vector &amp;x, const ConjugateGradientParameters &amp;parameters)</arglist>
    </member>
    <member kind="function">
      <type>Vector</type>
      <name>steepestDescent</name>
      <anchorfile>a01405.html</anchorfile>
      <anchor>aed4b2ca704ddd6530ea70122f883ac88</anchor>
      <arglist>(const Matrix &amp;A, const Vector &amp;b, const Vector &amp;x, const ConjugateGradientParameters &amp;parameters)</arglist>
    </member>
    <member kind="function">
      <type>Vector</type>
      <name>conjugateGradientDescent</name>
      <anchorfile>a01405.html</anchorfile>
      <anchor>af55440f741d8b2f706101f7a79ba7111</anchor>
      <arglist>(const Matrix &amp;A, const Vector &amp;b, const Vector &amp;x, const ConjugateGradientParameters &amp;parameters)</arglist>
    </member>
    <member kind="function">
      <type>VectorValues</type>
      <name>steepestDescent</name>
      <anchorfile>a01405.html</anchorfile>
      <anchor>a81b7af7638d28555c3f404318cc67b22</anchor>
      <arglist>(const GaussianFactorGraph &amp;fg, const VectorValues &amp;x, const ConjugateGradientParameters &amp;parameters)</arglist>
    </member>
    <member kind="function">
      <type>VectorValues</type>
      <name>conjugateGradientDescent</name>
      <anchorfile>a01405.html</anchorfile>
      <anchor>aa84114ad1593684ad739088a2898afdb</anchor>
      <arglist>(const GaussianFactorGraph &amp;fg, const VectorValues &amp;x, const ConjugateGradientParameters &amp;parameters)</arglist>
    </member>
    <member kind="function">
      <type>GTSAM_EXPORT Vector</type>
      <name>steepestDescent</name>
      <anchorfile>a01405.html</anchorfile>
      <anchor>a37ca85391e3bc671c71b68bc324296f0</anchor>
      <arglist>(const System &amp;Ab, const Vector &amp;x, const IterativeOptimizationParameters &amp;parameters)</arglist>
    </member>
    <member kind="function">
      <type>std::pair&lt; GaussianConditional::shared_ptr, JacobianFactor::shared_ptr &gt;</type>
      <name>EliminateQR</name>
      <anchorfile>a01405.html</anchorfile>
      <anchor>ab56c4bfa363f8c23c48eb078e9c84a9c</anchor>
      <arglist>(const GaussianFactorGraph &amp;factors, const Ordering &amp;keys)</arglist>
    </member>
    <member kind="function">
      <type>GaussianFactorGraph::shared_ptr</type>
      <name>buildFactorSubgraph</name>
      <anchorfile>a01405.html</anchorfile>
      <anchor>ac06ac82e22341b1b9fdcd4c67280f619</anchor>
      <arglist>(const GaussianFactorGraph &amp;gfg, const Subgraph &amp;subgraph, const bool clone)</arglist>
    </member>
    <member kind="function">
      <type>std::pair&lt; GaussianFactorGraph::shared_ptr, GaussianFactorGraph::shared_ptr &gt;</type>
      <name>splitFactorGraph</name>
      <anchorfile>a01405.html</anchorfile>
      <anchor>ab3749ce0f63e205e55daa615aa1fd74a</anchor>
      <arglist>(const GaussianFactorGraph &amp;factorGraph, const Subgraph &amp;subgraph)</arglist>
    </member>
    <member kind="function">
      <type>VectorValues</type>
      <name>operator *</name>
      <anchorfile>a01405.html</anchorfile>
      <anchor>a8642fff45e2183c3ef9c89dad06d73e7</anchor>
      <arglist>(const double a, const VectorValues &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>Expression&lt; T &gt;</type>
      <name>operator *</name>
      <anchorfile>a01405.html</anchorfile>
      <anchor>aadcda1e5ed09d0ccc00a183c433cf276</anchor>
      <arglist>(const Expression&lt; T &gt; &amp;expression1, const Expression&lt; T &gt; &amp;expression2)</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; Expression&lt; T &gt; &gt;</type>
      <name>createUnknowns</name>
      <anchorfile>a01405.html</anchorfile>
      <anchor>a51881c20dd5ecdd129cb993ea8374846</anchor>
      <arglist>(size_t n, char c, size_t start)</arglist>
    </member>
    <member kind="function">
      <type>Expression&lt; T &gt;</type>
      <name>linearExpression</name>
      <anchorfile>a01405.html</anchorfile>
      <anchor>a1c5b3189d1acf0a9d5430da3d38f7d22</anchor>
      <arglist>(const boost::function&lt; T(A)&gt; &amp;f, const Expression&lt; A &gt; &amp;expression, const Eigen::Matrix&lt; double, traits&lt; T &gt;::dimension, traits&lt; A &gt;::dimension &gt; &amp;dTdA)</arglist>
    </member>
    <member kind="function">
      <type>ScalarMultiplyExpression&lt; T &gt;</type>
      <name>operator *</name>
      <anchorfile>a01405.html</anchorfile>
      <anchor>a4774c1a3e44d16397eed13e858e1dda0</anchor>
      <arglist>(double s, const Expression&lt; T &gt; &amp;e)</arglist>
    </member>
    <member kind="function">
      <type>BinarySumExpression&lt; T &gt;</type>
      <name>operator+</name>
      <anchorfile>a01405.html</anchorfile>
      <anchor>aa87d0a607d22cf7617f62f4c5ade2dd7</anchor>
      <arglist>(const Expression&lt; T &gt; &amp;e1, const Expression&lt; T &gt; &amp;e2)</arglist>
    </member>
    <member kind="function">
      <type>BinarySumExpression&lt; T &gt;</type>
      <name>operator-</name>
      <anchorfile>a01405.html</anchorfile>
      <anchor>a494dda5886b1842625162e587f92f4c6</anchor>
      <arglist>(const Expression&lt; T &gt; &amp;e1, const Expression&lt; T &gt; &amp;e2)</arglist>
    </member>
    <member kind="function">
      <type>JacobianFactor</type>
      <name>linearizeNumerically</name>
      <anchorfile>a01405.html</anchorfile>
      <anchor>a9753b4e62378151d30bf8af5e2fc1602</anchor>
      <arglist>(const NoiseModelFactor &amp;factor, const Values &amp;values, double delta=1e-5)</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>optimizeWildfire</name>
      <anchorfile>a01405.html</anchorfile>
      <anchor>a2b0857edd76f8d63eeee0ce9944e28d4</anchor>
      <arglist>(const ISAM2Clique::shared_ptr &amp;root, double threshold, const KeySet &amp;replaced, VectorValues *delta)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>lineSearch</name>
      <anchorfile>a01405.html</anchorfile>
      <anchor>a0ceb9e5a5e864b96c529db67f55a873b</anchor>
      <arglist>(const S &amp;system, const V currentValues, const W &amp;gradient)</arglist>
    </member>
    <member kind="function">
      <type>boost::tuple&lt; V, int &gt;</type>
      <name>nonlinearConjugateGradient</name>
      <anchorfile>a01405.html</anchorfile>
      <anchor>aab113d562c7adc22b450c056b8155f3c</anchor>
      <arglist>(const S &amp;system, const V &amp;initial, const NonlinearOptimizerParams &amp;params, const bool singleIteration, const bool gradientDescent=false)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>checkConvergence</name>
      <anchorfile>a01405.html</anchorfile>
      <anchor>a3382482454c164c6f5817dcbe6f932b3</anchor>
      <arglist>(double relativeErrorTreshold, double absoluteErrorTreshold, double errorThreshold, double currentError, double newError, NonlinearOptimizerParams::Verbosity verbosity=NonlinearOptimizerParams::SILENT)</arglist>
    </member>
    <member kind="function">
      <type>string</type>
      <name>findExampleDataFile</name>
      <anchorfile>a01405.html</anchorfile>
      <anchor>aef971b2c69845e4fcce707306703c7b8</anchor>
      <arglist>(const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>string</type>
      <name>createRewrittenFileName</name>
      <anchorfile>a01405.html</anchorfile>
      <anchor>adbe09e573771fd72b08069353d537725</anchor>
      <arglist>(const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>GraphAndValues</type>
      <name>load2D</name>
      <anchorfile>a01405.html</anchorfile>
      <anchor>a03b8e238c614213004cf9edb7f95730f</anchor>
      <arglist>(pair&lt; string, SharedNoiseModel &gt; dataset, int maxID, bool addNoise, bool smart, NoiseFormat noiseFormat, KernelFunctionType kernelFunctionType)</arglist>
    </member>
    <member kind="function">
      <type>boost::optional&lt; IndexedPose &gt;</type>
      <name>parseVertex</name>
      <anchorfile>a01405.html</anchorfile>
      <anchor>a7e43a0cc8b9a3efb4cc15da35315da38</anchor>
      <arglist>(std::istream &amp;is, const std::string &amp;tag)</arglist>
    </member>
    <member kind="function">
      <type>boost::optional&lt; IndexedEdge &gt;</type>
      <name>parseEdge</name>
      <anchorfile>a01405.html</anchorfile>
      <anchor>abc8bb9db0893652e8b5e7b47782ec990</anchor>
      <arglist>(std::istream &amp;is, const std::string &amp;tag)</arglist>
    </member>
    <member kind="function">
      <type>GraphAndValues</type>
      <name>load2D</name>
      <anchorfile>a01405.html</anchorfile>
      <anchor>a418f03c4eab89c5b9571280f9daa50ae</anchor>
      <arglist>(const std::string &amp;filename, SharedNoiseModel model=SharedNoiseModel(), Key maxID=0, bool addNoise=false, bool smart=true, NoiseFormat noiseFormat=NoiseFormatAUTO, KernelFunctionType kernelFunctionType=KernelFunctionTypeNONE)</arglist>
    </member>
    <member kind="function">
      <type>GraphAndValues</type>
      <name>load2D_robust</name>
      <anchorfile>a01405.html</anchorfile>
      <anchor>aaddc8a142b6518bb66870e893dfe8f20</anchor>
      <arglist>(const string &amp;filename, noiseModel::Base::shared_ptr &amp;model, int maxID)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>save2D</name>
      <anchorfile>a01405.html</anchorfile>
      <anchor>acfe516bc2d9ca4cc4530dd3b8460ce3d</anchor>
      <arglist>(const NonlinearFactorGraph &amp;graph, const Values &amp;config, const noiseModel::Diagonal::shared_ptr model, const std::string &amp;filename)</arglist>
    </member>
    <member kind="function">
      <type>GraphAndValues</type>
      <name>readG2o</name>
      <anchorfile>a01405.html</anchorfile>
      <anchor>a71d086efc70f4af31d3c3b00dde4f7c0</anchor>
      <arglist>(const std::string &amp;g2oFile, const bool is3D=false, KernelFunctionType kernelFunctionType=KernelFunctionTypeNONE)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>writeG2o</name>
      <anchorfile>a01405.html</anchorfile>
      <anchor>a68bc584d72da3747666ac134a9490f92</anchor>
      <arglist>(const NonlinearFactorGraph &amp;graph, const Values &amp;estimate, const std::string &amp;filename)</arglist>
    </member>
    <member kind="function">
      <type>std::map&lt; Key, Pose3 &gt;</type>
      <name>parse3DPoses</name>
      <anchorfile>a01405.html</anchorfile>
      <anchor>a7e8ca844a5eefc0ec0beece49f6a3230</anchor>
      <arglist>(const std::string &amp;filename)</arglist>
    </member>
    <member kind="function">
      <type>GraphAndValues</type>
      <name>load3D</name>
      <anchorfile>a01405.html</anchorfile>
      <anchor>ac96511703a91071d7b2033976f9739c3</anchor>
      <arglist>(const std::string &amp;filename)</arglist>
    </member>
    <member kind="function">
      <type>Pose3</type>
      <name>openGL2gtsam</name>
      <anchorfile>a01405.html</anchorfile>
      <anchor>ade6eca65dc0168a65f641961ca97924c</anchor>
      <arglist>(const Rot3 &amp;R, double tx, double ty, double tz)</arglist>
    </member>
    <member kind="function">
      <type>Pose3</type>
      <name>gtsam2openGL</name>
      <anchorfile>a01405.html</anchorfile>
      <anchor>aaff07ef70e6161c4d1d2bd7546ff91e6</anchor>
      <arglist>(const Rot3 &amp;R, double tx, double ty, double tz)</arglist>
    </member>
    <member kind="function">
      <type>Pose3</type>
      <name>gtsam2openGL</name>
      <anchorfile>a01405.html</anchorfile>
      <anchor>ad632ed56581bf174eef379bbe272a06a</anchor>
      <arglist>(const Pose3 &amp;PoseGTSAM)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>readBundler</name>
      <anchorfile>a01405.html</anchorfile>
      <anchor>aef96840653460872d4e7a74349f77c42</anchor>
      <arglist>(const std::string &amp;filename, SfM_data &amp;data)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>readBAL</name>
      <anchorfile>a01405.html</anchorfile>
      <anchor>a07b97b60419b8535ccdaa385ce6d7cc6</anchor>
      <arglist>(const std::string &amp;filename, SfM_data &amp;data)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>writeBAL</name>
      <anchorfile>a01405.html</anchorfile>
      <anchor>acbdf1d3cfef0058a15eca02d31037e9b</anchor>
      <arglist>(const std::string &amp;filename, SfM_data &amp;data)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>writeBALfromValues</name>
      <anchorfile>a01405.html</anchorfile>
      <anchor>a28d34be139e927fde97f85d83144c02a</anchor>
      <arglist>(const std::string &amp;filename, const SfM_data &amp;data, Values &amp;values)</arglist>
    </member>
    <member kind="function">
      <type>Values</type>
      <name>initialCamerasEstimate</name>
      <anchorfile>a01405.html</anchorfile>
      <anchor>a07fada7b5119506b7f30d5ddbd1b53f7</anchor>
      <arglist>(const SfM_data &amp;db)</arglist>
    </member>
    <member kind="function">
      <type>Values</type>
      <name>initialCamerasAndPointsEstimate</name>
      <anchorfile>a01405.html</anchorfile>
      <anchor>abdef8c3f883714f9937097e500f3eb1d</anchor>
      <arglist>(const SfM_data &amp;db)</arglist>
    </member>
    <member kind="function">
      <type>GTSAM_EXPORT GraphAndValues</type>
      <name>load2D</name>
      <anchorfile>a01405.html</anchorfile>
      <anchor>a39741f728e3b36b9eb5e6c7042fa6a59</anchor>
      <arglist>(std::pair&lt; std::string, SharedNoiseModel &gt; dataset, int maxID=0, bool addNoise=false, bool smart=true, NoiseFormat noiseFormat=NoiseFormatAUTO, KernelFunctionType kernelFunctionType=KernelFunctionTypeNONE)</arglist>
    </member>
    <member kind="function">
      <type>Point2_</type>
      <name>project</name>
      <anchorfile>a01405.html</anchorfile>
      <anchor>ad0024081af88e1b3cc0820c65ad6afd4</anchor>
      <arglist>(const Point3_ &amp;p_cam)</arglist>
    </member>
    <member kind="function">
      <type>P</type>
      <name>transform_point</name>
      <anchorfile>a01405.html</anchorfile>
      <anchor>a80d640f59e5d39a1165069a3841cc5d1</anchor>
      <arglist>(const T &amp;trans, const P &amp;global, boost::optional&lt; Matrix &amp; &gt; Dtrans, boost::optional&lt; Matrix &amp; &gt; Dglobal)</arglist>
    </member>
    <member kind="function">
      <type>std::pair&lt; boost::shared_ptr&lt; SymbolicConditional &gt;, boost::shared_ptr&lt; SymbolicFactor &gt; &gt;</type>
      <name>EliminateSymbolic</name>
      <anchorfile>a01405.html</anchorfile>
      <anchor>a659f20993995258b1405737e375efd10</anchor>
      <arglist>(const SymbolicFactorGraph &amp;factors, const Ordering &amp;keys)</arglist>
    </member>
    <member kind="function">
      <type>Key</type>
      <name>maxKey</name>
      <anchorfile>a01405.html</anchorfile>
      <anchor>a9be309f741b77e5406429e41f666aa5a</anchor>
      <arglist>(const PROBLEM &amp;problem)</arglist>
    </member>
    <member kind="function">
      <type>VectorValues</type>
      <name>buildVectorValues</name>
      <anchorfile>a01405.html</anchorfile>
      <anchor>a0b1822ab82a2183082fd329798bd9a25</anchor>
      <arglist>(const Vector &amp;v, const Ordering &amp;ordering, const std::map&lt; Key, size_t &gt; &amp;dimensions)</arglist>
    </member>
    <member kind="function">
      <type>VectorValues</type>
      <name>buildVectorValues</name>
      <anchorfile>a01405.html</anchorfile>
      <anchor>a428bc7bf810a3606f1523ddaf041a32d</anchor>
      <arglist>(const Vector &amp;v, const KeyInfo &amp;keyInfo)</arglist>
    </member>
    <member kind="variable">
      <type>const double</type>
      <name>logSqrt2PI</name>
      <anchorfile>a01405.html</anchorfile>
      <anchor>ad5602eb85d05df6cba60e47eebbd3636</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>VectorValues</type>
      <name>buildVectorValues</name>
      <anchorfile>a01405.html</anchorfile>
      <anchor>a0b1822ab82a2183082fd329798bd9a25</anchor>
      <arglist>(const Vector &amp;v, const Ordering &amp;ordering, const std::map&lt; Key, size_t &gt; &amp;dimensions)</arglist>
    </member>
    <member kind="function">
      <type>VectorValues</type>
      <name>buildVectorValues</name>
      <anchorfile>a01405.html</anchorfile>
      <anchor>a428bc7bf810a3606f1523ddaf041a32d</anchor>
      <arglist>(const Vector &amp;v, const KeyInfo &amp;keyInfo)</arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>gtsam::imuBias</name>
    <filename>a01428.html</filename>
    <class kind="class">gtsam::imuBias::ConstantBias</class>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a01428.html</anchorfile>
      <anchor>a731f2f9b1d672556d577d9ba42d0231c</anchor>
      <arglist>(std::ostream &amp;os, const ConstantBias &amp;bias)</arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>gtsam::noiseModel</name>
    <filename>a01424.html</filename>
    <namespace>gtsam::noiseModel::mEstimator</namespace>
    <class kind="class">gtsam::noiseModel::Base</class>
    <class kind="class">gtsam::noiseModel::Constrained</class>
    <class kind="class">gtsam::noiseModel::Diagonal</class>
    <class kind="class">gtsam::noiseModel::Gaussian</class>
    <class kind="class">gtsam::noiseModel::Isotropic</class>
    <class kind="class">gtsam::noiseModel::Robust</class>
    <class kind="class">gtsam::noiseModel::Unit</class>
  </compound>
  <compound kind="namespace">
    <name>gtsam::noiseModel::mEstimator</name>
    <filename>a01426.html</filename>
    <class kind="class">gtsam::noiseModel::mEstimator::Base</class>
    <class kind="class">gtsam::noiseModel::mEstimator::Cauchy</class>
    <class kind="class">gtsam::noiseModel::mEstimator::DCS</class>
    <class kind="class">gtsam::noiseModel::mEstimator::Fair</class>
    <class kind="class">gtsam::noiseModel::mEstimator::GemanMcClure</class>
    <class kind="class">gtsam::noiseModel::mEstimator::Huber</class>
    <class kind="class">gtsam::noiseModel::mEstimator::L2WithDeadZone</class>
    <class kind="class">gtsam::noiseModel::mEstimator::Null</class>
    <class kind="class">gtsam::noiseModel::mEstimator::Tukey</class>
    <class kind="class">gtsam::noiseModel::mEstimator::Welsh</class>
  </compound>
  <compound kind="namespace">
    <name>gtsam::treeTraversal</name>
    <filename>a01411.html</filename>
    <member kind="function">
      <type>void</type>
      <name>DepthFirstForest</name>
      <anchorfile>a01411.html</anchorfile>
      <anchor>a50e24f0a9085721425089cdce18f2475</anchor>
      <arglist>(FOREST &amp;forest, DATA &amp;rootData, VISITOR_PRE &amp;visitorPre, VISITOR_POST &amp;visitorPost)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>DepthFirstForest</name>
      <anchorfile>a01411.html</anchorfile>
      <anchor>a3735d0cee6f4d530e75479f7b1ebaf07</anchor>
      <arglist>(FOREST &amp;forest, DATA &amp;rootData, VISITOR_PRE &amp;visitorPre)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>DepthFirstForestParallel</name>
      <anchorfile>a01411.html</anchorfile>
      <anchor>afd7410807789da9ad91d6630063be36f</anchor>
      <arglist>(FOREST &amp;forest, DATA &amp;rootData, VISITOR_PRE &amp;visitorPre, VISITOR_POST &amp;visitorPost, int problemSizeThreshold=10)</arglist>
    </member>
    <member kind="function">
      <type>FastVector&lt; boost::shared_ptr&lt; typename FOREST::Node &gt; &gt;</type>
      <name>CloneForest</name>
      <anchorfile>a01411.html</anchorfile>
      <anchor>a032aacc77495f48bd885f79d3fe16427</anchor>
      <arglist>(const FOREST &amp;forest)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>PrintForest</name>
      <anchorfile>a01411.html</anchorfile>
      <anchor>a7228bbaf6ad62b65be7a2084c01aae5c</anchor>
      <arglist>(const FOREST &amp;forest, std::string str, const KeyFormatter &amp;keyFormatter)</arglist>
    </member>
  </compound>
  <compound kind="group">
    <name>LinearSolving</name>
    <title>Solving of sparse linear systems with least-squares</title>
    <filename>a01395.html</filename>
    <subgroup>Multifrontal</subgroup>
    <subgroup>Sequential</subgroup>
  </compound>
  <compound kind="group">
    <name>Multifrontal</name>
    <title>Solving by multifrontal variable elimination (QR and Cholesky)</title>
    <filename>a01396.html</filename>
  </compound>
  <compound kind="group">
    <name>Sequential</name>
    <title>Solving by sequential variable elimination (QR and Cholesky)</title>
    <filename>a01397.html</filename>
  </compound>
  <compound kind="group">
    <name>base</name>
    <title>Base</title>
    <filename>a01398.html</filename>
  </compound>
  <compound kind="group">
    <name>geometry</name>
    <title>Geometry</title>
    <filename>a01399.html</filename>
  </compound>
  <compound kind="group">
    <name>Navigation</name>
    <title>Navigation</title>
    <filename>a01400.html</filename>
  </compound>
  <compound kind="group">
    <name>SLAM</name>
    <title>SLAM</title>
    <filename>a01401.html</filename>
  </compound>
  <compound kind="group">
    <name>ISAM2</name>
    <title>ISAM2</title>
    <filename>a01402.html</filename>
  </compound>
  <compound kind="group">
    <name>SAM</name>
    <title>SAM</title>
    <filename>a01403.html</filename>
  </compound>
  <compound kind="page">
    <name>index</name>
    <title>GTSAM</title>
    <filename>index</filename>
    <docanchor file="index" title="Creating new factor and variable types">new_factor_variable_types</docanchor>
  </compound>
</tagfile>
