[0;31m---------------------------------------------------------------------------[0m
[0;31mValueError[0m                                Traceback (most recent call last)
Cell [0;32mIn[6], line 6[0m
[1;32m      1[0m [38;5;28;01mimport[39;00m[38;5;250m [39m[38;5;21;01mplotly[39;00m[38;5;21;01m.[39;00m[38;5;21;01mgraph_objects[39;00m[38;5;250m [39m[38;5;28;01mas[39;00m[38;5;250m [39m[38;5;21;01mgo[39;00m
[1;32m      3[0m [38;5;66;03m# Define your data (same as original)[39;00m
[1;32m      4[0m 
[1;32m      5[0m [38;5;66;03m# Define layout with thinner y-axis and adjusted range[39;00m
[0;32m----> 6[0m layout [38;5;241m=[39m [43mgo[49m[38;5;241;43m.[39;49m[43mLayout[49m[43m([49m
[1;32m      7[0m [43m    [49m[43mscene[49m[38;5;241;43m=[39;49m[38;5;28;43mdict[39;49m[43m([49m
[1;32m      8[0m [43m        [49m[43mxaxis[49m[38;5;241;43m=[39;49m[38;5;28;43mdict[39;49m[43m([49m[43mbackgroundcolor[49m[38;5;241;43m=[39;49m[38;5;124;43m"[39;49m[38;5;124;43m#E5ECF6[39;49m[38;5;124;43m"[39;49m[43m,[49m[43m [49m[43mgridcolor[49m[38;5;241;43m=[39;49m[38;5;124;43m"[39;49m[38;5;124;43mwhite[39;49m[38;5;124;43m"[39;49m[43m,[49m[43m [49m[43mgridwidth[49m[38;5;241;43m=[39;49m[38;5;241;43m2[39;49m[43m,[49m[43m [49m[43mlinecolor[49m[38;5;241;43m=[39;49m[38;5;124;43m"[39;49m[38;5;124;43mwhite[39;49m[38;5;124;43m"[39;49m[43m,[49m[43m [49m[43mshowbackground[49m[38;5;241;43m=[39;49m[38;5;28;43;01mTrue[39;49;00m[43m,[49m[43m [49m[43mticks[49m[38;5;241;43m=[39;49m[38;5;124;43m"[39;49m[38;5;124;43m"[39;49m[43m,[49m[43m [49m[43mzerolinecolor[49m[38;5;241;43m=[39;49m[38;5;124;43m"[39;49m[38;5;124;43mwhite[39;49m[38;5;124;43m"[39;49m[43m)[49m[43m,[49m
[1;32m      9[0m [43m        [49m[43myaxis[49m[38;5;241;43m=[39;49m[38;5;28;43mdict[39;49m[43m([49m
[1;32m     10[0m [43m            [49m[43mbackgroundcolor[49m[38;5;241;43m=[39;49m[38;5;124;43m"[39;49m[38;5;124;43m#E5ECF6[39;49m[38;5;124;43m"[39;49m[43m,[49m[43m [49m
[1;32m     11[0m [43m            [49m[43mgridcolor[49m[38;5;241;43m=[39;49m[38;5;124;43m"[39;49m[38;5;124;43mwhite[39;49m[38;5;124;43m"[39;49m[43m,[49m[43m [49m
[1;32m     12[0m [43m            [49m[43mgridwidth[49m[38;5;241;43m=[39;49m[38;5;241;43m2[39;49m[43m,[49m[43m [49m
[1;32m     13[0m [43m            [49m[43mlinecolor[49m[38;5;241;43m=[39;49m[38;5;124;43m"[39;49m[38;5;124;43mwhite[39;49m[38;5;124;43m"[39;49m[43m,[49m[43m [49m
[1;32m     14[0m [43m            [49m[43mshowbackground[49m[38;5;241;43m=[39;49m[38;5;28;43;01mTrue[39;49;00m[43m,[49m[43m [49m
[1;32m     15[0m [43m            [49m[43mticks[49m[38;5;241;43m=[39;49m[38;5;124;43m"[39;49m[38;5;124;43m"[39;49m[43m,[49m[43m [49m
[1;32m     16[0m [43m            [49m[43mzerolinecolor[49m[38;5;241;43m=[39;49m[38;5;124;43m"[39;49m[38;5;124;43mwhite[39;49m[38;5;124;43m"[39;49m[43m,[49m[43m [49m
[1;32m     17[0m [43m            [49m[38;5;28;43mrange[39;49m[38;5;241;43m=[39;49m[43m[[49m[38;5;241;43m-[39;49m[38;5;241;43m0.5[39;49m[43m,[49m[43m [49m[38;5;241;43m0.5[39;49m[43m][49m[43m,[49m[43m  [49m[38;5;66;43;03m# Adjusted range for y-axis[39;49;00m
[1;32m     18[0m [43m            [49m[43mscaleanchor[49m[38;5;241;43m=[39;49m[38;5;124;43m"[39;49m[38;5;124;43mx[39;49m[38;5;124;43m"[39;49m[43m  [49m[38;5;66;43;03m# Ensures y-axis is thinner relative to x-axis[39;49;00m
[1;32m     19[0m [43m        [49m[43m)[49m[43m,[49m
[1;32m     20[0m [43m        [49m[43mzaxis[49m[38;5;241;43m=[39;49m[38;5;28;43mdict[39;49m[43m([49m[43mbackgroundcolor[49m[38;5;241;43m=[39;49m[38;5;124;43m"[39;49m[38;5;124;43m#E5ECF6[39;49m[38;5;124;43m"[39;49m[43m,[49m[43m [49m[43mgridcolor[49m[38;5;241;43m=[39;49m[38;5;124;43m"[39;49m[38;5;124;43mwhite[39;49m[38;5;124;43m"[39;49m[43m,[49m[43m [49m[43mgridwidth[49m[38;5;241;43m=[39;49m[38;5;241;43m2[39;49m[43m,[49m[43m [49m[43mlinecolor[49m[38;5;241;43m=[39;49m[38;5;124;43m"[39;49m[38;5;124;43mwhite[39;49m[38;5;124;43m"[39;49m[43m,[49m[43m [49m[43mshowbackground[49m[38;5;241;43m=[39;49m[38;5;28;43;01mTrue[39;49;00m[43m,[49m[43m [49m[43mticks[49m[38;5;241;43m=[39;49m[38;5;124;43m"[39;49m[38;5;124;43m"[39;49m[43m,[49m[43m [49m[43mzerolinecolor[49m[38;5;241;43m=[39;49m[38;5;124;43m"[39;49m[38;5;124;43mwhite[39;49m[38;5;124;43m"[39;49m[43m)[49m
[1;32m     21[0m [43m    [49m[43m)[49m[43m,[49m
[1;32m     22[0m [43m    [49m[43mmargin[49m[38;5;241;43m=[39;49m[38;5;28;43mdict[39;49m[43m([49m[43ml[49m[38;5;241;43m=[39;49m[38;5;241;43m0[39;49m[43m,[49m[43m [49m[43mr[49m[38;5;241;43m=[39;49m[38;5;241;43m0[39;49m[43m,[49m[43m [49m[43mt[49m[38;5;241;43m=[39;49m[38;5;241;43m0[39;49m[43m,[49m[43m [49m[43mb[49m[38;5;241;43m=[39;49m[38;5;241;43m0[39;49m[43m)[49m[43m,[49m
[1;32m     23[0m [43m    [49m[43mtitle[49m[38;5;241;43m=[39;49m[38;5;28;43mdict[39;49m[43m([49m[43mx[49m[38;5;241;43m=[39;49m[38;5;241;43m0.05[39;49m[43m)[49m[43m,[49m
[1;32m     24[0m [43m    [49m[43mhovermode[49m[38;5;241;43m=[39;49m[38;5;124;43m"[39;49m[38;5;124;43mclosest[39;49m[38;5;124;43m"[39;49m[43m,[49m
[1;32m     25[0m [43m)[49m
[1;32m     27[0m [38;5;66;03m# Create figure[39;00m
[1;32m     28[0m fig [38;5;241m=[39m go[38;5;241m.[39mFigure(data[38;5;241m=[39mdata, layout[38;5;241m=[39mlayout)

File [0;32m~/Dev/kt_GTSAM/gtsam.org/.venv/lib/python3.9/site-packages/plotly/graph_objs/_layout.py:7068[0m, in [0;36mLayout.__init__[0;34m(self, arg, activeselection, activeshape, annotations, annotationdefaults, autosize, autotypenumbers, barcornerradius, bargap, bargroupgap, barmode, barnorm, boxgap, boxgroupgap, boxmode, calendar, clickmode, coloraxis, colorscale, colorway, computed, datarevision, dragmode, editrevision, extendfunnelareacolors, extendiciclecolors, extendpiecolors, extendsunburstcolors, extendtreemapcolors, font, funnelareacolorway, funnelgap, funnelgroupgap, funnelmode, geo, grid, height, hiddenlabels, hiddenlabelssrc, hidesources, hoverdistance, hoverlabel, hovermode, hoversubplots, iciclecolorway, images, imagedefaults, legend, map, mapbox, margin, meta, metasrc, minreducedheight, minreducedwidth, modebar, newselection, newshape, paper_bgcolor, piecolorway, plot_bgcolor, polar, scattergap, scattermode, scene, selectdirection, selectionrevision, selections, selectiondefaults, separators, shapes, shapedefaults, showlegend, sliders, sliderdefaults, smith, spikedistance, sunburstcolorway, template, ternary, title, transition, treemapcolorway, uirevision, uniformtext, updatemenus, updatemenudefaults, violingap, violingroupgap, violinmode, waterfallgap, waterfallgroupgap, waterfallmode, width, xaxis, yaxis, **kwargs)[0m
[1;32m   7066[0m _v [38;5;241m=[39m scene [38;5;28;01mif[39;00m scene [38;5;129;01mis[39;00m [38;5;129;01mnot[39;00m [38;5;28;01mNone[39;00m [38;5;28;01melse[39;00m _v
[1;32m   7067[0m [38;5;28;01mif[39;00m _v [38;5;129;01mis[39;00m [38;5;129;01mnot[39;00m [38;5;28;01mNone[39;00m:
[0;32m-> 7068[0m     [38;5;28;43mself[39;49m[43m[[49m[38;5;124;43m"[39;49m[38;5;124;43mscene[39;49m[38;5;124;43m"[39;49m[43m][49m [38;5;241m=[39m _v
[1;32m   7069[0m _v [38;5;241m=[39m arg[38;5;241m.[39mpop([38;5;124m"[39m[38;5;124mselectdirection[39m[38;5;124m"[39m, [38;5;28;01mNone[39;00m)
[1;32m   7070[0m _v [38;5;241m=[39m selectdirection [38;5;28;01mif[39;00m selectdirection [38;5;129;01mis[39;00m [38;5;129;01mnot[39;00m [38;5;28;01mNone[39;00m [38;5;28;01melse[39;00m _v

File [0;32m~/Dev/kt_GTSAM/gtsam.org/.venv/lib/python3.9/site-packages/plotly/basedatatypes.py:5898[0m, in [0;36mBaseLayoutType.__setitem__[0;34m(self, prop, value)[0m
[1;32m   5895[0m match [38;5;241m=[39m [38;5;28mself[39m[38;5;241m.[39m_subplot_re_match(prop)
[1;32m   5896[0m [38;5;28;01mif[39;00m match [38;5;129;01mis[39;00m [38;5;28;01mNone[39;00m:
[1;32m   5897[0m     [38;5;66;03m# Set as ordinary property[39;00m
[0;32m-> 5898[0m     [38;5;28;43msuper[39;49m[43m([49m[43mBaseLayoutHierarchyType[49m[43m,[49m[43m [49m[38;5;28;43mself[39;49m[43m)[49m[38;5;241;43m.[39;49m[38;5;21;43m__setitem__[39;49m[43m([49m[43mprop[49m[43m,[49m[43m [49m[43mvalue[49m[43m)[49m
[1;32m   5899[0m [38;5;28;01melse[39;00m:
[1;32m   5900[0m     [38;5;66;03m# Set as subplotid property[39;00m
[1;32m   5901[0m     [38;5;28mself[39m[38;5;241m.[39m_set_subplotid_prop(prop, value)

File [0;32m~/Dev/kt_GTSAM/gtsam.org/.venv/lib/python3.9/site-packages/plotly/basedatatypes.py:4852[0m, in [0;36mBasePlotlyType.__setitem__[0;34m(self, prop, value)[0m
[1;32m   4850[0m [38;5;66;03m# ### Handle compound property ###[39;00m
[1;32m   4851[0m [38;5;28;01mif[39;00m [38;5;28misinstance[39m(validator, CompoundValidator):
[0;32m-> 4852[0m     [38;5;28;43mself[39;49m[38;5;241;43m.[39;49m[43m_set_compound_prop[49m[43m([49m[43mprop[49m[43m,[49m[43m [49m[43mvalue[49m[43m)[49m
[1;32m   4854[0m [38;5;66;03m# ### Handle compound array property ###[39;00m
[1;32m   4855[0m [38;5;28;01melif[39;00m [38;5;28misinstance[39m(validator, (CompoundArrayValidator, BaseDataValidator)):

File [0;32m~/Dev/kt_GTSAM/gtsam.org/.venv/lib/python3.9/site-packages/plotly/basedatatypes.py:5263[0m, in [0;36mBasePlotlyType._set_compound_prop[0;34m(self, prop, val)[0m
[1;32m   5260[0m [38;5;66;03m# Import value[39;00m
[1;32m   5261[0m [38;5;66;03m# ------------[39;00m
[1;32m   5262[0m validator [38;5;241m=[39m [38;5;28mself[39m[38;5;241m.[39m_get_validator(prop)
[0;32m-> 5263[0m val [38;5;241m=[39m [43mvalidator[49m[38;5;241;43m.[39;49m[43mvalidate_coerce[49m[43m([49m[43mval[49m[43m,[49m[43m [49m[43mskip_invalid[49m[38;5;241;43m=[39;49m[38;5;28;43mself[39;49m[38;5;241;43m.[39;49m[43m_skip_invalid[49m[43m)[49m
[1;32m   5265[0m [38;5;66;03m# Save deep copies of current and new states[39;00m
[1;32m   5266[0m [38;5;66;03m# ------------------------------------------[39;00m
[1;32m   5267[0m curr_val [38;5;241m=[39m [38;5;28mself[39m[38;5;241m.[39m_compound_props[38;5;241m.[39mget(prop, [38;5;28;01mNone[39;00m)

File [0;32m~/Dev/kt_GTSAM/gtsam.org/.venv/lib/python3.9/site-packages/_plotly_utils/basevalidators.py:2504[0m, in [0;36mCompoundValidator.validate_coerce[0;34m(self, v, skip_invalid, _validate)[0m
[1;32m   2501[0m     v [38;5;241m=[39m [38;5;28mself[39m[38;5;241m.[39mdata_class()
[1;32m   2503[0m [38;5;28;01melif[39;00m [38;5;28misinstance[39m(v, [38;5;28mdict[39m):
[0;32m-> 2504[0m     v [38;5;241m=[39m [38;5;28;43mself[39;49m[38;5;241;43m.[39;49m[43mdata_class[49m[43m([49m[43mv[49m[43m,[49m[43m [49m[43mskip_invalid[49m[38;5;241;43m=[39;49m[43mskip_invalid[49m[43m,[49m[43m [49m[43m_validate[49m[38;5;241;43m=[39;49m[43m_validate[49m[43m)[49m
[1;32m   2506[0m [38;5;28;01melif[39;00m [38;5;28misinstance[39m(v, [38;5;28mself[39m[38;5;241m.[39mdata_class):
[1;32m   2507[0m     [38;5;66;03m# Copy object[39;00m
[1;32m   2508[0m     v [38;5;241m=[39m [38;5;28mself[39m[38;5;241m.[39mdata_class(v)

File [0;32m~/Dev/kt_GTSAM/gtsam.org/.venv/lib/python3.9/site-packages/plotly/graph_objs/layout/_scene.py:1777[0m, in [0;36mScene.__init__[0;34m(self, arg, annotations, annotationdefaults, aspectmode, aspectratio, bgcolor, camera, domain, dragmode, hovermode, uirevision, xaxis, yaxis, zaxis, **kwargs)[0m
[1;32m   1775[0m _v [38;5;241m=[39m yaxis [38;5;28;01mif[39;00m yaxis [38;5;129;01mis[39;00m [38;5;129;01mnot[39;00m [38;5;28;01mNone[39;00m [38;5;28;01melse[39;00m _v
[1;32m   1776[0m [38;5;28;01mif[39;00m _v [38;5;129;01mis[39;00m [38;5;129;01mnot[39;00m [38;5;28;01mNone[39;00m:
[0;32m-> 1777[0m     [38;5;28;43mself[39;49m[43m[[49m[38;5;124;43m"[39;49m[38;5;124;43myaxis[39;49m[38;5;124;43m"[39;49m[43m][49m [38;5;241m=[39m _v
[1;32m   1778[0m _v [38;5;241m=[39m arg[38;5;241m.[39mpop([38;5;124m"[39m[38;5;124mzaxis[39m[38;5;124m"[39m, [38;5;28;01mNone[39;00m)
[1;32m   1779[0m _v [38;5;241m=[39m zaxis [38;5;28;01mif[39;00m zaxis [38;5;129;01mis[39;00m [38;5;129;01mnot[39;00m [38;5;28;01mNone[39;00m [38;5;28;01melse[39;00m _v

File [0;32m~/Dev/kt_GTSAM/gtsam.org/.venv/lib/python3.9/site-packages/plotly/basedatatypes.py:4852[0m, in [0;36mBasePlotlyType.__setitem__[0;34m(self, prop, value)[0m
[1;32m   4850[0m [38;5;66;03m# ### Handle compound property ###[39;00m
[1;32m   4851[0m [38;5;28;01mif[39;00m [38;5;28misinstance[39m(validator, CompoundValidator):
[0;32m-> 4852[0m     [38;5;28;43mself[39;49m[38;5;241;43m.[39;49m[43m_set_compound_prop[49m[43m([49m[43mprop[49m[43m,[49m[43m [49m[43mvalue[49m[43m)[49m
[1;32m   4854[0m [38;5;66;03m# ### Handle compound array property ###[39;00m
[1;32m   4855[0m [38;5;28;01melif[39;00m [38;5;28misinstance[39m(validator, (CompoundArrayValidator, BaseDataValidator)):

File [0;32m~/Dev/kt_GTSAM/gtsam.org/.venv/lib/python3.9/site-packages/plotly/basedatatypes.py:5263[0m, in [0;36mBasePlotlyType._set_compound_prop[0;34m(self, prop, val)[0m
[1;32m   5260[0m [38;5;66;03m# Import value[39;00m
[1;32m   5261[0m [38;5;66;03m# ------------[39;00m
[1;32m   5262[0m validator [38;5;241m=[39m [38;5;28mself[39m[38;5;241m.[39m_get_validator(prop)
[0;32m-> 5263[0m val [38;5;241m=[39m [43mvalidator[49m[38;5;241;43m.[39;49m[43mvalidate_coerce[49m[43m([49m[43mval[49m[43m,[49m[43m [49m[43mskip_invalid[49m[38;5;241;43m=[39;49m[38;5;28;43mself[39;49m[38;5;241;43m.[39;49m[43m_skip_invalid[49m[43m)[49m
[1;32m   5265[0m [38;5;66;03m# Save deep copies of current and new states[39;00m
[1;32m   5266[0m [38;5;66;03m# ------------------------------------------[39;00m
[1;32m   5267[0m curr_val [38;5;241m=[39m [38;5;28mself[39m[38;5;241m.[39m_compound_props[38;5;241m.[39mget(prop, [38;5;28;01mNone[39;00m)

File [0;32m~/Dev/kt_GTSAM/gtsam.org/.venv/lib/python3.9/site-packages/_plotly_utils/basevalidators.py:2504[0m, in [0;36mCompoundValidator.validate_coerce[0;34m(self, v, skip_invalid, _validate)[0m
[1;32m   2501[0m     v [38;5;241m=[39m [38;5;28mself[39m[38;5;241m.[39mdata_class()
[1;32m   2503[0m [38;5;28;01melif[39;00m [38;5;28misinstance[39m(v, [38;5;28mdict[39m):
[0;32m-> 2504[0m     v [38;5;241m=[39m [38;5;28;43mself[39;49m[38;5;241;43m.[39;49m[43mdata_class[49m[43m([49m[43mv[49m[43m,[49m[43m [49m[43mskip_invalid[49m[38;5;241;43m=[39;49m[43mskip_invalid[49m[43m,[49m[43m [49m[43m_validate[49m[38;5;241;43m=[39;49m[43m_validate[49m[43m)[49m
[1;32m   2506[0m [38;5;28;01melif[39;00m [38;5;28misinstance[39m(v, [38;5;28mself[39m[38;5;241m.[39mdata_class):
[1;32m   2507[0m     [38;5;66;03m# Copy object[39;00m
[1;32m   2508[0m     v [38;5;241m=[39m [38;5;28mself[39m[38;5;241m.[39mdata_class(v)

File [0;32m~/Dev/kt_GTSAM/gtsam.org/.venv/lib/python3.9/site-packages/plotly/graph_objs/layout/scene/_yaxis.py:2780[0m, in [0;36mYAxis.__init__[0;34m(self, arg, autorange, autorangeoptions, autotypenumbers, backgroundcolor, calendar, categoryarray, categoryarraysrc, categoryorder, color, dtick, exponentformat, gridcolor, gridwidth, hoverformat, labelalias, linecolor, linewidth, maxallowed, minallowed, minexponent, mirror, nticks, range, rangemode, separatethousands, showaxeslabels, showbackground, showexponent, showgrid, showline, showspikes, showticklabels, showtickprefix, showticksuffix, spikecolor, spikesides, spikethickness, tick0, tickangle, tickcolor, tickfont, tickformat, tickformatstops, tickformatstopdefaults, ticklen, tickmode, tickprefix, ticks, ticksuffix, ticktext, ticktextsrc, tickvals, tickvalssrc, tickwidth, title, type, visible, zeroline, zerolinecolor, zerolinewidth, **kwargs)[0m
[1;32m   2776[0m     [38;5;28mself[39m[[38;5;124m"[39m[38;5;124mzerolinewidth[39m[38;5;124m"[39m] [38;5;241m=[39m _v
[1;32m   2778[0m [38;5;66;03m# Process unknown kwargs[39;00m
[1;32m   2779[0m [38;5;66;03m# ----------------------[39;00m
[0;32m-> 2780[0m [38;5;28;43mself[39;49m[38;5;241;43m.[39;49m[43m_process_kwargs[49m[43m([49m[38;5;241;43m*[39;49m[38;5;241;43m*[39;49m[38;5;28;43mdict[39;49m[43m([49m[43marg[49m[43m,[49m[43m [49m[38;5;241;43m*[39;49m[38;5;241;43m*[39;49m[43mkwargs[49m[43m)[49m[43m)[49m
[1;32m   2782[0m [38;5;66;03m# Reset skip_invalid[39;00m
[1;32m   2783[0m [38;5;66;03m# ------------------[39;00m
[1;32m   2784[0m [38;5;28mself[39m[38;5;241m.[39m_skip_invalid [38;5;241m=[39m [38;5;28;01mFalse[39;00m

File [0;32m~/Dev/kt_GTSAM/gtsam.org/.venv/lib/python3.9/site-packages/plotly/basedatatypes.py:4378[0m, in [0;36mBasePlotlyType._process_kwargs[0;34m(self, **kwargs)[0m
[1;32m   4376[0m     [38;5;28mself[39m[k] [38;5;241m=[39m v
[1;32m   4377[0m [38;5;28;01melif[39;00m [38;5;129;01mnot[39;00m [38;5;28mself[39m[38;5;241m.[39m_skip_invalid:
[0;32m-> 4378[0m     [38;5;28;01mraise[39;00m err

[0;31mValueError[0m: Invalid property specified for object of type plotly.graph_objs.layout.scene.YAxis: 'scaleanchor'

Did you mean "calendar"?

    Valid properties:
        autorange
            Determines whether or not the range of this axis is
            computed in relation to the input data. See `rangemode`
            for more info. If `range` is provided and it has a
            value for both the lower and upper bound, `autorange`
            is set to False. Using "min" applies autorange only to
            set the minimum. Using "max" applies autorange only to
            set the maximum. Using *min reversed* applies autorange
            only to set the minimum on a reversed axis. Using *max
            reversed* applies autorange only to set the maximum on
            a reversed axis. Using "reversed" applies autorange on
            both ends and reverses the axis direction.
        autorangeoptions
            :class:`plotly.graph_objects.layout.scene.yaxis.Autoran
            geoptions` instance or dict with compatible properties
        autotypenumbers
            Using "strict" a numeric string in trace data is not
            converted to a number. Using *convert types* a numeric
            string in trace data may be treated as a number during
            automatic axis `type` detection. Defaults to
            layout.autotypenumbers.
        backgroundcolor
            Sets the background color of this axis' wall.
        calendar
            Sets the calendar system to use for `range` and `tick0`
            if this is a date axis. This does not set the calendar
            for interpreting data on this axis, that's specified in
            the trace or via the global `layout.calendar`
        categoryarray
            Sets the order in which categories on this axis appear.
            Only has an effect if `categoryorder` is set to
            "array". Used with `categoryorder`.
        categoryarraysrc
            Sets the source reference on Chart Studio Cloud for
            `categoryarray`.
        categoryorder
            Specifies the ordering logic for the case of
            categorical variables. By default, plotly uses "trace",
            which specifies the order that is present in the data
            supplied. Set `categoryorder` to *category ascending*
            or *category descending* if order should be determined
            by the alphanumerical order of the category names. Set
            `categoryorder` to "array" to derive the ordering from
            the attribute `categoryarray`. If a category is not
            found in the `categoryarray` array, the sorting
            behavior for that attribute will be identical to the
            "trace" mode. The unspecified categories will follow
            the categories in `categoryarray`. Set `categoryorder`
            to *total ascending* or *total descending* if order
            should be determined by the numerical order of the
            values. Similarly, the order can be determined by the
            min, max, sum, mean, geometric mean or median of all
            the values.
        color
            Sets default for all colors associated with this axis
            all at once: line, font, tick, and grid colors. Grid
            color is lightened by blending this with the plot
            background Individual pieces can override this.
        dtick
            Sets the step in-between ticks on this axis. Use with
            `tick0`. Must be a positive number, or special strings
            available to "log" and "date" axes. If the axis `type`
            is "log", then ticks are set every 10^(n*dtick) where n
            is the tick number. For example, to set a tick mark at
            1, 10, 100, 1000, ... set dtick to 1. To set tick marks
            at 1, 100, 10000, ... set dtick to 2. To set tick marks
            at 1, 5, 25, 125, 625, 3125, ... set dtick to
            log_10(5), or 0.69897000433. "log" has several special
            values; "L<f>", where `f` is a positive number, gives
            ticks linearly spaced in value (but not position). For
            example `tick0` = 0.1, `dtick` = "L0.5" will put ticks
            at 0.1, 0.6, 1.1, 1.6 etc. To show powers of 10 plus
            small digits between, use "D1" (all digits) or "D2"
            (only 2 and 5). `tick0` is ignored for "D1" and "D2".
            If the axis `type` is "date", then you must convert the
            time to milliseconds. For example, to set the interval
            between ticks to one day, set `dtick` to 86400000.0.
            "date" also has special values "M<n>" gives ticks
            spaced by a number of months. `n` must be a positive
            integer. To set ticks on the 15th of every third month,
            set `tick0` to "2000-01-15" and `dtick` to "M3". To set
            ticks every 4 years, set `dtick` to "M48"
        exponentformat
            Determines a formatting rule for the tick exponents.
            For example, consider the number 1,000,000,000. If
            "none", it appears as 1,000,000,000. If "e", 1e+9. If
            "E", 1E+9. If "power", 1x10^9 (with 9 in a super
            script). If "SI", 1G. If "B", 1B.
        gridcolor
            Sets the color of the grid lines.
        gridwidth
            Sets the width (in px) of the grid lines.
        hoverformat
            Sets the hover text formatting rule using d3 formatting
            mini-languages which are very similar to those in
            Python. For numbers, see:
            https://github.com/d3/d3-format/tree/v1.4.5#d3-format.
            And for dates see: https://github.com/d3/d3-time-
            format/tree/v2.2.3#locale_format. We add two items to
            d3's date formatter: "%h" for half of the year as a
            decimal number as well as "%{n}f" for fractional
            seconds with n digits. For example, *2016-10-13
            09:15:23.456* with tickformat "%H~%M~%S.%2f" would
            display "09~15~23.46"
        labelalias
            Replacement text for specific tick or hover labels. For
            example using {US: 'USA', CA: 'Canada'} changes US to
            USA and CA to Canada. The labels we would have shown
            must match the keys exactly, after adding any
            tickprefix or ticksuffix. For negative numbers the
            minus sign symbol used (U+2212) is wider than the
            regular ascii dash. That means you need to use −1
            instead of -1. labelalias can be used with any axis
            type, and both keys (if needed) and values (if desired)
            can include html-like tags or MathJax.
        linecolor
            Sets the axis line color.
        linewidth
            Sets the width (in px) of the axis line.
        maxallowed
            Determines the maximum range of this axis.
        minallowed
            Determines the minimum range of this axis.
        minexponent
            Hide SI prefix for 10^n if |n| is below this number.
            This only has an effect when `tickformat` is "SI" or
            "B".
        mirror
            Determines if the axis lines or/and ticks are mirrored
            to the opposite side of the plotting area. If True, the
            axis lines are mirrored. If "ticks", the axis lines and
            ticks are mirrored. If False, mirroring is disable. If
            "all", axis lines are mirrored on all shared-axes
            subplots. If "allticks", axis lines and ticks are
            mirrored on all shared-axes subplots.
        nticks
            Specifies the maximum number of ticks for the
            particular axis. The actual number of ticks will be
            chosen automatically to be less than or equal to
            `nticks`. Has an effect only if `tickmode` is set to
            "auto".
        range
            Sets the range of this axis. If the axis `type` is
            "log", then you must take the log of your desired range
            (e.g. to set the range from 1 to 100, set the range
            from 0 to 2). If the axis `type` is "date", it should
            be date strings, like date data, though Date objects
            and unix milliseconds will be accepted and converted to
            strings. If the axis `type` is "category", it should be
            numbers, using the scale where each category is
            assigned a serial number from zero in the order it
            appears. Leaving either or both elements `null` impacts
            the default `autorange`.
        rangemode
            If "normal", the range is computed in relation to the
            extrema of the input data. If *tozero*`, the range
            extends to 0, regardless of the input data If
            "nonnegative", the range is non-negative, regardless of
            the input data. Applies only to linear axes.
        separatethousands
            If "true", even 4-digit integers are separated
        showaxeslabels
            Sets whether or not this axis is labeled
        showbackground
            Sets whether or not this axis' wall has a background
            color.
        showexponent
            If "all", all exponents are shown besides their
            significands. If "first", only the exponent of the
            first tick is shown. If "last", only the exponent of
            the last tick is shown. If "none", no exponents appear.
        showgrid
            Determines whether or not grid lines are drawn. If
            True, the grid lines are drawn at every tick mark.
        showline
            Determines whether or not a line bounding this axis is
            drawn.
        showspikes
            Sets whether or not spikes starting from data points to
            this axis' wall are shown on hover.
        showticklabels
            Determines whether or not the tick labels are drawn.
        showtickprefix
            If "all", all tick labels are displayed with a prefix.
            If "first", only the first tick is displayed with a
            prefix. If "last", only the last tick is displayed with
            a suffix. If "none", tick prefixes are hidden.
        showticksuffix
            Same as `showtickprefix` but for tick suffixes.
        spikecolor
            Sets the color of the spikes.
        spikesides
            Sets whether or not spikes extending from the
            projection data points to this axis' wall boundaries
            are shown on hover.
        spikethickness
            Sets the thickness (in px) of the spikes.
        tick0
            Sets the placement of the first tick on this axis. Use
            with `dtick`. If the axis `type` is "log", then you
            must take the log of your starting tick (e.g. to set
            the starting tick to 100, set the `tick0` to 2) except
            when `dtick`=*L<f>* (see `dtick` for more info). If the
            axis `type` is "date", it should be a date string, like
            date data. If the axis `type` is "category", it should
            be a number, using the scale where each category is
            assigned a serial number from zero in the order it
            appears.
        tickangle
            Sets the angle of the tick labels with respect to the
            horizontal. For example, a `tickangle` of -90 draws the
            tick labels vertically.
        tickcolor
            Sets the tick color.
        tickfont
            Sets the tick font.
        tickformat
            Sets the tick label formatting rule using d3 formatting
            mini-languages which are very similar to those in
            Python. For numbers, see:
            https://github.com/d3/d3-format/tree/v1.4.5#d3-format.
            And for dates see: https://github.com/d3/d3-time-
            format/tree/v2.2.3#locale_format. We add two items to
            d3's date formatter: "%h" for half of the year as a
            decimal number as well as "%{n}f" for fractional
            seconds with n digits. For example, *2016-10-13
            09:15:23.456* with tickformat "%H~%M~%S.%2f" would
            display "09~15~23.46"
        tickformatstops
            A tuple of :class:`plotly.graph_objects.layout.scene.ya
            xis.Tickformatstop` instances or dicts with compatible
            properties
        tickformatstopdefaults
            When used in a template (as layout.template.layout.scen
            e.yaxis.tickformatstopdefaults), sets the default
            property values to use for elements of
            layout.scene.yaxis.tickformatstops
        ticklen
            Sets the tick length (in px).
        tickmode
            Sets the tick mode for this axis. If "auto", the number
            of ticks is set via `nticks`. If "linear", the
            placement of the ticks is determined by a starting
            position `tick0` and a tick step `dtick` ("linear" is
            the default value if `tick0` and `dtick` are provided).
            If "array", the placement of the ticks is set via
            `tickvals` and the tick text is `ticktext`. ("array" is
            the default value if `tickvals` is provided).
        tickprefix
            Sets a tick label prefix.
        ticks
            Determines whether ticks are drawn or not. If "", this
            axis' ticks are not drawn. If "outside" ("inside"),
            this axis' are drawn outside (inside) the axis lines.
        ticksuffix
            Sets a tick label suffix.
        ticktext
            Sets the text displayed at the ticks position via
            `tickvals`. Only has an effect if `tickmode` is set to
            "array". Used with `tickvals`.
        ticktextsrc
            Sets the source reference on Chart Studio Cloud for
            `ticktext`.
        tickvals
            Sets the values at which ticks on this axis appear.
            Only has an effect if `tickmode` is set to "array".
            Used with `ticktext`.
        tickvalssrc
            Sets the source reference on Chart Studio Cloud for
            `tickvals`.
        tickwidth
            Sets the tick width (in px).
        title
            :class:`plotly.graph_objects.layout.scene.yaxis.Title`
            instance or dict with compatible properties
        type
            Sets the axis type. By default, plotly attempts to
            determined the axis type by looking into the data of
            the traces that referenced the axis in question.
        visible
            A single toggle to hide the axis while preserving
            interaction like dragging. Default is true when a
            cheater plot is present on the axis, otherwise false
        zeroline
            Determines whether or not a line is drawn at along the
            0 value of this axis. If True, the zero line is drawn
            on top of the grid lines.
        zerolinecolor
            Sets the line color of the zero line.
        zerolinewidth
            Sets the width (in px) of the zero line.
        
Did you mean "calendar"?

Bad property path:
scaleanchor
^^^^^^^^^^^